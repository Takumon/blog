{"data":{"site":{"siteMetadata":{"title":"Takumon Blog","author":"Takuto Inoue"}},"markdownRemark":{"html":"<h2 id=\"ブログをやろうと思った理由\"><a href=\"#%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E3%82%84%E3%82%8D%E3%81%86%E3%81%A8%E6%80%9D%E3%81%A3%E3%81%9F%E7%90%86%E7%94%B1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ブログをやろうと思った理由</h2>\n<p><a href=\"https://qiita.com/\">Qiita</a>は、誰得な作業メモは載せられないし\n<a href=\"http://hatenablog.com/\">はてなブログ</a>は、見た目が好きじゃない...\n一時期、<a href=\"https://nippo.wikihub.io/\">WikiHub日報</a>とかもやっていたんですが、なかなか続かず...\nそのせいか、やったことを3ヶ月後には忘れてしまう状況がココ半年ほど続きまして、\nコリャなんとかせねばということでオリジナルのブログ始めた次第です。</p>\n<h2 id=\"gatsbyを使い始めた理由\"><a href=\"#gatsby%E3%82%92%E4%BD%BF%E3%81%84%E5%A7%8B%E3%82%81%E3%81%9F%E7%90%86%E7%94%B1\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gatsbyを使い始めた理由</h2>\n<p>独自でブログを始めるなら<code class=\"language-text\">簡単</code>、<code class=\"language-text\">便利</code>、<code class=\"language-text\">格好いい</code>、の3つがそろった静的サイトジェネレーターを使おうと考えていました。\nすこし調べただけでも、有名どころでは<a href=\"https://jekyllrb-ja.github.io/\">jekyll</a>、<a href=\"https://gohugo.io/\">Hugo</a>、<a href=\"https://hexo.io/\">Hexo</a>、<a href=\"https://www.gatsbyjs.org/\">Gatsby</a>\nなどがあり、どれも3つの要素を満たせそうではありましたが、\nその中でも、React、PWA、GraphQLなどのフロントエンドよりの技術構成になっているGastbyに興味を引かれたので採用しました。\n読み方はギャッツビーです（ガッツバイではないし、ヘアワックスでもない）。\nちょうどいまReactをやり始めたところなので勉強も兼ねてGatsbyのブログを育てていきたいと思っています。</p>\n<h2 id=\"ブログを作ってみた感想\"><a href=\"#%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E6%84%9F%E6%83%B3\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ブログを作ってみた感想</h2>\n<p>Gatsbyってなに？って状態から30分程度でブログを開設できました。\nデフォルトで既に格好いいブログができあがっています。\n他の静的サイトジェネレーターと比較はしていませんが、記事の表示がとにかく爆速です。\nソースコードのシンタックスハイライトに<a href=\"https://prismjs.com/\">Prism</a>というライブラリを使っており、見た目がきれいな上に指定行をハイライトしたりもできます。またレスポンシブ対応しておりスマホからも見やすいのがうれしいポイントでした🍅</p>\n<h2 id=\"参考\"><a href=\"#%E5%8F%82%E8%80%83\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h2>\n<ul>\n<li>\n<p><a href=\"https://www.gatsbyjs.org/\">Gatsby公式サイト</a></p>\n<ul>\n<li>英語ですが、、、結構充実しています。</li>\n</ul>\n</li>\n<li>\n<p>Gatsby製ブログ(ググるといくつかヒットします。どれも見た目が格好いいので参考にしたいです。)</p>\n<ul>\n<li><a href=\"https://blog.mismithportfolio.com/\">写真やWeb制作についてのブログ</a></li>\n<li><a href=\"https://dvg.179.jp/\">dvg.179</a></li>\n<li><a href=\"https://tmnm.tech/\">tmnm.tech</a></li>\n</ul>\n</li>\n</ul>","headingsDetail":[{"id":"ブログをやろうと思った理由","value":"ブログをやろうと思った理由","depth":2,"parents":[]},{"id":"gatsbyを使い始めた理由","value":"Gatsbyを使い始めた理由","depth":2,"parents":[]},{"id":"ブログを作ってみた感想","value":"ブログを作ってみた感想","depth":2,"parents":[]},{"id":"参考","value":"参考","depth":2,"parents":[]}],"fields":{"title":"Gatsbyでブログ始めました。","excerpt":"ブログをやろうと思った理由Qiitaは、誰得な作業メモは載せられないしはてなブログは、見た目が好きじゃない...一時期、WikiHub日報とかもやっていたんですが、なかなか続かず...そのせいか、やったことを3ヶ月後には忘れてしまう状況がコ...","date":"2018-09-09T22:00:00.000Z","tags":["Gatsby","ブログ"],"thumbnail":""}}},"pageContext":{"slug":"/2018/09/09/","relatedPosts":[{"fields":{"slug":"/2018/09/10/","title":"Gatsby製ブログ開設手順","date":"2018-09-10T19:00:00.000Z","excerpt":"ブログ開設手順Gatsbyってなにって状態から30分程度でブログを開設できました。下記にそのときの手順をメモしておきます。0. 前提条件Git、Node、npmは事前にインストールしておいてください。1. ブログのスターターキットを起動Ga...","tags":["Gatsby","ブログ"],"keywords":["Gatsby"],"thumbnail":""}},{"fields":{"slug":"/gatsby-related-posts-like-hugo","title":"GatsbyでRelated Content(関連記事)を表示する / Hugoの関連記事機能をGatsbyに移植した","date":"2019-02-09T17:00:00.000+09:00","excerpt":"なにこれブログでよく見かけるUIのひとつに関連記事リンクあります。記事下部に関連記事リンクを設けておくと、記事を読み終えたユーザーが、また別の記事を見てくれる可能性が上がるので、回遊率向上という観点で非常に効果的なUIです。そんな関連記事リ...","tags":["Gatsby","Hugo","golang"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2019/02/gatsby-related-posts-like-hugo.png"}},{"fields":{"slug":"/how-to-register-your-blog-in-gatsby-showcase","title":"Gatsbyショーケースに自分のWebサイトを登録する方法","date":"2019-01-15T22:00:00.000+09:00","excerpt":"なにこれGatsbyの公式サイトにはショーケースなるものがあって、世の中に公開されているGatsby製のWebサイトを一覧で見ることができます。実はこのショーケース、けっこう簡単に自分のWebサイトを登録できるということに最近気づきました。...","tags":["Gatsby"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2019/01/how-to-register-your-blog-in-gatsby-showcase.png"}},{"fields":{"slug":"/2018/11/24/","title":"Gatsby themeを使ってみる","date":"2018-11-24T23:40:00.000+09:00","excerpt":"なにこれ下記の記事を読んで、実験的に追加されたGatsby themeで何ができるのかサンプル作って試してみました。そのときのメモです。Gatsby themeはどんな問題を解決してくれるかGatsbyはスキャフォールド機能があって初期導入...","tags":["Gatsby","Gatsby theme"],"keywords":["Gatsby"],"thumbnail":""}},{"fields":{"slug":"/2018/10/14/","title":"Gatsbyにおけるコンポーネント分割とCSS Module","date":"2018-10-14T07:00:00.000Z","excerpt":"なにこれGatsbyでブログを作っていて、機能拡張とともにテンプレートが肥大化してきたので、下記図の青枠単位でコンポーネント分割しました。あわせてCSS Moduleも採用しました。そのときのメモです。CSSをコンポーネントスコープにする方...","tags":["Gatsby","React","CSSModules"],"keywords":["Gatsby"],"thumbnail":""}}],"latestPosts":[{"fields":{"slug":"/how-to-get-user-custom-attributes-in-resolver-with-amplify-appsync-cognito","title":"Amplify + Cognito + AppSyncにおいてリゾルバーでユーザのカスタム属性を取得する方法","date":"2019-04-13T07:14:40.000+09:00","excerpt":"なにこれAppSync + Cognitoにおける認可制御について以前の記事で説明しました。今回は、ユーザーのカスタム属性を使った認可制御（AppSyncのリゾルバーでカスタム属性を取得する方法）についてご紹介します。TL;DRAppSyn...","tags":["Amplify","AppSync","AWS","Cognito"],"keywords":["AWS"],"thumbnail":"/thumbnail/2019/04/how-to-get-user-custom-attributes-in-resolver-with-amplify-appsync-cognito.png"}},{"fields":{"slug":"/vee-validate-custom-validation-locale-message","title":"Vuetify + VeeValidate + VueI18nでカスタムバリデーション作成時にロケールごとのエラーメッセージを設定する方法","date":"2019-04-07T14:10:00.000+09:00","excerpt":"なにこれVuetify + VeeValidateで入力チェックする際に、VueI18nを使ってエラーメッセージを多言語対応・共通化する場合に、カスタムバリデーションのエラーメッセージをロケールごとに設定する方法について紹介します。実装方法...","tags":["Vue.js","Vuetify","VeeValidate","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/04/vee-validate-custom-validation-locale-message.png"}},{"fields":{"slug":"/vuetify-select-tag","title":"VuetifyでSelectタグを使う時の注意点","date":"2019-03-24T23:55:00.000+09:00","excerpt":"なにこれ最近Vue.jsのマテリアルデザインのUIフレームワーク「Vuetify」を使っています。とても便利で、管理アプリのようにデザインにこだわる必要がなければ、CSSをほとんど書かずに済むくらいコンポーネントが充実しています。ただSel...","tags":["Vue.js","Vuetify"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/03/vuetify-select-tag.png"}},{"fields":{"slug":"/aws-appsync-auth-with-cognito","title":"AppSync + Cognitoによる認可制御","date":"2019-03-17T17:45:00.000+09:00","excerpt":"なにこれAppSyncはCognitoと連携して認可制御ができます。今回はそのやり方についてご紹介します。ざっくりいうと以下のようなことが実現可能です。✨スキーマ定義におけるQueryやMutationごとの認可制御（ユーザーグループ）💎...","tags":["AppSync","AWS","Cognito"],"keywords":["AWS"],"thumbnail":"/thumbnail/2019/03/aws-appsync-auth-with-cognito.png"}},{"fields":{"slug":"/aws-appsync-and-serverless-framework","title":"AppSync + Serverless Frameworkによるソースコードの構成管理","date":"2019-03-04T07:50:00.000+09:00","excerpt":"なにこれAWSのGraphQLマネージドサービス「AppSync」はGUIで簡単に設定ができて便利ですが、本格的に開発を進めていくとGUIポチポチでソースコードを管理するのはつらくなってきます。Serverless Frameworkという...","tags":["AppSync","serverless","AWS","GraphQL"],"keywords":["AppSync"],"thumbnail":"/thumbnail/2019/03/aws-appsync-and-serverless-framework.png"}}],"previous":{"fields":{"slug":"/41febdc6-bf5d-50b8-a695-3c017b8f766a/","title":"10分でできる！ @ngrx/storeチュートリアル with @ngrx/schematics","date":"2018-07-30T18:01:02+09:00","excerpt":"なにこれAngularで状態管理する方法をざっくり把握するためのチュートリアルです。@ngrx/storeベースの簡単なアプリ（数をカウントするアプリ）を作成します。作るだけなら10分程度で出来上がるので、とりあえず手を動かしてngrxを最...","tags":["Angular","angular-cli","ngrx","Angular6","Qiita"],"keywords":["Angular"],"thumbnail":""},"id":"41febdc6-bf5d-50b8-a695-3c017b8f766a","title":"10分でできる！ @ngrx/storeチュートリアル with @ngrx/schematics","rendered_body":"\n<h2>\n<span id=\"なにこれ\" class=\"fragment\"></span><a href=\"#%E3%81%AA%E3%81%AB%E3%81%93%E3%82%8C\"><i class=\"fa fa-link\"></i></a>なにこれ</h2>\n\n<p>Angularで状態管理する方法をざっくり把握するためのチュートリアルです。<a href=\"http://ngrx.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/store</a>ベースの簡単なアプリ（数をカウントするアプリ）を作成します。作るだけなら10分程度で出来上がるので、とりあえず手を動かしてngrxを最低限を把握したい人向けです。ソースコードも<a href=\"https://github.com/Takumon/ngrx-tutorial/tree/with-ngrx\" rel=\"nofollow noopener\" target=\"_blank\">GitHub</a>に置いているので参考にしてください。<br>\nngrxを使うとボイラープレートが非常に多くなりますが、今回のチュートリアルでは<a href=\"https://github.com/ngrx/platform/tree/master/docs/schematics\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/schematics</a> を使い、ボイラープレートを自動生成することで極力手間を省いています。</p>\n\n<h2>\n<span id=\"アプリの完成イメージ\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E5%AE%8C%E6%88%90%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8\"><i class=\"fa fa-link\"></i></a>アプリの完成イメージ</h2>\n\n<ul>\n<li>\n<code>+</code>ボタンをクリックするとCountが+1される</li>\n<li>\n<code>-</code> ボタンをクリックするとCountが- 1される\n<a href=\"https://camo.qiitausercontent.com/b480b8a4f23b0ad498a61f36f69be9fae9cef250/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f38653666363435652d613733342d646238642d656336622d3134346330666465653162302e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b480b8a4f23b0ad498a61f36f69be9fae9cef250/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f38653666363435652d613733342d646238642d656336622d3134346330666465653162302e676966\" alt=\"counterapp.gif\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/8e6f645e-a734-db8d-ec6b-144c0fdee1b0.gif\"></a>\n</li>\n</ul>\n\n<h2>\n<span id=\"やることやらないこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8%E3%82%84%E3%82%89%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やること/やらないこと</h2>\n\n<ul>\n<li>やる\n\n<ul>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/store/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/store</a>の使い方\n\n<ul>\n<li>Storeの作り方</li>\n<li>Stateの作り方</li>\n<li>Reducerの作り方</li>\n<li>Actionsの作り方</li>\n</ul>\n</li>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/schematics/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/schematics</a>の使い方\n\n<ul>\n<li>オプションなどを使い極力手間を減らす方法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>やらない （下記を理解するには<a href=\"#%E5%8F%82%E8%80%83\">参考</a>のQiitaの記事を見てください。）\n\n<ul>\n<li>状態管理の説明</li>\n<li>Reduxの説明</li>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/router-store/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/router-store</a>の使い方</li>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/entity/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/entity</a>の使い方</li>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/effects/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/effect</a>の使い方<br>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"チュートリアル概要\" class=\"fragment\"></span><a href=\"#%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>チュートリアル概要</h2>\n\n<p>段階を踏んで、ステップごとに動作確認しながら作成していきます。<br>\n各ステップ終了時点のソースコードはGitHubに用意しています。参考にしてください。<br>\n大部分はSchematicsを使ってngコマンドでボイラープレートを自動生成し、メイン部分のみ実装という感じです。</p>\n\n<ol>\n<li>Angularアプリを生成（1分）  ※<a href=\"https://github.com/Takumon/ngrx-tutorial/tree/generated-with-angualr-cli\" rel=\"nofollow noopener\" target=\"_blank\">終了時点のソース</a>\n</li>\n<li>ngrxを使わずにカウント処理実装（2分）※<a href=\"https://github.com/Takumon/ngrx-tutorial/tree/no-ngrx\" rel=\"nofollow noopener\" target=\"_blank\">終了時点のソース</a>\n</li>\n<li>ngrxインストール、初期設定（2分） ※<a href=\"https://github.com/Takumon/ngrx-tutorial/tree/after-ngrx-setting\" rel=\"nofollow noopener\" target=\"_blank\">終了時点のソース</a>\n</li>\n<li>ngrxを使ってカウント処理実装（5分） ※<a href=\"https://github.com/Takumon/ngrx-tutorial/tree/with-ngrx\" rel=\"nofollow noopener\" target=\"_blank\">終了時点のソース</a>\n</li>\n</ol>\n\n<h2>\n<span id=\"前提条件\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6\"><i class=\"fa fa-link\"></i></a>前提条件</h2>\n\n<ul>\n<li>\n<a href=\"https://nodejs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Node.js</a>インストール済み</li>\n<li>\n<a href=\"https://cli.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular CLI</a>グローバルインストール済み</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> npm i <span class=\"nt\">-g</span> @angular/cli\n</pre></div></div>\n\n<ul>\n<li>\n<a href=\"https://cli.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/schematics</a>グローバルインストール済み</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> npm i <span class=\"nt\">-g</span> @ngrx/schematics\n</pre></div></div>\n\n<h2>\n<span id=\"1-angularアプリを生成1分\" class=\"fragment\"></span><a href=\"#1-angular%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E7%94%9F%E6%88%901%E5%88%86\"><i class=\"fa fa-link\"></i></a>1. Angularアプリを生成（1分）</h2>\n\n<ul>\n<li>ng newコマンドを実行します。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng new ngrx-tutorial\n</pre></div></div>\n\n<ul>\n<li>生成されたアプリ配下に移動し、一旦Webアプリを立ち上げてみます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> <span class=\"nb\">cd </span>ngrx-tutorial\n<span class=\"gp\">$</span> ng serve <span class=\"nt\">-o</span>\n</pre></div></div>\n\n<ul>\n<li>ブラウザが起動し下記のような画面が表示されたら成功です。\n<a href=\"https://camo.qiitausercontent.com/f46653279a0efbe1432919aa808f440fc6eb1ede/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35633139633366302d313034612d336566322d613333642d3331356330663061336639662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/f46653279a0efbe1432919aa808f440fc6eb1ede/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35633139633366302d313034612d336566322d613333642d3331356330663061336639662e706e67\" alt=\"スクリーンショット 2018-07-30 1.03.59.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5c19c3f0-104a-3ef2-a33d-315c0f0a3f9f.png\"></a>\n</li>\n</ul>\n\n<h2>\n<span id=\"2-ngrxを使わずにカウント処理実装2分\" class=\"fragment\"></span><a href=\"#2-ngrx%E3%82%92%E4%BD%BF%E3%82%8F%E3%81%9A%E3%81%AB%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E5%87%A6%E7%90%86%E5%AE%9F%E8%A3%852%E5%88%86\"><i class=\"fa fa-link\"></i></a>2. ngrxを使わずにカウント処理実装（2分）</h2>\n\n<p>カウント処理の資産は全て<code>src/app/counter</code>フォルダ配下に作成します。<br>\nまずはコマンドラインからボイラープレートを作成し、その後カウント処理を実装します。</p>\n\n<h3>\n<span id=\"ボイラープレート作成\" class=\"fragment\"></span><a href=\"#%E3%83%9C%E3%82%A4%E3%83%A9%E3%83%BC%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>ボイラープレート作成</h3>\n\n<ul>\n<li>カウント処理関連資産をまとめるモジュールを作成します。\n\n<ul>\n<li>このモジュールをアプリ全体のモジュールに登録するため<code>--module</code>オプションを指定します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g module counter <span class=\"nt\">--module</span><span class=\"o\">=</span>app.module.ts\n</pre></div></div>\n\n<ul>\n<li>カウント処理用のコンポーネントを作成します。\n\n<ul>\n<li>上記で作成したモジュールにコンポーネントを登録するため<code>--module</code>オプションを指定します。</li>\n<li>最終的にアプリ全体のモジュールにコンポーネントを登録するため<code>--export</code>オプションを指定します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g component counter <span class=\"nt\">--module</span><span class=\"o\">=</span>counter/counter.module.ts <span class=\"nt\">--export</span>\n</pre></div></div>\n\n<ul>\n<li>\n<code>app.component.html</code>修正し、作成したカウント処理用のコンポーネントを呼び出すようにします。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.html</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;app-counter&gt;&lt;/app-counter&gt;</span>\n</pre></div>\n</div>\n\n<ul>\n<li>一旦ここまででWebアプリを立ち上げてみます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng serve <span class=\"nt\">-o</span>\n</pre></div></div>\n\n<ul>\n<li>ブラウザが起動し、下記画面が表示されます。開発者ツールでエラーがなければ成功です。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/6ed3cc13498f56621ca94113a6eacdc34949e17f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37373261373530312d333461372d336566312d363636362d6431336537393338326365362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/6ed3cc13498f56621ca94113a6eacdc34949e17f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37373261373530312d333461372d336566312d363636362d6431336537393338326365362e706e67\" alt=\"スクリーンショット 2018-07-30 1.06.30.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/772a7501-34a7-3ef1-6666-d13e79382ce6.png\"></a></p>\n\n<h3>\n<span id=\"処理実装\" class=\"fragment\"></span><a href=\"#%E5%87%A6%E7%90%86%E5%AE%9F%E8%A3%85\"><i class=\"fa fa-link\"></i></a>処理実装</h3>\n\n<ul>\n<li>カウント用コンポーネントで実際の処理を記述します。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/counter.component.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span><span class=\"p\">,</span> <span class=\"nx\">OnInit</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-counter'</span><span class=\"p\">,</span>\n  <span class=\"na\">templateUrl</span><span class=\"p\">:</span> <span class=\"s1\">'./counter.component.html'</span><span class=\"p\">,</span>\n  <span class=\"na\">styleUrls</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'./counter.component.css'</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">CounterComponent</span> <span class=\"kr\">implements</span> <span class=\"nx\">OnInit</span> <span class=\"p\">{</span>\n  <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n  <span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">increment</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">decrement</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">count</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/counter.component.html</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;button</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">increment</span><span class=\"err\">()\"</span><span class=\"nt\">&gt;</span>+<span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">decrement</span><span class=\"err\">()\"</span><span class=\"nt\">&gt;</span>-<span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"nt\">&lt;div&gt;</span>Count: {{count}}<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n</div>\n\n<ul>\n<li>ここまででWebアプリを立ち上げてみます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng serve <span class=\"nt\">-o</span>\n</pre></div></div>\n\n<ul>\n<li>ブラウザが起動し下記画面が表示されます。<code>+</code>,<code>-</code>ボタンをクリックすると数字が増えたり減ったりした、開発者ツールでもエラーがなければ成功です。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" alt=\"スクリーンショット 2018-07-30 0.59.12.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png\"></a></p>\n\n<h2>\n<span id=\"3-ngrxインストール初期設定2分\" class=\"fragment\"></span><a href=\"#3-ngrx%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A2%E5%88%86\"><i class=\"fa fa-link\"></i></a>3. ngrxインストール、初期設定（2分）</h2>\n\n<p>@ngrx/storeをアプリに導入し、初期設定をします。</p>\n\n<ul>\n<li>下記ライブラリをインストールします。\n\n<ul>\n<li>\n<code>@ngrx/schematics</code>\n\n<ul>\n<li>Angualr CLIでngrxの雛形を作るためのライブラリ</li>\n</ul>\n</li>\n<li>\n<code>@ngrx/store</code>\n\n<ul>\n<li>ngrxでStore,Reducer,Actionを使うためのライブラリ</li>\n</ul>\n</li>\n<li>\n<code>@ngrx/store-devtools</code>\n\n<ul>\n<li>強力なデバッカを使えるようにするためのライブラリ</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> npm i <span class=\"nt\">-D</span> @ngrx/schematics\n<span class=\"gp\">$</span> npm i <span class=\"nt\">-s</span> @ngrx/store\n<span class=\"gp\">$</span> npm i <span class=\"nt\">-s</span> @ngrx/store-devtools\n</pre></div></div>\n\n<p>*<code>@ngrx/schematics</code>をデフォルトのSchematicsに追加します（コマンドラインでngrxのボイラープレート生成時に<code>@ngrx/schematics</code>の指定を省略できるようにするためです。）</p>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng config cli.defaultCollection @ngrx/schematics\n</pre></div></div>\n\n<ul>\n<li>上記を実行すると、<code>angular.json</code>にこのような設定が追加されます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">angular.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\">  </span><span class=\"s2\">\"defaultProject\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ngrx-tutorial\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"cli\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"defaultCollection\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"@ngrx/schematics\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>ルートのStoreを作成します。\n\n<ul>\n<li>\n<code>src/app/state</code>配下に生成したいので<code>--statePath</code>オプションを指定します。</li>\n<li>アプリ全体のモジュールに登録したいので<code>--module</code>オプションを指定します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g store state <span class=\"nt\">--statePath</span> state <span class=\"nt\">--root</span> <span class=\"nt\">--module</span> app.module.ts\n</pre></div></div>\n\n<ul>\n<li>上記コマンドで更新した<code>src/app/app.module.ts</code>で<code>environment</code>のimport文のパスでエラーが出ている場合は修正してください。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">app/src/app.module.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"gd\">- import { environment } from '../../environments/environment';\n</span><span class=\"gi\">+ import { environment } from '../environments/environment';\n</span></pre></div>\n</div>\n\n<ul>\n<li>ここまででWebアプリを立ち上げてみます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng serve <span class=\"nt\">-o</span>\n</pre></div></div>\n\n<ul>\n<li>手順2の動作確認時と同様の挙動になります、開発者ツールでもエラーがなければ成功です。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" alt=\"スクリーンショット 2018-07-30 0.59.12.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png\"></a></p>\n\n<h2>\n<span id=\"4-ngrxを使ってカウント処理実装5分\" class=\"fragment\"></span><a href=\"#4-ngrx%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E5%87%A6%E7%90%86%E5%AE%9F%E8%A3%855%E5%88%86\"><i class=\"fa fa-link\"></i></a>4. ngrxを使ってカウント処理実装（5分）</h2>\n\n<p>ここからは実際にStore、Reducer、Actionを作成し、カウント処理の値をStoreに移行します。<br>\nここで作成する資産はカウンター処理に閉じたものなので、<code>src/app/counter/state</code>配下に作成します。<br>\nまた<code>@ngrx/schemetics</code>のデフォルトではReducer、Actionなどの資産が、役割ごとにフォルダ分けされてしまいますが、１フォルダに集約したほうがソースが修正しやすいので、今回は全て<code>src/app/counter/state</code>の直下に作成します。</p>\n\n<h3>\n<span id=\"ボイラープレート生成\" class=\"fragment\"></span><a href=\"#%E3%83%9C%E3%82%A4%E3%83%A9%E3%83%BC%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E7%94%9F%E6%88%90\"><i class=\"fa fa-link\"></i></a>ボイラープレート生成</h3>\n\n<ul>\n<li>Store\n\n<ul>\n<li>\n<code>src/app/counter/state</code>直下に作成するため<code>--statePath</code>オプションを指定します。</li>\n<li>カウント処理関連モジュールに登録したいので<code>--module</code>オプションを指定します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g store counter/counter <span class=\"nt\">--statePath</span> state <span class=\"nt\">--module</span> counter.module.ts\n</pre></div></div>\n\n<ul>\n<li>Reducer\n\n<ul>\n<li>上記で作成したStoreに本Reducerを登録したいため<code>--reducers</code>オプションを指定します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g reducer counter/state/counter <span class=\"nt\">--reducers</span> index.ts\n</pre></div></div>\n\n<ul>\n<li>Action\n\n<ul>\n<li>\n<code>src/app/counter/state</code>直下に作成するため<code>--flat</code>オプションを登録します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g action counter/state/counter <span class=\"nt\">--flat</span>\n</pre></div></div>\n\n<p>※この時点ではコンパイルエラーがでますので、動作確認はできません。そのまま次に進みます。</p>\n\n<h2>\n<span id=\"処理実装-1\" class=\"fragment\"></span><a href=\"#%E5%87%A6%E7%90%86%E5%AE%9F%E8%A3%85-1\"><i class=\"fa fa-link\"></i></a>処理実装</h2>\n\n<p>依存関係の都合でボイラープレートとは逆順で実装していきます。</p>\n\n<h3>\n<span id=\"action\" class=\"fragment\"></span><a href=\"#action\"><i class=\"fa fa-link\"></i></a>Action</h3>\n\n<p>ボイラープレート生成時から下記のように修正します。<br>\n※コメントはコードの説明なので無視して実装してください。</p>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/state/counter.actions.ts</span></div>\n<div class=\"highlight\"><pre>import { Action } from '@ngrx/store';\n\nexport enum CounterActionTypes {\n// Actionごとに型を定義します。\n<span class=\"gd\">-  LoadCounters = '[Counter] Load Counters'\n</span><span class=\"gi\">+  CountIncrement = '[Counter] Increment Count',\n+  CountDecrement = '[Counter] Decrement Count'\n</span>}\n\n// Actionごとに@ngrx.storeのActionをインプリしたクラスを作成します。\n// 複雑な処理をする場合はコンストラクタ引数をとりますが、\n// 本チュートリアルでは簡単のため引数なしにしています。\n<span class=\"gd\">- export class Counter implements Action {\n-   readonly type = CounterActionTypes.LoadCounters;\n- }\n</span><span class=\"gi\">+ export class CountIncrement implements Action {\n+   readonly type = CounterActionTypes.CountIncrement;\n+   public constructor() {}\n+ }\n+ \n+ export class CountDecrement implements Action {\n+   readonly type = CounterActionTypes.CountDecrement;\n+   public constructor() {}\n+ }\n</span>\n\n// 上記で定義したActionクラスを集約した型を定義します。Reducerで使うためです。\n<span class=\"gd\">- export type CounterActions = LoadCounters;\n</span><span class=\"gi\">+ export type CounterActions = CountIncrement | CountDecrement;\n</span></pre></div>\n</div>\n\n<h2>\n<span id=\"reducer作成\" class=\"fragment\"></span><a href=\"#reducer%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>Reducer作成</h2>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/state/counter.reducer.ts</span></div>\n<div class=\"highlight\"><pre>import { Action } from '@ngrx/store';\n<span class=\"gi\">+ import { CounterActionTypes } from './counter.actions';\n</span>\n\nexport interface State {\n// カウンター処理に置けるStateを定義します。\n<span class=\"gi\">+   count: number;\n</span>}\n\nexport const initialState: State = {\n// カウンター処理に置けるStateの初期値を定義します。\n<span class=\"gi\">+   count: 0\n</span>};\n\n\nexport function reducer(state = initialState, action: Action): State {\n  switch (action.type) {\n// 引数として受け取ったActionの型に応じて処理を振り分けます\n// ここではカウンター処理に関連するアクションのみ拾って、他はStateをそのまま返します。\n<span class=\"gi\">+     case CounterActionTypes.CountIncrement:\n</span>// Stateを変更する場合は、Stateがイミュータブルになるように元のStateには変更を加えず\n// Object.assingで新規オブジェクトを作るようにします。\n<span class=\"gi\">+       return Object.assign({}, { ...state, count : state.count + 1 });\n+     case CounterActionTypes.CountDecrement:\n+       return Object.assign({}, { ...state, count : state.count - 1 });\n</span>    default:\n      return state;\n  }\n}\n\n// コンポーネントでStateのCountを取得するための関数を定義します。\n// Storeの方にも定義しますが、ここでは本ファイルで定義している\n// Stateのプロパティに関連する処理のみ定義します。\n<span class=\"gi\">+ export const getCount = (state: State) =&gt; state.count;\n</span></pre></div>\n</div>\n\n<ul>\n<li>Store</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/state/index.ts</span></div>\n<div class=\"highlight\"><pre>import {\n  ActionReducerMap,\n  createFeatureSelector,\n  createSelector,\n  MetaReducer\n} from '@ngrx/store';\n// ng gコマンド生成時は相対パスがずれている可能性があるため\n// その場合は修正する\n<span class=\"gd\">- import { environment } from '../../environments/environment';\n</span><span class=\"gi\">+ import { environment } from '../../../environments/environment';\n</span>import * as fromCounter from './counter.reducer';\n\nexport interface State {\n\n  counter: fromCounter.State;\n}\n\nexport const reducers: ActionReducerMap&lt;State&gt; = {\n\n  counter: fromCounter.reducer,\n};\n\n\nexport const metaReducers: MetaReducer&lt;State&gt;[] = !environment.production ? [] : [];\n\n// コンポーネントでStateのプロパティを取得するための関数を定義します。\n// 複数コンポーネントで使う度に定義するのは冗長なのでココで共通的に定義します。\n<span class=\"gi\">+ export const getCounterFeatureState = createFeatureSelector&lt;State&gt;('counter');\n+ export const getCounter = createSelector(getCounterFeatureState, s =&gt; s.counter);\n+ export const getCount = createSelector(getCounter, fromCounter.getCount);\n</span></pre></div>\n</div>\n\n<ul>\n<li>Component</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/counter.component.ts</span></div>\n<div class=\"highlight\"><pre>import { Component, OnInit } from '@angular/core';\n<span class=\"gi\">+ import { Observable } from 'rxjs';\n+ import { Store } from '@ngrx/store';\n</span>\n<span class=\"gi\">+ import * as CounterReducer from './state/counter.reducer';\n+ import * as CounterActions from './state/counter.actions';\n+ import { getCount } from './state';\n</span>\n<span class=\"gu\">@Component({\n</span>  selector: 'app-counter',\n  templateUrl: './counter.component.html',\n  styleUrls: ['./counter.component.css']\n})\nexport class CounterComponent implements OnInit {\n// Storeでの値変更を順次受け付けれるように型をObservableに変更します\n<span class=\"gd\">-   count = 0;\n</span><span class=\"gi\">+   count$: Observable&lt;number&gt;;\n</span>\n// Storeをインジェクションします\n<span class=\"gd\">-   constructor() { }\n</span><span class=\"gi\">+   constructor(private store: Store&lt;CounterReducer.State&gt;) {\n</span>// Storeからカウンタを取得します\n<span class=\"gi\">+     this.count$ = store.select(getCount);\n+  }\n</span>\n  ngOnInit() {\n  }\n\n  increment() {\n// インクリメントの実処理はカウンタのReducerに任せるので\n// ここではActionをdispatchするだけです。\n<span class=\"gd\">-     this.count = this.count + 1;\n</span><span class=\"gi\">+     this.store.dispatch(new CounterActions.CountIncrement());\n</span>  }\n\n  decrement() {\n<span class=\"gd\">-     this.count = this.count - 1;\n</span><span class=\"gi\">+     this.store.dispatch(new CounterActions.CountDecrement());\n</span>  }\n\n}\n</pre></div>\n</div>\n\n<ul>\n<li>ConponentのHTML</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/counter.component.html</span></div>\n<div class=\"highlight\"><pre>&lt;button (click)=\"increment()\"&gt;+&lt;/button&gt;\n&lt;button (click)=\"decrement()\"&gt;-&lt;/button&gt;\n&lt;!-- 変数名と型が変わったのでHTMLも若干修正します --&gt;\n<span class=\"gd\">- &lt;div&gt;Count: {{count }}&lt;/div&gt;\n</span><span class=\"gi\">+ &lt;div&gt;Count: {{count$ | async }}&lt;/div&gt;\n</span></pre></div>\n</div>\n\n<ul>\n<li>Webアプリを立ち上げてみます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng serve <span class=\"nt\">-o</span>\n</pre></div></div>\n\n<ul>\n<li>開発者ツールなどで全くエラーが出ていなければ成功です。見た目は変わっていませんが、Countは<code>@ngrx/store</code>で管理されるようになっています。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" alt=\"スクリーンショット 2018-07-30 0.59.12.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png\"></a></p>\n\n<h2>\n<span id=\"補足ストアとストア登録方法\" class=\"fragment\"></span><a href=\"#%E8%A3%9C%E8%B6%B3%E3%82%B9%E3%83%88%E3%82%A2%E3%81%A8%E3%82%B9%E3%83%88%E3%82%A2%E7%99%BB%E9%8C%B2%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>補足：ストアとストア登録方法</h2>\n\n<p>ストアとストア登録処理はボイラープレートで生成するのでココで改めて説明します。</p>\n\n<p><strong>まずはルートのストアです。</strong><br>\nストアは<code>src/app/state/index.ts</code>に作成されます。<br>\n中身を見るとわかりますが、実態はReducerを集約したActionReducerMapです。<br>\nReducerを新しく作成した時は、このマップにどんどん追加していきます。</p>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/state/index.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span>\n  <span class=\"nx\">ActionReducer</span><span class=\"p\">,</span>\n  <span class=\"nx\">ActionReducerMap</span><span class=\"p\">,</span>\n  <span class=\"nx\">createFeatureSelector</span><span class=\"p\">,</span>\n  <span class=\"nx\">createSelector</span><span class=\"p\">,</span>\n  <span class=\"nx\">MetaReducer</span>\n<span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@ngrx/store'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">environment</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../../environments/environment'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kr\">interface</span> <span class=\"nx\">State</span> <span class=\"p\">{</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">reducers</span><span class=\"p\">:</span> <span class=\"nx\">ActionReducerMap</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ココにReducerが追加されていきます。</span>\n  <span class=\"c1\">// 今回のチュートリアルではルートのストアに１つもReducerを定義していないので空っぽです。</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">metaReducers</span><span class=\"p\">:</span> <span class=\"nx\">MetaReducer</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"o\">&gt;</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"o\">!</span><span class=\"nx\">environment</span><span class=\"p\">.</span><span class=\"nx\">production</span> <span class=\"p\">?</span> <span class=\"p\">[]</span> <span class=\"p\">:</span> <span class=\"p\">[];</span>\n\n</pre></div>\n</div>\n\n<p>ストアをモジュールに登録するには下記のように<code>StoreModule.forRoot</code>を使います(ボイラープレートでやってくれます)</p>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/app.module.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"c1\">// ・・・</span>\n  <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"c1\">// ・・・</span>\n    <span class=\"nx\">StoreModule</span><span class=\"p\">.</span><span class=\"nx\">forRoot</span><span class=\"p\">(</span><span class=\"nx\">reducers</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">metaReducers</span> <span class=\"p\">}),</span>\n    <span class=\"o\">!</span><span class=\"nx\">environment</span><span class=\"p\">.</span><span class=\"nx\">production</span> <span class=\"p\">?</span> <span class=\"nx\">StoreDevtoolsModule</span><span class=\"p\">.</span><span class=\"nx\">instrument</span><span class=\"p\">()</span> <span class=\"p\">:</span> <span class=\"p\">[]</span>\n    <span class=\"c1\">// ・・・</span>\n  <span class=\"p\">],</span>\n  <span class=\"c1\">// ・・・</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppModule</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<p><strong>次にカウンタのストアに関してです。</strong><br>\nこちらもルートの場合とほぼ同じです。</p>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/state/index.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"c1\">// ・・・</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">reducers</span><span class=\"p\">:</span> <span class=\"nx\">ActionReducerMap</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// カウンタのReducerをマップに登録しています。</span>\n  <span class=\"na\">counter</span><span class=\"p\">:</span> <span class=\"nx\">fromCounter</span><span class=\"p\">.</span><span class=\"nx\">reducer</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">metaReducers</span><span class=\"p\">:</span> <span class=\"nx\">MetaReducer</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"o\">&gt;</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"o\">!</span><span class=\"nx\">environment</span><span class=\"p\">.</span><span class=\"nx\">production</span> <span class=\"p\">?</span> <span class=\"p\">[]</span> <span class=\"p\">:</span> <span class=\"p\">[];</span>\n<span class=\"c1\">// ・・・</span>\n</pre></div>\n</div>\n\n<p>ただ登録は<code>StoreModule.forFeature</code>を使います。<br>\nこのメソッドは、機能毎に状態管理する時に使うもので、ルートのストアに指定した名前で登録されます。使う時になったら遅延ロードしてくれる機能を持っています。</p>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/counter.module.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"c1\">// ・・・</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">fromCounter</span> <span class=\"k\">from</span> <span class=\"s1\">'./state'</span><span class=\"p\">;</span>\n<span class=\"c1\">// ・・・</span>\n<span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"c1\">// ・・・</span>\n    <span class=\"c1\">// アプリ全体のストアにcounterという名前で登録します</span>\n    <span class=\"nx\">StoreModule</span><span class=\"p\">.</span><span class=\"nx\">forFeature</span><span class=\"p\">(</span><span class=\"s1\">'counter'</span><span class=\"p\">,</span> <span class=\"nx\">fromCounter</span><span class=\"p\">.</span><span class=\"nx\">reducers</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">metaReducers</span><span class=\"p\">:</span> <span class=\"nx\">fromCounter</span><span class=\"p\">.</span><span class=\"nx\">metaReducers</span> <span class=\"p\">})</span>\n    <span class=\"c1\">// ・・・</span>\n  <span class=\"p\">],</span>\n  <span class=\"c1\">// ・・・</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">CounterModule</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>以上で<code>@ngrx/schematics</code>を使った<code>@ngrx/store</code>のチュートリアルは終了です。<br>\n<code>ngrx</code>ライブラリは他にも<code>@ngrx/router-store</code>、<code>@ngrx/entity</code>、<code>@ngrx/effect</code>があるので、<br>\n今回のアプリをベースに拡張し、理解を深めてみるのも良いかもしれません。</p>\n\n<p>AngularはVue.jsなどと比較するとボイラープレートが多くなってしまいます。<br>\nしかし、ソースコード自動生成機能が充実しているので、けっこう便利なフレームワークです！<br>\nあまり周りでAngular使ってる人がいなくて寂しいのですが、、、、皆さん是非Angular使いましょう！</p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<ul>\n<li>GitHub\n\n<ul>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/store/README.md#ngrxstore\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/store</a>\n\n<ul>\n<li>公式ページ。サンプルは少し古いですが、ドキュメントは充実しています。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/schematics/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/schematics</a>\n\n<ul>\n<li>各リンクに行くと、コマンドのオプションの説明などが記載されています。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Medium\n\n<ul>\n<li>\n<a href=\"https://blog.nrwl.io/managing-state-in-angular-applications-22b75ef5625f\" rel=\"nofollow noopener\" target=\"_blank\">Managing State in Angular Applications</a>\n\n<ul>\n<li>Angularで状態管理する時のベストプラクティスを検討し、最終的に@ngrx/storeを紹介している記事です。ソースコードもGitHubにあり、大変参考になります。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Qiita\n\n<ul>\n<li>\n<a href=\"https://qiita.com/puku0x/items/0a8e7224761dc549bd06\" id=\"reference-55d4d1f3588dbe22005a\">@ngrx/storeと@ngrx/effectsの使い方</a>\n\n<ul>\n<li>GitHubに<a href=\"https://github.com/puku0x/ngrx-todo\" rel=\"nofollow noopener\" target=\"_blank\">サンプル</a>もありコード例が多く大変参考になりました。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://qiita.com/musou1500/items/8003c4a3f2b2e80d919f\" id=\"reference-0b88f55e95af744439cc\">@ngrx/schematicsを触ってみる</a>\n\n<ul>\n<li>\n<code>@ngrx/schematics</code>の使い方が網羅されており参考になりました。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://qiita.com/gen2-gk/items/5e5c5b81243def8edc2c#ngrx-%E9%96%A2%E9%80%A3%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AF1%E3%81%A4%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AB%E3%81%BE%E3%81%A8%E3%82%81%E3%82%8B\" id=\"reference-00af0c3c5f2c814f6e6e\">ngrxでハマったポイント</a>\n\n<ul>\n<li>ngrx関連資産をstoreフォルダ配下に集約するという知見はココを参考にさせていただきました。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://qiita.com/kouMatsumoto/items/c8297466c1824953632f\" id=\"reference-2bdc06375583d7c16351\">ngrx紹介</a>\n\n<ul>\n<li>ngrxを知るきっかけになった記事です。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","body":"## なにこれ\nAngularで状態管理する方法をざっくり把握するためのチュートリアルです。[@ngrx/store](http://ngrx.github.io/)ベースの簡単なアプリ（数をカウントするアプリ）を作成します。作るだけなら10分程度で出来上がるので、とりあえず手を動かしてngrxを最低限を把握したい人向けです。ソースコードも[GitHub](https://github.com/Takumon/ngrx-tutorial/tree/with-ngrx)に置いているので参考にしてください。\nngrxを使うとボイラープレートが非常に多くなりますが、今回のチュートリアルでは[@ngrx/schematics](https://github.com/ngrx/platform/tree/master/docs/schematics) を使い、ボイラープレートを自動生成することで極力手間を省いています。\n\n\n## アプリの完成イメージ\n* `+`ボタンをクリックするとCountが+1される\n* `-` ボタンをクリックするとCountが- 1される\n![counterapp.gif](https://qiita-image-store.s3.amazonaws.com/0/49915/8e6f645e-a734-db8d-ec6b-144c0fdee1b0.gif)\n\n## やること/やらないこと\n* やる\n    * [@ngrx/store](https://github.com/ngrx/platform/blob/master/docs/store/README.md)の使い方\n        * Storeの作り方\n        * Stateの作り方\n        * Reducerの作り方\n        * Actionsの作り方\n    * [@ngrx/schematics](https://github.com/ngrx/platform/blob/master/docs/schematics/README.md)の使い方\n        * オプションなどを使い極力手間を減らす方法\n* やらない （下記を理解するには[参考](#参考)のQiitaの記事を見てください。）\n    * 状態管理の説明\n    * Reduxの説明\n    * [@ngrx/router-store](https://github.com/ngrx/platform/blob/master/docs/router-store/README.md)の使い方\n    * [@ngrx/entity](https://github.com/ngrx/platform/blob/master/docs/entity/README.md)の使い方\n    * [@ngrx/effect](https://github.com/ngrx/platform/blob/master/docs/effects/README.md)の使い方  \n    \n\n\n## チュートリアル概要\n段階を踏んで、ステップごとに動作確認しながら作成していきます。\n各ステップ終了時点のソースコードはGitHubに用意しています。参考にしてください。\n大部分はSchematicsを使ってngコマンドでボイラープレートを自動生成し、メイン部分のみ実装という感じです。\n\n1. Angularアプリを生成（1分）  ※[終了時点のソース](https://github.com/Takumon/ngrx-tutorial/tree/generated-with-angualr-cli)\n1. ngrxを使わずにカウント処理実装（2分）※[終了時点のソース](https://github.com/Takumon/ngrx-tutorial/tree/no-ngrx)\n1. ngrxインストール、初期設定（2分） ※[終了時点のソース](https://github.com/Takumon/ngrx-tutorial/tree/after-ngrx-setting)\n1. ngrxを使ってカウント処理実装（5分） ※[終了時点のソース](https://github.com/Takumon/ngrx-tutorial/tree/with-ngrx)\n\n\n\n\n## 前提条件\n* [Node.js](https://nodejs.org/ja/)インストール済み\n* [Angular CLI](https://cli.angular.io/)グローバルインストール済み\n\n```terminal\n$ npm i -g @angular/cli\n```\n\n* [@ngrx/schematics](https://cli.angular.io/)グローバルインストール済み\n\n```terminal\n$ npm i -g @ngrx/schematics\n```\n\n\n## 1. Angularアプリを生成（1分）\n\n* ng newコマンドを実行します。\n\n```terminal\n$ ng new ngrx-tutorial\n```\n\n* 生成されたアプリ配下に移動し、一旦Webアプリを立ち上げてみます。\n\n```terminal\n$ cd ngrx-tutorial\n$ ng serve -o\n```\n\n* ブラウザが起動し下記のような画面が表示されたら成功です。\n![スクリーンショット 2018-07-30 1.03.59.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5c19c3f0-104a-3ef2-a33d-315c0f0a3f9f.png)\n\n\n\n## 2. ngrxを使わずにカウント処理実装（2分）\nカウント処理の資産は全て`src/app/counter`フォルダ配下に作成します。\nまずはコマンドラインからボイラープレートを作成し、その後カウント処理を実装します。\n### ボイラープレート作成\n\n\n* カウント処理関連資産をまとめるモジュールを作成します。\n    * このモジュールをアプリ全体のモジュールに登録するため`--module`オプションを指定します。\n\n```terminal\n$ ng g module counter --module=app.module.ts\n```\n\n\n* カウント処理用のコンポーネントを作成します。\n    * 上記で作成したモジュールにコンポーネントを登録するため`--module`オプションを指定します。\n    * 最終的にアプリ全体のモジュールにコンポーネントを登録するため`--export`オプションを指定します。\n\n```terminal\n$ ng g component counter --module=counter/counter.module.ts --export\n```\n\n\n* `app.component.html`修正し、作成したカウント処理用のコンポーネントを呼び出すようにします。\n\n```html:app.component.html\n<app-counter></app-counter>\n```\n\n* 一旦ここまででWebアプリを立ち上げてみます。\n\n```terminal\n$ ng serve -o\n```\n\n* ブラウザが起動し、下記画面が表示されます。開発者ツールでエラーがなければ成功です。\n\n![スクリーンショット 2018-07-30 1.06.30.png](https://qiita-image-store.s3.amazonaws.com/0/49915/772a7501-34a7-3ef1-6666-d13e79382ce6.png)\n\n\n### 処理実装\n\n* カウント用コンポーネントで実際の処理を記述します。\n\n```ts:src/app/counter/counter.component.ts\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-counter',\n  templateUrl: './counter.component.html',\n  styleUrls: ['./counter.component.css']\n})\nexport class CounterComponent implements OnInit {\n  count = 0;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  increment() {\n    this.count = this.count + 1;\n  }\n\n  decrement() {\n    this.count = this.count - 1;\n  }\n\n}\n\n```\n\n\n```html:src/app/counter/counter.component.html\n<button (click)=\"increment()\">+</button>\n<button (click)=\"decrement()\">-</button>\n<div>Count: {{count}}</div>\n```\n\n\n* ここまででWebアプリを立ち上げてみます。\n\n```terminal\n$ ng serve -o\n```\n\n* ブラウザが起動し下記画面が表示されます。`+`,`-`ボタンをクリックすると数字が増えたり減ったりした、開発者ツールでもエラーがなければ成功です。\n\n![スクリーンショット 2018-07-30 0.59.12.png](https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png)\n\n\n## 3. ngrxインストール、初期設定（2分）\n@ngrx/storeをアプリに導入し、初期設定をします。\n\n\n* 下記ライブラリをインストールします。\n    * `@ngrx/schematics`\n        * Angualr CLIでngrxの雛形を作るためのライブラリ\n    * `@ngrx/store`\n        * ngrxでStore,Reducer,Actionを使うためのライブラリ\n    * `@ngrx/store-devtools`\n        * 強力なデバッカを使えるようにするためのライブラリ\n\n```terminal\n$ npm i -D @ngrx/schematics\n$ npm i -s @ngrx/store\n$ npm i -s @ngrx/store-devtools\n```\n\n\n*`@ngrx/schematics`をデフォルトのSchematicsに追加します（コマンドラインでngrxのボイラープレート生成時に`@ngrx/schematics`の指定を省略できるようにするためです。）\n\n```terminal\n$ ng config cli.defaultCollection @ngrx/schematics\n```\n\n* 上記を実行すると、`angular.json`にこのような設定が追加されます。\n\n```json:angular.json\n  \"defaultProject\": \"ngrx-tutorial\",\n  \"cli\": {\n    \"defaultCollection\": \"@ngrx/schematics\"\n  }\n```\n\n* ルートのStoreを作成します。\n    * `src/app/state`配下に生成したいので`--statePath`オプションを指定します。\n    * アプリ全体のモジュールに登録したいので`--module`オプションを指定します。\n\n```terminal\n$ ng g store state --statePath state --root --module app.module.ts\n```\n\n* 上記コマンドで更新した`src/app/app.module.ts`で`environment`のimport文のパスでエラーが出ている場合は修正してください。\n\n```diff:app/src/app.module.ts\n- import { environment } from '../../environments/environment';\n+ import { environment } from '../environments/environment';\n```\n\n* ここまででWebアプリを立ち上げてみます。\n\n```terminal\n$ ng serve -o\n```\n\n* 手順2の動作確認時と同様の挙動になります、開発者ツールでもエラーがなければ成功です。\n\n![スクリーンショット 2018-07-30 0.59.12.png](https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png)\n\n\n## 4. ngrxを使ってカウント処理実装（5分）\nここからは実際にStore、Reducer、Actionを作成し、カウント処理の値をStoreに移行します。\nここで作成する資産はカウンター処理に閉じたものなので、`src/app/counter/state`配下に作成します。\nまた`@ngrx/schemetics`のデフォルトではReducer、Actionなどの資産が、役割ごとにフォルダ分けされてしまいますが、１フォルダに集約したほうがソースが修正しやすいので、今回は全て`src/app/counter/state`の直下に作成します。\n\n\n### ボイラープレート生成\n\n\n* Store\n    * `src/app/counter/state`直下に作成するため`--statePath`オプションを指定します。\n    * カウント処理関連モジュールに登録したいので`--module`オプションを指定します。\n\n```terminal\n$ ng g store counter/counter --statePath state --module counter.module.ts\n```\n\n* Reducer\n    * 上記で作成したStoreに本Reducerを登録したいため`--reducers`オプションを指定します。\n\n```terminal\n$ ng g reducer counter/state/counter --reducers index.ts\n```\n\n* Action\n    * `src/app/counter/state`直下に作成するため`--flat`オプションを登録します。\n\n```terminal\n$ ng g action counter/state/counter --flat\n``` \n\n※この時点ではコンパイルエラーがでますので、動作確認はできません。そのまま次に進みます。\n\n\n## 処理実装\n依存関係の都合でボイラープレートとは逆順で実装していきます。\n\n### Action\nボイラープレート生成時から下記のように修正します。\n※コメントはコードの説明なので無視して実装してください。\n\n```diff:src/app/counter/state/counter.actions.ts\nimport { Action } from '@ngrx/store';\n\nexport enum CounterActionTypes {\n// Actionごとに型を定義します。\n-  LoadCounters = '[Counter] Load Counters'\n+  CountIncrement = '[Counter] Increment Count',\n+  CountDecrement = '[Counter] Decrement Count'\n}\n\n// Actionごとに@ngrx.storeのActionをインプリしたクラスを作成します。\n// 複雑な処理をする場合はコンストラクタ引数をとりますが、\n// 本チュートリアルでは簡単のため引数なしにしています。\n- export class Counter implements Action {\n-   readonly type = CounterActionTypes.LoadCounters;\n- }\n+ export class CountIncrement implements Action {\n+   readonly type = CounterActionTypes.CountIncrement;\n+   public constructor() {}\n+ }\n+ \n+ export class CountDecrement implements Action {\n+   readonly type = CounterActionTypes.CountDecrement;\n+   public constructor() {}\n+ }\n\n\n// 上記で定義したActionクラスを集約した型を定義します。Reducerで使うためです。\n- export type CounterActions = LoadCounters;\n+ export type CounterActions = CountIncrement | CountDecrement;\n```\n\n\n## Reducer作成\n\n```diff:src/app/counter/state/counter.reducer.ts\nimport { Action } from '@ngrx/store';\n+ import { CounterActionTypes } from './counter.actions';\n\n\nexport interface State {\n// カウンター処理に置けるStateを定義します。\n+   count: number;\n}\n\nexport const initialState: State = {\n// カウンター処理に置けるStateの初期値を定義します。\n+   count: 0\n};\n\n\nexport function reducer(state = initialState, action: Action): State {\n  switch (action.type) {\n// 引数として受け取ったActionの型に応じて処理を振り分けます\n// ここではカウンター処理に関連するアクションのみ拾って、他はStateをそのまま返します。\n+     case CounterActionTypes.CountIncrement:\n// Stateを変更する場合は、Stateがイミュータブルになるように元のStateには変更を加えず\n// Object.assingで新規オブジェクトを作るようにします。\n+       return Object.assign({}, { ...state, count : state.count + 1 });\n+     case CounterActionTypes.CountDecrement:\n+       return Object.assign({}, { ...state, count : state.count - 1 });\n    default:\n      return state;\n  }\n}\n\n// コンポーネントでStateのCountを取得するための関数を定義します。\n// Storeの方にも定義しますが、ここでは本ファイルで定義している\n// Stateのプロパティに関連する処理のみ定義します。\n+ export const getCount = (state: State) => state.count;\n```\n\n* Store\n\n```diff:src/app/counter/state/index.ts\nimport {\n  ActionReducerMap,\n  createFeatureSelector,\n  createSelector,\n  MetaReducer\n} from '@ngrx/store';\n// ng gコマンド生成時は相対パスがずれている可能性があるため\n// その場合は修正する\n- import { environment } from '../../environments/environment';\n+ import { environment } from '../../../environments/environment';\nimport * as fromCounter from './counter.reducer';\n\nexport interface State {\n\n  counter: fromCounter.State;\n}\n\nexport const reducers: ActionReducerMap<State> = {\n\n  counter: fromCounter.reducer,\n};\n\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\n\n// コンポーネントでStateのプロパティを取得するための関数を定義します。\n// 複数コンポーネントで使う度に定義するのは冗長なのでココで共通的に定義します。\n+ export const getCounterFeatureState = createFeatureSelector<State>('counter');\n+ export const getCounter = createSelector(getCounterFeatureState, s => s.counter);\n+ export const getCount = createSelector(getCounter, fromCounter.getCount);\n```\n\n\n\n* Component\n\n```diff:src/app/counter/counter.component.ts\nimport { Component, OnInit } from '@angular/core';\n+ import { Observable } from 'rxjs';\n+ import { Store } from '@ngrx/store';\n\n+ import * as CounterReducer from './state/counter.reducer';\n+ import * as CounterActions from './state/counter.actions';\n+ import { getCount } from './state';\n\n@Component({\n  selector: 'app-counter',\n  templateUrl: './counter.component.html',\n  styleUrls: ['./counter.component.css']\n})\nexport class CounterComponent implements OnInit {\n// Storeでの値変更を順次受け付けれるように型をObservableに変更します\n-   count = 0;\n+   count$: Observable<number>;\n\n// Storeをインジェクションします\n-   constructor() { }\n+   constructor(private store: Store<CounterReducer.State>) {\n// Storeからカウンタを取得します\n+     this.count$ = store.select(getCount);\n+  }\n\n  ngOnInit() {\n  }\n\n  increment() {\n// インクリメントの実処理はカウンタのReducerに任せるので\n// ここではActionをdispatchするだけです。\n-     this.count = this.count + 1;\n+     this.store.dispatch(new CounterActions.CountIncrement());\n  }\n\n  decrement() {\n-     this.count = this.count - 1;\n+     this.store.dispatch(new CounterActions.CountDecrement());\n  }\n\n}\n```\n\n* ConponentのHTML\n\n```diff:src/app/counter/counter.component.html\n<button (click)=\"increment()\">+</button>\n<button (click)=\"decrement()\">-</button>\n<!-- 変数名と型が変わったのでHTMLも若干修正します -->\n- <div>Count: {{count }}</div>\n+ <div>Count: {{count$ | async }}</div>\n```\n\n* Webアプリを立ち上げてみます。\n\n```terminal\n$ ng serve -o\n```\n\n* 開発者ツールなどで全くエラーが出ていなければ成功です。見た目は変わっていませんが、Countは`@ngrx/store`で管理されるようになっています。\n\n![スクリーンショット 2018-07-30 0.59.12.png](https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png)\n\n## 補足：ストアとストア登録方法\nストアとストア登録処理はボイラープレートで生成するのでココで改めて説明します。\n\n**まずはルートのストアです。**\nストアは`src/app/state/index.ts`に作成されます。\n中身を見るとわかりますが、実態はReducerを集約したActionReducerMapです。\nReducerを新しく作成した時は、このマップにどんどん追加していきます。\n\n```ts:src/app/state/index.ts\nimport {\n  ActionReducer,\n  ActionReducerMap,\n  createFeatureSelector,\n  createSelector,\n  MetaReducer\n} from '@ngrx/store';\nimport { environment } from '../../environments/environment';\n\nexport interface State {\n\n}\n\nexport const reducers: ActionReducerMap<State> = {\n  // ココにReducerが追加されていきます。\n  // 今回のチュートリアルではルートのストアに１つもReducerを定義していないので空っぽです。\n};\n\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\n\n```\n\nストアをモジュールに登録するには下記のように`StoreModule.forRoot`を使います(ボイラープレートでやってくれます)\n\n```ts:src/app/app.module.ts\n@NgModule({\n  // ・・・\n  imports: [\n    // ・・・\n    StoreModule.forRoot(reducers, { metaReducers }),\n    !environment.production ? StoreDevtoolsModule.instrument() : []\n    // ・・・\n  ],\n  // ・・・\n})\nexport class AppModule { }\n\n```\n\n**次にカウンタのストアに関してです。**\nこちらもルートの場合とほぼ同じです。\n\n```ts:src/app/counter/state/index.ts\n// ・・・\nexport const reducers: ActionReducerMap<State> = {\n  // カウンタのReducerをマップに登録しています。\n  counter: fromCounter.reducer,\n};\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\n// ・・・\n```\n\nただ登録は`StoreModule.forFeature`を使います。\nこのメソッドは、機能毎に状態管理する時に使うもので、ルートのストアに指定した名前で登録されます。使う時になったら遅延ロードしてくれる機能を持っています。\n\n```ts:src/app/counter/counter.module.ts\n// ・・・\nimport * as fromCounter from './state';\n// ・・・\n@NgModule({\n  imports: [\n    // ・・・\n    // アプリ全体のストアにcounterという名前で登録します\n    StoreModule.forFeature('counter', fromCounter.reducers, { metaReducers: fromCounter.metaReducers })\n    // ・・・\n  ],\n  // ・・・\n})\nexport class CounterModule { }\n\n```\n\n\n## まとめ\n以上で`@ngrx/schematics`を使った`@ngrx/store`のチュートリアルは終了です。\n`ngrx`ライブラリは他にも`@ngrx/router-store`、`@ngrx/entity`、`@ngrx/effect`があるので、\n今回のアプリをベースに拡張し、理解を深めてみるのも良いかもしれません。\n\nAngularはVue.jsなどと比較するとボイラープレートが多くなってしまいます。\nしかし、ソースコード自動生成機能が充実しているので、けっこう便利なフレームワークです！\nあまり周りでAngular使ってる人がいなくて寂しいのですが、、、、皆さん是非Angular使いましょう！\n\n## 参考\n* GitHub\n    * [@ngrx/store](https://github.com/ngrx/platform/blob/master/docs/store/README.md#ngrxstore)\n        * 公式ページ。サンプルは少し古いですが、ドキュメントは充実しています。\n    * [@ngrx/schematics](https://github.com/ngrx/platform/blob/master/docs/schematics/README.md)\n        * 各リンクに行くと、コマンドのオプションの説明などが記載されています。\n* Medium\n    * [Managing State in Angular Applications](https://blog.nrwl.io/managing-state-in-angular-applications-22b75ef5625f)\n        * Angularで状態管理する時のベストプラクティスを検討し、最終的に@ngrx/storeを紹介している記事です。ソースコードもGitHubにあり、大変参考になります。\n* Qiita\n    * [@ngrx/storeと@ngrx/effectsの使い方](https://qiita.com/puku0x/items/0a8e7224761dc549bd06)\n        * GitHubに[サンプル](https://github.com/puku0x/ngrx-todo)もありコード例が多く大変参考になりました。\n    * [@ngrx/schematicsを触ってみる](https://qiita.com/musou1500/items/8003c4a3f2b2e80d919f)\n        * `@ngrx/schematics`の使い方が網羅されており参考になりました。\n    * [ngrxでハマったポイント](https://qiita.com/gen2-gk/items/5e5c5b81243def8edc2c#ngrx-%E9%96%A2%E9%80%A3%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AF1%E3%81%A4%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AB%E3%81%BE%E3%81%A8%E3%82%81%E3%82%8B)\n        * ngrx関連資産をstoreフォルダ配下に集約するという知見はココを参考にさせていただきました。\n    * [ngrx紹介](https://qiita.com/kouMatsumoto/items/c8297466c1824953632f)\n        * ngrxを知るきっかけになった記事です。\n\n\n\n","comments_count":0,"created_at":"2018-07-30T18:01:02+09:00","likes_count":21,"reactions_count":0},"next":{"fields":{"slug":"/2018/09/10/","title":"Gatsby製ブログ開設手順","date":"2018-09-10T19:00:00.000Z","excerpt":"ブログ開設手順Gatsbyってなにって状態から30分程度でブログを開設できました。下記にそのときの手順をメモしておきます。0. 前提条件Git、Node、npmは事前にインストールしておいてください。1. ブログのスターターキットを起動Ga...","tags":["Gatsby","ブログ"],"keywords":["Gatsby"],"thumbnail":""}}}}