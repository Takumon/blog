{"data":{"site":{"siteMetadata":{"title":"Takumon Blog","author":"Takuto Inoue"}},"qiitaPost":{"rendered_body":"<p><a href=\"http://asciidoctor.org/\" rel=\"nofollow noopener\" target=\"_blank\">Asciidoctor</a>を使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。</p>\n\n<p>そこで今回は、Dockerで全文検索サーバの<a href=\"http://fess.codelibs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Fess</a>を立てて、<br>\nドキュメントからJavaScript経由でFessのJSON APIを呼び出すことで、<br>\n全文検索を簡単に導入する方法をご紹介します。</p>\n\n<p>導入するとドキュメントの右上に検索窓が出てきて全文検索できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/e020d2b6619c0b7ce4332c80ea15b89a6efb895e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31323365633737312d666237372d653464632d646637652d6134623430373739323735392e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e020d2b6619c0b7ce4332c80ea15b89a6efb895e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31323365633737312d666237372d653464632d646637652d6134623430373739323735392e676966\" alt=\"6月-24-2017 19-05-32.gif\" title=\"6月-24-2017 19-05-32.gif\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/123ec771-fb77-e4dc-df7e-a4b407792759.gif\"></a></p>\n\n<h2>\n<span id=\"fessとは\" class=\"fragment\"></span><a href=\"#fess%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Fessとは</h2>\n\n<p><a href=\"http://fess.codelibs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Fess</a>は<strong>「5 分で簡単に構築可能な全文検索サーバー」</strong>です。<br>\nJavaベースで構築されており、Apacheライセンスで提供されるオープンソース製品で、無料で使用できます。<br>\n自分でクローラを設定して、自分だけの検索エンジンがつくれるようなイメージです。<br>\nデフォルトで検索画面を提供していますが、JSON APIも提供しているので、様々なシステムと連携可能です。</p>\n\n<h2>\n<span id=\"全体像\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E4%BD%93%E5%83%8F\"><i class=\"fa fa-link\"></i></a>全体像</h2>\n\n<p>ドキュメント用Webサーバに全文検索用のJavaScriptファイルとCSSファイルを追加し、Dockerで全文検索用のFessサーバを立てます。<br>\nFessサーバはドキュメント用Webサーバをクロールし、その情報を保存しておきます。<br>\nドキュメントで全文検索を実施すると、JavaScript経由でFessサーバのJSON AIPを呼び出して、全文検索結果をドキュメントに表示します。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/6fe043176da6b6451722114a3d0418bc40ac8c99/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31306338616334362d323135352d386562372d613565642d3763313363653534346563322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/6fe043176da6b6451722114a3d0418bc40ac8c99/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31306338616334362d323135352d386562372d613565642d3763313363653534346563322e706e67\" alt=\"0_Fess_全体像_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/10c8ac46-2155-8eb7-a5ed-7c13ce544ec2.png\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/729e46c74903de7be597a6ac4adea0c03cd8559f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34306531643435362d323633352d326165642d333333642d3862316165633434373933312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/729e46c74903de7be597a6ac4adea0c03cd8559f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34306531643435362d323633352d326165642d333333642d3862316165633434373933312e706e67\" alt=\"0_Fess_全体像_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/40e1d456-2635-2aed-333d-8b1aec447931.png\"></a></p>\n\n<h2>\n<span id=\"導入手順\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>導入手順</h2>\n\n<p>この導入手順は、下記のような環境（ローカルPCのDocker上にドキュメント用WebサーバとFessサーバが立っている環境）を作った時のものです。<br>\nDockerを使わなくても、ローカルPC以外でも、導入可能です。導入手順は適宜読み替えてください。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/a94911642557c486b240ffa8c3c184c64bfabc2c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30626164623864322d316135382d323262362d343537632d3132626563663361383931312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a94911642557c486b240ffa8c3c184c64bfabc2c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30626164623864322d316135382d323262362d343537632d3132626563663361383931312e706e67\" alt=\"0_Fess_全体像_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/0badb8d2-1a58-22b6-457c-12becf3a8911.png\"></a></p>\n\n<h3>\n<span id=\"fessのインストール\" class=\"fragment\"></span><a href=\"#fess%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>Fessのインストール</h3>\n\n<p>Docker Hubの<a href=\"https://hub.docker.com/r/codelibs/fess/\" rel=\"nofollow noopener\" target=\"_blank\">codelibs/fess</a>を使用します。今回ポートは10084で公開します。<br>\nDockerを使わない場合は<a href=\"http://fess.codelibs.org/ja/11.2/install/index.html\" rel=\"nofollow noopener\" target=\"_blank\">Fess インストールガイド</a>を参考にしてください。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ docker run -d -p 10084:8080 --name fess codelibs/fess:latest\n</pre></div></div>\n\n<h3>\n<span id=\"fessの設定\" class=\"fragment\"></span><a href=\"#fess%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>Fessの設定</h3>\n\n<h4>\n<span id=\"クローラの設定\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>クローラの設定</h4>\n\n<p><code>http://[PCのローカルIPアドレス]:10084/login</code>にアクセスするとログイン画面が表示されます。<br>\nデフォルトのID/PASS　<code>admin/admin</code>でログインしましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/d173fd5ce7a76eb7b5a6ef053a670dd6551d720c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65373930656361392d353037332d393438652d336534332d6437353436643537666165352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d173fd5ce7a76eb7b5a6ef053a670dd6551d720c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65373930656361392d353037332d393438652d336534332d6437353436643537666165352e706e67\" alt=\"1_Fess管理者_ログイン画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/e790eca9-5073-948e-3e43-d7546d57fae5.png\"></a><br>\n<br></p>\n\n<p>ログインするとダッシュボードが表示されます。左ペインの<code>クローラ</code> &gt; <code>Web</code>　を選択しましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/cbfee37bd5d06381615f013da8587b1af91c35aa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61636662653935302d666137342d643063622d336365652d3565386462346465356237342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/cbfee37bd5d06381615f013da8587b1af91c35aa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61636662653935302d666137342d643063622d336365652d3565386462346465356237342e706e67\" alt=\"2_Fess管理者_ダッシュボード.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/acfbe950-fa74-d0cb-3cee-5e8db4de5b74.png\"></a><br>\n<br></p>\n\n<p>Webクローラにはまだ何も登録されていないので、左上の<code>+　新規作成</code>ボタンをクリックしましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/e60be4a90df24cb1275c165752de363b15859b87/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36333130333762342d616162322d386530642d663961612d3364323365633931376132392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e60be4a90df24cb1275c165752de363b15859b87/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36333130333762342d616162322d386530642d663961612d3364323365633931376132392e706e67\" alt=\"3_Fess管理者_Webクロール設定_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/631037b4-aab2-8e0d-f9aa-3d23ec917a29.png\"></a><br>\n<br></p>\n\n<p>Webクロール情報入力画面が表示されます。<br>\n<a href=\"https://camo.qiitausercontent.com/62cd6f97bb7dfebb163873f26b5fda4fabcf89c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653561303963392d376363652d336665632d373838342d3132353863333266613931612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/62cd6f97bb7dfebb163873f26b5fda4fabcf89c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653561303963392d376363652d336665632d373838342d3132353863333266613931612e706e67\" alt=\"3_Fess管理者_Webクロール設定_2.png\" title=\"3_Fess管理者_Webクロール設定_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/ee5a09c9-7cce-3fec-7884-1258c32fa91a.png\"></a></p>\n\n<p>設定項目は色々ありますが、とりあえず下記項目だけ設定しましょう。</p>\n\n<ul>\n<li>名前 \n\n<ul>\n<li>任意の名前を設定してください。</li>\n</ul>\n</li>\n<li>URL \n\n<ul>\n<li>ドキュメント用Webサーバにおいてドキュメントが格納されているルートフォルダのURLを指定してください。末尾に<code>/</code>を付けてください。</li>\n</ul>\n</li>\n<li>クロール対象とするURL \n\n<ul>\n<li>正規表現で値を設定します。上記<code>URL</code>で設定したルートフォルダ配下の全資産を対象とするために、<code>URLで設定した値</code> + <code>.*</code> を指定してください。</li>\n</ul>\n</li>\n<li>検索対象とするURL\n\n<ul>\n<li>正規表現で値を設定します。HTMLのみを検索対象にしたい（JS、CSSなどは除外したい）ので、<code>URLで設定した値</code> + <code>.+\\.html$</code> を指定してください。\n<br>\n<br>\n</li>\n</ul>\n</li>\n</ul>\n\n<p>値を設定したら、画面を下にスクロールして<code>+　作成</code>ボタンをクリックします。<br>\nすると下記のようにWebクロールのデータが１件登録されます。<br>\n<a href=\"https://camo.qiitausercontent.com/8302d25592df90b2bdf59fbf3b43e31ecf106b3e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33643030626635612d663133312d643336372d646535332d6166313062623336383339642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/8302d25592df90b2bdf59fbf3b43e31ecf106b3e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33643030626635612d663133312d643336372d646535332d6166313062623336383339642e706e67\" alt=\"3_Fess管理者_Webクロール設定_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/3d00bf5a-f131-d367-de53-af10bb36839d.png\"></a><br>\n<br></p>\n\n<h4>\n<span id=\"クローラの実行\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AE%E5%AE%9F%E8%A1%8C\"><i class=\"fa fa-link\"></i></a>クローラの実行</h4>\n\n<p>左ペインで　<code>システム</code> &gt; <code>スケジューラ</code> を選択してジョブスケジューラを開きます。<br>\nジョブスケジューラで <code>Default Crawler</code>を選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/52e6c84dc635dabd786a05e2dc2dbc01bbcd62b3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62306165636130642d363461342d343364612d373832622d3061316130636437306238332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/52e6c84dc635dabd786a05e2dc2dbc01bbcd62b3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62306165636130642d363461342d343364612d373832622d3061316130636437306238332e706e67\" alt=\"4_Fess管理者_スケジューラ_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/b0aeca0d-64a4-43da-782b-0a1a0cd70b83.png\"></a><br>\n<br></p>\n\n<p><code>今すぐ開始</code>をクリックします。<br>\n<a href=\"https://camo.qiitausercontent.com/15c56153ff7878a59bfda2bab0ac3b8b6182fa23/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30306537363932302d626661642d656562312d636239392d3732346533613933393261392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/15c56153ff7878a59bfda2bab0ac3b8b6182fa23/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30306537363932302d626661642d656562312d636239392d3732346533613933393261392e706e67\" alt=\"4_Fess管理者_スケジューラ_1.1.png\" title=\"4_Fess管理者_スケジューラ_1.1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/00e76920-bfad-eeb1-cb99-724e3a9392a9.png\"></a><br>\n<br></p>\n\n<p>するとクロールが実行されます。<br>\n<a href=\"https://camo.qiitausercontent.com/b34d527efb0b07d2b04cabccebe97f0e1e4b594c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323564333030662d303766352d373234642d636539332d3865316339373532653130652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b34d527efb0b07d2b04cabccebe97f0e1e4b594c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323564333030662d303766352d373234642d636539332d3865316339373532653130652e706e67\" alt=\"4_Fess管理者_スケジューラ_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/725d300f-07f5-724d-ce93-8e1c9752e10e.png\"></a><br>\n<br></p>\n\n<p>しばらくして<code>F5</code>キーを押してブラウザを更新してください。<br>\nクロールが終了すると、スケジューラの状態が<code>実行中</code>から<code>有効</code>になります。<br>\n<a href=\"https://camo.qiitausercontent.com/2d860e111077a3a0b63a44b45e14e0e18b02fcb1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653466353237372d616163332d616437652d636465622d3431643339623733336331662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2d860e111077a3a0b63a44b45e14e0e18b02fcb1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653466353237372d616163332d616437652d636465622d3431643339623733336331662e706e67\" alt=\"4_Fess管理者_スケジューラ_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/ee4f5277-aac3-ad7e-cdeb-41d39b733c1f.png\"></a><br>\n<br></p>\n\n<h4>\n<span id=\"クローラ実行結果の確認\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>クローラ実行結果の確認</h4>\n\n<p>左ペインの<code>システム情報</code>&gt;<code>クロール情報</code>を選択すると、先ほど実行したクロールの結果が表示されています。その行を選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/e35eccd76c8d85dcc368298adfebb71871f083a7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39326633313062352d383366362d646564612d343438642d6166613863356230663130342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e35eccd76c8d85dcc368298adfebb71871f083a7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39326633313062352d383366362d646564612d343438642d6166613863356230663130342e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_1.png\" title=\"5_Fess管理者_システム情報_クロール情報_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/92f310b5-83f6-deda-448d-afa8c5b0f104.png\"></a><br>\n<br></p>\n\n<p>セッションIDを選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/341936c3d088fb04a1029cc6c891a35253a079da/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34653830636431342d333633342d663636352d623434382d3862346234653761386432312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/341936c3d088fb04a1029cc6c891a35253a079da/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34653830636431342d333633342d663636352d623434382d3862346234653761386432312e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_2.png\" title=\"5_Fess管理者_システム情報_クロール情報_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/4e80cd14-3634-f665-b448-8b4b4e7a8d21.png\"></a><br>\n<br></p>\n\n<p>ここにドキュメント用Webサーバのドキュメントが全て表示されればOKです。<br>\n<a href=\"https://camo.qiitausercontent.com/767e79c91f7521caf880a890deee50513f520ea9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36306238366263342d663730662d343263382d613031372d3566313338623362383865332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/767e79c91f7521caf880a890deee50513f520ea9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36306238366263342d663730662d343263382d613031372d3566313338623362383865332e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_3.png\" title=\"5_Fess管理者_システム情報_クロール情報_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/60b86bc4-f70f-42c8-a017-5f138b3b88e3.png\"></a><br>\n<br></p>\n\n<h3>\n<span id=\"ドキュメント用webサーバに全文検索用資産を配置\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E7%94%A8web%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AB%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E7%94%A8%E8%B3%87%E7%94%A3%E3%82%92%E9%85%8D%E7%BD%AE\"><i class=\"fa fa-link\"></i></a>ドキュメント用Webサーバに全文検索用資産を配置</h3>\n\n<p>全文検索用の資産は<code>full-text-search.js</code>と<code>full-text-search.css</code>の２つです。<br>\n<code>full-text-search.js</code>の変数 FESS_JSON_ENDPOINT(FESSサーバのJSON APIのエンドポイント) は適時置き換えてください。<br>\nこれらの資産をドキュメント用Webサーバのドキュメントのルートフォルダ直下に配置してください。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">full-text-search.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'use strict'</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// FESSサーバのJSON APIのエンドポイント（FessサーバのIPアドレス + /json）</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">FESS_JSON_ENDPOINT</span> <span class=\"o\">=</span> <span class=\"s1\">'http://192.168.1.5:10084/json'</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// １ページあたりの検索結果表示件数</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">COUNT_PAR_PAGE</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n\n\n    <span class=\"c1\">// 目次の</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#toc'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 一番上に検索条件入力エリアを挿入</span>\n        <span class=\"p\">.</span><span class=\"nx\">prepend</span><span class=\"p\">(</span>\n            <span class=\"s1\">'&lt;div id=\"search-area\"&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;form id=\"search-form\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;div class=\"search-input-area\"&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;i class=\"fa fa-search left-icon\"&gt;&lt;/i&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;input id=\"search-query\" placeholder=\"全文検索\" /&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;i class=\"fa fa-close right-icon\"&gt;&lt;/i&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;/div&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;input id=\"search-start\" type=\"hidden\" value=\"0\"/&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;input id=\"search-num\" type=\"hidden\" value=\"'</span> <span class=\"o\">+</span> <span class=\"nx\">COUNT_PAR_PAGE</span> <span class=\"o\">+</span> <span class=\"s1\">'\"/&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;form&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// イベント登録</span>\n        <span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">$searchArea</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 入力項目の検索条件でEnterを押したら、検索処理を実行する</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-form'</span><span class=\"p\">).</span><span class=\"nx\">submit</span><span class=\"p\">({</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 虫眼鏡アイコン押下したら、検索処理を実行する</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".left-icon\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">({</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 検索条件入力したら、</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\"#search-query\"</span><span class=\"p\">).</span><span class=\"nx\">keyup</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n              <span class=\"kd\">var</span> <span class=\"nx\">$this</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n              <span class=\"kd\">var</span> <span class=\"nx\">$rightIcon</span> <span class=\"o\">=</span> <span class=\"nx\">$this</span><span class=\"p\">.</span><span class=\"nx\">parent</span><span class=\"p\">().</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".right-icon\"</span><span class=\"p\">);</span>\n\n              <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">$this</span><span class=\"p\">.</span><span class=\"nx\">val</span><span class=\"p\">().</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                 <span class=\"c1\">// 検索条件に値がある場合は×アイコンの色を濃くする</span>\n                 <span class=\"nx\">$rightIcon</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#555'</span><span class=\"p\">);</span>\n              <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                 <span class=\"c1\">// 検索条件に値がない場合は×アイコンの色を薄くする</span>\n                 <span class=\"nx\">$rightIcon</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#ccc'</span><span class=\"p\">);</span>\n              <span class=\"p\">}</span>\n            <span class=\"p\">});</span>\n\n            <span class=\"c1\">// ×アイコン押下したら、</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".right-icon\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n              <span class=\"c1\">// ×アイコンの色を薄くして</span>\n              <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">).</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#ccc'</span><span class=\"p\">)</span>\n                      <span class=\"c1\">// 検索条件をクリアする</span>\n                     <span class=\"p\">.</span><span class=\"nx\">parent</span><span class=\"p\">().</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\"input\"</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span>\n            <span class=\"p\">});</span>\n        <span class=\"p\">});</span>\n\n    <span class=\"c1\">// ドキュメントタイトルの</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#header&gt;h1'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 直下に検索結果エリアを挿入</span>\n        <span class=\"p\">.</span><span class=\"nx\">before</span><span class=\"p\">(</span>\n            <span class=\"s1\">'&lt;div id=\"search-result-area\"&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div id=\"search-result-subheader\"&gt;&lt;/div&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div id=\"search-result-content\"&gt;&lt;/div&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// イベント登録</span>\n        <span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span>\n                <span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-area'</span><span class=\"p\">)</span>\n                    <span class=\"c1\">// 検索結果エリアのバツアイコンをクリックしたら、</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s1\">'#remove-search-result'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                      <span class=\"kd\">var</span> <span class=\"nx\">$searchResultArea</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">delegateTarget</span><span class=\"p\">)</span>\n                      <span class=\"c1\">// 検索結果エリアを非表示モードにする</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">removeClass</span><span class=\"p\">(</span><span class=\"s1\">'show'</span><span class=\"p\">);</span>\n                      <span class=\"c1\">// 検索結果エリアの中身を削除する</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-subheader'</span><span class=\"p\">).</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-content'</span><span class=\"p\">).</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n                    <span class=\"p\">})</span>\n                    <span class=\"c1\">// 前ページリンクをクリックしたら、１ページ前を検索する</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#prevPageLink\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">)</span>\n                    <span class=\"c1\">// 次ページリンクをクリックしたら、１ページ後を検索する</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#nextPageLink\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n        <span class=\"p\">});</span>\n\n\n\n    <span class=\"cm\">/**\n     * 検索処理\n     *\n     * @param  {eventObject} event\n     * @return {boolean}  submit処理を中断させるために必ずfalseを返却する\n     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">doSearch</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">){</span>\n      <span class=\"c1\">// 検索フィールドの値をトリムして取得</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">searchQuery</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">trim</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-query'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">());</span>\n      <span class=\"c1\">// 空の場合は検索処理を実行しない</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">searchQuery</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// 表示開始位置、表示件数の取得</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-start'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">()),</span>\n          <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-num'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">());</span>\n      <span class=\"c1\">// 表示開始位置のチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">start</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">// 表示件数のチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">num</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"nx\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">// 表示ページ情報の取得</span>\n      <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">navi</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n          <span class=\"c1\">// 前のページの場合</span>\n          <span class=\"nx\">start</span> <span class=\"o\">-=</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n          <span class=\"c1\">// 次のページの場合</span>\n          <span class=\"nx\">start</span> <span class=\"o\">+=</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"nl\">default</span><span class=\"p\">:</span>\n        <span class=\"k\">case</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n          <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// URLを構築</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"nx\">FESS_JSON_ENDPOINT</span> <span class=\"o\">+</span> <span class=\"s1\">'?callback=?'</span> <span class=\"o\">+</span> <span class=\"c1\">// 別ドメインを想定してJSONP形式でリクエストを送信する</span>\n                                     <span class=\"s1\">'&amp;q='</span> <span class=\"o\">+</span> <span class=\"nb\">encodeURIComponent</span><span class=\"p\">(</span><span class=\"nx\">searchQuery</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n                                     <span class=\"s1\">'&amp;start='</span> <span class=\"o\">+</span> <span class=\"nx\">start</span> <span class=\"o\">+</span>\n                                     <span class=\"s1\">'&amp;num='</span> <span class=\"o\">+</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// 検索リクエスト送信</span>\n      <span class=\"c1\">// 別ドメインを想定してJSONP形式でリクエストを送信する</span>\n      <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span>\n          <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"nx\">url</span><span class=\"p\">,</span>\n          <span class=\"na\">dataType</span><span class=\"p\">:</span> <span class=\"s1\">'jsonp'</span><span class=\"p\">,</span>\n          <span class=\"na\">success</span><span class=\"p\">:</span> <span class=\"nx\">renderSearchResult</span>\n      <span class=\"p\">});</span>\n\n\n      <span class=\"c1\">// ページ情報の更新</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#searchNum'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// ページ表示を上部に移動</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">).</span><span class=\"nx\">scrollTop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// サブミットを抑止するためにfalseを返す</span>\n      <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n\n\n    <span class=\"cm\">/**\n     * 検索成功時に検索結果を描画する\n     *\n     * @param  {Anything} data レスポンスデータ\n     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">renderSearchResult</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 検索結果処理</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">dataResponse</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">;</span>\n      <span class=\"c1\">// ステータスチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s2\">\"検索中に問題が発生しました。\"</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// 検索結果領域を表示する</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-area'</span><span class=\"p\">).</span><span class=\"nx\">addClass</span><span class=\"p\">(</span><span class=\"s1\">'show'</span><span class=\"p\">);</span>\n\n      <span class=\"kd\">var</span> <span class=\"nx\">$searchResultSubheader</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-subheader'</span><span class=\"p\">),</span>\n          <span class=\"nx\">$searchResultContent</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-content'</span><span class=\"p\">),</span>\n          <span class=\"nx\">record_count</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">record_count</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// 検索結果がない場合</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">record_count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// サブヘッダーに出力</span>\n        <span class=\"nx\">$searchResultSubheader</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span>  <span class=\"s1\">'&lt;div id=\"remove-search-result\" style=\"float:right;\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/div&gt;'</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// 結果領域に出力</span>\n        <span class=\"nx\">$searchResultContent</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;b&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">q</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/b&gt;に一致する情報は見つかりませんでした。'</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// 検索にヒットした場合</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">page_number</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_number</span><span class=\"p\">,</span>\n          <span class=\"nx\">page_size</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_size</span><span class=\"p\">,</span>\n          <span class=\"nx\">page_count</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_count</span><span class=\"p\">,</span>\n          <span class=\"nx\">startRange</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nx\">page_size</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n          <span class=\"nx\">endRange</span> <span class=\"o\">=</span> <span class=\"nx\">page_number</span> <span class=\"o\">*</span> <span class=\"nx\">page_size</span><span class=\"p\">,</span>\n          <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n          <span class=\"nx\">max</span><span class=\"p\">,</span>\n          <span class=\"nx\">offset</span> <span class=\"o\">=</span> <span class=\"nx\">startRange</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-start'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"nx\">offset</span><span class=\"p\">);</span>\n\n\n      <span class=\"c1\">// サブヘッダーに出力</span>\n      <span class=\"nx\">$searchResultSubheader</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;b&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">q</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/b&gt; の検索結果 '</span> <span class=\"o\">+</span>\n                                <span class=\"nx\">record_count</span> <span class=\"o\">+</span> <span class=\"s2\">\" 件中 \"</span> <span class=\"o\">+</span>  <span class=\"nx\">startRange</span> <span class=\"o\">+</span> <span class=\"s1\">' - '</span> <span class=\"o\">+</span>\n                                <span class=\"nx\">endRange</span> <span class=\"o\">+</span> <span class=\"s1\">' 件目 ('</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">exec_time</span> <span class=\"o\">+</span> <span class=\"s1\">' 秒)'</span> <span class=\"o\">+</span>\n                               <span class=\"s1\">'&lt;div id=\"remove-search-result\" style=\"float:right;\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/div&gt;'</span>\n\n      <span class=\"c1\">// 検索結果領域のクリア</span>\n      <span class=\"nx\">$searchResultContent</span><span class=\"p\">.</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n\n\n      <span class=\"c1\">// 検索結果の出力</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">$resultBody</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;ol/&gt;\"</span><span class=\"p\">);</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">results</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">;</span>\n      <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">max</span> <span class=\"o\">=</span> <span class=\"nx\">results</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">max</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">element</span> <span class=\"o\">=</span>\n            <span class=\"s1\">'&lt;li&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;h4 class=\"title\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;a href=\"'</span> <span class=\"o\">+</span><span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">url_link</span> <span class=\"o\">+</span> <span class=\"s1\">'\"&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">title</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/a&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;/h4&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div class=\"body\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">content_description</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;br/&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;cite&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">site</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/cite&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;/div&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/li&gt;'</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">).</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$resultBody</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">$resultBody</span><span class=\"p\">.</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$searchResultContent</span><span class=\"p\">);</span>\n\n\n      <span class=\"c1\">// ページ番号情報の出力</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">pageArea</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n      <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;div id=\"pageInfo\"&gt;'</span><span class=\"p\">,</span> <span class=\"nx\">page_number</span><span class=\"p\">,</span> <span class=\"s1\">'ページ目&lt;br/&gt;'</span><span class=\"p\">);</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 前のページへのリンク</span>\n        <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;a id=\"prevPageLink\" href=\"#\"&gt;&amp;lt;&amp;lt;前ページへ&lt;/a&gt; '</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">&lt;</span> <span class=\"nx\">page_count</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 次のページへのリンク</span>\n        <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;a id=\"nextPageLink\" href=\"#\"&gt;次ページへ&amp;gt;&amp;gt;&lt;/a&gt;'</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">);</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"p\">)).</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$searchResultContent</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">full-text-search.css</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">@charset</span> <span class=\"s1\">\"UTF-8\"</span><span class=\"p\">;</span>\n\n<span class=\"nf\">#search-area</span> <span class=\"p\">{</span>\n    <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"p\">{</span>\n    <span class=\"nl\">position</span><span class=\"p\">:</span><span class=\"nb\">relative</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* 入力項目 */</span>\n<span class=\"nf\">#search-query</span> <span class=\"p\">{</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span> <span class=\"m\">2em</span><span class=\"p\">;</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">black</span><span class=\"p\">;</span>\n    <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"n\">arial</span><span class=\"p\">,</span><span class=\"nb\">sans-serif</span><span class=\"p\">;</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span>\n    <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">2em</span><span class=\"p\">;</span>\n    <span class=\"nl\">outline</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nt\">input</span><span class=\"nd\">:focus</span> <span class=\"p\">{</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"m\">#4d90fe</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* アイコンは入力項目の左と右に配置する */</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"o\">,</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span> <span class=\"p\">{</span>\n    <span class=\"c\">/* 縦方向の中央寄せ */</span>\n    <span class=\"nl\">position</span><span class=\"p\">:</span><span class=\"nb\">absolute</span><span class=\"p\">;</span>\n    <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">50%</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">-0.5em</span><span class=\"p\">;</span>\n    <span class=\"py\">font-sise</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 要素にマウスを合わせたら、マウスポインタのマークを変える */</span>\n    <span class=\"nl\">cursor</span><span class=\"p\">:</span><span class=\"nb\">pointer</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span> <span class=\"p\">{</span>\n    <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span><span class=\"p\">;</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span><span class=\"m\">#444</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span> <span class=\"p\">{</span>\n    <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 最初は、グレーアウトしておく */</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* アイコンにマウスを合わせたら、サイズを大きくする */</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"nd\">:hover</span><span class=\"o\">,</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1.4em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* 検索結果表示時に適用するスタイル */</span>\n<span class=\"nf\">#search-result-area</span><span class=\"nc\">.show</span> <span class=\"p\">{</span>\n    <span class=\"nl\">background</span><span class=\"p\">:</span> <span class=\"m\">#f8f8f7</span><span class=\"p\">;</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">0px</span> <span class=\"nb\">solid</span><span class=\"p\">;</span>\n    <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h3>\n<span id=\"ドキュメントに全文検索用資産の読み込み処理を追加\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AB%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E7%94%A8%E8%B3%87%E7%94%A3%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF%E5%87%A6%E7%90%86%E3%82%92%E8%BF%BD%E5%8A%A0\"><i class=\"fa fa-link\"></i></a>ドキュメントに全文検索用資産の読み込み処理を追加</h3>\n\n<p>前手順でドキュメント用Webサーバに配置した<code>full-text-search.js</code>と<code>full-text-search.css</code>を、<br>\n各ドキュメントから読み込むようにします。<br>\n<code>full-text-search.js</code>はjQueryに依存しているので、<br>\n既存のドキュメントで読み込んでいない場合はjQueryも読み込みも追加してください。</p>\n\n<p>ドキュメント用Webサーバがこのようなフォルダ構成だとしたら、</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ドキュメント用Webサーバのドキュメントルート\n├── full-text-search.css\n├── full-text-search.js\n└── asciidoctor-sample\n    └── asciidoctor-sample.html\n</pre></div></div>\n\n<p><code>asciidoctor-sample.adoc</code>には下記を追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>++++\n&lt;link rel=\"stylesheet\" href=\"../full-text-search.css\"&gt;&lt;/link&gt;\n&lt;script\n  src=\"https://code.jquery.com/jquery-3.2.1.min.js\"\n  integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\"\n  crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n&lt;script src=\"../full-text-search.js\"&gt;&lt;/script&gt;\n++++\n</pre></div></div>\n\n<h3>\n<span id=\"全文検索ができるかの確認\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%8B%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>全文検索ができるかの確認</h3>\n\n<p>以上の手順を実施すると、Asdciidoctorで全文検索ができるようになります。<br>\nドキュメントをブラウザで見ると、目次上部に検索窓が追加されています。<br>\n<a href=\"https://camo.qiitausercontent.com/daf3699de0e01b28ba4d3c2a8b8b535d3c54a2ab/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39393039336364362d353865382d376364652d613364382d3562656332613032303636382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/daf3699de0e01b28ba4d3c2a8b8b535d3c54a2ab/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39393039336364362d353865382d376364652d613364382d3562656332613032303636382e706e67\" alt=\"7_全文検索イメージ_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/99093cd6-58e8-7cde-a3d8-5bec2a020668.png\"></a><br>\n<br></p>\n\n<p>検索条件を入力し、虫眼鏡アイコンをクリックすると、検索結果が表示されます。<br>\n<a href=\"https://camo.qiitausercontent.com/5d8e0c5f2db223d5f021d484351b0c840010bb4f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63646533643865612d643838332d613636622d663838642d3961353934313032366263392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/5d8e0c5f2db223d5f021d484351b0c840010bb4f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63646533643865612d643838332d613636622d663838642d3961353934313032366263392e706e67\" alt=\"7_全文検索イメージ_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/cde3d8ea-d883-a66b-f88d-9a5941026bc9.png\"></a><br>\n<br></p>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>FessのREST APIを使用してAsciidoctorで全文検索できるようにする方法を紹介しました。<br>\nFessのREST APIを使えば、Asciidoctorに限らず、様々なシステムに全文検索機能を導入できそうです。</p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<ul>\n<li><a href=\"http://fess.codelibs.org/ja/articles/article-4.html#js\" rel=\"nofollow noopener\" target=\"_blank\">Fess で作るApache Solrベースの検索サーバー 〜 REST API 編</a></li>\n<li><a href=\"http://qiita.com/cookienote/items/1f2443be25630a78d946\" id=\"reference-69c989703115d994be84\">全文検索サーバー Fess を Docker で動かす</a></li>\n</ul>\n","headings":[{"id":"fessとは","value":"Fessとは","depth":2,"parents":[]},{"id":"全体像","value":"全体像","depth":2,"parents":[]},{"id":"導入手順","value":"導入手順","depth":2,"parents":[]},{"id":"fessのインストール","value":"Fessのインストール","depth":3,"parents":[{"id":"導入手順","value":"導入手順","depth":2}]},{"id":"fessの設定","value":"Fessの設定","depth":3,"parents":[{"id":"導入手順","value":"導入手順","depth":2}]},{"id":"クローラの設定","value":"クローラの設定","depth":4,"parents":[{"id":"fessの設定","value":"Fessの設定","depth":3},{"id":"導入手順","value":"導入手順","depth":2}]},{"id":"クローラの実行","value":"クローラの実行","depth":4,"parents":[{"id":"fessの設定","value":"Fessの設定","depth":3},{"id":"導入手順","value":"導入手順","depth":2}]},{"id":"クローラ実行結果の確認","value":"クローラ実行結果の確認","depth":4,"parents":[{"id":"fessの設定","value":"Fessの設定","depth":3},{"id":"導入手順","value":"導入手順","depth":2}]},{"id":"ドキュメント用webサーバに全文検索用資産を配置","value":"ドキュメント用Webサーバに全文検索用資産を配置","depth":3,"parents":[{"id":"導入手順","value":"導入手順","depth":2}]},{"id":"ドキュメントに全文検索用資産の読み込み処理を追加","value":"ドキュメントに全文検索用資産の読み込み処理を追加","depth":3,"parents":[{"id":"導入手順","value":"導入手順","depth":2}]},{"id":"全文検索ができるかの確認","value":"全文検索ができるかの確認","depth":3,"parents":[{"id":"導入手順","value":"導入手順","depth":2}]},{"id":"まとめ","value":"まとめ","depth":2,"parents":[]},{"id":"参考","value":"参考","depth":2,"parents":[]}],"fields":{"title":"Fessを使用して、Asciidoctorで簡単に全文検索できるようにする","excerpt":"Asciidoctorを使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。そこで今回は、Dockerで...","date":"2017-06-26T00:21:37+09:00","tags":["JavaScript","全文検索","ドキュメント","Fess","asciidoctor","Qiita"]},"user":{"id":"Takumon","profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/49915/profile-images/1488080194","description":"JavaのSIer. 趣味はJavaScript. \r\n週1でブログ更新してます. https://takumon.com/\r\n最近はGatsbyJS,Nuxt.js,GraphQLなどなど."}}},"pageContext":{"slug":"/270e2fae-ed90-5539-8c90-a2ed93ebba83/","previous":{"fields":{"slug":"/94324d66-4d90-51bd-8970-5e5fce7ed13c/","title":"Jenkins PipelineでYamlを設定ファイルとして使う方法","date":"2017-06-17T12:14:16+09:00","excerpt":"Jenkins PipelineのJenkinsfileを作っていて、設定ファイル(Gradleでいう、gradle.propertiesのような感じ)が欲しいと思う時があります。今回はYamlファイルをJnekinsfileから読み込んで...","tags":["Jenkins","CI","Pipeline","Qiita"]},"id":"94324d66-4d90-51bd-8970-5e5fce7ed13c","title":"Jenkins PipelineでYamlを設定ファイルとして使う方法","rendered_body":"<p>Jenkins PipelineのJenkinsfileを作っていて、設定ファイル(Gradleでいう、gradle.propertiesのような感じ)が欲しいと思う時があります。今回はYamlファイルをJnekinsfileから読み込んで設定ファイルとして使う方法をご紹介します。</p>\n\n<h1>\n<span id=\"1-pipeline-utility-steps-pluginをインストール\" class=\"fragment\"></span><a href=\"#1-pipeline-utility-steps-plugin%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>1. <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Utility+Steps+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Pipeline Utility Steps Plugin</a>をインストール</h1>\n\n<p>Jenkinsで様々な形式のファイルが簡単に読み込めるようになるプラグインです。Yamlファイルの読み込みに使います。Jenkins初期設定時のSuggested Pluginには入っていないので、自分でインストールしましょう。</p>\n\n<h1>\n<span id=\"2-configymlを作成\" class=\"fragment\"></span><a href=\"#2-configyml%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2. config.ymlを作成</h1>\n\n<p>プロジェクト直下（Jenkinsfileと同じ場所）にconfig.ymlを作ります。 </p>\n\n<div class=\"code-frame\" data-lang=\"yaml\">\n<div class=\"code-lang\"><span class=\"bold\">config.yml</span></div>\n<div class=\"highlight\"><pre><span class=\"na\">someProp</span><span class=\"pi\">:</span> <span class=\"s\">値１</span>\n<span class=\"na\">someCategory</span><span class=\"pi\">:</span>\n  <span class=\"na\">prop</span><span class=\"pi\">:</span> <span class=\"s\">値２</span>\n  <span class=\"na\">arrayProp</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"s\">配列値０</span>\n    <span class=\"pi\">-</span> <span class=\"s\">配列値１</span>\n    <span class=\"pi\">-</span> <span class=\"s\">配列値２</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"3-jenkinsfileを作成\" class=\"fragment\"></span><a href=\"#3-jenkinsfile%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>3. Jenkinsfileを作成</h1>\n\n<p>Jenkinsfileを下記のようにします。今回はDeclarative Pipelineの書き方ですが、Scripted Pipelinesでもほとんど同じ書き方だと思います。</p>\n\n<div class=\"code-frame\" data-lang=\"groovy\">\n<div class=\"code-lang\"><span class=\"bold\">Jenkinsfie</span></div>\n<div class=\"highlight\"><pre><span class=\"n\">pipeline</span> <span class=\"o\">{</span>\n    <span class=\"n\">agent</span> <span class=\"n\">any</span>\n\n    <span class=\"n\">environment</span> <span class=\"o\">{</span>\n        <span class=\"n\">CONFIG</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span> <span class=\"c1\">//この時点ではプロジェクトの設定ファイルを読み込めないので仮の値を設定しておく</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">stages</span> <span class=\"o\">{</span>\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'チェックアウトして設定ファイル読み込み'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// プロジェクトをチェックアウト</span>\n                <span class=\"n\">checkout</span> <span class=\"n\">scm</span>\n\n                <span class=\"n\">script</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">// チェックアウト後に設定ファイルを読み込む</span>\n                    <span class=\"c1\">// Pipeline Utility Steps Pluginの関数を使う</span>\n                    <span class=\"n\">CONFIG</span> <span class=\"o\">=</span> <span class=\"n\">readYaml</span><span class=\"o\">(</span><span class=\"nl\">file:</span> <span class=\"s1\">'config.yml'</span><span class=\"o\">)</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'設定ファイル参照'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"n\">echo</span> <span class=\"s2\">\"CONFIG.someProp ＝ ${CONFIG.someProp}\"</span>\n                <span class=\"n\">echo</span> <span class=\"s2\">\"CONFIG.someCategory.prop ＝ ${CONFIG.someCategory.prop}\"</span>\n                <span class=\"n\">echo</span> <span class=\"s2\">\"CONFIG.someCategory.arrayProp[0] ＝ ${CONFIG.someCategory.arrayProp[0]}\"</span>\n                <span class=\"n\">echo</span> <span class=\"s2\">\"CONFIG.someCategory.arrayProp[1] ＝ ${CONFIG.someCategory.arrayProp[1]}\"</span>\n                <span class=\"n\">echo</span> <span class=\"s2\">\"CONFIG.someCategory.arrayProp[2] ＝ ${CONFIG.someCategory.arrayProp[2]}\"</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>これでJobを実行すると下記のようなコンソールログが出力されます。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">Jenkinsのコンソール出力（一部抜粋）</span></div>\n<div class=\"highlight\"><pre>[Pipeline] { (設定ファイル参照)\n[Pipeline] echo\nCONFIG.someProp ＝ 値１\n[Pipeline] echo\nCONFIG.someCategory.prop ＝ 値２\n[Pipeline] echo\nCONFIG.someCategory.arrayProp[0] ＝ 配列値０\n[Pipeline] echo\nCONFIG.someCategory.arrayProp[1] ＝ 配列値１\n[Pipeline] echo\nCONFIG.someCategory.arrayProp[2] ＝ 配列値２\n</pre></div>\n</div>\n\n<h2>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h2>\n\n<p>今回はYamlファイルをJenkins Pipelineの設定ファイルとして使ってみました。<br>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Utility+Steps+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Pipeline Utility Steps Plugin</a>はpropertiesファイルも読み込めるので、gradle.propertiesを読み込んで、設定ファイルをGradleとJenkins Pipelineで共有することもできそうです。</p>\n","body":"Jenkins PipelineのJenkinsfileを作っていて、設定ファイル(Gradleでいう、gradle.propertiesのような感じ)が欲しいと思う時があります。今回はYamlファイルをJnekinsfileから読み込んで設定ファイルとして使う方法をご紹介します。\n\n# 1. [Pipeline Utility Steps Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Utility+Steps+Plugin)をインストール\nJenkinsで様々な形式のファイルが簡単に読み込めるようになるプラグインです。Yamlファイルの読み込みに使います。Jenkins初期設定時のSuggested Pluginには入っていないので、自分でインストールしましょう。\n\n# 2. config.ymlを作成\nプロジェクト直下\u001c（Jenkinsfileと同じ場所）にconfig.ymlを作ります。 \n\n```yaml:config.yml\nsomeProp: 値１\nsomeCategory:\n  prop: 値２\n  arrayProp:\n    - 配列値０\n    - 配列値１\n    - 配列値２\n```\n\n# 3. Jenkinsfileを作成\nJenkinsfileを下記のようにします。今回はDeclarative Pipelineの書き方ですが、Scripted Pipelinesでもほとんど同じ書き方だと思います。\n\n```groovy:Jenkinsfie\npipeline {\n    agent any\n    \n    environment {\n        CONFIG = \"\" //この時点ではプロジェクトの設定ファイルを読み込めないので仮の値を設定しておく\n    }\n    \n    stages {\n        stage('チェックアウトして設定ファイル読み込み') {\n            steps {\n                // プロジェクトをチェックアウト\n                checkout scm\n                \n                script {\n                    // チェックアウト後に設定ファイルを読み込む\n                    // Pipeline Utility Steps Pluginの関数を使う\n                    CONFIG = readYaml(file: 'config.yml')\n                }\n            }\n        }\n        \n        stage('設定ファイル参照') {\n            steps {\n                echo \"CONFIG.someProp ＝ ${CONFIG.someProp}\"\n                echo \"CONFIG.someCategory.prop ＝ ${CONFIG.someCategory.prop}\"\n                echo \"CONFIG.someCategory.arrayProp[0] ＝ ${CONFIG.someCategory.arrayProp[0]}\"\n                echo \"CONFIG.someCategory.arrayProp[1] ＝ ${CONFIG.someCategory.arrayProp[1]}\"\n                echo \"CONFIG.someCategory.arrayProp[2] ＝ ${CONFIG.someCategory.arrayProp[2]}\"\n            }\n        }\n    }\n}\n```\n\nこれでJobを実行すると下記のようなコンソールログが出力されます。\n\n```:Jenkinsのコンソール出力（一部抜粋）\n[Pipeline] { (設定ファイル参照)\n[Pipeline] echo\nCONFIG.someProp ＝ 値１\n[Pipeline] echo\nCONFIG.someCategory.prop ＝ 値２\n[Pipeline] echo\nCONFIG.someCategory.arrayProp[0] ＝ 配列値０\n[Pipeline] echo\nCONFIG.someCategory.arrayProp[1] ＝ 配列値１\n[Pipeline] echo\nCONFIG.someCategory.arrayProp[2] ＝ 配列値２\n```\n\n\n\n## 最後に\n今回はYamlファイルをJenkins Pipelineの設定ファイルとして使ってみました。\n[Pipeline Utility Steps Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Utility+Steps+Plugin)はpropertiesファイルも読み込めるので、gradle.propertiesを読み込んで、設定ファイルをGradleとJenkins Pipelineで共有することもできそうです。\n","comments_count":0,"created_at":"2017-06-17T12:14:16+09:00","likes_count":3,"reactions_count":0},"next":{"fields":{"slug":"/bb5bc899-9dfd-5e67-bc4c-bc422ba8d176/","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その１. ビルド編","date":"2017-07-19T02:06:59+09:00","excerpt":"やりたいことAngular CLI使って、MEANスタック(MongoDB + Express + Angular + NodeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。フロント側とサーバ側の両方をweb...","tags":["JavaScript","MongoDB","Express","TypeScript","AngularJS","Qiita"]},"id":"bb5bc899-9dfd-5e67-bc4c-bc422ba8d176","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その１. ビルド編","rendered_body":"\n<h2>\n<span id=\"やりたいこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたいこと</h2>\n\n<ul>\n<li>Angular CLI使って、MEANスタック(<strong>M</strong>ongoDB + <strong>E</strong>xpress + <strong>A</strong>ngular + <strong>N</strong>odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。</li>\n<li>フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。</li>\n<li>Dockerを使ってアプリを簡単に配布したい。</li>\n</ul>\n\n<p>これらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。</p>\n\n<ul>\n<li>その１. ビルド編　⇦　今回はココ</li>\n<li><a href=\"http://qiita.com/Takumon/items/b4211fcabad740baa551\" id=\"reference-b35cd1a7f8ba1daaecd8\">その２. テスト編</a></li>\n<li>その３. Dockerビルド編</li>\n</ul>\n\n<h2>\n<span id=\"その１-ビルド編\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%81%AE%EF%BC%91-%E3%83%93%E3%83%AB%E3%83%89%E7%B7%A8\"><i class=\"fa fa-link\"></i></a>その１. ビルド編</h2>\n\n<p>Angular CLIで作成したプロジェクトをベースに、<br>\nMongoDBに登録したメッセージを画面に一覧で表示するアプリを作成していきます。<br>\nメッセージを登録すると一覧に追加されていくようなアプリです。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" alt=\"アプリ概要.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png\"></a></p>\n\n<h3>\n<span id=\"プロジェクト構成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクト構成</h3>\n\n<p>今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。<br>\n<a href=\"https://github.com/Takumon/angular4-express4-typescritp2/tree/build\" rel=\"nofollow noopener\" target=\"_blank\">リポジトリ</a>も用意しているので詳細はそちらを参照してください。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">プロジェクトの構成（完成イメージ）</span></div>\n<div class=\"highlight\"><pre>.\n├── dist                ・・・(1) コンパイル資産出力先\n│   └── server　　　　　　　　      ・・・(1-1)　コンパイルされたサーバ資産\n│       ├── app.js\n│       ├── app.js.map\n│       ├── bin\n│       │   ├── www.js\n│       │   └── www.js.map\n│       ├── config.js\n│       ├── config.js.map\n│       ├── models\n│       │   ├── message.js\n│       │   └── message.js.map\n│       ├── public      ・・・(1-2) コンパイルされたクライアント資産\n│       │   ├── favicon.ico\n│       │   ├── index.html\n│       │   ├── inline.bundle.js\n│       │   ├── inline.bundle.js.map\n│       │   ├── main.bundle.js\n│       │   ├── main.bundle.js.map\n│       │   ├── polyfills.bundle.js\n│       │   ├── polyfills.bundle.js.map\n│       │   ├── styles.bundle.js\n│       │   ├── styles.bundle.js.map\n│       │   ├── vendor.bundle.js\n│       │   └── vendor.bundle.js.map\n│       └── routes\n│           ├── message.js\n│           └── message.js.map\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── e2e\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── server               ・・・(2)　サーバ資産\n│   ├── app.ts\n│   ├── bin\n│   │   └── www.ts\n│   ├── config.ts\n│   ├── models\n│   │   └── message.ts\n│   ├── routes\n│   │   └── message.ts\n│   └── tsconfig.server.json\n├── src                   ・・・(3)　クライアント資産\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       └── message.service.ts\n│   ├── assets\n│   ├── environments\n│   │   ├── environment.prod.ts\n│   │   └── environment.ts\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── main.ts\n│   ├── polyfills.ts\n│   ├── styles.css\n│   ├── test.ts\n│   ├── tsconfig.app.json\n│   ├── tsconfig.spec.json\n│   └── typings.d.ts\n├── karma.conf.js\n├── package-lock.json\n├── package.json\n├── protractor.conf.js\n├── proxy.conf.json    ・・・(4) \n├── tsconfig.json\n├── tslint.json\n└── README.md\n</pre></div>\n</div>\n\n<h4>\n<span id=\"各資産について\" class=\"fragment\"></span><a href=\"#%E5%90%84%E8%B3%87%E7%94%A3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>各資産について</h4>\n\n<h5>\n<span id=\"1-dist\" class=\"fragment\"></span><a href=\"#1-dist\"><i class=\"fa fa-link\"></i></a>(1) dist</h5>\n\n<p>コンパイルした資産の出力先フォルダ</p>\n\n<h5>\n<span id=\"1-1-distserver\" class=\"fragment\"></span><a href=\"#1-1-distserver\"><i class=\"fa fa-link\"></i></a>(1-1) dist/server</h5>\n\n<p>ここにサーバ側のコンパイルされたjsファイルが出力されます。<br>\nserverフォルダを設けているのは本資産とテスト資産を分離したかったからです。<br>\nその２. テスト編で説明しますが、サーバ側テスト用jsファイルはdist配下のserver_testフォルダに出力されるようにしています。</p>\n\n<h5>\n<span id=\"1-2-distserverpublic\" class=\"fragment\"></span><a href=\"#1-2-distserverpublic\"><i class=\"fa fa-link\"></i></a>(1-2) dist/server/public</h5>\n\n<p>コンパイルされたクライアント資産。<br>\nサーバ側アプリの資産の一部としてコンパイルされるようにしています。<br>\nExpressのアプリでは静的資産をpublicフォルダに置くのが一般的なのでこうしました。</p>\n\n<h5>\n<span id=\"2-server\" class=\"fragment\"></span><a href=\"#2-server\"><i class=\"fa fa-link\"></i></a>(2) server</h5>\n\n<p>サーバ資産を格納するためのディレクトリ。<br>\nいろいろ悩みましたが、TypeScript資産をコンパイルすることとテストすることを考慮してこのような構成にしました。</p>\n\n<h5>\n<span id=\"3-src\" class=\"fragment\"></span><a href=\"#3-src\"><i class=\"fa fa-link\"></i></a>(3) src</h5>\n\n<p>フロントの実行資産とテスト資産を格納するためのディレクリ。<br>\nAngular CLIでプロジェクトを作成するとデフォルトで作成されます。<br>\nビルドやアプリ起動は<code>ng</code>コマンドで実施します。</p>\n\n<h5>\n<span id=\"4-proxyconfjson\" class=\"fragment\"></span><a href=\"#4-proxyconfjson\"><i class=\"fa fa-link\"></i></a>(4) proxy.conf.json</h5>\n\n<p><code>npm start</code>でフロント側とサーバ側を同時に起動した時に、クライアント側からサーバ側へのリクエストを送れるようにするためのプロキシ設定です。</p>\n\n<h2>\n<span id=\"構築手順\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E7%AF%89%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>構築手順</h2>\n\n<h3>\n<span id=\"1-プロジェクト作成\" class=\"fragment\"></span><a href=\"#1-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>1. プロジェクト作成</h3>\n\n<ul>\n<li>\n<p>Angular CLIをインストール</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install -g @angular/cli\n</pre></div></div>\n</li>\n<li>\n<p>プロジェクトを生成、Angular CLIであらかじめ定義している依存ライブラリをインストール</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ ng new sample\n$ cd sample\n$ npm install\n</pre></div></div>\n</li>\n<li>\n<p>Angular CLIであらかじめ定義している依存ライブラリの他に必要なものををインストール<br>\n</p>\n<dd>\n<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/express\" rel=\"nofollow noopener\" target=\"_blank\"><code>express</code></a><br>\n    </dt>\n<dd>Webアプリケーションフレームワーク<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/body-parser\" rel=\"nofollow noopener\" target=\"_blank\"><code>body-parser</code></a><br>\n    </dt>\n<dd>リクエストボディのパーサー<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/mongoose\" rel=\"nofollow noopener\" target=\"_blank\"><code>mongoose</code></a><br>\n    </dt>\n<dd>MongoDBへのアクセスを簡単にしてくれるAPI<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/nodemon\" rel=\"nofollow noopener\" target=\"_blank\"><code>nodemon</code></a><br>\n    </dt>\n<dd>node実行時にソースの変更を自動反映してくれるツール<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/npm-run-all\" rel=\"nofollow noopener\" target=\"_blank\"><code>npm-run-all</code></a><br>\n    </dt>\n<dd>npm-scripts の連結実行を管理するためのパッケージ<br>\n</dd>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install --save express body-parser mongoose\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n</pre></div></div>\n</li>\n</ul>\n\n<h3>\n<span id=\"2-サーバ側を作成\" class=\"fragment\"></span><a href=\"#2-%E3%82%B5%E3%83%BC%E3%83%90%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2. サーバ側を作成</h3>\n\n<p>Angular CLIで作ったプロジェクトの直下に<code>server</code>フォルダを作って、その中にサーバ側の処理を書いていきます。</p>\n\n<h4>\n<span id=\"servermodelsmessagets\" class=\"fragment\"></span><a href=\"#servermodelsmessagets\"><i class=\"fa fa-link\"></i></a>server/models/message.ts</h4>\n\n<p>MongoDBにアクセスするためのモデルを定義します。<br>\nDBアクセスにはmangoosを使います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Message</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'messages'</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">}</span>\n<span class=\"p\">}));</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverroutesmessagets\" class=\"fragment\"></span><a href=\"#serverroutesmessagets\"><i class=\"fa fa-link\"></i></a>server/routes/message.ts</h4>\n\n<p>エンドポイントごとの処理を記述するルータを定義します。<br>\nメッセージの取得と登録には<code>server/models/message.ts</code>を使います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">http</span> <span class=\"k\">from</span> <span class=\"s1\">'http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Router</span><span class=\"p\">,</span> <span class=\"nx\">Response</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'express'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../models/message'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">messageRouter</span><span class=\"p\">:</span> <span class=\"nx\">Router</span> <span class=\"o\">=</span> <span class=\"nx\">Router</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// 全てのメッセージを取得する</span>\n<span class=\"nx\">messageRouter</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">doc</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span><span class=\"na\">messages</span><span class=\"p\">:</span> <span class=\"nx\">doc</span><span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// メッセージを登録する</span>\n<span class=\"nx\">messageRouter</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Message</span><span class=\"p\">({</span>\n    <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">save</span><span class=\"p\">((</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n      <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'メッセージを登録しました。'</span><span class=\"p\">,</span>\n      <span class=\"na\">obj</span><span class=\"p\">:</span> <span class=\"nx\">result</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">messageRouter</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverappts\" class=\"fragment\"></span><a href=\"#serverappts\"><i class=\"fa fa-link\"></i></a>server/app.ts</h4>\n\n<p>Expressで使用するルータと依存モジュールを定義するためのファイルを作成します。<br>\nメッセージAPIのエンドポイントは<code>/api/messages</code>に設定し、<br>\nmongooseを使ってMongoDBへの接続設定をしています。<br>\nクライアント資産はビルドするとpublicフォルダ配下に出力されるようにしているので、<br>\n静的資産へのルーティングはpublicフォルダを指定しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">express</span> <span class=\"k\">from</span> <span class=\"s1\">'express'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">path</span> <span class=\"k\">from</span> <span class=\"s1\">'path'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">bodyParser</span> <span class=\"k\">from</span> <span class=\"s1\">'body-parser'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">messageRouter</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./routes/message'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MONGO_URL</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./config'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">App</span> <span class=\"p\">{</span>\n  <span class=\"kr\">public</span> <span class=\"nx\">express</span><span class=\"p\">:</span> <span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">Application</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">middleware</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">routes</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kr\">private</span> <span class=\"nx\">middleware</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">bodyParser</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">());</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">bodyParser</span><span class=\"p\">.</span><span class=\"nx\">urlencoded</span><span class=\"p\">({</span> <span class=\"na\">extended</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">}));</span>\n    <span class=\"c1\">// 接続する MongoDB の設定</span>\n    <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nb\">Promise</span> <span class=\"o\">=</span> <span class=\"nb\">global</span><span class=\"p\">.</span><span class=\"nb\">Promise</span><span class=\"p\">;</span>\n    <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">MONGO_URL</span> <span class=\"o\">||</span> <span class=\"nx\">MONGO_URL</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">useMongoClient</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"p\">});</span>\n    <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'SIGINT'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">disconnect</span><span class=\"p\">();</span> <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kr\">private</span> <span class=\"nx\">routes</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 静的資産へのルーティング</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"kr\">static</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'public'</span><span class=\"p\">)));</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"nx\">messageRouter</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// その他のリクエストはindexファイルにルーティング</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">sendFile</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'public/index.html'</span><span class=\"p\">));</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"k\">new</span> <span class=\"nx\">App</span><span class=\"p\">().</span><span class=\"nx\">express</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverbinwwwts\" class=\"fragment\"></span><a href=\"#serverbinwwwts\"><i class=\"fa fa-link\"></i></a>server/bin/www.ts</h4>\n\n<p>Node.js でサーバを起動するための設定ファイルを作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">www.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">http</span> <span class=\"k\">from</span> <span class=\"s1\">'http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">SERVER_PORT</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../config'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">app</span> <span class=\"k\">from</span> <span class=\"s1\">'../app'</span><span class=\"p\">;</span>\n\n\n\n<span class=\"c1\">// ポートの設定.</span>\n<span class=\"kd\">const</span> <span class=\"nx\">port</span> <span class=\"o\">=</span> <span class=\"nx\">normalizePort</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">PORT</span> <span class=\"o\">||</span> <span class=\"nx\">SERVER_PORT</span><span class=\"p\">);</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"kd\">set</span><span class=\"p\">(</span><span class=\"s1\">'port'</span><span class=\"p\">,</span> <span class=\"nx\">port</span><span class=\"p\">);</span>\n\n\n<span class=\"c1\">// HTTPサーバ生成.</span>\n<span class=\"kd\">const</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">);</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"nx\">port</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`API running on localhost:</span><span class=\"p\">${</span><span class=\"nx\">port</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">));</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"nx\">onError</span><span class=\"p\">);</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'listening'</span><span class=\"p\">,</span> <span class=\"nx\">onListening</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// ポートを正規化.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">normalizePort</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">):</span> <span class=\"nx\">number</span><span class=\"o\">|</span><span class=\"nx\">string</span><span class=\"o\">|</span><span class=\"kr\">boolean</span>  <span class=\"p\">{</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">normalizedPort</span><span class=\"p\">:</span> <span class=\"nx\">number</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">val</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span><span class=\"p\">)</span>\n    <span class=\"p\">?</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">:</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">isNaN</span><span class=\"p\">(</span><span class=\"nx\">normalizedPort</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">normalizedPort</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">normalizedPort</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// エラーハンドラー.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">onError</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">):</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">syscall</span> <span class=\"o\">!==</span> <span class=\"s1\">'listen'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">bind</span> <span class=\"o\">=</span> <span class=\"k\">typeof</span> <span class=\"nx\">port</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span>\n    <span class=\"p\">?</span> <span class=\"s1\">'Pipe '</span> <span class=\"o\">+</span> <span class=\"nx\">port</span>\n    <span class=\"p\">:</span> <span class=\"s1\">'Port '</span> <span class=\"o\">+</span> <span class=\"nx\">port</span><span class=\"p\">;</span>\n\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"s1\">'EACCES'</span><span class=\"p\">:</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">bind</span> <span class=\"o\">+</span> <span class=\"s1\">' requires elevated privileges'</span><span class=\"p\">);</span>\n      <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"s1\">'EADDRINUSE'</span><span class=\"p\">:</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">bind</span> <span class=\"o\">+</span> <span class=\"s1\">' is already in use'</span><span class=\"p\">);</span>\n      <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// サーバ起動時のリスナー.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">onListening</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">addr</span> <span class=\"o\">=</span> <span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">address</span><span class=\"p\">();</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">bind</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">addr</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span><span class=\"p\">)</span>\n    <span class=\"p\">?</span> <span class=\"s2\">`pipe </span><span class=\"p\">${</span><span class=\"nx\">addr</span><span class=\"p\">}</span><span class=\"s2\">`</span>\n    <span class=\"p\">:</span> <span class=\"s2\">`port </span><span class=\"p\">${</span><span class=\"nx\">addr</span><span class=\"p\">.</span><span class=\"nx\">port</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverconfigts\" class=\"fragment\"></span><a href=\"#serverconfigts\"><i class=\"fa fa-link\"></i></a>server/config.ts</h4>\n\n<p>サーバ側の設定ファイルを作成します。<br>\nポートとMongoDBのURLを定義しています。<br>\n今回MongoDBはローカルにポート27017で立てる想定です。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">config.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_PORT</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">MONGO_URL</span> <span class=\"o\">=</span> <span class=\"s1\">'mongodb://localhost:27017/test'</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"3-クライアント側を作成\" class=\"fragment\"></span><a href=\"#3-%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>3. クライアント側を作成</h3>\n\n<p>Angular CLIでプロジェクトを作成すると最低限のクライアント資産が生成されるので、<br>\nここでは修正が必要なファイル、新規作成するファイルのみ紹介します。</p>\n\n<h4>\n<span id=\"srcappmessagemessageservicets\" class=\"fragment\"></span><a href=\"#srcappmessagemessageservicets\"><i class=\"fa fa-link\"></i></a>src/app/message/message.service.ts</h4>\n\n<p>サーバ側からメッセージを取得するためのサービスを新規作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.service.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Http</span><span class=\"p\">,</span> <span class=\"nx\">Response</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MessageService</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">private</span> <span class=\"nx\">http</span><span class=\"p\">:</span> <span class=\"nx\">Http</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"nx\">getAll</span><span class=\"p\">():</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">http</span>\n        <span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"na\">response</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n            <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n        <span class=\"p\">})</span>\n        <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">throw</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()));</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">regist</span><span class=\"p\">(</span><span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">http</span>\n      <span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">message</span><span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"na\">response</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n            <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n      <span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">throw</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappcomponentts\" class=\"fragment\"></span><a href=\"#srcappappcomponentts\"><i class=\"fa fa-link\"></i></a>src/app/app.component.ts</h4>\n\n<p>既存のファイルを修正して、messagesを保持するようにします。<br>\nMessageServiceを使ってメッセージを取得します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span><span class=\"p\">,</span> <span class=\"nx\">OnInit</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-root'</span><span class=\"p\">,</span>\n  <span class=\"na\">templateUrl</span><span class=\"p\">:</span> <span class=\"s1\">'./app.component.html'</span><span class=\"p\">,</span>\n  <span class=\"na\">styleUrls</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'./app.component.css'</span><span class=\"p\">],</span>\n  <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"nx\">MessageService</span> <span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">{</span>\n  <span class=\"nl\">messages</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n  <span class=\"nl\">message</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">private</span> <span class=\"nx\">messageService</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getMessages</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">getMessages</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messageService</span>\n      <span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">()</span>\n      <span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">res</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">;</span>\n      <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">registerMessage</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messageService</span>\n      <span class=\"p\">.</span><span class=\"nx\">register</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">res</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getMessages</span><span class=\"p\">();</span>\n      <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappcomponenthtml\" class=\"fragment\"></span><a href=\"#srcappappcomponenthtml\"><i class=\"fa fa-link\"></i></a>src/app/app.component.html</h4>\n\n<p>既存のファイルの修正して、メッセージ一覧と登録のUIに書き換えます。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.html</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>メッセージ一覧<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;button</span> <span class=\"na\">id=</span><span class=\"s\">\"getMessagesButton\"</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">getMessages</span><span class=\"err\">()\"</span><span class=\"nt\">&gt;</span>メッセージ一覧を最新化<span class=\"nt\">&lt;/button&gt;</span>\n    <span class=\"nt\">&lt;ul</span> <span class=\"na\">id=</span><span class=\"s\">\"messageList\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;li</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let item of messages\"</span><span class=\"nt\">&gt;</span>\n        {{item.message}}\n      <span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;/ul&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>メッセージ登録<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"na\">id=</span><span class=\"s\">\"registerMessage\"</span> <span class=\"err\">[(</span><span class=\"na\">ngModel</span><span class=\"err\">)]=\"</span><span class=\"na\">message</span><span class=\"err\">\"</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"登録するメッセージを入力してください。\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span> <span class=\"na\">id=</span><span class=\"s\">\"registerMessageButton\"</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)='</span><span class=\"na\">registerMessage</span><span class=\"err\">()'</span><span class=\"nt\">&gt;</span>登録<span class=\"nt\">&lt;/button&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappmodulets\" class=\"fragment\"></span><a href=\"#srcappappmodulets\"><i class=\"fa fa-link\"></i></a>src/app/app.module.ts</h4>\n\n<p>HttpModule、FormsModule、MessageServiceを追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.module.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">BrowserModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/platform-browser'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">NgModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">HttpModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/forms'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.component'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"nx\">AppComponent</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"nx\">BrowserModule</span><span class=\"p\">,</span>\n    <span class=\"nx\">HttpModule</span><span class=\"p\">,</span>\n    <span class=\"nx\">FormsModule</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MessageService</span><span class=\"p\">],</span>\n  <span class=\"na\">bootstrap</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">AppComponent</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppModule</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n\n</pre></div>\n</div>\n\n<h3>\n<span id=\"4-ビルドまわり環境を整備\" class=\"fragment\"></span><a href=\"#4-%E3%83%93%E3%83%AB%E3%83%89%E3%81%BE%E3%82%8F%E3%82%8A%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>4. ビルドまわり環境を整備</h3>\n\n<h4>\n<span id=\"pakcagejson\" class=\"fragment\"></span><a href=\"#pakcagejson\"><i class=\"fa fa-link\"></i></a>pakcage.json</h4>\n\n<p>スクリプトを下記のように修正します。<br>\n(npm scriptsは便利ですが、コメントが記述できないのが残念だなーと思いました。)</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\">\n  </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"start\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s build:server -p start:*\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"start:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng serve --aot=true --progress=false --proxy-config proxy.conf.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"start:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-p watch:server boot:server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"watch:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -w -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"boot:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"nodemon ./dist/server/bin/www.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-s build:server build:client\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng build --output-path=./dist/server/public\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"buildRun\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-s build boot:server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>start</strong>でクライアント資産とサーバ資産の両方を起動します。</li>\n<li>\n<strong>start:client</strong>でクライアント資産をコンパイルして起動します。Angular CLIのngコマンドにお任せしています。なおstartではクライアント資産とサーバ資産で二つのサーバを起動するので、クライアントからサーバへ（リクエストを送れるようにプロキシ設定を行っています。プロキシ設定ファイルについては下で触れます。</li>\n<li>\n<strong>start:server</strong>でサーバ資産をコンパイルしてExpressを起動します。</li>\n<li>\n<strong>watch:server</strong>でサーバ側のTypeScriptをウォッチして変更があればコンパイルするようにします。</li>\n<li>\n<strong>boot:server</strong>でコンパイルしたサーバ側資産を起動します。nodeではなくnodemonを使うことでコンパイルしたサーバ資産に更新があった場合でも即座に更新を反映するようにしています。</li>\n<li>\n<strong>build</strong>クライアント資産とサーバ資産の両方をコンパイルします。</li>\n<li>\n<strong>build:server</strong>でサーバ資産をコンパイルしています。コンパイル時の設定は下で触れる<code>/server/tsconfig.server.json</code>を使います。</li>\n<li>\n<strong>build:client</strong>でクライアント資産をコンパイルしています。出力先はサーバ側資産の静的ファイル格納フォルダ（<code>dist/server/public</code>）を指定しています。</li>\n<li>\n<strong>buildRun</strong>でクライアント資産とサーバ資産の両方をコンパイルしサーバ資産を起動します。とりあえずデプロイするアプリを起動したい時の便利コマンドです。</li>\n</ul>\n\n<h4>\n<span id=\"servertsconfigserverjson\" class=\"fragment\"></span><a href=\"#servertsconfigserverjson\"><i class=\"fa fa-link\"></i></a>server/tsconfig.server.json</h4>\n\n<p>サーバ資産コンパイルときの設定ファイルを作成します。<br>\n<code>outDir</code>で出力先をdist/serverに指定しています。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">tsconfig.server.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"extends\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../tsconfig.json\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"preserveConstEnums\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"outDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist/server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"mapRoot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist/server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"module\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"commonjs\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<h4>\n<span id=\"proxyconfjson\" class=\"fragment\"></span><a href=\"#proxyconfjson\"><i class=\"fa fa-link\"></i></a>proxy.conf.json</h4>\n\n<p><code>start</code>でクライアントとサーバの２つを起動した時に、クラ<br>\nイアントからサーバへのリクエストを送れるようにするためのプロキシ設定ファイルを作成します。<br>\n<code>/api</code>始まるリクエストをサーバへのリクエストとみなしてプロキシ設定を行います。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">proxy.conf.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"/api\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"target\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"http://localhost:3000\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"secure\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<h4>\n<span id=\"mongodbをローカルで立ち上げる\" class=\"fragment\"></span><a href=\"#mongodb%E3%82%92%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7%E7%AB%8B%E3%81%A1%E4%B8%8A%E3%81%92%E3%82%8B\"><i class=\"fa fa-link\"></i></a>MongoDBをローカルで立ち上げる</h4>\n\n<p>具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。</p>\n\n<h3>\n<span id=\"5-試してみる\" class=\"fragment\"></span><a href=\"#5-%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>5. 試してみる</h3>\n\n<h4>\n<span id=\"アプリを起動してみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリを起動してみる</h4>\n\n<ul>\n<li>\n<p>プロジェクト直下で下記コマンドを実行するとアプリが起動します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm start \n</pre></div></div>\n</li>\n<li><p>起動したら<code>http://localhost:4200</code>にアクセスしてみます。すると下記のようにメッセージ一覧画面が表示され、メッセージを登録すると適宜一覧に追加されていきます。</p></li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" alt=\"アプリ概要.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png\"></a></p>\n\n<ul>\n<li>試しにクライアント資産かサーバ資産を修正してみると、コンンパイルされてアプリに変更がリアルタイムに反映されることがわかります。</li>\n</ul>\n\n<h4>\n<span id=\"アプリをビルドしてみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリをビルドしてみる</h4>\n\n<ul>\n<li>\n<p>プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力されます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run build\n</pre></div></div>\n</li>\n</ul>\n\n<h4>\n<span id=\"アプリをビルドして起動してみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリをビルドして起動してみる</h4>\n\n<ul>\n<li>プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力された後に起動されます。\nビルドしたアプリは<code>http://localhost:3000</code>でアクセスできます。\n<code>\n$ npm run buildRun\n</code>\n</li>\n</ul>\n\n<h2>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h2>\n\n<p>今回はAngular CLIベースのプロジェクトをベースにしてMEANスタックの最小構成プロジェクトを構築する方法を紹介しました。プロジェクトを起動、ビルドすることはできるようになったので、次回「<a href=\"http://qiita.com/Takumon/items/b4211fcabad740baa551\">その２. テスト編</a>」ではテストコードの作成とテスト実施環境の構築について紹介しようと思います。</p>\n","body":"## やりたいこと\n* Angular CLI使って、MEANスタック(**M**ongoDB + **E**xpress + **A**ngular + **N**odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。\n* フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。\n* Dockerを使ってアプリを簡単に配布したい。\n\nこれらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。\n\n* その１. ビルド編　⇦　今回はココ\n* [その２. テスト編](http://qiita.com/Takumon/items/b4211fcabad740baa551)\n* その３. Dockerビルド編\n\n\n\n## その１. ビルド編\nAngular CLIで作成したプロジェクトをベースに、\nMongoDBに登録したメッセージを画面に一覧で表示するアプリを作成していきます。\nメッセージを登録すると一覧に追加されていくようなアプリです。\n\n![アプリ概要.png](https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png)\n\n\n\n\n### プロジェクト構成\n今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。\n[リポジトリ](https://github.com/Takumon/angular4-express4-typescritp2/tree/build)も用意しているので詳細はそちらを参照してください。\n\n```:プロジェクトの構成（完成イメージ）\n.\n├── dist                ・・・(1) コンパイル資産出力先\n│   └── server　　　　　　　　      ・・・\u001c(1-1)　コンパイルされたサーバ資産\n│       ├── app.js\n│       ├── app.js.map\n│       ├── bin\n│       │   ├── www.js\n│       │   └── www.js.map\n│       ├── config.js\n│       ├── config.js.map\n│       ├── models\n│       │   ├── message.js\n│       │   └── message.js.map\n│       ├── public      ・・・(1-2) コンパイルされたクライアント資産\n│       │   ├── favicon.ico\n│       │   ├── index.html\n│       │   ├── inline.bundle.js\n│       │   ├── inline.bundle.js.map\n│       │   ├── main.bundle.js\n│       │   ├── main.bundle.js.map\n│       │   ├── polyfills.bundle.js\n│       │   ├── polyfills.bundle.js.map\n│       │   ├── styles.bundle.js\n│       │   ├── styles.bundle.js.map\n│       │   ├── vendor.bundle.js\n│       │   └── vendor.bundle.js.map\n│       └── routes\n│           ├── message.js\n│           └── message.js.map\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── e2e\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── server               ・・・(2)　サーバ資産\n│   ├── app.ts\n│   ├── bin\n│   │   └── www.ts\n│   ├── config.ts\n│   ├── models\n│   │   └── message.ts\n│   ├── routes\n│   │   └── message.ts\n│   └── tsconfig.server.json\n├── src                   ・・・(3)　クライアント資産\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       └── message.service.ts\n│   ├── assets\n│   ├── environments\n│   │   ├── environment.prod.ts\n│   │   └── environment.ts\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── main.ts\n│   ├── polyfills.ts\n│   ├── styles.css\n│   ├── test.ts\n│   ├── tsconfig.app.json\n│   ├── tsconfig.spec.json\n│   └── typings.d.ts\n├── karma.conf.js\n├── package-lock.json\n├── package.json\n├── protractor.conf.js\n├── proxy.conf.json    ・・・(4) \n├── tsconfig.json\n├── tslint.json\n└── README.md\n```\n#### 各資産について\n##### (1) dist\nコンパイルした資産の出力先フォルダ\n\n##### (1-1) dist/server\nここにサーバ側のコンパイルされたjsファイルが出力されます。\nserverフォルダを設けているのは本資産とテスト資産を分離したかったからです。\nその２. テスト編で説明しますが、サーバ側テスト用jsファイルはdist配下のserver_testフォルダに出力されるようにしています。\n\n##### (1-2) dist/server/public\nコンパイルされたクライアント資産。\nサーバ側アプリの資産の一部としてコンパイルされるようにしています。\nExpressのアプリでは静的資産をpublicフォルダに置くのが一般的なのでこうしました。\n\n##### (2) server\nサーバ資産を格納するためのディレクトリ。\nいろいろ悩みましたが、TypeScript資産をコンパイルすることとテストすることを考慮してこのような構成にしました。\n\n##### (3) src\nフロントの実行資産とテスト資産を格納するためのディレクリ。\nAngular CLIでプロジェクトを作成するとデフォルトで作成されます。\nビルドやアプリ起動は`ng`コマンドで実施します。\n\n##### (4) proxy.conf.json\n`npm start`でフロント側とサーバ側を同時に起動した時に、クライアント側からサーバ側へのリクエストを送れるようにするためのプロキシ設定です。\n\n\n\n\n## 構築手順\n\n### 1. プロジェクト作成\n* Angular CLIをインストール\n\n\t```\n\t$ npm install -g @angular/cli\n\t```\n\n* プロジェクトを生成、Angular CLIであらかじめ定義している依存ライブラリをインストール\n\n\t```\n\t$ ng new sample\n\t$ cd sample\n\t$ npm install\n\t```\n\n* Angular CLIであらかじめ定義している依存ライブラリの他に必要なものををインストール\n<dd>\n    <dt>[`express`](https://www.npmjs.com/package/express)\n        <dd>Webアプリケーションフレームワーク\n    <dt>[`body-parser`](https://www.npmjs.com/package/body-parser)\n        <dd>リクエストボディのパーサー\n    <dt>[`mongoose`](https://www.npmjs.com/package/mongoose)\n        <dd>MongoDBへのアクセスを簡単にしてくれるAPI\n    <dt>[`nodemon`](https://www.npmjs.com/package/nodemon)\n        <dd>node実行時にソースの変更を自動反映してくれるツール\n    <dt>[`npm-run-all`](https://www.npmjs.com/package/npm-run-all)\n        <dd>npm-scripts の連結実行を管理するためのパッケージ\n</dd>\n\n\t```\n\t$ npm install --save express body-parser mongoose\n\t$ npm install --save-dev @types/mongoose nodemon npm-run-all\n\t```\n\n\n\n### 2. サーバ側を作成\nAngular CLIで作ったプロジェクトの直下に`server`フォルダを作って、その中にサーバ側の処理を書いていきます。\n#### server/models/message.ts\nMongoDBにアクセスするためのモデルを定義します。\nDBアクセスにはmangoosを使います。\n\n```js:message.ts\nimport * as mongoose from 'mongoose';\n\nconst Message = mongoose.model('messages', new mongoose.Schema({\n  message: {type: String}\n}));\n\nexport { Message };\n```\n\n\n\n#### server/routes/message.ts\nエンドポイントごとの処理を記述するルータを定義します。\nメッセージの取得と登録には`server/models/message.ts`を使います。\n\n```js:message.ts\nimport * as http from 'http';\nimport { Router, Response } from 'express';\nimport { Message } from '../models/message';\n\nconst messageRouter: Router = Router();\n\n// 全てのメッセージを取得する\nmessageRouter.get('/', (req, res, next) => {\n  Message.find(function(err, doc) {\n    if (err) {\n      return res.status(500).json({\n          title: 'エラーが発生しました。',\n          error: err.message\n      });\n    }\n\n    return res.status(200).json({messages: doc});\n  });\n});\n\n// メッセージを登録する\nmessageRouter.post('/', (req, res, next) => {\n  const message = new Message({\n    message: req.body.message\n  });\n\n  message.save((err, result) => {\n    if (err) {\n      return res.status(500).json({\n          title: 'エラーが発生しました。',\n          error: err.message\n      });\n    }\n\n    return res.status(200).json({\n      message: 'メッセージを登録しました。',\n      obj: result\n    });\n  });\n});\n\nexport { messageRouter };\n```\n\n\n#### server/app.ts\nExpressで使用するルータと依存モジュールを定義するためのファイルを作成します。\nメッセージAPIのエンドポイントは`/api/messages`に設定し、\nmongooseを使ってMongoDBへの接続設定をしています。\nクライアント資産はビルドするとpublicフォルダ配下に出力されるようにしているので、\n静的資産へのルーティングはpublicフォルダを指定しています。\n\n```js:app.ts\nimport * as express from 'express';\nimport * as path from 'path';\nimport * as bodyParser from 'body-parser';\nimport * as mongoose from 'mongoose';\n\nimport { messageRouter } from './routes/message';\nimport { MONGO_URL } from './config';\n\nclass App {\n  public express: express.Application;\n\n  constructor() {\n    this.express = express();\n    this.middleware();\n    this.routes();\n  }\n\n  private middleware(): void {\n    this.express.use(bodyParser.json());\n    this.express.use(bodyParser.urlencoded({ extended: false }));\n    // 接続する MongoDB の設定\n    mongoose.Promise = global.Promise;\n    mongoose.connect(process.env.MONGO_URL || MONGO_URL, {\n      useMongoClient: true,\n    });\n    process.on('SIGINT', function() { mongoose.disconnect(); });\n  }\n\n  private routes(): void {\n    // 静的資産へのルーティング\n    this.express.use(express.static(path.join(__dirname, 'public')));\n\n    this.express.use('/api/messages', messageRouter);\n\n    // その他のリクエストはindexファイルにルーティング\n    this.express.get('*', (req, res) => {\n      res.sendFile(path.join(__dirname, 'public/index.html'));\n    });\n  }\n}\n\nexport default new App().express;\n```\n\n\n#### server/bin/www\\.ts\nNode.js でサーバを起動するための設定ファイルを作成します。\n\n```js:www.ts\nimport * as http from 'http';\nimport { SERVER_PORT } from '../config';\nimport app from '../app';\n\n\n\n// ポートの設定.\nconst port = normalizePort(process.env.PORT || SERVER_PORT);\napp.set('port', port);\n\n\n// HTTPサーバ生成.\nconst server = http.createServer(app);\nserver.listen(port, () => console.log(`API running on localhost:${port}`));\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n// ポートを正規化.\nfunction normalizePort(val): number|string|boolean  {\n\n  const normalizedPort: number = (typeof val === 'string')\n    ? parseInt(val, 10)\n    : val;\n\n  if (isNaN(normalizedPort)) {\n    return val;\n  }\n\n  if (normalizedPort >= 0) {\n    return normalizedPort;\n  }\n\n  return false;\n}\n\n// エラーハンドラー.\nfunction onError(error): void {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  const bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n// サーバ起動時のリスナー.\nfunction onListening(): void {\n  const addr = server.address();\n  const bind = (typeof addr === 'string')\n    ? `pipe ${addr}`\n    : `port ${addr.port}`;\n}\n```\n\n#### server/config.ts\nサーバ側の設定ファイルを作成します。\nポートとMongoDBのURLを定義しています。\n今回MongoDBはローカルにポート27017で立てる想定です。\n\n```js:config.ts\nexport const SERVER_PORT = 3000;\nexport const MONGO_URL = 'mongodb://localhost:27017/test';\n```\n\n\n\n### 3. クライアント側を作成\nAngular CLIでプロジェクトを作成すると最低限のクライアント資産が生成されるので、\nここでは修正が必要なファイル、新規作成するファイルのみ紹介します。\n\n\n#### src/app/message/message.service.ts\nサーバ側からメッセージを取得するためのサービスを新規作成します。\n\n```js:message.service.ts\nimport { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/Rx';\n\n@Injectable()\nexport class MessageService {\n\n  constructor(private http: Http) {}\n\n  getAll(): Observable<any> {\n    return this.http\n        .get('/api/messages')\n        .map((response: Response) => {\n            const result = response.json();\n            return result;\n        })\n        .catch((error: Response) => Observable.throw(error.json()));\n  }\n\n  regist(message: string): Observable<any> {\n    return this.http\n      .post('/api/messages', {message: message})\n      .map((response: Response) => {\n            const result = response.json();\n            return result;\n      })\n      .catch((error: Response) => Observable.throw(error.json()));\n  }\n}\n```\n\n\n\n\n\n#### src/app/app.component.ts\n既存のファイルを修正して、messagesを保持するようにします。\nMessageServiceを使ってメッセージを取得します。\n\n```js:app.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { MessageService } from './message/message.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  providers: [ MessageService ]\n})\nexport class AppComponent {\n  messages: Array<any>;\n  message: string;\n\n  constructor(private messageService: MessageService) {\n    this.getMessages();\n  }\n\n  getMessages(): void {\n    this.messageService\n      .getAll()\n      .subscribe((res: any) => {\n        this.messages = res.messages;\n      });\n  }\n\n  registerMessage(): void {\n    if (!this.message) {\n      return;\n    }\n\n    this.messageService\n      .register(this.message)\n      .subscribe((res: any) => {\n        this.message = '';\n        this.getMessages();\n      });\n  }\n}\n```\n\n\n#### src/app/app.component.html\n既存のファイルの修正して、メッセージ一覧と登録のUIに書き換えます。\n\n```html:app.component.html\n<div>\n  <div>\n    <h1>メッセージ一覧</h1>\n    <button id=\"getMessagesButton\" (click)=\"getMessages()\">メッセージ一覧を最新化</button>\n    <ul id=\"messageList\">\n      <li *ngFor=\"let item of messages\">\n        {{item.message}}\n      </li>\n    </ul>\n  </div>\n  <div>\n    <h1>メッセージ登録</h1>\n    <input type=\"text\" id=\"registerMessage\" [(ngModel)]=\"message\" placeholder=\"登録するメッセージを入力してください。\">\n    <button type=\"submit\" id=\"registerMessageButton\" (click)='registerMessage()'>登録</button>\n  </div>\n</div>\n```\n#### src/app/app.module.ts\nHttpModule、FormsModule、MessageServiceを追加します。\n\n\n```js:app.module.ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpModule } from '@angular/http';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { MessageService } from './message/message.service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpModule,\n    FormsModule\n  ],\n  providers: [MessageService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n```\n\n\n### 4. ビルドまわり環境を整備\n\n#### pakcage.json\nスクリプトを下記のように修正します。\n(npm scriptsは便利ですが、コメントが記述できないのが残念だなーと思いました。)\n\n```json:package.json\n\n  \"scripts\": {\n    ...\n    \"start\": \"npm-run-all -s build:server -p start:*\",\n    \"start:client\": \"ng serve --aot=true --progress=false --proxy-config proxy.conf.json\",\n    \"start:server\": \"run-p watch:server boot:server\",\n    \"watch:server\": \"tsc -w -p ./server/tsconfig.server.json\",\n    \"boot:server\": \"nodemon ./dist/server/bin/www.js\",\n    \"build\": \"run-s build:server build:client\",\n    \"build:client\": \"ng build --output-path=./dist/server/public\",\n    \"build:server\": \"tsc -p ./server/tsconfig.server.json\",\n    \"buildRun\": \"run-s build boot:server\",\n    ...\n  },\n```\n\n* **start**でクライアント資産とサーバ資産の両方を起動します。\n* **start:client**でクライアント資産をコンパイルして起動します。Angular CLIのngコマンドにお任せしています。なおstartではクライアント資産とサーバ資産で二つのサーバを起動するので、クライアントからサーバへ（リクエストを送れるようにプロキシ設定を行っています。プロキシ設定ファイルについては下で触れます。\n* **start:server**でサーバ資産をコンパイルしてExpressを起動します。\n* **watch:server**でサーバ側のTypeScriptをウォッチして変更があればコンパイルするようにします。\n* **boot:server**でコンパイルしたサーバ側資産を起動します。nodeではなくnodemonを使うことでコンパイルしたサーバ資産に更新があった場合でも即座に更新を反映するようにしています。\n* **build**クライアント資産とサーバ資産の両方をコンパイルします。\n* **build:server**でサーバ資産をコンパイルしています。コンパイル時の設定は下で触れる`/server/tsconfig.server.json`を使います。\n* **build:client**でクライアント資産をコンパイルしています。出力先はサーバ側資産の静的ファイル格納フォルダ（`dist/server/public`）を指定しています。\n* **buildRun**でクライアント資産とサーバ資産の両方をコンパイルしサーバ資産を起動します。とりあえずデプロイするアプリを起動したい時の便利コマンドです。\n\n\n\n#### server/tsconfig.server.json\nサーバ資産コンパイルときの設定ファイルを作成します。\n`outDir`で出力先をdist/serverに指定しています。\n\n```json:tsconfig.server.json\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"preserveConstEnums\": true,\n    \"outDir\": \"../dist/server\",\n    \"mapRoot\": \"../dist/server\",\n    \"module\": \"commonjs\"\n  }\n}\n```\n\n#### proxy.conf.json\n`start`でクライアントとサーバの２つを起動した時に、クラ\nイアントからサーバへのリクエストを送れるようにするためのプロキシ設定ファイルを作成します。\n`/api`始まるリクエストをサーバへのリクエストとみなしてプロキシ設定を行います。\n\n```json:proxy.conf.json\n{\n  \"/api\": {\n    \"target\": \"http://localhost:3000\",\n    \"secure\": false\n  }\n}\n```\n\n#### MongoDBをローカルで立ち上げる\n具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。\n\n\n\n### 5. 試してみる\n#### アプリを起動してみる\n* プロジェクト直下で下記コマンドを実行するとアプリが起動します。\n\n\t```\n\t$ npm start \n\t```\n\n* 起動したら`http://localhost:4200`にアクセスしてみます。すると下記のようにメッセージ一覧画面が表示され、メッセージを登録すると適宜一覧に追加されていきます。\n\n![アプリ概要.png](https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png)\n\n* 試しにクライアント資産かサーバ資産を修正してみると、コンンパイルされてアプリに変更がリアルタイムに反映されることがわかります。\n\n#### アプリをビルドしてみる\n* プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力されます。\n\n\t```\n\t$ npm run build\n\t```\n\n#### アプリをビルドして起動してみる\n* プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力された後に起動されます。\nビルドしたアプリは`http://localhost:3000`でアクセスできます。\n\t```\n\t$ npm run buildRun\n\t```\n\n## 終わりに\n今回はAngular CLIベースのプロジェクトをベースにしてMEANスタックの最小構成プロジェクトを構築する方法を紹介しました。プロジェクトを起動、ビルドすることはできるようになったので、次回「[その２. テスト編](http://qiita.com/Takumon/items/b4211fcabad740baa551)」ではテストコードの作成とテスト実施環境の構築について紹介しようと思います。\n\n\n","comments_count":0,"created_at":"2017-07-19T02:06:59+09:00","likes_count":26,"reactions_count":0}}}