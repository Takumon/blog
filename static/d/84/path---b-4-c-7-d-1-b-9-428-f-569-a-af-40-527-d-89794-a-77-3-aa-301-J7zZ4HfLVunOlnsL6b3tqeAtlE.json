{"data":{"site":{"siteMetadata":{"title":"Takumon Blog","author":"Takuto Inoue"}},"qiitaPost":{"rendered_body":"<p>Githubで草を生やす活動は楽しいですね!<br>\n増えてきて芝みたいになると達成感があって、モチベーションも上がります。<br>\nところで、この前の10/30に草がハロウィン仕様になっていたのを見て、<br>\n草を自分の好みの色を変更できればもっと楽しくなるのでは?と思い<br>\n<a href=\"https://chrome.google.com/webstore/detail/github-contributions-pain/bdibnecenojddgmjplnfehpjdmkiddok?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">草の色が変更できる（ついでにお絵描きもできる）Chrome Extension</a>を作りました。<br>\n<strong>その時に<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使って、TypeScriptで簡単にChrome Extensionが作れたので、アプリ作成から公開までの手順をまとめます。</strong></p>\n\n<h2>\n<span id=\"1-プロジェクトの雛形を生成する\" class=\"fragment\"></span><a href=\"#1-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E9%9B%9B%E5%BD%A2%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>1. プロジェクトの雛形を生成する</h2>\n\n<p>yomanと<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>で簡単に雛形が作れるのでコレらを使っていきます。</p>\n\n<ul>\n<li>\n<code>yoman</code>と<code>generator-chrome-extension-kickstart-typescript</code>をグローバルインストールします</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install -g yo generator-chrome-extension-kickstart-typescript \n</pre></div></div>\n\n<ul>\n<li>プロジェクトのルートフォルダを作成後、ルートフォルダに移動して<code>yo</code>コマンドで雛形を生成します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ mkdir project\n$ cd project\n$ yo chrome-extension-kickstart-typescript \n</pre></div></div>\n\n<ul>\n<li>いくつか質問されるので適当に答えます\n\n<ul>\n<li>\n<strong>What would you like to call this extension?</strong>\n\n<ul>\n<li>プロジェクト名を入力します。デフォルトはプロジェクトのフォルダ名</li>\n</ul>\n</li>\n<li>\n<strong>And how would you call it if you only had 12 characters (short_name)?</strong>\n\n<ul>\n<li>プロジェクトの略称を12文字以内で入力します</li>\n</ul>\n</li>\n<li>\n<strong>How would you like to describe this extension?</strong>\n\n<ul>\n<li>プロジェクト概要を入力します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to use UI Action?</strong>\n\n<ul>\n<li>作りたいUI Actionに応じて、<code>No</code>,<code>Browser</code>,<code>Page</code>のいずれかを選択します\n\n<ul>\n<li>\n<code>No</code> ・・・ UI Actionを使わない場合</li>\n<li>\n<code>Browser</code> ・・・ ツールバーの右にアイコンが常駐するタイプのChrome拡張を作成する場合</li>\n<li>\n<code>Page</code> ・・・ 特定のWebサイト観覧時のみにアドレスバー右にアイコンが表示されるタイプのChrome拡張を作成する場合</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to override a chrome page?</strong>\n\n<ul>\n<li>Chromeの内部ページを書き換えるかどうかで、<code>No</code>,<code>Bookmarks Page</code>,<code>History Page</code>,<code>Newtab Page</code>のいずれかを選択します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like more UI Features?</strong>\n\n<ul>\n<li>作りたいUIを複数選択します\n\n<ul>\n<li>\n<code>Options Page</code> ・・・ オプション画面を作りたい場合</li>\n<li>\n<code>Devtools Page</code> ・・・ 開発者ツールを拡張したい場合</li>\n<li>\n<code>Content Scripts</code> ・・・ Webで表示している画面にJavaScriptを差し込んで何か処理をしたい場合</li>\n<li>\n<code>Omnibox</code> ・・・ アドレスバーを拡張したい時に選択</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to use permissions?</strong>\n\n<ul>\n<li>使用するパーミッションを複数選択します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to install promo images for the Chrome Web Store?</strong>\n\n<ul>\n<li>Chromeストアで使う宣伝用画像を自動で生成するかを選択します</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<p>※自分は下記のように答えました<br>\n<strong>What would you like to call this extension?</strong> =&gt; github-contributions-paint<br>\n<strong>And how would you call it if you only had 12 characters (short_name)?</strong> =&gt;  github-paint<br>\n<strong>How would you like to describe this extension?</strong> =&gt;  You can paint github contributions!<br>\n<strong>Would you like to use UI Action?</strong> =&gt; Browser<br>\n<strong>Would you like to override a chrome page?</strong> =&gt;  No<br>\n<strong>Would you like more UI Features?</strong> =&gt;  Content Scripts<br>\n<strong>Would you like to use permissions?</strong> =&gt;  Tabs<br>\n<strong>Would you like to install promo images for the Chrome Web Store?</strong> =&gt;  Yes</p>\n\n<ul>\n<li>すると雛形が生成されます</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">生成された雛形のフォルダ構成</span></div>\n<div class=\"highlight\"><pre>github-contributions-paint\n├── README.md\n├── app\n│   ├── images       　　　    　・・・Chromeウェブストア公開時に必要なアイコン格納フォルダ\n│   │   ├── icon-128.png\n│   │   ├── icon-16.png\n│   │   ├── icon-19.png\n│   │   └── icon-38.png\n│   ├── manifest.json          ・・・Chrome拡張の設定を定義するファイル\n│   ├── pages                  ・・・HTMLファイル格納フォルダ\n│   │   └── popup.html         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── scripts                ・・・TSファイル格納フォルダ\n│   │   ├── background.ts      ・・・バックグランド処理を記述するファイル\n│   │   └── popup.ts           ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── styles                 ・・・CSSファイル格納フォルダ\n│   │   └── popup.scss         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── _locales\n│   │   └── en\n│   │       └── messages.json ・・・アプリの設定ファイル\n│   └── fonts\n├── promo                     ・・・Chromeウェブストア公開時に必要な宣伝用画像の格納フォルダ\n│   ├── Chrome-Webstore-Icon_128x128.png\n│   ├── Promo-Image-Large_920x680.png\n│   ├── Promo-Image-Marquee_1400x560.png\n│   ├── Promo-Image-Small_440x280.png\n│   ├── Screenshot_1280x800.png\n│   └── Screenshot_640x400.png\n├── dist\n├── gulpfile.babel.js\n├── node_modules\n├── package-lock.json\n├── package.json\n├── tasks\n├── tsconfig.json\n└── tslint.json\n\n</pre></div>\n</div>\n\n<ul>\n<li>最後にTypeScriptをグローバルインストールしていない場合は、グローバルインストールまたはプロジェクトにインストールします</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install typescript --save-dev\n</pre></div></div>\n\n<h2>\n<span id=\"2-作ったchrome-extensionを動かしてみる\" class=\"fragment\"></span><a href=\"#2-%E4%BD%9C%E3%81%A3%E3%81%9Fchrome-extension%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>2. 作ったChrome Extensionを動かしてみる</h2>\n\n<p>雛形を作成したら早速動かすことができます</p>\n\n<ul>\n<li>ビルドコマンドを実行します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run dev:chrome\n</pre></div></div>\n\n<ul>\n<li><p>Chromeで<code>chrome://extensions</code>を開いて<code>パッケージ化されていない拡張機能を読み込む</code>ボタンをクリック<br>\n<a href=\"https://camo.qiitausercontent.com/88e144ea0fc880ccec17978afc9ec782fb0d62c1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35613534396134352d386563342d383935352d623733332d3837353534396638616433312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/88e144ea0fc880ccec17978afc9ec782fb0d62c1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35613534396134352d386563342d383935352d623733332d3837353534396638616433312e706e67\" alt=\"手順_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5a549a45-8ec4-8955-b733-875549f8ad31.png\"></a></p></li>\n<li><p>プロジェクトルート/dist配下の<code>chrome</code>フォルダを選択<br>\n<a href=\"https://camo.qiitausercontent.com/53813821851801eddbed514961987f9070733381/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393161313636652d366532652d336633372d373130652d6565373532306339336563322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/53813821851801eddbed514961987f9070733381/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393161313636652d366532652d336633372d373130652d6565373532306339336563322e706e67\" alt=\"操作_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f91a166e-6e2e-3f37-710e-ee7520c93ec2.png\"></a></p></li>\n<li><p>するとプロジェクトが<a>Chrome Extension管理画面</a>に追加されて、ブラウザ右上にアイコンが表示されます<br>\n<a href=\"https://camo.qiitausercontent.com/e2e0fba31b666b0fea44ded1ded106236dd280e8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36316232653131332d653532302d376566382d633437652d3432366265393361613834622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e2e0fba31b666b0fea44ded1ded106236dd280e8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36316232653131332d653532302d376566382d633437652d3432366265393361613834622e706e67\" alt=\"動作確認1_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/61b2e113-e520-7ef8-c47e-426be93aa84b.png\"></a></p></li>\n<li><p>アイコンをクリックして動作検証ができます<br>\n<a href=\"https://camo.qiitausercontent.com/909be0f655c64c11846b9b3ca31630357ddd7121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33666631316537332d383162332d636435612d386537302d3961373534613661393936352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/909be0f655c64c11846b9b3ca31630357ddd7121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33666631316537332d383162332d636435612d386537302d3961373534613661393936352e706e67\" alt=\"動作確認_11.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/3ff11e73-81b3-cd5a-8e70-9a754a6a9965.png\"></a></p></li>\n</ul>\n\n<h2>\n<span id=\"3-開発中にchrome-extensionの動作確認する\" class=\"fragment\"></span><a href=\"#3-%E9%96%8B%E7%99%BA%E4%B8%AD%E3%81%ABchrome-extension%E3%81%AE%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>3. 開発中にChrome Extensionの動作確認する</h2>\n\n<p>雛形の動作検証ができたらTypeScriptファイルを編集して処理を追加していきます。<br>\n<code>npm run dev:chrome</code>を実行した後、下記手順繰り返すことで、ソースコードを修正しながら随時動作検証ができます。</p>\n\n<ul>\n<li>資産（TypeScriptやHTML,CSS）を修正する（勝手にビルドが走ります）</li>\n<li>最新のビルド資産を取り込むため<a>Chrome Extension管理画面</a>でリロードをクリックします\n<a href=\"https://camo.qiitausercontent.com/090a13aa3e617e29329421ec4c5fba4a56e1fb9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35663936353163362d373337662d643664622d383062662d3434613731363662323030352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/090a13aa3e617e29329421ec4c5fba4a56e1fb9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35663936353163362d373337662d643664622d383062662d3434613731363662323030352e706e67\" alt=\"開発手順_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5f9651c6-737f-d6db-80bf-44a7166b2005.png\"></a>\n</li>\n<li>Chrome Extensionの動作確認をする</li>\n</ul>\n\n<h2>\n<span id=\"4-アイコンと宣伝用画像を作る\" class=\"fragment\"></span><a href=\"#4-%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%81%A8%E5%AE%A3%E4%BC%9D%E7%94%A8%E7%94%BB%E5%83%8F%E3%82%92%E4%BD%9C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>4. アイコンと宣伝用画像を作る</h2>\n\n<p>アプリを公開する前に、アイコンと宣伝用画像を作成し、雛形生成時のデフォルト資産と差し替えます。<br>\nデザイナーさんなら苦労しないでしょうが、自分はこれが一番大変でした。<br>\n3つのアイコンと3つの宣伝用画像が必要です。</p>\n\n<h3>\n<span id=\"アイコン\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3\"><i class=\"fa fa-link\"></i></a>アイコン</h3>\n\n<ul>\n<li>128x128\n\n<ul>\n<li>必須。インストール時やChromeウェブストアで表示する用</li>\n</ul>\n</li>\n<li>48x48\n\n<ul>\n<li>拡張機能の管理ページで表示する用</li>\n</ul>\n</li>\n<li>16x16\n\n<ul>\n<li>ブラウザ右上に表示する用</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"宣伝用画像\" class=\"fragment\"></span><a href=\"#%E5%AE%A3%E4%BC%9D%E7%94%A8%E7%94%BB%E5%83%8F\"><i class=\"fa fa-link\"></i></a>宣伝用画像</h3>\n\n<ul>\n<li>440x280\n\n<ul>\n<li>必須</li>\n</ul>\n</li>\n<li>920x680\n\n<ul>\n<li>大きめの画像</li>\n</ul>\n</li>\n<li>1400x560\n\n<ul>\n<li>ChromeExtensionをChrome Storeで選択した時に表示される画像</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"5-chromeウェブストアに公開する\" class=\"fragment\"></span><a href=\"#5-chrome%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B9%E3%83%88%E3%82%A2%E3%81%AB%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>5. Chromeウェブストアに公開する</h2>\n\n<ul>\n<li>雛形生成時バージョンが0.0.0になっており、バージョンが低すぎて公開できない状態なので、<code>manifest.json</code>と<code>package.json</code>のバージョン指定を0.0.1にあげます</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">manifest.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n  </span><span class=\"s2\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0.0.1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">&lt;-</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">0</span><span class=\"err\">から</span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">1</span><span class=\"err\">にあげる</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n  </span><span class=\"s2\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0.0.1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">&lt;-</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">0</span><span class=\"err\">から</span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">1</span><span class=\"err\">にあげる</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>下記コマンドで公開用のzipファイルを作成します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run build:chrome\n</pre></div></div>\n\n<ul>\n<li><p><a href=\"https://chrome.google.com/webstore/category/extensions\" rel=\"nofollow noopener\" target=\"_blank\">Chromeウェブストア</a>のデベロッパーダッシュボードを開きます。Chromeアカウントでログインします<br>\n<a href=\"https://camo.qiitausercontent.com/d0db218423075317e350940d46d6510353fc81bd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65646234386163392d303138312d316437382d633761642d6130383237313261663031632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d0db218423075317e350940d46d6510353fc81bd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65646234386163392d303138312d316437382d633761642d6130383237313261663031632e706e67\" alt=\"アプリ登録_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/edb48ac9-0181-1d78-c7ad-a082712af01c.png\"></a></p></li>\n<li><p>ダッシュボードで<code>新しいアイテムを追加する</code>を選択します<br>\n<a href=\"https://camo.qiitausercontent.com/70b8f467a4819f7fd2251cf96abf3749b7626eeb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37383761336132352d326539332d363138362d313765642d3662313962626233626162352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/70b8f467a4819f7fd2251cf96abf3749b7626eeb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37383761336132352d326539332d363138362d313765642d3662313962626233626162352e706e67\" alt=\"アプリ登録_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/787a3a25-2e93-6186-17ed-6b19bbb3bab5.png\"></a></p></li>\n<li><p><code>ファイルを追加</code>で作成したzipファイル(プロジェクトルート/packages配下にあります)を選択後、<code>アップロード</code>を選択します<br>\n<a href=\"https://camo.qiitausercontent.com/2bc72004e70eb79c898506904f452d396754f39f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32323362343632342d643839322d336562382d356561382d3733633461616632623562382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2bc72004e70eb79c898506904f452d396754f39f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32323362343632342d643839322d336562382d356561382d3733633461616632623562382e706e67\" alt=\"アプリ登録_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/223b4624-d892-3eb8-5ea8-73c4aaf2b5b8.png\"></a></p></li>\n<li><p>説明、アイコン、宣伝用画像、カテゴリを入力して<code>変更を公開</code>をクリックします<br>\n<a href=\"https://camo.qiitausercontent.com/efa7c9ab0ced7326af8c7cb2d03fe9c2282e7f11/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323466303335352d666537622d373931382d326437352d3039633333636365356530302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/efa7c9ab0ced7326af8c7cb2d03fe9c2282e7f11/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323466303335352d666537622d373931382d326437352d3039633333636365356530302e706e67\" alt=\"登録_5.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/724f0355-fe7b-7918-2d75-09c33cce5e00.png\"></a></p></li>\n<li><p>これで公開作業は完了です。しばらくするとChromeウェブストアに公開されます</p></li>\n</ul>\n\n<h2>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h2>\n\n<p>今回は<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使って、TypeScriptでChrome Extensionを作成、公開する手順をまとめました。<br>\n最初はTypeScriptでChrome Extensionを作るのは、ビルドの設定など色々めんどくさそうだぁと思っていましたが、<br>\n<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使うことで、簡単に作成から公開まで実現できました。<br>\nブラウザでのちょっとした作業を効率化するのにChrome Extentionは非常に強力なツールなので、今後なにかアイディアがあればまた作ってみたいと思います。</p>\n","headings":[{"id":"1-プロジェクトの雛形を生成する","value":"1. プロジェクトの雛形を生成する","depth":2,"parents":[]},{"id":"2-作ったchrome-extensionを動かしてみる","value":"2. 作ったChrome Extensionを動かしてみる","depth":2,"parents":[]},{"id":"3-開発中にchrome-extensionの動作確認する","value":"3. 開発中にChrome Extensionの動作確認する","depth":2,"parents":[]},{"id":"4-アイコンと宣伝用画像を作る","value":"4. アイコンと宣伝用画像を作る","depth":2,"parents":[]},{"id":"アイコン","value":"アイコン","depth":3,"parents":[{"id":"4-アイコンと宣伝用画像を作る","value":"4. アイコンと宣伝用画像を作る","depth":2}]},{"id":"宣伝用画像","value":"宣伝用画像","depth":3,"parents":[{"id":"4-アイコンと宣伝用画像を作る","value":"4. アイコンと宣伝用画像を作る","depth":2}]},{"id":"5-chromeウェブストアに公開する","value":"5. Chromeウェブストアに公開する","depth":2,"parents":[]},{"id":"最後に","value":"最後に","depth":2,"parents":[]}],"fields":{"title":"TypeScriptで簡単にChrome Extensionを作る方法","excerpt":"Githubで草を生やす活動は楽しいですね!増えてきて芝みたいになると達成感があって、モチベーションも上がります。ところで、この前の10/30に草がハロウィン仕様になっていたのを見て、草を自分の好みの色を変更できればもっと楽しくなるのでは?...","date":"2017-12-20T02:36:27+09:00","tags":["JavaScript","GitHub","TypeScript","chrome-extension","Qiita"]},"user":{"id":"Takumon","profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/49915/profile-images/1488080194","description":"SIer"}}},"pageContext":{"slug":"/b4c7d1b9-428f-569a-af40-527d89794a77/","previous":{"fields":{"slug":"/e0ec0869-f368-5083-bdc2-cdba9d59427a/","title":"フロントエンド初心者がMEANスタック(MongoDB+Express+Angular+Node.js)でアプリを作ってみて躓いたこと","date":"2017-12-12T03:19:11+09:00","excerpt":"FUJITSU Advent Calendar 2017 12日目の記事です。リッチでイマドキなデザインのアプリが作りたくて、ここ４ヶ月ほどMEANスタック(MongoDB+Express+Angular+Node.js)でブログアプリを作...","tags":["JavaScript","Node.js","Express","mongoose","angular","Qiita"]},"id":"e0ec0869-f368-5083-bdc2-cdba9d59427a","title":"フロントエンド初心者がMEANスタック(MongoDB+Express+Angular+Node.js)でアプリを作ってみて躓いたこと","rendered_body":"<p><a href=\"https://qiita.com/advent-calendar/2017/fujitsu\">FUJITSU Advent Calendar 2017</a> 12日目の記事です。</p>\n\n<p>リッチでイマドキなデザインのアプリが作りたくて、<br>\nここ４ヶ月ほど<strong>MEAN</strong>スタック(<strong>M</strong>ongoDB+<strong>E</strong>xpress+<strong>A</strong>ngular+<strong>N</strong>ode.js)でブログアプリを作っています。<br>\n知識ゼロからのスタートでしたが、多くの方々がブログやStackOverFlowに情報を載せてくれているので、躓きながらもなんとかアプリ開発を進めることができました。</p>\n\n<p>この記事では、フロントエンド初心者の自分がMEANスタックでアプリを作る時に躓いたことや、こういう機能を実現するにはどうすればいいか?などをまとめています。<br>\nこれからをAngularを学ぼうとしている方、ExpressやMongoDBなどサーバーサイドJavaScriptを学ぼうとしている方の参考になればうれしいです。</p>\n\n<h2>\n<span id=\"アプリの紹介\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E7%B4%B9%E4%BB%8B\"><i class=\"fa fa-link\"></i></a>アプリの紹介</h2>\n\n<p>本線から脱線しますが、イントラでの使用を想定したQiitaのようなブログアプリです。デモ環境もあるのでよければ触ってみてください(モバイルには未対応ですが。。。)</p>\n\n<ul>\n<li><a href=\"https://github.com/Takumon/mean-blog\" rel=\"nofollow noopener\" target=\"_blank\">Github</a></li>\n<li><a href=\"https://hub.docker.com/r/takumon/mean-blog_auto/\" rel=\"nofollow noopener\" target=\"_blank\">Dockerhub</a></li>\n<li>\n<a href=\"https://material-blog-demo.herokuapp.com/\" rel=\"nofollow noopener\" target=\"_blank\">デモ環境</a> (ユーザID/パスは DemoUser / DemoUser1234# です)</li>\n</ul>\n\n<p>アプリキャプチャ その１ (記事詳細)<br>\n<a href=\"https://camo.qiitausercontent.com/4d64d8bd315bcf330d1ac6de1cfe8bb53f280992/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62383133333331372d666163322d626239622d386632642d3133646238393662656366352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/4d64d8bd315bcf330d1ac6de1cfe8bb53f280992/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62383133333331372d666163322d626239622d386632642d3133646238393662656366352e706e67\" alt=\"appdemo_detail.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/b8133317-fac2-bb9b-8f2d-13db896becf5.png\"></a></p>\n\n<p>アプリキャプチャ その２ (記事一覧)<br>\n<a href=\"https://camo.qiitausercontent.com/96927cda50e8df84b0c5415e996246c6d720b607/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39353064313036322d316261342d363366362d666535332d6366653664343634333061342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/96927cda50e8df84b0c5415e996246c6d720b607/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39353064313036322d316261342d363366362d666535332d6366653664343634333061342e706e67\" alt=\"アプリ_スクリーンキャプチャ_記事一覧.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/950d1062-1ba4-63f6-fe53-cfe6d46430a4.png\"></a></p>\n\n<p>アプリキャプチャ その３ (プロフィール)<br>\n<a href=\"https://camo.qiitausercontent.com/46aab6c2add74ca826b1dbe730d1a82eb481e295/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33323563373934382d636531362d396330382d306236362d6433383932653034366165642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/46aab6c2add74ca826b1dbe730d1a82eb481e295/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33323563373934382d636531362d396330382d306236362d6433383932653034366165642e706e67\" alt=\"アプリ_スクリーンキャプチャ_ ユーザ画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/325c7948-ce16-9c08-0b66-d3892e046aed.png\"></a></p>\n\n<h1>\n<span id=\"1-フロント側angularまわり\" class=\"fragment\"></span><a href=\"#1-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4angular%E3%81%BE%E3%82%8F%E3%82%8A\"><i class=\"fa fa-link\"></i></a>1. フロント側Angularまわり</h1>\n\n<h2>\n<span id=\"angularについて調べる時に古い情報を除外したい\" class=\"fragment\"></span><a href=\"#angular%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%BF%E3%81%B9%E3%82%8B%E6%99%82%E3%81%AB%E5%8F%A4%E3%81%84%E6%83%85%E5%A0%B1%E3%82%92%E9%99%A4%E5%A4%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Angularについて調べる時に古い情報を除外したい</h2>\n\n<p>1系は<code>AngularJS</code>、2系以降は<code>Angular</code>と呼ばれており、1系と2系以降では大きく仕様が異なります。<br>\nそのため検索する時は<code>Angualr2</code>などバージョンを指定したり、1系を除外するため<code>--AngularJS</code>をつけたりすると検索しやすいです。</p>\n\n<h2>\n<span id=\"htmlのdom要素を別のdom要素またはcomponentから扱いたい\" class=\"fragment\"></span><a href=\"#html%E3%81%AEdom%E8%A6%81%E7%B4%A0%E3%82%92%E5%88%A5%E3%81%AEdom%E8%A6%81%E7%B4%A0%E3%81%BE%E3%81%9F%E3%81%AFcomponent%E3%81%8B%E3%82%89%E6%89%B1%E3%81%84%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>HTMLのDOM要素を、別のDOM要素またはComponentから扱いたい</h2>\n\n<p>要素に<code>#xxxxx</code>のように<code>#</code>始まりの名前をつけると、別のDOM要素から参照できます</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;input</span> <span class=\"err\">#</span><span class=\"na\">phone</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"電話番号\"</span><span class=\"nt\">/&gt;</span>\n<span class=\"c\">&lt;!--  他のDOM要素からphonという変数名でDOM要素を参照できるようになる --&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"nt\">&gt;</span>(click)=\"callPhone(phone.value)\"&gt;\n</pre></div>\n</div>\n\n<p>Componentから参照する場合は<code>@ViewChild</code>を使います</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">Component</span></div>\n<div class=\"highlight\"><pre>  <span class=\"c1\">// ViewChildの引数に名前を文字列で指定します</span>\n  <span class=\"p\">@</span><span class=\"nd\">ViewChild</span><span class=\"p\">(</span><span class=\"s1\">'phone'</span><span class=\"p\">)</span> <span class=\"nx\">phoneElement</span><span class=\"p\">:</span> <span class=\"nx\">phoneElement</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">showPhoneValue</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">phoneElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://angular.io/guide/template-syntax#ref-vars\" rel=\"nofollow noopener\" target=\"_blank\">Angular公式サイト</a></li>\n<li><a href=\"https://stackoverflow.com/questions/32693061/how-can-i-select-an-element-in-a-component-template\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"routing時の認証を非同期で行いたい\" class=\"fragment\"></span><a href=\"#routing%E6%99%82%E3%81%AE%E8%AA%8D%E8%A8%BC%E3%82%92%E9%9D%9E%E5%90%8C%E6%9C%9F%E3%81%A7%E8%A1%8C%E3%81%84%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Routing時の認証を非同期で行いたい</h2>\n\n<p>URLごとの認証は<code>CanActivate</code>インターフェースを実装すればできますが、<br>\nサーバから認証情報を取得して非同期で認証したい場合もあると思います。<br>\nそのような時は、<strong><code>CanActivate#canActivate</code>で</strong>booleanの代わりに<strong>Observableを戻り値に指定する</strong>ことで実現できます。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">SampleAuthGuard</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Router</span><span class=\"p\">,</span> <span class=\"nx\">CanActivate</span><span class=\"p\">,</span> <span class=\"nx\">ActivatedRouteSnapshot</span><span class=\"p\">,</span> <span class=\"nx\">RouterStateSnapshot</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/router'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AuthenticationService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./authentication.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SampleAuthGuard</span> <span class=\"kr\">implements</span> <span class=\"nx\">CanActivate</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span>\n    <span class=\"kr\">private</span> <span class=\"nx\">auth</span><span class=\"p\">:</span> <span class=\"nx\">AuthenticationService</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n  <span class=\"c1\">// booleanではなくObservable&lt;boolean&gt;を戻り値で返す</span>\n  <span class=\"nx\">canActivate</span><span class=\"p\">(</span><span class=\"nx\">route</span><span class=\"p\">:</span> <span class=\"nx\">ActivatedRouteSnapshot</span><span class=\"p\">,</span> <span class=\"nx\">state</span><span class=\"p\">:</span> <span class=\"nx\">RouterStateSnapshot</span><span class=\"p\">):</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"kr\">boolean</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">auth</span><span class=\"p\">.</span><span class=\"nx\">checkState</span><span class=\"p\">()</span>\n      <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">err</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">of</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">))</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/38425461/angular2-canactivate-calling-async-function\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"formarrayの値を初期化したい\" class=\"fragment\"></span><a href=\"#formarray%E3%81%AE%E5%80%A4%E3%82%92%E5%88%9D%E6%9C%9F%E5%8C%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>FormArrayの値を初期化したい</h2>\n\n<p>FormControlはpatchValueで初期値を設定できますが、<br>\nFormArrayの場合patchValueで配列の値を設定しようとしても設定できません。<br>\nこういう場合は、<strong>配列1つ１つの値をもとにFormControlを生成してFormArrayにpush</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">ダメな例</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Form生成</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">group</span><span class=\"p\">({</span>\n    <span class=\"na\">schoolName</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">([])</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// Formに初期値を設定</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">pathValue</span><span class=\"p\">({</span>\n    <span class=\"na\">schooleName</span><span class=\"p\">:</span> <span class=\"s1\">'SampleSchoolName'</span> <span class=\"c1\">// FormControlの値の初期化はpatchValueで可能</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'taro'</span><span class=\"p\">,</span> <span class=\"s1\">'jiro'</span><span class=\"p\">,</span> <span class=\"s1\">'saburo'</span><span class=\"p\">];</span> <span class=\"c1\">// FormArrayに要素を追加する場合patchValueでは不可能</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">良い例</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Formを生成</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">group</span><span class=\"p\">({</span>\n    <span class=\"na\">schoolName</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">([])</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// Formに初期値を設定</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">pathValue</span><span class=\"p\">({</span>\n    <span class=\"na\">schooleName</span><span class=\"p\">:</span> <span class=\"s1\">'SampleSchoolName'</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// データからFormControlを生成し１件１件FormArrayにpushする</span>\n  <span class=\"p\">[</span><span class=\"s1\">'taro'</span><span class=\"p\">,</span> <span class=\"s1\">'jiro'</span><span class=\"p\">,</span> <span class=\"s1\">'saburo'</span><span class=\"p\">].</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">student</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">controls</span><span class=\"p\">[</span><span class=\"s1\">'students'</span><span class=\"p\">].</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">FormControll</span><span class=\"p\">(</span><span class=\"nx\">student</span><span class=\"p\">));</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/40916084/angular2-patchvalue-push-value-into-array\" rel=\"nofollow noopener\" target=\"_blank\">StackOvereFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"error-error-no-provider-for-templaterefというエラー\" class=\"fragment\"></span><a href=\"#error-error-no-provider-for-templateref%E3%81%A8%E3%81%84%E3%81%86%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>「ERROR Error: No provider for TemplateRef!」というエラー</h2>\n\n<p>最初このエラーが出た時は、何が原因なのかわからずに困りました。。。<br>\n大抵の場合は、<strong><code>*ngIf</code>や<code>*ngForm</code>の<code>*</code>が抜けてることが原因</strong>です(要するにただのタイポです。。。)<br>\n<code>*</code>が抜けると、Angularは<code>ngIf</code>をディレクティブとして解釈しようとしますが、<br>\nそんなディレクティブは存在しないので<code>No provider for TemplateRef!</code>と言われてしまうそうです。</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/35932074/angular2-no-provider-for-templateref-ngif-templateref\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"textareaにおいてtabキーでインデントしたい\" class=\"fragment\"></span><a href=\"#textarea%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6tab%E3%82%AD%E3%83%BC%E3%81%A7%E3%82%A4%E3%83%B3%E3%83%87%E3%83%B3%E3%83%88%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>textareaにおいてTabキーでインデントしたい</h2>\n\n<p>文書を入力するようなテキストエリアの場合に、Tabキーでのインデントしたい場合は、<br>\nkyedownイベント発生時にテキストエリアの値とキャレットの位置を操作することで実現可能です。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;textarea</span> <span class=\"err\">#</span><span class=\"na\">sampletextarea</span>\n  <span class=\"err\">(</span><span class=\"na\">keydown</span><span class=\"err\">)=\"</span><span class=\"na\">indent</span><span class=\"err\">($</span><span class=\"na\">event</span><span class=\"err\">,</span> <span class=\"na\">sampletextarea</span><span class=\"err\">)\"</span> <span class=\"nt\">&gt;&lt;/textarea&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">Component</span></div>\n<div class=\"highlight\"><pre>  <span class=\"nx\">indent</span><span class=\"p\">(</span><span class=\"nx\">$event</span><span class=\"p\">,</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Tabキー押下時</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">$event</span><span class=\"p\">.</span><span class=\"nx\">keyCode</span> <span class=\"o\">===</span> <span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 次の要素にフォーカスが移らないようにする</span>\n      <span class=\"nx\">$event</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n\n      <span class=\"c1\">// 現在のキャレット位置を取得</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">caretStart</span> <span class=\"o\">=</span> <span class=\"nx\">textareaElement</span><span class=\"p\">.</span><span class=\"nx\">selectionStart</span><span class=\"p\">;</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">caretEnd</span> <span class=\"o\">=</span> <span class=\"nx\">textareaElement</span><span class=\"p\">.</span><span class=\"nx\">selectionEnd</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// テキストエリアの値を取得し、キャレット位置にTabを挿入</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">TAB</span> <span class=\"o\">=</span> <span class=\"s1\">'¥t'</span><span class=\"p\">;</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">caretStart</span><span class=\"p\">)</span>\n                     <span class=\"o\">+</span> <span class=\"nx\">TAB</span> <span class=\"o\">+</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"nx\">caretStart</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// キャレット位置をTab分ずらす</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">focus</span><span class=\"p\">();</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">setSelectionRange</span><span class=\"p\">(</span><span class=\"nx\">caretStart</span> <span class=\"o\">+</span> <span class=\"nx\">TAB</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">,</span> <span class=\"nx\">caretEnd</span> <span class=\"o\">+</span> <span class=\"nx\">TAB</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h2>\n<span id=\"markdownプレビューを表示したいソースコードはシンタックスハイライトさせたい\" class=\"fragment\"></span><a href=\"#markdown%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%97%E3%81%9F%E3%81%84%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AF%E3%82%B7%E3%83%B3%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B9%E3%83%8F%E3%82%A4%E3%83%A9%E3%82%A4%E3%83%88%E3%81%95%E3%81%9B%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Markdownプレビューを表示したい、ソースコードはシンタックスハイライトさせたい</h2>\n\n<p><a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">marked</a>と<a href=\"https://github.com/isagalaev/highlight.js\" rel=\"nofollow noopener\" target=\"_blank\">highlight.js</a>を組み合わせて使います。<br>\n<a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">marked</a>のReadmeを見ればなんとなくわかりますが、Angularの仕組みに乗せる必要があるのでPipeやらServiceやらを作ります。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">markdown-parse.service.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">marked</span> <span class=\"k\">from</span> <span class=\"s1\">'marked'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">hljs</span> <span class=\"k\">from</span> <span class=\"s1\">'highlight.js'</span><span class=\"p\">;</span>\n\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MarkdownParseService</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">marked</span><span class=\"p\">.</span><span class=\"nx\">setOptions</span><span class=\"p\">({</span>\n      <span class=\"na\">highlight</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">hljs</span><span class=\"p\">.</span><span class=\"nx\">highlightAuto</span><span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">).</span><span class=\"nx\">value</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"na\">rawText</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">marked</span><span class=\"p\">(</span><span class=\"nx\">rawText</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">markdown.pipe.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nx\">marked</span> <span class=\"k\">from</span> <span class=\"s1\">'marked'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MarkdownParseService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./markdown-parse.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'toMarkdown'</span> <span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MarkdownParsePipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">markdownParseService</span><span class=\"p\">:</span> <span class=\"nx\">MarkdownParseService</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">any</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">markdownParseService</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>HTMLで下記のように指定します。<code>{{}}</code>だとサニタイズされてしまうので<code>innerHTML</code>属性を指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">innerHTML</span><span class=\"err\">]=\"</span><span class=\"na\">md</span> <span class=\"err\">|</span> <span class=\"na\">toMarkdown</span><span class=\"err\">\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://qiita.com/daikiojm/items/e02e2aeb0231b3620a0b\" id=\"reference-9001a931765f8f52acaf\">Qiita AngularでMarkdownをHTMLとして表示するカスタムpipeを作成する</a></li>\n<li>Github <a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">chjj/marked</a>\n</li>\n</ul>\n\n<h2>\n<span id=\"絞り込み条件付きリストにおいてリストの要素が変更追加削除された時に絞り込み結果をリフレッシュしたい\" class=\"fragment\"></span><a href=\"#%E7%B5%9E%E3%82%8A%E8%BE%BC%E3%81%BF%E6%9D%A1%E4%BB%B6%E4%BB%98%E3%81%8D%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%8C%E5%A4%89%E6%9B%B4%E8%BF%BD%E5%8A%A0%E5%89%8A%E9%99%A4%E3%81%95%E3%82%8C%E3%81%9F%E6%99%82%E3%81%AB%E7%B5%9E%E3%82%8A%E8%BE%BC%E3%81%BF%E7%B5%90%E6%9E%9C%E3%82%92%E3%83%AA%E3%83%95%E3%83%AC%E3%83%83%E3%82%B7%E3%83%A5%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>絞り込み条件付きリストにおいて、リストの要素が変更、追加、削除された時に絞り込み結果をリフレッシュしたい</h2>\n\n<p>リストの絞り込みはPipeで実現しますが、通常Pipeはリストの要素が変更されても再び絞り込みが実施されることはありません。<br>\nこのような場合はPipeアノテーションにて<strong>pureオプションをfalseに設定</strong>ましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"err\">#</span><span class=\"na\">searchUserName</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n  <span class=\"nt\">&lt;li</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let user of (userList | searchUserFilter: searchUserName.value);\"</span> <span class=\"nt\">&gt;</span>{{user.name}}<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">search-user.pipe.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">User</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./user'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'searchUserFilter'</span><span class=\"p\">,</span>\n  <span class=\"na\">pure</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"c1\">// pureをfalseにすることでユーザが変更、追加、削除された時にリフレッシュできる</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SearchFilterPipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">User</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">searchUserName</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">any</span><span class=\"p\">[]</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">searchUserName</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">items</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">searchUserName</span> <span class=\"o\">=</span> <span class=\"nx\">searchUserName</span><span class=\"p\">.</span><span class=\"nx\">toLowerCase</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span> <span class=\"nx\">item</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">userId</span><span class=\"p\">.</span><span class=\"nx\">toLowerCase</span><span class=\"p\">().</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"nx\">searchUserName</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://angular.io/guide/pipes#pure-and-impure-pipes\" rel=\"nofollow noopener\" target=\"_blank\">Angular公式サイト</a></li>\n</ul>\n\n<h2>\n<span id=\"グローバル定数を定義したい\" class=\"fragment\"></span><a href=\"#%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E5%AE%9A%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>グローバル定数を定義したい</h2>\n\n<p>いろんなクラスで使う定数を共通化する時は、単純に<strong>クラスを作ってstaticなメンバとして定数を定義</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">app-settings.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppSettings</span> <span class=\"p\">{</span>\n   <span class=\"kr\">public</span> <span class=\"kr\">static</span> <span class=\"nx\">API_ENDPOINT</span><span class=\"o\">=</span><span class=\"s1\">'http://127.0.0.1:6666/api/'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">SampleService</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">Injectable</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'angular2/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">AppSettings</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app-settings'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SampleService</span> <span class=\"p\">{</span>\n    <span class=\"nx\">sampleMethod</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">AppSettings</span><span class=\"p\">.</span><span class=\"nx\">API_ENDPOINT</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/34986922/define-global-constants-in-angular-2\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"画像が多い画面の初期表示を早くしたい\" class=\"fragment\"></span><a href=\"#%E7%94%BB%E5%83%8F%E3%81%8C%E5%A4%9A%E3%81%84%E7%94%BB%E9%9D%A2%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A1%A8%E7%A4%BA%E3%82%92%E6%97%A9%E3%81%8F%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>画像が多い画面の初期表示を早くしたい</h2>\n\n<p><a href=\"https://github.com/tjoskar/ng-lazyload-image\" rel=\"nofollow noopener\" target=\"_blank\">ng-lazyload-image</a>を使えば画像の遅延ロードを実現できます。<br>\n使い方もとても簡単でimgタグにディレクティブを指定するだけです。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre> <span class=\"nt\">&lt;img</span>\n  <span class=\"err\">[</span><span class=\"na\">defaultImage</span><span class=\"err\">]=\"</span><span class=\"na\">https:</span><span class=\"err\">//</span><span class=\"na\">images</span><span class=\"err\">.</span><span class=\"na\">sample</span><span class=\"err\">.</span><span class=\"na\">com</span><span class=\"err\">/</span><span class=\"na\">photo</span><span class=\"err\">/</span><span class=\"na\">defaultimage</span><span class=\"err\">\"</span> \n  <span class=\"err\">[</span><span class=\"na\">lazyLoad</span><span class=\"err\">]=\"</span><span class=\"na\">https:</span><span class=\"err\">//</span><span class=\"na\">images</span><span class=\"err\">.</span><span class=\"na\">sample</span><span class=\"err\">.</span><span class=\"na\">com</span><span class=\"err\">/</span><span class=\"na\">photo</span><span class=\"err\">/</span><span class=\"na\">sampleimage</span><span class=\"err\">\"</span>\n  <span class=\"err\">[</span><span class=\"na\">offset</span><span class=\"err\">]=\"</span><span class=\"na\">30</span><span class=\"err\">\"</span>\n <span class=\"nt\">&gt;</span>\n</pre></div>\n</div>\n\n<p><em>defaultImage</em><br>\n　即時ロードされる画像のURL、遅延ロードする画像を読み込む間、表示される<br>\n<em>lazyLoad</em><br>\n　遅延ロードする画像のURL<br>\n<em>offset</em><br>\n　スクロールが発生する場合に画面下部の何ピクセル下に来た時にロードを開始するか<br>\n<em>errorImage</em><br>\n　遅延ロード失敗時に表示する画像URL</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/tjoskar/ng-lazyload-image\" rel=\"nofollow noopener\" target=\"_blank\">ng-lazyload-image</a></li>\n</ul>\n\n<h2>\n<span id=\"angular-cliのng-serveコマンドでdistフォルダを一旦削除したくない\" class=\"fragment\"></span><a href=\"#angular-cli%E3%81%AEng-serve%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7dist%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E3%82%92%E4%B8%80%E6%97%A6%E5%89%8A%E9%99%A4%E3%81%97%E3%81%9F%E3%81%8F%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>Angular Cliの<code>ng serve</code>コマンドでdistフォルダを一旦削除したくない</h2>\n\n<p><code>ng serve</code>コマンドは<code>dist</code>フォルダを削除してからtsファイルをトランスコンパイルします。<br>\nそれを防ぐためには、<strong>delete-output-pathオプションをfalse</strong>に指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json　ビルドスクリプト</span></div>\n<div class=\"highlight\"><pre><span class=\"s2\">\"script\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"cp ./resource/* dist &amp;&amp; ng serve --delete-output-path=false\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/angular/angular-cli/issues/4366\" rel=\"nofollow noopener\" target=\"_blank\">angular-cli github issue #4366</a></li>\n</ul>\n\n<h2>\n<span id=\"aotコンパイルが遅いのでなんとかしたい\" class=\"fragment\"></span><a href=\"#aot%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%8C%E9%81%85%E3%81%84%E3%81%AE%E3%81%A7%E3%81%AA%E3%82%93%E3%81%A8%E3%81%8B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>AOTコンパイルが遅いのでなんとかしたい</h2>\n\n<p>なんとかできませんでした。。。(もしかしたら方法があるのかもしれません。誰か教えてください!!!)<br>\nAOTコンパイルはJITコンパイルが検出してくれないHTMLのエラーを警告してくれますが、その反面遅いです。特に<a href=\"https://material.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular Material</a>を使う場合は顕著です。<br>\nそのため、自分の場合は基本的にJITビルドを使い、issueのプルリクをする前など区切りのいいタイミングでAOTビルドしてエラーがないか確認するというように使い分けてました。</p>\n\n<h1>\n<span id=\"2-フロント側angularでのテスト周り\" class=\"fragment\"></span><a href=\"#2-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4angular%E3%81%A7%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A\"><i class=\"fa fa-link\"></i></a>2. フロント側Angularでのテスト周り</h1>\n\n<h2>\n<span id=\"ci環境などでテストが終わらずにタイムアウトしてしまう\" class=\"fragment\"></span><a href=\"#ci%E7%92%B0%E5%A2%83%E3%81%AA%E3%81%A9%E3%81%A7%E3%83%86%E3%82%B9%E3%83%88%E3%81%8C%E7%B5%82%E3%82%8F%E3%82%89%E3%81%9A%E3%81%AB%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%97%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86\"><i class=\"fa fa-link\"></i></a>CI環境などでテストが終わらずにタイムアウトしてしまう</h2>\n\n<p>CirleCiなどでテストを実行する場合<code>ng test</code>コマンドだとプロセスが終了しないためタイムアウトで失敗してしまいます。<br>\nこのような場合は<strong>watchオプションをfalseに設定</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ng test --wtach=false\n</pre></div></div>\n\n<p><strong>参考サイト</strong><br>\n<a href=\"https://github.com/angular/angular-cli/issues/362\" rel=\"nofollow noopener\" target=\"_blank\">Github isssue</a></p>\n\n<h2>\n<span id=\"テスト時にerror-timeout---async-callback-was-not-invoked-within-timeout-specified-by-jasminedefault_timeout_intervalやfailed-to-execute-send-on-xmlhttprequestのエラー\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E6%99%82%E3%81%ABerror-timeout---async-callback-was-not-invoked-within-timeout-specified-by-jasminedefault_timeout_interval%E3%82%84failed-to-execute-send-on-xmlhttprequest%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>テスト時に「Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.」や「Failed to execute 'send' on 'XMLHttpRequest'」のエラー</h2>\n\n<p>このような場合は、一時的に<code>ng test</code>コマンドのオプションに<strong><code>-sm=false</code>を追加</strong>してテストし直すと根本原因エラーメッセージで出力されるようになります。<br>\n大抵の場合は自作したモッククラスに必要なメソッドがないことが原因です。</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/45399079/angular-tests-failing-with-failed-to-execute-send-on-xmlhttprequest\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト用に子コンポーネントをモック化したい\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%94%A8%E3%81%AB%E5%AD%90%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E3%83%A2%E3%83%83%E3%82%AF%E5%8C%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト用に子コンポーネントをモック化したい</h2>\n\n<p>意外と簡単で、TestBed#configureTestingModuleで<br>\ndeclarationsに自作したモックの子コンポーネントを追加するだけです。<br>\ninput,outputがあれば必要に応じてメンバ定義します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\"><div class=\"highlight\"><pre><span class=\"c1\">// ※import文は省略</span>\n\n<span class=\"c1\">// モックの子コンポーネントを定義</span>\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-child'</span><span class=\"p\">,</span> <span class=\"c1\">// 子コンポーネントと同じものを定義</span>\n  <span class=\"na\">template</span><span class=\"p\">:</span> <span class=\"s1\">'&lt;p&gt;Mock Child Component&lt;/p&gt;'</span>\n<span class=\"p\">})</span>\n<span class=\"kd\">class</span> <span class=\"nx\">MockClildComponent</span> <span class=\"p\">{</span>\n  <span class=\"p\">@</span><span class=\"nd\">Input</span><span class=\"p\">()</span> <span class=\"nx\">childInput</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"p\">@</span><span class=\"nd\">Output</span><span class=\"p\">()</span> <span class=\"nx\">childOutput</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">EventEmitter</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// ...</span>\n\n<span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n    <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"c1\">// テスト時のdeclarationsにモックの定義を追加</span>\n      <span class=\"nx\">MockProductSettingsComponent</span><span class=\"p\">,</span>\n      <span class=\"c1\">// ...</span>\n    <span class=\"p\">],</span>\n    <span class=\"c1\">// ...</span>\n  <span class=\"p\">});</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">});</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/41240163/mocking-child-components-angular-2\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト結果にangular-materilaのスタイルが反映されない\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%B5%90%E6%9E%9C%E3%81%ABangular-materila%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%8C%E5%8F%8D%E6%98%A0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト結果にAngular Materilaのスタイルが反映されない</h2>\n\n<p>UIフレームワークで<a href=\"https://material.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular Material</a>を使っている場合、<br>\n<code>karma.config.js</code>でAngular Materilaのcssを直接読み込んであげる必要あります。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">karma.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"err\">・・・</span>\n      <span class=\"c1\">// Angular Materialのスタイルをテスト開始時に読み込んでおく</span>\n      <span class=\"p\">{</span><span class=\"nl\">pattern</span><span class=\"p\">:</span> <span class=\"s1\">'./node_modules/@angular/material/prebuilt-themes/indigo-pink.css'</span><span class=\"p\">,</span> <span class=\"nx\">included</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">watched</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">},</span>\n<span class=\"p\">],</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/angular/material2/issues/4056\" rel=\"nofollow noopener\" target=\"_blank\">stackoverflow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト結果にstylesscssアプリ共通のスタイル定義のスタイルが反映されない\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%B5%90%E6%9E%9C%E3%81%ABstylesscss%E3%82%A2%E3%83%97%E3%83%AA%E5%85%B1%E9%80%9A%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E5%AE%9A%E7%BE%A9%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%8C%E5%8F%8D%E6%98%A0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト結果にstyles.scss(アプリ共通のスタイル定義)のスタイルが反映されない</h2>\n\n<p>アプリ共通スタイルをSASS形式にしている場合<br>\n開発用ライブライに<code>karma-scss-preprocessor</code>と<code>node-sass</code>を追加して<code>karma.conf.js</code>を下記のように設定します。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">karma.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"err\">・・・</span>\n<span class=\"err\">　</span> <span class=\"c1\">// プラグインに`karma-scss-preprocessor`を追加</span>\n  <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'karma-scss-preprocessor'</span><span class=\"p\">)</span>\n<span class=\"p\">],</span>\n\n\n<span class=\"nx\">files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"err\">・・・</span>\n  <span class=\"c1\">// filesにアプリ共通スタイルを追加</span>\n  <span class=\"p\">{</span> <span class=\"nl\">pattern</span><span class=\"p\">:</span> <span class=\"s1\">'./src/styles.scss'</span><span class=\"p\">,</span> <span class=\"nx\">watched</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>  <span class=\"nx\">included</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">served</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n<span class=\"p\">],</span>\n\n<span class=\"c1\">// preprocessorsを追加</span>\n<span class=\"nx\">preprocessors</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n <span class=\"s1\">'./src/test.ts'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'@angular/cli'</span><span class=\"p\">],</span>\n <span class=\"s1\">'./src/styles.scss'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'scss'</span><span class=\"p\">]</span>\n<span class=\"p\">},</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong>:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/44460733/how-to-configure-karma-to-include-global-scss-files-for-an-angular-cli-project/44498689#44498689\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n<li><a href=\"https://github.com/karma-runner/karma/issues/2700\" rel=\"nofollow noopener\" target=\"_blank\">Github karma/issue/2700</a></li>\n</ul>\n\n<h1>\n<span id=\"3-バックエンド側-expressmongodb周り\" class=\"fragment\"></span><a href=\"#3-%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89%E5%81%B4-expressmongodb%E5%91%A8%E3%82%8A\"><i class=\"fa fa-link\"></i></a>3. バックエンド側 Express、MongoDB周り</h1>\n\n<p>※MongDBをNode.jsで扱う場合は<a href=\"https://github.com/Automattic/mongoose\" rel=\"nofollow noopener\" target=\"_blank\">mongoose</a>という便利なライブラリがあるのでそれを使う前提のお話です。</p>\n\n<h2>\n<span id=\"mongooseのvirtualメソッドを使う\" class=\"fragment\"></span><a href=\"#mongoose%E3%81%AEvirtual%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>mongooseのvirtualメソッドを使う</h2>\n\n<p>例えば<code>記事</code>,<code>コメント</code>,<code>リプライ</code>などのモデルを定義する場合、<br>\n３つのモデルのライフサイクルは、記事追加 =&gt; 記事に対するコメント追加 =&gt; コメントに対するリプライ追加　のようになります。<br>\nこのような場合は、コメントが記事の参照を持ち、リプライがコメントの参照を持つモデル構造が望ましいです。コメントやリプライ追加時に１つのモデルの更新だけですむからです。<br>\n<a href=\"https://camo.qiitausercontent.com/129a84bd908d87c7fcbda29704ad50ac10529129/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393361633065362d333137652d316364662d626662612d3133353331653234353562612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/129a84bd908d87c7fcbda29704ad50ac10529129/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393361633065362d333137652d316364662d626662612d3133353331653234353562612e706e67\" alt=\"db構造_良.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f93ac0e6-317e-1cdf-bfba-13531e2455ba.png\"></a></p>\n\n<p>ただ記事の検索は少し工夫が必要で、<strong>mongooseのvirtualを使います</strong>。これによって記事からコメントへの参照、コメントからリプライへの参照を擬似的に定義できるため、<br>\n検索時に擬似要素をpopulateするだけで、記事に紐付くコメントとリプライを取得できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/bd8d4eedcb08eeaca13290e8dc91b8b2e10c5dae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34616162376633382d316631392d653030622d623335642d3233626162663336613735622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/bd8d4eedcb08eeaca13290e8dc91b8b2e10c5dae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34616162376633382d316631392d653030622d623335642d3233626162663336613735622e706e67\" alt=\"mongoose virtualのイメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/4aab7f38-1f19-e00b-b35d-23babf36a75b.png\"></a></p>\n\n<p>具体的なソースコードを示します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">article.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">ArticleSchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">content</span><span class=\"p\">:</span> <span class=\"nb\">String</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">toJSON</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">virtuals</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"p\">});</span>\n\n\n<span class=\"c1\">// 記事に紐付くコメントモデルの配列をcommentsという擬似要素で定義する</span>\n<span class=\"nx\">ArticleSchema</span><span class=\"p\">.</span><span class=\"nx\">virtual</span><span class=\"p\">(</span><span class=\"s1\">'comments'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Comment'</span><span class=\"p\">,</span>\n  <span class=\"na\">localField</span><span class=\"p\">:</span> <span class=\"s1\">'_id'</span><span class=\"p\">,</span>\n  <span class=\"na\">foreignField</span><span class=\"p\">:</span> <span class=\"s1\">'articleId'</span><span class=\"p\">,</span>\n  <span class=\"na\">justOne</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Article</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Article'</span><span class=\"p\">,</span> <span class=\"nx\">ArticleSchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Article</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">comment.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">CommentSchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">articleId</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">.</span><span class=\"nx\">Types</span><span class=\"p\">.</span><span class=\"nx\">ObjectId</span><span class=\"p\">,</span>\n    <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Article'</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">comment</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">;</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">toJSON</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">virtuals</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"p\">});</span>\n\n<span class=\"c1\">// コメントに紐付くリプライモデルの配列をrepliesという擬似要素で定義する</span>\n<span class=\"nx\">CommentSchema</span><span class=\"p\">.</span><span class=\"nx\">virtual</span><span class=\"p\">(</span><span class=\"s1\">'replies'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Reply'</span><span class=\"p\">,</span>\n  <span class=\"na\">localField</span><span class=\"p\">:</span> <span class=\"s1\">'_id'</span><span class=\"p\">,</span>\n  <span class=\"na\">foreignField</span><span class=\"p\">:</span> <span class=\"s1\">'commentId'</span><span class=\"p\">,</span>\n  <span class=\"na\">justOne</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Comment</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Comment'</span><span class=\"p\">,</span> <span class=\"nx\">CommentSchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Comment</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">reply.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">ReplySchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">commentId</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">.</span><span class=\"nx\">Types</span><span class=\"p\">.</span><span class=\"nx\">ObjectId</span><span class=\"p\">,</span>\n    <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Comment'</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">reply</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Reply</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Reply'</span><span class=\"p\">,</span> <span class=\"nx\">ReplySchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Reply</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">検索処理</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">Article</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">()</span>\n<span class=\"p\">.</span><span class=\"nx\">populate</span><span class=\"p\">({</span>\n  <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"s1\">'comments'</span><span class=\"p\">,</span> <span class=\"c1\">// Articleモデルで定義した擬似要素commentsをpopulateする</span>\n  <span class=\"na\">populate</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"s1\">'replies'</span><span class=\"p\">,</span> <span class=\"c1\">// Commentモデルで定義した擬似要素repliesをpopulateする</span>\n  <span class=\"p\">}],</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"リクエストレスポンスのログ出力したい\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%81%AE%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>リクエスト、レスポンスのログ出力したい</h2>\n\n<p>Expressのuseにて実現します。<br>\nレスポンスオブジェクトのfinishイベントを監視することで、レスポンス時にログを出力しています。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">リクエストとレスポンスのログ出力　※ここでは簡単のためコンソールに出力しています</span></div>\n<div class=\"highlight\"><pre><span class=\"kd\">const</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n<span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"nx\">accessLogHandler</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n  <span class=\"c1\">// リクエスト時のログ　</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">([</span>\n    <span class=\"s1\">'start'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'x-forwarded-for'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span>\n    <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">referer</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'user-agent'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'--ms--'</span>\n  <span class=\"p\">].</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">',</span><span class=\"err\">\\</span><span class=\"s1\">t'</span><span class=\"p\">));</span>\n\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">once</span><span class=\"p\">(</span><span class=\"s1\">'finish'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"err\">　　</span> <span class=\"c1\">// レスポンス時のログ</span>\n    <span class=\"nx\">accessLogger</span><span class=\"p\">.</span><span class=\"nx\">info</span><span class=\"p\">([</span>\n      <span class=\"s1\">'end'</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'x-forwarded-for'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">referer</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'user-agent'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'--'</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">getMilliseconds</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"nx\">start</span><span class=\"p\">.</span><span class=\"nx\">getMilliseconds</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"s1\">'ms--'</span>\n    <span class=\"p\">].</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">',</span><span class=\"err\">\\</span><span class=\"s1\">t'</span><span class=\"p\">));</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">next</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<p>実際のログはこんな感じで出力されます。</p>\n\n<div class=\"code-frame\" data-lang=\"py3\"><div class=\"highlight\"><pre><span class=\"n\">start</span><span class=\"p\">,</span>  <span class=\"p\">::</span><span class=\"n\">ffff</span><span class=\"p\">:</span><span class=\"mf\">127.0</span><span class=\"o\">.</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">authenticate</span><span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"p\">,</span>   <span class=\"o\">-</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">4200</span><span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"n\">Mozilla</span><span class=\"o\">/</span><span class=\"mf\">5.0</span> <span class=\"p\">(</span><span class=\"n\">Macintosh</span><span class=\"p\">;</span> <span class=\"n\">Intel</span> <span class=\"n\">Mac</span> <span class=\"n\">OS</span> <span class=\"n\">X</span> <span class=\"mi\">10</span><span class=\"n\">_12_6</span><span class=\"p\">)</span> <span class=\"n\">AppleWebKit</span><span class=\"o\">/</span><span class=\"mf\">537.36</span> <span class=\"p\">(</span><span class=\"n\">KHTML</span><span class=\"p\">,</span> <span class=\"n\">like</span> <span class=\"n\">Gecko</span><span class=\"p\">)</span> <span class=\"n\">Chrome</span><span class=\"o\">/</span><span class=\"mf\">62.0</span><span class=\"o\">.</span><span class=\"mf\">3202.94</span> <span class=\"n\">Safari</span><span class=\"o\">/</span><span class=\"mf\">537.36</span><span class=\"p\">,</span> <span class=\"o\">--</span><span class=\"n\">ms</span><span class=\"o\">--</span>\n<span class=\"n\">end</span><span class=\"p\">,</span>    <span class=\"p\">::</span><span class=\"n\">ffff</span><span class=\"p\">:</span><span class=\"mf\">127.0</span><span class=\"o\">.</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"p\">,</span>                  <span class=\"mi\">403</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">4200</span><span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"n\">Mozilla</span><span class=\"o\">/</span><span class=\"mf\">5.0</span> <span class=\"p\">(</span><span class=\"n\">Macintosh</span><span class=\"p\">;</span> <span class=\"n\">Intel</span> <span class=\"n\">Mac</span> <span class=\"n\">OS</span> <span class=\"n\">X</span> <span class=\"mi\">10</span><span class=\"n\">_12_6</span><span class=\"p\">)</span> <span class=\"n\">AppleWebKit</span><span class=\"o\">/</span><span class=\"mf\">537.36</span> <span class=\"p\">(</span><span class=\"n\">KHTML</span><span class=\"p\">,</span> <span class=\"n\">like</span> <span class=\"n\">Gecko</span><span class=\"p\">)</span> <span class=\"n\">Chrome</span><span class=\"o\">/</span><span class=\"mf\">62.0</span><span class=\"o\">.</span><span class=\"mf\">3202.94</span> <span class=\"n\">Safari</span><span class=\"o\">/</span><span class=\"mf\">537.36</span><span class=\"p\">,</span>  <span class=\"o\">--</span><span class=\"mi\">47</span><span class=\"n\">ms</span><span class=\"o\">--</span>\n</pre></div></div>\n\n<h2>\n<span id=\"ログ出力でオブジェクトの全プロパティを出力したい\" class=\"fragment\"></span><a href=\"#%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E3%81%A7%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%85%A8%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%82%92%E5%87%BA%E5%8A%9B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>ログ出力でオブジェクトの全プロパティを出力したい</h2>\n\n<p>オブジェクトの中身をログで確認する時はNode.jsの<code>util.inspect()</code>を使います。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre><span class=\"kd\">const</span> <span class=\"nx\">util</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'util'</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">myObject</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"s2\">\"a\"</span><span class=\"p\">:</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span>\n   <span class=\"s2\">\"b\"</span><span class=\"p\">:{</span>\n      <span class=\"s2\">\"c\"</span><span class=\"p\">:</span><span class=\"s2\">\"c\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"d\"</span><span class=\"p\">:{</span>\n         <span class=\"s2\">\"e\"</span><span class=\"p\">:</span><span class=\"s2\">\"e\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"f\"</span><span class=\"p\">:{</span>\n            <span class=\"s2\">\"g\"</span><span class=\"p\">:</span><span class=\"s2\">\"g\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"h\"</span><span class=\"p\">:{</span>\n               <span class=\"s2\">\"i\"</span><span class=\"p\">:</span><span class=\"s2\">\"i\"</span>\n            <span class=\"p\">}</span>\n         <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">};</span> \n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">util</span><span class=\"p\">.</span><span class=\"nx\">inspect</span><span class=\"p\">(</span><span class=\"nx\">myObject</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">));</span>\n</pre></div></div>\n\n<p>このようなログが出力されます</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>{ a: 'a', b: { c: 'c', d: { e: 'e', f: [Object] } } }\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/10729276/how-can-i-get-the-full-object-in-node-jss-console-log-rather-than-object\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"環境変数で上書きできる定数を定義したい\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%81%A7%E4%B8%8A%E6%9B%B8%E3%81%8D%E3%81%A7%E3%81%8D%E3%82%8B%E5%AE%9A%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>環境変数で上書きできる定数を定義したい</h2>\n\n<p>例えばサーバのポートなど環境個別に設定したくなるようなものは<br>\n環境変数で上書きできる定数にしておくと便利です。<br>\nNode.jsではprocess.env.変数名で環境変数が参照できるので下記のようにします。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">定数定義</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_PORT</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">SERVER_PORT</span> <span class=\"o\">||</span> <span class=\"s1\">'3000'</span><span class=\"p\">;</span><span class=\"err\">　</span><span class=\"c1\">// 環境変数SERVER_PORTが未指定の場合は3000となる</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_HOST</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">SERVER_HOST</span> <span class=\"o\">||</span> <span class=\"s1\">'localhost'</span><span class=\"p\">;</span> <span class=\"c1\">// 環境変数SERVER_HOSTが未指定の場合はlocalhostとなる</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"db初回アクセスに失敗した場合にリトライされない\" class=\"fragment\"></span><a href=\"#db%E5%88%9D%E5%9B%9E%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%AB%E5%A4%B1%E6%95%97%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AB%E3%83%AA%E3%83%88%E3%83%A9%E3%82%A4%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>DB初回アクセスに失敗した場合にリトライされない</h2>\n\n<p>mongooseを使っていると、DB初回接続時にエラーが起きた時に、なぜか再接続処理してくれません。<br>\nDockerでアプリを配布する場合、アプリとMongoDBをdocker-composeで同時に立ち上げることがあると思いますが、まだMongoDBが起動しきってない状態でアプリからDBに接続しようとすると、アプリが異常終了してしまいます。これを防ぐには自力で再接続処理を実装する必要があります。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre><span class=\"kd\">function</span> <span class=\"nx\">createConnection</span> <span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">createConnection</span><span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">(</span><span class=\"sr\">/failed to connect to server .* on first connect/</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(),</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">));</span>\n\n            <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Retrying first connect...\"</span><span class=\"p\">);</span>\n                <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">openUri</span><span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">).</span><span class=\"k\">catch</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n            <span class=\"c1\">// 20秒後に再接続する</span>\n            <span class=\"p\">},</span> <span class=\"mi\">20</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(),</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">once</span><span class=\"p\">(</span><span class=\"s1\">'open'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Connection to db established.\"</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">db</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/Automattic/mongoose/issues/5169\" rel=\"nofollow noopener\" target=\"_blank\">Github mongooseのissue5169</a></li>\n</ul>\n","body":"[FUJITSU Advent Calendar 2017](https://qiita.com/advent-calendar/2017/fujitsu) 12日目の記事です。\n\nリッチでイマドキなデザインのアプリが作りたくて、\nここ４ヶ月ほど**MEAN**スタック(**M**ongoDB+**E**xpress+**A**ngular+**N**ode.js)でブログアプリを作っています。\n知識ゼロからのスタートでしたが、多くの方々がブログやStackOverFlowに情報を載せてくれているので、躓きながらもなんとかアプリ開発を進めることができました。\n\nこの記事では、フロントエンド初心者の自分がMEANスタックでアプリを作る時に躓いたことや、こういう機能を実現するにはどうすればいいか?などをまとめています。\nこれからをAngularを学ぼうとしている方、ExpressやMongoDBなどサーバーサイドJavaScriptを学ぼうとしている方の参考になればうれしいです。\n\n## アプリの紹介\n本線から脱線しますが、イントラでの使用を想定したQiitaのようなブログアプリです。デモ環境もあるのでよければ触ってみてください(モバイルには未対応ですが。。。)\n\n* [Github](https://github.com/Takumon/mean-blog)\n* [Dockerhub](https://hub.docker.com/r/takumon/mean-blog_auto/)\n* [デモ環境](https://material-blog-demo.herokuapp.com/) (ユーザID/パスは DemoUser / DemoUser1234# です)\n\nアプリキャプチャ その１ (記事詳細)\n![appdemo_detail.png](https://qiita-image-store.s3.amazonaws.com/0/49915/b8133317-fac2-bb9b-8f2d-13db896becf5.png)\n\nアプリキャプチャ その２ (記事一覧)\n![アプリ_スクリーンキャプチャ_記事一覧.png](https://qiita-image-store.s3.amazonaws.com/0/49915/950d1062-1ba4-63f6-fe53-cfe6d46430a4.png)\n\nアプリキャプチャ その３ (プロフィール)\n![アプリ_スクリーンキャプチャ_ ユーザ画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/325c7948-ce16-9c08-0b66-d3892e046aed.png)\n\n# 1. フロント側Angularまわり\n## Angularについて調べる時に古い情報を除外したい\n1系は`AngularJS`、2系以降は`Angular`と呼ばれており、1系と2系以降では大きく仕様が異なります。\nそのため検索する時は`Angualr2`などバージョンを指定したり、1系を除外するため\u001e`--AngularJS`をつけたり\u001dすると検索しやすいです。\n\n## HTMLのDOM\b要素を、別のDOM要素またはComponentから扱いたい\n要素に`#xxxxx`\bのように`#`始まりの名前をつけると、別の\bDOM要素から参照できます\n\n```html:HTML\n<input #phone placeholder=\"電話番号\"/>\n<!--  他のDOM要素からphonという変数名でDOM要素を参照できるようになる -->\n<button >(click)=\"callPhone\b(phone.value)\">\n```\n\n\bComponentから参照する場合は`@ViewChild`を使います\n\n```typescript:Component\n  // \bViewChildの引数に\b\b名前を文字列で指定します\n  @ViewChild('phone') phoneElement: phoneElement;\n\n  showPhoneValue() {\n    console.log(this.phoneElement.value);\n    )\n  }\n```\n\n\b**参考サイト**\n\n* [Angular公式サイト](https://angular.io/guide/template-syntax#ref-vars)\n* [StackOverFlow](https://stackoverflow.com/questions/32693061/how-can-i-select-an-element-in-a-component-template)\n\n\n\n## Routing時の認証を非同期で行いたい\nURLごとの認証は`CanActivate`インターフェースを実装すればできますが、\nサーバから認証情報を取得して非同期で認証したい場合もあると思います。\nそのような時は、**`CanActivate#canActivate`で**booleanの代わりに**Observable<boolean>を戻り値に指定する**ことで実現できます。\n\n\n```typescript:SampleAuthGuard\nimport { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs/Rx';\n\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable()\nexport class SampleAuthGuard implements CanActivate {\n\n  constructor(\n    private auth: AuthenticationService,\n  ) { }\n\n  // booleanではなくObservable<boolean>を戻り値で返す\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.auth.checkState()\n      .map(res => true)\n      .catch(err => Observable.of(false))\n  }\n}\n\n```\n\n\b**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/38425461/angular2-canactivate-calling-async-function)\n\n## FormArrayの値を初期化したい\nFormControlはpatchValueで初期値を設定できますが、\nFormArrayの場合patch\bValueで配列の値を設定しようと\bしても設定できません。\n\bこういう場合は、**\b\b配列1つ１つの値をもとにFormControlを生成してFormArrayにpush**します。\n\n```typescript:ダメな例\nngOnInit() {\n  // Form生成\n  this.form = this.formBuilder.group({\n    schoolName: '',\n    students: this.formBuilder.array([])\n  });\n\n  // Formに初期値を設定\n  this.form.pathValue({\n    schooleName: 'SampleSchoolName' // FormControlの値の初期化はpatchValueで可能\n    students: ['taro', 'jiro', 'saburo']; // FormArrayに要素を追加する場合patchValueでは不可能\n  });\n}\n```\n\n```typescript:\b良い例\nngOnInit() {\n  // Formを生成\n  this.form = this.formBuilder.group({\n    schoolName: '',\n    students: this.formBuilder.array([])\n  });\n\n  // Formに初期値を設定\n  this.form.pathValue({\n    schooleName: 'SampleSchoolName'\n  });\n\n  // データからFormControlを生成し１件１件FormArrayにpushする\n  ['taro', 'jiro', 'saburo'].forEach(student -> {\n    this.form.controls['students'].push(new FormControll(student));\n  });\n}\n```\n\n\b**参考サイト**\n\n* [StackOvereFlow](https://stackoverflow.com/questions/40916084/angular2-patchvalue-push-value-into-array)\n\n## 「ERROR Error: No provider for TemplateRef!」というエラー\n最初このエラーが出た時は、何が原因なのかわからずに困りました。。。\n大抵の場合は、**`*ngIf`や`*ngForm`の`*`が抜けてることが原因**です(要するにただのタイポです。。。)\n`*`が抜けると、Angularは`ngIf`をディレクティブとして解釈しようとしますが、\n\bそんな\b\bディレクティブは存在しないので`No provider for TemplateRef!`と言われてしまうそうです。\n\n\b**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/35932074/angular2-no-provider-for-templateref-ngif-templateref)\n\n\n## textareaにおいてTabキーでインデントしたい\n文書を入力するようなテキストエリアの場合に、\u001dTabキーでのインデントしたい場合は、\n\bkyedownイベント発生時に\bテキストエリアの値とキャレットの位置を操作することで実現可能です。\n\n```html:HTML\n<textarea #sampletextarea\n  (keydown)=\"indent($event, sampletextarea)\" ></textarea>\n```\n\n```typescript:Component\n  indent($event, sampleTextAreaElement) {\n    // Tabキー押下時\n    if ($event.keyCode === 9) {\n      \b// 次の要素に\bフォーカスが移らないようにする\n      $event.preventDefault();\n\n      // 現在のキャレット位置を取得\n      \bconst caretStart = textareaElement.selectionStart;\n      const caretEnd = textareaElement.selectionEnd;\n\n      // テキストエリアの値を\b取得し、キャレット位置にTabを挿入\n      const TAB = '¥t';\n      sampleTextAreaElement.value = sampleTextAreaElement.value.substring(0, caretStart)\n                     + TAB + sampleTextAreaElement.value.substring(caretStart, value.length);\n\n      // キャレット位置をTab分ずらす\n      sampleTextAreaElement.focus();\n      sampleTextAreaElement.setSelectionRange(caretStart + TAB.length, caretEnd + TAB.length);\n\n      return;\n    }\n  }\n\n```\n\n\n\n## \bMarkdownプレビューを\b表示したい、ソースコードはシンタックスハイライトさせたい\n[marked](https://github.com/chjj/marked)と[highlight.js](https://github.com/isagalaev/highlight.js)を組み合わせて使います。\n[marked](https://github.com/chjj/marked)のReadmeを見ればなんとなくわかりますが、Angularの仕組みに乗せる必要があるのでPipeやらServiceやらを作ります。\n\n```typescript:markdown-parse.service.ts\nimport { Injectable } from '@angular/core';\nimport marked from 'marked';\nimport hljs from 'highlight.js';\n\n\n@Injectable()\nexport class MarkdownParseService {\n\n  constructor() {\n    marked.setOptions({\n      highlight: function (code) {\n        return hljs.highlightAuto(code).value;\n      }\n    });\n  }\n\n  parse(rawText: string) {\n    return marked(rawText);\n  }\n}\n```\n\n\n```typescript:markdown.pipe.ts\nimport marked from 'marked';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { MarkdownParseService } from './markdown-parse.service';\n\n@Pipe({ name: 'toMarkdown' })\nexport class MarkdownParsePipe implements PipeTransform {\n  constructor(markdownParseService: MarkdownParseService) {}\n\n  transform(value: string): any {\n    return this.markdownParseService.parse(value);\n  }\n}\n```\n\nHTMLで下記のように指定します。`{{}}`だと\bサニタイズされてしまうので\b`innerHTML`属性を指定します。\n\n```html\n<div [innerHTML]=\"md | toMarkdown\"></div>\n```\n\n\n\b**参考サイト**\n\n* [Qiita AngularでMarkdownをHTMLとして表示するカスタムpipeを作成する](https://qiita.com/daikiojm/items/e02e2aeb0231b3620a0b)\n* Github [chjj/marked](https://github.com/chjj/marked)\n\n\n\n\n## 絞り込み条件付きリストにおいて、リストの要素が\b変更、追加\b、削除された時に絞り込み結果をリフレッシュしたい\nリストの絞り込みはPipeで実現しますが、通常Pipeはリストの要素が変更されても再び絞り込みが実施されることはありません。\nこのような場合はPipeアノテーションにて**pureオプションをfalseに設定**ましょう。\n\n```html:HTML\n<input type=\"text\" #searchUserName>\n<ul>\n  <li *ngFor=\"let user of (userList | searchUserFilter: searchUserName.value);\" >{{user.name}}</li>\n<ul>\n```\n\n```typescript:search-user.pipe.ts\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { User } from './user';\n\n@Pipe({\n  name: 'searchUserFilter',\n  pure: false // pureをfalseにすることでユーザが変更、追加、削除された時にリフレッシュできる\n})\nexport class SearchFilterPipe implements PipeTransform {\n  transform(items: Array<User>, searchUserName: string): any[] {\n    if (!searchUserName) return items;\n\n    searchUserName = searchUserName.toLowerCase();\n    return items.filter( item => item.user.userId.toLowerCase().includes(searchUserName));\n  }\n}\n```\n\n\b**参考サイト**\n\n* [Angular公式サイト](https://angular.io/guide/pipes#pure-and-impure-pipes)\n\n\n\n\n## グローバル定数を定義したい\nいろんなクラスで使う定数を\b共通\b化する時は、単純に**クラスを作ってstaticなメンバとして定数を定義**します。\n\n```typescript:app-settings.ts\nexport class AppSettings {\n   public static API_ENDPOINT='http://127.0.0.1:6666/api/';\n}\n```\n\n```typescript:SampleService\nimport {Injectable} from 'angular2/core';\nimport {AppSettings} from './app-settings';\n\n@Injectable()\nexport class SampleService {\n    \bsampleMethod() {\n      console.log(AppSettings.API_ENDPOINT);\n    }\n}\n```\n\n**参考**\n\n* [StackOverFlow](https://stackoverflow.com/questions/34986922/define-global-constants-in-angular-2)\n\n\n## 画像が多い画面の初期表示を早くしたい\n[ng-lazyload-image](https://github.com/tjoskar/ng-lazyload-image)を使えば画像の遅延ロードを実現できます。\n使い方もとても簡単でimgタグにディレクティブを指定するだけです。\n\n```html:HTML\n <img\n  [defaultImage]=\"https://images.sample.com/photo/defaultimage\" \n  [lazyLoad]=\"https://images.sample.com/photo/sampleimage\"\n  [offset]=\"30\"\n >\n```\n\n*defaultImage*\n　即時ロードされる画像のURL、遅延ロードする画像を読み込む間、表示される\n*lazyLoad*\n　遅延ロードする画像のURL\n*offset*\n　スクロールが発生する場合に画面下部の何ピクセル下に来た時にロードを開始するか\n*errorImage*\n　遅延ロード失敗時に表示する画像URL\n\n**参考サイト**\n\n* [ng-lazyload-image](https://github.com/tjoskar/ng-lazyload-image)\n\n\n## Angular Cliの`ng serve`コマンドでdistフォルダを一旦削除したくない\n`ng serve`コマンドは`dist`フォルダを削除してからtsファイルをトランスコンパイルします。\nそれを防ぐためには、**delete-output-pathオプションをfalse**に指定します。\n\n```json:package.json　ビルドスクリプト\n\"script\": {\n  \"build\": \"cp ./resource/* dist && ng serve --delete-output-path=false\"\n}\n```\n\n\b**参考サイト**\n\n* [angular-cli github issue #4366](https://github.com/angular/angular-cli/issues/4366)\n\n\n## AOTコンパイルが遅いのでなんとかしたい\nなんとかできませんでした。。。(もしかしたら方法があるのかもしれません。誰か教えてください!!!)\nAOTコンパイルはJITコンパイルが検出してくれないHTMLのエラーを警告してくれますが、その反面遅いです。特に[Angular Material](https://material.angular.io/)を使う場合は顕著です。\nそのため、自分の場合は基本的にJITビルドを使い、issueのプルリクをする前など区切りのいいタイミングでAOTビルドしてエラーがないか確認するというように使い分けてました。\n\n\n# 2. フロント側Angularでのテスト周り\n## CI環境などでテストが終わらずにタイムアウトしてしまう\nCirleCiなどでテストを実行する場合`ng test`コマンドだとプロセスが終了しないためタイムアウトで失敗してしまいます。\nこのような場合は**watchオプションをfalseに設定**します。\n\n```\nng test --wtach=false\n```\n\n**参考サイト**\n[Github isssue](https://github.com/angular/angular-cli/issues/362)\n\n## テスト時に「Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.」や「Failed to execute 'send' on 'XMLHttpRequest'」のエラー\nこのような場合は、一時的に`ng test`コマンドのオプションに**`-sm=false`を追加**してテストし直すと根本原因エラーメッセージで出力されるようになります。\n大抵の場合は自作したモッククラスに必要なメソッドがないことが原因です。\n\n\b**参考サイト**\n\n* [stackOverFlow](https://stackoverflow.com/questions/45399079/angular-tests-failing-with-failed-to-execute-send-on-xmlhttprequest)\n\n\n## テスト用に子コンポーネントをモック化したい\n意外と簡単で、TestBed#configureTestingModuleで\ndeclarationsに自作したモックの子コンポーネントを追加するだけです。\ninput,outputがあれば必要に応じてメンバ定義します。\n\n\n```typescript\n// ※import文は省略\n\n// モックの子コンポーネントを定義\n@Component({\n  selector: 'app-child', // 子コンポーネントと同じものを定義\n  template: '<p>Mock Child Component</p>'\n})\nclass MockClildComponent {\n  @Input() childInput: string;\n  @Output() childOutput = new EventEmitter();\n}\n\n// ...\n\nbeforeEach(() => {\n  TestBed.configureTestingModule({\n    declarations: [\n      // テスト時のdeclarationsにモックの定義を追加\n      MockProductSettingsComponent,\n      // ...\n    ],\n    // ...\n  });\n  // ...\n});\n```\n\n\b**参考サイト**\n\n* [stackOverFlow](https://stackoverflow.com/questions/41240163/mocking-child-components-angular-2)\n\n\n## テスト結果にAngular Materilaのスタイルが反映されない\nUIフレームワークで[Angular Material](https://material.angular.io/)を使っている場合、\n`karma.config.js`でAngular Materilaのcssを直接読み込んであげる必要あります。\n\n```javascript:karma.conf.js\nfiles: [\n      ・・・\n      // Angular Materialのスタイルをテスト開始時に読み込んでおく\n      {pattern: './node_modules/@angular/material/prebuilt-themes/indigo-pink.css', included: true, watched: false},\n],\n```\n\n**参考サイト**\n\n* [stackoverflow](https://github.com/angular/material2/issues/4056)\n\n\n## テスト結果にstyles.scss(アプリ共通のスタイル定義)のスタイルが反映されない\nアプリ共通スタイルをSASS形式にしている場合\n開発用ライブライに`karma-scss-preprocessor`と`node-sass`を追加して`karma.conf.js`を下記のように設定します。\n\n```javascript:karma.conf.js\nplugins: [\n  ・・・\n　 // プラグインに`karma-scss-preprocessor`を追加\n  require('karma-scss-preprocessor')\n],\n\n\nfiles: [\n  ・・・\n  // filesにアプリ共通スタイルを追加\n  { pattern: './src/styles.scss', watched: false,  included: true, served: true }\n],\n\n// preprocessorsを追加\npreprocessors: {\n './src/test.ts': ['@angular/cli'],\n './src/styles.scss': ['scss']\n},\n```\n\n\b**参考サイト**:\n\n* [stackOverFlow](https://stackoverflow.com/questions/44460733/how-to-configure-karma-to-include-global-scss-files-for-an-angular-cli-project/44498689#44498689)\n* [Github karma/issue/2700](https://github.com/karma-runner/karma/issues/2700)\n\n\n\n\n# 3. バックエンド側 Express、MongoDB周り\n※MongDBをNode.jsで扱う場合は[mongoose](https://github.com/Automattic/mongoose)という便利なライブラリがあるのでそれを使う前提のお話です。\n\n## mongooseのvirtualメソッドを使う\n例えば`記事`,`コメント`,`リプライ`などのモデルを定義する場合、\n３つのモデルのライフサイクルは、記事追加 => 記事に対するコメント追加 => コメントに対するリプライ追加　のようになります。\nこのような場合は、コメントが記事の参照を持ち、リプライがコメントの参照を持つモデル構造が望ましいです。コメントやリプライ追加時に１つのモデルの更新だけですむからです。\n![db構造_良.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f93ac0e6-317e-1cdf-bfba-13531e2455ba.png)\n\nただ記事の検索は少し工夫が必要で、**mongooseのvirtualを使います**。これによって記事からコメントへの参照、コメントからリプライへの参照を擬似的に定義できるため、\n検索時に擬似要素をpopulateするだけで、記事に紐付くコメントとリプライを取得できるようになります。\n![mongoose virtualのイメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/4aab7f38-1f19-e00b-b35d-23babf36a75b.png)\n\n具体的なソースコードを示します。\n\n```typescript:article.model.ts\nimport * as mongoose from 'mongoose';\n\nconst ArticleSchema = new mongoose.Schema({\n  content: String\n}, { toJSON: { virtuals: true } });\n\n\n// 記事に紐付くコメントモデルの配列をcommentsという擬似要素で定義する\nArticleSchema.virtual('comments', {\n  ref: 'Comment',\n  localField: '_id',\n  foreignField: 'articleId',\n  justOne: false,\n});\n\nconst Article = mongoose.model('Article', ArticleSchema);\n\nexport { Article };\n```\n\n\n```typescript:comment.model.ts\nimport * as mongoose from 'mongoose';\n\nconst CommentSchema = new mongoose.Schema({\n  articleId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Article',\n  },\n  comment: String;\n}, { toJSON: { virtuals: true } });\n\n// コメントに紐付くリプライモデルの配列をrepliesという擬似要素で定義する\nCommentSchema.virtual('replies', {\n  ref: 'Reply',\n  localField: '_id',\n  foreignField: 'commentId',\n  justOne: false,\n});\n\nconst Comment = mongoose.model('Comment', CommentSchema);\n\nexport { Comment };\n```\n\n```typescript:reply.model.ts\nimport * as mongoose from 'mongoose';\n\nconst ReplySchema = new mongoose.Schema({\n  commentId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Comment'\n  },\n  reply: String;\n});\n\nconst Reply = mongoose.model('Reply', ReplySchema);\n\nexport { Reply };\n```\n\n```typescript:検索処理\nArticle.find()\n.populate({\n  path: 'comments', // Articleモデルで定義した擬似要素commentsをpopulateする\n  populate: [{\n    path: 'replies', // Commentモデルで定義した擬似要素repliesをpopulateする\n  }],\n});\n```\n\n\n## リクエスト、レスポンスのログ出力したい\nExpressのuseにて実現します。\nレスポンスオブジェクトのfinishイベントを監視することで、レスポンス時にログを出力しています。\n\n\n```javascript:リクエストとレスポンスのログ出力　※ここでは簡単のためコンソールに出力しています\nconst express = express();\nexpress.use(function accessLogHandler (req, res, next) {\n  const start = new Date();\n  // リクエスト時のログ　\n  console.log([\n    'start',\n    req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n    req.method,\n    req.url,\n    '-',\n    req.headers.referer || '-',\n    req.headers['user-agent'] || '-',\n    '--ms--'\n  ].join(',\\t'));\n\n  res.once('finish', function() {\n　　 // レスポンス時のログ\n    accessLogger.info([\n      'end',\n      req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n      req.method,\n      req.url,\n      res.statusCode,\n      req.headers.referer || '-',\n      req.headers['user-agent'] || '-',\n      '--' + (new Date().getMilliseconds() - start.getMilliseconds()) + 'ms--'\n    ].join(',\\t'));\n  });\n\n  next();\n});\n```\n\n実際のログはこんな感じで出力されます。\n\n```py3\nstart,  ::ffff:127.0.0.1, GET, /api/authenticate/check-state,   -, http://localhost:4200/, Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36, --ms--\nend,    ::ffff:127.0.0.1, GET, /check-state,                  403, http://localhost:4200/, Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36,  --47ms--\n```\n\n\n\n## ログ出力でオブジェクトの全プロパティを出力したい\nオブジェクトの中身をログで確認する時はNode.jsの`util.inspect()`を使います。\n\n\n```javascript\nconst util = require('util');\nconst myObject = {\n   \"a\":\"a\",\n   \"b\":{\n      \"c\":\"c\",\n      \"d\":{\n         \"e\":\"e\",\n         \"f\":{\n            \"g\":\"g\",\n            \"h\":{\n               \"i\":\"i\"\n            }\n         }\n      }\n   }\n}; \n\nconsole.log(util.inspect(myObject, false, null));\n```\n\nこのようなログが出力されます\n\n```\n{ a: 'a', b: { c: 'c', d: { e: 'e', f: [Object] } } }\n```\n\n**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/10729276/how-can-i-get-the-full-object-in-node-jss-console-log-rather-than-object)\n\n\n## 環境変数で上書きできる定数を定義したい\n例えばサーバのポートなど環境個別に設定したくなるようなものは\n環境変数で上書きできる定数にしておくと便利です。\nNode.jsではprocess.env.変数名で環境変数が参照できるので下記のようにします。\n\n```typescript:定数定義\nexport const SERVER_PORT: string = process.env.SERVER_PORT || '3000';　// 環境変数SERVER_PORTが未指定の場合は3000となる\nexport const SERVER_HOST: string = process.env.SERVER_HOST || 'localhost'; // 環境変数SERVER_HOSTが未指定の場合はlocalhostとなる\n```\n\n\n## DB初回アクセスに失敗した場合にリトライされない\nmongooseを使っていると、DB初回接続時にエラーが起きた時に、なぜか再接続処理してくれません。\nDockerでアプリを配布する場合、アプリとMongoDBをdocker-composeで同時に立ち上げることがあると思いますが、まだMongoDBが起動しきってない状態でアプリからDBに接続しようとすると、アプリが異常終了してしまいます。これを防ぐには自力で再接続処理を実装する必要があります。\n\n```javascript\nfunction createConnection (dbURL, options) {\n    var db = mongoose.createConnection(dbURL, options);\n\n    db.on('error', function (err) {\n        if (err.message && err.message.match(/failed to connect to server .* on first connect/)) {\n            console.log(new Date(), String(err));\n\n            setTimeout(function () {\n                console.log(\"Retrying first connect...\");\n                db.openUri(dbURL).catch(() => {});\n            // 20秒後に再接続する\n            }, 20 * 1000);\n        } else {\n            console.error(new Date(), String(err));\n        }\n    });\n\n    db.once('open', function () {\n        console.log(\"Connection to db established.\");\n    });\n\n    return db;\n}\n```\n\n**参考サイト**\n\n* [Github mongooseのissue5169](https://github.com/Automattic/mongoose/issues/5169)\n\n","comments_count":0,"created_at":"2017-12-12T03:19:11+09:00","likes_count":39,"reactions_count":0},"next":{"fields":{"slug":"/7780e313-8bda-5534-99aa-37bf47e9deb3/","title":"GitBucketのissueで作業量を設定できるプラグイン","date":"2017-12-31T23:49:04+09:00","excerpt":"== 2018/4/7 追記 ==========================================本記事ではChrome拡張とDockerによって実現していましたが、その後GitBucket Plugin化しました。gitb...","tags":["JavaScript","chrome-extension","docker","GitBucket","Qiita"]},"id":"7780e313-8bda-5534-99aa-37bf47e9deb3","title":"GitBucketのissueで作業量を設定できるプラグイン","rendered_body":"<p>== 2018/4/7 追記 ==========================================<br>\n本記事ではChrome拡張とDockerによって実現していましたが、<br>\nその後GitBucket Plugin化しました。</p>\n\n<p><a href=\"https://github.com/Takumon/gitbucket-issue-estimation-plugin\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-plugin</a></p>\n\n<p><a href=\"https://github.com/Takumon/gitbucket-issue-estimation-plugin/releases/tag/0.1\" rel=\"nofollow noopener\" target=\"_blank\">リリースページ</a>からjarファイルをダウンロードして<code>&lt;GITBUCKET_HOME&gt;/plugins/</code>に置くだけで導入可能です。<br>\n== =======================================================</p>\n\n<p>Git Advent Calendarが埋まっていなかったので、大晦日ですが代わりに投稿させていただきました。</p>\n\n<h2>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h2>\n\n<p><a href=\"https://gitbucket.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">GitBucket</a>のマイルストーンの進捗率はissueの件数ベースなので、issueごとに作業量のバラつきがあったりすると現実的な進捗率と乖離してしまいます。</p>\n\n<p>そこで今回はChrome拡張とDockerイメージを作成して、<br>\nissueに作業量を設定できるようにして、マイルストーンで作業量ベースの進捗率を確認できるようにしました。</p>\n\n<p>Chrome拡張とDockerイメージはどちらも公開しているので簡単に導入できます。是非試してみてください。</p>\n\n<ul>\n<li>\n<em>Chrome拡張</em>\n\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-client</a></li>\n</ul>\n</li>\n<li>\n<em>Dockerイメージ</em>\n\n<ul>\n<li><a href=\"https://hub.docker.com/r/takumon/gitbucket-issue-estimation-server/\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-server</a></li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"導入すると\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B%E3%81%A8\"><i class=\"fa fa-link\"></i></a>導入すると</h2>\n\n<p><a href=\"https://gitbucket.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">GitBucket</a>のissueで作業量が設定できるようになり、<br>\n<a href=\"https://camo.qiitausercontent.com/f13706aedeb42c177c1f4f57975596b5ff002407/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36313030366263392d326438322d663062302d363461322d3037393233633737333963372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/f13706aedeb42c177c1f4f57975596b5ff002407/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36313030366263392d326438322d663062302d363461322d3037393233633737333963372e706e67\" alt=\"導入後_イシュー画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/61006bc9-2d82-f0b0-64a2-07923c7739c7.png\"></a></p>\n\n<p>マイルストーンで作業量ベースの進捗率が見れるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/b86e2b23bc0f4b9fae45b07bfd568b11bc005121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36613462383664382d323937332d656338342d383662632d3632383965343262643636362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b86e2b23bc0f4b9fae45b07bfd568b11bc005121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36613462383664382d323937332d656338342d383662632d3632383965343262643636362e706e67\" alt=\"導入後_マイルストーン画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/6a4b86d8-2973-ec84-86bc-6289e42bd666.png\"></a></p>\n\n<p>またissue一覧画面でも作業量を設定できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/7c2ee31427698b7fe01b30f25b8e31b7e3115e2d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39633835386533622d356463312d313432342d663334662d3562323661633665323066642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7c2ee31427698b7fe01b30f25b8e31b7e3115e2d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39633835386533622d356463312d313432342d663334662d3562323661633665323066642e706e67\" alt=\"導入後_イシュー一覧画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/9c858e3b-5dc1-1424-f34f-5b26ac6e20fd.png\"></a></p>\n\n<h2>\n<span id=\"導入手順\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>導入手順</h2>\n\n<h3>\n<span id=\"1-docker側\" class=\"fragment\"></span><a href=\"#1-docker%E5%81%B4\"><i class=\"fa fa-link\"></i></a>1. Docker側</h3>\n\n<p>GitBucketと同じネットワーク環境に作業量保存用のサーバを立てます。Dockerが導入されていることが前提です。</p>\n\n<ul>\n<li>docker-compose.ymlを作成（MongoDBのボリューム用にdocker-compose.ymlファイルと同階層にdbフォルダを作成してください）</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"docker\">\n<div class=\"code-lang\"><span class=\"bold\">docker-compose.yml</span></div>\n<div class=\"highlight\"><pre>version: \"3.3\"\nservices:\n  server:\n    image: takumon/gitbucket-issue-estimation-server\n    ports:\n      - 3000:3000\n    depends_on:\n      - mongo\n    links:\n      - mongo\n    environment:\n      MONGO_URL: mongodb://mongo:27017/test\n  mongo:\n    image: mongo:3.5.12\n    ports:\n      - 27017:27017\n    volumes:\n      - ./db:/data/db\n</pre></div>\n</div>\n\n<ul>\n<li>docker-conpose.ymlがあるフォルダで下記を実行</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span>docker-compose up <span class=\"nt\">-d</span>\n</pre></div></div>\n\n<h3>\n<span id=\"2-gitbucket側\" class=\"fragment\"></span><a href=\"#2-gitbucket%E5%81%B4\"><i class=\"fa fa-link\"></i></a>2. GitBucket側</h3>\n\n<p>Chrome拡張をインストールする前に、GitBucketのトークンを発行してメモしておきます。</p>\n\n<ul>\n<li><p>GitBucketヘッダー右上アイコン &gt; Account Setting を選択<br>\n<a href=\"https://camo.qiitausercontent.com/b06f383ce5768cc2c9b84b7bcd92537cbd0f94ef/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34323637363166372d633139392d653139652d633631392d6131383264643035623065612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b06f383ce5768cc2c9b84b7bcd92537cbd0f94ef/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34323637363166372d633139392d653139652d633631392d6131383264643035623065612e706e67\" alt=\"導入手順_GitBucketトークン発行_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/426761f7-c199-e19e-c619-a182dd05b0ea.png\"></a><br>\n<br></p></li>\n<li><p>左メニュー Applicationsを選択し、Generate new tokenのToken descriptionにトークンの概要を記載、その後<code>Generate token</code>ボタンをクリック<br>\n<a href=\"https://camo.qiitausercontent.com/e21ff3f5214f3833cc66ed4d9cf2037b31c6d02f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64313836663730322d663764622d353231652d366436642d6564636133313836643931352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e21ff3f5214f3833cc66ed4d9cf2037b31c6d02f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64313836663730322d663764622d353231652d366436642d6564636133313836643931352e706e67\" alt=\"導入手順_GitBucketトークン発行_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/d186f702-f7db-521e-6d6d-edca3186d915.png\"></a><br>\n<br></p></li>\n<li><p>発行されたトークンをコピー（後の手順で使います）<br>\n<a href=\"https://camo.qiitausercontent.com/d46de4cb3222a8304001bbc2f89abc1e14b2cba8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30633830346661662d666431332d383064322d386365392d6535303439323262623534612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d46de4cb3222a8304001bbc2f89abc1e14b2cba8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30633830346661662d666431332d383064322d386365392d6535303439323262623534612e706e67\" alt=\"導入手順_GitBucketトークン発行_３.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/0c804faf-fd13-80d2-8ce9-e504922bb54a.png\"></a></p></li>\n</ul>\n\n<h3>\n<span id=\"3-chrome-extension側\" class=\"fragment\"></span><a href=\"#3-chrome-extension%E5%81%B4\"><i class=\"fa fa-link\"></i></a>3. Chrome Extension側</h3>\n\n<ul>\n<li><p>Chromeを開きChromeウェブストアで<a href=\"https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-client</a>をインストール<br>\n<a href=\"https://camo.qiitausercontent.com/b7b7e21c6391cd1436ad73eb356bdec6f93bb3b4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63336365666639382d313731372d626566302d306465392d3836313736303638613635632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b7b7e21c6391cd1436ad73eb356bdec6f93bb3b4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63336365666639382d313731372d626566302d306465392d3836313736303638613635632e706e67\" alt=\"導入手順_GitBucket_拡張インストール_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/c3ceff98-1717-bef0-0de9-86176068a65c.png\"></a><br>\n<br></p></li>\n<li>\n<p>右上の「E」アイコンをクリック、下記情報を入力し<code>Save</code>ボタンクリック</p>\n\n<ul>\n<li>\n<strong>gitbucket-issue-estimation-server URL</strong>\n\n<ul>\n<li>サーバ側の手順で立てたサーバのURL 例： <code>http://127.0.0.1:3000</code> </li>\n</ul>\n</li>\n<li>\n<strong>GitBucket Token</strong>\n\n<ul>\n<li>GitBucket側の手順でメモしたトークン\n<a href=\"https://camo.qiitausercontent.com/be5ab7568b1a4eee506be3546cae994189e34d15/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66366162333739622d613835322d366562342d663634382d6131346437353139663365622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/be5ab7568b1a4eee506be3546cae994189e34d15/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66366162333739622d613835322d366562342d663634382d6131346437353139663365622e706e67\" alt=\"導入手順_GitBucketトークン発行_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f6ab379b-a852-6eb4-f648-a14d7519f3eb.png\"></a>\n<br>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"具体的な仕組み\" class=\"fragment\"></span><a href=\"#%E5%85%B7%E4%BD%93%E7%9A%84%E3%81%AA%E4%BB%95%E7%B5%84%E3%81%BF\"><i class=\"fa fa-link\"></i></a>具体的な仕組み</h2>\n\n<p>Docker側はMongoDBとNode.jsを使っていて、issueの作業量の検索登録・更新・削除APIを提供しているだけです。<br>\nChrome拡張側で下記のように全体をコントロールしています。</p>\n\n<p><strong>(1)</strong> ・・・　GitBucketの画面からissueとマイルストーンの情報を取得、issueの作業量、作業量ベースの進捗率を画面に挿入<br>\n<strong>(2)</strong> ・・・　画面から取得したissueの情報をもとに詳細情報を取得<br>\n<strong>(3)</strong> ・・・　issueの作業量を検索・登録・更新・削除</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/d5736e48c469204a17566c6cfb4003420add2c8e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63616435323063332d376439632d666134372d326262302d3732633534663638383233362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d5736e48c469204a17566c6cfb4003420add2c8e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63616435323063332d376439632d666134372d326262302d3732633534663638383233362e706e67\" alt=\"全体像.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/cad520c3-7d9c-fa47-2bb0-72c54f688236.png\"></a></p>\n\n<h2>\n<span id=\"chrome拡張作成時にgitbucket-apiまわりで躓いたこと\" class=\"fragment\"></span><a href=\"#chrome%E6%8B%A1%E5%BC%B5%E4%BD%9C%E6%88%90%E6%99%82%E3%81%ABgitbucket-api%E3%81%BE%E3%82%8F%E3%82%8A%E3%81%A7%E8%BA%93%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>Chrome拡張作成時にGitBucket APIまわりで躓いたこと</h2>\n\n<p><a href=\"https://github.com/gitbucket/gitbucket/wiki/API-WebHook\" rel=\"nofollow noopener\" target=\"_blank\">GitBucketのAPI</a>は<a href=\"https://developer.github.com/v3/\" rel=\"nofollow noopener\" target=\"_blank\">GithubのREST API v3</a>に準拠していますが、一部実装されていない部分があったので、Chrome拡張作成時に躓きました。</p>\n\n<h3>\n<span id=\"stateallが効かない\" class=\"fragment\"></span><a href=\"#stateall%E3%81%8C%E5%8A%B9%E3%81%8B%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a><code>state=all</code>が効かない</h3>\n\n<p>未解決issueと解決済issue両方をいっぺんに取得したかったのですが、GitBucketのAPIでは<code>state=all</code>が効きません。そのため<code>state=open</code>と<code>state=closed</code>を指定して２回に分けて取得する実装にしました。</p>\n\n<h4>\n<span id=\"per_pageが効かない1度に25件が最大\" class=\"fragment\"></span><a href=\"#per_page%E3%81%8C%E5%8A%B9%E3%81%8B%E3%81%AA%E3%81%841%E5%BA%A6%E3%81%AB25%E4%BB%B6%E3%81%8C%E6%9C%80%E5%A4%A7\"><i class=\"fa fa-link\"></i></a><code>per_page</code>が効かない（1度に25件が最大）</h4>\n\n<p>GitBucketのAPIでは<code>per_page</code>（検索時の１ページあたりの件数）が実装されていません。<br>\nそのためマイルストーンに紐づくissue取得時は、１ページ目を検索して取得結果が25件の場合は次のページも検索するような実装にしました。</p>\n\n<h4>\n<span id=\"closed_atクローズ日が取得できない\" class=\"fragment\"></span><a href=\"#closed_at%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%BA%E6%97%A5%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a><code>closed_at</code>（クローズ日）が取得できない</h4>\n\n<p>Chrome拡張作成当初は、バーンダウンチャートを表示しようと思っていたのですが、issueのクローズ日が取得出来ないので断念しました。</p>\n\n<h4>\n<span id=\"-参考にさせていただいたサイト\" class=\"fragment\"></span><a href=\"#-%E5%8F%82%E8%80%83%E3%81%AB%E3%81%95%E3%81%9B%E3%81%A6%E3%81%84%E3%81%9F%E3%81%A0%E3%81%84%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88\"><i class=\"fa fa-link\"></i></a>※ 参考にさせていただいたサイト</h4>\n\n<ul>\n<li><a href=\"https://qiita.com/5zm/items/b0b620cdeb9596108418#1%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8C%E6%9C%80%E5%A4%A725%E4%BB%B6%E3%81%A7%E5%85%A8issue%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\" id=\"reference-1c197ca99a2ee070efac\">PythonでGitBucketのIssueをExcel出力する（その後）</a></li>\n<li><a href=\"https://qiita.com/5zm/items/57d7abca8e0d447e326d#2-gitbucket%E3%81%AEapi%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6issues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0\" id=\"reference-7d56ea50a58cb24addc5\">PythonでGitBucketのIssueをExcel出力する（API呼び出し編）</a></li>\n</ul>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>本来こういう追加機能はGitBucketプラグインで作るべきなのかもしれませんが、今回はChrome拡張とDockerイメージで実現してみました。<br>\nChrome拡張は任意の画面にJavaScriptやCSSを差し込めるので、既存のWebサービスををちょっと便利にするのにはうってつけですね。</p>\n","body":"== 2018/4/7 追記 ==========================================\n本記事ではChrome拡張とDockerによって実現していましたが、\nその後GitBucket Plugin化しました。\n\n[gitbucket-issue-estimation-plugin](https://github.com/Takumon/gitbucket-issue-estimation-plugin)\n\n[リリースページ](https://github.com/Takumon/gitbucket-issue-estimation-plugin/releases/tag/0.1)からjarファイルをダウンロードして`<GITBUCKET_HOME>/plugins/`に置くだけで導入可能です。\n== =======================================================\n\n\nGit Advent Calendarが埋まっていなかったので、大晦日ですが代わりに投稿させていただきました。\n\n## はじめに\n[GitBucket](https://gitbucket.github.io/)のマイルストーンの進捗率はissueの件数ベースなので、issueごとに作業量のバラつきがあったりすると現実的な進捗率と乖離してしまいます。\n\nそこで今回は\bChrome拡張とDockerイメージを作成して、\nissueに作業量を設定できるようにして、マイルストーンで作業量ベースの進捗率を確認できるようにしました。\n\nChrome拡張とDockerイメージはどちらも公開しているので簡単に導入できます。是非試してみてください。\n\n\n* *Chrome拡張*\n    * [gitbucket-issue-estimation-client](https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja)\n* *Dockerイメージ*\n    * [gitbucket-issue-estimation-server](https://hub.docker.com/r/takumon/gitbucket-issue-estimation-server/)\n\n## 導入すると\n[GitBucket](https://gitbucket.github.io/)のissueで作業量が設定できるようになり、\n![導入後_イシュー画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/61006bc9-2d82-f0b0-64a2-07923c7739c7.png)\n\n\bマイルストーンで作業量ベースの進捗率が見れるようになります。\n![導入後_マイルストーン画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/6a4b86d8-2973-ec84-86bc-6289e42bd666.png)\n\nまた\bissue\b一覧画面でも作業量を設定できるようになります。\n![導入後_イシュー一覧画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/9c858e3b-5dc1-1424-f34f-5b26ac6e20fd.png)\n\n\n\n\n## 導入手順\n### 1. Docker側\nGitBucketと同じネットワーク環境に作業量\b保存用のサーバを立てます。Dockerが導入されていることが前提です。\n\n* \u001edocker-compose\b.ymlを作成（MongoDBのボリューム用にdocker-compose.ymlファイルと同階層にdbフォルダを作成してください）\n\n```docker:docker-compose.yml\nversion: \"3.3\"\nservices:\n  server:\n    image: takumon/gitbucket-issue-estimation-server\n    ports:\n      - 3000:3000\n    depends_on:\n      - mongo\n    links:\n      - mongo\n    environment:\n      MONGO_URL: mongodb://mongo:27017/test\n  mongo:\n    image: mongo:3.5.12\n    ports:\n      - 27017:27017\n    volumes:\n      - ./db:/data/db\n```\n\n* docker-conpose.ymlがあるフォルダで下記を実行\n\n```bash:\n$ docker-compose up -d\n```\n\n\n### 2. GitBucket側\nChrome拡張をインストールする前に、GitBucketの\bトークンを発行してメモしておきます。\n\n* GitBucketヘッダー右上アイコン > Account Setting\b を選択\n![導入手順_GitBucketトークン発行_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/426761f7-c199-e19e-c619-a182dd05b0ea.png)\n<br>\n\n* 左メニュー Applicationsを選択し、Generate new tokenのToken descriptionにトークンの概要を記載、その後`Generate token`ボタンをクリック\n![導入手順_GitBucketトークン発行_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/d186f702-f7db-521e-6d6d-edca3186d915.png)\n<br>\n\n* 発行されたトークンをコピー（後の手順で使います）\n![導入手順_GitBucketトークン発行_３.png](https://qiita-image-store.s3.amazonaws.com/0/49915/0c804faf-fd13-80d2-8ce9-e504922bb54a.png)\n\n\n### 3. Chrome Extension側\n* Chromeを開きChromeウェブストアで[gitbucket-issue-estimation-client](https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja)をインストール\n![導入手順_GitBucket_拡張インストール_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/c3ceff98-1717-bef0-0de9-86176068a65c.png)\n<br>\n\n* \b右上の「E」アイコンをクリック、下記情報を入力し`Save`ボタンクリック\n    * **gitbucket-issue-estimation-server URL**\n        * サーバ側の手順で立てたサーバのURL 例： `http://127.0.0.1:3000` \n    * **GitBucket Token**\n        * GitBucket側の手順でメモしたトークン\n![導入手順_GitBucketトークン発行_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f6ab379b-a852-6eb4-f648-a14d7519f3eb.png)\n<br>\n\n## 具体的な仕組み\nDocker側はMongoDBとNode.jsを使っていて、issueの作業量の検索登録・更新・削除APIを提供しているだけです。\nChrome拡張側で下記のように全体をコントロールしています。\n\n**(1)** ・・・　GitBucketの画面からissueとマイルストーンの情報を取得、issueの作業量、作業量ベースの進捗率を画面に挿入\n**(2)** ・・・　画面から取得したissueの情報をもとに詳細情報を取得\n**(3)** ・・・　issueの作業量を検索・登録・更新・削除\n\n![全体像.png](https://qiita-image-store.s3.amazonaws.com/0/49915/cad520c3-7d9c-fa47-2bb0-72c54f688236.png)\n\n\n\n## Chrome拡張作成時にGitBucket APIまわりで躓いたこと\n[GitBucketのAPI](https://github.com/gitbucket/gitbucket/wiki/API-WebHook)は[GithubのREST API v3](https://developer.github.com/v3/)に準拠していますが、一部実装されていない部分があったので、Chrome拡張作成時に躓きました。\n\n### `state=all`が効かない\n未解決issueと解決済issue両方をいっぺんに取得したかったのですが、GitBucketのAPIでは`state=all`が効きません。そのため`state=open`と`state=closed`を指定して２回に分けて取得する実装にしました。\n\n#### `per_page`が効かない（\b1度に25件が最大）\nGitBucketのAPIでは`per_page`（検索時の１ページあたりの件数）が実装されていません。\nそのためマイルストーンに紐づくissue取得時は、１ページ目を検索して取得結果が25件の場合は次のページも検索するような実装にしました。\n\n#### `closed_at`（クローズ日）が取得できない\nChrome拡張作成当初は、バーンダウンチャートを表示しようと思っていたのですが、issueのクローズ日が取得出来ないので断念しました。\n\n#### ※ 参考にさせていただいたサイト\n* [PythonでGitBucketのIssueをExcel出力する（その後）](https://qiita.com/5zm/items/b0b620cdeb9596108418#1%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8C%E6%9C%80%E5%A4%A725%E4%BB%B6%E3%81%A7%E5%85%A8issue%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84)\n* [PythonでGitBucketのIssueをExcel出力する（API呼び出し編）](https://qiita.com/5zm/items/57d7abca8e0d447e326d#2-gitbucket%E3%81%AEapi%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6issues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0)\n\n\n## まとめ\n本来こういう追加機能はGitBucketプラグインで作るべきなのかもしれませんが、今回はChrome拡張とDockerイメージで実現してみました。\nChrome拡張は任意の画面にJavaScriptやCSSを差し込めるので、既存のWebサービスををちょっと便利にするのにはうってつけですね。\n\n","comments_count":0,"created_at":"2017-12-31T23:49:04+09:00","likes_count":5,"reactions_count":0}}}