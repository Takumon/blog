{"data":{"site":{"siteMetadata":{"title":"Takumon Blog","author":"Takuto Inoue"}},"qiitaPost":{"rendered_body":"<p><a href=\"https://qiita.com/advent-calendar/2017/fujitsu\">FUJITSU Advent Calendar 2017</a> 12日目の記事です。</p>\n\n<p>リッチでイマドキなデザインのアプリが作りたくて、<br>\nここ４ヶ月ほど<strong>MEAN</strong>スタック(<strong>M</strong>ongoDB+<strong>E</strong>xpress+<strong>A</strong>ngular+<strong>N</strong>ode.js)でブログアプリを作っています。<br>\n知識ゼロからのスタートでしたが、多くの方々がブログやStackOverFlowに情報を載せてくれているので、躓きながらもなんとかアプリ開発を進めることができました。</p>\n\n<p>この記事では、フロントエンド初心者の自分がMEANスタックでアプリを作る時に躓いたことや、こういう機能を実現するにはどうすればいいか?などをまとめています。<br>\nこれからをAngularを学ぼうとしている方、ExpressやMongoDBなどサーバーサイドJavaScriptを学ぼうとしている方の参考になればうれしいです。</p>\n\n<h2>\n<span id=\"アプリの紹介\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E7%B4%B9%E4%BB%8B\"><i class=\"fa fa-link\"></i></a>アプリの紹介</h2>\n\n<p>本線から脱線しますが、イントラでの使用を想定したQiitaのようなブログアプリです。デモ環境もあるのでよければ触ってみてください(モバイルには未対応ですが。。。)</p>\n\n<ul>\n<li><a href=\"https://github.com/Takumon/mean-blog\" rel=\"nofollow noopener\" target=\"_blank\">Github</a></li>\n<li><a href=\"https://hub.docker.com/r/takumon/mean-blog_auto/\" rel=\"nofollow noopener\" target=\"_blank\">Dockerhub</a></li>\n<li>\n<a href=\"https://material-blog-demo.herokuapp.com/\" rel=\"nofollow noopener\" target=\"_blank\">デモ環境</a> (ユーザID/パスは DemoUser / DemoUser1234# です)</li>\n</ul>\n\n<p>アプリキャプチャ その１ (記事詳細)<br>\n<a href=\"https://camo.qiitausercontent.com/4d64d8bd315bcf330d1ac6de1cfe8bb53f280992/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62383133333331372d666163322d626239622d386632642d3133646238393662656366352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/4d64d8bd315bcf330d1ac6de1cfe8bb53f280992/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62383133333331372d666163322d626239622d386632642d3133646238393662656366352e706e67\" alt=\"appdemo_detail.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/b8133317-fac2-bb9b-8f2d-13db896becf5.png\"></a></p>\n\n<p>アプリキャプチャ その２ (記事一覧)<br>\n<a href=\"https://camo.qiitausercontent.com/96927cda50e8df84b0c5415e996246c6d720b607/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39353064313036322d316261342d363366362d666535332d6366653664343634333061342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/96927cda50e8df84b0c5415e996246c6d720b607/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39353064313036322d316261342d363366362d666535332d6366653664343634333061342e706e67\" alt=\"アプリ_スクリーンキャプチャ_記事一覧.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/950d1062-1ba4-63f6-fe53-cfe6d46430a4.png\"></a></p>\n\n<p>アプリキャプチャ その３ (プロフィール)<br>\n<a href=\"https://camo.qiitausercontent.com/46aab6c2add74ca826b1dbe730d1a82eb481e295/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33323563373934382d636531362d396330382d306236362d6433383932653034366165642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/46aab6c2add74ca826b1dbe730d1a82eb481e295/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33323563373934382d636531362d396330382d306236362d6433383932653034366165642e706e67\" alt=\"アプリ_スクリーンキャプチャ_ ユーザ画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/325c7948-ce16-9c08-0b66-d3892e046aed.png\"></a></p>\n\n<h1>\n<span id=\"1-フロント側angularまわり\" class=\"fragment\"></span><a href=\"#1-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4angular%E3%81%BE%E3%82%8F%E3%82%8A\"><i class=\"fa fa-link\"></i></a>1. フロント側Angularまわり</h1>\n\n<h2>\n<span id=\"angularについて調べる時に古い情報を除外したい\" class=\"fragment\"></span><a href=\"#angular%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%BF%E3%81%B9%E3%82%8B%E6%99%82%E3%81%AB%E5%8F%A4%E3%81%84%E6%83%85%E5%A0%B1%E3%82%92%E9%99%A4%E5%A4%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Angularについて調べる時に古い情報を除外したい</h2>\n\n<p>1系は<code>AngularJS</code>、2系以降は<code>Angular</code>と呼ばれており、1系と2系以降では大きく仕様が異なります。<br>\nそのため検索する時は<code>Angualr2</code>などバージョンを指定したり、1系を除外するため<code>--AngularJS</code>をつけたりすると検索しやすいです。</p>\n\n<h2>\n<span id=\"htmlのdom要素を別のdom要素またはcomponentから扱いたい\" class=\"fragment\"></span><a href=\"#html%E3%81%AEdom%E8%A6%81%E7%B4%A0%E3%82%92%E5%88%A5%E3%81%AEdom%E8%A6%81%E7%B4%A0%E3%81%BE%E3%81%9F%E3%81%AFcomponent%E3%81%8B%E3%82%89%E6%89%B1%E3%81%84%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>HTMLのDOM要素を、別のDOM要素またはComponentから扱いたい</h2>\n\n<p>要素に<code>#xxxxx</code>のように<code>#</code>始まりの名前をつけると、別のDOM要素から参照できます</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;input</span> <span class=\"err\">#</span><span class=\"na\">phone</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"電話番号\"</span><span class=\"nt\">/&gt;</span>\n<span class=\"c\">&lt;!--  他のDOM要素からphonという変数名でDOM要素を参照できるようになる --&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"nt\">&gt;</span>(click)=\"callPhone(phone.value)\"&gt;\n</pre></div>\n</div>\n\n<p>Componentから参照する場合は<code>@ViewChild</code>を使います</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">Component</span></div>\n<div class=\"highlight\"><pre>  <span class=\"c1\">// ViewChildの引数に名前を文字列で指定します</span>\n  <span class=\"p\">@</span><span class=\"nd\">ViewChild</span><span class=\"p\">(</span><span class=\"s1\">'phone'</span><span class=\"p\">)</span> <span class=\"nx\">phoneElement</span><span class=\"p\">:</span> <span class=\"nx\">phoneElement</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">showPhoneValue</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">phoneElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://angular.io/guide/template-syntax#ref-vars\" rel=\"nofollow noopener\" target=\"_blank\">Angular公式サイト</a></li>\n<li><a href=\"https://stackoverflow.com/questions/32693061/how-can-i-select-an-element-in-a-component-template\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"routing時の認証を非同期で行いたい\" class=\"fragment\"></span><a href=\"#routing%E6%99%82%E3%81%AE%E8%AA%8D%E8%A8%BC%E3%82%92%E9%9D%9E%E5%90%8C%E6%9C%9F%E3%81%A7%E8%A1%8C%E3%81%84%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Routing時の認証を非同期で行いたい</h2>\n\n<p>URLごとの認証は<code>CanActivate</code>インターフェースを実装すればできますが、<br>\nサーバから認証情報を取得して非同期で認証したい場合もあると思います。<br>\nそのような時は、<strong><code>CanActivate#canActivate</code>で</strong>booleanの代わりに<strong>Observableを戻り値に指定する</strong>ことで実現できます。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">SampleAuthGuard</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Router</span><span class=\"p\">,</span> <span class=\"nx\">CanActivate</span><span class=\"p\">,</span> <span class=\"nx\">ActivatedRouteSnapshot</span><span class=\"p\">,</span> <span class=\"nx\">RouterStateSnapshot</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/router'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AuthenticationService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./authentication.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SampleAuthGuard</span> <span class=\"kr\">implements</span> <span class=\"nx\">CanActivate</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span>\n    <span class=\"kr\">private</span> <span class=\"nx\">auth</span><span class=\"p\">:</span> <span class=\"nx\">AuthenticationService</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n  <span class=\"c1\">// booleanではなくObservable&lt;boolean&gt;を戻り値で返す</span>\n  <span class=\"nx\">canActivate</span><span class=\"p\">(</span><span class=\"nx\">route</span><span class=\"p\">:</span> <span class=\"nx\">ActivatedRouteSnapshot</span><span class=\"p\">,</span> <span class=\"nx\">state</span><span class=\"p\">:</span> <span class=\"nx\">RouterStateSnapshot</span><span class=\"p\">):</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"kr\">boolean</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">auth</span><span class=\"p\">.</span><span class=\"nx\">checkState</span><span class=\"p\">()</span>\n      <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">err</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">of</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">))</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/38425461/angular2-canactivate-calling-async-function\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"formarrayの値を初期化したい\" class=\"fragment\"></span><a href=\"#formarray%E3%81%AE%E5%80%A4%E3%82%92%E5%88%9D%E6%9C%9F%E5%8C%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>FormArrayの値を初期化したい</h2>\n\n<p>FormControlはpatchValueで初期値を設定できますが、<br>\nFormArrayの場合patchValueで配列の値を設定しようとしても設定できません。<br>\nこういう場合は、<strong>配列1つ１つの値をもとにFormControlを生成してFormArrayにpush</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">ダメな例</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Form生成</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">group</span><span class=\"p\">({</span>\n    <span class=\"na\">schoolName</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">([])</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// Formに初期値を設定</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">pathValue</span><span class=\"p\">({</span>\n    <span class=\"na\">schooleName</span><span class=\"p\">:</span> <span class=\"s1\">'SampleSchoolName'</span> <span class=\"c1\">// FormControlの値の初期化はpatchValueで可能</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'taro'</span><span class=\"p\">,</span> <span class=\"s1\">'jiro'</span><span class=\"p\">,</span> <span class=\"s1\">'saburo'</span><span class=\"p\">];</span> <span class=\"c1\">// FormArrayに要素を追加する場合patchValueでは不可能</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">良い例</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Formを生成</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">group</span><span class=\"p\">({</span>\n    <span class=\"na\">schoolName</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">([])</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// Formに初期値を設定</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">pathValue</span><span class=\"p\">({</span>\n    <span class=\"na\">schooleName</span><span class=\"p\">:</span> <span class=\"s1\">'SampleSchoolName'</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// データからFormControlを生成し１件１件FormArrayにpushする</span>\n  <span class=\"p\">[</span><span class=\"s1\">'taro'</span><span class=\"p\">,</span> <span class=\"s1\">'jiro'</span><span class=\"p\">,</span> <span class=\"s1\">'saburo'</span><span class=\"p\">].</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">student</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">controls</span><span class=\"p\">[</span><span class=\"s1\">'students'</span><span class=\"p\">].</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">FormControll</span><span class=\"p\">(</span><span class=\"nx\">student</span><span class=\"p\">));</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/40916084/angular2-patchvalue-push-value-into-array\" rel=\"nofollow noopener\" target=\"_blank\">StackOvereFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"error-error-no-provider-for-templaterefというエラー\" class=\"fragment\"></span><a href=\"#error-error-no-provider-for-templateref%E3%81%A8%E3%81%84%E3%81%86%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>「ERROR Error: No provider for TemplateRef!」というエラー</h2>\n\n<p>最初このエラーが出た時は、何が原因なのかわからずに困りました。。。<br>\n大抵の場合は、<strong><code>*ngIf</code>や<code>*ngForm</code>の<code>*</code>が抜けてることが原因</strong>です(要するにただのタイポです。。。)<br>\n<code>*</code>が抜けると、Angularは<code>ngIf</code>をディレクティブとして解釈しようとしますが、<br>\nそんなディレクティブは存在しないので<code>No provider for TemplateRef!</code>と言われてしまうそうです。</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/35932074/angular2-no-provider-for-templateref-ngif-templateref\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"textareaにおいてtabキーでインデントしたい\" class=\"fragment\"></span><a href=\"#textarea%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6tab%E3%82%AD%E3%83%BC%E3%81%A7%E3%82%A4%E3%83%B3%E3%83%87%E3%83%B3%E3%83%88%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>textareaにおいてTabキーでインデントしたい</h2>\n\n<p>文書を入力するようなテキストエリアの場合に、Tabキーでのインデントしたい場合は、<br>\nkyedownイベント発生時にテキストエリアの値とキャレットの位置を操作することで実現可能です。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;textarea</span> <span class=\"err\">#</span><span class=\"na\">sampletextarea</span>\n  <span class=\"err\">(</span><span class=\"na\">keydown</span><span class=\"err\">)=\"</span><span class=\"na\">indent</span><span class=\"err\">($</span><span class=\"na\">event</span><span class=\"err\">,</span> <span class=\"na\">sampletextarea</span><span class=\"err\">)\"</span> <span class=\"nt\">&gt;&lt;/textarea&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">Component</span></div>\n<div class=\"highlight\"><pre>  <span class=\"nx\">indent</span><span class=\"p\">(</span><span class=\"nx\">$event</span><span class=\"p\">,</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Tabキー押下時</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">$event</span><span class=\"p\">.</span><span class=\"nx\">keyCode</span> <span class=\"o\">===</span> <span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 次の要素にフォーカスが移らないようにする</span>\n      <span class=\"nx\">$event</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n\n      <span class=\"c1\">// 現在のキャレット位置を取得</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">caretStart</span> <span class=\"o\">=</span> <span class=\"nx\">textareaElement</span><span class=\"p\">.</span><span class=\"nx\">selectionStart</span><span class=\"p\">;</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">caretEnd</span> <span class=\"o\">=</span> <span class=\"nx\">textareaElement</span><span class=\"p\">.</span><span class=\"nx\">selectionEnd</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// テキストエリアの値を取得し、キャレット位置にTabを挿入</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">TAB</span> <span class=\"o\">=</span> <span class=\"s1\">'¥t'</span><span class=\"p\">;</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">caretStart</span><span class=\"p\">)</span>\n                     <span class=\"o\">+</span> <span class=\"nx\">TAB</span> <span class=\"o\">+</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"nx\">caretStart</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// キャレット位置をTab分ずらす</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">focus</span><span class=\"p\">();</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">setSelectionRange</span><span class=\"p\">(</span><span class=\"nx\">caretStart</span> <span class=\"o\">+</span> <span class=\"nx\">TAB</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">,</span> <span class=\"nx\">caretEnd</span> <span class=\"o\">+</span> <span class=\"nx\">TAB</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h2>\n<span id=\"markdownプレビューを表示したいソースコードはシンタックスハイライトさせたい\" class=\"fragment\"></span><a href=\"#markdown%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%97%E3%81%9F%E3%81%84%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AF%E3%82%B7%E3%83%B3%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B9%E3%83%8F%E3%82%A4%E3%83%A9%E3%82%A4%E3%83%88%E3%81%95%E3%81%9B%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Markdownプレビューを表示したい、ソースコードはシンタックスハイライトさせたい</h2>\n\n<p><a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">marked</a>と<a href=\"https://github.com/isagalaev/highlight.js\" rel=\"nofollow noopener\" target=\"_blank\">highlight.js</a>を組み合わせて使います。<br>\n<a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">marked</a>のReadmeを見ればなんとなくわかりますが、Angularの仕組みに乗せる必要があるのでPipeやらServiceやらを作ります。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">markdown-parse.service.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">marked</span> <span class=\"k\">from</span> <span class=\"s1\">'marked'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">hljs</span> <span class=\"k\">from</span> <span class=\"s1\">'highlight.js'</span><span class=\"p\">;</span>\n\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MarkdownParseService</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">marked</span><span class=\"p\">.</span><span class=\"nx\">setOptions</span><span class=\"p\">({</span>\n      <span class=\"na\">highlight</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">hljs</span><span class=\"p\">.</span><span class=\"nx\">highlightAuto</span><span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">).</span><span class=\"nx\">value</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"na\">rawText</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">marked</span><span class=\"p\">(</span><span class=\"nx\">rawText</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">markdown.pipe.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nx\">marked</span> <span class=\"k\">from</span> <span class=\"s1\">'marked'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MarkdownParseService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./markdown-parse.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'toMarkdown'</span> <span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MarkdownParsePipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">markdownParseService</span><span class=\"p\">:</span> <span class=\"nx\">MarkdownParseService</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">any</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">markdownParseService</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>HTMLで下記のように指定します。<code>{{}}</code>だとサニタイズされてしまうので<code>innerHTML</code>属性を指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">innerHTML</span><span class=\"err\">]=\"</span><span class=\"na\">md</span> <span class=\"err\">|</span> <span class=\"na\">toMarkdown</span><span class=\"err\">\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://qiita.com/daikiojm/items/e02e2aeb0231b3620a0b\" id=\"reference-9001a931765f8f52acaf\">Qiita AngularでMarkdownをHTMLとして表示するカスタムpipeを作成する</a></li>\n<li>Github <a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">chjj/marked</a>\n</li>\n</ul>\n\n<h2>\n<span id=\"絞り込み条件付きリストにおいてリストの要素が変更追加削除された時に絞り込み結果をリフレッシュしたい\" class=\"fragment\"></span><a href=\"#%E7%B5%9E%E3%82%8A%E8%BE%BC%E3%81%BF%E6%9D%A1%E4%BB%B6%E4%BB%98%E3%81%8D%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%8C%E5%A4%89%E6%9B%B4%E8%BF%BD%E5%8A%A0%E5%89%8A%E9%99%A4%E3%81%95%E3%82%8C%E3%81%9F%E6%99%82%E3%81%AB%E7%B5%9E%E3%82%8A%E8%BE%BC%E3%81%BF%E7%B5%90%E6%9E%9C%E3%82%92%E3%83%AA%E3%83%95%E3%83%AC%E3%83%83%E3%82%B7%E3%83%A5%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>絞り込み条件付きリストにおいて、リストの要素が変更、追加、削除された時に絞り込み結果をリフレッシュしたい</h2>\n\n<p>リストの絞り込みはPipeで実現しますが、通常Pipeはリストの要素が変更されても再び絞り込みが実施されることはありません。<br>\nこのような場合はPipeアノテーションにて<strong>pureオプションをfalseに設定</strong>ましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"err\">#</span><span class=\"na\">searchUserName</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n  <span class=\"nt\">&lt;li</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let user of (userList | searchUserFilter: searchUserName.value);\"</span> <span class=\"nt\">&gt;</span>{{user.name}}<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">search-user.pipe.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">User</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./user'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'searchUserFilter'</span><span class=\"p\">,</span>\n  <span class=\"na\">pure</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"c1\">// pureをfalseにすることでユーザが変更、追加、削除された時にリフレッシュできる</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SearchFilterPipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">User</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">searchUserName</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">any</span><span class=\"p\">[]</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">searchUserName</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">items</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">searchUserName</span> <span class=\"o\">=</span> <span class=\"nx\">searchUserName</span><span class=\"p\">.</span><span class=\"nx\">toLowerCase</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span> <span class=\"nx\">item</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">userId</span><span class=\"p\">.</span><span class=\"nx\">toLowerCase</span><span class=\"p\">().</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"nx\">searchUserName</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://angular.io/guide/pipes#pure-and-impure-pipes\" rel=\"nofollow noopener\" target=\"_blank\">Angular公式サイト</a></li>\n</ul>\n\n<h2>\n<span id=\"グローバル定数を定義したい\" class=\"fragment\"></span><a href=\"#%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E5%AE%9A%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>グローバル定数を定義したい</h2>\n\n<p>いろんなクラスで使う定数を共通化する時は、単純に<strong>クラスを作ってstaticなメンバとして定数を定義</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">app-settings.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppSettings</span> <span class=\"p\">{</span>\n   <span class=\"kr\">public</span> <span class=\"kr\">static</span> <span class=\"nx\">API_ENDPOINT</span><span class=\"o\">=</span><span class=\"s1\">'http://127.0.0.1:6666/api/'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">SampleService</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">Injectable</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'angular2/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">AppSettings</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app-settings'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SampleService</span> <span class=\"p\">{</span>\n    <span class=\"nx\">sampleMethod</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">AppSettings</span><span class=\"p\">.</span><span class=\"nx\">API_ENDPOINT</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/34986922/define-global-constants-in-angular-2\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"画像が多い画面の初期表示を早くしたい\" class=\"fragment\"></span><a href=\"#%E7%94%BB%E5%83%8F%E3%81%8C%E5%A4%9A%E3%81%84%E7%94%BB%E9%9D%A2%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A1%A8%E7%A4%BA%E3%82%92%E6%97%A9%E3%81%8F%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>画像が多い画面の初期表示を早くしたい</h2>\n\n<p><a href=\"https://github.com/tjoskar/ng-lazyload-image\" rel=\"nofollow noopener\" target=\"_blank\">ng-lazyload-image</a>を使えば画像の遅延ロードを実現できます。<br>\n使い方もとても簡単でimgタグにディレクティブを指定するだけです。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre> <span class=\"nt\">&lt;img</span>\n  <span class=\"err\">[</span><span class=\"na\">defaultImage</span><span class=\"err\">]=\"</span><span class=\"na\">https:</span><span class=\"err\">//</span><span class=\"na\">images</span><span class=\"err\">.</span><span class=\"na\">sample</span><span class=\"err\">.</span><span class=\"na\">com</span><span class=\"err\">/</span><span class=\"na\">photo</span><span class=\"err\">/</span><span class=\"na\">defaultimage</span><span class=\"err\">\"</span> \n  <span class=\"err\">[</span><span class=\"na\">lazyLoad</span><span class=\"err\">]=\"</span><span class=\"na\">https:</span><span class=\"err\">//</span><span class=\"na\">images</span><span class=\"err\">.</span><span class=\"na\">sample</span><span class=\"err\">.</span><span class=\"na\">com</span><span class=\"err\">/</span><span class=\"na\">photo</span><span class=\"err\">/</span><span class=\"na\">sampleimage</span><span class=\"err\">\"</span>\n  <span class=\"err\">[</span><span class=\"na\">offset</span><span class=\"err\">]=\"</span><span class=\"na\">30</span><span class=\"err\">\"</span>\n <span class=\"nt\">&gt;</span>\n</pre></div>\n</div>\n\n<p><em>defaultImage</em><br>\n　即時ロードされる画像のURL、遅延ロードする画像を読み込む間、表示される<br>\n<em>lazyLoad</em><br>\n　遅延ロードする画像のURL<br>\n<em>offset</em><br>\n　スクロールが発生する場合に画面下部の何ピクセル下に来た時にロードを開始するか<br>\n<em>errorImage</em><br>\n　遅延ロード失敗時に表示する画像URL</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/tjoskar/ng-lazyload-image\" rel=\"nofollow noopener\" target=\"_blank\">ng-lazyload-image</a></li>\n</ul>\n\n<h2>\n<span id=\"angular-cliのng-serveコマンドでdistフォルダを一旦削除したくない\" class=\"fragment\"></span><a href=\"#angular-cli%E3%81%AEng-serve%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7dist%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E3%82%92%E4%B8%80%E6%97%A6%E5%89%8A%E9%99%A4%E3%81%97%E3%81%9F%E3%81%8F%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>Angular Cliの<code>ng serve</code>コマンドでdistフォルダを一旦削除したくない</h2>\n\n<p><code>ng serve</code>コマンドは<code>dist</code>フォルダを削除してからtsファイルをトランスコンパイルします。<br>\nそれを防ぐためには、<strong>delete-output-pathオプションをfalse</strong>に指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json　ビルドスクリプト</span></div>\n<div class=\"highlight\"><pre><span class=\"s2\">\"script\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"cp ./resource/* dist &amp;&amp; ng serve --delete-output-path=false\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/angular/angular-cli/issues/4366\" rel=\"nofollow noopener\" target=\"_blank\">angular-cli github issue #4366</a></li>\n</ul>\n\n<h2>\n<span id=\"aotコンパイルが遅いのでなんとかしたい\" class=\"fragment\"></span><a href=\"#aot%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%8C%E9%81%85%E3%81%84%E3%81%AE%E3%81%A7%E3%81%AA%E3%82%93%E3%81%A8%E3%81%8B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>AOTコンパイルが遅いのでなんとかしたい</h2>\n\n<p>なんとかできませんでした。。。(もしかしたら方法があるのかもしれません。誰か教えてください!!!)<br>\nAOTコンパイルはJITコンパイルが検出してくれないHTMLのエラーを警告してくれますが、その反面遅いです。特に<a href=\"https://material.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular Material</a>を使う場合は顕著です。<br>\nそのため、自分の場合は基本的にJITビルドを使い、issueのプルリクをする前など区切りのいいタイミングでAOTビルドしてエラーがないか確認するというように使い分けてました。</p>\n\n<h1>\n<span id=\"2-フロント側angularでのテスト周り\" class=\"fragment\"></span><a href=\"#2-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4angular%E3%81%A7%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A\"><i class=\"fa fa-link\"></i></a>2. フロント側Angularでのテスト周り</h1>\n\n<h2>\n<span id=\"ci環境などでテストが終わらずにタイムアウトしてしまう\" class=\"fragment\"></span><a href=\"#ci%E7%92%B0%E5%A2%83%E3%81%AA%E3%81%A9%E3%81%A7%E3%83%86%E3%82%B9%E3%83%88%E3%81%8C%E7%B5%82%E3%82%8F%E3%82%89%E3%81%9A%E3%81%AB%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%97%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86\"><i class=\"fa fa-link\"></i></a>CI環境などでテストが終わらずにタイムアウトしてしまう</h2>\n\n<p>CirleCiなどでテストを実行する場合<code>ng test</code>コマンドだとプロセスが終了しないためタイムアウトで失敗してしまいます。<br>\nこのような場合は<strong>watchオプションをfalseに設定</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ng test --wtach=false\n</pre></div></div>\n\n<p><strong>参考サイト</strong><br>\n<a href=\"https://github.com/angular/angular-cli/issues/362\" rel=\"nofollow noopener\" target=\"_blank\">Github isssue</a></p>\n\n<h2>\n<span id=\"テスト時にerror-timeout---async-callback-was-not-invoked-within-timeout-specified-by-jasminedefault_timeout_intervalやfailed-to-execute-send-on-xmlhttprequestのエラー\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E6%99%82%E3%81%ABerror-timeout---async-callback-was-not-invoked-within-timeout-specified-by-jasminedefault_timeout_interval%E3%82%84failed-to-execute-send-on-xmlhttprequest%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>テスト時に「Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.」や「Failed to execute 'send' on 'XMLHttpRequest'」のエラー</h2>\n\n<p>このような場合は、一時的に<code>ng test</code>コマンドのオプションに<strong><code>-sm=false</code>を追加</strong>してテストし直すと根本原因エラーメッセージで出力されるようになります。<br>\n大抵の場合は自作したモッククラスに必要なメソッドがないことが原因です。</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/45399079/angular-tests-failing-with-failed-to-execute-send-on-xmlhttprequest\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト用に子コンポーネントをモック化したい\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%94%A8%E3%81%AB%E5%AD%90%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E3%83%A2%E3%83%83%E3%82%AF%E5%8C%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト用に子コンポーネントをモック化したい</h2>\n\n<p>意外と簡単で、TestBed#configureTestingModuleで<br>\ndeclarationsに自作したモックの子コンポーネントを追加するだけです。<br>\ninput,outputがあれば必要に応じてメンバ定義します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\"><div class=\"highlight\"><pre><span class=\"c1\">// ※import文は省略</span>\n\n<span class=\"c1\">// モックの子コンポーネントを定義</span>\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-child'</span><span class=\"p\">,</span> <span class=\"c1\">// 子コンポーネントと同じものを定義</span>\n  <span class=\"na\">template</span><span class=\"p\">:</span> <span class=\"s1\">'&lt;p&gt;Mock Child Component&lt;/p&gt;'</span>\n<span class=\"p\">})</span>\n<span class=\"kd\">class</span> <span class=\"nx\">MockClildComponent</span> <span class=\"p\">{</span>\n  <span class=\"p\">@</span><span class=\"nd\">Input</span><span class=\"p\">()</span> <span class=\"nx\">childInput</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"p\">@</span><span class=\"nd\">Output</span><span class=\"p\">()</span> <span class=\"nx\">childOutput</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">EventEmitter</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// ...</span>\n\n<span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n    <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"c1\">// テスト時のdeclarationsにモックの定義を追加</span>\n      <span class=\"nx\">MockProductSettingsComponent</span><span class=\"p\">,</span>\n      <span class=\"c1\">// ...</span>\n    <span class=\"p\">],</span>\n    <span class=\"c1\">// ...</span>\n  <span class=\"p\">});</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">});</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/41240163/mocking-child-components-angular-2\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト結果にangular-materilaのスタイルが反映されない\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%B5%90%E6%9E%9C%E3%81%ABangular-materila%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%8C%E5%8F%8D%E6%98%A0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト結果にAngular Materilaのスタイルが反映されない</h2>\n\n<p>UIフレームワークで<a href=\"https://material.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular Material</a>を使っている場合、<br>\n<code>karma.config.js</code>でAngular Materilaのcssを直接読み込んであげる必要あります。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">karma.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"err\">・・・</span>\n      <span class=\"c1\">// Angular Materialのスタイルをテスト開始時に読み込んでおく</span>\n      <span class=\"p\">{</span><span class=\"nl\">pattern</span><span class=\"p\">:</span> <span class=\"s1\">'./node_modules/@angular/material/prebuilt-themes/indigo-pink.css'</span><span class=\"p\">,</span> <span class=\"nx\">included</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">watched</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">},</span>\n<span class=\"p\">],</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/angular/material2/issues/4056\" rel=\"nofollow noopener\" target=\"_blank\">stackoverflow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト結果にstylesscssアプリ共通のスタイル定義のスタイルが反映されない\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%B5%90%E6%9E%9C%E3%81%ABstylesscss%E3%82%A2%E3%83%97%E3%83%AA%E5%85%B1%E9%80%9A%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E5%AE%9A%E7%BE%A9%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%8C%E5%8F%8D%E6%98%A0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト結果にstyles.scss(アプリ共通のスタイル定義)のスタイルが反映されない</h2>\n\n<p>アプリ共通スタイルをSASS形式にしている場合<br>\n開発用ライブライに<code>karma-scss-preprocessor</code>と<code>node-sass</code>を追加して<code>karma.conf.js</code>を下記のように設定します。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">karma.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"err\">・・・</span>\n<span class=\"err\">　</span> <span class=\"c1\">// プラグインに`karma-scss-preprocessor`を追加</span>\n  <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'karma-scss-preprocessor'</span><span class=\"p\">)</span>\n<span class=\"p\">],</span>\n\n\n<span class=\"nx\">files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"err\">・・・</span>\n  <span class=\"c1\">// filesにアプリ共通スタイルを追加</span>\n  <span class=\"p\">{</span> <span class=\"nl\">pattern</span><span class=\"p\">:</span> <span class=\"s1\">'./src/styles.scss'</span><span class=\"p\">,</span> <span class=\"nx\">watched</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>  <span class=\"nx\">included</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">served</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n<span class=\"p\">],</span>\n\n<span class=\"c1\">// preprocessorsを追加</span>\n<span class=\"nx\">preprocessors</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n <span class=\"s1\">'./src/test.ts'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'@angular/cli'</span><span class=\"p\">],</span>\n <span class=\"s1\">'./src/styles.scss'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'scss'</span><span class=\"p\">]</span>\n<span class=\"p\">},</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong>:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/44460733/how-to-configure-karma-to-include-global-scss-files-for-an-angular-cli-project/44498689#44498689\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n<li><a href=\"https://github.com/karma-runner/karma/issues/2700\" rel=\"nofollow noopener\" target=\"_blank\">Github karma/issue/2700</a></li>\n</ul>\n\n<h1>\n<span id=\"3-バックエンド側-expressmongodb周り\" class=\"fragment\"></span><a href=\"#3-%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89%E5%81%B4-expressmongodb%E5%91%A8%E3%82%8A\"><i class=\"fa fa-link\"></i></a>3. バックエンド側 Express、MongoDB周り</h1>\n\n<p>※MongDBをNode.jsで扱う場合は<a href=\"https://github.com/Automattic/mongoose\" rel=\"nofollow noopener\" target=\"_blank\">mongoose</a>という便利なライブラリがあるのでそれを使う前提のお話です。</p>\n\n<h2>\n<span id=\"mongooseのvirtualメソッドを使う\" class=\"fragment\"></span><a href=\"#mongoose%E3%81%AEvirtual%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>mongooseのvirtualメソッドを使う</h2>\n\n<p>例えば<code>記事</code>,<code>コメント</code>,<code>リプライ</code>などのモデルを定義する場合、<br>\n３つのモデルのライフサイクルは、記事追加 =&gt; 記事に対するコメント追加 =&gt; コメントに対するリプライ追加　のようになります。<br>\nこのような場合は、コメントが記事の参照を持ち、リプライがコメントの参照を持つモデル構造が望ましいです。コメントやリプライ追加時に１つのモデルの更新だけですむからです。<br>\n<a href=\"https://camo.qiitausercontent.com/129a84bd908d87c7fcbda29704ad50ac10529129/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393361633065362d333137652d316364662d626662612d3133353331653234353562612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/129a84bd908d87c7fcbda29704ad50ac10529129/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393361633065362d333137652d316364662d626662612d3133353331653234353562612e706e67\" alt=\"db構造_良.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f93ac0e6-317e-1cdf-bfba-13531e2455ba.png\"></a></p>\n\n<p>ただ記事の検索は少し工夫が必要で、<strong>mongooseのvirtualを使います</strong>。これによって記事からコメントへの参照、コメントからリプライへの参照を擬似的に定義できるため、<br>\n検索時に擬似要素をpopulateするだけで、記事に紐付くコメントとリプライを取得できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/bd8d4eedcb08eeaca13290e8dc91b8b2e10c5dae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34616162376633382d316631392d653030622d623335642d3233626162663336613735622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/bd8d4eedcb08eeaca13290e8dc91b8b2e10c5dae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34616162376633382d316631392d653030622d623335642d3233626162663336613735622e706e67\" alt=\"mongoose virtualのイメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/4aab7f38-1f19-e00b-b35d-23babf36a75b.png\"></a></p>\n\n<p>具体的なソースコードを示します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">article.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">ArticleSchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">content</span><span class=\"p\">:</span> <span class=\"nb\">String</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">toJSON</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">virtuals</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"p\">});</span>\n\n\n<span class=\"c1\">// 記事に紐付くコメントモデルの配列をcommentsという擬似要素で定義する</span>\n<span class=\"nx\">ArticleSchema</span><span class=\"p\">.</span><span class=\"nx\">virtual</span><span class=\"p\">(</span><span class=\"s1\">'comments'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Comment'</span><span class=\"p\">,</span>\n  <span class=\"na\">localField</span><span class=\"p\">:</span> <span class=\"s1\">'_id'</span><span class=\"p\">,</span>\n  <span class=\"na\">foreignField</span><span class=\"p\">:</span> <span class=\"s1\">'articleId'</span><span class=\"p\">,</span>\n  <span class=\"na\">justOne</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Article</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Article'</span><span class=\"p\">,</span> <span class=\"nx\">ArticleSchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Article</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">comment.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">CommentSchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">articleId</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">.</span><span class=\"nx\">Types</span><span class=\"p\">.</span><span class=\"nx\">ObjectId</span><span class=\"p\">,</span>\n    <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Article'</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">comment</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">;</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">toJSON</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">virtuals</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"p\">});</span>\n\n<span class=\"c1\">// コメントに紐付くリプライモデルの配列をrepliesという擬似要素で定義する</span>\n<span class=\"nx\">CommentSchema</span><span class=\"p\">.</span><span class=\"nx\">virtual</span><span class=\"p\">(</span><span class=\"s1\">'replies'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Reply'</span><span class=\"p\">,</span>\n  <span class=\"na\">localField</span><span class=\"p\">:</span> <span class=\"s1\">'_id'</span><span class=\"p\">,</span>\n  <span class=\"na\">foreignField</span><span class=\"p\">:</span> <span class=\"s1\">'commentId'</span><span class=\"p\">,</span>\n  <span class=\"na\">justOne</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Comment</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Comment'</span><span class=\"p\">,</span> <span class=\"nx\">CommentSchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Comment</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">reply.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">ReplySchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">commentId</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">.</span><span class=\"nx\">Types</span><span class=\"p\">.</span><span class=\"nx\">ObjectId</span><span class=\"p\">,</span>\n    <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Comment'</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">reply</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Reply</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Reply'</span><span class=\"p\">,</span> <span class=\"nx\">ReplySchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Reply</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">検索処理</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">Article</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">()</span>\n<span class=\"p\">.</span><span class=\"nx\">populate</span><span class=\"p\">({</span>\n  <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"s1\">'comments'</span><span class=\"p\">,</span> <span class=\"c1\">// Articleモデルで定義した擬似要素commentsをpopulateする</span>\n  <span class=\"na\">populate</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"s1\">'replies'</span><span class=\"p\">,</span> <span class=\"c1\">// Commentモデルで定義した擬似要素repliesをpopulateする</span>\n  <span class=\"p\">}],</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"リクエストレスポンスのログ出力したい\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%81%AE%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>リクエスト、レスポンスのログ出力したい</h2>\n\n<p>Expressのuseにて実現します。<br>\nレスポンスオブジェクトのfinishイベントを監視することで、レスポンス時にログを出力しています。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">リクエストとレスポンスのログ出力　※ここでは簡単のためコンソールに出力しています</span></div>\n<div class=\"highlight\"><pre><span class=\"kd\">const</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n<span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"nx\">accessLogHandler</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n  <span class=\"c1\">// リクエスト時のログ　</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">([</span>\n    <span class=\"s1\">'start'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'x-forwarded-for'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span>\n    <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">referer</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'user-agent'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'--ms--'</span>\n  <span class=\"p\">].</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">',</span><span class=\"err\">\\</span><span class=\"s1\">t'</span><span class=\"p\">));</span>\n\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">once</span><span class=\"p\">(</span><span class=\"s1\">'finish'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"err\">　　</span> <span class=\"c1\">// レスポンス時のログ</span>\n    <span class=\"nx\">accessLogger</span><span class=\"p\">.</span><span class=\"nx\">info</span><span class=\"p\">([</span>\n      <span class=\"s1\">'end'</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'x-forwarded-for'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">referer</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'user-agent'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'--'</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">getMilliseconds</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"nx\">start</span><span class=\"p\">.</span><span class=\"nx\">getMilliseconds</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"s1\">'ms--'</span>\n    <span class=\"p\">].</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">',</span><span class=\"err\">\\</span><span class=\"s1\">t'</span><span class=\"p\">));</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">next</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<p>実際のログはこんな感じで出力されます。</p>\n\n<div class=\"code-frame\" data-lang=\"py3\"><div class=\"highlight\"><pre><span class=\"n\">start</span><span class=\"p\">,</span>  <span class=\"p\">::</span><span class=\"n\">ffff</span><span class=\"p\">:</span><span class=\"mf\">127.0</span><span class=\"o\">.</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">authenticate</span><span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"p\">,</span>   <span class=\"o\">-</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">4200</span><span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"n\">Mozilla</span><span class=\"o\">/</span><span class=\"mf\">5.0</span> <span class=\"p\">(</span><span class=\"n\">Macintosh</span><span class=\"p\">;</span> <span class=\"n\">Intel</span> <span class=\"n\">Mac</span> <span class=\"n\">OS</span> <span class=\"n\">X</span> <span class=\"mi\">10</span><span class=\"n\">_12_6</span><span class=\"p\">)</span> <span class=\"n\">AppleWebKit</span><span class=\"o\">/</span><span class=\"mf\">537.36</span> <span class=\"p\">(</span><span class=\"n\">KHTML</span><span class=\"p\">,</span> <span class=\"n\">like</span> <span class=\"n\">Gecko</span><span class=\"p\">)</span> <span class=\"n\">Chrome</span><span class=\"o\">/</span><span class=\"mf\">62.0</span><span class=\"o\">.</span><span class=\"mf\">3202.94</span> <span class=\"n\">Safari</span><span class=\"o\">/</span><span class=\"mf\">537.36</span><span class=\"p\">,</span> <span class=\"o\">--</span><span class=\"n\">ms</span><span class=\"o\">--</span>\n<span class=\"n\">end</span><span class=\"p\">,</span>    <span class=\"p\">::</span><span class=\"n\">ffff</span><span class=\"p\">:</span><span class=\"mf\">127.0</span><span class=\"o\">.</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"p\">,</span>                  <span class=\"mi\">403</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">4200</span><span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"n\">Mozilla</span><span class=\"o\">/</span><span class=\"mf\">5.0</span> <span class=\"p\">(</span><span class=\"n\">Macintosh</span><span class=\"p\">;</span> <span class=\"n\">Intel</span> <span class=\"n\">Mac</span> <span class=\"n\">OS</span> <span class=\"n\">X</span> <span class=\"mi\">10</span><span class=\"n\">_12_6</span><span class=\"p\">)</span> <span class=\"n\">AppleWebKit</span><span class=\"o\">/</span><span class=\"mf\">537.36</span> <span class=\"p\">(</span><span class=\"n\">KHTML</span><span class=\"p\">,</span> <span class=\"n\">like</span> <span class=\"n\">Gecko</span><span class=\"p\">)</span> <span class=\"n\">Chrome</span><span class=\"o\">/</span><span class=\"mf\">62.0</span><span class=\"o\">.</span><span class=\"mf\">3202.94</span> <span class=\"n\">Safari</span><span class=\"o\">/</span><span class=\"mf\">537.36</span><span class=\"p\">,</span>  <span class=\"o\">--</span><span class=\"mi\">47</span><span class=\"n\">ms</span><span class=\"o\">--</span>\n</pre></div></div>\n\n<h2>\n<span id=\"ログ出力でオブジェクトの全プロパティを出力したい\" class=\"fragment\"></span><a href=\"#%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E3%81%A7%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%85%A8%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%82%92%E5%87%BA%E5%8A%9B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>ログ出力でオブジェクトの全プロパティを出力したい</h2>\n\n<p>オブジェクトの中身をログで確認する時はNode.jsの<code>util.inspect()</code>を使います。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre><span class=\"kd\">const</span> <span class=\"nx\">util</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'util'</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">myObject</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"s2\">\"a\"</span><span class=\"p\">:</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span>\n   <span class=\"s2\">\"b\"</span><span class=\"p\">:{</span>\n      <span class=\"s2\">\"c\"</span><span class=\"p\">:</span><span class=\"s2\">\"c\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"d\"</span><span class=\"p\">:{</span>\n         <span class=\"s2\">\"e\"</span><span class=\"p\">:</span><span class=\"s2\">\"e\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"f\"</span><span class=\"p\">:{</span>\n            <span class=\"s2\">\"g\"</span><span class=\"p\">:</span><span class=\"s2\">\"g\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"h\"</span><span class=\"p\">:{</span>\n               <span class=\"s2\">\"i\"</span><span class=\"p\">:</span><span class=\"s2\">\"i\"</span>\n            <span class=\"p\">}</span>\n         <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">};</span> \n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">util</span><span class=\"p\">.</span><span class=\"nx\">inspect</span><span class=\"p\">(</span><span class=\"nx\">myObject</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">));</span>\n</pre></div></div>\n\n<p>このようなログが出力されます</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>{ a: 'a', b: { c: 'c', d: { e: 'e', f: [Object] } } }\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/10729276/how-can-i-get-the-full-object-in-node-jss-console-log-rather-than-object\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"環境変数で上書きできる定数を定義したい\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%81%A7%E4%B8%8A%E6%9B%B8%E3%81%8D%E3%81%A7%E3%81%8D%E3%82%8B%E5%AE%9A%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>環境変数で上書きできる定数を定義したい</h2>\n\n<p>例えばサーバのポートなど環境個別に設定したくなるようなものは<br>\n環境変数で上書きできる定数にしておくと便利です。<br>\nNode.jsではprocess.env.変数名で環境変数が参照できるので下記のようにします。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">定数定義</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_PORT</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">SERVER_PORT</span> <span class=\"o\">||</span> <span class=\"s1\">'3000'</span><span class=\"p\">;</span><span class=\"err\">　</span><span class=\"c1\">// 環境変数SERVER_PORTが未指定の場合は3000となる</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_HOST</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">SERVER_HOST</span> <span class=\"o\">||</span> <span class=\"s1\">'localhost'</span><span class=\"p\">;</span> <span class=\"c1\">// 環境変数SERVER_HOSTが未指定の場合はlocalhostとなる</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"db初回アクセスに失敗した場合にリトライされない\" class=\"fragment\"></span><a href=\"#db%E5%88%9D%E5%9B%9E%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%AB%E5%A4%B1%E6%95%97%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AB%E3%83%AA%E3%83%88%E3%83%A9%E3%82%A4%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>DB初回アクセスに失敗した場合にリトライされない</h2>\n\n<p>mongooseを使っていると、DB初回接続時にエラーが起きた時に、なぜか再接続処理してくれません。<br>\nDockerでアプリを配布する場合、アプリとMongoDBをdocker-composeで同時に立ち上げることがあると思いますが、まだMongoDBが起動しきってない状態でアプリからDBに接続しようとすると、アプリが異常終了してしまいます。これを防ぐには自力で再接続処理を実装する必要があります。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre><span class=\"kd\">function</span> <span class=\"nx\">createConnection</span> <span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">createConnection</span><span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">(</span><span class=\"sr\">/failed to connect to server .* on first connect/</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(),</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">));</span>\n\n            <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Retrying first connect...\"</span><span class=\"p\">);</span>\n                <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">openUri</span><span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">).</span><span class=\"k\">catch</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n            <span class=\"c1\">// 20秒後に再接続する</span>\n            <span class=\"p\">},</span> <span class=\"mi\">20</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(),</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">once</span><span class=\"p\">(</span><span class=\"s1\">'open'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Connection to db established.\"</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">db</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/Automattic/mongoose/issues/5169\" rel=\"nofollow noopener\" target=\"_blank\">Github mongooseのissue5169</a></li>\n</ul>\n","headings":[{"id":"アプリの紹介","value":"アプリの紹介","depth":2,"parents":[]},{"id":"1-フロント側angularまわり","value":"1. フロント側Angularまわり","depth":1,"parents":[]},{"id":"angularについて調べる時に古い情報を除外したい","value":"Angularについて調べる時に古い情報を除外したい","depth":2,"parents":[{"id":"1-フロント側angularまわり","value":"1. フロント側Angularまわり","depth":1}]},{"id":"htmlのdom要素を別のdom要素またはcomponentから扱いたい","value":"HTMLのDOM要素を、別のDOM要素またはComponentから扱いたい","depth":2,"parents":[{"id":"1-フロント側angularまわり","value":"1. フロント側Angularまわり","depth":1}]},{"id":"routing時の認証を非同期で行いたい","value":"Routing時の認証を非同期で行いたい","depth":2,"parents":[{"id":"1-フロント側angularまわり","value":"1. フロント側Angularまわり","depth":1}]},{"id":"formarrayの値を初期化したい","value":"FormArrayの値を初期化したい","depth":2,"parents":[{"id":"1-フロント側angularまわり","value":"1. フロント側Angularまわり","depth":1}]},{"id":"error-error-no-provider-for-templaterefというエラー","value":"「ERROR Error: No provider for TemplateRef!」というエラー","depth":2,"parents":[{"id":"1-フロント側angularまわり","value":"1. フロント側Angularまわり","depth":1}]},{"id":"textareaにおいてtabキーでインデントしたい","value":"textareaにおいてTabキーでインデントしたい","depth":2,"parents":[{"id":"1-フロント側angularまわり","value":"1. フロント側Angularまわり","depth":1}]},{"id":"markdownプレビューを表示したいソースコードはシンタックスハイライトさせたい","value":"Markdownプレビューを表示したい、ソースコードはシンタックスハイライトさせたい","depth":2,"parents":[{"id":"1-フロント側angularまわり","value":"1. フロント側Angularまわり","depth":1}]},{"id":"絞り込み条件付きリストにおいてリストの要素が変更追加削除された時に絞り込み結果をリフレッシュしたい","value":"絞り込み条件付きリストにおいて、リストの要素が変更、追加、削除された時に絞り込み結果をリフレッシュしたい","depth":2,"parents":[{"id":"1-フロント側angularまわり","value":"1. フロント側Angularまわり","depth":1}]},{"id":"グローバル定数を定義したい","value":"グローバル定数を定義したい","depth":2,"parents":[{"id":"1-フロント側angularまわり","value":"1. フロント側Angularまわり","depth":1}]},{"id":"画像が多い画面の初期表示を早くしたい","value":"画像が多い画面の初期表示を早くしたい","depth":2,"parents":[{"id":"1-フロント側angularまわり","value":"1. フロント側Angularまわり","depth":1}]},{"id":"angular-cliのng-serveコマンドでdistフォルダを一旦削除したくない","value":"Angular Cliのng serveコマンドでdistフォルダを一旦削除したくない","depth":2,"parents":[{"id":"1-フロント側angularまわり","value":"1. フロント側Angularまわり","depth":1}]},{"id":"aotコンパイルが遅いのでなんとかしたい","value":"AOTコンパイルが遅いのでなんとかしたい","depth":2,"parents":[{"id":"1-フロント側angularまわり","value":"1. フロント側Angularまわり","depth":1}]},{"id":"2-フロント側angularでのテスト周り","value":"2. フロント側Angularでのテスト周り","depth":1,"parents":[]},{"id":"ci環境などでテストが終わらずにタイムアウトしてしまう","value":"CI環境などでテストが終わらずにタイムアウトしてしまう","depth":2,"parents":[{"id":"2-フロント側angularでのテスト周り","value":"2. フロント側Angularでのテスト周り","depth":1}]},{"id":"テスト時にerror-timeout---async-callback-was-not-invoked-within-timeout-specified-by-jasminedefault_timeout_intervalやfailed-to-execute-send-on-xmlhttprequestのエラー","value":"テスト時に「Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.」や「Failed to execute 'send' on 'XMLHttpRequest'」のエラー","depth":2,"parents":[{"id":"2-フロント側angularでのテスト周り","value":"2. フロント側Angularでのテスト周り","depth":1}]},{"id":"テスト用に子コンポーネントをモック化したい","value":"テスト用に子コンポーネントをモック化したい","depth":2,"parents":[{"id":"2-フロント側angularでのテスト周り","value":"2. フロント側Angularでのテスト周り","depth":1}]},{"id":"テスト結果にangular-materilaのスタイルが反映されない","value":"テスト結果にAngular Materilaのスタイルが反映されない","depth":2,"parents":[{"id":"2-フロント側angularでのテスト周り","value":"2. フロント側Angularでのテスト周り","depth":1}]},{"id":"テスト結果にstylesscssアプリ共通のスタイル定義のスタイルが反映されない","value":"テスト結果にstyles.scss(アプリ共通のスタイル定義)のスタイルが反映されない","depth":2,"parents":[{"id":"2-フロント側angularでのテスト周り","value":"2. フロント側Angularでのテスト周り","depth":1}]},{"id":"3-バックエンド側-expressmongodb周り","value":"3. バックエンド側 Express、MongoDB周り","depth":1,"parents":[]},{"id":"mongooseのvirtualメソッドを使う","value":"mongooseのvirtualメソッドを使う","depth":2,"parents":[{"id":"3-バックエンド側-expressmongodb周り","value":"3. バックエンド側 Express、MongoDB周り","depth":1}]},{"id":"リクエストレスポンスのログ出力したい","value":"リクエスト、レスポンスのログ出力したい","depth":2,"parents":[{"id":"3-バックエンド側-expressmongodb周り","value":"3. バックエンド側 Express、MongoDB周り","depth":1}]},{"id":"ログ出力でオブジェクトの全プロパティを出力したい","value":"ログ出力でオブジェクトの全プロパティを出力したい","depth":2,"parents":[{"id":"3-バックエンド側-expressmongodb周り","value":"3. バックエンド側 Express、MongoDB周り","depth":1}]},{"id":"環境変数で上書きできる定数を定義したい","value":"環境変数で上書きできる定数を定義したい","depth":2,"parents":[{"id":"3-バックエンド側-expressmongodb周り","value":"3. バックエンド側 Express、MongoDB周り","depth":1}]},{"id":"db初回アクセスに失敗した場合にリトライされない","value":"DB初回アクセスに失敗した場合にリトライされない","depth":2,"parents":[{"id":"3-バックエンド側-expressmongodb周り","value":"3. バックエンド側 Express、MongoDB周り","depth":1}]}],"fields":{"title":"フロントエンド初心者がMEANスタック(MongoDB+Express+Angular+Node.js)でアプリを作ってみて躓いたこと","excerpt":"FUJITSU Advent Calendar 2017 12日目の記事です。リッチでイマドキなデザインのアプリが作りたくて、ここ４ヶ月ほどMEANスタック(MongoDB+Express+Angular+Node.js)でブログアプリを作...","date":"2017-12-12T03:19:11+09:00","tags":["JavaScript","Node.js","Express","mongoose","angular","Qiita"]},"user":{"id":"Takumon","profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/49915/profile-images/1488080194","description":"JavaのSIer"}}},"pageContext":{"slug":"/e0ec0869-f368-5083-bdc2-cdba9d59427a/","previous":{"fields":{"slug":"/5644c24e-eade-50ca-aa11-83a4eaeba122/","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その２. テスト編","date":"2017-07-24T07:12:10+09:00","excerpt":"やりたいことAngular CLI使って、MEANスタック(MongoDB + Express + Angular + NodeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。フロント側とサーバ側の両方をweb...","tags":["JavaScript","jasmine","TypeScript","AngularJS","Protractor","Qiita"]},"id":"5644c24e-eade-50ca-aa11-83a4eaeba122","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その２. テスト編","rendered_body":"\n<h2>\n<span id=\"やりたいこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたいこと</h2>\n\n<ul>\n<li>Angular CLI使って、MEANスタック(<strong>M</strong>ongoDB + <strong>E</strong>xpress + <strong>A</strong>ngular + <strong>N</strong>odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。</li>\n<li>フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。</li>\n<li>Dockerを使ってアプリを簡単に配布したい。</li>\n</ul>\n\n<p>これらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。</p>\n\n<ul>\n<li><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\" id=\"reference-fc6741a6eda3b7ffd9f1\">その１. ビルド編</a></li>\n<li>その２. テスト編　⇦　今回はココ</li>\n<li>その３. Dockerビルド編</li>\n</ul>\n\n<h2>\n<span id=\"その２-テスト編\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%81%AE%EF%BC%92-%E3%83%86%E3%82%B9%E3%83%88%E7%B7%A8\"><i class=\"fa fa-link\"></i></a>その２. テスト編</h2>\n\n<p><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\">その１. ビルド編</a>では、Angular CLIで作成したプロジェクトをベースに、<br>\nMongoDBに登録しているメッセージを画面に一覧で表示するアプリを作成しました。<br>\n今回は、クライアント側とサーバ側の<a href=\"https://jasmine.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">Jasmine</a>を使った単体テスト、<a href=\"http://www.protractortest.org/#/\" rel=\"nofollow noopener\" target=\"_blank\">Protractor</a>を使ったE2Eテスト、それらを実行するnpm scriptsを作成します。<br>\n最終的には下記のように<code>npm test</code>コマンドで単体テストが実行できるようになります。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" alt=\"10_単体テスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png\"></a></p>\n\n<p>またE2Eテストは<code>npm run e2e</code>コマンドで実施できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" alt=\"20_E2Eテスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png\"></a></p>\n\n<h3>\n<span id=\"プロジェクト構成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクト構成</h3>\n\n<p>今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。<br>\n<a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\">その１. ビルド編</a>で作成したものをベースにテスト用の資産を追加します。詳細は<a href=\"https://github.com/Takumon/angular4-express4-typescritp2/tree/test\" rel=\"nofollow noopener\" target=\"_blank\">リポジトリ</a>を参照してください。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">プロジェクト構成（完成イメージ）</span></div>\n<div class=\"highlight\"><pre>.\n├── dist                              ・・・(1) コンパイル資産出力先\n│   ├── server\n│   │   ├── ...\n│   │   ...\n│   │ \n│   └── server_test                      ・・・(1-1)　コンパイルされたサーバ側テスト資産\n│       ├── app.spec.js\n│       ├── app.spec.js.map\n│       ├── test.server.conf.js\n│       ├── test.server.conf.js.map\n│       ├── test.server.js\n│       └── test.server.js.map\n├── e2e                                ・・・(2)　E2Eテスト資産\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── server\n│   ├── ...\n│   ...\n│\n├── server_test                         ・・・(3)　サーバ側テスト資産\n│   ├── app.spec.ts\n│   ├── test.server.conf.ts\n│   ├── test.server.ts\n│   └── tsconfig.server_test.json\n├── src\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts      ・・・(4)　クライアント側テスト資産\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       ├── message.service.spec.ts ・・・(4)　クライアント側テスト資産\n│   │       └── message.service.ts\n│   ...\n│\n├── package-lock.json\n├── package.json\n├── protractor.conf.js                   ・・・(5)　E2Eテスト設定ファイル\n├── proxy.conf.json\n├── karma.conf.js\n├── tsconfig.json\n├── tslint.json\n└── README.md\n</pre></div>\n</div>\n\n<h4>\n<span id=\"各資産について\" class=\"fragment\"></span><a href=\"#%E5%90%84%E8%B3%87%E7%94%A3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>各資産について</h4>\n\n<h5>\n<span id=\"1-dist\" class=\"fragment\"></span><a href=\"#1-dist\"><i class=\"fa fa-link\"></i></a>(1) dist</h5>\n\n<p>コンパイル資産出力先。</p>\n\n<h5>\n<span id=\"1-1-distserver_test\" class=\"fragment\"></span><a href=\"#1-1-distserver_test\"><i class=\"fa fa-link\"></i></a>(1-1) dist/server_test</h5>\n\n<p>コンパイルされたサーバ側テスト資産(JSファイル)の出力先。<br>\nデプロイを考慮して本資産(dist/server)とは別ディレクトリにしています。</p>\n\n<h5>\n<span id=\"2-server_test\" class=\"fragment\"></span><a href=\"#2-server_test\"><i class=\"fa fa-link\"></i></a>(2) server_test</h5>\n\n<p>サーバ側テスト資産のディレクトリ。<br>\nコンパイル用の設定ファイルとテスト用の設定ファイルもココに格納します。</p>\n\n<h5>\n<span id=\"3-e2e\" class=\"fragment\"></span><a href=\"#3-e2e\"><i class=\"fa fa-link\"></i></a>(3) e2e</h5>\n\n<p>E2Eテスト用資産のディレクトリ。</p>\n\n<h5>\n<span id=\"4-srcapp配下のspectsファイル\" class=\"fragment\"></span><a href=\"#4-srcapp%E9%85%8D%E4%B8%8B%E3%81%AEspects%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\"><i class=\"fa fa-link\"></i></a>(4) src/app配下のspec.tsファイル</h5>\n\n<p>フロント側テスト資産。<br>\nコンパイルやテストは<code>ng</code>コマンドで実施します。</p>\n\n<h5>\n<span id=\"5-protractorconfjs\" class=\"fragment\"></span><a href=\"#5-protractorconfjs\"><i class=\"fa fa-link\"></i></a>(5) protractor.conf.js</h5>\n\n<p>E2Eテスト設定ファイル。<br>\n今回はAngular CLIでプロジェクトが作成するデフォルトから少しだけ修正します。</p>\n\n<h2>\n<span id=\"構築手順\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E7%AF%89%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>構築手順</h2>\n\n<h3>\n<span id=\"1-テストに必要なライブラリをインストール\" class=\"fragment\"></span><a href=\"#1-%E3%83%86%E3%82%B9%E3%83%88%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>1. テストに必要なライブラリをインストール</h3>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install --save zone.js@0.8.12\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n</pre></div></div>\n\n<ul>\n<li>\n<a href=\"https://www.npmjs.com/package/zone.js\" rel=\"nofollow noopener\" target=\"_blank\"><code>zone.js@0.8.12</code></a>\n\n<ul>\n<li>クライアント側のテストで使用します。Angular CLIでプロジェクトを作成した時点でインストールされていますが、テスト実行時に<code>Failed: Cannot create property '__creationTrace__' on string '__zone_symbol__optimizedZoneEventTask'</code>のようなエラーが出ます。<a href=\"https://github.com/angular/zone.js/issues/832\" rel=\"nofollow noopener\" target=\"_blank\">GitHubのissues</a>によるとv0.8.12はエラーが出ないそうなので、v0.8.12を再インストールします。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://www.npmjs.com/package/supertest\" rel=\"nofollow noopener\" target=\"_blank\"><code>supertest</code></a>\n\n<ul>\n<li>サーバ側のテストで使用します。APIテストを簡単にしてくれます。</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"2-クライアント側を作成\" class=\"fragment\"></span><a href=\"#2-%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2. クライアント側を作成</h3>\n\n<p>コンポーネント(app.component.ts)とサービス(message.service.ts)に対するテストコードを作成します。<br>\nクライアント側のテスト実行には<code>ng test</code>コマンドを使うので、ビルド周りの設定は不要です。</p>\n\n<h4>\n<span id=\"srcappappcomponentspects\" class=\"fragment\"></span><a href=\"#srcappappcomponentspects\"><i class=\"fa fa-link\"></i></a>src/app/app.component.spec.ts</h4>\n\n<p>コンポーネントは画面描画についてテストします。<br>\nコンポーネントで使うサービスは、<code>TestBed</code>の<code>overrideComponent</code>メソッドを使ってモック化します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.spec.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"k\">async</span><span class=\"p\">,</span> <span class=\"nx\">ComponentFixture</span><span class=\"p\">,</span> <span class=\"nx\">TestBed</span><span class=\"p\">,</span> <span class=\"nx\">inject</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/forms'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.component'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'AppComponent'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// テスト対象のComponent</span>\n  <span class=\"kd\">let</span> <span class=\"na\">component</span><span class=\"p\">:</span> <span class=\"nx\">AppComponent</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// テスト対象のFixture</span>\n  <span class=\"kd\">let</span> <span class=\"na\">fixture</span><span class=\"p\">:</span> <span class=\"nx\">ComponentFixture</span><span class=\"o\">&lt;</span><span class=\"nx\">AppComponent</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// MessageServiceのモック</span>\n  <span class=\"kd\">class</span> <span class=\"nx\">MessageServiceMock</span> <span class=\"p\">{</span>\n    <span class=\"nx\">getAll</span><span class=\"p\">():</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span>  <span class=\"p\">{</span> <span class=\"na\">messages</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n      <span class=\"p\">]};</span>\n\n      <span class=\"k\">return</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">([</span><span class=\"nx\">response</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n      <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">],</span>\n      <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"nx\">AppComponent</span>\n      <span class=\"p\">],</span>\n    <span class=\"p\">})</span>\n<span class=\"err\">　　　　　　　　　</span><span class=\"c1\">// MessageServiceのモックを設定</span>\n    <span class=\"p\">.</span><span class=\"nx\">overrideComponent</span><span class=\"p\">(</span><span class=\"nx\">AppComponent</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">set</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span> <span class=\"na\">provide</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">,</span> <span class=\"na\">useClass</span><span class=\"p\">:</span> <span class=\"nx\">MessageServiceMock</span> <span class=\"p\">},</span>\n        <span class=\"p\">]</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n    <span class=\"p\">.</span><span class=\"nx\">compileComponents</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">fixture</span> <span class=\"o\">=</span> <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">createComponent</span><span class=\"p\">(</span><span class=\"nx\">AppComponent</span><span class=\"p\">);</span>\n    <span class=\"nx\">component</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">componentInstance</span><span class=\"p\">;</span>\n    <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">detectChanges</span><span class=\"p\">();</span>\n  <span class=\"p\">}));</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'オブジェクトが生成されるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">debugElement</span><span class=\"p\">.</span><span class=\"nx\">componentInstance</span><span class=\"p\">;</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">).</span><span class=\"nx\">toBeTruthy</span><span class=\"p\">();</span>\n  <span class=\"p\">}));</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージを３件保持しているか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">component</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">([</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n    <span class=\"p\">]);</span>\n  <span class=\"p\">}));</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'画面にメッセージが３件表示されているか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">el</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">debugElement</span><span class=\"p\">.</span><span class=\"nx\">nativeElement</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ1'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ2'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ3'</span><span class=\"p\">);</span>\n  <span class=\"p\">}));</span>\n<span class=\"p\">});</span>\n\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappmessagemessageservicespects一部抜粋\" class=\"fragment\"></span><a href=\"#srcappmessagemessageservicespects%E4%B8%80%E9%83%A8%E6%8A%9C%E7%B2%8B\"><i class=\"fa fa-link\"></i></a>src/app/message/message.service.spec.ts(一部抜粋)</h4>\n\n<p>サービスのテストです。<br>\nサーバとのやりとり(HTTP通信)については<code>MockBackend</code>を使ってモック化しています。<br>\nなお<code>Error</code>は別途モックを作らなければなりません。<br>\n全て載せると冗長なので<code>register</code>メソッドのテストは割愛しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.service.spec.ts(一部抜粋)</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">TestBed</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">,</span> <span class=\"nx\">inject</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">HttpModule</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">,</span> <span class=\"nx\">Http</span><span class=\"p\">,</span> <span class=\"nx\">Response</span><span class=\"p\">,</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MockConnection</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">RequestMethod</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message.service'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'MessageService'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　</span><span class=\"c1\">// HTTP通信エラー用のモック</span>\n  <span class=\"kd\">class</span> <span class=\"nx\">MockError</span> <span class=\"kd\">extends</span> <span class=\"nx\">Response</span> <span class=\"kr\">implements</span> <span class=\"nb\">Error</span> <span class=\"p\">{</span>\n    <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">;</span>\n    <span class=\"nl\">message</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n<span class=\"err\">　　　　</span><span class=\"c1\">// HTTP通信はMockBackendでモック化</span>\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n      <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">HttpModule</span><span class=\"p\">],</span>\n      <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MessageService</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"na\">provide</span><span class=\"p\">:</span> <span class=\"nx\">Http</span><span class=\"p\">,</span>\n        <span class=\"na\">useFactory</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nx\">backend</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nx\">Http</span><span class=\"p\">(</span><span class=\"nx\">backend</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">),</span>\n        <span class=\"na\">deps</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">]</span>\n      <span class=\"p\">},</span> <span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">]</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'オブジェクトが生成されるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">service</span><span class=\"p\">).</span><span class=\"nx\">toBeTruthy</span><span class=\"p\">();</span>\n  <span class=\"p\">})));</span>\n\n\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'getAll'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージが取得できるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// HTTP通信のモックで返す具体的な値の設定</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">body</span> <span class=\"o\">=</span>  <span class=\"p\">{</span> <span class=\"na\">messages</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n        <span class=\"p\">]};</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">ops</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">({</span>\n          <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n          <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">mockRespond</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">Response</span><span class=\"p\">(</span><span class=\"nx\">ops</span><span class=\"p\">));</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストの内容を検証</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">RequestMethod</span><span class=\"p\">.</span><span class=\"nx\">Get</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// レスポンスの内容を検証</span>\n      <span class=\"nx\">service</span><span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">().</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">([</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n        <span class=\"p\">]);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">})));</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'異常時にエラーハンドリングされるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// HTTP通信のモックで返す具体的な値の設定</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">body</span> <span class=\"o\">=</span>  <span class=\"p\">{</span>\n          <span class=\"na\">title</span> <span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"s1\">'エラー'</span>\n        <span class=\"p\">};</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">ops</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">({</span>\n          <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span>\n          <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">mockError</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">MockError</span><span class=\"p\">(</span><span class=\"nx\">ops</span><span class=\"p\">));</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストの内容を検証</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">RequestMethod</span><span class=\"p\">.</span><span class=\"nx\">Get</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// レスポンスの内容を検証</span>\n      <span class=\"nx\">service</span><span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">().</span><span class=\"nx\">subscribe</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">fail</span><span class=\"p\">(</span><span class=\"s1\">'エラーハンドリングされなかった。'</span><span class=\"p\">);</span>\n      <span class=\"p\">},</span> <span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span> <span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"s1\">'エラー'</span>\n        <span class=\"p\">});</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">})));</span>\n\n  <span class=\"p\">});</span>\n\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"3-サーバ側を作成\" class=\"fragment\"></span><a href=\"#3-%E3%82%B5%E3%83%BC%E3%83%90%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>3. サーバ側を作成</h3>\n\n<p>プロジェクトの直下にserver_testディレクトリを作ってテストコードを書いていきます。<br>\nどちらかというと結合テストよりで、１つ１つの資産に対してではなくapp.tsに対して、実際にDBに接続しながらAPIテストを行います。規模が小さい場合はコレで充分だと思います。<br>\nまたExpressのテストフレームワークは<a href=\"https://mochajs.org/\" rel=\"nofollow noopener\" target=\"_blank\">Mocha</a>が一般的ですが、クライアント側と統一したいので、今回は<a href=\"https://jasmine.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">Jasmine</a>を使うことにします。</p>\n\n<h4>\n<span id=\"server_testappspects一部抜粋\" class=\"fragment\"></span><a href=\"#server_testappspects%E4%B8%80%E9%83%A8%E6%8A%9C%E7%B2%8B\"><i class=\"fa fa-link\"></i></a>server_test/app.spec.ts(一部抜粋)</h4>\n\n<p>ポイントとしてはテスト実行前にMessageモデルを使ってDBを初期化していることです。<br>\nそれによりテストデータがテストメソッドごとに想定する形になるようにしています。<br>\n異常時のテストは、Messsageのfindメソッドでエラーが発生するようにJasmineの<code>spyOn</code>メソッドで処理を置き換えます。<br>\n全て載せると冗長なのでメッセージ登録のテストは割愛しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.spec.ts(一部抜粋)</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">supertest</span> <span class=\"k\">from</span> <span class=\"s1\">'supertest'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"nx\">app</span> <span class=\"k\">from</span> <span class=\"s1\">'../server/app'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../server/models/message'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">request</span> <span class=\"o\">=</span> <span class=\"nx\">supertest</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">endpoint</span> <span class=\"o\">=</span> <span class=\"s1\">'/api/messages'</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">messageAscending</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">,</span> <span class=\"nx\">m2</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&gt;</span> <span class=\"nx\">m2</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&lt;</span> <span class=\"nx\">m2</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"c1\">// テスト前にDBのmessagesを初期化する</span>\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">({},</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n  <span class=\"p\">});</span>\n\n\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'Get'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'レスポンスがjson形式でステータスコードが200か'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n      <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// 検証</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'application/json'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">);</span>\n        <span class=\"p\">}).</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージ一覧が取得できるか'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n      <span class=\"kd\">const</span> <span class=\"nx\">testData</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ１'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ２'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ３'</span> <span class=\"p\">},</span>\n      <span class=\"p\">];</span>\n<span class=\"err\">　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// 事前準備（テストデータを作成）</span>\n      <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">testData</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">erro</span> <span class=\"p\">,</span> <span class=\"nx\">doc</span> <span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n        <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n          <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// 検証</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">sortedMessages</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">sort</span><span class=\"p\">(</span><span class=\"nx\">messageAscending</span><span class=\"p\">);</span>\n\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ１'</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ２'</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ３'</span><span class=\"p\">);</span>\n          <span class=\"p\">})</span>\n          <span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">});</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'異常時にエラーハンドリングされるか'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n      <span class=\"c1\">// エラーとなるようにMessageのfindメソッドを置き換える</span>\n      <span class=\"nx\">spyOn</span><span class=\"p\">(</span><span class=\"nx\">Message</span><span class=\"p\">,</span> <span class=\"s1\">'find'</span><span class=\"p\">).</span><span class=\"nx\">and</span><span class=\"p\">.</span><span class=\"nx\">callFake</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">callback</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">'エラー'</span><span class=\"p\">),</span> <span class=\"kc\">null</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n<span class=\"err\">　　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n      <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n          <span class=\"c1\">// 検証</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'application/json'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">);</span>\n\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'エラー'</span><span class=\"p\">);</span>\n        <span class=\"p\">})</span>\n        <span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"4-単体テスト周りの環境を整備\" class=\"fragment\"></span><a href=\"#4-%E5%8D%98%E4%BD%93%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>4. 単体テスト周りの環境を整備</h3>\n\n<p>E2Eの説明に入る前に、いったん単体テスト周りの環境を整備します。</p>\n\n<h4>\n<span id=\"packagejson\" class=\"fragment\"></span><a href=\"#packagejson\"><i class=\"fa fa-link\"></i></a>package.json</h4>\n\n<p><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792#pakcagejson\" id=\"reference-fc6741a6eda3b7ffd9f1\">前回</a>作成したものをベースに単体テストのスクリプトを追加してください。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\"> </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-p test:*\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"test:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng test\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"test:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s build:server_test -p watch:server_test  boot:server_test\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"watch:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -w -p ./server_test/tsconfig.server_test.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"boot:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"nodemon ./dist/server_test/test.server.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>test</strong>でクライアント側とサーバ側のテストを実行します。</li>\n<li>\n<strong>test:client</strong>でクライアント側のテストを実行します。Angular CLIのngコマンドにお任せしています。</li>\n<li>\n<strong>watch:server_test</strong>でサーバ側テスト資産をウォッチして変更があればコンパイルするようにします。</li>\n<li>\n<strong>boot:server_test</strong>でコンパイルしたサーバ側テスト資産を起動します。nodeではなくnodemonを使うことで資産に更新があった場合でも即座に反映するようにしています。</li>\n<li>\n<strong>build:server_test</strong>でサーバ側テスト資産をコンパイルします。コンパイル時の設定は下で触れるserver_test/test.server.conf.tsを使います。</li>\n</ul>\n\n<h4>\n<span id=\"server_testtestserverts\" class=\"fragment\"></span><a href=\"#server_testtestserverts\"><i class=\"fa fa-link\"></i></a>server_test/test.server.ts</h4>\n\n<p>サーバ側テストの起動処理を書きます。<br>\nレポーターには<a href=\"https://www.npmjs.com/package/jasmine-spec-reporter\" rel=\"nofollow noopener\" target=\"_blank\">jasmine-spec-reporter</a>を使いましょう。このライブラリはAngular CLIで作ったプロジェクトにはデフォルトでインストール済みです。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">test.server.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">SpecReporter</span><span class=\"p\">,</span> <span class=\"nx\">DisplayProcessor</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'jasmine-spec-reporter'</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">Jasmine</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'jasmine'</span><span class=\"p\">);</span>\n<span class=\"k\">import</span> <span class=\"nx\">SuiteInfo</span> <span class=\"o\">=</span> <span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">SuiteInfo</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">config</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./test.server.conf'</span><span class=\"p\">;</span>\n\n\n<span class=\"kd\">class</span> <span class=\"nx\">CustomProcessor</span> <span class=\"kd\">extends</span> <span class=\"nx\">DisplayProcessor</span> <span class=\"p\">{</span>\n    <span class=\"kr\">public</span> <span class=\"nx\">displayJasmineStarted</span><span class=\"p\">(</span><span class=\"nx\">info</span><span class=\"p\">:</span> <span class=\"nx\">SuiteInfo</span><span class=\"p\">,</span> <span class=\"nx\">log</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">string</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s2\">`TypeScript </span><span class=\"p\">${</span><span class=\"nx\">log</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">runner</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Jasmine</span><span class=\"p\">();</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">loadConfig</span><span class=\"p\">(</span><span class=\"nx\">config</span><span class=\"p\">);</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">addReporter</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">SpecReporter</span><span class=\"p\">({</span>\n    <span class=\"na\">customProcessors</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">CustomProcessor</span><span class=\"p\">],</span>\n<span class=\"p\">}));</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">onComplete</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">passed</span><span class=\"p\">){</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nx\">passed</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Success'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"s1\">'Failed'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">execute</span><span class=\"p\">();</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"server_testtestserverconfts\" class=\"fragment\"></span><a href=\"#server_testtestserverconfts\"><i class=\"fa fa-link\"></i></a>server_test/test.server.conf.ts</h4>\n\n<p>サーバ側テスト起動時の設定です。<br>\n注意点として<code>spec_files</code>に指定する相対パスはプロジェクト直下が起点になります。そのため<code>__dirname</code>を使って指定してください。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">test.server.conf.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">spec_dir</span><span class=\"p\">:</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span>\n  <span class=\"na\">spec_files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">__dirname</span><span class=\"p\">}</span><span class=\"s2\">/*spec.js`</span>\n  <span class=\"p\">],</span>\n  <span class=\"s1\">'stopSpecOnExpectationFailure'</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"s1\">'random'</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n<span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"server_testtsconfigserver_testjson\" class=\"fragment\"></span><a href=\"#server_testtsconfigserver_testjson\"><i class=\"fa fa-link\"></i></a>server_test/tsconfig.server_test.json</h4>\n\n<p>サーバ側テスト資産をコンパイルする時の設定ファイルです。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">tsconfig.server_test.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"extends\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../tsconfig.json\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"preserveConstEnums\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"outDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"mapRoot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"module\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"commonjs\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"include\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"s2\">\"**/*.spec.ts\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"./test.server.ts\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"./test.server.conf.ts\"</span><span class=\"w\">\n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<p><code>outDir</code>が<code>../dist/server_test</code>ではなく<code>../dist</code>であることに注意してください。<br>\nテスト資産は<code>server</code>ディレクトリ配下の資産に依存しているため、<code>../dist/server_test</code>を指定するとコンパイルした時に下記のように出力されてしまいます。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">（悪い例）outDirに\"../dist/server_test\"を指定したときのコンパイル結果</span></div>\n<div class=\"highlight\"><pre>.\n└── dist\n    └── server_test\n        ├── server\n        └── server_test \n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">（良い例）outDirに\"../dist\"を指定したときのコンパイル結果</span></div>\n<div class=\"highlight\"><pre>.\n└── dist\n    ├── server\n    └── server_test \n</pre></div>\n</div>\n\n<h3>\n<span id=\"5-e2eテストを作成\" class=\"fragment\"></span><a href=\"#5-e2e%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>5. E2Eテストを作成</h3>\n\n<p>単体テストを作成したので次はE2Eテストを作りましょう。<br>\nAngular CLIで作成したプロジェクトにデフォルトで用意されている<a href=\"http://www.protractortest.org/#/\" rel=\"nofollow noopener\" target=\"_blank\">Protractor</a>を使ったテストコードを作成します。</p>\n\n<h4>\n<span id=\"e2eappe2e-spects\" class=\"fragment\"></span><a href=\"#e2eappe2e-spects\"><i class=\"fa fa-link\"></i></a>e2e/app.e2e-spec.ts</h4>\n\n<p>基本的にelementメソッドで要素を取得して、sendKeysメソッドやclickメソッドで操作を行います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.e2e-spec.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.po'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">browser</span><span class=\"p\">,</span> <span class=\"nx\">element</span><span class=\"p\">,</span> <span class=\"nx\">by</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'protractor'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'E2Eテスト'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"na\">page</span><span class=\"p\">:</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'画面タイトルが正しいか'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">navigateTo</span><span class=\"p\">();</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">getParagraphText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'メッセージ一覧'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージが登録できるか'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">navigateTo</span><span class=\"p\">();</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">newMessage</span> <span class=\"o\">=</span> <span class=\"s2\">`サンプルメッセージ </span><span class=\"p\">${</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">toString</span><span class=\"p\">()}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n    <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessage'</span><span class=\"p\">)).</span><span class=\"nx\">sendKeys</span><span class=\"p\">(</span><span class=\"nx\">newMessage</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessageButton'</span><span class=\"p\">)).</span><span class=\"nx\">click</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// 登録後メッセージ入力項目が初期化されているか</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessage'</span><span class=\"p\">)).</span><span class=\"nx\">getText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 登録後一覧に登録したメッセージが含まれているか</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'messageList'</span><span class=\"p\">)).</span><span class=\"nx\">all</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">tagName</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">));</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">last</span><span class=\"p\">().</span><span class=\"nx\">getText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">newMessage</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"6-e2eテスト周りの環境を整備\" class=\"fragment\"></span><a href=\"#6-e2e%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>6. E2Eテスト周りの環境を整備</h3>\n\n<h4>\n<span id=\"packagejson-1\" class=\"fragment\"></span><a href=\"#packagejson-1\"><i class=\"fa fa-link\"></i></a>package.json</h4>\n\n<p>Angular CILプロジェクトデフォルトの\"e2e\"コマンドは削除して、スクリプトに下記を追加してください。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\"> </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"e2e\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s  webdriver:update -p webdriver:start protractor\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"webdriver:update\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"webdriver-manager update\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"webdriver:start\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"webdriver-manager start\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"protractor\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"protractor protractor.conf.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>e2e</strong>でE2Eテストを実行します。Angular CILプロジェクトデフォルトの<code>e2e</code>コマンド(= <code>ng e2e</code>コマンド)は使いません。<code>ng　e2e</code>はクライアント資産だけコンパイルして起動する処理が入っているからです。今回はビルドしたアプリ(クライアントとサーバが１つにまとまったアプリ)に対してテストします。</li>\n<li>\n<strong>webdriver:update</strong>でE2Eテストに必要なWebDriverをインストールまたは更新します。</li>\n<li>\n<strong>webdriver:start</strong>でWebDriverを起動します。Protractorのテストは事前にWebDriverを起動しておく必要があります。</li>\n<li>\n<strong>protractor</strong>でE2Eテストを実行します。起動時の設定は下で触れるprotractor.conf.jsを使います。</li>\n</ul>\n\n<h4>\n<span id=\"protractorconfjs\" class=\"fragment\"></span><a href=\"#protractorconfjs\"><i class=\"fa fa-link\"></i></a>protractor.conf.js</h4>\n\n<p>デフォルトでbaseUrlのポートは4200になっていますが、今回はビルドしたアプリに対してテストするので3000を指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">protractor.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"p\">...</span>\n  <span class=\"na\">baseUrl</span><span class=\"p\">:</span> <span class=\"s1\">'http://localhost:3000/'</span><span class=\"p\">,</span>\n  <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"7-試してみる\" class=\"fragment\"></span><a href=\"#7-%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>7. 試してみる</h3>\n\n<h4>\n<span id=\"単体テストを実行してみる\" class=\"fragment\"></span><a href=\"#%E5%8D%98%E4%BD%93%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>単体テストを実行してみる</h4>\n\n<ul>\n<li>\n<p>MongoDBをローカルで立ち上げる</p>\n\n<ul>\n<li>具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。</li>\n</ul>\n</li>\n<li><p>プロジェクト直下で<code>npm test</code>コマンドを実行するとテストが実行されます。クライアント側のテスト結果はブラウザに、サーバ側はターミナル（またはコンソール）に表示されます。資産はウォッチしているので、テストコードを修正すると、コンパイルされ再度テストが実行されるでしょう。</p></li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" alt=\"10_単体テスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png\"></a></p>\n\n<h4>\n<span id=\"e2eテストを実行してみる\" class=\"fragment\"></span><a href=\"#e2e%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>E2Eテストを実行してみる</h4>\n\n<ul>\n<li>\n<p>MongoDBをローカルで立ち上げる</p>\n\n<ul>\n<li>これも単体テストと同じでDBを事前に起動しておいてください。</li>\n</ul>\n</li>\n<li>\n<p>ビルドしたアプリを起動する</p>\n\n<ul>\n<li>プロジェクト直下で<code>npm run buildRun</code>を実行し、ビルド資産を起動します。</li>\n</ul>\n</li>\n<li>\n<p><code>npm run e2e</code>する</p>\n\n<ul>\n<li>別ターミナル（またはコマンドプロンプト）を開き、プロジェクト直下で<code>npm run e2e</code>コマンドを実行します。するとブラウザが立ち上がりテストが実行されます。\n<a href=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" alt=\"20_E2Eテスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png\"></a>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h2>\n\n<p>今回はMEANスタックアプリの単体テスト、E2Eテストについて紹介しました。<br>\nこれでビルドとテストができるようになったので、次回「その3. Dockerデプロイ編」では、Dockerでアプリを起動する方法とDockerでアプリのイメージを作ってデプロイする方法ついて紹介します。</p>\n","body":"## やりたいこと\n* Angular CLI使って、MEANスタック(**M**ongoDB + **E**xpress + **A**ngular + **N**odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。\n* フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。\n* Dockerを使ってアプリを簡単に配布したい。\n\nこれらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。\n\n* [その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)\n* その２. テスト編　⇦　今回はココ\n* その３. Dockerビルド編\n\n\n## その２. テスト編\n[その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)では、Angular CLIで作成したプロジェクトをベースに、\nMongoDBに登録しているメッセージを画面に一覧で表示するアプリを作成しました。\n今回は、クライアント側とサーバ側の[Jasmine](https://jasmine.github.io/)を使った単体テスト、[Protractor](http://www.protractortest.org/#/)を使ったE2Eテスト、それらを実行するnpm scriptsを作成します。\n最終的には下記のように`npm test`コマンドで単体テストが実行できるようになります。\n\n![10_単体テスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png)\n\nまたE2Eテストは`npm run e2e`コマンドで実施できるようになります。\n![20_E2Eテスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png)\n\n\n### プロジェクト構成\n今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。\n[その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)で作成したものをベースにテスト用の資産を追加します。詳細は[リポジトリ](https://github.com/Takumon/angular4-express4-typescritp2/tree/test)を参照してください。\n\n```:プロジェクト構成（完成イメージ）\n.\n├── dist                              ・・・(1) コンパイル資産出力先\n│   ├── server\n│   │   ├── ...\n│   │   ...\n│   │ \n│   └── server_test                      ・・・\u001c(1-1)　コンパイルされたサーバ側テスト資産\n│       ├── app.spec.js\n│       ├── app.spec.js.map\n│       ├── test.server.conf.js\n│       ├── test.server.conf.js.map\n│       ├── test.server.js\n│       └── test.server.js.map\n├── e2e                                ・・・\u001c(2)　E2Eテスト資産\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── server\n│   ├── ...\n│   ...\n│\n├── server_test                         ・・・\u001c(3)　サーバ側テスト資産\n│   ├── app.spec.ts\n│   ├── test.server.conf.ts\n│   ├── test.server.ts\n│   └── tsconfig.server_test.json\n├── src\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts      ・・・\u001c(4)　クライアント側テスト資産\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       ├── message.service.spec.ts ・・・\u001c(4)　クライアント側テスト資産\n│   │       └── message.service.ts\n│   ...\n│\n├── package-lock.json\n├── package.json\n├── protractor.conf.js                   ・・・\u001c(5)　E2Eテスト設定ファイル\n├── proxy.conf.json\n├── karma.conf.js\n├── tsconfig.json\n├── tslint.json\n└── README.md\n```\n#### 各資産について\n##### (1) dist\nコンパイル資産出力先。\n\n##### (1-1) dist/server_test\nコンパイルされたサーバ側テスト資産(JSファイル)の出力先。\nデプロイを考慮して本資産(dist/server)とは別ディレクトリにしています。\n\n##### (2) server_test\nサーバ側テスト資産のディレクトリ。\nコンパイル用の設定ファイルとテスト用の設定ファイルもココに格納します。\n\n##### (3) e2e\nE2Eテスト用資産のディレクトリ。\n\n##### (4) src/app配下のspec.tsファイル\nフロント側テスト資産。\nコンパイルやテストは`ng`コマンドで実施します。\n\n##### (5) protractor.conf.js\nE2Eテスト設定ファイル。\n今回はAngular CLIでプロジェクトが作成するデフォルトから少しだけ修正します。\n\n\n\n## 構築手順\n\n### 1. テストに必要なライブラリをインストール\n\n```\n$ npm install --save zone.js@0.8.12\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n```\n\n* [`zone.js@0.8.12`](https://www.npmjs.com/package/zone.js)\n    * クライアント側のテストで使用します。Angular CLIでプロジェクトを作成した時点でインストールされていますが、テスト実行時に`Failed: Cannot create property '__creationTrace__' on string '__zone_symbol__optimizedZoneEventTask'`のようなエラーが出ます。[GitHubのissues](https://github.com/angular/zone.js/issues/832)によるとv0.8.12はエラーが出ないそうなので、v0.8.12を再インストールします。\n* [`supertest`](https://www.npmjs.com/package/supertest)\n    * サーバ側のテストで使用します。APIテストを簡単にしてくれます。\n\n### 2. クライアント側を作成\nコンポーネント(app.component.ts)とサービス(message.service.ts)に対するテストコードを作成します。\nクライアント側のテスト実行には`ng test`コマンドを使うので、ビルド周りの設定は不要です。\n\n#### src/app/app.component.spec.ts\nコンポーネントは画面描画についてテストします。\nコンポーネントで使うサービスは、`TestBed`の`overrideComponent`メソッドを使ってモック化します。\n\n\n```js:app.component.spec.ts\nimport { async, ComponentFixture, TestBed, inject } from '@angular/core/testing';\nimport { FormsModule } from '@angular/forms';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/Rx';\n\nimport { AppComponent } from './app.component';\nimport { MessageService } from './message/message.service';\n\ndescribe('AppComponent', () => {\n  // テスト対象のComponent\n  let component: AppComponent;\n\n  // テスト対象のFixture\n  let fixture: ComponentFixture<AppComponent>;\n\n  // MessageServiceのモック\n  class MessageServiceMock {\n    getAll(): Observable<any> {\n      const response =  { messages : [\n        { message : 'テスト用メッセージ1' },\n        { message : 'テスト用メッセージ2' },\n        { message : 'テスト用メッセージ3' }\n      ]};\n\n      return Observable.from([response]);\n    }\n  }\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [ FormsModule ],\n      declarations: [\n        AppComponent\n      ],\n    })\n　　　　　　　　　// MessageServiceのモックを設定\n    .overrideComponent(AppComponent, {\n      set: {\n        providers: [\n          { provide: MessageService, useClass: MessageServiceMock },\n        ]\n      }\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(AppComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  }));\n\n  it('オブジェクトが生成されるか', async(() => {\n    const app = fixture.debugElement.componentInstance;\n    expect(app).toBeTruthy();\n  }));\n\n\n  it('メッセージを３件保持しているか', async(() => {\n    expect(component.messages).toEqual([\n        { message : 'テスト用メッセージ1' },\n        { message : 'テスト用メッセージ2' },\n        { message : 'テスト用メッセージ3' }\n    ]);\n  }));\n\n\n  it('画面にメッセージが３件表示されているか', async(() => {\n\n    const el = fixture.debugElement.nativeElement;\n\n    expect(el.querySelectorAll('li').length).toEqual(3);\n    expect(el.querySelectorAll('li')[0].textContent).toContain('テスト用メッセージ1');\n    expect(el.querySelectorAll('li')[1].textContent).toContain('テスト用メッセージ2');\n    expect(el.querySelectorAll('li')[2].textContent).toContain('テスト用メッセージ3');\n  }));\n});\n\n```\n\n\n#### src/app/message/message.service.spec.ts(一部抜粋)\nサービスのテストです。\nサーバとのやりとり(HTTP通信)については`MockBackend`を使ってモック化しています。\nなお`Error`は別途モックを作らなければなりません。\n全て載せると冗長なので`register`メソッドのテストは割愛しています。\n\n```js:message.service.spec.ts(一部抜粋)\nimport { TestBed, async, inject } from '@angular/core/testing';\nimport {HttpModule, BaseRequestOptions, Http, Response, ResponseOptions} from '@angular/http';\nimport {MockBackend, MockConnection} from '@angular/http/testing';\nimport { RequestMethod } from '@angular/http';\n\nimport { MessageService } from './message.service';\n\n\ndescribe('MessageService', () => {\n　　　　// HTTP通信エラー用のモック\n  class MockError extends Response implements Error {\n    name: any;\n    message: any;\n  }\n\n　　　　// HTTP通信はMockBackendでモック化\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpModule],\n      providers: [MessageService, {\n        provide: Http,\n        useFactory: (backend, options) => new Http(backend, options),\n        deps: [MockBackend, BaseRequestOptions]\n      }, MockBackend, BaseRequestOptions]\n    });\n  });\n\n  it('オブジェクトが生成されるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n    expect(service).toBeTruthy();\n  })));\n\n\n  describe('getAll', () => {\n\n    it('メッセージが取得できるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n　　　　　　　　　　　　// HTTP通信のモックで返す具体的な値の設定\n      backend.connections.subscribe((conn: MockConnection) => {\n        const body =  { messages : [\n          { message : 'テスト用メッセージ1' },\n          { message : 'テスト用メッセージ2' },\n          { message : 'テスト用メッセージ3' }\n        ]};\n\n        const ops = new ResponseOptions({\n          status: 200,\n          body: JSON.stringify(body)\n        });\n\n        conn.mockRespond(new Response(ops));\n      });\n\n　　　　　　　　　　　　// リクエストの内容を検証\n      backend.connections.subscribe((conn: MockConnection) => {\n        expect(conn.request.url).toEqual('/api/messages');\n        expect(conn.request.method).toEqual(RequestMethod.Get);\n      });\n\n　　　　　　　　　　　　// レスポンスの内容を検証\n      service.getAll().subscribe((res) => {\n        expect(res.messages.length).toEqual(3);\n        expect(res.messages).toEqual([\n          { message : 'テスト用メッセージ1' },\n          { message : 'テスト用メッセージ2' },\n          { message : 'テスト用メッセージ3' }\n        ]);\n      });\n    })));\n\n\n    it('異常時にエラーハンドリングされるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n　　　　　　　　　　　　// HTTP通信のモックで返す具体的な値の設定\n      backend.connections.subscribe((conn: MockConnection) => {\n        const body =  {\n          title : 'エラーが発生しました。',\n          error: 'エラー'\n        };\n\n        const ops = new ResponseOptions({\n          status: 500,\n          body: JSON.stringify(body)\n        });\n\n        conn.mockError(new MockError(ops));\n      });\n\n　　　　　　　　　　　　// リクエストの内容を検証\n      backend.connections.subscribe((conn: MockConnection) => {\n        expect(conn.request.url).toEqual('/api/messages');\n        expect(conn.request.method).toEqual(RequestMethod.Get);\n      });\n\n　　　　　　　　　　　　// レスポンスの内容を検証\n      service.getAll().subscribe(() => {\n        fail('エラーハンドリングされなかった。');\n      }, res => {\n        expect(res).toEqual({\n          title : 'エラーが発生しました。',\n          error: 'エラー'\n        });\n      });\n    })));\n\n  });\n\n\n});\n```\n\n\n\n### 3. サーバ側を作成\nプロジェクトの直下にserver_testディレクトリを作ってテストコードを書いていきます。\nどちらかというと結合テストよりで、１つ１つの資産に対してではなくapp.tsに対して、実際にDBに接続しながらAPIテストを行います。規模が小さい場合はコレで充分だと思います。\nまたExpressのテストフレームワークは[Mocha](https://mochajs.org/)が一般的ですが、クライアント側と統一したいので、今回は[Jasmine](https://jasmine.github.io/)を使うことにします。\n\n#### server_test/app.spec.ts(一部抜粋)\nポイントとしてはテスト実行前にMessageモデルを使ってDBを初期化していることです。\nそれによりテストデータがテストメソッドごとに想定する形になるようにしています。\n異常時のテストは、Messsageのfindメソッドでエラーが発生するようにJasmineの`spyOn`メソッドで処理を置き換えます。\n全て載せると冗長なのでメッセージ登録のテストは割愛しています。\n\n```js:app.spec.ts(一部抜粋)\nimport * as supertest from 'supertest';\n\nimport app from '../server/app';\nimport { Message } from '../server/models/message';\n\n\ndescribe('/api/messages', () => {\n  const request = supertest(app);\n  const endpoint = '/api/messages';\n\n  const messageAscending = (m1, m2) => {\n    if (m1.message > m2.message) {\n      return 1;\n    }\n\n    if (m1.message < m2.message) {\n      return -1;\n    }\n\n    return 0;\n  };\n\n  // テスト前にDBのmessagesを初期化する\n  beforeEach(() => {\n    Message.remove({}, () => {});\n  });\n\n\n  describe('Get', () => {\n\n    it('レスポンスがjson形式でステータスコードが200か', (done) => {\n\n　　　　　　　　　　　　　// リクエストを投げる\n      request.get(endpoint)\n        .expect((res) => {\n\n　　　　　　　　　　　　　　　　　　　　// 検証\n          expect(res.type).toEqual('application/json');\n          expect(res.statusCode).toEqual(200);\n        }).end(done);\n    });\n\n\n    it('メッセージ一覧が取得できるか', (done) => {\n\n      const testData = [\n        { message: 'テスト用メッセージ１' },\n        { message: 'テスト用メッセージ２' },\n        { message: 'テスト用メッセージ３' },\n      ];\n　　　　　　　　　　　　\n　　　　　　　　　　　　// 事前準備（テストデータを作成）\n      Message.create(testData, (erro , doc ) => {\n\n　　　　　　　　　　　　　　　　　// リクエストを投げる\n        request.get(endpoint)\n          .expect((res) => {\n　　　　　　　　　　　　　　　　　　　　　　　　\n　　　　　　　　　　　　　　　　　　　　　　　　// 検証\n            const sortedMessages = res.body.messages.sort(messageAscending);\n\n            expect(sortedMessages.length).toEqual(3);\n            expect(sortedMessages[0].message).toEqual('テスト用メッセージ１');\n            expect(sortedMessages[1].message).toEqual('テスト用メッセージ２');\n            expect(sortedMessages[2].message).toEqual('テスト用メッセージ３');\n          })\n          .end(done);\n      });\n    });\n\n\n    it('異常時にエラーハンドリングされるか', (done) => {\n\n      // エラーとなるようにMessageのfindメソッドを置き換える\n      spyOn(Message, 'find').and.callFake(function(callback) {\n        callback(new Error('エラー'), null);\n      });\n　　　　　　　　　　　　　\n　　　　　　　　　　　　// リクエストを投げる\n      request.get(endpoint)\n        .expect((res) => {\n\n          // 検証\n          expect(res.type).toEqual('application/json');\n          expect(res.statusCode).toEqual(500);\n\n          expect(res.body.title).toEqual('エラーが発生しました。');\n          expect(res.body.error).toEqual('エラー');\n        })\n        .end(done);\n    });\n\n  });\n});\n```\n\n\n\n### 4. 単体テスト周りの環境を整備\nE2Eの説明に入る前に、いったん単体テスト周りの環境を整備します。\n\n\n#### package.json\n[前回](http://qiita.com/Takumon/items/572438809384e2e11792#pakcagejson)作成したものをベースに単体テストのスクリプトを追加してください。\n\n```json:package.json\n \"scripts\": {\n    ...\n    \"test\": \"run-p test:*\",\n    \"test:client\": \"ng test\",\n    \"test:server\": \"npm-run-all -s build:server_test -p watch:server_test  boot:server_test\",\n    \"watch:server_test\": \"tsc -w -p ./server_test/tsconfig.server_test.json\",\n    \"boot:server_test\": \"nodemon ./dist/server_test/test.server.js\",\n    \"build:server_test\": \"tsc -p ./server/tsconfig.server.json\",\n    ...\n  },\n```\n\n\n* **test**でクライアント側とサーバ側のテストを実行します。\n* **test:client**でクライアント側のテストを実行します。Angular CLIのngコマンドにお任せしています。\n* **watch:server_test**でサーバ側テスト資産をウォッチして変更があればコンパイルするようにします。\n* **boot:server_test**でコンパイルしたサーバ側テスト資産を起動します。nodeではなくnodemonを使うことで資産に更新があった場合でも即座に反映するようにしています。\n* **build:server_test**でサーバ側テスト資産をコンパイルします。コンパイル時の設定は下で触れるserver_test/test.server.conf.tsを使います。\n\n#### server_test/test.server.ts\nサーバ側テストの起動処理を書きます。\nレポーターには[jasmine-spec-reporter](https://www.npmjs.com/package/jasmine-spec-reporter)を使いましょう。このライブラリはAngular CLIで作ったプロジェクトにはデフォルトでインストール済みです。\n\n```js:test.server.ts\nimport { SpecReporter, DisplayProcessor } from 'jasmine-spec-reporter';\nconst Jasmine = require('jasmine');\nimport SuiteInfo = jasmine.SuiteInfo;\n\nimport { config } from './test.server.conf';\n\n\nclass CustomProcessor extends DisplayProcessor {\n    public displayJasmineStarted(info: SuiteInfo, log: string): string {\n        return `TypeScript ${log}`;\n    }\n}\n\nconst runner = new Jasmine();\nrunner.loadConfig(config);\nrunner.addReporter(new SpecReporter({\n    customProcessors: [CustomProcessor],\n}));\nrunner.onComplete(function(passed){\n  if ( passed ) {\n    console.log('Success');\n  } else {\n    console.error('Failed');\n  }\n});\n\nrunner.execute();\n```\n\n\n#### server_test/test.server.conf.ts\nサーバ側テスト起動時の設定です。\n注意点として`spec_files`に指定する相対パスはプロジェクト直下が起点になります。そのため`__dirname`を使って指定してください。\n\n```js:test.server.conf.ts\nexport const config = {\n  spec_dir: '.',\n  spec_files: [\n    `${__dirname}/*spec.js`\n  ],\n  'stopSpecOnExpectationFailure': false,\n  'random': false\n};\n```\n\n\n\n#### server_test/tsconfig.server_test.json\n\nサーバ側テスト資産をコンパイルする時の設定ファイルです。\n\n```json:tsconfig.server_test.json\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"preserveConstEnums\": true,\n    \"outDir\": \"../dist\",\n    \"mapRoot\": \"../dist\",\n    \"module\": \"commonjs\"\n  } ,\n  \"include\": [\n    \"**/*.spec.ts\",\n    \"./test.server.ts\",\n    \"./test.server.conf.ts\"\n  ]\n}\n```\n\n`outDir`が`../dist/server_test`ではなく`../dist`であることに注意してください。\nテスト資産は`server`ディレクトリ配下の資産に依存しているため、`../dist/server_test`を指定するとコンパイルした時に下記のように出力されてしまいます。\n\n```:\u001c（悪い例）outDirに\"../dist/server_test\"を指定したときのコンパイル結果\n.\n└── dist\n    └── server_test\n        ├── server\n        └── server_test \n```\n```:\u001c（良い例）outDirに\"../dist\"を指定したときのコンパイル結果\n.\n└── dist\n    ├── server\n    └── server_test \n```\n\n\n### 5. E2Eテストを作成\n単体テストを作成したので次はE2Eテストを作りましょう。\nAngular CLIで作成したプロジェクトにデフォルトで用意されている[Protractor](http://www.protractortest.org/#/)を使ったテストコードを作成します。\n\n#### e2e/app.e2e-spec.ts\n基本的にelementメソッドで要素を取得して、sendKeysメソッドやclickメソッドで操作を行います。\n\n```js:app.e2e-spec.ts\nimport { Angular4Express4Typescritp2Page } from './app.po';\nimport { browser, element, by } from 'protractor';\n\n\ndescribe('E2Eテスト', () => {\n  let page: Angular4Express4Typescritp2Page;\n\n  beforeEach(() => {\n    page = new Angular4Express4Typescritp2Page();\n  });\n\n  it('画面タイトルが正しいか', () => {\n    page.navigateTo();\n    expect(page.getParagraphText()).toEqual('メッセージ一覧');\n  });\n\n\n  it('メッセージが登録できるか', () => {\n    page.navigateTo();\n    const newMessage = `サンプルメッセージ ${new Date().toString()}`;\n    element(by.id('registerMessage')).sendKeys(newMessage);\n\n    element(by.id('registerMessageButton')).click();\n\n    // 登録後メッセージ入力項目が初期化されているか\n    expect(element(by.id('registerMessage')).getText()).toEqual('');\n\n    // 登録後一覧に登録したメッセージが含まれているか\n    const messages = element(by.id('messageList')).all(by.tagName('li'));\n    expect(messages.last().getText()).toEqual(newMessage);\n  });\n\n});\n```\n\n### 6. E2Eテスト周りの環境を整備\n\n#### package.json\nAngular CILプロジェクトデフォルトの\"e2e\"コマンドは削除して、スクリプトに下記を追加してください。\n\n```json:package.json\n \"scripts\": {\n    ...\n    \"e2e\": \"npm-run-all -s  webdriver:update -p webdriver:start protractor\",\n    \"webdriver:update\": \"webdriver-manager update\",\n    \"webdriver:start\": \"webdriver-manager start\",\n    \"protractor\": \"protractor protractor.conf.js\",\n    ...\n  },\n```\n\n* **e2e**でE2Eテストを実行します。Angular CILプロジェクトデフォルトの`e2e`コマンド(= `ng e2e`コマンド)は使いません。`ng　e2e`はクライアント資産だけコンパイルして起動する処理が入っているからです。今回はビルドしたアプリ(クライアントとサーバが１つにまとまったアプリ)に対してテストします。\n* **webdriver:update**でE2Eテストに必要なWebDriverをインストールまたは更新します。\n* **webdriver:start**でWebDriverを起動します。Protractorのテストは事前にWebDriverを起動しておく必要があります。\n* **protractor**でE2Eテストを実行します。起動時の設定は下で触れるprotractor.conf.jsを使います。\n\n#### protractor.conf.js\nデフォルトでbaseUrlのポートは4200になっていますが、今回はビルドしたアプリに対してテストするので3000を指定します。\n\n```js:protractor.conf.js\nexports.config = {\n  ...\n  baseUrl: 'http://localhost:3000/',\n  ...\n}\n```\n\n### 7. 試してみる\n#### 単体テストを実行してみる\n* MongoDBをローカルで立ち上げる\n    * 具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。\n\n* プロジェクト直下で`npm test`コマンドを実行するとテストが実行されます。クライアント側のテスト結果はブラウザに、サーバ側はターミナル（またはコンソール）に表示されます。資産はウォッチしているので、テストコードを修正すると、コンパイルされ再度テストが実行されるでしょう。\n\n![10_単体テスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png)\n\n\n\n#### E2Eテストを実行してみる\n* MongoDBをローカルで立ち上げる\n    * これも単体テストと同じでDBを事前に起動しておいてください。\n \n* ビルドしたアプリを起動する\n    * プロジェクト直下で`npm run buildRun`を実行し、ビルド資産を起動します。\n\n* `npm run e2e`する\n    * 別ターミナル（またはコマンドプロンプト）を開き、プロジェクト直下で`npm run e2e`コマンドを実行します。するとブラウザが立ち上がりテストが実行されます。\n![20_E2Eテスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png)\n\n\n## 終わりに\n今回はMEANスタックアプリの単体テスト、E2Eテストについて紹介しました。\nこれでビルドとテストができるようになったので、次回「その3. Dockerデプロイ編」では、Dockerでアプリを起動する方法とDockerでアプリのイメージを作ってデプロイする方法ついて紹介します。\n\n","comments_count":0,"created_at":"2017-07-24T07:12:10+09:00","likes_count":8,"reactions_count":0},"next":{"fields":{"slug":"/b4c7d1b9-428f-569a-af40-527d89794a77/","title":"TypeScriptで簡単にChrome Extensionを作る方法","date":"2017-12-20T02:36:27+09:00","excerpt":"Githubで草を生やす活動は楽しいですね!増えてきて芝みたいになると達成感があって、モチベーションも上がります。ところで、この前の10/30に草がハロウィン仕様になっていたのを見て、草を自分の好みの色を変更できればもっと楽しくなるのでは?...","tags":["JavaScript","GitHub","TypeScript","chrome-extension","Qiita"]},"id":"b4c7d1b9-428f-569a-af40-527d89794a77","title":"TypeScriptで簡単にChrome Extensionを作る方法","rendered_body":"<p>Githubで草を生やす活動は楽しいですね!<br>\n増えてきて芝みたいになると達成感があって、モチベーションも上がります。<br>\nところで、この前の10/30に草がハロウィン仕様になっていたのを見て、<br>\n草を自分の好みの色を変更できればもっと楽しくなるのでは?と思い<br>\n<a href=\"https://chrome.google.com/webstore/detail/github-contributions-pain/bdibnecenojddgmjplnfehpjdmkiddok?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">草の色が変更できる（ついでにお絵描きもできる）Chrome Extension</a>を作りました。<br>\n<strong>その時に<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使って、TypeScriptで簡単にChrome Extensionが作れたので、アプリ作成から公開までの手順をまとめます。</strong></p>\n\n<h2>\n<span id=\"1-プロジェクトの雛形を生成する\" class=\"fragment\"></span><a href=\"#1-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E9%9B%9B%E5%BD%A2%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>1. プロジェクトの雛形を生成する</h2>\n\n<p>yomanと<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>で簡単に雛形が作れるのでコレらを使っていきます。</p>\n\n<ul>\n<li>\n<code>yoman</code>と<code>generator-chrome-extension-kickstart-typescript</code>をグローバルインストールします</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install -g yo generator-chrome-extension-kickstart-typescript \n</pre></div></div>\n\n<ul>\n<li>プロジェクトのルートフォルダを作成後、ルートフォルダに移動して<code>yo</code>コマンドで雛形を生成します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ mkdir project\n$ cd project\n$ yo chrome-extension-kickstart-typescript \n</pre></div></div>\n\n<ul>\n<li>いくつか質問されるので適当に答えます\n\n<ul>\n<li>\n<strong>What would you like to call this extension?</strong>\n\n<ul>\n<li>プロジェクト名を入力します。デフォルトはプロジェクトのフォルダ名</li>\n</ul>\n</li>\n<li>\n<strong>And how would you call it if you only had 12 characters (short_name)?</strong>\n\n<ul>\n<li>プロジェクトの略称を12文字以内で入力します</li>\n</ul>\n</li>\n<li>\n<strong>How would you like to describe this extension?</strong>\n\n<ul>\n<li>プロジェクト概要を入力します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to use UI Action?</strong>\n\n<ul>\n<li>作りたいUI Actionに応じて、<code>No</code>,<code>Browser</code>,<code>Page</code>のいずれかを選択します\n\n<ul>\n<li>\n<code>No</code> ・・・ UI Actionを使わない場合</li>\n<li>\n<code>Browser</code> ・・・ ツールバーの右にアイコンが常駐するタイプのChrome拡張を作成する場合</li>\n<li>\n<code>Page</code> ・・・ 特定のWebサイト観覧時のみにアドレスバー右にアイコンが表示されるタイプのChrome拡張を作成する場合</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to override a chrome page?</strong>\n\n<ul>\n<li>Chromeの内部ページを書き換えるかどうかで、<code>No</code>,<code>Bookmarks Page</code>,<code>History Page</code>,<code>Newtab Page</code>のいずれかを選択します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like more UI Features?</strong>\n\n<ul>\n<li>作りたいUIを複数選択します\n\n<ul>\n<li>\n<code>Options Page</code> ・・・ オプション画面を作りたい場合</li>\n<li>\n<code>Devtools Page</code> ・・・ 開発者ツールを拡張したい場合</li>\n<li>\n<code>Content Scripts</code> ・・・ Webで表示している画面にJavaScriptを差し込んで何か処理をしたい場合</li>\n<li>\n<code>Omnibox</code> ・・・ アドレスバーを拡張したい時に選択</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to use permissions?</strong>\n\n<ul>\n<li>使用するパーミッションを複数選択します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to install promo images for the Chrome Web Store?</strong>\n\n<ul>\n<li>Chromeストアで使う宣伝用画像を自動で生成するかを選択します</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<p>※自分は下記のように答えました<br>\n<strong>What would you like to call this extension?</strong> =&gt; github-contributions-paint<br>\n<strong>And how would you call it if you only had 12 characters (short_name)?</strong> =&gt;  github-paint<br>\n<strong>How would you like to describe this extension?</strong> =&gt;  You can paint github contributions!<br>\n<strong>Would you like to use UI Action?</strong> =&gt; Browser<br>\n<strong>Would you like to override a chrome page?</strong> =&gt;  No<br>\n<strong>Would you like more UI Features?</strong> =&gt;  Content Scripts<br>\n<strong>Would you like to use permissions?</strong> =&gt;  Tabs<br>\n<strong>Would you like to install promo images for the Chrome Web Store?</strong> =&gt;  Yes</p>\n\n<ul>\n<li>すると雛形が生成されます</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">生成された雛形のフォルダ構成</span></div>\n<div class=\"highlight\"><pre>github-contributions-paint\n├── README.md\n├── app\n│   ├── images       　　　    　・・・Chromeウェブストア公開時に必要なアイコン格納フォルダ\n│   │   ├── icon-128.png\n│   │   ├── icon-16.png\n│   │   ├── icon-19.png\n│   │   └── icon-38.png\n│   ├── manifest.json          ・・・Chrome拡張の設定を定義するファイル\n│   ├── pages                  ・・・HTMLファイル格納フォルダ\n│   │   └── popup.html         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── scripts                ・・・TSファイル格納フォルダ\n│   │   ├── background.ts      ・・・バックグランド処理を記述するファイル\n│   │   └── popup.ts           ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── styles                 ・・・CSSファイル格納フォルダ\n│   │   └── popup.scss         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── _locales\n│   │   └── en\n│   │       └── messages.json ・・・アプリの設定ファイル\n│   └── fonts\n├── promo                     ・・・Chromeウェブストア公開時に必要な宣伝用画像の格納フォルダ\n│   ├── Chrome-Webstore-Icon_128x128.png\n│   ├── Promo-Image-Large_920x680.png\n│   ├── Promo-Image-Marquee_1400x560.png\n│   ├── Promo-Image-Small_440x280.png\n│   ├── Screenshot_1280x800.png\n│   └── Screenshot_640x400.png\n├── dist\n├── gulpfile.babel.js\n├── node_modules\n├── package-lock.json\n├── package.json\n├── tasks\n├── tsconfig.json\n└── tslint.json\n\n</pre></div>\n</div>\n\n<ul>\n<li>最後にTypeScriptをグローバルインストールしていない場合は、グローバルインストールまたはプロジェクトにインストールします</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install typescript --save-dev\n</pre></div></div>\n\n<p>==2018/11/24 追記(ここから)==</p>\n\n<ul>\n<li>このまま次手順にいくと警告がでるのでそれを防ぐためにgulpのバージョンを下げます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install gulp@3.9.0 --save-dev\n</pre></div></div>\n\n<p>※関連する<a href=\"https://github.com/gulpjs/gulp/issues/1631\" rel=\"nofollow noopener\" target=\"_blank\">issue</a>、<a href=\"https://stackoverflow.com/questions/48568942/failed-to-load-external-module-babel-register-while-gulp\" rel=\"nofollow noopener\" target=\"_blank\">stackoverflow</a></p>\n\n<p>==2018/11/24 追記(ここまで)==</p>\n\n<h2>\n<span id=\"2-作ったchrome-extensionを動かしてみる\" class=\"fragment\"></span><a href=\"#2-%E4%BD%9C%E3%81%A3%E3%81%9Fchrome-extension%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>2. 作ったChrome Extensionを動かしてみる</h2>\n\n<p>雛形を作成したら早速動かすことができます</p>\n\n<ul>\n<li>ビルドコマンドを実行します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run dev:chrome\n</pre></div></div>\n\n<ul>\n<li><p>Chromeで<code>chrome://extensions</code>を開いて<code>パッケージ化されていない拡張機能を読み込む</code>ボタンをクリック<br>\n<a href=\"https://camo.qiitausercontent.com/88e144ea0fc880ccec17978afc9ec782fb0d62c1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35613534396134352d386563342d383935352d623733332d3837353534396638616433312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/88e144ea0fc880ccec17978afc9ec782fb0d62c1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35613534396134352d386563342d383935352d623733332d3837353534396638616433312e706e67\" alt=\"手順_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5a549a45-8ec4-8955-b733-875549f8ad31.png\"></a></p></li>\n<li><p>プロジェクトルート/dist配下の<code>chrome</code>フォルダを選択<br>\n<a href=\"https://camo.qiitausercontent.com/53813821851801eddbed514961987f9070733381/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393161313636652d366532652d336633372d373130652d6565373532306339336563322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/53813821851801eddbed514961987f9070733381/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393161313636652d366532652d336633372d373130652d6565373532306339336563322e706e67\" alt=\"操作_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f91a166e-6e2e-3f37-710e-ee7520c93ec2.png\"></a></p></li>\n<li><p>するとプロジェクトが<a>Chrome Extension管理画面</a>に追加されて、ブラウザ右上にアイコンが表示されます<br>\n<a href=\"https://camo.qiitausercontent.com/e2e0fba31b666b0fea44ded1ded106236dd280e8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36316232653131332d653532302d376566382d633437652d3432366265393361613834622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e2e0fba31b666b0fea44ded1ded106236dd280e8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36316232653131332d653532302d376566382d633437652d3432366265393361613834622e706e67\" alt=\"動作確認1_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/61b2e113-e520-7ef8-c47e-426be93aa84b.png\"></a></p></li>\n<li><p>アイコンをクリックして動作検証ができます<br>\n<a href=\"https://camo.qiitausercontent.com/909be0f655c64c11846b9b3ca31630357ddd7121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33666631316537332d383162332d636435612d386537302d3961373534613661393936352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/909be0f655c64c11846b9b3ca31630357ddd7121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33666631316537332d383162332d636435612d386537302d3961373534613661393936352e706e67\" alt=\"動作確認_11.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/3ff11e73-81b3-cd5a-8e70-9a754a6a9965.png\"></a></p></li>\n</ul>\n\n<h2>\n<span id=\"3-開発中にchrome-extensionの動作確認する\" class=\"fragment\"></span><a href=\"#3-%E9%96%8B%E7%99%BA%E4%B8%AD%E3%81%ABchrome-extension%E3%81%AE%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>3. 開発中にChrome Extensionの動作確認する</h2>\n\n<p>雛形の動作検証ができたらTypeScriptファイルを編集して処理を追加していきます。<br>\n<code>npm run dev:chrome</code>を実行した後、下記手順繰り返すことで、ソースコードを修正しながら随時動作検証ができます。</p>\n\n<ul>\n<li>資産（TypeScriptやHTML,CSS）を修正する（勝手にビルドが走ります）</li>\n<li>最新のビルド資産を取り込むため<a>Chrome Extension管理画面</a>でリロードをクリックします\n<a href=\"https://camo.qiitausercontent.com/090a13aa3e617e29329421ec4c5fba4a56e1fb9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35663936353163362d373337662d643664622d383062662d3434613731363662323030352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/090a13aa3e617e29329421ec4c5fba4a56e1fb9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35663936353163362d373337662d643664622d383062662d3434613731363662323030352e706e67\" alt=\"開発手順_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5f9651c6-737f-d6db-80bf-44a7166b2005.png\"></a>\n</li>\n<li>Chrome Extensionの動作確認をする</li>\n</ul>\n\n<h2>\n<span id=\"4-アイコンと宣伝用画像を作る\" class=\"fragment\"></span><a href=\"#4-%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%81%A8%E5%AE%A3%E4%BC%9D%E7%94%A8%E7%94%BB%E5%83%8F%E3%82%92%E4%BD%9C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>4. アイコンと宣伝用画像を作る</h2>\n\n<p>アプリを公開する前に、アイコンと宣伝用画像を作成し、雛形生成時のデフォルト資産と差し替えます。<br>\nデザイナーさんなら苦労しないでしょうが、自分はこれが一番大変でした。<br>\n3つのアイコンと3つの宣伝用画像が必要です。</p>\n\n<h3>\n<span id=\"アイコン\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3\"><i class=\"fa fa-link\"></i></a>アイコン</h3>\n\n<ul>\n<li>128x128\n\n<ul>\n<li>必須。インストール時やChromeウェブストアで表示する用</li>\n</ul>\n</li>\n<li>48x48\n\n<ul>\n<li>拡張機能の管理ページで表示する用</li>\n</ul>\n</li>\n<li>16x16\n\n<ul>\n<li>ブラウザ右上に表示する用</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"宣伝用画像\" class=\"fragment\"></span><a href=\"#%E5%AE%A3%E4%BC%9D%E7%94%A8%E7%94%BB%E5%83%8F\"><i class=\"fa fa-link\"></i></a>宣伝用画像</h3>\n\n<ul>\n<li>440x280\n\n<ul>\n<li>必須</li>\n</ul>\n</li>\n<li>920x680\n\n<ul>\n<li>大きめの画像</li>\n</ul>\n</li>\n<li>1400x560\n\n<ul>\n<li>ChromeExtensionをChrome Storeで選択した時に表示される画像</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"5-chromeウェブストアに公開する\" class=\"fragment\"></span><a href=\"#5-chrome%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B9%E3%83%88%E3%82%A2%E3%81%AB%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>5. Chromeウェブストアに公開する</h2>\n\n<ul>\n<li>雛形生成時バージョンが0.0.0になっており、バージョンが低すぎて公開できない状態なので、<code>manifest.json</code>と<code>package.json</code>のバージョン指定を0.0.1にあげます</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">manifest.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n  </span><span class=\"s2\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0.0.1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">&lt;-</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">0</span><span class=\"err\">から</span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">1</span><span class=\"err\">にあげる</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n  </span><span class=\"s2\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0.0.1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">&lt;-</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">0</span><span class=\"err\">から</span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">1</span><span class=\"err\">にあげる</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>下記コマンドで公開用のzipファイルを作成します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run build:chrome\n</pre></div></div>\n\n<ul>\n<li><p><a href=\"https://chrome.google.com/webstore/category/extensions\" rel=\"nofollow noopener\" target=\"_blank\">Chromeウェブストア</a>のデベロッパーダッシュボードを開きます。Chromeアカウントでログインします<br>\n<a href=\"https://camo.qiitausercontent.com/d0db218423075317e350940d46d6510353fc81bd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65646234386163392d303138312d316437382d633761642d6130383237313261663031632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d0db218423075317e350940d46d6510353fc81bd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65646234386163392d303138312d316437382d633761642d6130383237313261663031632e706e67\" alt=\"アプリ登録_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/edb48ac9-0181-1d78-c7ad-a082712af01c.png\"></a></p></li>\n<li><p>ダッシュボードで<code>新しいアイテムを追加する</code>を選択します<br>\n<a href=\"https://camo.qiitausercontent.com/70b8f467a4819f7fd2251cf96abf3749b7626eeb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37383761336132352d326539332d363138362d313765642d3662313962626233626162352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/70b8f467a4819f7fd2251cf96abf3749b7626eeb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37383761336132352d326539332d363138362d313765642d3662313962626233626162352e706e67\" alt=\"アプリ登録_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/787a3a25-2e93-6186-17ed-6b19bbb3bab5.png\"></a></p></li>\n<li><p><code>ファイルを追加</code>で作成したzipファイル(プロジェクトルート/packages配下にあります)を選択後、<code>アップロード</code>を選択します<br>\n<a href=\"https://camo.qiitausercontent.com/2bc72004e70eb79c898506904f452d396754f39f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32323362343632342d643839322d336562382d356561382d3733633461616632623562382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2bc72004e70eb79c898506904f452d396754f39f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32323362343632342d643839322d336562382d356561382d3733633461616632623562382e706e67\" alt=\"アプリ登録_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/223b4624-d892-3eb8-5ea8-73c4aaf2b5b8.png\"></a></p></li>\n<li><p>説明、アイコン、宣伝用画像、カテゴリを入力して<code>変更を公開</code>をクリックします<br>\n<a href=\"https://camo.qiitausercontent.com/efa7c9ab0ced7326af8c7cb2d03fe9c2282e7f11/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323466303335352d666537622d373931382d326437352d3039633333636365356530302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/efa7c9ab0ced7326af8c7cb2d03fe9c2282e7f11/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323466303335352d666537622d373931382d326437352d3039633333636365356530302e706e67\" alt=\"登録_5.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/724f0355-fe7b-7918-2d75-09c33cce5e00.png\"></a></p></li>\n<li><p>これで公開作業は完了です。しばらくするとChromeウェブストアに公開されます</p></li>\n</ul>\n\n<h2>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h2>\n\n<p>今回は<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使って、TypeScriptでChrome Extensionを作成、公開する手順をまとめました。<br>\n最初はTypeScriptでChrome Extensionを作るのは、ビルドの設定など色々めんどくさそうだぁと思っていましたが、<br>\n<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使うことで、簡単に作成から公開まで実現できました。<br>\nブラウザでのちょっとした作業を効率化するのにChrome Extentionは非常に強力なツールなので、今後なにかアイディアがあればまた作ってみたいと思います。</p>\n","body":"Githubで草を生やす活動は楽しいですね!\n増えてきて芝みたいになると達成感があって、モチベーションも上がります。\nところで、この前の10/30に草がハロウィン仕様になっていたのを見て、\n草を自分の好みの色を変更できればもっと楽しくなるのでは?と思い\n[草の色が変更できる（ついでにお絵描きもできる）Chrome Extension](https://chrome.google.com/webstore/detail/github-contributions-pain/bdibnecenojddgmjplnfehpjdmkiddok?hl=ja)を作りました。\n**その時に[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使って、TypeScriptで簡単にChrome Extensionが作れたので、アプリ作成から公開までの手順をまとめます。**\n\n## 1. プロジェクトの雛形を生成する\nyomanと[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)で簡単に雛形が作れるのでコレらを使っていきます。\n\n* `yoman`と`generator-chrome-extension-kickstart-typescript`をグローバルインストールします\n\n```\n$ npm install -g yo generator-chrome-extension-kickstart-typescript \n```\n* プロジェクトのルートフォルダを作成後、ルートフォルダに移動して`yo`コマンドで雛形を生成します\n\n```\n$ mkdir project\n$ cd project\n$ yo chrome-extension-kickstart-typescript \n```\n\n* いくつか質問されるので適当に答えます\n    * **What would you like to call this extension?**\n        * プロジェクト名を入力します。デフォルトはプロジェクトのフォルダ名\n    * **And how would you call it if you only had 12 characters (short_name)?**\n        * プロジェクトの略称を12文字以内で入力します\n    * **How would you like to describe this extension?**\n        * プロジェクト概要を入力します\n    * **Would you like to use UI Action?**\n        * 作りたいUI Actionに応じて、`No`,`Browser`,`Page`のいずれかを選択します\n            * `No` ・・・ UI Actionを使わない場合\n            * `Browser` ・・・ ツールバーの右にアイコンが常駐するタイプのChrome拡張を作成する場合\n            * `Page` ・・・ 特定のWebサイト観覧時のみにアドレスバー右にアイコンが表示されるタイプのChrome拡張を作成する場合\n    * **Would you like to override a chrome page?**\n        * Chromeの内部ページを書き換えるかどうかで、`No`,`Bookmarks Page`,`History Page`,`Newtab Page`のいずれかを選択します\n    * **Would you like more UI Features?**\n        * 作りたいUIを複数選択します\n            * `Options Page` ・・・ オプション画面を作りたい場合\n            * `Devtools Page` ・・・ 開発者ツールを拡張したい場合\n            * `Content Scripts` ・・・ Webで表示している画面にJavaScriptを差し込んで何か処理をしたい場合\n            * `Omnibox` ・・・ アドレスバーを拡張したい時に選択\n    * **Would you like to use permissions?**\n        * 使用するパーミッションを複数選択します\n    * **Would you like to install promo images for the Chrome Web Store?**\n        * Chromeストアで使う宣伝用画像を自動で生成するかを選択します\n\n\n※自分は下記のように答えました\n**What would you like to call this extension?** => github-contributions-paint\n**And how would you call it if you only had 12 characters (short_name)?** =>  github-paint\n**How would you like to describe this extension?** =>  You can paint github contributions!\n**Would you like to use UI Action?** => Browser\n**Would you like to override a chrome page?** =>  No\n**Would you like more UI Features?** =>  Content Scripts\n**Would you like to use permissions?** =>  Tabs\n**Would you like to install promo images for the Chrome Web Store?** =>  Yes\n\n* すると雛形が生成されます\n\n```:生成された雛形のフォルダ構成\ngithub-contributions-paint\n├── README.md\n├── app\n│   ├── images       　　　    　・・・Chromeウェブストア公開時に必要なアイコン格納フォルダ\n│   │   ├── icon-128.png\n│   │   ├── icon-16.png\n│   │   ├── icon-19.png\n│   │   └── icon-38.png\n│   ├── manifest.json          ・・・Chrome拡張の設定を定義するファイル\n│   ├── pages                  ・・・HTMLファイル格納フォルダ\n│   │   └── popup.html         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── scripts                ・・・TSファイル格納フォルダ\n│   │   ├── background.ts      ・・・バックグランド処理を記述するファイル\n│   │   └── popup.ts           ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── styles                 ・・・CSSファイル格納フォルダ\n│   │   └── popup.scss         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── _locales\n│   │   └── en\n│   │       └── messages.json ・・・アプリの設定ファイル\n│   └── fonts\n├── promo                     ・・・Chromeウェブストア公開時に必要な宣伝用画像の格納フォルダ\n│   ├── Chrome-Webstore-Icon_128x128.png\n│   ├── Promo-Image-Large_920x680.png\n│   ├── Promo-Image-Marquee_1400x560.png\n│   ├── Promo-Image-Small_440x280.png\n│   ├── Screenshot_1280x800.png\n│   └── Screenshot_640x400.png\n├── dist\n├── gulpfile.babel.js\n├── node_modules\n├── package-lock.json\n├── package.json\n├── tasks\n├── tsconfig.json\n└── tslint.json\n\n```\n\n* 最後にTypeScriptをグローバルインストールしていない場合は、グローバルインストールまたはプロジェクトにインストールします\n\n```\n$ npm install typescript --save-dev\n```\n\n==2018/11/24 追記(ここから)==\n\n* このまま次手順にいくと警告がでるのでそれを防ぐためにgulpのバージョンを下げます。\n\n```\n$ npm install gulp@3.9.0 --save-dev\n```\n\n<small>※関連する[issue](https://github.com/gulpjs/gulp/issues/1631)、[stackoverflow](https://stackoverflow.com/questions/48568942/failed-to-load-external-module-babel-register-while-gulp)</small>\n\n==2018/11/24 追記(ここまで)==\n## 2. 作ったChrome Extensionを動かしてみる\n雛形を作成したら早速動かすことができます\n\n* ビルドコマンドを実行します\n\n```\n$ npm run dev:chrome\n```\n\n* Chromeで`chrome://extensions`を開いて`パッケージ化されていない拡張機能を読み込む`ボタンをクリック\n![手順_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5a549a45-8ec4-8955-b733-875549f8ad31.png)\n\n* プロジェクトルート/dist配下の`chrome`フォルダを選択\n![操作_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f91a166e-6e2e-3f37-710e-ee7520c93ec2.png)\n\n* するとプロジェクトが[Chrome Extension管理画面](chrome://extensions/)に追加されて、ブラウザ右上にアイコンが表示されます\n![動作確認1_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/61b2e113-e520-7ef8-c47e-426be93aa84b.png)\n\n\n* アイコンをクリックして動作検証ができます\n![動作確認_11.png](https://qiita-image-store.s3.amazonaws.com/0/49915/3ff11e73-81b3-cd5a-8e70-9a754a6a9965.png)\n\n\n## 3. 開発中にChrome Extensionの動作確認する\n雛形の動作検証ができたらTypeScriptファイルを編集して処理を追加していきます。\n`npm run dev:chrome`を実行した後、下記手順繰り返すことで、ソースコードを修正しながら随時動作検証ができます。\n\n* 資産（TypeScriptやHTML,CSS）を修正する（勝手にビルドが走ります）\n* 最新のビルド資産を取り込むため[Chrome Extension管理画面](chrome://extensions/)でリロードをクリックします\n![開発手順_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5f9651c6-737f-d6db-80bf-44a7166b2005.png)\n* Chrome Extensionの動作確認をする\n\n## 4. アイコンと宣伝用画像を作る\nアプリを公開する前に、アイコンと宣伝用画像を作成し、雛形生成時のデフォルト資産と差し替えます。\nデザイナーさんなら苦労しないでしょうが、自分はこれが一番大変でした。\n3つのアイコンと3つの宣伝用画像が必要です。\n\n### アイコン\n* 128x128\n    * 必須。インストール時やChromeウェブストアで表示する用\n* 48x48\n    * 拡張機能の管理ページで表示する用\n* 16x16\n    * ブラウザ右上に表示する用\n  \n### 宣伝用画像\n* 440x280\n    * 必須\n* 920x680\n    * 大きめの画像\n* 1400x560\n    * ChromeExtensionをChrome Storeで選択した時に表示される画像\n\n## 5. Chromeウェブストアに公開する\n* 雛形生成時バージョンが0.0.0になっており、バージョンが低すぎて公開できない状態なので、`manifest.json`と`package.json`のバージョン指定を0.0.1にあげます\n\n```json:manifest.json\n{\n  ・・・\n  \"version\": \"0.0.1\", <- 0.0.0から0.0.1にあげる\n  ・・・\n}\n```\n\n```json:package.json\n{\n  ・・・\n  \"version\": \"0.0.1\", <- 0.0.0から0.0.1にあげる\n  ・・・\n}\n```\n\n* 下記コマンドで公開用のzipファイルを作成します\n\n```\n$ npm run build:chrome\n```\n\n* [Chromeウェブストア](https://chrome.google.com/webstore/category/extensions)のデベロッパーダッシュボードを開きます。Chromeアカウントでログインします\n![アプリ登録_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/edb48ac9-0181-1d78-c7ad-a082712af01c.png)\n\n* ダッシュボードで`新しいアイテムを追加する`を選択します\n![アプリ登録_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/787a3a25-2e93-6186-17ed-6b19bbb3bab5.png)\n\n* `ファイルを追加`で作成したzipファイル(プロジェクトルート/packages配下にあります)を選択後、`アップロード`を選択します\n![アプリ登録_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/223b4624-d892-3eb8-5ea8-73c4aaf2b5b8.png)\n\n* 説明、アイコン、宣伝用画像、カテゴリを入力して`変更を公開`をクリックします\n![登録_5.png](https://qiita-image-store.s3.amazonaws.com/0/49915/724f0355-fe7b-7918-2d75-09c33cce5e00.png)\n\n* これで公開作業は完了です。しばらくするとChromeウェブストアに公開されます\n\n\n## 最後に\n今回は[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使って、TypeScriptでChrome Extensionを作成、公開する手順をまとめました。\n最初はTypeScriptでChrome Extensionを作るのは、ビルドの設定など色々めんどくさそうだぁと思っていましたが、\n[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使うことで、簡単に作成から公開まで実現できました。\nブラウザでのちょっとした作業を効率化するのにChrome Extentionは非常に強力なツールなので、今後なにかアイディアがあればまた作ってみたいと思います。\n\n","comments_count":5,"created_at":"2017-12-20T02:36:27+09:00","likes_count":27,"reactions_count":0}}}