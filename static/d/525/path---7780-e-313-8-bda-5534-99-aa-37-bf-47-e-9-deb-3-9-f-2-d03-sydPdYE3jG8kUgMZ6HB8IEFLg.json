{"data":{"site":{"siteMetadata":{"title":"Takumon Blog","author":"Takuto Inoue"}},"qiitaPost":{"rendered_body":"<p>== 2018/4/7 追記 ==========================================<br>\n本記事ではChrome拡張とDockerによって実現していましたが、<br>\nその後GitBucket Plugin化しました。</p>\n\n<p><a href=\"https://github.com/Takumon/gitbucket-issue-estimation-plugin\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-plugin</a></p>\n\n<p><a href=\"https://github.com/Takumon/gitbucket-issue-estimation-plugin/releases/tag/0.1\" rel=\"nofollow noopener\" target=\"_blank\">リリースページ</a>からjarファイルをダウンロードして<code>&lt;GITBUCKET_HOME&gt;/plugins/</code>に置くだけで導入可能です。<br>\n== =======================================================</p>\n\n<p>Git Advent Calendarが埋まっていなかったので、大晦日ですが代わりに投稿させていただきました。</p>\n\n<h2>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h2>\n\n<p><a href=\"https://gitbucket.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">GitBucket</a>のマイルストーンの進捗率はissueの件数ベースなので、issueごとに作業量のバラつきがあったりすると現実的な進捗率と乖離してしまいます。</p>\n\n<p>そこで今回はChrome拡張とDockerイメージを作成して、<br>\nissueに作業量を設定できるようにして、マイルストーンで作業量ベースの進捗率を確認できるようにしました。</p>\n\n<p>Chrome拡張とDockerイメージはどちらも公開しているので簡単に導入できます。是非試してみてください。</p>\n\n<ul>\n<li>\n<em>Chrome拡張</em>\n\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-client</a></li>\n</ul>\n</li>\n<li>\n<em>Dockerイメージ</em>\n\n<ul>\n<li><a href=\"https://hub.docker.com/r/takumon/gitbucket-issue-estimation-server/\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-server</a></li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"導入すると\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B%E3%81%A8\"><i class=\"fa fa-link\"></i></a>導入すると</h2>\n\n<p><a href=\"https://gitbucket.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">GitBucket</a>のissueで作業量が設定できるようになり、<br>\n<a href=\"https://camo.qiitausercontent.com/f13706aedeb42c177c1f4f57975596b5ff002407/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36313030366263392d326438322d663062302d363461322d3037393233633737333963372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/f13706aedeb42c177c1f4f57975596b5ff002407/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36313030366263392d326438322d663062302d363461322d3037393233633737333963372e706e67\" alt=\"導入後_イシュー画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/61006bc9-2d82-f0b0-64a2-07923c7739c7.png\"></a></p>\n\n<p>マイルストーンで作業量ベースの進捗率が見れるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/b86e2b23bc0f4b9fae45b07bfd568b11bc005121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36613462383664382d323937332d656338342d383662632d3632383965343262643636362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b86e2b23bc0f4b9fae45b07bfd568b11bc005121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36613462383664382d323937332d656338342d383662632d3632383965343262643636362e706e67\" alt=\"導入後_マイルストーン画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/6a4b86d8-2973-ec84-86bc-6289e42bd666.png\"></a></p>\n\n<p>またissue一覧画面でも作業量を設定できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/7c2ee31427698b7fe01b30f25b8e31b7e3115e2d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39633835386533622d356463312d313432342d663334662d3562323661633665323066642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7c2ee31427698b7fe01b30f25b8e31b7e3115e2d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39633835386533622d356463312d313432342d663334662d3562323661633665323066642e706e67\" alt=\"導入後_イシュー一覧画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/9c858e3b-5dc1-1424-f34f-5b26ac6e20fd.png\"></a></p>\n\n<h2>\n<span id=\"導入手順\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>導入手順</h2>\n\n<h3>\n<span id=\"1-docker側\" class=\"fragment\"></span><a href=\"#1-docker%E5%81%B4\"><i class=\"fa fa-link\"></i></a>1. Docker側</h3>\n\n<p>GitBucketと同じネットワーク環境に作業量保存用のサーバを立てます。Dockerが導入されていることが前提です。</p>\n\n<ul>\n<li>docker-compose.ymlを作成（MongoDBのボリューム用にdocker-compose.ymlファイルと同階層にdbフォルダを作成してください）</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"docker\">\n<div class=\"code-lang\"><span class=\"bold\">docker-compose.yml</span></div>\n<div class=\"highlight\"><pre>version: \"3.3\"\nservices:\n  server:\n    image: takumon/gitbucket-issue-estimation-server\n    ports:\n      - 3000:3000\n    depends_on:\n      - mongo\n    links:\n      - mongo\n    environment:\n      MONGO_URL: mongodb://mongo:27017/test\n  mongo:\n    image: mongo:3.5.12\n    ports:\n      - 27017:27017\n    volumes:\n      - ./db:/data/db\n</pre></div>\n</div>\n\n<ul>\n<li>docker-conpose.ymlがあるフォルダで下記を実行</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span>docker-compose up <span class=\"nt\">-d</span>\n</pre></div></div>\n\n<h3>\n<span id=\"2-gitbucket側\" class=\"fragment\"></span><a href=\"#2-gitbucket%E5%81%B4\"><i class=\"fa fa-link\"></i></a>2. GitBucket側</h3>\n\n<p>Chrome拡張をインストールする前に、GitBucketのトークンを発行してメモしておきます。</p>\n\n<ul>\n<li><p>GitBucketヘッダー右上アイコン &gt; Account Setting を選択<br>\n<a href=\"https://camo.qiitausercontent.com/b06f383ce5768cc2c9b84b7bcd92537cbd0f94ef/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34323637363166372d633139392d653139652d633631392d6131383264643035623065612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b06f383ce5768cc2c9b84b7bcd92537cbd0f94ef/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34323637363166372d633139392d653139652d633631392d6131383264643035623065612e706e67\" alt=\"導入手順_GitBucketトークン発行_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/426761f7-c199-e19e-c619-a182dd05b0ea.png\"></a><br>\n<br></p></li>\n<li><p>左メニュー Applicationsを選択し、Generate new tokenのToken descriptionにトークンの概要を記載、その後<code>Generate token</code>ボタンをクリック<br>\n<a href=\"https://camo.qiitausercontent.com/e21ff3f5214f3833cc66ed4d9cf2037b31c6d02f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64313836663730322d663764622d353231652d366436642d6564636133313836643931352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e21ff3f5214f3833cc66ed4d9cf2037b31c6d02f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64313836663730322d663764622d353231652d366436642d6564636133313836643931352e706e67\" alt=\"導入手順_GitBucketトークン発行_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/d186f702-f7db-521e-6d6d-edca3186d915.png\"></a><br>\n<br></p></li>\n<li><p>発行されたトークンをコピー（後の手順で使います）<br>\n<a href=\"https://camo.qiitausercontent.com/d46de4cb3222a8304001bbc2f89abc1e14b2cba8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30633830346661662d666431332d383064322d386365392d6535303439323262623534612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d46de4cb3222a8304001bbc2f89abc1e14b2cba8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30633830346661662d666431332d383064322d386365392d6535303439323262623534612e706e67\" alt=\"導入手順_GitBucketトークン発行_３.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/0c804faf-fd13-80d2-8ce9-e504922bb54a.png\"></a></p></li>\n</ul>\n\n<h3>\n<span id=\"3-chrome-extension側\" class=\"fragment\"></span><a href=\"#3-chrome-extension%E5%81%B4\"><i class=\"fa fa-link\"></i></a>3. Chrome Extension側</h3>\n\n<ul>\n<li><p>Chromeを開きChromeウェブストアで<a href=\"https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-client</a>をインストール<br>\n<a href=\"https://camo.qiitausercontent.com/b7b7e21c6391cd1436ad73eb356bdec6f93bb3b4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63336365666639382d313731372d626566302d306465392d3836313736303638613635632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b7b7e21c6391cd1436ad73eb356bdec6f93bb3b4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63336365666639382d313731372d626566302d306465392d3836313736303638613635632e706e67\" alt=\"導入手順_GitBucket_拡張インストール_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/c3ceff98-1717-bef0-0de9-86176068a65c.png\"></a><br>\n<br></p></li>\n<li>\n<p>右上の「E」アイコンをクリック、下記情報を入力し<code>Save</code>ボタンクリック</p>\n\n<ul>\n<li>\n<strong>gitbucket-issue-estimation-server URL</strong>\n\n<ul>\n<li>サーバ側の手順で立てたサーバのURL 例： <code>http://127.0.0.1:3000</code> </li>\n</ul>\n</li>\n<li>\n<strong>GitBucket Token</strong>\n\n<ul>\n<li>GitBucket側の手順でメモしたトークン\n<a href=\"https://camo.qiitausercontent.com/be5ab7568b1a4eee506be3546cae994189e34d15/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66366162333739622d613835322d366562342d663634382d6131346437353139663365622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/be5ab7568b1a4eee506be3546cae994189e34d15/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66366162333739622d613835322d366562342d663634382d6131346437353139663365622e706e67\" alt=\"導入手順_GitBucketトークン発行_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f6ab379b-a852-6eb4-f648-a14d7519f3eb.png\"></a>\n<br>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"具体的な仕組み\" class=\"fragment\"></span><a href=\"#%E5%85%B7%E4%BD%93%E7%9A%84%E3%81%AA%E4%BB%95%E7%B5%84%E3%81%BF\"><i class=\"fa fa-link\"></i></a>具体的な仕組み</h2>\n\n<p>Docker側はMongoDBとNode.jsを使っていて、issueの作業量の検索登録・更新・削除APIを提供しているだけです。<br>\nChrome拡張側で下記のように全体をコントロールしています。</p>\n\n<p><strong>(1)</strong> ・・・　GitBucketの画面からissueとマイルストーンの情報を取得、issueの作業量、作業量ベースの進捗率を画面に挿入<br>\n<strong>(2)</strong> ・・・　画面から取得したissueの情報をもとに詳細情報を取得<br>\n<strong>(3)</strong> ・・・　issueの作業量を検索・登録・更新・削除</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/d5736e48c469204a17566c6cfb4003420add2c8e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63616435323063332d376439632d666134372d326262302d3732633534663638383233362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d5736e48c469204a17566c6cfb4003420add2c8e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63616435323063332d376439632d666134372d326262302d3732633534663638383233362e706e67\" alt=\"全体像.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/cad520c3-7d9c-fa47-2bb0-72c54f688236.png\"></a></p>\n\n<h2>\n<span id=\"chrome拡張作成時にgitbucket-apiまわりで躓いたこと\" class=\"fragment\"></span><a href=\"#chrome%E6%8B%A1%E5%BC%B5%E4%BD%9C%E6%88%90%E6%99%82%E3%81%ABgitbucket-api%E3%81%BE%E3%82%8F%E3%82%8A%E3%81%A7%E8%BA%93%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>Chrome拡張作成時にGitBucket APIまわりで躓いたこと</h2>\n\n<p><a href=\"https://github.com/gitbucket/gitbucket/wiki/API-WebHook\" rel=\"nofollow noopener\" target=\"_blank\">GitBucketのAPI</a>は<a href=\"https://developer.github.com/v3/\" rel=\"nofollow noopener\" target=\"_blank\">GithubのREST API v3</a>に準拠していますが、一部実装されていない部分があったので、Chrome拡張作成時に躓きました。</p>\n\n<h3>\n<span id=\"stateallが効かない\" class=\"fragment\"></span><a href=\"#stateall%E3%81%8C%E5%8A%B9%E3%81%8B%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a><code>state=all</code>が効かない</h3>\n\n<p>未解決issueと解決済issue両方をいっぺんに取得したかったのですが、GitBucketのAPIでは<code>state=all</code>が効きません。そのため<code>state=open</code>と<code>state=closed</code>を指定して２回に分けて取得する実装にしました。</p>\n\n<h4>\n<span id=\"per_pageが効かない1度に25件が最大\" class=\"fragment\"></span><a href=\"#per_page%E3%81%8C%E5%8A%B9%E3%81%8B%E3%81%AA%E3%81%841%E5%BA%A6%E3%81%AB25%E4%BB%B6%E3%81%8C%E6%9C%80%E5%A4%A7\"><i class=\"fa fa-link\"></i></a><code>per_page</code>が効かない（1度に25件が最大）</h4>\n\n<p>GitBucketのAPIでは<code>per_page</code>（検索時の１ページあたりの件数）が実装されていません。<br>\nそのためマイルストーンに紐づくissue取得時は、１ページ目を検索して取得結果が25件の場合は次のページも検索するような実装にしました。</p>\n\n<h4>\n<span id=\"closed_atクローズ日が取得できない\" class=\"fragment\"></span><a href=\"#closed_at%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%BA%E6%97%A5%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a><code>closed_at</code>（クローズ日）が取得できない</h4>\n\n<p>Chrome拡張作成当初は、バーンダウンチャートを表示しようと思っていたのですが、issueのクローズ日が取得出来ないので断念しました。</p>\n\n<h4>\n<span id=\"-参考にさせていただいたサイト\" class=\"fragment\"></span><a href=\"#-%E5%8F%82%E8%80%83%E3%81%AB%E3%81%95%E3%81%9B%E3%81%A6%E3%81%84%E3%81%9F%E3%81%A0%E3%81%84%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88\"><i class=\"fa fa-link\"></i></a>※ 参考にさせていただいたサイト</h4>\n\n<ul>\n<li><a href=\"https://qiita.com/5zm/items/b0b620cdeb9596108418#1%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8C%E6%9C%80%E5%A4%A725%E4%BB%B6%E3%81%A7%E5%85%A8issue%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\" id=\"reference-1c197ca99a2ee070efac\">PythonでGitBucketのIssueをExcel出力する（その後）</a></li>\n<li><a href=\"https://qiita.com/5zm/items/57d7abca8e0d447e326d#2-gitbucket%E3%81%AEapi%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6issues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0\" id=\"reference-7d56ea50a58cb24addc5\">PythonでGitBucketのIssueをExcel出力する（API呼び出し編）</a></li>\n</ul>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>本来こういう追加機能はGitBucketプラグインで作るべきなのかもしれませんが、今回はChrome拡張とDockerイメージで実現してみました。<br>\nChrome拡張は任意の画面にJavaScriptやCSSを差し込めるので、既存のWebサービスををちょっと便利にするのにはうってつけですね。</p>\n","headings":[{"id":"はじめに","value":"はじめに","depth":2,"parents":[]},{"id":"導入すると","value":"導入すると","depth":2,"parents":[]},{"id":"導入手順","value":"導入手順","depth":2,"parents":[]},{"id":"1-docker側","value":"1. Docker側","depth":3,"parents":[{"id":"導入手順","value":"導入手順","depth":2}]},{"id":"2-gitbucket側","value":"2. GitBucket側","depth":3,"parents":[{"id":"導入手順","value":"導入手順","depth":2}]},{"id":"3-chrome-extension側","value":"3. Chrome Extension側","depth":3,"parents":[{"id":"導入手順","value":"導入手順","depth":2}]},{"id":"具体的な仕組み","value":"具体的な仕組み","depth":2,"parents":[]},{"id":"chrome拡張作成時にgitbucket-apiまわりで躓いたこと","value":"Chrome拡張作成時にGitBucket APIまわりで躓いたこと","depth":2,"parents":[]},{"id":"stateallが効かない","value":"state=allが効かない","depth":3,"parents":[{"id":"chrome拡張作成時にgitbucket-apiまわりで躓いたこと","value":"Chrome拡張作成時にGitBucket APIまわりで躓いたこと","depth":2}]},{"id":"per_pageが効かない1度に25件が最大","value":"per_pageが効かない（1度に25件が最大）","depth":4,"parents":[{"id":"stateallが効かない","value":"state=allが効かない","depth":3},{"id":"chrome拡張作成時にgitbucket-apiまわりで躓いたこと","value":"Chrome拡張作成時にGitBucket APIまわりで躓いたこと","depth":2}]},{"id":"closed_atクローズ日が取得できない","value":"closed_at（クローズ日）が取得できない","depth":4,"parents":[{"id":"stateallが効かない","value":"state=allが効かない","depth":3},{"id":"chrome拡張作成時にgitbucket-apiまわりで躓いたこと","value":"Chrome拡張作成時にGitBucket APIまわりで躓いたこと","depth":2}]},{"id":"-参考にさせていただいたサイト","value":"※ 参考にさせていただいたサイト","depth":4,"parents":[{"id":"stateallが効かない","value":"state=allが効かない","depth":3},{"id":"chrome拡張作成時にgitbucket-apiまわりで躓いたこと","value":"Chrome拡張作成時にGitBucket APIまわりで躓いたこと","depth":2}]},{"id":"まとめ","value":"まとめ","depth":2,"parents":[]}],"fields":{"title":"GitBucketのissueで作業量を設定できるプラグイン","excerpt":"== 2018/4/7 追記 ==========================================本記事ではChrome拡張とDockerによって実現していましたが、その後GitBucket Plugin化しました。gitb...","date":"2017-12-31T23:49:04+09:00","tags":["JavaScript","chrome-extension","docker","GitBucket","Qiita"]},"user":{"id":"Takumon","profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/49915/profile-images/1488080194","description":"SIer"}}},"pageContext":{"slug":"/7780e313-8bda-5534-99aa-37bf47e9deb3/","previous":{"fields":{"slug":"/b4c7d1b9-428f-569a-af40-527d89794a77/","title":"TypeScriptで簡単にChrome Extensionを作る方法","date":"2017-12-20T02:36:27+09:00","excerpt":"Githubで草を生やす活動は楽しいですね!増えてきて芝みたいになると達成感があって、モチベーションも上がります。ところで、この前の10/30に草がハロウィン仕様になっていたのを見て、草を自分の好みの色を変更できればもっと楽しくなるのでは?...","tags":["JavaScript","GitHub","TypeScript","chrome-extension","Qiita"]},"id":"b4c7d1b9-428f-569a-af40-527d89794a77","title":"TypeScriptで簡単にChrome Extensionを作る方法","rendered_body":"<p>Githubで草を生やす活動は楽しいですね!<br>\n増えてきて芝みたいになると達成感があって、モチベーションも上がります。<br>\nところで、この前の10/30に草がハロウィン仕様になっていたのを見て、<br>\n草を自分の好みの色を変更できればもっと楽しくなるのでは?と思い<br>\n<a href=\"https://chrome.google.com/webstore/detail/github-contributions-pain/bdibnecenojddgmjplnfehpjdmkiddok?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">草の色が変更できる（ついでにお絵描きもできる）Chrome Extension</a>を作りました。<br>\n<strong>その時に<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使って、TypeScriptで簡単にChrome Extensionが作れたので、アプリ作成から公開までの手順をまとめます。</strong></p>\n\n<h2>\n<span id=\"1-プロジェクトの雛形を生成する\" class=\"fragment\"></span><a href=\"#1-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E9%9B%9B%E5%BD%A2%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>1. プロジェクトの雛形を生成する</h2>\n\n<p>yomanと<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>で簡単に雛形が作れるのでコレらを使っていきます。</p>\n\n<ul>\n<li>\n<code>yoman</code>と<code>generator-chrome-extension-kickstart-typescript</code>をグローバルインストールします</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install -g yo generator-chrome-extension-kickstart-typescript \n</pre></div></div>\n\n<ul>\n<li>プロジェクトのルートフォルダを作成後、ルートフォルダに移動して<code>yo</code>コマンドで雛形を生成します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ mkdir project\n$ cd project\n$ yo chrome-extension-kickstart-typescript \n</pre></div></div>\n\n<ul>\n<li>いくつか質問されるので適当に答えます\n\n<ul>\n<li>\n<strong>What would you like to call this extension?</strong>\n\n<ul>\n<li>プロジェクト名を入力します。デフォルトはプロジェクトのフォルダ名</li>\n</ul>\n</li>\n<li>\n<strong>And how would you call it if you only had 12 characters (short_name)?</strong>\n\n<ul>\n<li>プロジェクトの略称を12文字以内で入力します</li>\n</ul>\n</li>\n<li>\n<strong>How would you like to describe this extension?</strong>\n\n<ul>\n<li>プロジェクト概要を入力します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to use UI Action?</strong>\n\n<ul>\n<li>作りたいUI Actionに応じて、<code>No</code>,<code>Browser</code>,<code>Page</code>のいずれかを選択します\n\n<ul>\n<li>\n<code>No</code> ・・・ UI Actionを使わない場合</li>\n<li>\n<code>Browser</code> ・・・ ツールバーの右にアイコンが常駐するタイプのChrome拡張を作成する場合</li>\n<li>\n<code>Page</code> ・・・ 特定のWebサイト観覧時のみにアドレスバー右にアイコンが表示されるタイプのChrome拡張を作成する場合</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to override a chrome page?</strong>\n\n<ul>\n<li>Chromeの内部ページを書き換えるかどうかで、<code>No</code>,<code>Bookmarks Page</code>,<code>History Page</code>,<code>Newtab Page</code>のいずれかを選択します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like more UI Features?</strong>\n\n<ul>\n<li>作りたいUIを複数選択します\n\n<ul>\n<li>\n<code>Options Page</code> ・・・ オプション画面を作りたい場合</li>\n<li>\n<code>Devtools Page</code> ・・・ 開発者ツールを拡張したい場合</li>\n<li>\n<code>Content Scripts</code> ・・・ Webで表示している画面にJavaScriptを差し込んで何か処理をしたい場合</li>\n<li>\n<code>Omnibox</code> ・・・ アドレスバーを拡張したい時に選択</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to use permissions?</strong>\n\n<ul>\n<li>使用するパーミッションを複数選択します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to install promo images for the Chrome Web Store?</strong>\n\n<ul>\n<li>Chromeストアで使う宣伝用画像を自動で生成するかを選択します</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<p>※自分は下記のように答えました<br>\n<strong>What would you like to call this extension?</strong> =&gt; github-contributions-paint<br>\n<strong>And how would you call it if you only had 12 characters (short_name)?</strong> =&gt;  github-paint<br>\n<strong>How would you like to describe this extension?</strong> =&gt;  You can paint github contributions!<br>\n<strong>Would you like to use UI Action?</strong> =&gt; Browser<br>\n<strong>Would you like to override a chrome page?</strong> =&gt;  No<br>\n<strong>Would you like more UI Features?</strong> =&gt;  Content Scripts<br>\n<strong>Would you like to use permissions?</strong> =&gt;  Tabs<br>\n<strong>Would you like to install promo images for the Chrome Web Store?</strong> =&gt;  Yes</p>\n\n<ul>\n<li>すると雛形が生成されます</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">生成された雛形のフォルダ構成</span></div>\n<div class=\"highlight\"><pre>github-contributions-paint\n├── README.md\n├── app\n│   ├── images       　　　    　・・・Chromeウェブストア公開時に必要なアイコン格納フォルダ\n│   │   ├── icon-128.png\n│   │   ├── icon-16.png\n│   │   ├── icon-19.png\n│   │   └── icon-38.png\n│   ├── manifest.json          ・・・Chrome拡張の設定を定義するファイル\n│   ├── pages                  ・・・HTMLファイル格納フォルダ\n│   │   └── popup.html         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── scripts                ・・・TSファイル格納フォルダ\n│   │   ├── background.ts      ・・・バックグランド処理を記述するファイル\n│   │   └── popup.ts           ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── styles                 ・・・CSSファイル格納フォルダ\n│   │   └── popup.scss         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── _locales\n│   │   └── en\n│   │       └── messages.json ・・・アプリの設定ファイル\n│   └── fonts\n├── promo                     ・・・Chromeウェブストア公開時に必要な宣伝用画像の格納フォルダ\n│   ├── Chrome-Webstore-Icon_128x128.png\n│   ├── Promo-Image-Large_920x680.png\n│   ├── Promo-Image-Marquee_1400x560.png\n│   ├── Promo-Image-Small_440x280.png\n│   ├── Screenshot_1280x800.png\n│   └── Screenshot_640x400.png\n├── dist\n├── gulpfile.babel.js\n├── node_modules\n├── package-lock.json\n├── package.json\n├── tasks\n├── tsconfig.json\n└── tslint.json\n\n</pre></div>\n</div>\n\n<ul>\n<li>最後にTypeScriptをグローバルインストールしていない場合は、グローバルインストールまたはプロジェクトにインストールします</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install typescript --save-dev\n</pre></div></div>\n\n<p>==2018/11/24 追記(ここから)==</p>\n\n<ul>\n<li>このまま次手順にいくと警告がでるのでそれを防ぐためにgulpのバージョンを下げます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install gulp@3.9.0 --save-dev\n</pre></div></div>\n\n<p>※関連する<a href=\"https://github.com/gulpjs/gulp/issues/1631\" rel=\"nofollow noopener\" target=\"_blank\">issue</a>、<a href=\"https://stackoverflow.com/questions/48568942/failed-to-load-external-module-babel-register-while-gulp\" rel=\"nofollow noopener\" target=\"_blank\">stackoverflow</a></p>\n\n<p>==2018/11/24 追記(ここまで)==</p>\n\n<h2>\n<span id=\"2-作ったchrome-extensionを動かしてみる\" class=\"fragment\"></span><a href=\"#2-%E4%BD%9C%E3%81%A3%E3%81%9Fchrome-extension%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>2. 作ったChrome Extensionを動かしてみる</h2>\n\n<p>雛形を作成したら早速動かすことができます</p>\n\n<ul>\n<li>ビルドコマンドを実行します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run dev:chrome\n</pre></div></div>\n\n<ul>\n<li><p>Chromeで<code>chrome://extensions</code>を開いて<code>パッケージ化されていない拡張機能を読み込む</code>ボタンをクリック<br>\n<a href=\"https://camo.qiitausercontent.com/88e144ea0fc880ccec17978afc9ec782fb0d62c1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35613534396134352d386563342d383935352d623733332d3837353534396638616433312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/88e144ea0fc880ccec17978afc9ec782fb0d62c1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35613534396134352d386563342d383935352d623733332d3837353534396638616433312e706e67\" alt=\"手順_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5a549a45-8ec4-8955-b733-875549f8ad31.png\"></a></p></li>\n<li><p>プロジェクトルート/dist配下の<code>chrome</code>フォルダを選択<br>\n<a href=\"https://camo.qiitausercontent.com/53813821851801eddbed514961987f9070733381/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393161313636652d366532652d336633372d373130652d6565373532306339336563322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/53813821851801eddbed514961987f9070733381/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393161313636652d366532652d336633372d373130652d6565373532306339336563322e706e67\" alt=\"操作_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f91a166e-6e2e-3f37-710e-ee7520c93ec2.png\"></a></p></li>\n<li><p>するとプロジェクトが<a>Chrome Extension管理画面</a>に追加されて、ブラウザ右上にアイコンが表示されます<br>\n<a href=\"https://camo.qiitausercontent.com/e2e0fba31b666b0fea44ded1ded106236dd280e8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36316232653131332d653532302d376566382d633437652d3432366265393361613834622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e2e0fba31b666b0fea44ded1ded106236dd280e8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36316232653131332d653532302d376566382d633437652d3432366265393361613834622e706e67\" alt=\"動作確認1_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/61b2e113-e520-7ef8-c47e-426be93aa84b.png\"></a></p></li>\n<li><p>アイコンをクリックして動作検証ができます<br>\n<a href=\"https://camo.qiitausercontent.com/909be0f655c64c11846b9b3ca31630357ddd7121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33666631316537332d383162332d636435612d386537302d3961373534613661393936352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/909be0f655c64c11846b9b3ca31630357ddd7121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33666631316537332d383162332d636435612d386537302d3961373534613661393936352e706e67\" alt=\"動作確認_11.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/3ff11e73-81b3-cd5a-8e70-9a754a6a9965.png\"></a></p></li>\n</ul>\n\n<h2>\n<span id=\"3-開発中にchrome-extensionの動作確認する\" class=\"fragment\"></span><a href=\"#3-%E9%96%8B%E7%99%BA%E4%B8%AD%E3%81%ABchrome-extension%E3%81%AE%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>3. 開発中にChrome Extensionの動作確認する</h2>\n\n<p>雛形の動作検証ができたらTypeScriptファイルを編集して処理を追加していきます。<br>\n<code>npm run dev:chrome</code>を実行した後、下記手順繰り返すことで、ソースコードを修正しながら随時動作検証ができます。</p>\n\n<ul>\n<li>資産（TypeScriptやHTML,CSS）を修正する（勝手にビルドが走ります）</li>\n<li>最新のビルド資産を取り込むため<a>Chrome Extension管理画面</a>でリロードをクリックします\n<a href=\"https://camo.qiitausercontent.com/090a13aa3e617e29329421ec4c5fba4a56e1fb9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35663936353163362d373337662d643664622d383062662d3434613731363662323030352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/090a13aa3e617e29329421ec4c5fba4a56e1fb9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35663936353163362d373337662d643664622d383062662d3434613731363662323030352e706e67\" alt=\"開発手順_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5f9651c6-737f-d6db-80bf-44a7166b2005.png\"></a>\n</li>\n<li>Chrome Extensionの動作確認をする</li>\n</ul>\n\n<h2>\n<span id=\"4-アイコンと宣伝用画像を作る\" class=\"fragment\"></span><a href=\"#4-%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%81%A8%E5%AE%A3%E4%BC%9D%E7%94%A8%E7%94%BB%E5%83%8F%E3%82%92%E4%BD%9C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>4. アイコンと宣伝用画像を作る</h2>\n\n<p>アプリを公開する前に、アイコンと宣伝用画像を作成し、雛形生成時のデフォルト資産と差し替えます。<br>\nデザイナーさんなら苦労しないでしょうが、自分はこれが一番大変でした。<br>\n3つのアイコンと3つの宣伝用画像が必要です。</p>\n\n<h3>\n<span id=\"アイコン\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3\"><i class=\"fa fa-link\"></i></a>アイコン</h3>\n\n<ul>\n<li>128x128\n\n<ul>\n<li>必須。インストール時やChromeウェブストアで表示する用</li>\n</ul>\n</li>\n<li>48x48\n\n<ul>\n<li>拡張機能の管理ページで表示する用</li>\n</ul>\n</li>\n<li>16x16\n\n<ul>\n<li>ブラウザ右上に表示する用</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"宣伝用画像\" class=\"fragment\"></span><a href=\"#%E5%AE%A3%E4%BC%9D%E7%94%A8%E7%94%BB%E5%83%8F\"><i class=\"fa fa-link\"></i></a>宣伝用画像</h3>\n\n<ul>\n<li>440x280\n\n<ul>\n<li>必須</li>\n</ul>\n</li>\n<li>920x680\n\n<ul>\n<li>大きめの画像</li>\n</ul>\n</li>\n<li>1400x560\n\n<ul>\n<li>ChromeExtensionをChrome Storeで選択した時に表示される画像</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"5-chromeウェブストアに公開する\" class=\"fragment\"></span><a href=\"#5-chrome%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B9%E3%83%88%E3%82%A2%E3%81%AB%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>5. Chromeウェブストアに公開する</h2>\n\n<ul>\n<li>雛形生成時バージョンが0.0.0になっており、バージョンが低すぎて公開できない状態なので、<code>manifest.json</code>と<code>package.json</code>のバージョン指定を0.0.1にあげます</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">manifest.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n  </span><span class=\"s2\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0.0.1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">&lt;-</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">0</span><span class=\"err\">から</span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">1</span><span class=\"err\">にあげる</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n  </span><span class=\"s2\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0.0.1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">&lt;-</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">0</span><span class=\"err\">から</span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">1</span><span class=\"err\">にあげる</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>下記コマンドで公開用のzipファイルを作成します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run build:chrome\n</pre></div></div>\n\n<ul>\n<li><p><a href=\"https://chrome.google.com/webstore/category/extensions\" rel=\"nofollow noopener\" target=\"_blank\">Chromeウェブストア</a>のデベロッパーダッシュボードを開きます。Chromeアカウントでログインします<br>\n<a href=\"https://camo.qiitausercontent.com/d0db218423075317e350940d46d6510353fc81bd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65646234386163392d303138312d316437382d633761642d6130383237313261663031632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d0db218423075317e350940d46d6510353fc81bd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65646234386163392d303138312d316437382d633761642d6130383237313261663031632e706e67\" alt=\"アプリ登録_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/edb48ac9-0181-1d78-c7ad-a082712af01c.png\"></a></p></li>\n<li><p>ダッシュボードで<code>新しいアイテムを追加する</code>を選択します<br>\n<a href=\"https://camo.qiitausercontent.com/70b8f467a4819f7fd2251cf96abf3749b7626eeb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37383761336132352d326539332d363138362d313765642d3662313962626233626162352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/70b8f467a4819f7fd2251cf96abf3749b7626eeb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37383761336132352d326539332d363138362d313765642d3662313962626233626162352e706e67\" alt=\"アプリ登録_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/787a3a25-2e93-6186-17ed-6b19bbb3bab5.png\"></a></p></li>\n<li><p><code>ファイルを追加</code>で作成したzipファイル(プロジェクトルート/packages配下にあります)を選択後、<code>アップロード</code>を選択します<br>\n<a href=\"https://camo.qiitausercontent.com/2bc72004e70eb79c898506904f452d396754f39f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32323362343632342d643839322d336562382d356561382d3733633461616632623562382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2bc72004e70eb79c898506904f452d396754f39f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32323362343632342d643839322d336562382d356561382d3733633461616632623562382e706e67\" alt=\"アプリ登録_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/223b4624-d892-3eb8-5ea8-73c4aaf2b5b8.png\"></a></p></li>\n<li><p>説明、アイコン、宣伝用画像、カテゴリを入力して<code>変更を公開</code>をクリックします<br>\n<a href=\"https://camo.qiitausercontent.com/efa7c9ab0ced7326af8c7cb2d03fe9c2282e7f11/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323466303335352d666537622d373931382d326437352d3039633333636365356530302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/efa7c9ab0ced7326af8c7cb2d03fe9c2282e7f11/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323466303335352d666537622d373931382d326437352d3039633333636365356530302e706e67\" alt=\"登録_5.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/724f0355-fe7b-7918-2d75-09c33cce5e00.png\"></a></p></li>\n<li><p>これで公開作業は完了です。しばらくするとChromeウェブストアに公開されます</p></li>\n</ul>\n\n<h2>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h2>\n\n<p>今回は<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使って、TypeScriptでChrome Extensionを作成、公開する手順をまとめました。<br>\n最初はTypeScriptでChrome Extensionを作るのは、ビルドの設定など色々めんどくさそうだぁと思っていましたが、<br>\n<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使うことで、簡単に作成から公開まで実現できました。<br>\nブラウザでのちょっとした作業を効率化するのにChrome Extentionは非常に強力なツールなので、今後なにかアイディアがあればまた作ってみたいと思います。</p>\n","body":"Githubで草を生やす活動は楽しいですね!\n増えてきて芝みたいになると達成感があって、モチベーションも上がります。\nところで、この前の10/30に草がハロウィン仕様になっていたのを見て、\n草を自分の好みの色を変更できればもっと楽しくなるのでは?と思い\n[草の色が変更できる（ついでにお絵描きもできる）Chrome Extension](https://chrome.google.com/webstore/detail/github-contributions-pain/bdibnecenojddgmjplnfehpjdmkiddok?hl=ja)を作りました。\n**その時に[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使って、TypeScriptで簡単にChrome Extensionが作れたので、アプリ作成から公開までの手順をまとめます。**\n\n## 1. プロジェクトの雛形を生成する\nyomanと[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)で簡単に雛形が作れるのでコレらを使っていきます。\n\n* `yoman`と`generator-chrome-extension-kickstart-typescript`をグローバルインストールします\n\n```\n$ npm install -g yo generator-chrome-extension-kickstart-typescript \n```\n* プロジェクトのルートフォルダを作成後、ルートフォルダに移動して`yo`コマンドで雛形を生成します\n\n```\n$ mkdir project\n$ cd project\n$ yo chrome-extension-kickstart-typescript \n```\n\n* いくつか質問されるので適当に答えます\n    * **What would you like to call this extension?**\n        * プロジェクト名を入力します。デフォルトはプロジェクトのフォルダ名\n    * **And how would you call it if you only had 12 characters (short_name)?**\n        * プロジェクトの略称を12文字以内で入力します\n    * **How would you like to describe this extension?**\n        * プロジェクト概要を入力します\n    * **Would you like to use UI Action?**\n        * 作りたいUI Actionに応じて、`No`,`Browser`,`Page`のいずれかを選択します\n            * `No` ・・・ UI Actionを使わない場合\n            * `Browser` ・・・ ツールバーの右にアイコンが常駐するタイプのChrome拡張を作成する場合\n            * `Page` ・・・ 特定のWebサイト観覧時のみにアドレスバー右にアイコンが表示されるタイプのChrome拡張を作成する場合\n    * **Would you like to override a chrome page?**\n        * Chromeの内部ページを書き換えるかどうかで、`No`,`Bookmarks Page`,`History Page`,`Newtab Page`のいずれかを選択します\n    * **Would you like more UI Features?**\n        * 作りたいUIを複数選択します\n            * `Options Page` ・・・ オプション画面を作りたい場合\n            * `Devtools Page` ・・・ 開発者ツールを拡張したい場合\n            * `Content Scripts` ・・・ Webで表示している画面にJavaScriptを差し込んで何か処理をしたい場合\n            * `Omnibox` ・・・ アドレスバーを拡張したい時に選択\n    * **Would you like to use permissions?**\n        * 使用するパーミッションを複数選択します\n    * **Would you like to install promo images for the Chrome Web Store?**\n        * Chromeストアで使う宣伝用画像を自動で生成するかを選択します\n\n\n※自分は下記のように答えました\n**What would you like to call this extension?** => github-contributions-paint\n**And how would you call it if you only had 12 characters (short_name)?** =>  github-paint\n**How would you like to describe this extension?** =>  You can paint github contributions!\n**Would you like to use UI Action?** => Browser\n**Would you like to override a chrome page?** =>  No\n**Would you like more UI Features?** =>  Content Scripts\n**Would you like to use permissions?** =>  Tabs\n**Would you like to install promo images for the Chrome Web Store?** =>  Yes\n\n* すると雛形が生成されます\n\n```:生成された雛形のフォルダ構成\ngithub-contributions-paint\n├── README.md\n├── app\n│   ├── images       　　　    　・・・Chromeウェブストア公開時に必要なアイコン格納フォルダ\n│   │   ├── icon-128.png\n│   │   ├── icon-16.png\n│   │   ├── icon-19.png\n│   │   └── icon-38.png\n│   ├── manifest.json          ・・・Chrome拡張の設定を定義するファイル\n│   ├── pages                  ・・・HTMLファイル格納フォルダ\n│   │   └── popup.html         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── scripts                ・・・TSファイル格納フォルダ\n│   │   ├── background.ts      ・・・バックグランド処理を記述するファイル\n│   │   └── popup.ts           ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── styles                 ・・・CSSファイル格納フォルダ\n│   │   └── popup.scss         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── _locales\n│   │   └── en\n│   │       └── messages.json ・・・アプリの設定ファイル\n│   └── fonts\n├── promo                     ・・・Chromeウェブストア公開時に必要な宣伝用画像の格納フォルダ\n│   ├── Chrome-Webstore-Icon_128x128.png\n│   ├── Promo-Image-Large_920x680.png\n│   ├── Promo-Image-Marquee_1400x560.png\n│   ├── Promo-Image-Small_440x280.png\n│   ├── Screenshot_1280x800.png\n│   └── Screenshot_640x400.png\n├── dist\n├── gulpfile.babel.js\n├── node_modules\n├── package-lock.json\n├── package.json\n├── tasks\n├── tsconfig.json\n└── tslint.json\n\n```\n\n* 最後にTypeScriptをグローバルインストールしていない場合は、グローバルインストールまたはプロジェクトにインストールします\n\n```\n$ npm install typescript --save-dev\n```\n\n==2018/11/24 追記(ここから)==\n\n* このまま次手順にいくと警告がでるのでそれを防ぐためにgulpのバージョンを下げます。\n\n```\n$ npm install gulp@3.9.0 --save-dev\n```\n\n<small>※関連する[issue](https://github.com/gulpjs/gulp/issues/1631)、[stackoverflow](https://stackoverflow.com/questions/48568942/failed-to-load-external-module-babel-register-while-gulp)</small>\n\n==2018/11/24 追記(ここまで)==\n## 2. 作ったChrome Extensionを動かしてみる\n雛形を作成したら早速動かすことができます\n\n* ビルドコマンドを実行します\n\n```\n$ npm run dev:chrome\n```\n\n* Chromeで`chrome://extensions`を開いて`パッケージ化されていない拡張機能を読み込む`ボタンをクリック\n![手順_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5a549a45-8ec4-8955-b733-875549f8ad31.png)\n\n* プロジェクトルート/dist配下の`chrome`フォルダを選択\n![操作_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f91a166e-6e2e-3f37-710e-ee7520c93ec2.png)\n\n* するとプロジェクトが[Chrome Extension管理画面](chrome://extensions/)に追加されて、ブラウザ右上にアイコンが表示されます\n![動作確認1_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/61b2e113-e520-7ef8-c47e-426be93aa84b.png)\n\n\n* アイコンをクリックして動作検証ができます\n![動作確認_11.png](https://qiita-image-store.s3.amazonaws.com/0/49915/3ff11e73-81b3-cd5a-8e70-9a754a6a9965.png)\n\n\n## 3. 開発中にChrome Extensionの動作確認する\n雛形の動作検証ができたらTypeScriptファイルを編集して処理を追加していきます。\n`npm run dev:chrome`を実行した後、下記手順繰り返すことで、ソースコードを修正しながら随時動作検証ができます。\n\n* 資産（TypeScriptやHTML,CSS）を修正する（勝手にビルドが走ります）\n* 最新のビルド資産を取り込むため[Chrome Extension管理画面](chrome://extensions/)でリロードをクリックします\n![開発手順_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5f9651c6-737f-d6db-80bf-44a7166b2005.png)\n* Chrome Extensionの動作確認をする\n\n## 4. アイコンと宣伝用画像を作る\nアプリを公開する前に、アイコンと宣伝用画像を作成し、雛形生成時のデフォルト資産と差し替えます。\nデザイナーさんなら苦労しないでしょうが、自分はこれが一番大変でした。\n3つのアイコンと3つの宣伝用画像が必要です。\n\n### アイコン\n* 128x128\n    * 必須。インストール時やChromeウェブストアで表示する用\n* 48x48\n    * 拡張機能の管理ページで表示する用\n* 16x16\n    * ブラウザ右上に表示する用\n  \n### 宣伝用画像\n* 440x280\n    * 必須\n* 920x680\n    * 大きめの画像\n* 1400x560\n    * ChromeExtensionをChrome Storeで選択した時に表示される画像\n\n## 5. Chromeウェブストアに公開する\n* 雛形生成時バージョンが0.0.0になっており、バージョンが低すぎて公開できない状態なので、`manifest.json`と`package.json`のバージョン指定を0.0.1にあげます\n\n```json:manifest.json\n{\n  ・・・\n  \"version\": \"0.0.1\", <- 0.0.0から0.0.1にあげる\n  ・・・\n}\n```\n\n```json:package.json\n{\n  ・・・\n  \"version\": \"0.0.1\", <- 0.0.0から0.0.1にあげる\n  ・・・\n}\n```\n\n* 下記コマンドで公開用のzipファイルを作成します\n\n```\n$ npm run build:chrome\n```\n\n* [Chromeウェブストア](https://chrome.google.com/webstore/category/extensions)のデベロッパーダッシュボードを開きます。Chromeアカウントでログインします\n![アプリ登録_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/edb48ac9-0181-1d78-c7ad-a082712af01c.png)\n\n* ダッシュボードで`新しいアイテムを追加する`を選択します\n![アプリ登録_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/787a3a25-2e93-6186-17ed-6b19bbb3bab5.png)\n\n* `ファイルを追加`で作成したzipファイル(プロジェクトルート/packages配下にあります)を選択後、`アップロード`を選択します\n![アプリ登録_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/223b4624-d892-3eb8-5ea8-73c4aaf2b5b8.png)\n\n* 説明、アイコン、宣伝用画像、カテゴリを入力して`変更を公開`をクリックします\n![登録_5.png](https://qiita-image-store.s3.amazonaws.com/0/49915/724f0355-fe7b-7918-2d75-09c33cce5e00.png)\n\n* これで公開作業は完了です。しばらくするとChromeウェブストアに公開されます\n\n\n## 最後に\n今回は[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使って、TypeScriptでChrome Extensionを作成、公開する手順をまとめました。\n最初はTypeScriptでChrome Extensionを作るのは、ビルドの設定など色々めんどくさそうだぁと思っていましたが、\n[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使うことで、簡単に作成から公開まで実現できました。\nブラウザでのちょっとした作業を効率化するのにChrome Extentionは非常に強力なツールなので、今後なにかアイディアがあればまた作ってみたいと思います。\n\n","comments_count":5,"created_at":"2017-12-20T02:36:27+09:00","likes_count":25,"reactions_count":0},"next":{"fields":{"slug":"/41febdc6-bf5d-50b8-a695-3c017b8f766a/","title":"10分でできる！ @ngrx/storeチュートリアル with @ngrx/schematics","date":"2018-07-30T18:01:02+09:00","excerpt":"なにこれAngularで状態管理する方法をざっくり把握するためのチュートリアルです。@ngrx/storeベースの簡単なアプリ（数をカウントするアプリ）を作成します。作るだけなら10分程度で出来上がるので、とりあえず手を動かしてngrxを最...","tags":["angular","angular-cli","ngrx","Angular6","Qiita"]},"id":"41febdc6-bf5d-50b8-a695-3c017b8f766a","title":"10分でできる！ @ngrx/storeチュートリアル with @ngrx/schematics","rendered_body":"\n<h2>\n<span id=\"なにこれ\" class=\"fragment\"></span><a href=\"#%E3%81%AA%E3%81%AB%E3%81%93%E3%82%8C\"><i class=\"fa fa-link\"></i></a>なにこれ</h2>\n\n<p>Angularで状態管理する方法をざっくり把握するためのチュートリアルです。<a href=\"http://ngrx.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/store</a>ベースの簡単なアプリ（数をカウントするアプリ）を作成します。作るだけなら10分程度で出来上がるので、とりあえず手を動かしてngrxを最低限を把握したい人向けです。ソースコードも<a href=\"https://github.com/Takumon/ngrx-tutorial/tree/with-ngrx\" rel=\"nofollow noopener\" target=\"_blank\">GitHub</a>に置いているので参考にしてください。<br>\nngrxを使うとボイラープレートが非常に多くなりますが、今回のチュートリアルでは<a href=\"https://github.com/ngrx/platform/tree/master/docs/schematics\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/schematics</a> を使い、ボイラープレートを自動生成することで極力手間を省いています。</p>\n\n<h2>\n<span id=\"アプリの完成イメージ\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E5%AE%8C%E6%88%90%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8\"><i class=\"fa fa-link\"></i></a>アプリの完成イメージ</h2>\n\n<ul>\n<li>\n<code>+</code>ボタンをクリックするとCountが+1される</li>\n<li>\n<code>-</code> ボタンをクリックするとCountが- 1される\n<a href=\"https://camo.qiitausercontent.com/b480b8a4f23b0ad498a61f36f69be9fae9cef250/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f38653666363435652d613733342d646238642d656336622d3134346330666465653162302e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b480b8a4f23b0ad498a61f36f69be9fae9cef250/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f38653666363435652d613733342d646238642d656336622d3134346330666465653162302e676966\" alt=\"counterapp.gif\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/8e6f645e-a734-db8d-ec6b-144c0fdee1b0.gif\"></a>\n</li>\n</ul>\n\n<h2>\n<span id=\"やることやらないこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8%E3%82%84%E3%82%89%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やること/やらないこと</h2>\n\n<ul>\n<li>やる\n\n<ul>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/store/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/store</a>の使い方\n\n<ul>\n<li>Storeの作り方</li>\n<li>Stateの作り方</li>\n<li>Reducerの作り方</li>\n<li>Actionsの作り方</li>\n</ul>\n</li>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/schematics/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/schematics</a>の使い方\n\n<ul>\n<li>オプションなどを使い極力手間を減らす方法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>やらない （下記を理解するには<a href=\"#%E5%8F%82%E8%80%83\">参考</a>のQiitaの記事を見てください。）\n\n<ul>\n<li>状態管理の説明</li>\n<li>Reduxの説明</li>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/router-store/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/router-store</a>の使い方</li>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/entity/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/entity</a>の使い方</li>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/effects/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/effect</a>の使い方<br>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"チュートリアル概要\" class=\"fragment\"></span><a href=\"#%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>チュートリアル概要</h2>\n\n<p>段階を踏んで、ステップごとに動作確認しながら作成していきます。<br>\n各ステップ終了時点のソースコードはGitHubに用意しています。参考にしてください。<br>\n大部分はSchematicsを使ってngコマンドでボイラープレートを自動生成し、メイン部分のみ実装という感じです。</p>\n\n<ol>\n<li>Angularアプリを生成（1分）  ※<a href=\"https://github.com/Takumon/ngrx-tutorial/tree/generated-with-angualr-cli\" rel=\"nofollow noopener\" target=\"_blank\">終了時点のソース</a>\n</li>\n<li>ngrxを使わずにカウント処理実装（2分）※<a href=\"https://github.com/Takumon/ngrx-tutorial/tree/no-ngrx\" rel=\"nofollow noopener\" target=\"_blank\">終了時点のソース</a>\n</li>\n<li>ngrxインストール、初期設定（2分） ※<a href=\"https://github.com/Takumon/ngrx-tutorial/tree/after-ngrx-setting\" rel=\"nofollow noopener\" target=\"_blank\">終了時点のソース</a>\n</li>\n<li>ngrxを使ってカウント処理実装（5分） ※<a href=\"https://github.com/Takumon/ngrx-tutorial/tree/with-ngrx\" rel=\"nofollow noopener\" target=\"_blank\">終了時点のソース</a>\n</li>\n</ol>\n\n<h2>\n<span id=\"前提条件\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6\"><i class=\"fa fa-link\"></i></a>前提条件</h2>\n\n<ul>\n<li>\n<a href=\"https://nodejs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Node.js</a>インストール済み</li>\n<li>\n<a href=\"https://cli.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular CLI</a>グローバルインストール済み</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> npm i <span class=\"nt\">-g</span> @angular/cli\n</pre></div></div>\n\n<ul>\n<li>\n<a href=\"https://cli.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/schematics</a>グローバルインストール済み</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> npm i <span class=\"nt\">-g</span> @ngrx/schematics\n</pre></div></div>\n\n<h2>\n<span id=\"1-angularアプリを生成1分\" class=\"fragment\"></span><a href=\"#1-angular%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E7%94%9F%E6%88%901%E5%88%86\"><i class=\"fa fa-link\"></i></a>1. Angularアプリを生成（1分）</h2>\n\n<ul>\n<li>ng newコマンドを実行します。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng new ngrx-tutorial\n</pre></div></div>\n\n<ul>\n<li>生成されたアプリ配下に移動し、一旦Webアプリを立ち上げてみます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> <span class=\"nb\">cd </span>ngrx-tutorial\n<span class=\"gp\">$</span> ng serve <span class=\"nt\">-o</span>\n</pre></div></div>\n\n<ul>\n<li>ブラウザが起動し下記のような画面が表示されたら成功です。\n<a href=\"https://camo.qiitausercontent.com/f46653279a0efbe1432919aa808f440fc6eb1ede/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35633139633366302d313034612d336566322d613333642d3331356330663061336639662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/f46653279a0efbe1432919aa808f440fc6eb1ede/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35633139633366302d313034612d336566322d613333642d3331356330663061336639662e706e67\" alt=\"スクリーンショット 2018-07-30 1.03.59.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5c19c3f0-104a-3ef2-a33d-315c0f0a3f9f.png\"></a>\n</li>\n</ul>\n\n<h2>\n<span id=\"2-ngrxを使わずにカウント処理実装2分\" class=\"fragment\"></span><a href=\"#2-ngrx%E3%82%92%E4%BD%BF%E3%82%8F%E3%81%9A%E3%81%AB%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E5%87%A6%E7%90%86%E5%AE%9F%E8%A3%852%E5%88%86\"><i class=\"fa fa-link\"></i></a>2. ngrxを使わずにカウント処理実装（2分）</h2>\n\n<p>カウント処理の資産は全て<code>src/app/counter</code>フォルダ配下に作成します。<br>\nまずはコマンドラインからボイラープレートを作成し、その後カウント処理を実装します。</p>\n\n<h3>\n<span id=\"ボイラープレート作成\" class=\"fragment\"></span><a href=\"#%E3%83%9C%E3%82%A4%E3%83%A9%E3%83%BC%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>ボイラープレート作成</h3>\n\n<ul>\n<li>カウント処理関連資産をまとめるモジュールを作成します。\n\n<ul>\n<li>このモジュールをアプリ全体のモジュールに登録するため<code>--module</code>オプションを指定します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g module counter <span class=\"nt\">--module</span><span class=\"o\">=</span>app.module.ts\n</pre></div></div>\n\n<ul>\n<li>カウント処理用のコンポーネントを作成します。\n\n<ul>\n<li>上記で作成したモジュールにコンポーネントを登録するため<code>--module</code>オプションを指定します。</li>\n<li>最終的にアプリ全体のモジュールにコンポーネントを登録するため<code>--export</code>オプションを指定します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g component counter <span class=\"nt\">--module</span><span class=\"o\">=</span>counter/counter.module.ts <span class=\"nt\">--export</span>\n</pre></div></div>\n\n<ul>\n<li>\n<code>app.component.html</code>修正し、作成したカウント処理用のコンポーネントを呼び出すようにします。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.html</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;app-counter&gt;&lt;/app-counter&gt;</span>\n</pre></div>\n</div>\n\n<ul>\n<li>一旦ここまででWebアプリを立ち上げてみます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng serve <span class=\"nt\">-o</span>\n</pre></div></div>\n\n<ul>\n<li>ブラウザが起動し、下記画面が表示されます。開発者ツールでエラーがなければ成功です。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/6ed3cc13498f56621ca94113a6eacdc34949e17f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37373261373530312d333461372d336566312d363636362d6431336537393338326365362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/6ed3cc13498f56621ca94113a6eacdc34949e17f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37373261373530312d333461372d336566312d363636362d6431336537393338326365362e706e67\" alt=\"スクリーンショット 2018-07-30 1.06.30.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/772a7501-34a7-3ef1-6666-d13e79382ce6.png\"></a></p>\n\n<h3>\n<span id=\"処理実装\" class=\"fragment\"></span><a href=\"#%E5%87%A6%E7%90%86%E5%AE%9F%E8%A3%85\"><i class=\"fa fa-link\"></i></a>処理実装</h3>\n\n<ul>\n<li>カウント用コンポーネントで実際の処理を記述します。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/counter.component.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span><span class=\"p\">,</span> <span class=\"nx\">OnInit</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-counter'</span><span class=\"p\">,</span>\n  <span class=\"na\">templateUrl</span><span class=\"p\">:</span> <span class=\"s1\">'./counter.component.html'</span><span class=\"p\">,</span>\n  <span class=\"na\">styleUrls</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'./counter.component.css'</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">CounterComponent</span> <span class=\"kr\">implements</span> <span class=\"nx\">OnInit</span> <span class=\"p\">{</span>\n  <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n  <span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">increment</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">decrement</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">count</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/counter.component.html</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;button</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">increment</span><span class=\"err\">()\"</span><span class=\"nt\">&gt;</span>+<span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">decrement</span><span class=\"err\">()\"</span><span class=\"nt\">&gt;</span>-<span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"nt\">&lt;div&gt;</span>Count: {{count}}<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n</div>\n\n<ul>\n<li>ここまででWebアプリを立ち上げてみます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng serve <span class=\"nt\">-o</span>\n</pre></div></div>\n\n<ul>\n<li>ブラウザが起動し下記画面が表示されます。<code>+</code>,<code>-</code>ボタンをクリックすると数字が増えたり減ったりした、開発者ツールでもエラーがなければ成功です。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" alt=\"スクリーンショット 2018-07-30 0.59.12.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png\"></a></p>\n\n<h2>\n<span id=\"3-ngrxインストール初期設定2分\" class=\"fragment\"></span><a href=\"#3-ngrx%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A2%E5%88%86\"><i class=\"fa fa-link\"></i></a>3. ngrxインストール、初期設定（2分）</h2>\n\n<p>@ngrx/storeをアプリに導入し、初期設定をします。</p>\n\n<ul>\n<li>下記ライブラリをインストールします。\n\n<ul>\n<li>\n<code>@ngrx/schematics</code>\n\n<ul>\n<li>Angualr CLIでngrxの雛形を作るためのライブラリ</li>\n</ul>\n</li>\n<li>\n<code>@ngrx/store</code>\n\n<ul>\n<li>ngrxでStore,Reducer,Actionを使うためのライブラリ</li>\n</ul>\n</li>\n<li>\n<code>@ngrx/store-devtools</code>\n\n<ul>\n<li>強力なデバッカを使えるようにするためのライブラリ</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> npm i <span class=\"nt\">-D</span> @ngrx/schematics\n<span class=\"gp\">$</span> npm i <span class=\"nt\">-s</span> @ngrx/store\n<span class=\"gp\">$</span> npm i <span class=\"nt\">-s</span> @ngrx/store-devtools\n</pre></div></div>\n\n<p>*<code>@ngrx/schematics</code>をデフォルトのSchematicsに追加します（コマンドラインでngrxのボイラープレート生成時に<code>@ngrx/schematics</code>の指定を省略できるようにするためです。）</p>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng config cli.defaultCollection @ngrx/schematics\n</pre></div></div>\n\n<ul>\n<li>上記を実行すると、<code>angular.json</code>にこのような設定が追加されます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">angular.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\">  </span><span class=\"s2\">\"defaultProject\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ngrx-tutorial\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"cli\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"defaultCollection\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"@ngrx/schematics\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>ルートのStoreを作成します。\n\n<ul>\n<li>\n<code>src/app/state</code>配下に生成したいので<code>--statePath</code>オプションを指定します。</li>\n<li>アプリ全体のモジュールに登録したいので<code>--module</code>オプションを指定します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g store state <span class=\"nt\">--statePath</span> state <span class=\"nt\">--root</span> <span class=\"nt\">--module</span> app.module.ts\n</pre></div></div>\n\n<ul>\n<li>上記コマンドで更新した<code>src/app/app.module.ts</code>で<code>environment</code>のimport文のパスでエラーが出ている場合は修正してください。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">app/src/app.module.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"gd\">- import { environment } from '../../environments/environment';\n</span><span class=\"gi\">+ import { environment } from '../environments/environment';\n</span></pre></div>\n</div>\n\n<ul>\n<li>ここまででWebアプリを立ち上げてみます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng serve <span class=\"nt\">-o</span>\n</pre></div></div>\n\n<ul>\n<li>手順2の動作確認時と同様の挙動になります、開発者ツールでもエラーがなければ成功です。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" alt=\"スクリーンショット 2018-07-30 0.59.12.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png\"></a></p>\n\n<h2>\n<span id=\"4-ngrxを使ってカウント処理実装5分\" class=\"fragment\"></span><a href=\"#4-ngrx%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E5%87%A6%E7%90%86%E5%AE%9F%E8%A3%855%E5%88%86\"><i class=\"fa fa-link\"></i></a>4. ngrxを使ってカウント処理実装（5分）</h2>\n\n<p>ここからは実際にStore、Reducer、Actionを作成し、カウント処理の値をStoreに移行します。<br>\nここで作成する資産はカウンター処理に閉じたものなので、<code>src/app/counter/state</code>配下に作成します。<br>\nまた<code>@ngrx/schemetics</code>のデフォルトではReducer、Actionなどの資産が、役割ごとにフォルダ分けされてしまいますが、１フォルダに集約したほうがソースが修正しやすいので、今回は全て<code>src/app/counter/state</code>の直下に作成します。</p>\n\n<h3>\n<span id=\"ボイラープレート生成\" class=\"fragment\"></span><a href=\"#%E3%83%9C%E3%82%A4%E3%83%A9%E3%83%BC%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E7%94%9F%E6%88%90\"><i class=\"fa fa-link\"></i></a>ボイラープレート生成</h3>\n\n<ul>\n<li>Store\n\n<ul>\n<li>\n<code>src/app/counter/state</code>直下に作成するため<code>--statePath</code>オプションを指定します。</li>\n<li>カウント処理関連モジュールに登録したいので<code>--module</code>オプションを指定します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g store counter/counter <span class=\"nt\">--statePath</span> state <span class=\"nt\">--module</span> counter.module.ts\n</pre></div></div>\n\n<ul>\n<li>Reducer\n\n<ul>\n<li>上記で作成したStoreに本Reducerを登録したいため<code>--reducers</code>オプションを指定します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g reducer counter/state/counter <span class=\"nt\">--reducers</span> index.ts\n</pre></div></div>\n\n<ul>\n<li>Action\n\n<ul>\n<li>\n<code>src/app/counter/state</code>直下に作成するため<code>--flat</code>オプションを登録します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g action counter/state/counter <span class=\"nt\">--flat</span>\n</pre></div></div>\n\n<p>※この時点ではコンパイルエラーがでますので、動作確認はできません。そのまま次に進みます。</p>\n\n<h2>\n<span id=\"処理実装-1\" class=\"fragment\"></span><a href=\"#%E5%87%A6%E7%90%86%E5%AE%9F%E8%A3%85-1\"><i class=\"fa fa-link\"></i></a>処理実装</h2>\n\n<p>依存関係の都合でボイラープレートとは逆順で実装していきます。</p>\n\n<h3>\n<span id=\"action\" class=\"fragment\"></span><a href=\"#action\"><i class=\"fa fa-link\"></i></a>Action</h3>\n\n<p>ボイラープレート生成時から下記のように修正します。<br>\n※コメントはコードの説明なので無視して実装してください。</p>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/state/counter.actions.ts</span></div>\n<div class=\"highlight\"><pre>import { Action } from '@ngrx/store';\n\nexport enum CounterActionTypes {\n// Actionごとに型を定義します。\n<span class=\"gd\">-  LoadCounters = '[Counter] Load Counters'\n</span><span class=\"gi\">+  CountIncrement = '[Counter] Increment Count',\n+  CountDecrement = '[Counter] Decrement Count'\n</span>}\n\n// Actionごとに@ngrx.storeのActionをインプリしたクラスを作成します。\n// 複雑な処理をする場合はコンストラクタ引数をとりますが、\n// 本チュートリアルでは簡単のため引数なしにしています。\n<span class=\"gd\">- export class Counter implements Action {\n-   readonly type = CounterActionTypes.LoadCounters;\n- }\n</span><span class=\"gi\">+ export class CountIncrement implements Action {\n+   readonly type = CounterActionTypes.CountIncrement;\n+   public constructor() {}\n+ }\n+ \n+ export class CountDecrement implements Action {\n+   readonly type = CounterActionTypes.CountDecrement;\n+   public constructor() {}\n+ }\n</span>\n\n// 上記で定義したActionクラスを集約した型を定義します。Reducerで使うためです。\n<span class=\"gd\">- export type CounterActions = LoadCounters;\n</span><span class=\"gi\">+ export type CounterActions = CountIncrement | CountDecrement;\n</span></pre></div>\n</div>\n\n<h2>\n<span id=\"reducer作成\" class=\"fragment\"></span><a href=\"#reducer%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>Reducer作成</h2>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/state/counter.reducer.ts</span></div>\n<div class=\"highlight\"><pre>import { Action } from '@ngrx/store';\n<span class=\"gi\">+ import { CounterActionTypes } from './counter.actions';\n</span>\n\nexport interface State {\n// カウンター処理に置けるStateを定義します。\n<span class=\"gi\">+   count: number;\n</span>}\n\nexport const initialState: State = {\n// カウンター処理に置けるStateの初期値を定義します。\n<span class=\"gi\">+   count: 0\n</span>};\n\n\nexport function reducer(state = initialState, action: Action): State {\n  switch (action.type) {\n// 引数として受け取ったActionの型に応じて処理を振り分けます\n// ここではカウンター処理に関連するアクションのみ拾って、他はStateをそのまま返します。\n<span class=\"gi\">+     case CounterActionTypes.CountIncrement:\n</span>// Stateを変更する場合は、Stateがイミュータブルになるように元のStateには変更を加えず\n// Object.assingで新規オブジェクトを作るようにします。\n<span class=\"gi\">+       return Object.assign({}, { ...state, count : state.count + 1 });\n+     case CounterActionTypes.CountDecrement:\n+       return Object.assign({}, { ...state, count : state.count - 1 });\n</span>    default:\n      return state;\n  }\n}\n\n// コンポーネントでStateのCountを取得するための関数を定義します。\n// Storeの方にも定義しますが、ここでは本ファイルで定義している\n// Stateのプロパティに関連する処理のみ定義します。\n<span class=\"gi\">+ export const getCount = (state: State) =&gt; state.count;\n</span></pre></div>\n</div>\n\n<ul>\n<li>Store</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/state/index.ts</span></div>\n<div class=\"highlight\"><pre>import {\n  ActionReducerMap,\n  createFeatureSelector,\n  createSelector,\n  MetaReducer\n} from '@ngrx/store';\n// ng gコマンド生成時は相対パスがずれている可能性があるため\n// その場合は修正する\n<span class=\"gd\">- import { environment } from '../../environments/environment';\n</span><span class=\"gi\">+ import { environment } from '../../../environments/environment';\n</span>import * as fromCounter from './counter.reducer';\n\nexport interface State {\n\n  counter: fromCounter.State;\n}\n\nexport const reducers: ActionReducerMap&lt;State&gt; = {\n\n  counter: fromCounter.reducer,\n};\n\n\nexport const metaReducers: MetaReducer&lt;State&gt;[] = !environment.production ? [] : [];\n\n// コンポーネントでStateのプロパティを取得するための関数を定義します。\n// 複数コンポーネントで使う度に定義するのは冗長なのでココで共通的に定義します。\n<span class=\"gi\">+ export const getCounterFeatureState = createFeatureSelector&lt;State&gt;('counter');\n+ export const getCounter = createSelector(getCounterFeatureState, s =&gt; s.counter);\n+ export const getCount = createSelector(getCounter, fromCounter.getCount);\n</span></pre></div>\n</div>\n\n<ul>\n<li>Component</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/counter.component.ts</span></div>\n<div class=\"highlight\"><pre>import { Component, OnInit } from '@angular/core';\n<span class=\"gi\">+ import { Observable } from 'rxjs';\n+ import { Store } from '@ngrx/store';\n</span>\n<span class=\"gi\">+ import * as CounterReducer from './state/counter.reducer';\n+ import * as CounterActions from './state/counter.actions';\n+ import { getCount } from './state';\n</span>\n<span class=\"gu\">@Component({\n</span>  selector: 'app-counter',\n  templateUrl: './counter.component.html',\n  styleUrls: ['./counter.component.css']\n})\nexport class CounterComponent implements OnInit {\n// Storeでの値変更を順次受け付けれるように型をObservableに変更します\n<span class=\"gd\">-   count = 0;\n</span><span class=\"gi\">+   count$: Observable&lt;number&gt;;\n</span>\n// Storeをインジェクションします\n<span class=\"gd\">-   constructor() { }\n</span><span class=\"gi\">+   constructor(private store: Store&lt;CounterReducer.State&gt;) {\n</span>// Storeからカウンタを取得します\n<span class=\"gi\">+     this.count$ = store.select(getCount);\n+  }\n</span>\n  ngOnInit() {\n  }\n\n  increment() {\n// インクリメントの実処理はカウンタのReducerに任せるので\n// ここではActionをdispatchするだけです。\n<span class=\"gd\">-     this.count = this.count + 1;\n</span><span class=\"gi\">+     this.store.dispatch(new CounterActions.CountIncrement());\n</span>  }\n\n  decrement() {\n<span class=\"gd\">-     this.count = this.count - 1;\n</span><span class=\"gi\">+     this.store.dispatch(new CounterActions.CountDecrement());\n</span>  }\n\n}\n</pre></div>\n</div>\n\n<ul>\n<li>ConponentのHTML</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/counter.component.html</span></div>\n<div class=\"highlight\"><pre>&lt;button (click)=\"increment()\"&gt;+&lt;/button&gt;\n&lt;button (click)=\"decrement()\"&gt;-&lt;/button&gt;\n&lt;!-- 変数名と型が変わったのでHTMLも若干修正します --&gt;\n<span class=\"gd\">- &lt;div&gt;Count: {{count }}&lt;/div&gt;\n</span><span class=\"gi\">+ &lt;div&gt;Count: {{count$ | async }}&lt;/div&gt;\n</span></pre></div>\n</div>\n\n<ul>\n<li>Webアプリを立ち上げてみます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng serve <span class=\"nt\">-o</span>\n</pre></div></div>\n\n<ul>\n<li>開発者ツールなどで全くエラーが出ていなければ成功です。見た目は変わっていませんが、Countは<code>@ngrx/store</code>で管理されるようになっています。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" alt=\"スクリーンショット 2018-07-30 0.59.12.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png\"></a></p>\n\n<h2>\n<span id=\"補足ストアとストア登録方法\" class=\"fragment\"></span><a href=\"#%E8%A3%9C%E8%B6%B3%E3%82%B9%E3%83%88%E3%82%A2%E3%81%A8%E3%82%B9%E3%83%88%E3%82%A2%E7%99%BB%E9%8C%B2%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>補足：ストアとストア登録方法</h2>\n\n<p>ストアとストア登録処理はボイラープレートで生成するのでココで改めて説明します。</p>\n\n<p><strong>まずはルートのストアです。</strong><br>\nストアは<code>src/app/state/index.ts</code>に作成されます。<br>\n中身を見るとわかりますが、実態はReducerを集約したActionReducerMapです。<br>\nReducerを新しく作成した時は、このマップにどんどん追加していきます。</p>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/state/index.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span>\n  <span class=\"nx\">ActionReducer</span><span class=\"p\">,</span>\n  <span class=\"nx\">ActionReducerMap</span><span class=\"p\">,</span>\n  <span class=\"nx\">createFeatureSelector</span><span class=\"p\">,</span>\n  <span class=\"nx\">createSelector</span><span class=\"p\">,</span>\n  <span class=\"nx\">MetaReducer</span>\n<span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@ngrx/store'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">environment</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../../environments/environment'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kr\">interface</span> <span class=\"nx\">State</span> <span class=\"p\">{</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">reducers</span><span class=\"p\">:</span> <span class=\"nx\">ActionReducerMap</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ココにReducerが追加されていきます。</span>\n  <span class=\"c1\">// 今回のチュートリアルではルートのストアに１つもReducerを定義していないので空っぽです。</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">metaReducers</span><span class=\"p\">:</span> <span class=\"nx\">MetaReducer</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"o\">&gt;</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"o\">!</span><span class=\"nx\">environment</span><span class=\"p\">.</span><span class=\"nx\">production</span> <span class=\"p\">?</span> <span class=\"p\">[]</span> <span class=\"p\">:</span> <span class=\"p\">[];</span>\n\n</pre></div>\n</div>\n\n<p>ストアをモジュールに登録するには下記のように<code>StoreModule.forRoot</code>を使います(ボイラープレートでやってくれます)</p>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/app.module.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"c1\">// ・・・</span>\n  <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"c1\">// ・・・</span>\n    <span class=\"nx\">StoreModule</span><span class=\"p\">.</span><span class=\"nx\">forRoot</span><span class=\"p\">(</span><span class=\"nx\">reducers</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">metaReducers</span> <span class=\"p\">}),</span>\n    <span class=\"o\">!</span><span class=\"nx\">environment</span><span class=\"p\">.</span><span class=\"nx\">production</span> <span class=\"p\">?</span> <span class=\"nx\">StoreDevtoolsModule</span><span class=\"p\">.</span><span class=\"nx\">instrument</span><span class=\"p\">()</span> <span class=\"p\">:</span> <span class=\"p\">[]</span>\n    <span class=\"c1\">// ・・・</span>\n  <span class=\"p\">],</span>\n  <span class=\"c1\">// ・・・</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppModule</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<p><strong>次にカウンタのストアに関してです。</strong><br>\nこちらもルートの場合とほぼ同じです。</p>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/state/index.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"c1\">// ・・・</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">reducers</span><span class=\"p\">:</span> <span class=\"nx\">ActionReducerMap</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// カウンタのReducerをマップに登録しています。</span>\n  <span class=\"na\">counter</span><span class=\"p\">:</span> <span class=\"nx\">fromCounter</span><span class=\"p\">.</span><span class=\"nx\">reducer</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">metaReducers</span><span class=\"p\">:</span> <span class=\"nx\">MetaReducer</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"o\">&gt;</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"o\">!</span><span class=\"nx\">environment</span><span class=\"p\">.</span><span class=\"nx\">production</span> <span class=\"p\">?</span> <span class=\"p\">[]</span> <span class=\"p\">:</span> <span class=\"p\">[];</span>\n<span class=\"c1\">// ・・・</span>\n</pre></div>\n</div>\n\n<p>ただ登録は<code>StoreModule.forFeature</code>を使います。<br>\nこのメソッドは、機能毎に状態管理する時に使うもので、ルートのストアに指定した名前で登録されます。使う時になったら遅延ロードしてくれる機能を持っています。</p>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/counter.module.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"c1\">// ・・・</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">fromCounter</span> <span class=\"k\">from</span> <span class=\"s1\">'./state'</span><span class=\"p\">;</span>\n<span class=\"c1\">// ・・・</span>\n<span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"c1\">// ・・・</span>\n    <span class=\"c1\">// アプリ全体のストアにcounterという名前で登録します</span>\n    <span class=\"nx\">StoreModule</span><span class=\"p\">.</span><span class=\"nx\">forFeature</span><span class=\"p\">(</span><span class=\"s1\">'counter'</span><span class=\"p\">,</span> <span class=\"nx\">fromCounter</span><span class=\"p\">.</span><span class=\"nx\">reducers</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">metaReducers</span><span class=\"p\">:</span> <span class=\"nx\">fromCounter</span><span class=\"p\">.</span><span class=\"nx\">metaReducers</span> <span class=\"p\">})</span>\n    <span class=\"c1\">// ・・・</span>\n  <span class=\"p\">],</span>\n  <span class=\"c1\">// ・・・</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">CounterModule</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>以上で<code>@ngrx/schematics</code>を使った<code>@ngrx/store</code>のチュートリアルは終了です。<br>\n<code>ngrx</code>ライブラリは他にも<code>@ngrx/router-store</code>、<code>@ngrx/entity</code>、<code>@ngrx/effect</code>があるので、<br>\n今回のアプリをベースに拡張し、理解を深めてみるのも良いかもしれません。</p>\n\n<p>AngularはVue.jsなどと比較するとボイラープレートが多くなってしまいます。<br>\nしかし、ソースコード自動生成機能が充実しているので、けっこう便利なフレームワークです！<br>\nあまり周りでAngular使ってる人がいなくて寂しいのですが、、、、皆さん是非Angular使いましょう！</p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<ul>\n<li>GitHub\n\n<ul>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/store/README.md#ngrxstore\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/store</a>\n\n<ul>\n<li>公式ページ。サンプルは少し古いですが、ドキュメントは充実しています。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/schematics/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/schematics</a>\n\n<ul>\n<li>各リンクに行くと、コマンドのオプションの説明などが記載されています。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Medium\n\n<ul>\n<li>\n<a href=\"https://blog.nrwl.io/managing-state-in-angular-applications-22b75ef5625f\" rel=\"nofollow noopener\" target=\"_blank\">Managing State in Angular Applications</a>\n\n<ul>\n<li>Angularで状態管理する時のベストプラクティスを検討し、最終的に@ngrx/storeを紹介している記事です。ソースコードもGitHubにあり、大変参考になります。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Qiita\n\n<ul>\n<li>\n<a href=\"https://qiita.com/puku0x/items/0a8e7224761dc549bd06\" id=\"reference-55d4d1f3588dbe22005a\">@ngrx/storeと@ngrx/effectsの使い方</a>\n\n<ul>\n<li>GitHubに<a href=\"https://github.com/puku0x/ngrx-todo\" rel=\"nofollow noopener\" target=\"_blank\">サンプル</a>もありコード例が多く大変参考になりました。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://qiita.com/musou1500/items/8003c4a3f2b2e80d919f\" id=\"reference-0b88f55e95af744439cc\">@ngrx/schematicsを触ってみる</a>\n\n<ul>\n<li>\n<code>@ngrx/schematics</code>の使い方が網羅されており参考になりました。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://qiita.com/gen2-gk/items/5e5c5b81243def8edc2c#ngrx-%E9%96%A2%E9%80%A3%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AF1%E3%81%A4%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AB%E3%81%BE%E3%81%A8%E3%82%81%E3%82%8B\" id=\"reference-00af0c3c5f2c814f6e6e\">ngrxでハマったポイント</a>\n\n<ul>\n<li>ngrx関連資産をstoreフォルダ配下に集約するという知見はココを参考にさせていただきました。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://qiita.com/kouMatsumoto/items/c8297466c1824953632f\" id=\"reference-2bdc06375583d7c16351\">ngrx紹介</a>\n\n<ul>\n<li>ngrxを知るきっかけになった記事です。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","body":"## なにこれ\nAngularで状態管理する方法をざっくり把握するためのチュートリアルです。[@ngrx/store](http://ngrx.github.io/)ベースの簡単なアプリ（数をカウントするアプリ）を作成します。作るだけなら10分程度で出来上がるので、とりあえず手を動かしてngrxを最低限を把握したい人向けです。ソースコードも[GitHub](https://github.com/Takumon/ngrx-tutorial/tree/with-ngrx)に置いているので参考にしてください。\nngrxを使うとボイラープレートが非常に多くなりますが、今回のチュートリアルでは[@ngrx/schematics](https://github.com/ngrx/platform/tree/master/docs/schematics) を使い、ボイラープレートを自動生成することで極力手間を省いています。\n\n\n## アプリの完成イメージ\n* `+`ボタンをクリックするとCountが+1される\n* `-` ボタンをクリックするとCountが- 1される\n![counterapp.gif](https://qiita-image-store.s3.amazonaws.com/0/49915/8e6f645e-a734-db8d-ec6b-144c0fdee1b0.gif)\n\n## やること/やらないこと\n* やる\n    * [@ngrx/store](https://github.com/ngrx/platform/blob/master/docs/store/README.md)の使い方\n        * Storeの作り方\n        * Stateの作り方\n        * Reducerの作り方\n        * Actionsの作り方\n    * [@ngrx/schematics](https://github.com/ngrx/platform/blob/master/docs/schematics/README.md)の使い方\n        * オプションなどを使い極力手間を減らす方法\n* やらない （下記を理解するには[参考](#参考)のQiitaの記事を見てください。）\n    * 状態管理の説明\n    * Reduxの説明\n    * [@ngrx/router-store](https://github.com/ngrx/platform/blob/master/docs/router-store/README.md)の使い方\n    * [@ngrx/entity](https://github.com/ngrx/platform/blob/master/docs/entity/README.md)の使い方\n    * [@ngrx/effect](https://github.com/ngrx/platform/blob/master/docs/effects/README.md)の使い方  \n    \n\n\n## チュートリアル概要\n段階を踏んで、ステップごとに動作確認しながら作成していきます。\n各ステップ終了時点のソースコードはGitHubに用意しています。参考にしてください。\n大部分はSchematicsを使ってngコマンドでボイラープレートを自動生成し、メイン部分のみ実装という感じです。\n\n1. Angularアプリを生成（1分）  ※[終了時点のソース](https://github.com/Takumon/ngrx-tutorial/tree/generated-with-angualr-cli)\n1. ngrxを使わずにカウント処理実装（2分）※[終了時点のソース](https://github.com/Takumon/ngrx-tutorial/tree/no-ngrx)\n1. ngrxインストール、初期設定（2分） ※[終了時点のソース](https://github.com/Takumon/ngrx-tutorial/tree/after-ngrx-setting)\n1. ngrxを使ってカウント処理実装（5分） ※[終了時点のソース](https://github.com/Takumon/ngrx-tutorial/tree/with-ngrx)\n\n\n\n\n## 前提条件\n* [Node.js](https://nodejs.org/ja/)インストール済み\n* [Angular CLI](https://cli.angular.io/)グローバルインストール済み\n\n```terminal\n$ npm i -g @angular/cli\n```\n\n* [@ngrx/schematics](https://cli.angular.io/)グローバルインストール済み\n\n```terminal\n$ npm i -g @ngrx/schematics\n```\n\n\n## 1. Angularアプリを生成（1分）\n\n* ng newコマンドを実行します。\n\n```terminal\n$ ng new ngrx-tutorial\n```\n\n* 生成されたアプリ配下に移動し、一旦Webアプリを立ち上げてみます。\n\n```terminal\n$ cd ngrx-tutorial\n$ ng serve -o\n```\n\n* ブラウザが起動し下記のような画面が表示されたら成功です。\n![スクリーンショット 2018-07-30 1.03.59.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5c19c3f0-104a-3ef2-a33d-315c0f0a3f9f.png)\n\n\n\n## 2. ngrxを使わずにカウント処理実装（2分）\nカウント処理の資産は全て`src/app/counter`フォルダ配下に作成します。\nまずはコマンドラインからボイラープレートを作成し、その後カウント処理を実装します。\n### ボイラープレート作成\n\n\n* カウント処理関連資産をまとめるモジュールを作成します。\n    * このモジュールをアプリ全体のモジュールに登録するため`--module`オプションを指定します。\n\n```terminal\n$ ng g module counter --module=app.module.ts\n```\n\n\n* カウント処理用のコンポーネントを作成します。\n    * 上記で作成したモジュールにコンポーネントを登録するため`--module`オプションを指定します。\n    * 最終的にアプリ全体のモジュールにコンポーネントを登録するため`--export`オプションを指定します。\n\n```terminal\n$ ng g component counter --module=counter/counter.module.ts --export\n```\n\n\n* `app.component.html`修正し、作成したカウント処理用のコンポーネントを呼び出すようにします。\n\n```html:app.component.html\n<app-counter></app-counter>\n```\n\n* 一旦ここまででWebアプリを立ち上げてみます。\n\n```terminal\n$ ng serve -o\n```\n\n* ブラウザが起動し、下記画面が表示されます。開発者ツールでエラーがなければ成功です。\n\n![スクリーンショット 2018-07-30 1.06.30.png](https://qiita-image-store.s3.amazonaws.com/0/49915/772a7501-34a7-3ef1-6666-d13e79382ce6.png)\n\n\n### 処理実装\n\n* カウント用コンポーネントで実際の処理を記述します。\n\n```ts:src/app/counter/counter.component.ts\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-counter',\n  templateUrl: './counter.component.html',\n  styleUrls: ['./counter.component.css']\n})\nexport class CounterComponent implements OnInit {\n  count = 0;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  increment() {\n    this.count = this.count + 1;\n  }\n\n  decrement() {\n    this.count = this.count - 1;\n  }\n\n}\n\n```\n\n\n```html:src/app/counter/counter.component.html\n<button (click)=\"increment()\">+</button>\n<button (click)=\"decrement()\">-</button>\n<div>Count: {{count}}</div>\n```\n\n\n* ここまででWebアプリを立ち上げてみます。\n\n```terminal\n$ ng serve -o\n```\n\n* ブラウザが起動し下記画面が表示されます。`+`,`-`ボタンをクリックすると数字が増えたり減ったりした、開発者ツールでもエラーがなければ成功です。\n\n![スクリーンショット 2018-07-30 0.59.12.png](https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png)\n\n\n## 3. ngrxインストール、初期設定（2分）\n@ngrx/storeをアプリに導入し、初期設定をします。\n\n\n* 下記ライブラリをインストールします。\n    * `@ngrx/schematics`\n        * Angualr CLIでngrxの雛形を作るためのライブラリ\n    * `@ngrx/store`\n        * ngrxでStore,Reducer,Actionを使うためのライブラリ\n    * `@ngrx/store-devtools`\n        * 強力なデバッカを使えるようにするためのライブラリ\n\n```terminal\n$ npm i -D @ngrx/schematics\n$ npm i -s @ngrx/store\n$ npm i -s @ngrx/store-devtools\n```\n\n\n*`@ngrx/schematics`をデフォルトのSchematicsに追加します（コマンドラインでngrxのボイラープレート生成時に`@ngrx/schematics`の指定を省略できるようにするためです。）\n\n```terminal\n$ ng config cli.defaultCollection @ngrx/schematics\n```\n\n* 上記を実行すると、`angular.json`にこのような設定が追加されます。\n\n```json:angular.json\n  \"defaultProject\": \"ngrx-tutorial\",\n  \"cli\": {\n    \"defaultCollection\": \"@ngrx/schematics\"\n  }\n```\n\n* ルートのStoreを作成します。\n    * `src/app/state`配下に生成したいので`--statePath`オプションを指定します。\n    * アプリ全体のモジュールに登録したいので`--module`オプションを指定します。\n\n```terminal\n$ ng g store state --statePath state --root --module app.module.ts\n```\n\n* 上記コマンドで更新した`src/app/app.module.ts`で`environment`のimport文のパスでエラーが出ている場合は修正してください。\n\n```diff:app/src/app.module.ts\n- import { environment } from '../../environments/environment';\n+ import { environment } from '../environments/environment';\n```\n\n* ここまででWebアプリを立ち上げてみます。\n\n```terminal\n$ ng serve -o\n```\n\n* 手順2の動作確認時と同様の挙動になります、開発者ツールでもエラーがなければ成功です。\n\n![スクリーンショット 2018-07-30 0.59.12.png](https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png)\n\n\n## 4. ngrxを使ってカウント処理実装（5分）\nここからは実際にStore、Reducer、Actionを作成し、カウント処理の値をStoreに移行します。\nここで作成する資産はカウンター処理に閉じたものなので、`src/app/counter/state`配下に作成します。\nまた`@ngrx/schemetics`のデフォルトではReducer、Actionなどの資産が、役割ごとにフォルダ分けされてしまいますが、１フォルダに集約したほうがソースが修正しやすいので、今回は全て`src/app/counter/state`の直下に作成します。\n\n\n### ボイラープレート生成\n\n\n* Store\n    * `src/app/counter/state`直下に作成するため`--statePath`オプションを指定します。\n    * カウント処理関連モジュールに登録したいので`--module`オプションを指定します。\n\n```terminal\n$ ng g store counter/counter --statePath state --module counter.module.ts\n```\n\n* Reducer\n    * 上記で作成したStoreに本Reducerを登録したいため`--reducers`オプションを指定します。\n\n```terminal\n$ ng g reducer counter/state/counter --reducers index.ts\n```\n\n* Action\n    * `src/app/counter/state`直下に作成するため`--flat`オプションを登録します。\n\n```terminal\n$ ng g action counter/state/counter --flat\n``` \n\n※この時点ではコンパイルエラーがでますので、動作確認はできません。そのまま次に進みます。\n\n\n## 処理実装\n依存関係の都合でボイラープレートとは逆順で実装していきます。\n\n### Action\nボイラープレート生成時から下記のように修正します。\n※コメントはコードの説明なので無視して実装してください。\n\n```diff:src/app/counter/state/counter.actions.ts\nimport { Action } from '@ngrx/store';\n\nexport enum CounterActionTypes {\n// Actionごとに型を定義します。\n-  LoadCounters = '[Counter] Load Counters'\n+  CountIncrement = '[Counter] Increment Count',\n+  CountDecrement = '[Counter] Decrement Count'\n}\n\n// Actionごとに@ngrx.storeのActionをインプリしたクラスを作成します。\n// 複雑な処理をする場合はコンストラクタ引数をとりますが、\n// 本チュートリアルでは簡単のため引数なしにしています。\n- export class Counter implements Action {\n-   readonly type = CounterActionTypes.LoadCounters;\n- }\n+ export class CountIncrement implements Action {\n+   readonly type = CounterActionTypes.CountIncrement;\n+   public constructor() {}\n+ }\n+ \n+ export class CountDecrement implements Action {\n+   readonly type = CounterActionTypes.CountDecrement;\n+   public constructor() {}\n+ }\n\n\n// 上記で定義したActionクラスを集約した型を定義します。Reducerで使うためです。\n- export type CounterActions = LoadCounters;\n+ export type CounterActions = CountIncrement | CountDecrement;\n```\n\n\n## Reducer作成\n\n```diff:src/app/counter/state/counter.reducer.ts\nimport { Action } from '@ngrx/store';\n+ import { CounterActionTypes } from './counter.actions';\n\n\nexport interface State {\n// カウンター処理に置けるStateを定義します。\n+   count: number;\n}\n\nexport const initialState: State = {\n// カウンター処理に置けるStateの初期値を定義します。\n+   count: 0\n};\n\n\nexport function reducer(state = initialState, action: Action): State {\n  switch (action.type) {\n// 引数として受け取ったActionの型に応じて処理を振り分けます\n// ここではカウンター処理に関連するアクションのみ拾って、他はStateをそのまま返します。\n+     case CounterActionTypes.CountIncrement:\n// Stateを変更する場合は、Stateがイミュータブルになるように元のStateには変更を加えず\n// Object.assingで新規オブジェクトを作るようにします。\n+       return Object.assign({}, { ...state, count : state.count + 1 });\n+     case CounterActionTypes.CountDecrement:\n+       return Object.assign({}, { ...state, count : state.count - 1 });\n    default:\n      return state;\n  }\n}\n\n// コンポーネントでStateのCountを取得するための関数を定義します。\n// Storeの方にも定義しますが、ここでは本ファイルで定義している\n// Stateのプロパティに関連する処理のみ定義します。\n+ export const getCount = (state: State) => state.count;\n```\n\n* Store\n\n```diff:src/app/counter/state/index.ts\nimport {\n  ActionReducerMap,\n  createFeatureSelector,\n  createSelector,\n  MetaReducer\n} from '@ngrx/store';\n// ng gコマンド生成時は相対パスがずれている可能性があるため\n// その場合は修正する\n- import { environment } from '../../environments/environment';\n+ import { environment } from '../../../environments/environment';\nimport * as fromCounter from './counter.reducer';\n\nexport interface State {\n\n  counter: fromCounter.State;\n}\n\nexport const reducers: ActionReducerMap<State> = {\n\n  counter: fromCounter.reducer,\n};\n\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\n\n// コンポーネントでStateのプロパティを取得するための関数を定義します。\n// 複数コンポーネントで使う度に定義するのは冗長なのでココで共通的に定義します。\n+ export const getCounterFeatureState = createFeatureSelector<State>('counter');\n+ export const getCounter = createSelector(getCounterFeatureState, s => s.counter);\n+ export const getCount = createSelector(getCounter, fromCounter.getCount);\n```\n\n\n\n* Component\n\n```diff:src/app/counter/counter.component.ts\nimport { Component, OnInit } from '@angular/core';\n+ import { Observable } from 'rxjs';\n+ import { Store } from '@ngrx/store';\n\n+ import * as CounterReducer from './state/counter.reducer';\n+ import * as CounterActions from './state/counter.actions';\n+ import { getCount } from './state';\n\n@Component({\n  selector: 'app-counter',\n  templateUrl: './counter.component.html',\n  styleUrls: ['./counter.component.css']\n})\nexport class CounterComponent implements OnInit {\n// Storeでの値変更を順次受け付けれるように型をObservableに変更します\n-   count = 0;\n+   count$: Observable<number>;\n\n// Storeをインジェクションします\n-   constructor() { }\n+   constructor(private store: Store<CounterReducer.State>) {\n// Storeからカウンタを取得します\n+     this.count$ = store.select(getCount);\n+  }\n\n  ngOnInit() {\n  }\n\n  increment() {\n// インクリメントの実処理はカウンタのReducerに任せるので\n// ここではActionをdispatchするだけです。\n-     this.count = this.count + 1;\n+     this.store.dispatch(new CounterActions.CountIncrement());\n  }\n\n  decrement() {\n-     this.count = this.count - 1;\n+     this.store.dispatch(new CounterActions.CountDecrement());\n  }\n\n}\n```\n\n* ConponentのHTML\n\n```diff:src/app/counter/counter.component.html\n<button (click)=\"increment()\">+</button>\n<button (click)=\"decrement()\">-</button>\n<!-- 変数名と型が変わったのでHTMLも若干修正します -->\n- <div>Count: {{count }}</div>\n+ <div>Count: {{count$ | async }}</div>\n```\n\n* Webアプリを立ち上げてみます。\n\n```terminal\n$ ng serve -o\n```\n\n* 開発者ツールなどで全くエラーが出ていなければ成功です。見た目は変わっていませんが、Countは`@ngrx/store`で管理されるようになっています。\n\n![スクリーンショット 2018-07-30 0.59.12.png](https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png)\n\n## 補足：ストアとストア登録方法\nストアとストア登録処理はボイラープレートで生成するのでココで改めて説明します。\n\n**まずはルートのストアです。**\nストアは`src/app/state/index.ts`に作成されます。\n中身を見るとわかりますが、実態はReducerを集約したActionReducerMapです。\nReducerを新しく作成した時は、このマップにどんどん追加していきます。\n\n```ts:src/app/state/index.ts\nimport {\n  ActionReducer,\n  ActionReducerMap,\n  createFeatureSelector,\n  createSelector,\n  MetaReducer\n} from '@ngrx/store';\nimport { environment } from '../../environments/environment';\n\nexport interface State {\n\n}\n\nexport const reducers: ActionReducerMap<State> = {\n  // ココにReducerが追加されていきます。\n  // 今回のチュートリアルではルートのストアに１つもReducerを定義していないので空っぽです。\n};\n\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\n\n```\n\nストアをモジュールに登録するには下記のように`StoreModule.forRoot`を使います(ボイラープレートでやってくれます)\n\n```ts:src/app/app.module.ts\n@NgModule({\n  // ・・・\n  imports: [\n    // ・・・\n    StoreModule.forRoot(reducers, { metaReducers }),\n    !environment.production ? StoreDevtoolsModule.instrument() : []\n    // ・・・\n  ],\n  // ・・・\n})\nexport class AppModule { }\n\n```\n\n**次にカウンタのストアに関してです。**\nこちらもルートの場合とほぼ同じです。\n\n```ts:src/app/counter/state/index.ts\n// ・・・\nexport const reducers: ActionReducerMap<State> = {\n  // カウンタのReducerをマップに登録しています。\n  counter: fromCounter.reducer,\n};\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\n// ・・・\n```\n\nただ登録は`StoreModule.forFeature`を使います。\nこのメソッドは、機能毎に状態管理する時に使うもので、ルートのストアに指定した名前で登録されます。使う時になったら遅延ロードしてくれる機能を持っています。\n\n```ts:src/app/counter/counter.module.ts\n// ・・・\nimport * as fromCounter from './state';\n// ・・・\n@NgModule({\n  imports: [\n    // ・・・\n    // アプリ全体のストアにcounterという名前で登録します\n    StoreModule.forFeature('counter', fromCounter.reducers, { metaReducers: fromCounter.metaReducers })\n    // ・・・\n  ],\n  // ・・・\n})\nexport class CounterModule { }\n\n```\n\n\n## まとめ\n以上で`@ngrx/schematics`を使った`@ngrx/store`のチュートリアルは終了です。\n`ngrx`ライブラリは他にも`@ngrx/router-store`、`@ngrx/entity`、`@ngrx/effect`があるので、\n今回のアプリをベースに拡張し、理解を深めてみるのも良いかもしれません。\n\nAngularはVue.jsなどと比較するとボイラープレートが多くなってしまいます。\nしかし、ソースコード自動生成機能が充実しているので、けっこう便利なフレームワークです！\nあまり周りでAngular使ってる人がいなくて寂しいのですが、、、、皆さん是非Angular使いましょう！\n\n## 参考\n* GitHub\n    * [@ngrx/store](https://github.com/ngrx/platform/blob/master/docs/store/README.md#ngrxstore)\n        * 公式ページ。サンプルは少し古いですが、ドキュメントは充実しています。\n    * [@ngrx/schematics](https://github.com/ngrx/platform/blob/master/docs/schematics/README.md)\n        * 各リンクに行くと、コマンドのオプションの説明などが記載されています。\n* Medium\n    * [Managing State in Angular Applications](https://blog.nrwl.io/managing-state-in-angular-applications-22b75ef5625f)\n        * Angularで状態管理する時のベストプラクティスを検討し、最終的に@ngrx/storeを紹介している記事です。ソースコードもGitHubにあり、大変参考になります。\n* Qiita\n    * [@ngrx/storeと@ngrx/effectsの使い方](https://qiita.com/puku0x/items/0a8e7224761dc549bd06)\n        * GitHubに[サンプル](https://github.com/puku0x/ngrx-todo)もありコード例が多く大変参考になりました。\n    * [@ngrx/schematicsを触ってみる](https://qiita.com/musou1500/items/8003c4a3f2b2e80d919f)\n        * `@ngrx/schematics`の使い方が網羅されており参考になりました。\n    * [ngrxでハマったポイント](https://qiita.com/gen2-gk/items/5e5c5b81243def8edc2c#ngrx-%E9%96%A2%E9%80%A3%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AF1%E3%81%A4%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AB%E3%81%BE%E3%81%A8%E3%82%81%E3%82%8B)\n        * ngrx関連資産をstoreフォルダ配下に集約するという知見はココを参考にさせていただきました。\n    * [ngrx紹介](https://qiita.com/kouMatsumoto/items/c8297466c1824953632f)\n        * ngrxを知るきっかけになった記事です。\n\n\n\n","comments_count":0,"created_at":"2018-07-30T18:01:02+09:00","likes_count":14,"reactions_count":0}}}