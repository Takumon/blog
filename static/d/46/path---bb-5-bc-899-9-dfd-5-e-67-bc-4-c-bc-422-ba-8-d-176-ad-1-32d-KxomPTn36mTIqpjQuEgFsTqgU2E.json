{"data":{"site":{"siteMetadata":{"title":"Takumon Blog","author":"Takuto Inoue"}},"qiitaPost":{"rendered_body":"\n<h2>\n<span id=\"やりたいこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたいこと</h2>\n\n<ul>\n<li>Angular CLI使って、MEANスタック(<strong>M</strong>ongoDB + <strong>E</strong>xpress + <strong>A</strong>ngular + <strong>N</strong>odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。</li>\n<li>フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。</li>\n<li>Dockerを使ってアプリを簡単に配布したい。</li>\n</ul>\n\n<p>これらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。</p>\n\n<ul>\n<li>その１. ビルド編　⇦　今回はココ</li>\n<li><a href=\"http://qiita.com/Takumon/items/b4211fcabad740baa551\" id=\"reference-b35cd1a7f8ba1daaecd8\">その２. テスト編</a></li>\n<li>その３. Dockerビルド編</li>\n</ul>\n\n<h2>\n<span id=\"その１-ビルド編\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%81%AE%EF%BC%91-%E3%83%93%E3%83%AB%E3%83%89%E7%B7%A8\"><i class=\"fa fa-link\"></i></a>その１. ビルド編</h2>\n\n<p>Angular CLIで作成したプロジェクトをベースに、<br>\nMongoDBに登録したメッセージを画面に一覧で表示するアプリを作成していきます。<br>\nメッセージを登録すると一覧に追加されていくようなアプリです。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" alt=\"アプリ概要.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png\"></a></p>\n\n<h3>\n<span id=\"プロジェクト構成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクト構成</h3>\n\n<p>今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。<br>\n<a href=\"https://github.com/Takumon/angular4-express4-typescritp2/tree/build\" rel=\"nofollow noopener\" target=\"_blank\">リポジトリ</a>も用意しているので詳細はそちらを参照してください。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">プロジェクトの構成（完成イメージ）</span></div>\n<div class=\"highlight\"><pre>.\n├── dist                ・・・(1) コンパイル資産出力先\n│   └── server　　　　　　　　      ・・・(1-1)　コンパイルされたサーバ資産\n│       ├── app.js\n│       ├── app.js.map\n│       ├── bin\n│       │   ├── www.js\n│       │   └── www.js.map\n│       ├── config.js\n│       ├── config.js.map\n│       ├── models\n│       │   ├── message.js\n│       │   └── message.js.map\n│       ├── public      ・・・(1-2) コンパイルされたクライアント資産\n│       │   ├── favicon.ico\n│       │   ├── index.html\n│       │   ├── inline.bundle.js\n│       │   ├── inline.bundle.js.map\n│       │   ├── main.bundle.js\n│       │   ├── main.bundle.js.map\n│       │   ├── polyfills.bundle.js\n│       │   ├── polyfills.bundle.js.map\n│       │   ├── styles.bundle.js\n│       │   ├── styles.bundle.js.map\n│       │   ├── vendor.bundle.js\n│       │   └── vendor.bundle.js.map\n│       └── routes\n│           ├── message.js\n│           └── message.js.map\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── e2e\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── server               ・・・(2)　サーバ資産\n│   ├── app.ts\n│   ├── bin\n│   │   └── www.ts\n│   ├── config.ts\n│   ├── models\n│   │   └── message.ts\n│   ├── routes\n│   │   └── message.ts\n│   └── tsconfig.server.json\n├── src                   ・・・(3)　クライアント資産\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       └── message.service.ts\n│   ├── assets\n│   ├── environments\n│   │   ├── environment.prod.ts\n│   │   └── environment.ts\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── main.ts\n│   ├── polyfills.ts\n│   ├── styles.css\n│   ├── test.ts\n│   ├── tsconfig.app.json\n│   ├── tsconfig.spec.json\n│   └── typings.d.ts\n├── karma.conf.js\n├── package-lock.json\n├── package.json\n├── protractor.conf.js\n├── proxy.conf.json    ・・・(4) \n├── tsconfig.json\n├── tslint.json\n└── README.md\n</pre></div>\n</div>\n\n<h4>\n<span id=\"各資産について\" class=\"fragment\"></span><a href=\"#%E5%90%84%E8%B3%87%E7%94%A3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>各資産について</h4>\n\n<h5>\n<span id=\"1-dist\" class=\"fragment\"></span><a href=\"#1-dist\"><i class=\"fa fa-link\"></i></a>(1) dist</h5>\n\n<p>コンパイルした資産の出力先フォルダ</p>\n\n<h5>\n<span id=\"1-1-distserver\" class=\"fragment\"></span><a href=\"#1-1-distserver\"><i class=\"fa fa-link\"></i></a>(1-1) dist/server</h5>\n\n<p>ここにサーバ側のコンパイルされたjsファイルが出力されます。<br>\nserverフォルダを設けているのは本資産とテスト資産を分離したかったからです。<br>\nその２. テスト編で説明しますが、サーバ側テスト用jsファイルはdist配下のserver_testフォルダに出力されるようにしています。</p>\n\n<h5>\n<span id=\"1-2-distserverpublic\" class=\"fragment\"></span><a href=\"#1-2-distserverpublic\"><i class=\"fa fa-link\"></i></a>(1-2) dist/server/public</h5>\n\n<p>コンパイルされたクライアント資産。<br>\nサーバ側アプリの資産の一部としてコンパイルされるようにしています。<br>\nExpressのアプリでは静的資産をpublicフォルダに置くのが一般的なのでこうしました。</p>\n\n<h5>\n<span id=\"2-server\" class=\"fragment\"></span><a href=\"#2-server\"><i class=\"fa fa-link\"></i></a>(2) server</h5>\n\n<p>サーバ資産を格納するためのディレクトリ。<br>\nいろいろ悩みましたが、TypeScript資産をコンパイルすることとテストすることを考慮してこのような構成にしました。</p>\n\n<h5>\n<span id=\"3-src\" class=\"fragment\"></span><a href=\"#3-src\"><i class=\"fa fa-link\"></i></a>(3) src</h5>\n\n<p>フロントの実行資産とテスト資産を格納するためのディレクリ。<br>\nAngular CLIでプロジェクトを作成するとデフォルトで作成されます。<br>\nビルドやアプリ起動は<code>ng</code>コマンドで実施します。</p>\n\n<h5>\n<span id=\"4-proxyconfjson\" class=\"fragment\"></span><a href=\"#4-proxyconfjson\"><i class=\"fa fa-link\"></i></a>(4) proxy.conf.json</h5>\n\n<p><code>npm start</code>でフロント側とサーバ側を同時に起動した時に、クライアント側からサーバ側へのリクエストを送れるようにするためのプロキシ設定です。</p>\n\n<h2>\n<span id=\"構築手順\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E7%AF%89%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>構築手順</h2>\n\n<h3>\n<span id=\"1-プロジェクト作成\" class=\"fragment\"></span><a href=\"#1-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>1. プロジェクト作成</h3>\n\n<ul>\n<li>\n<p>Angular CLIをインストール</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install -g @angular/cli\n</pre></div></div>\n</li>\n<li>\n<p>プロジェクトを生成、Angular CLIであらかじめ定義している依存ライブラリをインストール</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ ng new sample\n$ cd sample\n$ npm install\n</pre></div></div>\n</li>\n<li>\n<p>Angular CLIであらかじめ定義している依存ライブラリの他に必要なものををインストール<br>\n</p>\n<dd>\n<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/express\" rel=\"nofollow noopener\" target=\"_blank\"><code>express</code></a><br>\n    </dt>\n<dd>Webアプリケーションフレームワーク<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/body-parser\" rel=\"nofollow noopener\" target=\"_blank\"><code>body-parser</code></a><br>\n    </dt>\n<dd>リクエストボディのパーサー<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/mongoose\" rel=\"nofollow noopener\" target=\"_blank\"><code>mongoose</code></a><br>\n    </dt>\n<dd>MongoDBへのアクセスを簡単にしてくれるAPI<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/nodemon\" rel=\"nofollow noopener\" target=\"_blank\"><code>nodemon</code></a><br>\n    </dt>\n<dd>node実行時にソースの変更を自動反映してくれるツール<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/npm-run-all\" rel=\"nofollow noopener\" target=\"_blank\"><code>npm-run-all</code></a><br>\n    </dt>\n<dd>npm-scripts の連結実行を管理するためのパッケージ<br>\n</dd>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install --save express body-parser mongoose\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n</pre></div></div>\n</li>\n</ul>\n\n<h3>\n<span id=\"2-サーバ側を作成\" class=\"fragment\"></span><a href=\"#2-%E3%82%B5%E3%83%BC%E3%83%90%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2. サーバ側を作成</h3>\n\n<p>Angular CLIで作ったプロジェクトの直下に<code>server</code>フォルダを作って、その中にサーバ側の処理を書いていきます。</p>\n\n<h4>\n<span id=\"servermodelsmessagets\" class=\"fragment\"></span><a href=\"#servermodelsmessagets\"><i class=\"fa fa-link\"></i></a>server/models/message.ts</h4>\n\n<p>MongoDBにアクセスするためのモデルを定義します。<br>\nDBアクセスにはmangoosを使います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Message</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'messages'</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">}</span>\n<span class=\"p\">}));</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverroutesmessagets\" class=\"fragment\"></span><a href=\"#serverroutesmessagets\"><i class=\"fa fa-link\"></i></a>server/routes/message.ts</h4>\n\n<p>エンドポイントごとの処理を記述するルータを定義します。<br>\nメッセージの取得と登録には<code>server/models/message.ts</code>を使います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">http</span> <span class=\"k\">from</span> <span class=\"s1\">'http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Router</span><span class=\"p\">,</span> <span class=\"nx\">Response</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'express'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../models/message'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">messageRouter</span><span class=\"p\">:</span> <span class=\"nx\">Router</span> <span class=\"o\">=</span> <span class=\"nx\">Router</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// 全てのメッセージを取得する</span>\n<span class=\"nx\">messageRouter</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">doc</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span><span class=\"na\">messages</span><span class=\"p\">:</span> <span class=\"nx\">doc</span><span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// メッセージを登録する</span>\n<span class=\"nx\">messageRouter</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Message</span><span class=\"p\">({</span>\n    <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">save</span><span class=\"p\">((</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n      <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'メッセージを登録しました。'</span><span class=\"p\">,</span>\n      <span class=\"na\">obj</span><span class=\"p\">:</span> <span class=\"nx\">result</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">messageRouter</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverappts\" class=\"fragment\"></span><a href=\"#serverappts\"><i class=\"fa fa-link\"></i></a>server/app.ts</h4>\n\n<p>Expressで使用するルータと依存モジュールを定義するためのファイルを作成します。<br>\nメッセージAPIのエンドポイントは<code>/api/messages</code>に設定し、<br>\nmongooseを使ってMongoDBへの接続設定をしています。<br>\nクライアント資産はビルドするとpublicフォルダ配下に出力されるようにしているので、<br>\n静的資産へのルーティングはpublicフォルダを指定しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">express</span> <span class=\"k\">from</span> <span class=\"s1\">'express'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">path</span> <span class=\"k\">from</span> <span class=\"s1\">'path'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">bodyParser</span> <span class=\"k\">from</span> <span class=\"s1\">'body-parser'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">messageRouter</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./routes/message'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MONGO_URL</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./config'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">App</span> <span class=\"p\">{</span>\n  <span class=\"kr\">public</span> <span class=\"nx\">express</span><span class=\"p\">:</span> <span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">Application</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">middleware</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">routes</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kr\">private</span> <span class=\"nx\">middleware</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">bodyParser</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">());</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">bodyParser</span><span class=\"p\">.</span><span class=\"nx\">urlencoded</span><span class=\"p\">({</span> <span class=\"na\">extended</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">}));</span>\n    <span class=\"c1\">// 接続する MongoDB の設定</span>\n    <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nb\">Promise</span> <span class=\"o\">=</span> <span class=\"nb\">global</span><span class=\"p\">.</span><span class=\"nb\">Promise</span><span class=\"p\">;</span>\n    <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">MONGO_URL</span> <span class=\"o\">||</span> <span class=\"nx\">MONGO_URL</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">useMongoClient</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"p\">});</span>\n    <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'SIGINT'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">disconnect</span><span class=\"p\">();</span> <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kr\">private</span> <span class=\"nx\">routes</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 静的資産へのルーティング</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"kr\">static</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'public'</span><span class=\"p\">)));</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"nx\">messageRouter</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// その他のリクエストはindexファイルにルーティング</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">sendFile</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'public/index.html'</span><span class=\"p\">));</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"k\">new</span> <span class=\"nx\">App</span><span class=\"p\">().</span><span class=\"nx\">express</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverbinwwwts\" class=\"fragment\"></span><a href=\"#serverbinwwwts\"><i class=\"fa fa-link\"></i></a>server/bin/www.ts</h4>\n\n<p>Node.js でサーバを起動するための設定ファイルを作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">www.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">http</span> <span class=\"k\">from</span> <span class=\"s1\">'http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">SERVER_PORT</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../config'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">app</span> <span class=\"k\">from</span> <span class=\"s1\">'../app'</span><span class=\"p\">;</span>\n\n\n\n<span class=\"c1\">// ポートの設定.</span>\n<span class=\"kd\">const</span> <span class=\"nx\">port</span> <span class=\"o\">=</span> <span class=\"nx\">normalizePort</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">PORT</span> <span class=\"o\">||</span> <span class=\"nx\">SERVER_PORT</span><span class=\"p\">);</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"kd\">set</span><span class=\"p\">(</span><span class=\"s1\">'port'</span><span class=\"p\">,</span> <span class=\"nx\">port</span><span class=\"p\">);</span>\n\n\n<span class=\"c1\">// HTTPサーバ生成.</span>\n<span class=\"kd\">const</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">);</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"nx\">port</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`API running on localhost:</span><span class=\"p\">${</span><span class=\"nx\">port</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">));</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"nx\">onError</span><span class=\"p\">);</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'listening'</span><span class=\"p\">,</span> <span class=\"nx\">onListening</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// ポートを正規化.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">normalizePort</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">):</span> <span class=\"nx\">number</span><span class=\"o\">|</span><span class=\"nx\">string</span><span class=\"o\">|</span><span class=\"kr\">boolean</span>  <span class=\"p\">{</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">normalizedPort</span><span class=\"p\">:</span> <span class=\"nx\">number</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">val</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span><span class=\"p\">)</span>\n    <span class=\"p\">?</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">:</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">isNaN</span><span class=\"p\">(</span><span class=\"nx\">normalizedPort</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">normalizedPort</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">normalizedPort</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// エラーハンドラー.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">onError</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">):</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">syscall</span> <span class=\"o\">!==</span> <span class=\"s1\">'listen'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">bind</span> <span class=\"o\">=</span> <span class=\"k\">typeof</span> <span class=\"nx\">port</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span>\n    <span class=\"p\">?</span> <span class=\"s1\">'Pipe '</span> <span class=\"o\">+</span> <span class=\"nx\">port</span>\n    <span class=\"p\">:</span> <span class=\"s1\">'Port '</span> <span class=\"o\">+</span> <span class=\"nx\">port</span><span class=\"p\">;</span>\n\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"s1\">'EACCES'</span><span class=\"p\">:</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">bind</span> <span class=\"o\">+</span> <span class=\"s1\">' requires elevated privileges'</span><span class=\"p\">);</span>\n      <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"s1\">'EADDRINUSE'</span><span class=\"p\">:</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">bind</span> <span class=\"o\">+</span> <span class=\"s1\">' is already in use'</span><span class=\"p\">);</span>\n      <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// サーバ起動時のリスナー.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">onListening</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">addr</span> <span class=\"o\">=</span> <span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">address</span><span class=\"p\">();</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">bind</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">addr</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span><span class=\"p\">)</span>\n    <span class=\"p\">?</span> <span class=\"s2\">`pipe </span><span class=\"p\">${</span><span class=\"nx\">addr</span><span class=\"p\">}</span><span class=\"s2\">`</span>\n    <span class=\"p\">:</span> <span class=\"s2\">`port </span><span class=\"p\">${</span><span class=\"nx\">addr</span><span class=\"p\">.</span><span class=\"nx\">port</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverconfigts\" class=\"fragment\"></span><a href=\"#serverconfigts\"><i class=\"fa fa-link\"></i></a>server/config.ts</h4>\n\n<p>サーバ側の設定ファイルを作成します。<br>\nポートとMongoDBのURLを定義しています。<br>\n今回MongoDBはローカルにポート27017で立てる想定です。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">config.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_PORT</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">MONGO_URL</span> <span class=\"o\">=</span> <span class=\"s1\">'mongodb://localhost:27017/test'</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"3-クライアント側を作成\" class=\"fragment\"></span><a href=\"#3-%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>3. クライアント側を作成</h3>\n\n<p>Angular CLIでプロジェクトを作成すると最低限のクライアント資産が生成されるので、<br>\nここでは修正が必要なファイル、新規作成するファイルのみ紹介します。</p>\n\n<h4>\n<span id=\"srcappmessagemessageservicets\" class=\"fragment\"></span><a href=\"#srcappmessagemessageservicets\"><i class=\"fa fa-link\"></i></a>src/app/message/message.service.ts</h4>\n\n<p>サーバ側からメッセージを取得するためのサービスを新規作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.service.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Http</span><span class=\"p\">,</span> <span class=\"nx\">Response</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MessageService</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">private</span> <span class=\"nx\">http</span><span class=\"p\">:</span> <span class=\"nx\">Http</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"nx\">getAll</span><span class=\"p\">():</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">http</span>\n        <span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"na\">response</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n            <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n        <span class=\"p\">})</span>\n        <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">throw</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()));</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">regist</span><span class=\"p\">(</span><span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">http</span>\n      <span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">message</span><span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"na\">response</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n            <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n      <span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">throw</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappcomponentts\" class=\"fragment\"></span><a href=\"#srcappappcomponentts\"><i class=\"fa fa-link\"></i></a>src/app/app.component.ts</h4>\n\n<p>既存のファイルを修正して、messagesを保持するようにします。<br>\nMessageServiceを使ってメッセージを取得します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span><span class=\"p\">,</span> <span class=\"nx\">OnInit</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-root'</span><span class=\"p\">,</span>\n  <span class=\"na\">templateUrl</span><span class=\"p\">:</span> <span class=\"s1\">'./app.component.html'</span><span class=\"p\">,</span>\n  <span class=\"na\">styleUrls</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'./app.component.css'</span><span class=\"p\">],</span>\n  <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"nx\">MessageService</span> <span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">{</span>\n  <span class=\"nl\">messages</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n  <span class=\"nl\">message</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">private</span> <span class=\"nx\">messageService</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getMessages</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">getMessages</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messageService</span>\n      <span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">()</span>\n      <span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">res</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">;</span>\n      <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">registerMessage</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messageService</span>\n      <span class=\"p\">.</span><span class=\"nx\">register</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">res</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getMessages</span><span class=\"p\">();</span>\n      <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappcomponenthtml\" class=\"fragment\"></span><a href=\"#srcappappcomponenthtml\"><i class=\"fa fa-link\"></i></a>src/app/app.component.html</h4>\n\n<p>既存のファイルの修正して、メッセージ一覧と登録のUIに書き換えます。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.html</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>メッセージ一覧<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;button</span> <span class=\"na\">id=</span><span class=\"s\">\"getMessagesButton\"</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">getMessages</span><span class=\"err\">()\"</span><span class=\"nt\">&gt;</span>メッセージ一覧を最新化<span class=\"nt\">&lt;/button&gt;</span>\n    <span class=\"nt\">&lt;ul</span> <span class=\"na\">id=</span><span class=\"s\">\"messageList\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;li</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let item of messages\"</span><span class=\"nt\">&gt;</span>\n        {{item.message}}\n      <span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;/ul&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>メッセージ登録<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"na\">id=</span><span class=\"s\">\"registerMessage\"</span> <span class=\"err\">[(</span><span class=\"na\">ngModel</span><span class=\"err\">)]=\"</span><span class=\"na\">message</span><span class=\"err\">\"</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"登録するメッセージを入力してください。\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span> <span class=\"na\">id=</span><span class=\"s\">\"registerMessageButton\"</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)='</span><span class=\"na\">registerMessage</span><span class=\"err\">()'</span><span class=\"nt\">&gt;</span>登録<span class=\"nt\">&lt;/button&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappmodulets\" class=\"fragment\"></span><a href=\"#srcappappmodulets\"><i class=\"fa fa-link\"></i></a>src/app/app.module.ts</h4>\n\n<p>HttpModule、FormsModule、MessageServiceを追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.module.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">BrowserModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/platform-browser'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">NgModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">HttpModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/forms'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.component'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"nx\">AppComponent</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"nx\">BrowserModule</span><span class=\"p\">,</span>\n    <span class=\"nx\">HttpModule</span><span class=\"p\">,</span>\n    <span class=\"nx\">FormsModule</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MessageService</span><span class=\"p\">],</span>\n  <span class=\"na\">bootstrap</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">AppComponent</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppModule</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n\n</pre></div>\n</div>\n\n<h3>\n<span id=\"4-ビルドまわり環境を整備\" class=\"fragment\"></span><a href=\"#4-%E3%83%93%E3%83%AB%E3%83%89%E3%81%BE%E3%82%8F%E3%82%8A%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>4. ビルドまわり環境を整備</h3>\n\n<h4>\n<span id=\"pakcagejson\" class=\"fragment\"></span><a href=\"#pakcagejson\"><i class=\"fa fa-link\"></i></a>pakcage.json</h4>\n\n<p>スクリプトを下記のように修正します。<br>\n(npm scriptsは便利ですが、コメントが記述できないのが残念だなーと思いました。)</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\">\n  </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"start\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s build:server -p start:*\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"start:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng serve --aot=true --progress=false --proxy-config proxy.conf.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"start:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-p watch:server boot:server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"watch:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -w -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"boot:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"nodemon ./dist/server/bin/www.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-s build:server build:client\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng build --output-path=./dist/server/public\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"buildRun\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-s build boot:server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>start</strong>でクライアント資産とサーバ資産の両方を起動します。</li>\n<li>\n<strong>start:client</strong>でクライアント資産をコンパイルして起動します。Angular CLIのngコマンドにお任せしています。なおstartではクライアント資産とサーバ資産で二つのサーバを起動するので、クライアントからサーバへ（リクエストを送れるようにプロキシ設定を行っています。プロキシ設定ファイルについては下で触れます。</li>\n<li>\n<strong>start:server</strong>でサーバ資産をコンパイルしてExpressを起動します。</li>\n<li>\n<strong>watch:server</strong>でサーバ側のTypeScriptをウォッチして変更があればコンパイルするようにします。</li>\n<li>\n<strong>boot:server</strong>でコンパイルしたサーバ側資産を起動します。nodeではなくnodemonを使うことでコンパイルしたサーバ資産に更新があった場合でも即座に更新を反映するようにしています。</li>\n<li>\n<strong>build</strong>クライアント資産とサーバ資産の両方をコンパイルします。</li>\n<li>\n<strong>build:server</strong>でサーバ資産をコンパイルしています。コンパイル時の設定は下で触れる<code>/server/tsconfig.server.json</code>を使います。</li>\n<li>\n<strong>build:client</strong>でクライアント資産をコンパイルしています。出力先はサーバ側資産の静的ファイル格納フォルダ（<code>dist/server/public</code>）を指定しています。</li>\n<li>\n<strong>buildRun</strong>でクライアント資産とサーバ資産の両方をコンパイルしサーバ資産を起動します。とりあえずデプロイするアプリを起動したい時の便利コマンドです。</li>\n</ul>\n\n<h4>\n<span id=\"servertsconfigserverjson\" class=\"fragment\"></span><a href=\"#servertsconfigserverjson\"><i class=\"fa fa-link\"></i></a>server/tsconfig.server.json</h4>\n\n<p>サーバ資産コンパイルときの設定ファイルを作成します。<br>\n<code>outDir</code>で出力先をdist/serverに指定しています。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">tsconfig.server.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"extends\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../tsconfig.json\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"preserveConstEnums\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"outDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist/server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"mapRoot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist/server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"module\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"commonjs\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<h4>\n<span id=\"proxyconfjson\" class=\"fragment\"></span><a href=\"#proxyconfjson\"><i class=\"fa fa-link\"></i></a>proxy.conf.json</h4>\n\n<p><code>start</code>でクライアントとサーバの２つを起動した時に、クラ<br>\nイアントからサーバへのリクエストを送れるようにするためのプロキシ設定ファイルを作成します。<br>\n<code>/api</code>始まるリクエストをサーバへのリクエストとみなしてプロキシ設定を行います。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">proxy.conf.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"/api\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"target\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"http://localhost:3000\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"secure\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<h4>\n<span id=\"mongodbをローカルで立ち上げる\" class=\"fragment\"></span><a href=\"#mongodb%E3%82%92%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7%E7%AB%8B%E3%81%A1%E4%B8%8A%E3%81%92%E3%82%8B\"><i class=\"fa fa-link\"></i></a>MongoDBをローカルで立ち上げる</h4>\n\n<p>具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。</p>\n\n<h3>\n<span id=\"5-試してみる\" class=\"fragment\"></span><a href=\"#5-%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>5. 試してみる</h3>\n\n<h4>\n<span id=\"アプリを起動してみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリを起動してみる</h4>\n\n<ul>\n<li>\n<p>プロジェクト直下で下記コマンドを実行するとアプリが起動します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm start \n</pre></div></div>\n</li>\n<li><p>起動したら<code>http://localhost:4200</code>にアクセスしてみます。すると下記のようにメッセージ一覧画面が表示され、メッセージを登録すると適宜一覧に追加されていきます。</p></li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" alt=\"アプリ概要.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png\"></a></p>\n\n<ul>\n<li>試しにクライアント資産かサーバ資産を修正してみると、コンンパイルされてアプリに変更がリアルタイムに反映されることがわかります。</li>\n</ul>\n\n<h4>\n<span id=\"アプリをビルドしてみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリをビルドしてみる</h4>\n\n<ul>\n<li>\n<p>プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力されます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run build\n</pre></div></div>\n</li>\n</ul>\n\n<h4>\n<span id=\"アプリをビルドして起動してみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリをビルドして起動してみる</h4>\n\n<ul>\n<li>プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力された後に起動されます。\nビルドしたアプリは<code>http://localhost:3000</code>でアクセスできます。\n<code>\n$ npm run buildRun\n</code>\n</li>\n</ul>\n\n<h2>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h2>\n\n<p>今回はAngular CLIベースのプロジェクトをベースにしてMEANスタックの最小構成プロジェクトを構築する方法を紹介しました。プロジェクトを起動、ビルドすることはできるようになったので、次回「<a href=\"http://qiita.com/Takumon/items/b4211fcabad740baa551\">その２. テスト編</a>」ではテストコードの作成とテスト実施環境の構築について紹介しようと思います。</p>\n","headings":[{"id":"やりたいこと","value":"やりたいこと","depth":2,"parents":[]},{"id":"その１-ビルド編","value":"その１. ビルド編","depth":2,"parents":[]},{"id":"プロジェクト構成","value":"プロジェクト構成","depth":3,"parents":[{"id":"その１-ビルド編","value":"その１. ビルド編","depth":2}]},{"id":"各資産について","value":"各資産について","depth":4,"parents":[{"id":"プロジェクト構成","value":"プロジェクト構成","depth":3},{"id":"その１-ビルド編","value":"その１. ビルド編","depth":2}]},{"id":"1-dist","value":"(1) dist","depth":5,"parents":[{"id":"各資産について","value":"各資産について","depth":4},{"id":"プロジェクト構成","value":"プロジェクト構成","depth":3},{"id":"その１-ビルド編","value":"その１. ビルド編","depth":2}]},{"id":"1-1-distserver","value":"(1-1) dist/server","depth":5,"parents":[{"id":"各資産について","value":"各資産について","depth":4},{"id":"プロジェクト構成","value":"プロジェクト構成","depth":3},{"id":"その１-ビルド編","value":"その１. ビルド編","depth":2}]},{"id":"1-2-distserverpublic","value":"(1-2) dist/server/public","depth":5,"parents":[{"id":"各資産について","value":"各資産について","depth":4},{"id":"プロジェクト構成","value":"プロジェクト構成","depth":3},{"id":"その１-ビルド編","value":"その１. ビルド編","depth":2}]},{"id":"2-server","value":"(2) server","depth":5,"parents":[{"id":"各資産について","value":"各資産について","depth":4},{"id":"プロジェクト構成","value":"プロジェクト構成","depth":3},{"id":"その１-ビルド編","value":"その１. ビルド編","depth":2}]},{"id":"3-src","value":"(3) src","depth":5,"parents":[{"id":"各資産について","value":"各資産について","depth":4},{"id":"プロジェクト構成","value":"プロジェクト構成","depth":3},{"id":"その１-ビルド編","value":"その１. ビルド編","depth":2}]},{"id":"4-proxyconfjson","value":"(4) proxy.conf.json","depth":5,"parents":[{"id":"各資産について","value":"各資産について","depth":4},{"id":"プロジェクト構成","value":"プロジェクト構成","depth":3},{"id":"その１-ビルド編","value":"その１. ビルド編","depth":2}]},{"id":"構築手順","value":"構築手順","depth":2,"parents":[]},{"id":"1-プロジェクト作成","value":"1. プロジェクト作成","depth":3,"parents":[{"id":"構築手順","value":"構築手順","depth":2}]},{"id":"2-サーバ側を作成","value":"2. サーバ側を作成","depth":3,"parents":[{"id":"構築手順","value":"構築手順","depth":2}]},{"id":"servermodelsmessagets","value":"server/models/message.ts","depth":4,"parents":[{"id":"2-サーバ側を作成","value":"2. サーバ側を作成","depth":3},{"id":"構築手順","value":"構築手順","depth":2}]},{"id":"serverroutesmessagets","value":"server/routes/message.ts","depth":4,"parents":[{"id":"2-サーバ側を作成","value":"2. サーバ側を作成","depth":3},{"id":"構築手順","value":"構築手順","depth":2}]},{"id":"serverappts","value":"server/app.ts","depth":4,"parents":[{"id":"2-サーバ側を作成","value":"2. サーバ側を作成","depth":3},{"id":"構築手順","value":"構築手順","depth":2}]},{"id":"serverbinwwwts","value":"server/bin/www.ts","depth":4,"parents":[{"id":"2-サーバ側を作成","value":"2. サーバ側を作成","depth":3},{"id":"構築手順","value":"構築手順","depth":2}]},{"id":"serverconfigts","value":"server/config.ts","depth":4,"parents":[{"id":"2-サーバ側を作成","value":"2. サーバ側を作成","depth":3},{"id":"構築手順","value":"構築手順","depth":2}]},{"id":"3-クライアント側を作成","value":"3. クライアント側を作成","depth":3,"parents":[{"id":"構築手順","value":"構築手順","depth":2}]},{"id":"srcappmessagemessageservicets","value":"src/app/message/message.service.ts","depth":4,"parents":[{"id":"3-クライアント側を作成","value":"3. クライアント側を作成","depth":3},{"id":"構築手順","value":"構築手順","depth":2}]},{"id":"srcappappcomponentts","value":"src/app/app.component.ts","depth":4,"parents":[{"id":"3-クライアント側を作成","value":"3. クライアント側を作成","depth":3},{"id":"構築手順","value":"構築手順","depth":2}]},{"id":"srcappappcomponenthtml","value":"src/app/app.component.html","depth":4,"parents":[{"id":"3-クライアント側を作成","value":"3. クライアント側を作成","depth":3},{"id":"構築手順","value":"構築手順","depth":2}]},{"id":"srcappappmodulets","value":"src/app/app.module.ts","depth":4,"parents":[{"id":"3-クライアント側を作成","value":"3. クライアント側を作成","depth":3},{"id":"構築手順","value":"構築手順","depth":2}]},{"id":"4-ビルドまわり環境を整備","value":"4. ビルドまわり環境を整備","depth":3,"parents":[{"id":"構築手順","value":"構築手順","depth":2}]},{"id":"pakcagejson","value":"pakcage.json","depth":4,"parents":[{"id":"4-ビルドまわり環境を整備","value":"4. ビルドまわり環境を整備","depth":3},{"id":"構築手順","value":"構築手順","depth":2}]},{"id":"servertsconfigserverjson","value":"server/tsconfig.server.json","depth":4,"parents":[{"id":"4-ビルドまわり環境を整備","value":"4. ビルドまわり環境を整備","depth":3},{"id":"構築手順","value":"構築手順","depth":2}]},{"id":"proxyconfjson","value":"proxy.conf.json","depth":4,"parents":[{"id":"4-ビルドまわり環境を整備","value":"4. ビルドまわり環境を整備","depth":3},{"id":"構築手順","value":"構築手順","depth":2}]},{"id":"mongodbをローカルで立ち上げる","value":"MongoDBをローカルで立ち上げる","depth":4,"parents":[{"id":"4-ビルドまわり環境を整備","value":"4. ビルドまわり環境を整備","depth":3},{"id":"構築手順","value":"構築手順","depth":2}]},{"id":"5-試してみる","value":"5. 試してみる","depth":3,"parents":[{"id":"構築手順","value":"構築手順","depth":2}]},{"id":"アプリを起動してみる","value":"アプリを起動してみる","depth":4,"parents":[{"id":"5-試してみる","value":"5. 試してみる","depth":3},{"id":"構築手順","value":"構築手順","depth":2}]},{"id":"アプリをビルドしてみる","value":"アプリをビルドしてみる","depth":4,"parents":[{"id":"5-試してみる","value":"5. 試してみる","depth":3},{"id":"構築手順","value":"構築手順","depth":2}]},{"id":"アプリをビルドして起動してみる","value":"アプリをビルドして起動してみる","depth":4,"parents":[{"id":"5-試してみる","value":"5. 試してみる","depth":3},{"id":"構築手順","value":"構築手順","depth":2}]},{"id":"終わりに","value":"終わりに","depth":2,"parents":[]}],"fields":{"title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その１. ビルド編","excerpt":"やりたいことAngular CLI使って、MEANスタック(MongoDB + Express + Angular + NodeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。フロント側とサーバ側の両方をweb...","date":"2017-07-19T02:06:59+09:00","tags":["JavaScript","MongoDB","Express","TypeScript","AngularJS","Qiita"]},"user":{"id":"Takumon","profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/49915/profile-images/1488080194","description":"JavaのSIer"}}},"pageContext":{"slug":"/bb5bc899-9dfd-5e67-bc4c-bc422ba8d176/","previous":{"fields":{"slug":"/270e2fae-ed90-5539-8c90-a2ed93ebba83/","title":"Fessを使用して、Asciidoctorで簡単に全文検索できるようにする","date":"2017-06-26T00:21:37+09:00","excerpt":"Asciidoctorを使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。そこで今回は、Dockerで...","tags":["JavaScript","全文検索","ドキュメント","Fess","asciidoctor","Qiita"]},"id":"270e2fae-ed90-5539-8c90-a2ed93ebba83","title":"Fessを使用して、Asciidoctorで簡単に全文検索できるようにする","rendered_body":"<p><a href=\"http://asciidoctor.org/\" rel=\"nofollow noopener\" target=\"_blank\">Asciidoctor</a>を使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。</p>\n\n<p>そこで今回は、Dockerで全文検索サーバの<a href=\"http://fess.codelibs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Fess</a>を立てて、<br>\nドキュメントからJavaScript経由でFessのJSON APIを呼び出すことで、<br>\n全文検索を簡単に導入する方法をご紹介します。</p>\n\n<p>導入するとドキュメントの右上に検索窓が出てきて全文検索できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/e020d2b6619c0b7ce4332c80ea15b89a6efb895e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31323365633737312d666237372d653464632d646637652d6134623430373739323735392e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e020d2b6619c0b7ce4332c80ea15b89a6efb895e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31323365633737312d666237372d653464632d646637652d6134623430373739323735392e676966\" alt=\"6月-24-2017 19-05-32.gif\" title=\"6月-24-2017 19-05-32.gif\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/123ec771-fb77-e4dc-df7e-a4b407792759.gif\"></a></p>\n\n<h2>\n<span id=\"fessとは\" class=\"fragment\"></span><a href=\"#fess%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Fessとは</h2>\n\n<p><a href=\"http://fess.codelibs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Fess</a>は<strong>「5 分で簡単に構築可能な全文検索サーバー」</strong>です。<br>\nJavaベースで構築されており、Apacheライセンスで提供されるオープンソース製品で、無料で使用できます。<br>\n自分でクローラを設定して、自分だけの検索エンジンがつくれるようなイメージです。<br>\nデフォルトで検索画面を提供していますが、JSON APIも提供しているので、様々なシステムと連携可能です。</p>\n\n<h2>\n<span id=\"全体像\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E4%BD%93%E5%83%8F\"><i class=\"fa fa-link\"></i></a>全体像</h2>\n\n<p>ドキュメント用Webサーバに全文検索用のJavaScriptファイルとCSSファイルを追加し、Dockerで全文検索用のFessサーバを立てます。<br>\nFessサーバはドキュメント用Webサーバをクロールし、その情報を保存しておきます。<br>\nドキュメントで全文検索を実施すると、JavaScript経由でFessサーバのJSON AIPを呼び出して、全文検索結果をドキュメントに表示します。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/6fe043176da6b6451722114a3d0418bc40ac8c99/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31306338616334362d323135352d386562372d613565642d3763313363653534346563322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/6fe043176da6b6451722114a3d0418bc40ac8c99/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31306338616334362d323135352d386562372d613565642d3763313363653534346563322e706e67\" alt=\"0_Fess_全体像_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/10c8ac46-2155-8eb7-a5ed-7c13ce544ec2.png\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/729e46c74903de7be597a6ac4adea0c03cd8559f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34306531643435362d323633352d326165642d333333642d3862316165633434373933312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/729e46c74903de7be597a6ac4adea0c03cd8559f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34306531643435362d323633352d326165642d333333642d3862316165633434373933312e706e67\" alt=\"0_Fess_全体像_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/40e1d456-2635-2aed-333d-8b1aec447931.png\"></a></p>\n\n<h2>\n<span id=\"導入手順\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>導入手順</h2>\n\n<p>この導入手順は、下記のような環境（ローカルPCのDocker上にドキュメント用WebサーバとFessサーバが立っている環境）を作った時のものです。<br>\nDockerを使わなくても、ローカルPC以外でも、導入可能です。導入手順は適宜読み替えてください。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/a94911642557c486b240ffa8c3c184c64bfabc2c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30626164623864322d316135382d323262362d343537632d3132626563663361383931312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a94911642557c486b240ffa8c3c184c64bfabc2c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30626164623864322d316135382d323262362d343537632d3132626563663361383931312e706e67\" alt=\"0_Fess_全体像_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/0badb8d2-1a58-22b6-457c-12becf3a8911.png\"></a></p>\n\n<h3>\n<span id=\"fessのインストール\" class=\"fragment\"></span><a href=\"#fess%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>Fessのインストール</h3>\n\n<p>Docker Hubの<a href=\"https://hub.docker.com/r/codelibs/fess/\" rel=\"nofollow noopener\" target=\"_blank\">codelibs/fess</a>を使用します。今回ポートは10084で公開します。<br>\nDockerを使わない場合は<a href=\"http://fess.codelibs.org/ja/11.2/install/index.html\" rel=\"nofollow noopener\" target=\"_blank\">Fess インストールガイド</a>を参考にしてください。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ docker run -d -p 10084:8080 --name fess codelibs/fess:latest\n</pre></div></div>\n\n<h3>\n<span id=\"fessの設定\" class=\"fragment\"></span><a href=\"#fess%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>Fessの設定</h3>\n\n<h4>\n<span id=\"クローラの設定\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>クローラの設定</h4>\n\n<p><code>http://[PCのローカルIPアドレス]:10084/login</code>にアクセスするとログイン画面が表示されます。<br>\nデフォルトのID/PASS　<code>admin/admin</code>でログインしましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/d173fd5ce7a76eb7b5a6ef053a670dd6551d720c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65373930656361392d353037332d393438652d336534332d6437353436643537666165352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d173fd5ce7a76eb7b5a6ef053a670dd6551d720c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65373930656361392d353037332d393438652d336534332d6437353436643537666165352e706e67\" alt=\"1_Fess管理者_ログイン画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/e790eca9-5073-948e-3e43-d7546d57fae5.png\"></a><br>\n<br></p>\n\n<p>ログインするとダッシュボードが表示されます。左ペインの<code>クローラ</code> &gt; <code>Web</code>　を選択しましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/cbfee37bd5d06381615f013da8587b1af91c35aa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61636662653935302d666137342d643063622d336365652d3565386462346465356237342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/cbfee37bd5d06381615f013da8587b1af91c35aa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61636662653935302d666137342d643063622d336365652d3565386462346465356237342e706e67\" alt=\"2_Fess管理者_ダッシュボード.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/acfbe950-fa74-d0cb-3cee-5e8db4de5b74.png\"></a><br>\n<br></p>\n\n<p>Webクローラにはまだ何も登録されていないので、左上の<code>+　新規作成</code>ボタンをクリックしましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/e60be4a90df24cb1275c165752de363b15859b87/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36333130333762342d616162322d386530642d663961612d3364323365633931376132392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e60be4a90df24cb1275c165752de363b15859b87/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36333130333762342d616162322d386530642d663961612d3364323365633931376132392e706e67\" alt=\"3_Fess管理者_Webクロール設定_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/631037b4-aab2-8e0d-f9aa-3d23ec917a29.png\"></a><br>\n<br></p>\n\n<p>Webクロール情報入力画面が表示されます。<br>\n<a href=\"https://camo.qiitausercontent.com/62cd6f97bb7dfebb163873f26b5fda4fabcf89c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653561303963392d376363652d336665632d373838342d3132353863333266613931612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/62cd6f97bb7dfebb163873f26b5fda4fabcf89c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653561303963392d376363652d336665632d373838342d3132353863333266613931612e706e67\" alt=\"3_Fess管理者_Webクロール設定_2.png\" title=\"3_Fess管理者_Webクロール設定_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/ee5a09c9-7cce-3fec-7884-1258c32fa91a.png\"></a></p>\n\n<p>設定項目は色々ありますが、とりあえず下記項目だけ設定しましょう。</p>\n\n<ul>\n<li>名前 \n\n<ul>\n<li>任意の名前を設定してください。</li>\n</ul>\n</li>\n<li>URL \n\n<ul>\n<li>ドキュメント用Webサーバにおいてドキュメントが格納されているルートフォルダのURLを指定してください。末尾に<code>/</code>を付けてください。</li>\n</ul>\n</li>\n<li>クロール対象とするURL \n\n<ul>\n<li>正規表現で値を設定します。上記<code>URL</code>で設定したルートフォルダ配下の全資産を対象とするために、<code>URLで設定した値</code> + <code>.*</code> を指定してください。</li>\n</ul>\n</li>\n<li>検索対象とするURL\n\n<ul>\n<li>正規表現で値を設定します。HTMLのみを検索対象にしたい（JS、CSSなどは除外したい）ので、<code>URLで設定した値</code> + <code>.+\\.html$</code> を指定してください。\n<br>\n<br>\n</li>\n</ul>\n</li>\n</ul>\n\n<p>値を設定したら、画面を下にスクロールして<code>+　作成</code>ボタンをクリックします。<br>\nすると下記のようにWebクロールのデータが１件登録されます。<br>\n<a href=\"https://camo.qiitausercontent.com/8302d25592df90b2bdf59fbf3b43e31ecf106b3e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33643030626635612d663133312d643336372d646535332d6166313062623336383339642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/8302d25592df90b2bdf59fbf3b43e31ecf106b3e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33643030626635612d663133312d643336372d646535332d6166313062623336383339642e706e67\" alt=\"3_Fess管理者_Webクロール設定_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/3d00bf5a-f131-d367-de53-af10bb36839d.png\"></a><br>\n<br></p>\n\n<h4>\n<span id=\"クローラの実行\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AE%E5%AE%9F%E8%A1%8C\"><i class=\"fa fa-link\"></i></a>クローラの実行</h4>\n\n<p>左ペインで　<code>システム</code> &gt; <code>スケジューラ</code> を選択してジョブスケジューラを開きます。<br>\nジョブスケジューラで <code>Default Crawler</code>を選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/52e6c84dc635dabd786a05e2dc2dbc01bbcd62b3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62306165636130642d363461342d343364612d373832622d3061316130636437306238332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/52e6c84dc635dabd786a05e2dc2dbc01bbcd62b3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62306165636130642d363461342d343364612d373832622d3061316130636437306238332e706e67\" alt=\"4_Fess管理者_スケジューラ_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/b0aeca0d-64a4-43da-782b-0a1a0cd70b83.png\"></a><br>\n<br></p>\n\n<p><code>今すぐ開始</code>をクリックします。<br>\n<a href=\"https://camo.qiitausercontent.com/15c56153ff7878a59bfda2bab0ac3b8b6182fa23/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30306537363932302d626661642d656562312d636239392d3732346533613933393261392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/15c56153ff7878a59bfda2bab0ac3b8b6182fa23/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30306537363932302d626661642d656562312d636239392d3732346533613933393261392e706e67\" alt=\"4_Fess管理者_スケジューラ_1.1.png\" title=\"4_Fess管理者_スケジューラ_1.1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/00e76920-bfad-eeb1-cb99-724e3a9392a9.png\"></a><br>\n<br></p>\n\n<p>するとクロールが実行されます。<br>\n<a href=\"https://camo.qiitausercontent.com/b34d527efb0b07d2b04cabccebe97f0e1e4b594c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323564333030662d303766352d373234642d636539332d3865316339373532653130652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b34d527efb0b07d2b04cabccebe97f0e1e4b594c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323564333030662d303766352d373234642d636539332d3865316339373532653130652e706e67\" alt=\"4_Fess管理者_スケジューラ_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/725d300f-07f5-724d-ce93-8e1c9752e10e.png\"></a><br>\n<br></p>\n\n<p>しばらくして<code>F5</code>キーを押してブラウザを更新してください。<br>\nクロールが終了すると、スケジューラの状態が<code>実行中</code>から<code>有効</code>になります。<br>\n<a href=\"https://camo.qiitausercontent.com/2d860e111077a3a0b63a44b45e14e0e18b02fcb1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653466353237372d616163332d616437652d636465622d3431643339623733336331662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2d860e111077a3a0b63a44b45e14e0e18b02fcb1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653466353237372d616163332d616437652d636465622d3431643339623733336331662e706e67\" alt=\"4_Fess管理者_スケジューラ_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/ee4f5277-aac3-ad7e-cdeb-41d39b733c1f.png\"></a><br>\n<br></p>\n\n<h4>\n<span id=\"クローラ実行結果の確認\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>クローラ実行結果の確認</h4>\n\n<p>左ペインの<code>システム情報</code>&gt;<code>クロール情報</code>を選択すると、先ほど実行したクロールの結果が表示されています。その行を選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/e35eccd76c8d85dcc368298adfebb71871f083a7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39326633313062352d383366362d646564612d343438642d6166613863356230663130342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e35eccd76c8d85dcc368298adfebb71871f083a7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39326633313062352d383366362d646564612d343438642d6166613863356230663130342e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_1.png\" title=\"5_Fess管理者_システム情報_クロール情報_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/92f310b5-83f6-deda-448d-afa8c5b0f104.png\"></a><br>\n<br></p>\n\n<p>セッションIDを選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/341936c3d088fb04a1029cc6c891a35253a079da/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34653830636431342d333633342d663636352d623434382d3862346234653761386432312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/341936c3d088fb04a1029cc6c891a35253a079da/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34653830636431342d333633342d663636352d623434382d3862346234653761386432312e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_2.png\" title=\"5_Fess管理者_システム情報_クロール情報_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/4e80cd14-3634-f665-b448-8b4b4e7a8d21.png\"></a><br>\n<br></p>\n\n<p>ここにドキュメント用Webサーバのドキュメントが全て表示されればOKです。<br>\n<a href=\"https://camo.qiitausercontent.com/767e79c91f7521caf880a890deee50513f520ea9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36306238366263342d663730662d343263382d613031372d3566313338623362383865332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/767e79c91f7521caf880a890deee50513f520ea9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36306238366263342d663730662d343263382d613031372d3566313338623362383865332e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_3.png\" title=\"5_Fess管理者_システム情報_クロール情報_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/60b86bc4-f70f-42c8-a017-5f138b3b88e3.png\"></a><br>\n<br></p>\n\n<h3>\n<span id=\"ドキュメント用webサーバに全文検索用資産を配置\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E7%94%A8web%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AB%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E7%94%A8%E8%B3%87%E7%94%A3%E3%82%92%E9%85%8D%E7%BD%AE\"><i class=\"fa fa-link\"></i></a>ドキュメント用Webサーバに全文検索用資産を配置</h3>\n\n<p>全文検索用の資産は<code>full-text-search.js</code>と<code>full-text-search.css</code>の２つです。<br>\n<code>full-text-search.js</code>の変数 FESS_JSON_ENDPOINT(FESSサーバのJSON APIのエンドポイント) は適時置き換えてください。<br>\nこれらの資産をドキュメント用Webサーバのドキュメントのルートフォルダ直下に配置してください。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">full-text-search.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'use strict'</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// FESSサーバのJSON APIのエンドポイント（FessサーバのIPアドレス + /json）</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">FESS_JSON_ENDPOINT</span> <span class=\"o\">=</span> <span class=\"s1\">'http://192.168.1.5:10084/json'</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// １ページあたりの検索結果表示件数</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">COUNT_PAR_PAGE</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n\n\n    <span class=\"c1\">// 目次の</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#toc'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 一番上に検索条件入力エリアを挿入</span>\n        <span class=\"p\">.</span><span class=\"nx\">prepend</span><span class=\"p\">(</span>\n            <span class=\"s1\">'&lt;div id=\"search-area\"&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;form id=\"search-form\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;div class=\"search-input-area\"&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;i class=\"fa fa-search left-icon\"&gt;&lt;/i&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;input id=\"search-query\" placeholder=\"全文検索\" /&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;i class=\"fa fa-close right-icon\"&gt;&lt;/i&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;/div&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;input id=\"search-start\" type=\"hidden\" value=\"0\"/&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;input id=\"search-num\" type=\"hidden\" value=\"'</span> <span class=\"o\">+</span> <span class=\"nx\">COUNT_PAR_PAGE</span> <span class=\"o\">+</span> <span class=\"s1\">'\"/&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;form&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// イベント登録</span>\n        <span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">$searchArea</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 入力項目の検索条件でEnterを押したら、検索処理を実行する</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-form'</span><span class=\"p\">).</span><span class=\"nx\">submit</span><span class=\"p\">({</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 虫眼鏡アイコン押下したら、検索処理を実行する</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".left-icon\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">({</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 検索条件入力したら、</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\"#search-query\"</span><span class=\"p\">).</span><span class=\"nx\">keyup</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n              <span class=\"kd\">var</span> <span class=\"nx\">$this</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n              <span class=\"kd\">var</span> <span class=\"nx\">$rightIcon</span> <span class=\"o\">=</span> <span class=\"nx\">$this</span><span class=\"p\">.</span><span class=\"nx\">parent</span><span class=\"p\">().</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".right-icon\"</span><span class=\"p\">);</span>\n\n              <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">$this</span><span class=\"p\">.</span><span class=\"nx\">val</span><span class=\"p\">().</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                 <span class=\"c1\">// 検索条件に値がある場合は×アイコンの色を濃くする</span>\n                 <span class=\"nx\">$rightIcon</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#555'</span><span class=\"p\">);</span>\n              <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                 <span class=\"c1\">// 検索条件に値がない場合は×アイコンの色を薄くする</span>\n                 <span class=\"nx\">$rightIcon</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#ccc'</span><span class=\"p\">);</span>\n              <span class=\"p\">}</span>\n            <span class=\"p\">});</span>\n\n            <span class=\"c1\">// ×アイコン押下したら、</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".right-icon\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n              <span class=\"c1\">// ×アイコンの色を薄くして</span>\n              <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">).</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#ccc'</span><span class=\"p\">)</span>\n                      <span class=\"c1\">// 検索条件をクリアする</span>\n                     <span class=\"p\">.</span><span class=\"nx\">parent</span><span class=\"p\">().</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\"input\"</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span>\n            <span class=\"p\">});</span>\n        <span class=\"p\">});</span>\n\n    <span class=\"c1\">// ドキュメントタイトルの</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#header&gt;h1'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 直下に検索結果エリアを挿入</span>\n        <span class=\"p\">.</span><span class=\"nx\">before</span><span class=\"p\">(</span>\n            <span class=\"s1\">'&lt;div id=\"search-result-area\"&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div id=\"search-result-subheader\"&gt;&lt;/div&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div id=\"search-result-content\"&gt;&lt;/div&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// イベント登録</span>\n        <span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span>\n                <span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-area'</span><span class=\"p\">)</span>\n                    <span class=\"c1\">// 検索結果エリアのバツアイコンをクリックしたら、</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s1\">'#remove-search-result'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                      <span class=\"kd\">var</span> <span class=\"nx\">$searchResultArea</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">delegateTarget</span><span class=\"p\">)</span>\n                      <span class=\"c1\">// 検索結果エリアを非表示モードにする</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">removeClass</span><span class=\"p\">(</span><span class=\"s1\">'show'</span><span class=\"p\">);</span>\n                      <span class=\"c1\">// 検索結果エリアの中身を削除する</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-subheader'</span><span class=\"p\">).</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-content'</span><span class=\"p\">).</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n                    <span class=\"p\">})</span>\n                    <span class=\"c1\">// 前ページリンクをクリックしたら、１ページ前を検索する</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#prevPageLink\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">)</span>\n                    <span class=\"c1\">// 次ページリンクをクリックしたら、１ページ後を検索する</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#nextPageLink\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n        <span class=\"p\">});</span>\n\n\n\n    <span class=\"cm\">/**\n     * 検索処理\n     *\n     * @param  {eventObject} event\n     * @return {boolean}  submit処理を中断させるために必ずfalseを返却する\n     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">doSearch</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">){</span>\n      <span class=\"c1\">// 検索フィールドの値をトリムして取得</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">searchQuery</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">trim</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-query'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">());</span>\n      <span class=\"c1\">// 空の場合は検索処理を実行しない</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">searchQuery</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// 表示開始位置、表示件数の取得</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-start'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">()),</span>\n          <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-num'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">());</span>\n      <span class=\"c1\">// 表示開始位置のチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">start</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">// 表示件数のチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">num</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"nx\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">// 表示ページ情報の取得</span>\n      <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">navi</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n          <span class=\"c1\">// 前のページの場合</span>\n          <span class=\"nx\">start</span> <span class=\"o\">-=</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n          <span class=\"c1\">// 次のページの場合</span>\n          <span class=\"nx\">start</span> <span class=\"o\">+=</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"nl\">default</span><span class=\"p\">:</span>\n        <span class=\"k\">case</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n          <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// URLを構築</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"nx\">FESS_JSON_ENDPOINT</span> <span class=\"o\">+</span> <span class=\"s1\">'?callback=?'</span> <span class=\"o\">+</span> <span class=\"c1\">// 別ドメインを想定してJSONP形式でリクエストを送信する</span>\n                                     <span class=\"s1\">'&amp;q='</span> <span class=\"o\">+</span> <span class=\"nb\">encodeURIComponent</span><span class=\"p\">(</span><span class=\"nx\">searchQuery</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n                                     <span class=\"s1\">'&amp;start='</span> <span class=\"o\">+</span> <span class=\"nx\">start</span> <span class=\"o\">+</span>\n                                     <span class=\"s1\">'&amp;num='</span> <span class=\"o\">+</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// 検索リクエスト送信</span>\n      <span class=\"c1\">// 別ドメインを想定してJSONP形式でリクエストを送信する</span>\n      <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span>\n          <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"nx\">url</span><span class=\"p\">,</span>\n          <span class=\"na\">dataType</span><span class=\"p\">:</span> <span class=\"s1\">'jsonp'</span><span class=\"p\">,</span>\n          <span class=\"na\">success</span><span class=\"p\">:</span> <span class=\"nx\">renderSearchResult</span>\n      <span class=\"p\">});</span>\n\n\n      <span class=\"c1\">// ページ情報の更新</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#searchNum'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// ページ表示を上部に移動</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">).</span><span class=\"nx\">scrollTop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// サブミットを抑止するためにfalseを返す</span>\n      <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n\n\n    <span class=\"cm\">/**\n     * 検索成功時に検索結果を描画する\n     *\n     * @param  {Anything} data レスポンスデータ\n     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">renderSearchResult</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 検索結果処理</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">dataResponse</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">;</span>\n      <span class=\"c1\">// ステータスチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s2\">\"検索中に問題が発生しました。\"</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// 検索結果領域を表示する</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-area'</span><span class=\"p\">).</span><span class=\"nx\">addClass</span><span class=\"p\">(</span><span class=\"s1\">'show'</span><span class=\"p\">);</span>\n\n      <span class=\"kd\">var</span> <span class=\"nx\">$searchResultSubheader</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-subheader'</span><span class=\"p\">),</span>\n          <span class=\"nx\">$searchResultContent</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-content'</span><span class=\"p\">),</span>\n          <span class=\"nx\">record_count</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">record_count</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// 検索結果がない場合</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">record_count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// サブヘッダーに出力</span>\n        <span class=\"nx\">$searchResultSubheader</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span>  <span class=\"s1\">'&lt;div id=\"remove-search-result\" style=\"float:right;\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/div&gt;'</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// 結果領域に出力</span>\n        <span class=\"nx\">$searchResultContent</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;b&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">q</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/b&gt;に一致する情報は見つかりませんでした。'</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// 検索にヒットした場合</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">page_number</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_number</span><span class=\"p\">,</span>\n          <span class=\"nx\">page_size</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_size</span><span class=\"p\">,</span>\n          <span class=\"nx\">page_count</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_count</span><span class=\"p\">,</span>\n          <span class=\"nx\">startRange</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nx\">page_size</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n          <span class=\"nx\">endRange</span> <span class=\"o\">=</span> <span class=\"nx\">page_number</span> <span class=\"o\">*</span> <span class=\"nx\">page_size</span><span class=\"p\">,</span>\n          <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n          <span class=\"nx\">max</span><span class=\"p\">,</span>\n          <span class=\"nx\">offset</span> <span class=\"o\">=</span> <span class=\"nx\">startRange</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-start'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"nx\">offset</span><span class=\"p\">);</span>\n\n\n      <span class=\"c1\">// サブヘッダーに出力</span>\n      <span class=\"nx\">$searchResultSubheader</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;b&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">q</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/b&gt; の検索結果 '</span> <span class=\"o\">+</span>\n                                <span class=\"nx\">record_count</span> <span class=\"o\">+</span> <span class=\"s2\">\" 件中 \"</span> <span class=\"o\">+</span>  <span class=\"nx\">startRange</span> <span class=\"o\">+</span> <span class=\"s1\">' - '</span> <span class=\"o\">+</span>\n                                <span class=\"nx\">endRange</span> <span class=\"o\">+</span> <span class=\"s1\">' 件目 ('</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">exec_time</span> <span class=\"o\">+</span> <span class=\"s1\">' 秒)'</span> <span class=\"o\">+</span>\n                               <span class=\"s1\">'&lt;div id=\"remove-search-result\" style=\"float:right;\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/div&gt;'</span>\n\n      <span class=\"c1\">// 検索結果領域のクリア</span>\n      <span class=\"nx\">$searchResultContent</span><span class=\"p\">.</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n\n\n      <span class=\"c1\">// 検索結果の出力</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">$resultBody</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;ol/&gt;\"</span><span class=\"p\">);</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">results</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">;</span>\n      <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">max</span> <span class=\"o\">=</span> <span class=\"nx\">results</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">max</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">element</span> <span class=\"o\">=</span>\n            <span class=\"s1\">'&lt;li&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;h4 class=\"title\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;a href=\"'</span> <span class=\"o\">+</span><span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">url_link</span> <span class=\"o\">+</span> <span class=\"s1\">'\"&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">title</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/a&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;/h4&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div class=\"body\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">content_description</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;br/&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;cite&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">site</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/cite&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;/div&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/li&gt;'</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">).</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$resultBody</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">$resultBody</span><span class=\"p\">.</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$searchResultContent</span><span class=\"p\">);</span>\n\n\n      <span class=\"c1\">// ページ番号情報の出力</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">pageArea</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n      <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;div id=\"pageInfo\"&gt;'</span><span class=\"p\">,</span> <span class=\"nx\">page_number</span><span class=\"p\">,</span> <span class=\"s1\">'ページ目&lt;br/&gt;'</span><span class=\"p\">);</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 前のページへのリンク</span>\n        <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;a id=\"prevPageLink\" href=\"#\"&gt;&amp;lt;&amp;lt;前ページへ&lt;/a&gt; '</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">&lt;</span> <span class=\"nx\">page_count</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 次のページへのリンク</span>\n        <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;a id=\"nextPageLink\" href=\"#\"&gt;次ページへ&amp;gt;&amp;gt;&lt;/a&gt;'</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">);</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"p\">)).</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$searchResultContent</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">full-text-search.css</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">@charset</span> <span class=\"s1\">\"UTF-8\"</span><span class=\"p\">;</span>\n\n<span class=\"nf\">#search-area</span> <span class=\"p\">{</span>\n    <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"p\">{</span>\n    <span class=\"nl\">position</span><span class=\"p\">:</span><span class=\"nb\">relative</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* 入力項目 */</span>\n<span class=\"nf\">#search-query</span> <span class=\"p\">{</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span> <span class=\"m\">2em</span><span class=\"p\">;</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">black</span><span class=\"p\">;</span>\n    <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"n\">arial</span><span class=\"p\">,</span><span class=\"nb\">sans-serif</span><span class=\"p\">;</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span>\n    <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">2em</span><span class=\"p\">;</span>\n    <span class=\"nl\">outline</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nt\">input</span><span class=\"nd\">:focus</span> <span class=\"p\">{</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"m\">#4d90fe</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* アイコンは入力項目の左と右に配置する */</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"o\">,</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span> <span class=\"p\">{</span>\n    <span class=\"c\">/* 縦方向の中央寄せ */</span>\n    <span class=\"nl\">position</span><span class=\"p\">:</span><span class=\"nb\">absolute</span><span class=\"p\">;</span>\n    <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">50%</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">-0.5em</span><span class=\"p\">;</span>\n    <span class=\"py\">font-sise</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 要素にマウスを合わせたら、マウスポインタのマークを変える */</span>\n    <span class=\"nl\">cursor</span><span class=\"p\">:</span><span class=\"nb\">pointer</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span> <span class=\"p\">{</span>\n    <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span><span class=\"p\">;</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span><span class=\"m\">#444</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span> <span class=\"p\">{</span>\n    <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 最初は、グレーアウトしておく */</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* アイコンにマウスを合わせたら、サイズを大きくする */</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"nd\">:hover</span><span class=\"o\">,</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1.4em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* 検索結果表示時に適用するスタイル */</span>\n<span class=\"nf\">#search-result-area</span><span class=\"nc\">.show</span> <span class=\"p\">{</span>\n    <span class=\"nl\">background</span><span class=\"p\">:</span> <span class=\"m\">#f8f8f7</span><span class=\"p\">;</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">0px</span> <span class=\"nb\">solid</span><span class=\"p\">;</span>\n    <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h3>\n<span id=\"ドキュメントに全文検索用資産の読み込み処理を追加\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AB%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E7%94%A8%E8%B3%87%E7%94%A3%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF%E5%87%A6%E7%90%86%E3%82%92%E8%BF%BD%E5%8A%A0\"><i class=\"fa fa-link\"></i></a>ドキュメントに全文検索用資産の読み込み処理を追加</h3>\n\n<p>前手順でドキュメント用Webサーバに配置した<code>full-text-search.js</code>と<code>full-text-search.css</code>を、<br>\n各ドキュメントから読み込むようにします。<br>\n<code>full-text-search.js</code>はjQueryに依存しているので、<br>\n既存のドキュメントで読み込んでいない場合はjQueryも読み込みも追加してください。</p>\n\n<p>ドキュメント用Webサーバがこのようなフォルダ構成だとしたら、</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ドキュメント用Webサーバのドキュメントルート\n├── full-text-search.css\n├── full-text-search.js\n└── asciidoctor-sample\n    └── asciidoctor-sample.html\n</pre></div></div>\n\n<p><code>asciidoctor-sample.adoc</code>には下記を追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>++++\n&lt;link rel=\"stylesheet\" href=\"../full-text-search.css\"&gt;&lt;/link&gt;\n&lt;script\n  src=\"https://code.jquery.com/jquery-3.2.1.min.js\"\n  integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\"\n  crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n&lt;script src=\"../full-text-search.js\"&gt;&lt;/script&gt;\n++++\n</pre></div></div>\n\n<h3>\n<span id=\"全文検索ができるかの確認\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%8B%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>全文検索ができるかの確認</h3>\n\n<p>以上の手順を実施すると、Asdciidoctorで全文検索ができるようになります。<br>\nドキュメントをブラウザで見ると、目次上部に検索窓が追加されています。<br>\n<a href=\"https://camo.qiitausercontent.com/daf3699de0e01b28ba4d3c2a8b8b535d3c54a2ab/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39393039336364362d353865382d376364652d613364382d3562656332613032303636382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/daf3699de0e01b28ba4d3c2a8b8b535d3c54a2ab/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39393039336364362d353865382d376364652d613364382d3562656332613032303636382e706e67\" alt=\"7_全文検索イメージ_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/99093cd6-58e8-7cde-a3d8-5bec2a020668.png\"></a><br>\n<br></p>\n\n<p>検索条件を入力し、虫眼鏡アイコンをクリックすると、検索結果が表示されます。<br>\n<a href=\"https://camo.qiitausercontent.com/5d8e0c5f2db223d5f021d484351b0c840010bb4f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63646533643865612d643838332d613636622d663838642d3961353934313032366263392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/5d8e0c5f2db223d5f021d484351b0c840010bb4f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63646533643865612d643838332d613636622d663838642d3961353934313032366263392e706e67\" alt=\"7_全文検索イメージ_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/cde3d8ea-d883-a66b-f88d-9a5941026bc9.png\"></a><br>\n<br></p>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>FessのREST APIを使用してAsciidoctorで全文検索できるようにする方法を紹介しました。<br>\nFessのREST APIを使えば、Asciidoctorに限らず、様々なシステムに全文検索機能を導入できそうです。</p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<ul>\n<li><a href=\"http://fess.codelibs.org/ja/articles/article-4.html#js\" rel=\"nofollow noopener\" target=\"_blank\">Fess で作るApache Solrベースの検索サーバー 〜 REST API 編</a></li>\n<li><a href=\"http://qiita.com/cookienote/items/1f2443be25630a78d946\" id=\"reference-69c989703115d994be84\">全文検索サーバー Fess を Docker で動かす</a></li>\n</ul>\n","body":"[Asciidoctor](http://asciidoctor.org/)を使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。\n\nそこで今回は、Dockerで全文検索サーバの[Fess](http://fess.codelibs.org/ja/)を立てて、\nドキュメントからJavaScript経由でFessのJSON APIを呼び出すことで、\n全文検索を簡単に導入する方法をご紹介します。\n\n導入するとドキュメントの右上に検索窓が出てきて全文検索できるようになります。\n![6月-24-2017 19-05-32.gif](https://qiita-image-store.s3.amazonaws.com/0/49915/123ec771-fb77-e4dc-df7e-a4b407792759.gif \"6月-24-2017 19-05-32.gif\")\n\n\n## Fessとは\n[Fess](http://fess.codelibs.org/ja/)は**「5 分で簡単に構築可能な全文検索サーバー」**です。\nJavaベースで構築されており、Apacheライセンスで提供されるオープンソース製品で、無料で使用できます。\n自分でクローラを設定して、自分だけの検索エンジンがつくれるようなイメージです。\nデフォルトで検索画面を提供していますが、JSON APIも提供しているので、様々なシステムと連携可能です。\n\n\n## 全体像\nドキュメント用Webサーバに全文検索用のJavaScriptファイルとCSSファイルを追加し、Dockerで全文検索用のFessサーバを立てます。\nFessサーバはドキュメント用Webサーバをクロールし、その情報を保存しておきます。\nドキュメントで全文検索を実施すると、JavaScript経由でFessサーバのJSON AIPを呼び出して、全文検索結果をドキュメントに表示します。\n\n![0_Fess_全体像_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/10c8ac46-2155-8eb7-a5ed-7c13ce544ec2.png)\n\n![0_Fess_全体像_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/40e1d456-2635-2aed-333d-8b1aec447931.png)\n\n## 導入手順\nこの導入手順は、下記のような環境\u001c（ローカルPCのDocker上にドキュメント用WebサーバとFessサーバが立っている環境）を作った時のものです。\nDockerを使わなくても、ローカルPC以外でも、導入可能です。導入手順は適宜読み替えてください。\n\n![0_Fess_全体像_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/0badb8d2-1a58-22b6-457c-12becf3a8911.png)\n\n\n### Fessのインストール\nDocker Hubの[codelibs/fess](https://hub.docker.com/r/codelibs/fess/)を使用します。今回ポートは10084で公開します。\nDockerを使わない場合は[Fess インストールガイド](http://fess.codelibs.org/ja/11.2/install/index.html)を参考にしてください。\n\n```\n$ docker run -d -p 10084:8080 --name fess codelibs/fess:latest\n```\n\n### Fessの設定\n#### クローラの設定\n`http://[PCのローカルIPアドレス]:10084/login`にアクセスするとログイン画面が表示されます。\nデフォルトのID/PASS　`admin/admin`でログインしましょう。\n![1_Fess管理者_ログイン画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/e790eca9-5073-948e-3e43-d7546d57fae5.png)\n<br/>\n\nログインするとダッシュボードが表示されます。左ペインの`クローラ` > `Web`　を選択しましょう。\n![2_Fess管理者_ダッシュボード.png](https://qiita-image-store.s3.amazonaws.com/0/49915/acfbe950-fa74-d0cb-3cee-5e8db4de5b74.png)\n<br/>\n\nWebクローラにはまだ何も登録されていないので、左上の`+　新規作成`ボタンをクリックしましょう。\n![3_Fess管理者_Webクロール設定_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/631037b4-aab2-8e0d-f9aa-3d23ec917a29.png)\n<br/>\n\nWebクロール情報入力画面が表示されます。\n![3_Fess管理者_Webクロール設定_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/ee5a09c9-7cce-3fec-7884-1258c32fa91a.png \"3_Fess管理者_Webクロール設定_2.png\")\n\n設定項目は色々ありますが、とりあえず下記項目だけ設定しましょう。\n\n* 名前 \n    * 任意の名前を設定してください。\n* URL \n    * ドキュメント用Webサーバにおいてドキュメントが格納されているルートフォルダのURLを指定してください。末尾に`/`を付けてください。\n* クロール対象とするURL \n    * 正規表現で値を設定します。上記`URL`で設定したルートフォルダ配下の全資産を対象とするために、`URLで設定した値` + `.*` を指定してください。\n* 検索対象とするURL\n   * 正規表現で値を設定します。HTMLのみを検索対象にしたい（JS、CSSなどは除外したい）ので、`URLで設定した値` + `.+\\.html$` を指定してください。\n<br/>\n<br/>\n\n\n値を設定したら、画面を下にスクロールして`+　作成`ボタンをクリックします。\nすると下記のようにWebクロールのデータが１件登録されます。\n![3_Fess管理者_Webクロール設定_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/3d00bf5a-f131-d367-de53-af10bb36839d.png)\n<br/>\n\n\n#### クローラの実行\n左ペインで　`システム` > `スケジューラ` を選択してジョブスケジューラを開きます。\nジョブスケジューラで `Default Crawler`を選択します。\n![4_Fess管理者_スケジューラ_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/b0aeca0d-64a4-43da-782b-0a1a0cd70b83.png)\n<br/>\n\n`今すぐ開始`をクリックします。\n![4_Fess管理者_スケジューラ_1.1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/00e76920-bfad-eeb1-cb99-724e3a9392a9.png \"4_Fess管理者_スケジューラ_1.1.png\")\n<br/>\n\nするとクロールが実行されます。\n![4_Fess管理者_スケジューラ_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/725d300f-07f5-724d-ce93-8e1c9752e10e.png)\n<br/>\n\nしばらくして`F5`キーを押してブラウザを更新してください。\nクロールが終了すると、スケジューラの状態が`実行中`から`有効`になります。\n![4_Fess管理者_スケジューラ_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/ee4f5277-aac3-ad7e-cdeb-41d39b733c1f.png)\n<br/>\n\n\n#### クローラ実行結果の確認\n左ペインの`システム情報`>`クロール情報`を選択すると、先ほど実行したクロールの結果が表示されています。その行を選択します。\n![5_Fess管理者_システム情報_クロール情報_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/92f310b5-83f6-deda-448d-afa8c5b0f104.png \"5_Fess管理者_システム情報_クロール情報_1.png\")\n<br/>\n\n\nセッションIDを選択します。\n![5_Fess管理者_システム情報_クロール情報_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/4e80cd14-3634-f665-b448-8b4b4e7a8d21.png \"5_Fess管理者_システム情報_クロール情報_2.png\")\n<br/>\n\nここにドキュメント用Webサーバのドキュメントが全て表示されればOKです。\n![5_Fess管理者_システム情報_クロール情報_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/60b86bc4-f70f-42c8-a017-5f138b3b88e3.png \"5_Fess管理者_システム情報_クロール情報_3.png\")\n<br/>\n\n### ドキュメント用Webサーバに全文検索用資産を配置\n全文検索用の資産は`full-text-search.js`と`full-text-search.css`の２つです。\n`full-text-search.js`の変数 FESS_JSON_ENDPOINT(FESSサーバのJSON APIのエンドポイント) は適時置き換えてください。\nこれらの資産をドキュメント用Webサーバのドキュメントのルートフォルダ直下に配置してください。\n\n```javascript:full-text-search.js\n$(function() {\n    'use strict';\n\n    // FESSサーバのJSON APIのエンドポイント（FessサーバのIPアドレス + /json）\n    var FESS_JSON_ENDPOINT = 'http://192.168.1.5:10084/json';\n\n    // １ページあたりの検索結果表示件数\n    var COUNT_PAR_PAGE = 10;\n\n\n    // 目次の\n    $('#toc')\n        // 一番上に検索条件入力エリアを挿入\n        .prepend(\n            '<div id=\"search-area\">' +\n                '<form id=\"search-form\">' +\n                    '<div class=\"search-input-area\">' +\n                        '<i class=\"fa fa-search left-icon\"></i>' +\n                        '<input id=\"search-query\" placeholder=\"全文検索\" />' +\n                        '<i class=\"fa fa-close right-icon\"></i>' +\n                    '</div>' +\n                    '<input id=\"search-start\" type=\"hidden\" value=\"0\"/>' +\n                    '<input id=\"search-num\" type=\"hidden\" value=\"' + COUNT_PAR_PAGE + '\"/>' +\n                '<form>' +\n            '</div>')\n        // イベント登録\n        .ready(function() {\n            var $searchArea = $(this);\n\n            // 入力項目の検索条件でEnterを押したら、検索処理を実行する\n            $searchArea.find('#search-form').submit({navi:0}, doSearch);\n\n            // 虫眼鏡アイコン押下したら、検索処理を実行する\n            $searchArea.find(\".left-icon\").click({navi:0}, doSearch);\n\n            // 検索条件入力したら、\n            $searchArea.find(\"#search-query\").keyup(function(){\n              var $this = $(this);\n              var $rightIcon = $this.parent().find(\".right-icon\");\n\n              if($this.val().length > 0) {\n                 // 検索条件に値がある場合は×アイコンの色を濃くする\n                 $rightIcon.css('color','#555');\n              } else {\n                 // 検索条件に値がない場合は×アイコンの色を薄くする\n                 $rightIcon.css('color','#ccc');\n              }\n            });\n\n            // ×アイコン押下したら、\n            $searchArea.find(\".right-icon\").click(function(){\n              // ×アイコンの色を薄くして\n              $(this).css('color','#ccc')\n                      // 検索条件をクリアする\n                     .parent().find(\"input\").val('');\n            });\n        });\n\n    // ドキュメントタイトルの\n    $('#header>h1')\n        // 直下に検索結果エリアを挿入\n        .before(\n            '<div id=\"search-result-area\">' +\n                '<div id=\"search-result-subheader\"></div>' +\n                '<div id=\"search-result-content\"></div>' +\n            '</div>')\n        // イベント登録\n        .ready(function() {\n            $(this)\n                .find('#search-result-area')\n                    // 検索結果エリアのバツアイコンをクリックしたら、\n                    .on(\"click\", '#remove-search-result', function(e) {\n                      var $searchResultArea = $(e.delegateTarget)\n                      // 検索結果エリアを非表示モードにする\n                      $searchResultArea.removeClass('show');\n                      // 検索結果エリアの中身を削除する\n                      $searchResultArea.find('#search-result-subheader').empty();\n                      $searchResultArea.find('#search-result-content').empty();\n                    })\n                    // 前ページリンクをクリックしたら、１ページ前を検索する\n                    .on(\"click\", \"#prevPageLink\", {navi:-1}, doSearch)\n                    // 次ページリンクをクリックしたら、１ページ後を検索する\n                    .on(\"click\", \"#nextPageLink\", {navi:1}, doSearch);\n        });\n\n\n\n    /**\n     * 検索処理\n     *\n     * @param  {eventObject} event\n     * @return {boolean}  submit処理を中断させるために必ずfalseを返却する\n     */\n    function doSearch(event){\n      // 検索フィールドの値をトリムして取得\n      var searchQuery = $.trim($('#search-query').val());\n      // 空の場合は検索処理を実行しない\n      if(searchQuery.length == 0) {\n        return false;\n      }\n\n\n      // 表示開始位置、表示件数の取得\n      var start = parseInt($('#search-start').val()),\n          num = parseInt($('#search-num').val());\n      // 表示開始位置のチェック\n      if(start < 0) {\n        start = 0;\n      }\n      // 表示件数のチェック\n      if(num < 1 || num > 100) {\n        num = 20;\n      }\n      // 表示ページ情報の取得\n      switch(event.data.navi) {\n        case -1:\n          // 前のページの場合\n          start -= num;\n          break;\n        case 1:\n          // 次のページの場合\n          start += num;\n          break;\n        default:\n        case 0:\n          start = 0;\n          break;\n      }\n\n\n      // URLを構築\n      var url = FESS_JSON_ENDPOINT + '?callback=?' + // 別ドメインを想定してJSONP形式でリクエストを送信する\n                                     '&q=' + encodeURIComponent(searchQuery) +\n                                     '&start=' + start +\n                                     '&num=' + num;\n\n      // 検索リクエスト送信\n      // 別ドメインを想定してJSONP形式でリクエストを送信する\n      $.ajax({\n          url: url,\n          dataType: 'jsonp',\n          success: renderSearchResult\n      });\n\n\n      // ページ情報の更新\n      $('#searchNum').val(num);\n\n      // ページ表示を上部に移動\n      $(document).scrollTop(0);\n\n      // サブミットを抑止するためにfalseを返す\n      return false;\n    };\n\n\n    /**\n     * 検索成功時に検索結果を描画する\n     *\n     * @param  {Anything} data レスポンスデータ\n     */\n    function renderSearchResult(data) {\n      // 検索結果処理\n      var dataResponse = data.response;\n      // ステータスチェック\n      if(dataResponse.status != 0) {\n        alert(\"検索中に問題が発生しました。\");\n        return;\n      }\n\n      // 検索結果領域を表示する\n      $('#search-result-area').addClass('show');\n\n      var $searchResultSubheader = $('#search-result-subheader'),\n          $searchResultContent = $('#search-result-content'),\n          record_count = dataResponse.record_count;\n\n      // 検索結果がない場合\n      if(record_count == 0) {\n        // サブヘッダーに出力\n        $searchResultSubheader[0].innerHTML =  '<div id=\"remove-search-result\" style=\"float:right;\"><i class=\"fa fa-times\"></i></div>';\n\n        // 結果領域に出力\n        $searchResultContent[0].innerHTML = '<b>' + dataResponse.q + '</b>に一致する情報は見つかりませんでした。';\n\n        return;\n      }\n\n\n      // 検索にヒットした場合\n      var page_number = dataResponse.page_number,\n          page_size = dataResponse.page_size,\n          page_count = dataResponse.page_count,\n          startRange = (page_number - 1) * page_size + 1,\n          endRange = page_number * page_size,\n          i = 0,\n          max,\n          offset = startRange - 1;\n\n      $('#search-start').val(offset);\n\n\n      // サブヘッダーに出力\n      $searchResultSubheader[0].innerHTML = '<b>' + dataResponse.q + '</b> の検索結果 ' +\n                                record_count + \" 件中 \" +  startRange + ' - ' +\n                                endRange + ' 件目 (' + dataResponse.exec_time + ' 秒)' +\n                               '<div id=\"remove-search-result\" style=\"float:right;\"><i class=\"fa fa-times\"></i></div>'\n\n      // 検索結果領域のクリア\n      $searchResultContent.empty();\n\n\n      // 検索結果の出力\n      var $resultBody = $(\"<ol/>\");\n      var results = dataResponse.result;\n      for(i = 0, max = results.length; i < max; i++) {\n        var element =\n            '<li>' +\n                '<h4 class=\"title\">' +\n                    '<a href=\"' +results[i].url_link + '\">' + results[i].title + '</a>' +\n                '</h4>' +\n                '<div class=\"body\">' +\n                    results[i].content_description +\n                    '<br/>' +\n                    '<cite>' + results[i].site + '</cite>' +\n                '</div>' +\n            '</li>';\n\n        $(element).appendTo($resultBody);\n      }\n      $resultBody.appendTo($searchResultContent);\n\n\n      // ページ番号情報の出力\n      var pageArea = [];\n      pageArea.push('<div id=\"pageInfo\">', page_number, 'ページ目<br/>');\n      if(page_number > 1) {\n        // 前のページへのリンク\n        pageArea.push('<a id=\"prevPageLink\" href=\"#\">&lt;&lt;前ページへ</a> ');\n      }\n      if(page_number < page_count) {\n        // 次のページへのリンク\n        pageArea.push('<a id=\"nextPageLink\" href=\"#\">次ページへ&gt;&gt;</a>');\n      }\n      pageArea.push('</div>');\n      $(pageArea.join(\"\")).appendTo($searchResultContent);\n    }\n});\n\n```\n\n\n```css:full-text-search.css\n@charset \"UTF-8\";\n\n#search-area {\n    margin-bottom: 1em;\n}\n\n.search-input-area {\n    position:relative;\n}\n\n/* 入力項目 */\n#search-query {\n    padding: 0.7em 2em;\n    width: 100%;\n    color: black;\n    font-family: arial,sans-serif;\n    font-size: 1em;\n    border: 1px solid #ccc;\n    border-radius: 2em;\n    outline: 0;\n}\n\n.search-input-area input:focus {\n    border: 1px solid #4d90fe;\n}\n\n/* アイコンは入力項目の左と右に配置する */\n.search-input-area .left-icon,\n.search-input-area .right-icon {\n    /* 縦方向の中央寄せ */\n    position:absolute;\n    top: 50%;\n    margin-top: -0.5em;\n    font-sise: 1em;\n    /* 要素にマウスを合わせたら、マウスポインタのマークを変える */\n    cursor:pointer;\n}\n\n.search-input-area .left-icon {\n    left: 0.7em;\n    color:#444;\n}\n\n.search-input-area .right-icon {\n    right: 0.7em;\n    /* 最初は、グレーアウトしておく */\n    color: #ccc;\n}\n\n/* アイコンにマウスを合わせたら、サイズを大きくする */\n.search-input-area .left-icon:hover,\n.search-input-area .right-icon:hover {\n    font-size: 1.4em;\n}\n\n\n.search-input-area .left-icon:hover {\n    left: 0.5em;\n}\n\n\n.search-input-area .right-icon:hover {\n    right: 0.5em;\n}\n\n/* 検索結果表示時に適用するスタイル */\n#search-result-area.show {\n    background: #f8f8f7;\n    border: 0px solid;\n    border-radius: 0.5em;\n    margin-top: 1em;\n    margin-bottom: 1em;\n    padding: 1em;\n}\n\n```\n\n### ドキュメントに全文検索用資産の読み込み処理を追加\n前手順でドキュメント用Webサーバに配置した`full-text-search.js`と`full-text-search.css`を、\n各ドキュメントから読み込むようにします。\n`full-text-search.js`はjQueryに依存しているので、\n既存のドキュメントで読み込んでいない場合はjQueryも読み込みも追加してください。\n\nドキュメント用Webサーバがこのようなフォルダ構成だとしたら、\n\n```\nドキュメント用Webサーバのドキュメントルート\n├── full-text-search.css\n├── full-text-search.js\n└── asciidoctor-sample\n    └── asciidoctor-sample.html\n```\n\n\n`asciidoctor-sample.adoc`には下記を追加します。\n\n```\n++++\n<link rel=\"stylesheet\" href=\"../full-text-search.css\"></link>\n<script\n  src=\"https://code.jquery.com/jquery-3.2.1.min.js\"\n  integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\"\n  crossorigin=\"anonymous\"></script>\n<script src=\"../full-text-search.js\"></script>\n++++\n```\n\n### 全文検索ができるかの確認\n以上の手順を実施すると、Asdciidoctorで全文検索ができるようになります。\nドキュメントをブラウザで見ると、目次上部に検索窓が追加されています。\n![7_全文検索イメージ_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/99093cd6-58e8-7cde-a3d8-5bec2a020668.png)\n<br/>\n\n検索条件を入力し、虫眼鏡アイコンをクリックすると、検索結果が表示されます。\n![7_全文検索イメージ_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/cde3d8ea-d883-a66b-f88d-9a5941026bc9.png)\n<br/>\n\n\n## まとめ\nFessのREST APIを使用してAsciidoctorで全文検索できるようにする方法を紹介しました。\nFessのREST APIを使えば、Asciidoctorに限らず、様々なシステムに全文検索機能を導入できそうです。\n\n\n## 参考\n* [Fess で作るApache Solrベースの検索サーバー 〜 REST API 編](http://fess.codelibs.org/ja/articles/article-4.html#js)\n* [全文検索サーバー Fess を Docker で動かす](http://qiita.com/cookienote/items/1f2443be25630a78d946)\n\n","comments_count":0,"created_at":"2017-06-26T00:21:37+09:00","likes_count":20,"reactions_count":0},"next":{"fields":{"slug":"/5644c24e-eade-50ca-aa11-83a4eaeba122/","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その２. テスト編","date":"2017-07-24T07:12:10+09:00","excerpt":"やりたいことAngular CLI使って、MEANスタック(MongoDB + Express + Angular + NodeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。フロント側とサーバ側の両方をweb...","tags":["JavaScript","jasmine","TypeScript","AngularJS","Protractor","Qiita"]},"id":"5644c24e-eade-50ca-aa11-83a4eaeba122","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その２. テスト編","rendered_body":"\n<h2>\n<span id=\"やりたいこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたいこと</h2>\n\n<ul>\n<li>Angular CLI使って、MEANスタック(<strong>M</strong>ongoDB + <strong>E</strong>xpress + <strong>A</strong>ngular + <strong>N</strong>odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。</li>\n<li>フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。</li>\n<li>Dockerを使ってアプリを簡単に配布したい。</li>\n</ul>\n\n<p>これらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。</p>\n\n<ul>\n<li><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\" id=\"reference-fc6741a6eda3b7ffd9f1\">その１. ビルド編</a></li>\n<li>その２. テスト編　⇦　今回はココ</li>\n<li>その３. Dockerビルド編</li>\n</ul>\n\n<h2>\n<span id=\"その２-テスト編\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%81%AE%EF%BC%92-%E3%83%86%E3%82%B9%E3%83%88%E7%B7%A8\"><i class=\"fa fa-link\"></i></a>その２. テスト編</h2>\n\n<p><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\">その１. ビルド編</a>では、Angular CLIで作成したプロジェクトをベースに、<br>\nMongoDBに登録しているメッセージを画面に一覧で表示するアプリを作成しました。<br>\n今回は、クライアント側とサーバ側の<a href=\"https://jasmine.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">Jasmine</a>を使った単体テスト、<a href=\"http://www.protractortest.org/#/\" rel=\"nofollow noopener\" target=\"_blank\">Protractor</a>を使ったE2Eテスト、それらを実行するnpm scriptsを作成します。<br>\n最終的には下記のように<code>npm test</code>コマンドで単体テストが実行できるようになります。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" alt=\"10_単体テスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png\"></a></p>\n\n<p>またE2Eテストは<code>npm run e2e</code>コマンドで実施できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" alt=\"20_E2Eテスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png\"></a></p>\n\n<h3>\n<span id=\"プロジェクト構成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクト構成</h3>\n\n<p>今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。<br>\n<a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\">その１. ビルド編</a>で作成したものをベースにテスト用の資産を追加します。詳細は<a href=\"https://github.com/Takumon/angular4-express4-typescritp2/tree/test\" rel=\"nofollow noopener\" target=\"_blank\">リポジトリ</a>を参照してください。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">プロジェクト構成（完成イメージ）</span></div>\n<div class=\"highlight\"><pre>.\n├── dist                              ・・・(1) コンパイル資産出力先\n│   ├── server\n│   │   ├── ...\n│   │   ...\n│   │ \n│   └── server_test                      ・・・(1-1)　コンパイルされたサーバ側テスト資産\n│       ├── app.spec.js\n│       ├── app.spec.js.map\n│       ├── test.server.conf.js\n│       ├── test.server.conf.js.map\n│       ├── test.server.js\n│       └── test.server.js.map\n├── e2e                                ・・・(2)　E2Eテスト資産\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── server\n│   ├── ...\n│   ...\n│\n├── server_test                         ・・・(3)　サーバ側テスト資産\n│   ├── app.spec.ts\n│   ├── test.server.conf.ts\n│   ├── test.server.ts\n│   └── tsconfig.server_test.json\n├── src\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts      ・・・(4)　クライアント側テスト資産\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       ├── message.service.spec.ts ・・・(4)　クライアント側テスト資産\n│   │       └── message.service.ts\n│   ...\n│\n├── package-lock.json\n├── package.json\n├── protractor.conf.js                   ・・・(5)　E2Eテスト設定ファイル\n├── proxy.conf.json\n├── karma.conf.js\n├── tsconfig.json\n├── tslint.json\n└── README.md\n</pre></div>\n</div>\n\n<h4>\n<span id=\"各資産について\" class=\"fragment\"></span><a href=\"#%E5%90%84%E8%B3%87%E7%94%A3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>各資産について</h4>\n\n<h5>\n<span id=\"1-dist\" class=\"fragment\"></span><a href=\"#1-dist\"><i class=\"fa fa-link\"></i></a>(1) dist</h5>\n\n<p>コンパイル資産出力先。</p>\n\n<h5>\n<span id=\"1-1-distserver_test\" class=\"fragment\"></span><a href=\"#1-1-distserver_test\"><i class=\"fa fa-link\"></i></a>(1-1) dist/server_test</h5>\n\n<p>コンパイルされたサーバ側テスト資産(JSファイル)の出力先。<br>\nデプロイを考慮して本資産(dist/server)とは別ディレクトリにしています。</p>\n\n<h5>\n<span id=\"2-server_test\" class=\"fragment\"></span><a href=\"#2-server_test\"><i class=\"fa fa-link\"></i></a>(2) server_test</h5>\n\n<p>サーバ側テスト資産のディレクトリ。<br>\nコンパイル用の設定ファイルとテスト用の設定ファイルもココに格納します。</p>\n\n<h5>\n<span id=\"3-e2e\" class=\"fragment\"></span><a href=\"#3-e2e\"><i class=\"fa fa-link\"></i></a>(3) e2e</h5>\n\n<p>E2Eテスト用資産のディレクトリ。</p>\n\n<h5>\n<span id=\"4-srcapp配下のspectsファイル\" class=\"fragment\"></span><a href=\"#4-srcapp%E9%85%8D%E4%B8%8B%E3%81%AEspects%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\"><i class=\"fa fa-link\"></i></a>(4) src/app配下のspec.tsファイル</h5>\n\n<p>フロント側テスト資産。<br>\nコンパイルやテストは<code>ng</code>コマンドで実施します。</p>\n\n<h5>\n<span id=\"5-protractorconfjs\" class=\"fragment\"></span><a href=\"#5-protractorconfjs\"><i class=\"fa fa-link\"></i></a>(5) protractor.conf.js</h5>\n\n<p>E2Eテスト設定ファイル。<br>\n今回はAngular CLIでプロジェクトが作成するデフォルトから少しだけ修正します。</p>\n\n<h2>\n<span id=\"構築手順\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E7%AF%89%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>構築手順</h2>\n\n<h3>\n<span id=\"1-テストに必要なライブラリをインストール\" class=\"fragment\"></span><a href=\"#1-%E3%83%86%E3%82%B9%E3%83%88%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>1. テストに必要なライブラリをインストール</h3>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install --save zone.js@0.8.12\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n</pre></div></div>\n\n<ul>\n<li>\n<a href=\"https://www.npmjs.com/package/zone.js\" rel=\"nofollow noopener\" target=\"_blank\"><code>zone.js@0.8.12</code></a>\n\n<ul>\n<li>クライアント側のテストで使用します。Angular CLIでプロジェクトを作成した時点でインストールされていますが、テスト実行時に<code>Failed: Cannot create property '__creationTrace__' on string '__zone_symbol__optimizedZoneEventTask'</code>のようなエラーが出ます。<a href=\"https://github.com/angular/zone.js/issues/832\" rel=\"nofollow noopener\" target=\"_blank\">GitHubのissues</a>によるとv0.8.12はエラーが出ないそうなので、v0.8.12を再インストールします。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://www.npmjs.com/package/supertest\" rel=\"nofollow noopener\" target=\"_blank\"><code>supertest</code></a>\n\n<ul>\n<li>サーバ側のテストで使用します。APIテストを簡単にしてくれます。</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"2-クライアント側を作成\" class=\"fragment\"></span><a href=\"#2-%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2. クライアント側を作成</h3>\n\n<p>コンポーネント(app.component.ts)とサービス(message.service.ts)に対するテストコードを作成します。<br>\nクライアント側のテスト実行には<code>ng test</code>コマンドを使うので、ビルド周りの設定は不要です。</p>\n\n<h4>\n<span id=\"srcappappcomponentspects\" class=\"fragment\"></span><a href=\"#srcappappcomponentspects\"><i class=\"fa fa-link\"></i></a>src/app/app.component.spec.ts</h4>\n\n<p>コンポーネントは画面描画についてテストします。<br>\nコンポーネントで使うサービスは、<code>TestBed</code>の<code>overrideComponent</code>メソッドを使ってモック化します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.spec.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"k\">async</span><span class=\"p\">,</span> <span class=\"nx\">ComponentFixture</span><span class=\"p\">,</span> <span class=\"nx\">TestBed</span><span class=\"p\">,</span> <span class=\"nx\">inject</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/forms'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.component'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'AppComponent'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// テスト対象のComponent</span>\n  <span class=\"kd\">let</span> <span class=\"na\">component</span><span class=\"p\">:</span> <span class=\"nx\">AppComponent</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// テスト対象のFixture</span>\n  <span class=\"kd\">let</span> <span class=\"na\">fixture</span><span class=\"p\">:</span> <span class=\"nx\">ComponentFixture</span><span class=\"o\">&lt;</span><span class=\"nx\">AppComponent</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// MessageServiceのモック</span>\n  <span class=\"kd\">class</span> <span class=\"nx\">MessageServiceMock</span> <span class=\"p\">{</span>\n    <span class=\"nx\">getAll</span><span class=\"p\">():</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span>  <span class=\"p\">{</span> <span class=\"na\">messages</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n      <span class=\"p\">]};</span>\n\n      <span class=\"k\">return</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">([</span><span class=\"nx\">response</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n      <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">],</span>\n      <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"nx\">AppComponent</span>\n      <span class=\"p\">],</span>\n    <span class=\"p\">})</span>\n<span class=\"err\">　　　　　　　　　</span><span class=\"c1\">// MessageServiceのモックを設定</span>\n    <span class=\"p\">.</span><span class=\"nx\">overrideComponent</span><span class=\"p\">(</span><span class=\"nx\">AppComponent</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">set</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span> <span class=\"na\">provide</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">,</span> <span class=\"na\">useClass</span><span class=\"p\">:</span> <span class=\"nx\">MessageServiceMock</span> <span class=\"p\">},</span>\n        <span class=\"p\">]</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n    <span class=\"p\">.</span><span class=\"nx\">compileComponents</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">fixture</span> <span class=\"o\">=</span> <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">createComponent</span><span class=\"p\">(</span><span class=\"nx\">AppComponent</span><span class=\"p\">);</span>\n    <span class=\"nx\">component</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">componentInstance</span><span class=\"p\">;</span>\n    <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">detectChanges</span><span class=\"p\">();</span>\n  <span class=\"p\">}));</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'オブジェクトが生成されるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">debugElement</span><span class=\"p\">.</span><span class=\"nx\">componentInstance</span><span class=\"p\">;</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">).</span><span class=\"nx\">toBeTruthy</span><span class=\"p\">();</span>\n  <span class=\"p\">}));</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージを３件保持しているか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">component</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">([</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n    <span class=\"p\">]);</span>\n  <span class=\"p\">}));</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'画面にメッセージが３件表示されているか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">el</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">debugElement</span><span class=\"p\">.</span><span class=\"nx\">nativeElement</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ1'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ2'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ3'</span><span class=\"p\">);</span>\n  <span class=\"p\">}));</span>\n<span class=\"p\">});</span>\n\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappmessagemessageservicespects一部抜粋\" class=\"fragment\"></span><a href=\"#srcappmessagemessageservicespects%E4%B8%80%E9%83%A8%E6%8A%9C%E7%B2%8B\"><i class=\"fa fa-link\"></i></a>src/app/message/message.service.spec.ts(一部抜粋)</h4>\n\n<p>サービスのテストです。<br>\nサーバとのやりとり(HTTP通信)については<code>MockBackend</code>を使ってモック化しています。<br>\nなお<code>Error</code>は別途モックを作らなければなりません。<br>\n全て載せると冗長なので<code>register</code>メソッドのテストは割愛しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.service.spec.ts(一部抜粋)</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">TestBed</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">,</span> <span class=\"nx\">inject</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">HttpModule</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">,</span> <span class=\"nx\">Http</span><span class=\"p\">,</span> <span class=\"nx\">Response</span><span class=\"p\">,</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MockConnection</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">RequestMethod</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message.service'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'MessageService'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　</span><span class=\"c1\">// HTTP通信エラー用のモック</span>\n  <span class=\"kd\">class</span> <span class=\"nx\">MockError</span> <span class=\"kd\">extends</span> <span class=\"nx\">Response</span> <span class=\"kr\">implements</span> <span class=\"nb\">Error</span> <span class=\"p\">{</span>\n    <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">;</span>\n    <span class=\"nl\">message</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n<span class=\"err\">　　　　</span><span class=\"c1\">// HTTP通信はMockBackendでモック化</span>\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n      <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">HttpModule</span><span class=\"p\">],</span>\n      <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MessageService</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"na\">provide</span><span class=\"p\">:</span> <span class=\"nx\">Http</span><span class=\"p\">,</span>\n        <span class=\"na\">useFactory</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nx\">backend</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nx\">Http</span><span class=\"p\">(</span><span class=\"nx\">backend</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">),</span>\n        <span class=\"na\">deps</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">]</span>\n      <span class=\"p\">},</span> <span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">]</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'オブジェクトが生成されるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">service</span><span class=\"p\">).</span><span class=\"nx\">toBeTruthy</span><span class=\"p\">();</span>\n  <span class=\"p\">})));</span>\n\n\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'getAll'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージが取得できるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// HTTP通信のモックで返す具体的な値の設定</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">body</span> <span class=\"o\">=</span>  <span class=\"p\">{</span> <span class=\"na\">messages</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n        <span class=\"p\">]};</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">ops</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">({</span>\n          <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n          <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">mockRespond</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">Response</span><span class=\"p\">(</span><span class=\"nx\">ops</span><span class=\"p\">));</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストの内容を検証</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">RequestMethod</span><span class=\"p\">.</span><span class=\"nx\">Get</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// レスポンスの内容を検証</span>\n      <span class=\"nx\">service</span><span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">().</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">([</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n        <span class=\"p\">]);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">})));</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'異常時にエラーハンドリングされるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// HTTP通信のモックで返す具体的な値の設定</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">body</span> <span class=\"o\">=</span>  <span class=\"p\">{</span>\n          <span class=\"na\">title</span> <span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"s1\">'エラー'</span>\n        <span class=\"p\">};</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">ops</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">({</span>\n          <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span>\n          <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">mockError</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">MockError</span><span class=\"p\">(</span><span class=\"nx\">ops</span><span class=\"p\">));</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストの内容を検証</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">RequestMethod</span><span class=\"p\">.</span><span class=\"nx\">Get</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// レスポンスの内容を検証</span>\n      <span class=\"nx\">service</span><span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">().</span><span class=\"nx\">subscribe</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">fail</span><span class=\"p\">(</span><span class=\"s1\">'エラーハンドリングされなかった。'</span><span class=\"p\">);</span>\n      <span class=\"p\">},</span> <span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span> <span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"s1\">'エラー'</span>\n        <span class=\"p\">});</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">})));</span>\n\n  <span class=\"p\">});</span>\n\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"3-サーバ側を作成\" class=\"fragment\"></span><a href=\"#3-%E3%82%B5%E3%83%BC%E3%83%90%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>3. サーバ側を作成</h3>\n\n<p>プロジェクトの直下にserver_testディレクトリを作ってテストコードを書いていきます。<br>\nどちらかというと結合テストよりで、１つ１つの資産に対してではなくapp.tsに対して、実際にDBに接続しながらAPIテストを行います。規模が小さい場合はコレで充分だと思います。<br>\nまたExpressのテストフレームワークは<a href=\"https://mochajs.org/\" rel=\"nofollow noopener\" target=\"_blank\">Mocha</a>が一般的ですが、クライアント側と統一したいので、今回は<a href=\"https://jasmine.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">Jasmine</a>を使うことにします。</p>\n\n<h4>\n<span id=\"server_testappspects一部抜粋\" class=\"fragment\"></span><a href=\"#server_testappspects%E4%B8%80%E9%83%A8%E6%8A%9C%E7%B2%8B\"><i class=\"fa fa-link\"></i></a>server_test/app.spec.ts(一部抜粋)</h4>\n\n<p>ポイントとしてはテスト実行前にMessageモデルを使ってDBを初期化していることです。<br>\nそれによりテストデータがテストメソッドごとに想定する形になるようにしています。<br>\n異常時のテストは、Messsageのfindメソッドでエラーが発生するようにJasmineの<code>spyOn</code>メソッドで処理を置き換えます。<br>\n全て載せると冗長なのでメッセージ登録のテストは割愛しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.spec.ts(一部抜粋)</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">supertest</span> <span class=\"k\">from</span> <span class=\"s1\">'supertest'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"nx\">app</span> <span class=\"k\">from</span> <span class=\"s1\">'../server/app'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../server/models/message'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">request</span> <span class=\"o\">=</span> <span class=\"nx\">supertest</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">endpoint</span> <span class=\"o\">=</span> <span class=\"s1\">'/api/messages'</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">messageAscending</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">,</span> <span class=\"nx\">m2</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&gt;</span> <span class=\"nx\">m2</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&lt;</span> <span class=\"nx\">m2</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"c1\">// テスト前にDBのmessagesを初期化する</span>\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">({},</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n  <span class=\"p\">});</span>\n\n\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'Get'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'レスポンスがjson形式でステータスコードが200か'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n      <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// 検証</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'application/json'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">);</span>\n        <span class=\"p\">}).</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージ一覧が取得できるか'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n      <span class=\"kd\">const</span> <span class=\"nx\">testData</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ１'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ２'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ３'</span> <span class=\"p\">},</span>\n      <span class=\"p\">];</span>\n<span class=\"err\">　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// 事前準備（テストデータを作成）</span>\n      <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">testData</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">erro</span> <span class=\"p\">,</span> <span class=\"nx\">doc</span> <span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n        <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n          <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// 検証</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">sortedMessages</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">sort</span><span class=\"p\">(</span><span class=\"nx\">messageAscending</span><span class=\"p\">);</span>\n\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ１'</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ２'</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ３'</span><span class=\"p\">);</span>\n          <span class=\"p\">})</span>\n          <span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">});</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'異常時にエラーハンドリングされるか'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n      <span class=\"c1\">// エラーとなるようにMessageのfindメソッドを置き換える</span>\n      <span class=\"nx\">spyOn</span><span class=\"p\">(</span><span class=\"nx\">Message</span><span class=\"p\">,</span> <span class=\"s1\">'find'</span><span class=\"p\">).</span><span class=\"nx\">and</span><span class=\"p\">.</span><span class=\"nx\">callFake</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">callback</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">'エラー'</span><span class=\"p\">),</span> <span class=\"kc\">null</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n<span class=\"err\">　　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n      <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n          <span class=\"c1\">// 検証</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'application/json'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">);</span>\n\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'エラー'</span><span class=\"p\">);</span>\n        <span class=\"p\">})</span>\n        <span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"4-単体テスト周りの環境を整備\" class=\"fragment\"></span><a href=\"#4-%E5%8D%98%E4%BD%93%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>4. 単体テスト周りの環境を整備</h3>\n\n<p>E2Eの説明に入る前に、いったん単体テスト周りの環境を整備します。</p>\n\n<h4>\n<span id=\"packagejson\" class=\"fragment\"></span><a href=\"#packagejson\"><i class=\"fa fa-link\"></i></a>package.json</h4>\n\n<p><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792#pakcagejson\" id=\"reference-fc6741a6eda3b7ffd9f1\">前回</a>作成したものをベースに単体テストのスクリプトを追加してください。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\"> </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-p test:*\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"test:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng test\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"test:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s build:server_test -p watch:server_test  boot:server_test\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"watch:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -w -p ./server_test/tsconfig.server_test.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"boot:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"nodemon ./dist/server_test/test.server.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>test</strong>でクライアント側とサーバ側のテストを実行します。</li>\n<li>\n<strong>test:client</strong>でクライアント側のテストを実行します。Angular CLIのngコマンドにお任せしています。</li>\n<li>\n<strong>watch:server_test</strong>でサーバ側テスト資産をウォッチして変更があればコンパイルするようにします。</li>\n<li>\n<strong>boot:server_test</strong>でコンパイルしたサーバ側テスト資産を起動します。nodeではなくnodemonを使うことで資産に更新があった場合でも即座に反映するようにしています。</li>\n<li>\n<strong>build:server_test</strong>でサーバ側テスト資産をコンパイルします。コンパイル時の設定は下で触れるserver_test/test.server.conf.tsを使います。</li>\n</ul>\n\n<h4>\n<span id=\"server_testtestserverts\" class=\"fragment\"></span><a href=\"#server_testtestserverts\"><i class=\"fa fa-link\"></i></a>server_test/test.server.ts</h4>\n\n<p>サーバ側テストの起動処理を書きます。<br>\nレポーターには<a href=\"https://www.npmjs.com/package/jasmine-spec-reporter\" rel=\"nofollow noopener\" target=\"_blank\">jasmine-spec-reporter</a>を使いましょう。このライブラリはAngular CLIで作ったプロジェクトにはデフォルトでインストール済みです。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">test.server.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">SpecReporter</span><span class=\"p\">,</span> <span class=\"nx\">DisplayProcessor</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'jasmine-spec-reporter'</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">Jasmine</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'jasmine'</span><span class=\"p\">);</span>\n<span class=\"k\">import</span> <span class=\"nx\">SuiteInfo</span> <span class=\"o\">=</span> <span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">SuiteInfo</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">config</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./test.server.conf'</span><span class=\"p\">;</span>\n\n\n<span class=\"kd\">class</span> <span class=\"nx\">CustomProcessor</span> <span class=\"kd\">extends</span> <span class=\"nx\">DisplayProcessor</span> <span class=\"p\">{</span>\n    <span class=\"kr\">public</span> <span class=\"nx\">displayJasmineStarted</span><span class=\"p\">(</span><span class=\"nx\">info</span><span class=\"p\">:</span> <span class=\"nx\">SuiteInfo</span><span class=\"p\">,</span> <span class=\"nx\">log</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">string</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s2\">`TypeScript </span><span class=\"p\">${</span><span class=\"nx\">log</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">runner</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Jasmine</span><span class=\"p\">();</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">loadConfig</span><span class=\"p\">(</span><span class=\"nx\">config</span><span class=\"p\">);</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">addReporter</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">SpecReporter</span><span class=\"p\">({</span>\n    <span class=\"na\">customProcessors</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">CustomProcessor</span><span class=\"p\">],</span>\n<span class=\"p\">}));</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">onComplete</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">passed</span><span class=\"p\">){</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nx\">passed</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Success'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"s1\">'Failed'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">execute</span><span class=\"p\">();</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"server_testtestserverconfts\" class=\"fragment\"></span><a href=\"#server_testtestserverconfts\"><i class=\"fa fa-link\"></i></a>server_test/test.server.conf.ts</h4>\n\n<p>サーバ側テスト起動時の設定です。<br>\n注意点として<code>spec_files</code>に指定する相対パスはプロジェクト直下が起点になります。そのため<code>__dirname</code>を使って指定してください。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">test.server.conf.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">spec_dir</span><span class=\"p\">:</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span>\n  <span class=\"na\">spec_files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">__dirname</span><span class=\"p\">}</span><span class=\"s2\">/*spec.js`</span>\n  <span class=\"p\">],</span>\n  <span class=\"s1\">'stopSpecOnExpectationFailure'</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"s1\">'random'</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n<span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"server_testtsconfigserver_testjson\" class=\"fragment\"></span><a href=\"#server_testtsconfigserver_testjson\"><i class=\"fa fa-link\"></i></a>server_test/tsconfig.server_test.json</h4>\n\n<p>サーバ側テスト資産をコンパイルする時の設定ファイルです。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">tsconfig.server_test.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"extends\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../tsconfig.json\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"preserveConstEnums\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"outDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"mapRoot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"module\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"commonjs\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"include\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"s2\">\"**/*.spec.ts\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"./test.server.ts\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"./test.server.conf.ts\"</span><span class=\"w\">\n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<p><code>outDir</code>が<code>../dist/server_test</code>ではなく<code>../dist</code>であることに注意してください。<br>\nテスト資産は<code>server</code>ディレクトリ配下の資産に依存しているため、<code>../dist/server_test</code>を指定するとコンパイルした時に下記のように出力されてしまいます。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">（悪い例）outDirに\"../dist/server_test\"を指定したときのコンパイル結果</span></div>\n<div class=\"highlight\"><pre>.\n└── dist\n    └── server_test\n        ├── server\n        └── server_test \n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">（良い例）outDirに\"../dist\"を指定したときのコンパイル結果</span></div>\n<div class=\"highlight\"><pre>.\n└── dist\n    ├── server\n    └── server_test \n</pre></div>\n</div>\n\n<h3>\n<span id=\"5-e2eテストを作成\" class=\"fragment\"></span><a href=\"#5-e2e%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>5. E2Eテストを作成</h3>\n\n<p>単体テストを作成したので次はE2Eテストを作りましょう。<br>\nAngular CLIで作成したプロジェクトにデフォルトで用意されている<a href=\"http://www.protractortest.org/#/\" rel=\"nofollow noopener\" target=\"_blank\">Protractor</a>を使ったテストコードを作成します。</p>\n\n<h4>\n<span id=\"e2eappe2e-spects\" class=\"fragment\"></span><a href=\"#e2eappe2e-spects\"><i class=\"fa fa-link\"></i></a>e2e/app.e2e-spec.ts</h4>\n\n<p>基本的にelementメソッドで要素を取得して、sendKeysメソッドやclickメソッドで操作を行います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.e2e-spec.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.po'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">browser</span><span class=\"p\">,</span> <span class=\"nx\">element</span><span class=\"p\">,</span> <span class=\"nx\">by</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'protractor'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'E2Eテスト'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"na\">page</span><span class=\"p\">:</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'画面タイトルが正しいか'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">navigateTo</span><span class=\"p\">();</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">getParagraphText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'メッセージ一覧'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージが登録できるか'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">navigateTo</span><span class=\"p\">();</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">newMessage</span> <span class=\"o\">=</span> <span class=\"s2\">`サンプルメッセージ </span><span class=\"p\">${</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">toString</span><span class=\"p\">()}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n    <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessage'</span><span class=\"p\">)).</span><span class=\"nx\">sendKeys</span><span class=\"p\">(</span><span class=\"nx\">newMessage</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessageButton'</span><span class=\"p\">)).</span><span class=\"nx\">click</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// 登録後メッセージ入力項目が初期化されているか</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessage'</span><span class=\"p\">)).</span><span class=\"nx\">getText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 登録後一覧に登録したメッセージが含まれているか</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'messageList'</span><span class=\"p\">)).</span><span class=\"nx\">all</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">tagName</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">));</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">last</span><span class=\"p\">().</span><span class=\"nx\">getText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">newMessage</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"6-e2eテスト周りの環境を整備\" class=\"fragment\"></span><a href=\"#6-e2e%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>6. E2Eテスト周りの環境を整備</h3>\n\n<h4>\n<span id=\"packagejson-1\" class=\"fragment\"></span><a href=\"#packagejson-1\"><i class=\"fa fa-link\"></i></a>package.json</h4>\n\n<p>Angular CILプロジェクトデフォルトの\"e2e\"コマンドは削除して、スクリプトに下記を追加してください。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\"> </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"e2e\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s  webdriver:update -p webdriver:start protractor\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"webdriver:update\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"webdriver-manager update\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"webdriver:start\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"webdriver-manager start\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"protractor\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"protractor protractor.conf.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>e2e</strong>でE2Eテストを実行します。Angular CILプロジェクトデフォルトの<code>e2e</code>コマンド(= <code>ng e2e</code>コマンド)は使いません。<code>ng　e2e</code>はクライアント資産だけコンパイルして起動する処理が入っているからです。今回はビルドしたアプリ(クライアントとサーバが１つにまとまったアプリ)に対してテストします。</li>\n<li>\n<strong>webdriver:update</strong>でE2Eテストに必要なWebDriverをインストールまたは更新します。</li>\n<li>\n<strong>webdriver:start</strong>でWebDriverを起動します。Protractorのテストは事前にWebDriverを起動しておく必要があります。</li>\n<li>\n<strong>protractor</strong>でE2Eテストを実行します。起動時の設定は下で触れるprotractor.conf.jsを使います。</li>\n</ul>\n\n<h4>\n<span id=\"protractorconfjs\" class=\"fragment\"></span><a href=\"#protractorconfjs\"><i class=\"fa fa-link\"></i></a>protractor.conf.js</h4>\n\n<p>デフォルトでbaseUrlのポートは4200になっていますが、今回はビルドしたアプリに対してテストするので3000を指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">protractor.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"p\">...</span>\n  <span class=\"na\">baseUrl</span><span class=\"p\">:</span> <span class=\"s1\">'http://localhost:3000/'</span><span class=\"p\">,</span>\n  <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"7-試してみる\" class=\"fragment\"></span><a href=\"#7-%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>7. 試してみる</h3>\n\n<h4>\n<span id=\"単体テストを実行してみる\" class=\"fragment\"></span><a href=\"#%E5%8D%98%E4%BD%93%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>単体テストを実行してみる</h4>\n\n<ul>\n<li>\n<p>MongoDBをローカルで立ち上げる</p>\n\n<ul>\n<li>具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。</li>\n</ul>\n</li>\n<li><p>プロジェクト直下で<code>npm test</code>コマンドを実行するとテストが実行されます。クライアント側のテスト結果はブラウザに、サーバ側はターミナル（またはコンソール）に表示されます。資産はウォッチしているので、テストコードを修正すると、コンパイルされ再度テストが実行されるでしょう。</p></li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" alt=\"10_単体テスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png\"></a></p>\n\n<h4>\n<span id=\"e2eテストを実行してみる\" class=\"fragment\"></span><a href=\"#e2e%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>E2Eテストを実行してみる</h4>\n\n<ul>\n<li>\n<p>MongoDBをローカルで立ち上げる</p>\n\n<ul>\n<li>これも単体テストと同じでDBを事前に起動しておいてください。</li>\n</ul>\n</li>\n<li>\n<p>ビルドしたアプリを起動する</p>\n\n<ul>\n<li>プロジェクト直下で<code>npm run buildRun</code>を実行し、ビルド資産を起動します。</li>\n</ul>\n</li>\n<li>\n<p><code>npm run e2e</code>する</p>\n\n<ul>\n<li>別ターミナル（またはコマンドプロンプト）を開き、プロジェクト直下で<code>npm run e2e</code>コマンドを実行します。するとブラウザが立ち上がりテストが実行されます。\n<a href=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" alt=\"20_E2Eテスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png\"></a>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h2>\n\n<p>今回はMEANスタックアプリの単体テスト、E2Eテストについて紹介しました。<br>\nこれでビルドとテストができるようになったので、次回「その3. Dockerデプロイ編」では、Dockerでアプリを起動する方法とDockerでアプリのイメージを作ってデプロイする方法ついて紹介します。</p>\n","body":"## やりたいこと\n* Angular CLI使って、MEANスタック(**M**ongoDB + **E**xpress + **A**ngular + **N**odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。\n* フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。\n* Dockerを使ってアプリを簡単に配布したい。\n\nこれらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。\n\n* [その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)\n* その２. テスト編　⇦　今回はココ\n* その３. Dockerビルド編\n\n\n## その２. テスト編\n[その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)では、Angular CLIで作成したプロジェクトをベースに、\nMongoDBに登録しているメッセージを画面に一覧で表示するアプリを作成しました。\n今回は、クライアント側とサーバ側の[Jasmine](https://jasmine.github.io/)を使った単体テスト、[Protractor](http://www.protractortest.org/#/)を使ったE2Eテスト、それらを実行するnpm scriptsを作成します。\n最終的には下記のように`npm test`コマンドで単体テストが実行できるようになります。\n\n![10_単体テスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png)\n\nまたE2Eテストは`npm run e2e`コマンドで実施できるようになります。\n![20_E2Eテスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png)\n\n\n### プロジェクト構成\n今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。\n[その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)で作成したものをベースにテスト用の資産を追加します。詳細は[リポジトリ](https://github.com/Takumon/angular4-express4-typescritp2/tree/test)を参照してください。\n\n```:プロジェクト構成（完成イメージ）\n.\n├── dist                              ・・・(1) コンパイル資産出力先\n│   ├── server\n│   │   ├── ...\n│   │   ...\n│   │ \n│   └── server_test                      ・・・\u001c(1-1)　コンパイルされたサーバ側テスト資産\n│       ├── app.spec.js\n│       ├── app.spec.js.map\n│       ├── test.server.conf.js\n│       ├── test.server.conf.js.map\n│       ├── test.server.js\n│       └── test.server.js.map\n├── e2e                                ・・・\u001c(2)　E2Eテスト資産\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── server\n│   ├── ...\n│   ...\n│\n├── server_test                         ・・・\u001c(3)　サーバ側テスト資産\n│   ├── app.spec.ts\n│   ├── test.server.conf.ts\n│   ├── test.server.ts\n│   └── tsconfig.server_test.json\n├── src\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts      ・・・\u001c(4)　クライアント側テスト資産\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       ├── message.service.spec.ts ・・・\u001c(4)　クライアント側テスト資産\n│   │       └── message.service.ts\n│   ...\n│\n├── package-lock.json\n├── package.json\n├── protractor.conf.js                   ・・・\u001c(5)　E2Eテスト設定ファイル\n├── proxy.conf.json\n├── karma.conf.js\n├── tsconfig.json\n├── tslint.json\n└── README.md\n```\n#### 各資産について\n##### (1) dist\nコンパイル資産出力先。\n\n##### (1-1) dist/server_test\nコンパイルされたサーバ側テスト資産(JSファイル)の出力先。\nデプロイを考慮して本資産(dist/server)とは別ディレクトリにしています。\n\n##### (2) server_test\nサーバ側テスト資産のディレクトリ。\nコンパイル用の設定ファイルとテスト用の設定ファイルもココに格納します。\n\n##### (3) e2e\nE2Eテスト用資産のディレクトリ。\n\n##### (4) src/app配下のspec.tsファイル\nフロント側テスト資産。\nコンパイルやテストは`ng`コマンドで実施します。\n\n##### (5) protractor.conf.js\nE2Eテスト設定ファイル。\n今回はAngular CLIでプロジェクトが作成するデフォルトから少しだけ修正します。\n\n\n\n## 構築手順\n\n### 1. テストに必要なライブラリをインストール\n\n```\n$ npm install --save zone.js@0.8.12\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n```\n\n* [`zone.js@0.8.12`](https://www.npmjs.com/package/zone.js)\n    * クライアント側のテストで使用します。Angular CLIでプロジェクトを作成した時点でインストールされていますが、テスト実行時に`Failed: Cannot create property '__creationTrace__' on string '__zone_symbol__optimizedZoneEventTask'`のようなエラーが出ます。[GitHubのissues](https://github.com/angular/zone.js/issues/832)によるとv0.8.12はエラーが出ないそうなので、v0.8.12を再インストールします。\n* [`supertest`](https://www.npmjs.com/package/supertest)\n    * サーバ側のテストで使用します。APIテストを簡単にしてくれます。\n\n### 2. クライアント側を作成\nコンポーネント(app.component.ts)とサービス(message.service.ts)に対するテストコードを作成します。\nクライアント側のテスト実行には`ng test`コマンドを使うので、ビルド周りの設定は不要です。\n\n#### src/app/app.component.spec.ts\nコンポーネントは画面描画についてテストします。\nコンポーネントで使うサービスは、`TestBed`の`overrideComponent`メソッドを使ってモック化します。\n\n\n```js:app.component.spec.ts\nimport { async, ComponentFixture, TestBed, inject } from '@angular/core/testing';\nimport { FormsModule } from '@angular/forms';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/Rx';\n\nimport { AppComponent } from './app.component';\nimport { MessageService } from './message/message.service';\n\ndescribe('AppComponent', () => {\n  // テスト対象のComponent\n  let component: AppComponent;\n\n  // テスト対象のFixture\n  let fixture: ComponentFixture<AppComponent>;\n\n  // MessageServiceのモック\n  class MessageServiceMock {\n    getAll(): Observable<any> {\n      const response =  { messages : [\n        { message : 'テスト用メッセージ1' },\n        { message : 'テスト用メッセージ2' },\n        { message : 'テスト用メッセージ3' }\n      ]};\n\n      return Observable.from([response]);\n    }\n  }\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [ FormsModule ],\n      declarations: [\n        AppComponent\n      ],\n    })\n　　　　　　　　　// MessageServiceのモックを設定\n    .overrideComponent(AppComponent, {\n      set: {\n        providers: [\n          { provide: MessageService, useClass: MessageServiceMock },\n        ]\n      }\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(AppComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  }));\n\n  it('オブジェクトが生成されるか', async(() => {\n    const app = fixture.debugElement.componentInstance;\n    expect(app).toBeTruthy();\n  }));\n\n\n  it('メッセージを３件保持しているか', async(() => {\n    expect(component.messages).toEqual([\n        { message : 'テスト用メッセージ1' },\n        { message : 'テスト用メッセージ2' },\n        { message : 'テスト用メッセージ3' }\n    ]);\n  }));\n\n\n  it('画面にメッセージが３件表示されているか', async(() => {\n\n    const el = fixture.debugElement.nativeElement;\n\n    expect(el.querySelectorAll('li').length).toEqual(3);\n    expect(el.querySelectorAll('li')[0].textContent).toContain('テスト用メッセージ1');\n    expect(el.querySelectorAll('li')[1].textContent).toContain('テスト用メッセージ2');\n    expect(el.querySelectorAll('li')[2].textContent).toContain('テスト用メッセージ3');\n  }));\n});\n\n```\n\n\n#### src/app/message/message.service.spec.ts(一部抜粋)\nサービスのテストです。\nサーバとのやりとり(HTTP通信)については`MockBackend`を使ってモック化しています。\nなお`Error`は別途モックを作らなければなりません。\n全て載せると冗長なので`register`メソッドのテストは割愛しています。\n\n```js:message.service.spec.ts(一部抜粋)\nimport { TestBed, async, inject } from '@angular/core/testing';\nimport {HttpModule, BaseRequestOptions, Http, Response, ResponseOptions} from '@angular/http';\nimport {MockBackend, MockConnection} from '@angular/http/testing';\nimport { RequestMethod } from '@angular/http';\n\nimport { MessageService } from './message.service';\n\n\ndescribe('MessageService', () => {\n　　　　// HTTP通信エラー用のモック\n  class MockError extends Response implements Error {\n    name: any;\n    message: any;\n  }\n\n　　　　// HTTP通信はMockBackendでモック化\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpModule],\n      providers: [MessageService, {\n        provide: Http,\n        useFactory: (backend, options) => new Http(backend, options),\n        deps: [MockBackend, BaseRequestOptions]\n      }, MockBackend, BaseRequestOptions]\n    });\n  });\n\n  it('オブジェクトが生成されるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n    expect(service).toBeTruthy();\n  })));\n\n\n  describe('getAll', () => {\n\n    it('メッセージが取得できるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n　　　　　　　　　　　　// HTTP通信のモックで返す具体的な値の設定\n      backend.connections.subscribe((conn: MockConnection) => {\n        const body =  { messages : [\n          { message : 'テスト用メッセージ1' },\n          { message : 'テスト用メッセージ2' },\n          { message : 'テスト用メッセージ3' }\n        ]};\n\n        const ops = new ResponseOptions({\n          status: 200,\n          body: JSON.stringify(body)\n        });\n\n        conn.mockRespond(new Response(ops));\n      });\n\n　　　　　　　　　　　　// リクエストの内容を検証\n      backend.connections.subscribe((conn: MockConnection) => {\n        expect(conn.request.url).toEqual('/api/messages');\n        expect(conn.request.method).toEqual(RequestMethod.Get);\n      });\n\n　　　　　　　　　　　　// レスポンスの内容を検証\n      service.getAll().subscribe((res) => {\n        expect(res.messages.length).toEqual(3);\n        expect(res.messages).toEqual([\n          { message : 'テスト用メッセージ1' },\n          { message : 'テスト用メッセージ2' },\n          { message : 'テスト用メッセージ3' }\n        ]);\n      });\n    })));\n\n\n    it('異常時にエラーハンドリングされるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n　　　　　　　　　　　　// HTTP通信のモックで返す具体的な値の設定\n      backend.connections.subscribe((conn: MockConnection) => {\n        const body =  {\n          title : 'エラーが発生しました。',\n          error: 'エラー'\n        };\n\n        const ops = new ResponseOptions({\n          status: 500,\n          body: JSON.stringify(body)\n        });\n\n        conn.mockError(new MockError(ops));\n      });\n\n　　　　　　　　　　　　// リクエストの内容を検証\n      backend.connections.subscribe((conn: MockConnection) => {\n        expect(conn.request.url).toEqual('/api/messages');\n        expect(conn.request.method).toEqual(RequestMethod.Get);\n      });\n\n　　　　　　　　　　　　// レスポンスの内容を検証\n      service.getAll().subscribe(() => {\n        fail('エラーハンドリングされなかった。');\n      }, res => {\n        expect(res).toEqual({\n          title : 'エラーが発生しました。',\n          error: 'エラー'\n        });\n      });\n    })));\n\n  });\n\n\n});\n```\n\n\n\n### 3. サーバ側を作成\nプロジェクトの直下にserver_testディレクトリを作ってテストコードを書いていきます。\nどちらかというと結合テストよりで、１つ１つの資産に対してではなくapp.tsに対して、実際にDBに接続しながらAPIテストを行います。規模が小さい場合はコレで充分だと思います。\nまたExpressのテストフレームワークは[Mocha](https://mochajs.org/)が一般的ですが、クライアント側と統一したいので、今回は[Jasmine](https://jasmine.github.io/)を使うことにします。\n\n#### server_test/app.spec.ts(一部抜粋)\nポイントとしてはテスト実行前にMessageモデルを使ってDBを初期化していることです。\nそれによりテストデータがテストメソッドごとに想定する形になるようにしています。\n異常時のテストは、Messsageのfindメソッドでエラーが発生するようにJasmineの`spyOn`メソッドで処理を置き換えます。\n全て載せると冗長なのでメッセージ登録のテストは割愛しています。\n\n```js:app.spec.ts(一部抜粋)\nimport * as supertest from 'supertest';\n\nimport app from '../server/app';\nimport { Message } from '../server/models/message';\n\n\ndescribe('/api/messages', () => {\n  const request = supertest(app);\n  const endpoint = '/api/messages';\n\n  const messageAscending = (m1, m2) => {\n    if (m1.message > m2.message) {\n      return 1;\n    }\n\n    if (m1.message < m2.message) {\n      return -1;\n    }\n\n    return 0;\n  };\n\n  // テスト前にDBのmessagesを初期化する\n  beforeEach(() => {\n    Message.remove({}, () => {});\n  });\n\n\n  describe('Get', () => {\n\n    it('レスポンスがjson形式でステータスコードが200か', (done) => {\n\n　　　　　　　　　　　　　// リクエストを投げる\n      request.get(endpoint)\n        .expect((res) => {\n\n　　　　　　　　　　　　　　　　　　　　// 検証\n          expect(res.type).toEqual('application/json');\n          expect(res.statusCode).toEqual(200);\n        }).end(done);\n    });\n\n\n    it('メッセージ一覧が取得できるか', (done) => {\n\n      const testData = [\n        { message: 'テスト用メッセージ１' },\n        { message: 'テスト用メッセージ２' },\n        { message: 'テスト用メッセージ３' },\n      ];\n　　　　　　　　　　　　\n　　　　　　　　　　　　// 事前準備（テストデータを作成）\n      Message.create(testData, (erro , doc ) => {\n\n　　　　　　　　　　　　　　　　　// リクエストを投げる\n        request.get(endpoint)\n          .expect((res) => {\n　　　　　　　　　　　　　　　　　　　　　　　　\n　　　　　　　　　　　　　　　　　　　　　　　　// 検証\n            const sortedMessages = res.body.messages.sort(messageAscending);\n\n            expect(sortedMessages.length).toEqual(3);\n            expect(sortedMessages[0].message).toEqual('テスト用メッセージ１');\n            expect(sortedMessages[1].message).toEqual('テスト用メッセージ２');\n            expect(sortedMessages[2].message).toEqual('テスト用メッセージ３');\n          })\n          .end(done);\n      });\n    });\n\n\n    it('異常時にエラーハンドリングされるか', (done) => {\n\n      // エラーとなるようにMessageのfindメソッドを置き換える\n      spyOn(Message, 'find').and.callFake(function(callback) {\n        callback(new Error('エラー'), null);\n      });\n　　　　　　　　　　　　　\n　　　　　　　　　　　　// リクエストを投げる\n      request.get(endpoint)\n        .expect((res) => {\n\n          // 検証\n          expect(res.type).toEqual('application/json');\n          expect(res.statusCode).toEqual(500);\n\n          expect(res.body.title).toEqual('エラーが発生しました。');\n          expect(res.body.error).toEqual('エラー');\n        })\n        .end(done);\n    });\n\n  });\n});\n```\n\n\n\n### 4. 単体テスト周りの環境を整備\nE2Eの説明に入る前に、いったん単体テスト周りの環境を整備します。\n\n\n#### package.json\n[前回](http://qiita.com/Takumon/items/572438809384e2e11792#pakcagejson)作成したものをベースに単体テストのスクリプトを追加してください。\n\n```json:package.json\n \"scripts\": {\n    ...\n    \"test\": \"run-p test:*\",\n    \"test:client\": \"ng test\",\n    \"test:server\": \"npm-run-all -s build:server_test -p watch:server_test  boot:server_test\",\n    \"watch:server_test\": \"tsc -w -p ./server_test/tsconfig.server_test.json\",\n    \"boot:server_test\": \"nodemon ./dist/server_test/test.server.js\",\n    \"build:server_test\": \"tsc -p ./server/tsconfig.server.json\",\n    ...\n  },\n```\n\n\n* **test**でクライアント側とサーバ側のテストを実行します。\n* **test:client**でクライアント側のテストを実行します。Angular CLIのngコマンドにお任せしています。\n* **watch:server_test**でサーバ側テスト資産をウォッチして変更があればコンパイルするようにします。\n* **boot:server_test**でコンパイルしたサーバ側テスト資産を起動します。nodeではなくnodemonを使うことで資産に更新があった場合でも即座に反映するようにしています。\n* **build:server_test**でサーバ側テスト資産をコンパイルします。コンパイル時の設定は下で触れるserver_test/test.server.conf.tsを使います。\n\n#### server_test/test.server.ts\nサーバ側テストの起動処理を書きます。\nレポーターには[jasmine-spec-reporter](https://www.npmjs.com/package/jasmine-spec-reporter)を使いましょう。このライブラリはAngular CLIで作ったプロジェクトにはデフォルトでインストール済みです。\n\n```js:test.server.ts\nimport { SpecReporter, DisplayProcessor } from 'jasmine-spec-reporter';\nconst Jasmine = require('jasmine');\nimport SuiteInfo = jasmine.SuiteInfo;\n\nimport { config } from './test.server.conf';\n\n\nclass CustomProcessor extends DisplayProcessor {\n    public displayJasmineStarted(info: SuiteInfo, log: string): string {\n        return `TypeScript ${log}`;\n    }\n}\n\nconst runner = new Jasmine();\nrunner.loadConfig(config);\nrunner.addReporter(new SpecReporter({\n    customProcessors: [CustomProcessor],\n}));\nrunner.onComplete(function(passed){\n  if ( passed ) {\n    console.log('Success');\n  } else {\n    console.error('Failed');\n  }\n});\n\nrunner.execute();\n```\n\n\n#### server_test/test.server.conf.ts\nサーバ側テスト起動時の設定です。\n注意点として`spec_files`に指定する相対パスはプロジェクト直下が起点になります。そのため`__dirname`を使って指定してください。\n\n```js:test.server.conf.ts\nexport const config = {\n  spec_dir: '.',\n  spec_files: [\n    `${__dirname}/*spec.js`\n  ],\n  'stopSpecOnExpectationFailure': false,\n  'random': false\n};\n```\n\n\n\n#### server_test/tsconfig.server_test.json\n\nサーバ側テスト資産をコンパイルする時の設定ファイルです。\n\n```json:tsconfig.server_test.json\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"preserveConstEnums\": true,\n    \"outDir\": \"../dist\",\n    \"mapRoot\": \"../dist\",\n    \"module\": \"commonjs\"\n  } ,\n  \"include\": [\n    \"**/*.spec.ts\",\n    \"./test.server.ts\",\n    \"./test.server.conf.ts\"\n  ]\n}\n```\n\n`outDir`が`../dist/server_test`ではなく`../dist`であることに注意してください。\nテスト資産は`server`ディレクトリ配下の資産に依存しているため、`../dist/server_test`を指定するとコンパイルした時に下記のように出力されてしまいます。\n\n```:\u001c（悪い例）outDirに\"../dist/server_test\"を指定したときのコンパイル結果\n.\n└── dist\n    └── server_test\n        ├── server\n        └── server_test \n```\n```:\u001c（良い例）outDirに\"../dist\"を指定したときのコンパイル結果\n.\n└── dist\n    ├── server\n    └── server_test \n```\n\n\n### 5. E2Eテストを作成\n単体テストを作成したので次はE2Eテストを作りましょう。\nAngular CLIで作成したプロジェクトにデフォルトで用意されている[Protractor](http://www.protractortest.org/#/)を使ったテストコードを作成します。\n\n#### e2e/app.e2e-spec.ts\n基本的にelementメソッドで要素を取得して、sendKeysメソッドやclickメソッドで操作を行います。\n\n```js:app.e2e-spec.ts\nimport { Angular4Express4Typescritp2Page } from './app.po';\nimport { browser, element, by } from 'protractor';\n\n\ndescribe('E2Eテスト', () => {\n  let page: Angular4Express4Typescritp2Page;\n\n  beforeEach(() => {\n    page = new Angular4Express4Typescritp2Page();\n  });\n\n  it('画面タイトルが正しいか', () => {\n    page.navigateTo();\n    expect(page.getParagraphText()).toEqual('メッセージ一覧');\n  });\n\n\n  it('メッセージが登録できるか', () => {\n    page.navigateTo();\n    const newMessage = `サンプルメッセージ ${new Date().toString()}`;\n    element(by.id('registerMessage')).sendKeys(newMessage);\n\n    element(by.id('registerMessageButton')).click();\n\n    // 登録後メッセージ入力項目が初期化されているか\n    expect(element(by.id('registerMessage')).getText()).toEqual('');\n\n    // 登録後一覧に登録したメッセージが含まれているか\n    const messages = element(by.id('messageList')).all(by.tagName('li'));\n    expect(messages.last().getText()).toEqual(newMessage);\n  });\n\n});\n```\n\n### 6. E2Eテスト周りの環境を整備\n\n#### package.json\nAngular CILプロジェクトデフォルトの\"e2e\"コマンドは削除して、スクリプトに下記を追加してください。\n\n```json:package.json\n \"scripts\": {\n    ...\n    \"e2e\": \"npm-run-all -s  webdriver:update -p webdriver:start protractor\",\n    \"webdriver:update\": \"webdriver-manager update\",\n    \"webdriver:start\": \"webdriver-manager start\",\n    \"protractor\": \"protractor protractor.conf.js\",\n    ...\n  },\n```\n\n* **e2e**でE2Eテストを実行します。Angular CILプロジェクトデフォルトの`e2e`コマンド(= `ng e2e`コマンド)は使いません。`ng　e2e`はクライアント資産だけコンパイルして起動する処理が入っているからです。今回はビルドしたアプリ(クライアントとサーバが１つにまとまったアプリ)に対してテストします。\n* **webdriver:update**でE2Eテストに必要なWebDriverをインストールまたは更新します。\n* **webdriver:start**でWebDriverを起動します。Protractorのテストは事前にWebDriverを起動しておく必要があります。\n* **protractor**でE2Eテストを実行します。起動時の設定は下で触れるprotractor.conf.jsを使います。\n\n#### protractor.conf.js\nデフォルトでbaseUrlのポートは4200になっていますが、今回はビルドしたアプリに対してテストするので3000を指定します。\n\n```js:protractor.conf.js\nexports.config = {\n  ...\n  baseUrl: 'http://localhost:3000/',\n  ...\n}\n```\n\n### 7. 試してみる\n#### 単体テストを実行してみる\n* MongoDBをローカルで立ち上げる\n    * 具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。\n\n* プロジェクト直下で`npm test`コマンドを実行するとテストが実行されます。クライアント側のテスト結果はブラウザに、サーバ側はターミナル（またはコンソール）に表示されます。資産はウォッチしているので、テストコードを修正すると、コンパイルされ再度テストが実行されるでしょう。\n\n![10_単体テスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png)\n\n\n\n#### E2Eテストを実行してみる\n* MongoDBをローカルで立ち上げる\n    * これも単体テストと同じでDBを事前に起動しておいてください。\n \n* ビルドしたアプリを起動する\n    * プロジェクト直下で`npm run buildRun`を実行し、ビルド資産を起動します。\n\n* `npm run e2e`する\n    * 別ターミナル（またはコマンドプロンプト）を開き、プロジェクト直下で`npm run e2e`コマンドを実行します。するとブラウザが立ち上がりテストが実行されます。\n![20_E2Eテスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png)\n\n\n## 終わりに\n今回はMEANスタックアプリの単体テスト、E2Eテストについて紹介しました。\nこれでビルドとテストができるようになったので、次回「その3. Dockerデプロイ編」では、Dockerでアプリを起動する方法とDockerでアプリのイメージを作ってデプロイする方法ついて紹介します。\n\n","comments_count":0,"created_at":"2017-07-24T07:12:10+09:00","likes_count":8,"reactions_count":0}}}