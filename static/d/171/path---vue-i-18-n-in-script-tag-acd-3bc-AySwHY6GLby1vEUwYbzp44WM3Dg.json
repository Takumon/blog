{"data":{"site":{"siteMetadata":{"title":"Takumon Blog","author":"Takuto Inoue"}},"markdownRemark":{"html":"<p><img src=\"/thumbnail/2019/02/vue-i18n-in-script-tag.png\" alt=\"vue-i18n-in-script-tag\"></p>\n<h2 id=\"なにこれ\"><a href=\"#%E3%81%AA%E3%81%AB%E3%81%93%E3%82%8C\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>なにこれ</h2>\n<p><a href=\"https://kazupon.github.io/vue-i18n/\"><strong>VueI18n</strong></a>はVue.jsの多言語対応ライブラリです。vueファイルのtemplateタグでは、<code class=\"language-text\">&lt;p&gt;{{$t(&#39;message.hello&#39;)}}&lt;/p&gt;</code>のように使います。ただ<strong>vueファイルのscriptタグや、他のJavaScriptファイルでの使い方</strong>は<a href=\"https://kazupon.github.io/vue-i18n/guide/formatting.html\">ガイド</a>に明記されていません。今回はそのやり方についてご紹介します。</p>\n<h2 id=\"使い方\"><a href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使い方</h2>\n<p><a href=\"https://github.com/kazupon/vue-i18n/issues/149\">GitHubのIssue</a>に答えが載っています。</p>\n<div class=\"iframely-embed\"><div class=\"iframely-responsive\" style=\"height: 168px; padding-bottom: 0;\"><a href=\"https://github.com/kazupon/vue-i18n/issues/149\" data-iframely-url=\"//cdn.iframe.ly/GvV4JME\"></a></div></div>\n<br/>\n<p>まずVueI18nを以下のように定義します。</p>\n<div class=\"gatsby-code-title\">i18n.js</div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span>\n<span class=\"token keyword\">import</span> VueI18n <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-i18n'</span>\n\n<span class=\"token keyword\">const</span> messages <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  en<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      hello<span class=\"token punctuation\">:</span> <span class=\"token string\">'hello world'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  ja<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      hello<span class=\"token punctuation\">:</span> <span class=\"token string\">'こんにちは、世界'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>VueI18n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> i18n <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueI18n</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  locale<span class=\"token punctuation\">:</span> <span class=\"token string\">'ja'</span><span class=\"token punctuation\">,</span>\n  messages<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<p>vueファイルのscriptタグでは以下のようにします。\n<strong>VueI18nオブジェクトの<code class=\"language-text\">tc</code>メソッドを使います。</strong>\nこうすることでvueファイルのscriptやJavaScriptファイルなど、どこでも使えるようになります。</p>\n<div class=\"gatsby-code-title\">vueファイルのscriptタグ</div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token comment\">// i18nをインポートします</span>\n</span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> i18n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'i18n.jsの相対パス'</span>\n</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* (中略) */</span>\n    methods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">getHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">            <span class=\"token keyword\">return</span> i18n<span class=\"token punctuation\">.</span><span class=\"token function\">tc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message.hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span>        <span class=\"token punctuation\">}</span>    \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/* (中略) */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<br/>\n<p>以上です🍅</p>","headingsDetail":[{"id":"なにこれ","value":"なにこれ","depth":2,"parents":[]},{"id":"使い方","value":"使い方","depth":2,"parents":[]}],"fields":{"title":"VueI18nをscriptタグやJSファイル内で使う方法","excerpt":"なにこれVueI18nはVue.jsの多言語対応ライブラリです。vueファイルのtemplateタグでは、&#x3C;p>{{$t('message.hello')}}&#x3C;/p>のように使います。ただvueファイルのscriptタグ...","date":"2019-02-21T07:50:00.000+09:00","tags":["Vue.js","VueI18n"],"thumbnail":"/thumbnail/2019/02/vue-i18n-in-script-tag.png"}}},"pageContext":{"slug":"/vue-i18n-in-script-tag","relatedPosts":[{"fields":{"slug":"/vee-validate-custom-validation-locale-message","title":"Vuetify + VeeValidate + VueI18nでカスタムバリデーション作成時にロケールごとのエラーメッセージを設定する方法","date":"2019-04-07T14:10:00.000+09:00","excerpt":"なにこれVuetify + VeeValidateで入力チェックする際に、VueI18nを使ってエラーメッセージを多言語対応・共通化する場合に、カスタムバリデーションのエラーメッセージをロケールごとに設定する方法について紹介します。実装方法...","tags":["Vue.js","Vuetify","VeeValidate","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/04/vee-validate-custom-validation-locale-message.png"}},{"fields":{"slug":"/vuetify-and-vee-validate-and-vue-i18n","title":"Vuetify + VeeValidate + VueI18nでエラーメッセージ共通化","date":"2019-03-02T12:30:00.000+09:00","excerpt":"なにこれVuetify + VeeValidateで入力チェックする際に、VueI18nを使ってエラーメッセージを多言語対応・共通化する方法について紹介します。定義方法VeeValidateVeeValidateであらかじめ言語毎にエラーメ...","tags":["Vue.js","Vuetify","VeeValidate","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/03/vuetify-and-vee-validate-and-vue-i18n.png"}},{"fields":{"slug":"/vuetify-select-tag","title":"VuetifyでSelectタグを使う時の注意点","date":"2019-03-24T23:55:00.000+09:00","excerpt":"なにこれ最近Vue.jsのマテリアルデザインのUIフレームワーク「Vuetify」を使っています。とても便利で、管理アプリのようにデザインにこだわる必要がなければ、CSSをほとんど書かずに済むくらいコンポーネントが充実しています。ただSel...","tags":["Vue.js","Vuetify"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/03/vuetify-select-tag.png"}}],"latestPosts":[{"fields":{"slug":"/vee-validate-custom-validation-locale-message","title":"Vuetify + VeeValidate + VueI18nでカスタムバリデーション作成時にロケールごとのエラーメッセージを設定する方法","date":"2019-04-07T14:10:00.000+09:00","excerpt":"なにこれVuetify + VeeValidateで入力チェックする際に、VueI18nを使ってエラーメッセージを多言語対応・共通化する場合に、カスタムバリデーションのエラーメッセージをロケールごとに設定する方法について紹介します。実装方法...","tags":["Vue.js","Vuetify","VeeValidate","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/04/vee-validate-custom-validation-locale-message.png"}},{"fields":{"slug":"/vuetify-select-tag","title":"VuetifyでSelectタグを使う時の注意点","date":"2019-03-24T23:55:00.000+09:00","excerpt":"なにこれ最近Vue.jsのマテリアルデザインのUIフレームワーク「Vuetify」を使っています。とても便利で、管理アプリのようにデザインにこだわる必要がなければ、CSSをほとんど書かずに済むくらいコンポーネントが充実しています。ただSel...","tags":["Vue.js","Vuetify"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/03/vuetify-select-tag.png"}},{"fields":{"slug":"/aws-appsync-auth-with-cognito","title":"AppSync + Cognitoによる認可制御","date":"2019-03-17T17:45:00.000+09:00","excerpt":"なにこれAppSyncはCognitoと連携して認可制御ができます。今回はそのやり方についてご紹介します。ざっくりいうと以下のようなことが実現可能です。✨スキーマ定義におけるQueryやMutationごとの認可制御（ユーザーグループ）💎...","tags":["AppSync","AWS","Cognito"],"keywords":["AWS"],"thumbnail":"/thumbnail/2019/03/aws-appsync-auth-with-cognito.png"}},{"fields":{"slug":"/aws-appsync-and-serverless-framework","title":"AppSync + Serverless Frameworkによるソースコードの構成管理","date":"2019-03-04T07:50:00.000+09:00","excerpt":"なにこれAWSのGraphQLマネージドサービス「AppSync」はGUIで簡単に設定ができて便利ですが、本格的に開発を進めていくとGUIポチポチでソースコードを管理するのはつらくなってきます。Serverless Frameworkという...","tags":["AppSync","serverless","AWS","GraphQL"],"keywords":["AppSync"],"thumbnail":"/thumbnail/2019/03/aws-appsync-and-serverless-framework.png"}},{"fields":{"slug":"/vuetify-and-vee-validate-and-vue-i18n","title":"Vuetify + VeeValidate + VueI18nでエラーメッセージ共通化","date":"2019-03-02T12:30:00.000+09:00","excerpt":"なにこれVuetify + VeeValidateで入力チェックする際に、VueI18nを使ってエラーメッセージを多言語対応・共通化する方法について紹介します。定義方法VeeValidateVeeValidateであらかじめ言語毎にエラーメ...","tags":["Vue.js","Vuetify","VeeValidate","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/03/vuetify-and-vee-validate-and-vue-i18n.png"}}],"previous":{"fields":{"slug":"/aws-appsync-pipeline-resolver-with-multiple-dynamodb-tables","title":"AWS AppSyncのPipeline Resolverで複数データリソースを扱う場合のVTLの書き方","date":"2019-02-19T07:30:00.000+09:00","excerpt":"なにこれAWSのGraphQLフルマネージドサービス「AppSync」で複数のデータリソースを扱う場合は「Pipeline Resolver」という機能を使います。これは、1つのデータリソースを扱うファンクションを定義し、それらを組み合わせ...","tags":["AppSync","AWS","GraphQL","DynamoDB"],"keywords":["GraphQL"],"thumbnail":"/thumbnail/2019/02/aws-appsync-pipeline-resolver-with-multiple-dynamodb-tables.png"}},"next":{"fields":{"slug":"/mutliple-validation-errors-in-aws-appsync","title":"AWS AppSyncで入力チェックエラーを複数返す方法","date":"2019-02-26T07:30:00.000+09:00","excerpt":"なにこれAppSyncのリゾルバーでDynamoDBのデータを更新する場合、更新処理の前に入力チェックは必ず実施すると思います。この時、入力チェックエラーを見つけた時点で1つのエラーメッセージを返すより、すべてのチェック実施後にまとめてエラ...","tags":["AppSync","AWS","GraphQL"],"keywords":["AppSync"],"thumbnail":"/thumbnail/2019/02/mutliple-validation-errors-in-aws-appsync.png"}}}}