{"pageContext":{"allPostRelations":[{"node":{"fields":{"slug":"/vuetify-datatable-and-pagination-with-vuex","title":"VuetifyのDataTableとPaginationの状態をVuexで管理する","date":"2019-04-28T20:30:00.000+09:00","excerpt":"なにこれVuetifyのDataTableとPaginationを使った検索一覧画面でページングの状態を、ルーティングをまたいで保存しておきたい。という要望を満たすため、ページングの状態をVuexで管理する方法をメモします。DataTabl...","tags":["Vue.js","Vuetify","Vuex"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/04/vuetify-datatable-and-pagination-with-vuex.png"}},"relations":[{"node":{"fields":{"slug":"/multi-message-snackbar-in-vuetify","title":"VuetifyのSnackbarで複数メッセージ表示する方法","date":"2019-04-21T21:30:00.000+09:00","excerpt":"なにこれVuetifyのSnackbarはメッセージを1つしか表示できません。こちらGitHubでもissueになっています。ただUIとしてはメッセージを複数表示できたほうが便利なので、今回はVuetifyのSnackbarをベースにメッセ...","tags":["Vuetify","Vue.js"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/04/multi-message-snackbar-in-vuetify.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"},{"weight":50,"keyword":"Vuetify"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/vee-validate-custom-validation-locale-message","title":"Vuetify + VeeValidate + VueI18nでカスタムバリデーション作成時にロケールごとのエラーメッセージを設定する方法","date":"2019-04-07T14:10:00.000+09:00","excerpt":"なにこれVuetify + VeeValidateで入力チェックする際に、VueI18nを使ってエラーメッセージを多言語対応・共通化する場合に、カスタムバリデーションのエラーメッセージをロケールごとに設定する方法について紹介します。実装方法...","tags":["Vue.js","Vuetify","VeeValidate","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/04/vee-validate-custom-validation-locale-message.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"},{"weight":50,"keyword":"Vuetify"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/vuetify-select-tag","title":"VuetifyでSelectタグを使う時の注意点","date":"2019-03-24T23:55:00.000+09:00","excerpt":"なにこれ最近Vue.jsのマテリアルデザインのUIフレームワーク「Vuetify」を使っています。とても便利で、管理アプリのようにデザインにこだわる必要がなければ、CSSをほとんど書かずに済むくらいコンポーネントが充実しています。ただSel...","tags":["Vue.js","Vuetify"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/03/vuetify-select-tag.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"},{"weight":50,"keyword":"Vuetify"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/vuetify-and-vee-validate-and-vue-i18n","title":"Vuetify + VeeValidate + VueI18nでエラーメッセージ共通化","date":"2019-03-02T12:30:00.000+09:00","excerpt":"なにこれVuetify + VeeValidateで入力チェックする際に、VueI18nを使ってエラーメッセージを多言語対応・共通化する方法について紹介します。定義方法VeeValidateVeeValidateであらかじめ言語毎にエラーメ...","tags":["Vue.js","Vuetify","VeeValidate","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/03/vuetify-and-vee-validate-and-vue-i18n.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"},{"weight":50,"keyword":"Vuetify"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/vue-i18n-in-script-tag","title":"VueI18nをscriptタグやJSファイル内で使う方法","date":"2019-02-21T07:50:00.000+09:00","excerpt":"なにこれVueI18nはVue.jsの多言語対応ライブラリです。vueファイルのtemplateタグでは、&#x3C;p>{{$t('message.hello')}}&#x3C;/p>のように使います。ただvueファイルのscriptタグ...","tags":["Vue.js","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/02/vue-i18n-in-script-tag.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/multi-message-snackbar-in-vuetify","title":"VuetifyのSnackbarで複数メッセージ表示する方法","date":"2019-04-21T21:30:00.000+09:00","excerpt":"なにこれVuetifyのSnackbarはメッセージを1つしか表示できません。こちらGitHubでもissueになっています。ただUIとしてはメッセージを複数表示できたほうが便利なので、今回はVuetifyのSnackbarをベースにメッセ...","tags":["Vuetify","Vue.js"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/04/multi-message-snackbar-in-vuetify.png"}},"relations":[{"node":{"fields":{"slug":"/vuetify-datatable-and-pagination-with-vuex","title":"VuetifyのDataTableとPaginationの状態をVuexで管理する","date":"2019-04-28T20:30:00.000+09:00","excerpt":"なにこれVuetifyのDataTableとPaginationを使った検索一覧画面でページングの状態を、ルーティングをまたいで保存しておきたい。という要望を満たすため、ページングの状態をVuexで管理する方法をメモします。DataTabl...","tags":["Vue.js","Vuetify","Vuex"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/04/vuetify-datatable-and-pagination-with-vuex.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vuetify"},{"weight":50,"keyword":"Vue.js"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/vee-validate-custom-validation-locale-message","title":"Vuetify + VeeValidate + VueI18nでカスタムバリデーション作成時にロケールごとのエラーメッセージを設定する方法","date":"2019-04-07T14:10:00.000+09:00","excerpt":"なにこれVuetify + VeeValidateで入力チェックする際に、VueI18nを使ってエラーメッセージを多言語対応・共通化する場合に、カスタムバリデーションのエラーメッセージをロケールごとに設定する方法について紹介します。実装方法...","tags":["Vue.js","Vuetify","VeeValidate","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/04/vee-validate-custom-validation-locale-message.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vuetify"},{"weight":50,"keyword":"Vue.js"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/vuetify-select-tag","title":"VuetifyでSelectタグを使う時の注意点","date":"2019-03-24T23:55:00.000+09:00","excerpt":"なにこれ最近Vue.jsのマテリアルデザインのUIフレームワーク「Vuetify」を使っています。とても便利で、管理アプリのようにデザインにこだわる必要がなければ、CSSをほとんど書かずに済むくらいコンポーネントが充実しています。ただSel...","tags":["Vue.js","Vuetify"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/03/vuetify-select-tag.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vuetify"},{"weight":50,"keyword":"Vue.js"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/vuetify-and-vee-validate-and-vue-i18n","title":"Vuetify + VeeValidate + VueI18nでエラーメッセージ共通化","date":"2019-03-02T12:30:00.000+09:00","excerpt":"なにこれVuetify + VeeValidateで入力チェックする際に、VueI18nを使ってエラーメッセージを多言語対応・共通化する方法について紹介します。定義方法VeeValidateVeeValidateであらかじめ言語毎にエラーメ...","tags":["Vue.js","Vuetify","VeeValidate","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/03/vuetify-and-vee-validate-and-vue-i18n.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vuetify"},{"weight":50,"keyword":"Vue.js"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/vue-i18n-in-script-tag","title":"VueI18nをscriptタグやJSファイル内で使う方法","date":"2019-02-21T07:50:00.000+09:00","excerpt":"なにこれVueI18nはVue.jsの多言語対応ライブラリです。vueファイルのtemplateタグでは、&#x3C;p>{{$t('message.hello')}}&#x3C;/p>のように使います。ただvueファイルのscriptタグ...","tags":["Vue.js","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/02/vue-i18n-in-script-tag.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/how-to-get-user-custom-attributes-in-resolver-with-amplify-appsync-cognito","title":"Amplify + Cognito + AppSyncにおいてリゾルバーでユーザのカスタム属性を取得する方法","date":"2019-04-13T07:14:40.000+09:00","excerpt":"なにこれAppSync + Cognitoにおける認可制御について以前の記事で説明しました。今回は、ユーザーのカスタム属性を使った認可制御（AppSyncのリゾルバーでカスタム属性を取得する方法）についてご紹介します。TL;DRAppSyn...","tags":["Amplify","AppSync","AWS","Cognito"],"keywords":["AWS"],"thumbnail":"/thumbnail/2019/04/how-to-get-user-custom-attributes-in-resolver-with-amplify-appsync-cognito.png"}},"relations":[{"node":{"fields":{"slug":"/aws-appsync-auth-with-cognito","title":"AppSync + Cognitoによる認可制御","date":"2019-03-17T17:45:00.000+09:00","excerpt":"なにこれAppSyncはCognitoと連携して認可制御ができます。今回はそのやり方についてご紹介します。ざっくりいうと以下のようなことが実現可能です。✨スキーマ定義におけるQueryやMutationごとの認可制御（ユーザーグループ）💎...","tags":["AppSync","AWS","Cognito"],"keywords":["AWS"],"thumbnail":"/thumbnail/2019/03/aws-appsync-auth-with-cognito.png"}},"matches":4,"weight":250,"details":[{"weight":100,"keyword":"AWS"},{"weight":50,"keyword":"AppSync"},{"weight":50,"keyword":"AWS"},{"weight":50,"keyword":"Cognito"}],"avgWeight":62.5,"totalWeight":58,"threshold":12.5,"isRelated":true},{"node":{"fields":{"slug":"/aws-appsync-and-serverless-framework","title":"AppSync + Serverless Frameworkによるソースコードの構成管理","date":"2019-03-04T07:50:00.000+09:00","excerpt":"なにこれAWSのGraphQLマネージドサービス「AppSync」はGUIで簡単に設定ができて便利ですが、本格的に開発を進めていくとGUIポチポチでソースコードを管理するのはつらくなってきます。Serverless Frameworkという...","tags":["AppSync","serverless","AWS","GraphQL"],"keywords":["AppSync"],"thumbnail":"/thumbnail/2019/03/aws-appsync-and-serverless-framework.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"AppSync"},{"weight":50,"keyword":"AWS"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/mutliple-validation-errors-in-aws-appsync","title":"AWS AppSyncで入力チェックエラーを複数返す方法","date":"2019-02-26T07:30:00.000+09:00","excerpt":"なにこれAppSyncのリゾルバーでDynamoDBのデータを更新する場合、更新処理の前に入力チェックは必ず実施すると思います。この時、入力チェックエラーを見つけた時点で1つのエラーメッセージを返すより、すべてのチェック実施後にまとめてエラ...","tags":["AppSync","AWS","GraphQL"],"keywords":["AppSync"],"thumbnail":"/thumbnail/2019/02/mutliple-validation-errors-in-aws-appsync.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"AppSync"},{"weight":50,"keyword":"AWS"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/aws-appsync-pipeline-resolver-with-multiple-dynamodb-tables","title":"AWS AppSyncのPipeline Resolverで複数データリソースを扱う場合のVTLの書き方","date":"2019-02-19T07:30:00.000+09:00","excerpt":"なにこれAWSのGraphQLフルマネージドサービス「AppSync」で複数のデータリソースを扱う場合は「Pipeline Resolver」という機能を使います。これは、1つのデータリソースを扱うファンクションを定義し、それらを組み合わせ...","tags":["AppSync","AWS","GraphQL","DynamoDB"],"keywords":["GraphQL"],"thumbnail":"/thumbnail/2019/02/aws-appsync-pipeline-resolver-with-multiple-dynamodb-tables.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"AppSync"},{"weight":50,"keyword":"AWS"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/vee-validate-custom-validation-locale-message","title":"Vuetify + VeeValidate + VueI18nでカスタムバリデーション作成時にロケールごとのエラーメッセージを設定する方法","date":"2019-04-07T14:10:00.000+09:00","excerpt":"なにこれVuetify + VeeValidateで入力チェックする際に、VueI18nを使ってエラーメッセージを多言語対応・共通化する場合に、カスタムバリデーションのエラーメッセージをロケールごとに設定する方法について紹介します。実装方法...","tags":["Vue.js","Vuetify","VeeValidate","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/04/vee-validate-custom-validation-locale-message.png"}},"relations":[{"node":{"fields":{"slug":"/vuetify-and-vee-validate-and-vue-i18n","title":"Vuetify + VeeValidate + VueI18nでエラーメッセージ共通化","date":"2019-03-02T12:30:00.000+09:00","excerpt":"なにこれVuetify + VeeValidateで入力チェックする際に、VueI18nを使ってエラーメッセージを多言語対応・共通化する方法について紹介します。定義方法VeeValidateVeeValidateであらかじめ言語毎にエラーメ...","tags":["Vue.js","Vuetify","VeeValidate","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/03/vuetify-and-vee-validate-and-vue-i18n.png"}},"matches":5,"weight":300,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"},{"weight":50,"keyword":"Vuetify"},{"weight":50,"keyword":"VeeValidate"},{"weight":50,"keyword":"VueI18n"}],"avgWeight":60,"totalWeight":56,"threshold":10,"isRelated":true},{"node":{"fields":{"slug":"/vuetify-datatable-and-pagination-with-vuex","title":"VuetifyのDataTableとPaginationの状態をVuexで管理する","date":"2019-04-28T20:30:00.000+09:00","excerpt":"なにこれVuetifyのDataTableとPaginationを使った検索一覧画面でページングの状態を、ルーティングをまたいで保存しておきたい。という要望を満たすため、ページングの状態をVuexで管理する方法をメモします。DataTabl...","tags":["Vue.js","Vuetify","Vuex"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/04/vuetify-datatable-and-pagination-with-vuex.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"},{"weight":50,"keyword":"Vuetify"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/multi-message-snackbar-in-vuetify","title":"VuetifyのSnackbarで複数メッセージ表示する方法","date":"2019-04-21T21:30:00.000+09:00","excerpt":"なにこれVuetifyのSnackbarはメッセージを1つしか表示できません。こちらGitHubでもissueになっています。ただUIとしてはメッセージを複数表示できたほうが便利なので、今回はVuetifyのSnackbarをベースにメッセ...","tags":["Vuetify","Vue.js"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/04/multi-message-snackbar-in-vuetify.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"},{"weight":50,"keyword":"Vuetify"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/vuetify-select-tag","title":"VuetifyでSelectタグを使う時の注意点","date":"2019-03-24T23:55:00.000+09:00","excerpt":"なにこれ最近Vue.jsのマテリアルデザインのUIフレームワーク「Vuetify」を使っています。とても便利で、管理アプリのようにデザインにこだわる必要がなければ、CSSをほとんど書かずに済むくらいコンポーネントが充実しています。ただSel...","tags":["Vue.js","Vuetify"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/03/vuetify-select-tag.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"},{"weight":50,"keyword":"Vuetify"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/vue-i18n-in-script-tag","title":"VueI18nをscriptタグやJSファイル内で使う方法","date":"2019-02-21T07:50:00.000+09:00","excerpt":"なにこれVueI18nはVue.jsの多言語対応ライブラリです。vueファイルのtemplateタグでは、&#x3C;p>{{$t('message.hello')}}&#x3C;/p>のように使います。ただvueファイルのscriptタグ...","tags":["Vue.js","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/02/vue-i18n-in-script-tag.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"},{"weight":50,"keyword":"VueI18n"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true}]},{"node":{"fields":{"slug":"/vuetify-select-tag","title":"VuetifyでSelectタグを使う時の注意点","date":"2019-03-24T23:55:00.000+09:00","excerpt":"なにこれ最近Vue.jsのマテリアルデザインのUIフレームワーク「Vuetify」を使っています。とても便利で、管理アプリのようにデザインにこだわる必要がなければ、CSSをほとんど書かずに済むくらいコンポーネントが充実しています。ただSel...","tags":["Vue.js","Vuetify"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/03/vuetify-select-tag.png"}},"relations":[{"node":{"fields":{"slug":"/vuetify-datatable-and-pagination-with-vuex","title":"VuetifyのDataTableとPaginationの状態をVuexで管理する","date":"2019-04-28T20:30:00.000+09:00","excerpt":"なにこれVuetifyのDataTableとPaginationを使った検索一覧画面でページングの状態を、ルーティングをまたいで保存しておきたい。という要望を満たすため、ページングの状態をVuexで管理する方法をメモします。DataTabl...","tags":["Vue.js","Vuetify","Vuex"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/04/vuetify-datatable-and-pagination-with-vuex.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"},{"weight":50,"keyword":"Vuetify"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/multi-message-snackbar-in-vuetify","title":"VuetifyのSnackbarで複数メッセージ表示する方法","date":"2019-04-21T21:30:00.000+09:00","excerpt":"なにこれVuetifyのSnackbarはメッセージを1つしか表示できません。こちらGitHubでもissueになっています。ただUIとしてはメッセージを複数表示できたほうが便利なので、今回はVuetifyのSnackbarをベースにメッセ...","tags":["Vuetify","Vue.js"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/04/multi-message-snackbar-in-vuetify.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"},{"weight":50,"keyword":"Vuetify"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/vee-validate-custom-validation-locale-message","title":"Vuetify + VeeValidate + VueI18nでカスタムバリデーション作成時にロケールごとのエラーメッセージを設定する方法","date":"2019-04-07T14:10:00.000+09:00","excerpt":"なにこれVuetify + VeeValidateで入力チェックする際に、VueI18nを使ってエラーメッセージを多言語対応・共通化する場合に、カスタムバリデーションのエラーメッセージをロケールごとに設定する方法について紹介します。実装方法...","tags":["Vue.js","Vuetify","VeeValidate","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/04/vee-validate-custom-validation-locale-message.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"},{"weight":50,"keyword":"Vuetify"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/vuetify-and-vee-validate-and-vue-i18n","title":"Vuetify + VeeValidate + VueI18nでエラーメッセージ共通化","date":"2019-03-02T12:30:00.000+09:00","excerpt":"なにこれVuetify + VeeValidateで入力チェックする際に、VueI18nを使ってエラーメッセージを多言語対応・共通化する方法について紹介します。定義方法VeeValidateVeeValidateであらかじめ言語毎にエラーメ...","tags":["Vue.js","Vuetify","VeeValidate","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/03/vuetify-and-vee-validate-and-vue-i18n.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"},{"weight":50,"keyword":"Vuetify"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/vue-i18n-in-script-tag","title":"VueI18nをscriptタグやJSファイル内で使う方法","date":"2019-02-21T07:50:00.000+09:00","excerpt":"なにこれVueI18nはVue.jsの多言語対応ライブラリです。vueファイルのtemplateタグでは、&#x3C;p>{{$t('message.hello')}}&#x3C;/p>のように使います。ただvueファイルのscriptタグ...","tags":["Vue.js","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/02/vue-i18n-in-script-tag.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/aws-appsync-auth-with-cognito","title":"AppSync + Cognitoによる認可制御","date":"2019-03-17T17:45:00.000+09:00","excerpt":"なにこれAppSyncはCognitoと連携して認可制御ができます。今回はそのやり方についてご紹介します。ざっくりいうと以下のようなことが実現可能です。✨スキーマ定義におけるQueryやMutationごとの認可制御（ユーザーグループ）💎...","tags":["AppSync","AWS","Cognito"],"keywords":["AWS"],"thumbnail":"/thumbnail/2019/03/aws-appsync-auth-with-cognito.png"}},"relations":[{"node":{"fields":{"slug":"/how-to-get-user-custom-attributes-in-resolver-with-amplify-appsync-cognito","title":"Amplify + Cognito + AppSyncにおいてリゾルバーでユーザのカスタム属性を取得する方法","date":"2019-04-13T07:14:40.000+09:00","excerpt":"なにこれAppSync + Cognitoにおける認可制御について以前の記事で説明しました。今回は、ユーザーのカスタム属性を使った認可制御（AppSyncのリゾルバーでカスタム属性を取得する方法）についてご紹介します。TL;DRAppSyn...","tags":["Amplify","AppSync","AWS","Cognito"],"keywords":["AWS"],"thumbnail":"/thumbnail/2019/04/how-to-get-user-custom-attributes-in-resolver-with-amplify-appsync-cognito.png"}},"matches":4,"weight":250,"details":[{"weight":100,"keyword":"AWS"},{"weight":50,"keyword":"AppSync"},{"weight":50,"keyword":"AWS"},{"weight":50,"keyword":"Cognito"}],"avgWeight":62.5,"totalWeight":58,"threshold":12.5,"isRelated":true},{"node":{"fields":{"slug":"/aws-appsync-and-serverless-framework","title":"AppSync + Serverless Frameworkによるソースコードの構成管理","date":"2019-03-04T07:50:00.000+09:00","excerpt":"なにこれAWSのGraphQLマネージドサービス「AppSync」はGUIで簡単に設定ができて便利ですが、本格的に開発を進めていくとGUIポチポチでソースコードを管理するのはつらくなってきます。Serverless Frameworkという...","tags":["AppSync","serverless","AWS","GraphQL"],"keywords":["AppSync"],"thumbnail":"/thumbnail/2019/03/aws-appsync-and-serverless-framework.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"AppSync"},{"weight":50,"keyword":"AWS"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/mutliple-validation-errors-in-aws-appsync","title":"AWS AppSyncで入力チェックエラーを複数返す方法","date":"2019-02-26T07:30:00.000+09:00","excerpt":"なにこれAppSyncのリゾルバーでDynamoDBのデータを更新する場合、更新処理の前に入力チェックは必ず実施すると思います。この時、入力チェックエラーを見つけた時点で1つのエラーメッセージを返すより、すべてのチェック実施後にまとめてエラ...","tags":["AppSync","AWS","GraphQL"],"keywords":["AppSync"],"thumbnail":"/thumbnail/2019/02/mutliple-validation-errors-in-aws-appsync.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"AppSync"},{"weight":50,"keyword":"AWS"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/aws-appsync-pipeline-resolver-with-multiple-dynamodb-tables","title":"AWS AppSyncのPipeline Resolverで複数データリソースを扱う場合のVTLの書き方","date":"2019-02-19T07:30:00.000+09:00","excerpt":"なにこれAWSのGraphQLフルマネージドサービス「AppSync」で複数のデータリソースを扱う場合は「Pipeline Resolver」という機能を使います。これは、1つのデータリソースを扱うファンクションを定義し、それらを組み合わせ...","tags":["AppSync","AWS","GraphQL","DynamoDB"],"keywords":["GraphQL"],"thumbnail":"/thumbnail/2019/02/aws-appsync-pipeline-resolver-with-multiple-dynamodb-tables.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"AppSync"},{"weight":50,"keyword":"AWS"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/aws-appsync-and-serverless-framework","title":"AppSync + Serverless Frameworkによるソースコードの構成管理","date":"2019-03-04T07:50:00.000+09:00","excerpt":"なにこれAWSのGraphQLマネージドサービス「AppSync」はGUIで簡単に設定ができて便利ですが、本格的に開発を進めていくとGUIポチポチでソースコードを管理するのはつらくなってきます。Serverless Frameworkという...","tags":["AppSync","serverless","AWS","GraphQL"],"keywords":["AppSync"],"thumbnail":"/thumbnail/2019/03/aws-appsync-and-serverless-framework.png"}},"relations":[{"node":{"fields":{"slug":"/mutliple-validation-errors-in-aws-appsync","title":"AWS AppSyncで入力チェックエラーを複数返す方法","date":"2019-02-26T07:30:00.000+09:00","excerpt":"なにこれAppSyncのリゾルバーでDynamoDBのデータを更新する場合、更新処理の前に入力チェックは必ず実施すると思います。この時、入力チェックエラーを見つけた時点で1つのエラーメッセージを返すより、すべてのチェック実施後にまとめてエラ...","tags":["AppSync","AWS","GraphQL"],"keywords":["AppSync"],"thumbnail":"/thumbnail/2019/02/mutliple-validation-errors-in-aws-appsync.png"}},"matches":4,"weight":250,"details":[{"weight":100,"keyword":"AppSync"},{"weight":50,"keyword":"AppSync"},{"weight":50,"keyword":"AWS"},{"weight":50,"keyword":"GraphQL"}],"avgWeight":62.5,"totalWeight":58,"threshold":12.5,"isRelated":true},{"node":{"fields":{"slug":"/aws-appsync-pipeline-resolver-with-multiple-dynamodb-tables","title":"AWS AppSyncのPipeline Resolverで複数データリソースを扱う場合のVTLの書き方","date":"2019-02-19T07:30:00.000+09:00","excerpt":"なにこれAWSのGraphQLフルマネージドサービス「AppSync」で複数のデータリソースを扱う場合は「Pipeline Resolver」という機能を使います。これは、1つのデータリソースを扱うファンクションを定義し、それらを組み合わせ...","tags":["AppSync","AWS","GraphQL","DynamoDB"],"keywords":["GraphQL"],"thumbnail":"/thumbnail/2019/02/aws-appsync-pipeline-resolver-with-multiple-dynamodb-tables.png"}},"matches":3,"weight":150,"details":[{"weight":50,"keyword":"AppSync"},{"weight":50,"keyword":"AWS"},{"weight":50,"keyword":"GraphQL"}],"avgWeight":50,"totalWeight":44,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/how-to-get-user-custom-attributes-in-resolver-with-amplify-appsync-cognito","title":"Amplify + Cognito + AppSyncにおいてリゾルバーでユーザのカスタム属性を取得する方法","date":"2019-04-13T07:14:40.000+09:00","excerpt":"なにこれAppSync + Cognitoにおける認可制御について以前の記事で説明しました。今回は、ユーザーのカスタム属性を使った認可制御（AppSyncのリゾルバーでカスタム属性を取得する方法）についてご紹介します。TL;DRAppSyn...","tags":["Amplify","AppSync","AWS","Cognito"],"keywords":["AWS"],"thumbnail":"/thumbnail/2019/04/how-to-get-user-custom-attributes-in-resolver-with-amplify-appsync-cognito.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"AppSync"},{"weight":50,"keyword":"AWS"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/aws-appsync-auth-with-cognito","title":"AppSync + Cognitoによる認可制御","date":"2019-03-17T17:45:00.000+09:00","excerpt":"なにこれAppSyncはCognitoと連携して認可制御ができます。今回はそのやり方についてご紹介します。ざっくりいうと以下のようなことが実現可能です。✨スキーマ定義におけるQueryやMutationごとの認可制御（ユーザーグループ）💎...","tags":["AppSync","AWS","Cognito"],"keywords":["AWS"],"thumbnail":"/thumbnail/2019/03/aws-appsync-auth-with-cognito.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"AppSync"},{"weight":50,"keyword":"AWS"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/vuetify-and-vee-validate-and-vue-i18n","title":"Vuetify + VeeValidate + VueI18nでエラーメッセージ共通化","date":"2019-03-02T12:30:00.000+09:00","excerpt":"なにこれVuetify + VeeValidateで入力チェックする際に、VueI18nを使ってエラーメッセージを多言語対応・共通化する方法について紹介します。定義方法VeeValidateVeeValidateであらかじめ言語毎にエラーメ...","tags":["Vue.js","Vuetify","VeeValidate","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/03/vuetify-and-vee-validate-and-vue-i18n.png"}},"relations":[{"node":{"fields":{"slug":"/vee-validate-custom-validation-locale-message","title":"Vuetify + VeeValidate + VueI18nでカスタムバリデーション作成時にロケールごとのエラーメッセージを設定する方法","date":"2019-04-07T14:10:00.000+09:00","excerpt":"なにこれVuetify + VeeValidateで入力チェックする際に、VueI18nを使ってエラーメッセージを多言語対応・共通化する場合に、カスタムバリデーションのエラーメッセージをロケールごとに設定する方法について紹介します。実装方法...","tags":["Vue.js","Vuetify","VeeValidate","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/04/vee-validate-custom-validation-locale-message.png"}},"matches":5,"weight":300,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"},{"weight":50,"keyword":"Vuetify"},{"weight":50,"keyword":"VeeValidate"},{"weight":50,"keyword":"VueI18n"}],"avgWeight":60,"totalWeight":56,"threshold":10,"isRelated":true},{"node":{"fields":{"slug":"/vuetify-datatable-and-pagination-with-vuex","title":"VuetifyのDataTableとPaginationの状態をVuexで管理する","date":"2019-04-28T20:30:00.000+09:00","excerpt":"なにこれVuetifyのDataTableとPaginationを使った検索一覧画面でページングの状態を、ルーティングをまたいで保存しておきたい。という要望を満たすため、ページングの状態をVuexで管理する方法をメモします。DataTabl...","tags":["Vue.js","Vuetify","Vuex"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/04/vuetify-datatable-and-pagination-with-vuex.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"},{"weight":50,"keyword":"Vuetify"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/multi-message-snackbar-in-vuetify","title":"VuetifyのSnackbarで複数メッセージ表示する方法","date":"2019-04-21T21:30:00.000+09:00","excerpt":"なにこれVuetifyのSnackbarはメッセージを1つしか表示できません。こちらGitHubでもissueになっています。ただUIとしてはメッセージを複数表示できたほうが便利なので、今回はVuetifyのSnackbarをベースにメッセ...","tags":["Vuetify","Vue.js"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/04/multi-message-snackbar-in-vuetify.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"},{"weight":50,"keyword":"Vuetify"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/vuetify-select-tag","title":"VuetifyでSelectタグを使う時の注意点","date":"2019-03-24T23:55:00.000+09:00","excerpt":"なにこれ最近Vue.jsのマテリアルデザインのUIフレームワーク「Vuetify」を使っています。とても便利で、管理アプリのようにデザインにこだわる必要がなければ、CSSをほとんど書かずに済むくらいコンポーネントが充実しています。ただSel...","tags":["Vue.js","Vuetify"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/03/vuetify-select-tag.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"},{"weight":50,"keyword":"Vuetify"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/vue-i18n-in-script-tag","title":"VueI18nをscriptタグやJSファイル内で使う方法","date":"2019-02-21T07:50:00.000+09:00","excerpt":"なにこれVueI18nはVue.jsの多言語対応ライブラリです。vueファイルのtemplateタグでは、&#x3C;p>{{$t('message.hello')}}&#x3C;/p>のように使います。ただvueファイルのscriptタグ...","tags":["Vue.js","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/02/vue-i18n-in-script-tag.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"},{"weight":50,"keyword":"VueI18n"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true}]},{"node":{"fields":{"slug":"/mutliple-validation-errors-in-aws-appsync","title":"AWS AppSyncで入力チェックエラーを複数返す方法","date":"2019-02-26T07:30:00.000+09:00","excerpt":"なにこれAppSyncのリゾルバーでDynamoDBのデータを更新する場合、更新処理の前に入力チェックは必ず実施すると思います。この時、入力チェックエラーを見つけた時点で1つのエラーメッセージを返すより、すべてのチェック実施後にまとめてエラ...","tags":["AppSync","AWS","GraphQL"],"keywords":["AppSync"],"thumbnail":"/thumbnail/2019/02/mutliple-validation-errors-in-aws-appsync.png"}},"relations":[{"node":{"fields":{"slug":"/aws-appsync-and-serverless-framework","title":"AppSync + Serverless Frameworkによるソースコードの構成管理","date":"2019-03-04T07:50:00.000+09:00","excerpt":"なにこれAWSのGraphQLマネージドサービス「AppSync」はGUIで簡単に設定ができて便利ですが、本格的に開発を進めていくとGUIポチポチでソースコードを管理するのはつらくなってきます。Serverless Frameworkという...","tags":["AppSync","serverless","AWS","GraphQL"],"keywords":["AppSync"],"thumbnail":"/thumbnail/2019/03/aws-appsync-and-serverless-framework.png"}},"matches":4,"weight":250,"details":[{"weight":100,"keyword":"AppSync"},{"weight":50,"keyword":"AppSync"},{"weight":50,"keyword":"AWS"},{"weight":50,"keyword":"GraphQL"}],"avgWeight":62.5,"totalWeight":58,"threshold":12.5,"isRelated":true},{"node":{"fields":{"slug":"/aws-appsync-pipeline-resolver-with-multiple-dynamodb-tables","title":"AWS AppSyncのPipeline Resolverで複数データリソースを扱う場合のVTLの書き方","date":"2019-02-19T07:30:00.000+09:00","excerpt":"なにこれAWSのGraphQLフルマネージドサービス「AppSync」で複数のデータリソースを扱う場合は「Pipeline Resolver」という機能を使います。これは、1つのデータリソースを扱うファンクションを定義し、それらを組み合わせ...","tags":["AppSync","AWS","GraphQL","DynamoDB"],"keywords":["GraphQL"],"thumbnail":"/thumbnail/2019/02/aws-appsync-pipeline-resolver-with-multiple-dynamodb-tables.png"}},"matches":3,"weight":150,"details":[{"weight":50,"keyword":"AppSync"},{"weight":50,"keyword":"AWS"},{"weight":50,"keyword":"GraphQL"}],"avgWeight":50,"totalWeight":44,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/how-to-get-user-custom-attributes-in-resolver-with-amplify-appsync-cognito","title":"Amplify + Cognito + AppSyncにおいてリゾルバーでユーザのカスタム属性を取得する方法","date":"2019-04-13T07:14:40.000+09:00","excerpt":"なにこれAppSync + Cognitoにおける認可制御について以前の記事で説明しました。今回は、ユーザーのカスタム属性を使った認可制御（AppSyncのリゾルバーでカスタム属性を取得する方法）についてご紹介します。TL;DRAppSyn...","tags":["Amplify","AppSync","AWS","Cognito"],"keywords":["AWS"],"thumbnail":"/thumbnail/2019/04/how-to-get-user-custom-attributes-in-resolver-with-amplify-appsync-cognito.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"AppSync"},{"weight":50,"keyword":"AWS"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/aws-appsync-auth-with-cognito","title":"AppSync + Cognitoによる認可制御","date":"2019-03-17T17:45:00.000+09:00","excerpt":"なにこれAppSyncはCognitoと連携して認可制御ができます。今回はそのやり方についてご紹介します。ざっくりいうと以下のようなことが実現可能です。✨スキーマ定義におけるQueryやMutationごとの認可制御（ユーザーグループ）💎...","tags":["AppSync","AWS","Cognito"],"keywords":["AWS"],"thumbnail":"/thumbnail/2019/03/aws-appsync-auth-with-cognito.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"AppSync"},{"weight":50,"keyword":"AWS"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/vue-i18n-in-script-tag","title":"VueI18nをscriptタグやJSファイル内で使う方法","date":"2019-02-21T07:50:00.000+09:00","excerpt":"なにこれVueI18nはVue.jsの多言語対応ライブラリです。vueファイルのtemplateタグでは、&#x3C;p>{{$t('message.hello')}}&#x3C;/p>のように使います。ただvueファイルのscriptタグ...","tags":["Vue.js","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/02/vue-i18n-in-script-tag.png"}},"relations":[{"node":{"fields":{"slug":"/vee-validate-custom-validation-locale-message","title":"Vuetify + VeeValidate + VueI18nでカスタムバリデーション作成時にロケールごとのエラーメッセージを設定する方法","date":"2019-04-07T14:10:00.000+09:00","excerpt":"なにこれVuetify + VeeValidateで入力チェックする際に、VueI18nを使ってエラーメッセージを多言語対応・共通化する場合に、カスタムバリデーションのエラーメッセージをロケールごとに設定する方法について紹介します。実装方法...","tags":["Vue.js","Vuetify","VeeValidate","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/04/vee-validate-custom-validation-locale-message.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"},{"weight":50,"keyword":"VueI18n"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/vuetify-and-vee-validate-and-vue-i18n","title":"Vuetify + VeeValidate + VueI18nでエラーメッセージ共通化","date":"2019-03-02T12:30:00.000+09:00","excerpt":"なにこれVuetify + VeeValidateで入力チェックする際に、VueI18nを使ってエラーメッセージを多言語対応・共通化する方法について紹介します。定義方法VeeValidateVeeValidateであらかじめ言語毎にエラーメ...","tags":["Vue.js","Vuetify","VeeValidate","VueI18n"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/03/vuetify-and-vee-validate-and-vue-i18n.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"},{"weight":50,"keyword":"VueI18n"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/vuetify-datatable-and-pagination-with-vuex","title":"VuetifyのDataTableとPaginationの状態をVuexで管理する","date":"2019-04-28T20:30:00.000+09:00","excerpt":"なにこれVuetifyのDataTableとPaginationを使った検索一覧画面でページングの状態を、ルーティングをまたいで保存しておきたい。という要望を満たすため、ページングの状態をVuexで管理する方法をメモします。DataTabl...","tags":["Vue.js","Vuetify","Vuex"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/04/vuetify-datatable-and-pagination-with-vuex.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/multi-message-snackbar-in-vuetify","title":"VuetifyのSnackbarで複数メッセージ表示する方法","date":"2019-04-21T21:30:00.000+09:00","excerpt":"なにこれVuetifyのSnackbarはメッセージを1つしか表示できません。こちらGitHubでもissueになっています。ただUIとしてはメッセージを複数表示できたほうが便利なので、今回はVuetifyのSnackbarをベースにメッセ...","tags":["Vuetify","Vue.js"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/04/multi-message-snackbar-in-vuetify.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/vuetify-select-tag","title":"VuetifyでSelectタグを使う時の注意点","date":"2019-03-24T23:55:00.000+09:00","excerpt":"なにこれ最近Vue.jsのマテリアルデザインのUIフレームワーク「Vuetify」を使っています。とても便利で、管理アプリのようにデザインにこだわる必要がなければ、CSSをほとんど書かずに済むくらいコンポーネントが充実しています。ただSel...","tags":["Vue.js","Vuetify"],"keywords":["Vue.js"],"thumbnail":"/thumbnail/2019/03/vuetify-select-tag.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Vue.js"},{"weight":50,"keyword":"Vue.js"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/aws-appsync-pipeline-resolver-with-multiple-dynamodb-tables","title":"AWS AppSyncのPipeline Resolverで複数データリソースを扱う場合のVTLの書き方","date":"2019-02-19T07:30:00.000+09:00","excerpt":"なにこれAWSのGraphQLフルマネージドサービス「AppSync」で複数のデータリソースを扱う場合は「Pipeline Resolver」という機能を使います。これは、1つのデータリソースを扱うファンクションを定義し、それらを組み合わせ...","tags":["AppSync","AWS","GraphQL","DynamoDB"],"keywords":["GraphQL"],"thumbnail":"/thumbnail/2019/02/aws-appsync-pipeline-resolver-with-multiple-dynamodb-tables.png"}},"relations":[{"node":{"fields":{"slug":"/nuxt-apollo-with-graphpack","title":"Nuxt.js＋Apollo ClientでCRUD操作 / ユーザー管理画面でQuery, Mutation, Subscriptionを実装","date":"2019-02-12T07:00:00.000+09:00","excerpt":"なにこれ以前の記事設定いらずのNode製GraphQLサーバー「Graphpack」の使い方でGraphQLのサーバー側を実装を紹介しました。Graphpackは備え付けのGraphQL Playground IDEで動作確認できますが、せ...","tags":["GraphQL","Nuxt.js","Apollo Client","Vue.js"],"keywords":["GraphQL"],"thumbnail":"/thumbnail/2019/02/nuxt-apollo-with-graphpack.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"GraphQL"},{"weight":50,"keyword":"GraphQL"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/graphpack-graphql-zero-config-server","title":"設定いらずのNode製GraphQLサーバー「Graphpack」の使い方 / Query, Mutation, Subscriptionを試す","date":"2019-01-23T19:50:00.000+09:00","excerpt":"なにこれ「とりあえずクライアント側と同じJavaScriptで手っ取り早くGraphQLサーバー立てたい！」このようなユースケースにGraphpackはピッタリです。設定いらずのNode製GraphQLサーバーで 「GraphQLのスキーマ...","tags":["GraphQL","Graphpack"],"keywords":["GraphQL"],"thumbnail":"/thumbnail/2019/01/graphpack-graphql-zero-config-server.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"GraphQL"},{"weight":50,"keyword":"GraphQL"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/hello-nuxt-graphql-with-apollo-client","title":"Nuxt.js＋Apollo＋GraphQLをサクッと学べた /「Hello, GraphQL for client-side!」を読んだ","date":"2019-01-07T19:00:00.000+09:00","excerpt":"なにこれNuxt.js＋GraphQLの知識がこれから必要になるので「Hello, GraphQL for client-side!」を読んだところ、非常にサクっと学ぶことができたので感想を書きます。GraphQLでサーバーと通信するには「...","tags":["GraphQL","Nuxt.js","Apollo Client","Vue.js","読書感想"],"keywords":["GraphQL"],"thumbnail":"/thumbnail/2019/01/hello-nuxt-graphql-with-apollo-client.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"GraphQL"},{"weight":50,"keyword":"GraphQL"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/aws-appsync-and-serverless-framework","title":"AppSync + Serverless Frameworkによるソースコードの構成管理","date":"2019-03-04T07:50:00.000+09:00","excerpt":"なにこれAWSのGraphQLマネージドサービス「AppSync」はGUIで簡単に設定ができて便利ですが、本格的に開発を進めていくとGUIポチポチでソースコードを管理するのはつらくなってきます。Serverless Frameworkという...","tags":["AppSync","serverless","AWS","GraphQL"],"keywords":["AppSync"],"thumbnail":"/thumbnail/2019/03/aws-appsync-and-serverless-framework.png"}},"matches":3,"weight":150,"details":[{"weight":50,"keyword":"AppSync"},{"weight":50,"keyword":"AWS"},{"weight":50,"keyword":"GraphQL"}],"avgWeight":50,"totalWeight":44,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/mutliple-validation-errors-in-aws-appsync","title":"AWS AppSyncで入力チェックエラーを複数返す方法","date":"2019-02-26T07:30:00.000+09:00","excerpt":"なにこれAppSyncのリゾルバーでDynamoDBのデータを更新する場合、更新処理の前に入力チェックは必ず実施すると思います。この時、入力チェックエラーを見つけた時点で1つのエラーメッセージを返すより、すべてのチェック実施後にまとめてエラ...","tags":["AppSync","AWS","GraphQL"],"keywords":["AppSync"],"thumbnail":"/thumbnail/2019/02/mutliple-validation-errors-in-aws-appsync.png"}},"matches":3,"weight":150,"details":[{"weight":50,"keyword":"AppSync"},{"weight":50,"keyword":"AWS"},{"weight":50,"keyword":"GraphQL"}],"avgWeight":50,"totalWeight":44,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/how-to-get-user-custom-attributes-in-resolver-with-amplify-appsync-cognito","title":"Amplify + Cognito + AppSyncにおいてリゾルバーでユーザのカスタム属性を取得する方法","date":"2019-04-13T07:14:40.000+09:00","excerpt":"なにこれAppSync + Cognitoにおける認可制御について以前の記事で説明しました。今回は、ユーザーのカスタム属性を使った認可制御（AppSyncのリゾルバーでカスタム属性を取得する方法）についてご紹介します。TL;DRAppSyn...","tags":["Amplify","AppSync","AWS","Cognito"],"keywords":["AWS"],"thumbnail":"/thumbnail/2019/04/how-to-get-user-custom-attributes-in-resolver-with-amplify-appsync-cognito.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"AppSync"},{"weight":50,"keyword":"AWS"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/aws-appsync-auth-with-cognito","title":"AppSync + Cognitoによる認可制御","date":"2019-03-17T17:45:00.000+09:00","excerpt":"なにこれAppSyncはCognitoと連携して認可制御ができます。今回はそのやり方についてご紹介します。ざっくりいうと以下のようなことが実現可能です。✨スキーマ定義におけるQueryやMutationごとの認可制御（ユーザーグループ）💎...","tags":["AppSync","AWS","Cognito"],"keywords":["AWS"],"thumbnail":"/thumbnail/2019/03/aws-appsync-auth-with-cognito.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"AppSync"},{"weight":50,"keyword":"AWS"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/nuxt-apollo-with-graphpack","title":"Nuxt.js＋Apollo ClientでCRUD操作 / ユーザー管理画面でQuery, Mutation, Subscriptionを実装","date":"2019-02-12T07:00:00.000+09:00","excerpt":"なにこれ以前の記事設定いらずのNode製GraphQLサーバー「Graphpack」の使い方でGraphQLのサーバー側を実装を紹介しました。Graphpackは備え付けのGraphQL Playground IDEで動作確認できますが、せ...","tags":["GraphQL","Nuxt.js","Apollo Client","Vue.js"],"keywords":["GraphQL"],"thumbnail":"/thumbnail/2019/02/nuxt-apollo-with-graphpack.png"}},"relations":[{"node":{"fields":{"slug":"/hello-nuxt-graphql-with-apollo-client","title":"Nuxt.js＋Apollo＋GraphQLをサクッと学べた /「Hello, GraphQL for client-side!」を読んだ","date":"2019-01-07T19:00:00.000+09:00","excerpt":"なにこれNuxt.js＋GraphQLの知識がこれから必要になるので「Hello, GraphQL for client-side!」を読んだところ、非常にサクっと学ぶことができたので感想を書きます。GraphQLでサーバーと通信するには「...","tags":["GraphQL","Nuxt.js","Apollo Client","Vue.js","読書感想"],"keywords":["GraphQL"],"thumbnail":"/thumbnail/2019/01/hello-nuxt-graphql-with-apollo-client.png"}},"matches":5,"weight":300,"details":[{"weight":100,"keyword":"GraphQL"},{"weight":50,"keyword":"GraphQL"},{"weight":50,"keyword":"Nuxt.js"},{"weight":50,"keyword":"Apollo Client"},{"weight":50,"keyword":"Vue.js"}],"avgWeight":60,"totalWeight":56,"threshold":10,"isRelated":true},{"node":{"fields":{"slug":"/aws-appsync-pipeline-resolver-with-multiple-dynamodb-tables","title":"AWS AppSyncのPipeline Resolverで複数データリソースを扱う場合のVTLの書き方","date":"2019-02-19T07:30:00.000+09:00","excerpt":"なにこれAWSのGraphQLフルマネージドサービス「AppSync」で複数のデータリソースを扱う場合は「Pipeline Resolver」という機能を使います。これは、1つのデータリソースを扱うファンクションを定義し、それらを組み合わせ...","tags":["AppSync","AWS","GraphQL","DynamoDB"],"keywords":["GraphQL"],"thumbnail":"/thumbnail/2019/02/aws-appsync-pipeline-resolver-with-multiple-dynamodb-tables.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"GraphQL"},{"weight":50,"keyword":"GraphQL"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/graphpack-graphql-zero-config-server","title":"設定いらずのNode製GraphQLサーバー「Graphpack」の使い方 / Query, Mutation, Subscriptionを試す","date":"2019-01-23T19:50:00.000+09:00","excerpt":"なにこれ「とりあえずクライアント側と同じJavaScriptで手っ取り早くGraphQLサーバー立てたい！」このようなユースケースにGraphpackはピッタリです。設定いらずのNode製GraphQLサーバーで 「GraphQLのスキーマ...","tags":["GraphQL","Graphpack"],"keywords":["GraphQL"],"thumbnail":"/thumbnail/2019/01/graphpack-graphql-zero-config-server.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"GraphQL"},{"weight":50,"keyword":"GraphQL"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/gatsby-related-posts-like-hugo","title":"GatsbyでRelated Content(関連記事)を表示する / Hugoの関連記事機能をGatsbyに移植した","date":"2019-02-09T17:00:00.000+09:00","excerpt":"なにこれブログでよく見かけるUIのひとつに関連記事リンクあります。記事下部に関連記事リンクを設けておくと、記事を読み終えたユーザーが、また別の記事を見てくれる可能性が上がるので、回遊率向上という観点で非常に効果的なUIです。そんな関連記事リ...","tags":["Gatsby","Hugo","golang"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2019/02/gatsby-related-posts-like-hugo.png"}},"relations":[{"node":{"fields":{"slug":"/how-to-register-your-blog-in-gatsby-showcase","title":"Gatsbyショーケースに自分のWebサイトを登録する方法","date":"2019-01-15T22:00:00.000+09:00","excerpt":"なにこれGatsbyの公式サイトにはショーケースなるものがあって、世の中に公開されているGatsby製のWebサイトを一覧で見ることができます。実はこのショーケース、けっこう簡単に自分のWebサイトを登録できるということに最近気づきました。...","tags":["Gatsby"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2019/01/how-to-register-your-blog-in-gatsby-showcase.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/11/24/","title":"Gatsby themeを使ってみる","date":"2018-11-24T23:40:00.000+09:00","excerpt":"なにこれ下記の記事を読んで、実験的に追加されたGatsby themeで何ができるのかサンプル作って試してみました。そのときのメモです。Gatsby themeはどんな問題を解決してくれるかGatsbyはスキャフォールド機能があって初期導入...","tags":["Gatsby","Gatsby theme"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-theme.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/14/","title":"Gatsbyにおけるコンポーネント分割とCSS Module","date":"2018-10-14T07:00:00.000Z","excerpt":"なにこれGatsbyでブログを作っていて、機能拡張とともにテンプレートが肥大化してきたので、下記図の青枠単位でコンポーネント分割しました。あわせてCSS Moduleも採用しました。そのときのメモです。CSSをコンポーネントスコープにする方...","tags":["Gatsby","React","CSSModules"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-css-modules.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/12/","title":"Gatsby2系の新機能","date":"2018-10-12T12:00:00.000Z","excerpt":"なにこれGatsby（React製の静的サイトジェネレーター）が2018年9月に2系にアップデートしたそうです。2系の新機能について、公式ブログ(Announcing Gatsby 2.0.0)を参考に、主要な部分をピックアップして紹介しま...","tags":["Gatsby"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-v2.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/08/","title":"GatsbyでPWA対応","date":"2018-10-08T12:00:00.000Z","excerpt":"なにこれスマホでネイティブアプリっぽいUXを実現するため、GatsbyでPWA対応した時のメモです。以下の4つが可能になりました。前提ServiceWorkerを利用するため、SSL化が必須です。そのためブログはhttpsでアクセスできるよ...","tags":["Gatsby","PWA"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-pwa.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/07/","title":"GatsbyでYouTubeとTwitter埋め込み","date":"2018-10-07T12:00:00.000Z","excerpt":"なにこれブログに良くあるYouTubeやTwitterの埋め込みをGatsbyでやる方法のメモです。こんな感じで埋め込めるようになります。YouTubeyoutube:https://www.youtube.com/embed/z8Kt1g...","tags":["Gatsby","SNS","SER"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/youtube-in-gatsby.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/09/10/","title":"Gatsby製ブログ開設手順","date":"2018-09-10T19:00:00.000Z","excerpt":"ブログ開設手順Gatsbyってなにって状態から30分程度でブログを開設できました。下記にそのときの手順をメモしておきます。0. 前提条件Git、Node、npmは事前にインストールしておいてください。1. ブログのスターターキットを起動Ga...","tags":["Gatsby","ブログ"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/how-to-start-a-blog-with-gatsby.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/09/09/","title":"Gatsbyでブログ始めました。","date":"2018-09-09T22:00:00.000Z","excerpt":"ブログをやろうと思った理由Qiitaは、誰得な作業メモは載せられないしはてなブログは、見た目が好きじゃない...一時期、WikiHub日報とかもやっていたんですが、なかなか続かず...そのせいか、やったことを3ヶ月後には忘れてしまう状況がコ...","tags":["Gatsby","ブログ"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/beginning-of-blog.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/mdx-deck-and-code-surfer","title":"WEBエンジニア勉強会 初LT感想と参加レポート / 「MDX-DeckとCode Surferでスライドを作ろう！」補足情報","date":"2019-02-03T17:15:00.000+09:00","excerpt":"なにこれ2019/2/1(金)、WEBエンジニア勉強会 #11でLTしてきました。本記事では自分のLTスライドと、10分の枠では伝えきれなかった補足情報を紹介します。また他の方のLTの様子や、勉強会の雰囲気なども参加レポートとして書いていま...","tags":["勉強会","LT","mdx-deck","mdx","code-surfer","markdown","プレゼン","スライド"],"keywords":["mdx-deck"],"thumbnail":"/thumbnail/2019/02/mdx-deck-and-code-surfer.png"}},"relations":[{"node":{"fields":{"slug":"/2018/12/23/","title":"mdx-deckとcode-surferでスライドを作ろう！","date":"2018-12-23T23:50:00.000+09:00","excerpt":"なにこれmdx-deckとcode-surferを使って、mdxファイルで簡単にリッチなスライドが作れるので試してみました。作ったスライドは下記、またはGitHub Pagesをご覧ください。スマホだと小っちゃいのでPCで見てください:di...","tags":["mdx-deck","mdx","code-surfer","markdown","プレゼン","スライド"],"keywords":["mdx-deck"],"thumbnail":"/thumbnail/2018/mdx-and-codesufer.png"}},"matches":7,"weight":400,"details":[{"weight":100,"keyword":"mdx-deck"},{"weight":50,"keyword":"mdx-deck"},{"weight":50,"keyword":"mdx"},{"weight":50,"keyword":"code-surfer"},{"weight":50,"keyword":"markdown"},{"weight":50,"keyword":"プレゼン"},{"weight":50,"keyword":"スライド"}],"avgWeight":57.142857142857146,"totalWeight":52,"threshold":7.142857142857143,"isRelated":true},{"node":{"fields":{"slug":"/impression-of-cherrypick-js-20190119","title":"懇親会で飛び込みLTに参加した / 「JavaScriptつまみ食い LT 会 ～ つまみ食い LT 大会！」の感想","date":"2019-01-21T03:30:00.000+09:00","excerpt":"なにこれ2019/1/19(土)、JavaScriptつまみ食い LT 会 #4 ～ つまみ食い LT 大会！で懇親会にて飛び込みLTに参加しました。勉強会の様子も含めLTの感想を書きます。どんな勉強会だったか今回で開催5回目となり、4回目...","tags":["JavaScript","mdx-deck","勉強会","LT"],"keywords":["勉強会"],"thumbnail":"/thumbnail/2019/01/impression-of-cherrypick-js-20190119.png"}},"matches":3,"weight":150,"details":[{"weight":50,"keyword":"勉強会"},{"weight":50,"keyword":"LT"},{"weight":50,"keyword":"mdx-deck"}],"avgWeight":50,"totalWeight":44,"threshold":16.666666666666668,"isRelated":true}]},{"node":{"fields":{"slug":"/graphpack-graphql-zero-config-server","title":"設定いらずのNode製GraphQLサーバー「Graphpack」の使い方 / Query, Mutation, Subscriptionを試す","date":"2019-01-23T19:50:00.000+09:00","excerpt":"なにこれ「とりあえずクライアント側と同じJavaScriptで手っ取り早くGraphQLサーバー立てたい！」このようなユースケースにGraphpackはピッタリです。設定いらずのNode製GraphQLサーバーで 「GraphQLのスキーマ...","tags":["GraphQL","Graphpack"],"keywords":["GraphQL"],"thumbnail":"/thumbnail/2019/01/graphpack-graphql-zero-config-server.png"}},"relations":[{"node":{"fields":{"slug":"/aws-appsync-pipeline-resolver-with-multiple-dynamodb-tables","title":"AWS AppSyncのPipeline Resolverで複数データリソースを扱う場合のVTLの書き方","date":"2019-02-19T07:30:00.000+09:00","excerpt":"なにこれAWSのGraphQLフルマネージドサービス「AppSync」で複数のデータリソースを扱う場合は「Pipeline Resolver」という機能を使います。これは、1つのデータリソースを扱うファンクションを定義し、それらを組み合わせ...","tags":["AppSync","AWS","GraphQL","DynamoDB"],"keywords":["GraphQL"],"thumbnail":"/thumbnail/2019/02/aws-appsync-pipeline-resolver-with-multiple-dynamodb-tables.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"GraphQL"},{"weight":50,"keyword":"GraphQL"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/nuxt-apollo-with-graphpack","title":"Nuxt.js＋Apollo ClientでCRUD操作 / ユーザー管理画面でQuery, Mutation, Subscriptionを実装","date":"2019-02-12T07:00:00.000+09:00","excerpt":"なにこれ以前の記事設定いらずのNode製GraphQLサーバー「Graphpack」の使い方でGraphQLのサーバー側を実装を紹介しました。Graphpackは備え付けのGraphQL Playground IDEで動作確認できますが、せ...","tags":["GraphQL","Nuxt.js","Apollo Client","Vue.js"],"keywords":["GraphQL"],"thumbnail":"/thumbnail/2019/02/nuxt-apollo-with-graphpack.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"GraphQL"},{"weight":50,"keyword":"GraphQL"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/hello-nuxt-graphql-with-apollo-client","title":"Nuxt.js＋Apollo＋GraphQLをサクッと学べた /「Hello, GraphQL for client-side!」を読んだ","date":"2019-01-07T19:00:00.000+09:00","excerpt":"なにこれNuxt.js＋GraphQLの知識がこれから必要になるので「Hello, GraphQL for client-side!」を読んだところ、非常にサクっと学ぶことができたので感想を書きます。GraphQLでサーバーと通信するには「...","tags":["GraphQL","Nuxt.js","Apollo Client","Vue.js","読書感想"],"keywords":["GraphQL"],"thumbnail":"/thumbnail/2019/01/hello-nuxt-graphql-with-apollo-client.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"GraphQL"},{"weight":50,"keyword":"GraphQL"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/impression-of-cherrypick-js-20190119","title":"懇親会で飛び込みLTに参加した / 「JavaScriptつまみ食い LT 会 ～ つまみ食い LT 大会！」の感想","date":"2019-01-21T03:30:00.000+09:00","excerpt":"なにこれ2019/1/19(土)、JavaScriptつまみ食い LT 会 #4 ～ つまみ食い LT 大会！で懇親会にて飛び込みLTに参加しました。勉強会の様子も含めLTの感想を書きます。どんな勉強会だったか今回で開催5回目となり、4回目...","tags":["JavaScript","mdx-deck","勉強会","LT"],"keywords":["勉強会"],"thumbnail":"/thumbnail/2019/01/impression-of-cherrypick-js-20190119.png"}},"relations":[{"node":{"fields":{"slug":"/mdx-deck-and-code-surfer","title":"WEBエンジニア勉強会 初LT感想と参加レポート / 「MDX-DeckとCode Surferでスライドを作ろう！」補足情報","date":"2019-02-03T17:15:00.000+09:00","excerpt":"なにこれ2019/2/1(金)、WEBエンジニア勉強会 #11でLTしてきました。本記事では自分のLTスライドと、10分の枠では伝えきれなかった補足情報を紹介します。また他の方のLTの様子や、勉強会の雰囲気なども参加レポートとして書いていま...","tags":["勉強会","LT","mdx-deck","mdx","code-surfer","markdown","プレゼン","スライド"],"keywords":["mdx-deck"],"thumbnail":"/thumbnail/2019/02/mdx-deck-and-code-surfer.png"}},"matches":3,"weight":150,"details":[{"weight":50,"keyword":"mdx-deck"},{"weight":50,"keyword":"勉強会"},{"weight":50,"keyword":"LT"}],"avgWeight":50,"totalWeight":44,"threshold":16.666666666666668,"isRelated":true}]},{"node":{"fields":{"slug":"/how-to-register-your-blog-in-gatsby-showcase","title":"Gatsbyショーケースに自分のWebサイトを登録する方法","date":"2019-01-15T22:00:00.000+09:00","excerpt":"なにこれGatsbyの公式サイトにはショーケースなるものがあって、世の中に公開されているGatsby製のWebサイトを一覧で見ることができます。実はこのショーケース、けっこう簡単に自分のWebサイトを登録できるということに最近気づきました。...","tags":["Gatsby"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2019/01/how-to-register-your-blog-in-gatsby-showcase.png"}},"relations":[{"node":{"fields":{"slug":"/gatsby-related-posts-like-hugo","title":"GatsbyでRelated Content(関連記事)を表示する / Hugoの関連記事機能をGatsbyに移植した","date":"2019-02-09T17:00:00.000+09:00","excerpt":"なにこれブログでよく見かけるUIのひとつに関連記事リンクあります。記事下部に関連記事リンクを設けておくと、記事を読み終えたユーザーが、また別の記事を見てくれる可能性が上がるので、回遊率向上という観点で非常に効果的なUIです。そんな関連記事リ...","tags":["Gatsby","Hugo","golang"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2019/02/gatsby-related-posts-like-hugo.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/11/24/","title":"Gatsby themeを使ってみる","date":"2018-11-24T23:40:00.000+09:00","excerpt":"なにこれ下記の記事を読んで、実験的に追加されたGatsby themeで何ができるのかサンプル作って試してみました。そのときのメモです。Gatsby themeはどんな問題を解決してくれるかGatsbyはスキャフォールド機能があって初期導入...","tags":["Gatsby","Gatsby theme"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-theme.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/14/","title":"Gatsbyにおけるコンポーネント分割とCSS Module","date":"2018-10-14T07:00:00.000Z","excerpt":"なにこれGatsbyでブログを作っていて、機能拡張とともにテンプレートが肥大化してきたので、下記図の青枠単位でコンポーネント分割しました。あわせてCSS Moduleも採用しました。そのときのメモです。CSSをコンポーネントスコープにする方...","tags":["Gatsby","React","CSSModules"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-css-modules.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/12/","title":"Gatsby2系の新機能","date":"2018-10-12T12:00:00.000Z","excerpt":"なにこれGatsby（React製の静的サイトジェネレーター）が2018年9月に2系にアップデートしたそうです。2系の新機能について、公式ブログ(Announcing Gatsby 2.0.0)を参考に、主要な部分をピックアップして紹介しま...","tags":["Gatsby"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-v2.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/08/","title":"GatsbyでPWA対応","date":"2018-10-08T12:00:00.000Z","excerpt":"なにこれスマホでネイティブアプリっぽいUXを実現するため、GatsbyでPWA対応した時のメモです。以下の4つが可能になりました。前提ServiceWorkerを利用するため、SSL化が必須です。そのためブログはhttpsでアクセスできるよ...","tags":["Gatsby","PWA"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-pwa.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/07/","title":"GatsbyでYouTubeとTwitter埋め込み","date":"2018-10-07T12:00:00.000Z","excerpt":"なにこれブログに良くあるYouTubeやTwitterの埋め込みをGatsbyでやる方法のメモです。こんな感じで埋め込めるようになります。YouTubeyoutube:https://www.youtube.com/embed/z8Kt1g...","tags":["Gatsby","SNS","SER"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/youtube-in-gatsby.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/09/10/","title":"Gatsby製ブログ開設手順","date":"2018-09-10T19:00:00.000Z","excerpt":"ブログ開設手順Gatsbyってなにって状態から30分程度でブログを開設できました。下記にそのときの手順をメモしておきます。0. 前提条件Git、Node、npmは事前にインストールしておいてください。1. ブログのスターターキットを起動Ga...","tags":["Gatsby","ブログ"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/how-to-start-a-blog-with-gatsby.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/09/09/","title":"Gatsbyでブログ始めました。","date":"2018-09-09T22:00:00.000Z","excerpt":"ブログをやろうと思った理由Qiitaは、誰得な作業メモは載せられないしはてなブログは、見た目が好きじゃない...一時期、WikiHub日報とかもやっていたんですが、なかなか続かず...そのせいか、やったことを3ヶ月後には忘れてしまう状況がコ...","tags":["Gatsby","ブログ"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/beginning-of-blog.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/iframely","title":"ブログにあらゆる外部コンテンツを埋め込めるWebサービス「Iframely」の使い方","date":"2019-01-11T23:30:00.000+09:00","excerpt":"なにこれSNSのコンテンツ、動画といった外部コンテンツを自分のブログに載せる場合、単純にリンクを張り付けるよりも、以下のようにHTMLの埋め込みコードを張り付けたほうがビジュアル面で効果的です。ただTwitterやYouTubeなどの埋め込...","tags":["Iframely","oEmbed","埋め込みコード","React","Gatsby"],"keywords":["Iframely"],"thumbnail":"/thumbnail/2019/01/iframely.png"}},"relations":[{"node":{"fields":{"slug":"/2018/10/14/","title":"Gatsbyにおけるコンポーネント分割とCSS Module","date":"2018-10-14T07:00:00.000Z","excerpt":"なにこれGatsbyでブログを作っていて、機能拡張とともにテンプレートが肥大化してきたので、下記図の青枠単位でコンポーネント分割しました。あわせてCSS Moduleも採用しました。そのときのメモです。CSSをコンポーネントスコープにする方...","tags":["Gatsby","React","CSSModules"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-css-modules.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"React"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/09/16/","title":"ReactでSNS対応（Gatsby製ブログでSNSシェアボタン、OGPタグ追加）","date":"2018-09-16T22:00:00.000Z","excerpt":"なにこれGatsby製ブログ(Reactアプリ)でSNS対応した時のメモです。(1) SNSシェアボタンと(2) 自分のSNSへのリンクを設置して、ブログの記事をSNSでシェアできるように、、、また、(3) OGPタグを設定し、SNSでシェ...","tags":["Gatsby","React","OGP","SNS","SRE"],"keywords":["React"],"thumbnail":"/thumbnail/2018/react-sns.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"React"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/hello-nuxt-graphql-with-apollo-client","title":"Nuxt.js＋Apollo＋GraphQLをサクッと学べた /「Hello, GraphQL for client-side!」を読んだ","date":"2019-01-07T19:00:00.000+09:00","excerpt":"なにこれNuxt.js＋GraphQLの知識がこれから必要になるので「Hello, GraphQL for client-side!」を読んだところ、非常にサクっと学ぶことができたので感想を書きます。GraphQLでサーバーと通信するには「...","tags":["GraphQL","Nuxt.js","Apollo Client","Vue.js","読書感想"],"keywords":["GraphQL"],"thumbnail":"/thumbnail/2019/01/hello-nuxt-graphql-with-apollo-client.png"}},"relations":[{"node":{"fields":{"slug":"/nuxt-apollo-with-graphpack","title":"Nuxt.js＋Apollo ClientでCRUD操作 / ユーザー管理画面でQuery, Mutation, Subscriptionを実装","date":"2019-02-12T07:00:00.000+09:00","excerpt":"なにこれ以前の記事設定いらずのNode製GraphQLサーバー「Graphpack」の使い方でGraphQLのサーバー側を実装を紹介しました。Graphpackは備え付けのGraphQL Playground IDEで動作確認できますが、せ...","tags":["GraphQL","Nuxt.js","Apollo Client","Vue.js"],"keywords":["GraphQL"],"thumbnail":"/thumbnail/2019/02/nuxt-apollo-with-graphpack.png"}},"matches":5,"weight":300,"details":[{"weight":100,"keyword":"GraphQL"},{"weight":50,"keyword":"GraphQL"},{"weight":50,"keyword":"Nuxt.js"},{"weight":50,"keyword":"Apollo Client"},{"weight":50,"keyword":"Vue.js"}],"avgWeight":60,"totalWeight":56,"threshold":10,"isRelated":true},{"node":{"fields":{"slug":"/aws-appsync-pipeline-resolver-with-multiple-dynamodb-tables","title":"AWS AppSyncのPipeline Resolverで複数データリソースを扱う場合のVTLの書き方","date":"2019-02-19T07:30:00.000+09:00","excerpt":"なにこれAWSのGraphQLフルマネージドサービス「AppSync」で複数のデータリソースを扱う場合は「Pipeline Resolver」という機能を使います。これは、1つのデータリソースを扱うファンクションを定義し、それらを組み合わせ...","tags":["AppSync","AWS","GraphQL","DynamoDB"],"keywords":["GraphQL"],"thumbnail":"/thumbnail/2019/02/aws-appsync-pipeline-resolver-with-multiple-dynamodb-tables.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"GraphQL"},{"weight":50,"keyword":"GraphQL"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/graphpack-graphql-zero-config-server","title":"設定いらずのNode製GraphQLサーバー「Graphpack」の使い方 / Query, Mutation, Subscriptionを試す","date":"2019-01-23T19:50:00.000+09:00","excerpt":"なにこれ「とりあえずクライアント側と同じJavaScriptで手っ取り早くGraphQLサーバー立てたい！」このようなユースケースにGraphpackはピッタリです。設定いらずのNode製GraphQLサーバーで 「GraphQLのスキーマ...","tags":["GraphQL","Graphpack"],"keywords":["GraphQL"],"thumbnail":"/thumbnail/2019/01/graphpack-graphql-zero-config-server.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"GraphQL"},{"weight":50,"keyword":"GraphQL"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/2019/01/01/","title":"「いちばんやさしいGit&GitHubの教本」を読んだ","date":"2019-01-01T09:00:00.000+09:00","excerpt":"なにこれいままで雰囲気でGitを使ってたので、ちゃんと勉強するために読みました。感想タイトルの通り、かなり「やさしい」です。新人さんでOfficeは触ったことあるけどプログラミングは触ったことないって人でも、2～3日で読破でき、GitHub...","tags":["Git","GitHub","読書感想"],"keywords":["Git"],"thumbnail":"/thumbnail/2018/ichiyasa-git.png"}},"relations":[]},{"node":{"fields":{"slug":"/2018/12/29/","title":"パソコンで肩こりに悩んでいる人はデュアルキーボードを試してみよう","date":"2018-12-29T15:50:00.000+09:00","excerpt":"なにこれパソコンで肩こりに悩まされている方は比較的多いと思います。その要因の1つがキーボードです。自分に合わないキーボードを使い続けていると、手首、肩、腰など体に負担がかかり、肩こりの原因になるといわれています。市場には楽にタイピングができ...","tags":["パソコン","肩こり","キーボード","デュアルキーボード"],"keywords":["キーボード"],"thumbnail":"/thumbnail/2018/dual-keybord.png"}},"relations":[]},{"node":{"fields":{"slug":"/2018/12/23/","title":"mdx-deckとcode-surferでスライドを作ろう！","date":"2018-12-23T23:50:00.000+09:00","excerpt":"なにこれmdx-deckとcode-surferを使って、mdxファイルで簡単にリッチなスライドが作れるので試してみました。作ったスライドは下記、またはGitHub Pagesをご覧ください。スマホだと小っちゃいのでPCで見てください:di...","tags":["mdx-deck","mdx","code-surfer","markdown","プレゼン","スライド"],"keywords":["mdx-deck"],"thumbnail":"/thumbnail/2018/mdx-and-codesufer.png"}},"relations":[{"node":{"fields":{"slug":"/mdx-deck-and-code-surfer","title":"WEBエンジニア勉強会 初LT感想と参加レポート / 「MDX-DeckとCode Surferでスライドを作ろう！」補足情報","date":"2019-02-03T17:15:00.000+09:00","excerpt":"なにこれ2019/2/1(金)、WEBエンジニア勉強会 #11でLTしてきました。本記事では自分のLTスライドと、10分の枠では伝えきれなかった補足情報を紹介します。また他の方のLTの様子や、勉強会の雰囲気なども参加レポートとして書いていま...","tags":["勉強会","LT","mdx-deck","mdx","code-surfer","markdown","プレゼン","スライド"],"keywords":["mdx-deck"],"thumbnail":"/thumbnail/2019/02/mdx-deck-and-code-surfer.png"}},"matches":7,"weight":400,"details":[{"weight":100,"keyword":"mdx-deck"},{"weight":50,"keyword":"mdx-deck"},{"weight":50,"keyword":"mdx"},{"weight":50,"keyword":"code-surfer"},{"weight":50,"keyword":"markdown"},{"weight":50,"keyword":"プレゼン"},{"weight":50,"keyword":"スライド"}],"avgWeight":57.142857142857146,"totalWeight":52,"threshold":7.142857142857143,"isRelated":true}]},{"node":{"fields":{"slug":"/2018/12/16/","title":"JJUG CCC 2018 Fallに行ってきました","date":"2018-12-16T21:50:00.000+09:00","excerpt":"なにこれJava CCC 2018 Fallに参加してきました。見てきたセッションは以下の通りです。【JJUG基調講演】Javaの未来を考えよう セッション概要#ccc_e1マネーフォワードのアカウントアグリゲーションの現状と課題点について...","tags":["Java","Kotlin","JJUG CCC","イベントレポート"],"keywords":["Java"],"thumbnail":"/thumbnail/2018/jjug-ccc-2018-fall.png"}},"relations":[{"node":{"fields":{"slug":"/4bf6ffd5-8640-508e-ab47-1a55df05d72e/","title":"Declarative PipelineでJenkinsfileを書いてみた(Checkstyle,Findbugs,PMD,CPDとか)","date":"2017-04-07T02:38:55+09:00","excerpt":"GradleのJavaアプリをJenkinsで１人CIするためのJenkinsfileを書いてみた。Githubにプッシュ時に、AWS上のJenkinsのパイプラインジョブが動いて、テストが成功したら同じくAWS上のTomcatにデプロイす...","tags":["Java","Jenkins","CI","gradle","Pipeline","Qiita"],"keywords":["Java"],"thumbnail":""},"id":"4bf6ffd5-8640-508e-ab47-1a55df05d72e","title":"Declarative PipelineでJenkinsfileを書いてみた(Checkstyle,Findbugs,PMD,CPDとか)","rendered_body":"<p>GradleのJavaアプリをJenkinsで１人CIするためのJenkinsfileを書いてみた。<br>\nGithubにプッシュ時に、AWS上のJenkinsのパイプラインジョブが動いて、テストが成功したら同じくAWS上のTomcatにデプロイするみたいな感じで使ってます。</p>\n\n<h1>\n<span id=\"declarative-pipeline\" class=\"fragment\"></span><a href=\"#declarative-pipeline\"><i class=\"fa fa-link\"></i></a>Declarative Pipeline</h1>\n\n<p>いままではJenkinsfileを</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>node {\n  ....\n}\n</pre></div></div>\n\n<p>のように書いてましたが、<a href=\"https://jenkins.io/doc/book/pipeline/syntax/\" rel=\"nofollow noopener\" target=\"_blank\">Jenkinsの公式サイト</a>を見ると<br>\nこれはScripted Pipelinesの記法であり、<br>\nPipeline Pluginのバージョン2.5移行からは</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>pipeline {\n  ....  \n}\n</pre></div></div>\n\n<p>のように書くDeclarative Pipelineという記法が導入されて、<br>\nそっちのほうがシンプルでわかりやすく書けるよ!ということだったので書き直してみました。<br>\n確かにすっきりしたし（特に最後のメールおくるとことか、デプロイするとことか）、<br>\nいざとなったら従来のScripted Pipelinesもミックスできるのでいい感じです。</p>\n\n<h1>\n<span id=\"追加したプラグイン\" class=\"fragment\"></span><a href=\"#%E8%BF%BD%E5%8A%A0%E3%81%97%E3%81%9F%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3\"><i class=\"fa fa-link\"></i></a>追加したプラグイン</h1>\n\n<p>Jenkins初期設定時のSuggested Pluginに入っていないもの</p>\n\n<ul>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Checkstyle+Plugin;jsessionid=E9D4FA5064ACAE1CED7B19928DE0788F\" rel=\"nofollow noopener\" target=\"_blank\">Checkstyle Plugin</a>（v3.47） - Checkstyeの結果収集用</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/FindBugs+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">FindBugs Plugin</a>（v4.69） - Findbugsのレポート生成用 </li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/PMD+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">PMD Plugin</a>（v3.46） - PMDのレポート生成用</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/DRY+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">DRY Plugin</a>（v2.46） - CPD(重複コードチェック)のレポート生成用</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Step+Counter+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Step Counter Plugin</a>（v2.0.0） - ソースコードのステップ数を集計してくれる</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Task+Scanner+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Task Scanner Plugin</a>（v4.50） - ソースコード中のTODOとかを一覧化してくれる</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Javadoc+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Javadoc Plugin</a>（v1.4） - JavaDoc生成用</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Warnings+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Warnings Plugin</a>（v4.60） - ジョブ実行時の警告メッセージを収集してくれる</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/JaCoCo+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">JaCoCo Plugin</a>（v2.2.0） - テストカバレッジのレポート生成用</li>\n</ul>\n\n<h1>\n<span id=\"jenkinsfile\" class=\"fragment\"></span><a href=\"#jenkinsfile\"><i class=\"fa fa-link\"></i></a>Jenkinsfile</h1>\n\n<p>GithubからWebhookでJenkinsのパイプラインジョブを実行する。<br>\nパイプラインジョブではGithubのJenkinsfileを使う。<br>\nジョブの流れは下記。デプロイは静的コード解析とテストが成功したときだけ実行する。<br>\n<a href=\"https://camo.qiitausercontent.com/a055f84cfb5b829f162a94d38542e6ab990a5199/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35366338653132642d323637622d613633372d323234652d6663386362333437346466612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a055f84cfb5b829f162a94d38542e6ab990a5199/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35366338653132642d323637622d613633372d323234652d6663386362333437346466612e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/56c8e12d-267b-a637-224e-fc8cb3474dfa.png\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"groovy\">\n<div class=\"code-lang\"><span class=\"bold\">Jenkinsfile</span></div>\n<div class=\"highlight\"><pre><span class=\"n\">pipeline</span> <span class=\"o\">{</span>\n    <span class=\"n\">agent</span> <span class=\"n\">any</span>\n    <span class=\"c1\">// 定数や変数を定義する</span>\n    <span class=\"n\">environment</span> <span class=\"o\">{</span>\n        <span class=\"n\">reportDir</span> <span class=\"o\">=</span> <span class=\"s1\">'build/reports'</span>\n        <span class=\"n\">javaDir</span> <span class=\"o\">=</span> <span class=\"s1\">'src/main/java'</span>\n        <span class=\"n\">resourcesDir</span> <span class=\"o\">=</span> <span class=\"s1\">'src/main/resources'</span>\n        <span class=\"n\">testReportDir</span> <span class=\"o\">=</span> <span class=\"s1\">'build/test-results/test'</span>\n        <span class=\"n\">jacocoReportDir</span> <span class=\"o\">=</span> <span class=\"s1\">'build/jacoco'</span> \n        <span class=\"n\">javadocDir</span> <span class=\"o\">=</span> <span class=\"s1\">'build/docs/javadoc'</span>\n        <span class=\"n\">libsDir</span> <span class=\"o\">=</span> <span class=\"s1\">'build/libs'</span>\n        <span class=\"n\">appName</span> <span class=\"o\">=</span> <span class=\"s1\">'SampleApp'</span>\n        <span class=\"n\">appVersion</span> <span class=\"o\">=</span> <span class=\"s1\">'1.0.0'</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// stagesブロック中に一つ以上のstageを定義する</span>\n    <span class=\"n\">stages</span> <span class=\"o\">{</span>\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'事前準備'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 実際の処理はstepsブロック中に定義する</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"n\">deleteDir</span><span class=\"o\">()</span>\n\n                <span class=\"c1\">// このJobをトリガーしてきたGithubのプロジェクトをチェックアウト</span>\n                <span class=\"n\">checkout</span> <span class=\"n\">scm</span>\n\n                <span class=\"c1\">// ジョブ失敗の原因調査用にJenkinsfileとbuild.gradleは最初に保存する</span>\n                <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"Jenkinsfile\"</span>\n                <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"build.gradle\"</span>\n\n                <span class=\"c1\">// scriptブロックを使うと従来のScripted Pipelinesの記法も使える</span>\n                <span class=\"n\">script</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">// Permission deniedで怒られないために実行権限を付与する</span>\n                    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">isUnix</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                        <span class=\"n\">sh</span> <span class=\"s1\">'chmod +x gradlew'</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">gradlew</span> <span class=\"s1\">'clean'</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'コンパイル'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"n\">gradlew</span> <span class=\"s1\">'classes testClasses'</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"c1\">// postブロックでstepsブロックの後に実行される処理が定義できる</span>\n            <span class=\"n\">post</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// alwaysブロックはstepsブロックの処理が失敗しても成功しても必ず実行される</span>\n                <span class=\"n\">always</span> <span class=\"o\">{</span>\n\n                    <span class=\"c1\">// JavaDoc生成時に実行するとJavaDocの警告も含まれてしまうので</span>\n                    <span class=\"c1\">// Javaコンパイル時の警告はコンパイル直後に収集する</span>\n                    <span class=\"n\">step</span><span class=\"o\">([</span>\n\n                        <span class=\"c1\">// プラグインを実行するときのクラス指定は完全修飾名でなくてもOK</span>\n                        <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'WarningsPublisher'</span><span class=\"o\">,</span>\n\n                        <span class=\"c1\">// Job実行時のコンソールから警告を収集する場合はconsoleParsers、</span>\n                        <span class=\"c1\">// pmd.xmlなどのファイルから収集する場合はparserConfigurationsを指定する。</span>\n                        <span class=\"c1\">// なおparserConfigurationsの場合はparserNameのほかにpattern(集計対象ファイルのパス)も指定が必要</span>\n                        <span class=\"c1\">// パーサ名は下記プロパティファイルに定義されているものを使う</span>\n                        <span class=\"c1\">// https://github.com/jenkinsci/warnings-plugin/blob/master/src/main/resources/hudson/plugins/warnings/parser/Messages.properties</span>\n                        <span class=\"nl\">consoleParsers:</span> <span class=\"o\">[</span>\n                            <span class=\"o\">[</span><span class=\"nl\">parserName:</span> <span class=\"s1\">'Java Compiler (javac)'</span><span class=\"o\">],</span>\n                        <span class=\"o\">],</span>\n                        <span class=\"nl\">canComputeNew:</span> <span class=\"kc\">false</span><span class=\"o\">,</span>\n                        <span class=\"nl\">canResolveRelativesPaths:</span> <span class=\"kc\">false</span><span class=\"o\">,</span>\n                        <span class=\"nl\">usePreviousBuildAsReference:</span> <span class=\"kc\">true</span>\n                    <span class=\"o\">])</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'静的コード解析'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// 並列処理の場合はparallelメソッドを使う</span>\n                <span class=\"n\">parallel</span><span class=\"o\">(</span>\n                    <span class=\"s1\">'静的コード解析'</span> <span class=\"o\">:</span> <span class=\"o\">{</span>\n                        <span class=\"n\">gradlew</span> <span class=\"s1\">'check -x test'</span>\n\n                        <span class=\"c1\">// dirメソッドでカレントディレクトリを指定できる</span>\n                        <span class=\"n\">dir</span><span class=\"o\">(</span><span class=\"n\">reportDir</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                            <span class=\"n\">step</span><span class=\"o\">([</span>\n                                <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'CheckStylePublisher'</span><span class=\"o\">,</span>\n                                <span class=\"nl\">pattern:</span> <span class=\"s2\">\"checkstyle/*.xml\"</span>\n                            <span class=\"o\">])</span>\n                            <span class=\"n\">step</span><span class=\"o\">([</span>\n                                <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'FindBugsPublisher'</span><span class=\"o\">,</span>\n                                <span class=\"nl\">pattern:</span> <span class=\"s2\">\"findbugs/*.xml\"</span>\n                            <span class=\"o\">])</span>\n                            <span class=\"n\">step</span><span class=\"o\">([</span>\n                                <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'PmdPublisher'</span><span class=\"o\">,</span>\n                                <span class=\"nl\">pattern:</span> <span class=\"s2\">\"pmd/*.xml\"</span>\n                            <span class=\"o\">])</span>\n                            <span class=\"n\">step</span><span class=\"o\">([</span>\n                                <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'DryPublisher'</span><span class=\"o\">,</span>\n                                <span class=\"nl\">pattern:</span> <span class=\"s2\">\"cpd/*.xml\"</span>\n                            <span class=\"o\">])</span>\n\n                            <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"checkstyle/*.xml\"</span>\n                            <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"findbugs/*.xml\"</span>\n                            <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"pmd/*.xml\"</span>\n                            <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"cpd/*.xml\"</span>\n                        <span class=\"o\">}</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"s1\">'ステップカウント'</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n                        <span class=\"c1\">// レポート作成</span>\n                        <span class=\"c1\">// outputFileとoutputFormatを指定するとエクセルファイルも作成してくれる</span>\n                        <span class=\"n\">stepcounter</span> <span class=\"nl\">outputFile:</span> <span class=\"s1\">'stepcount.xls'</span><span class=\"o\">,</span> <span class=\"nl\">outputFormat:</span> <span class=\"s1\">'excel'</span><span class=\"o\">,</span> <span class=\"nl\">settings:</span> <span class=\"o\">[</span>\n                            <span class=\"o\">[</span><span class=\"nl\">key:</span><span class=\"s1\">'Java'</span><span class=\"o\">,</span> <span class=\"nl\">filePattern:</span> <span class=\"s2\">\"${javaDir}/**/*.java\"</span><span class=\"o\">],</span>\n                            <span class=\"o\">[</span><span class=\"nl\">key:</span><span class=\"s1\">'SQL'</span><span class=\"o\">,</span> <span class=\"nl\">filePattern:</span> <span class=\"s2\">\"${resourcesDir}/**/*.sql\"</span><span class=\"o\">],</span>\n                            <span class=\"o\">[</span><span class=\"nl\">key:</span><span class=\"s1\">'HTML'</span><span class=\"o\">,</span> <span class=\"nl\">filePattern:</span> <span class=\"s2\">\"${resourcesDir}/**/*.html\"</span><span class=\"o\">],</span>\n                            <span class=\"o\">[</span><span class=\"nl\">key:</span><span class=\"s1\">'JS'</span><span class=\"o\">,</span> <span class=\"nl\">filePattern:</span> <span class=\"s2\">\"${resourcesDir}/**/*.js\"</span><span class=\"o\">],</span>\n                            <span class=\"o\">[</span><span class=\"nl\">key:</span><span class=\"s1\">'CSS'</span><span class=\"o\">,</span> <span class=\"nl\">filePattern:</span> <span class=\"s2\">\"${resourcesDir}/**/*.css\"</span><span class=\"o\">]</span>\n                        <span class=\"o\">]</span>\n                        <span class=\"c1\">// 一応エクセルファイルも成果物として保存する</span>\n                        <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"stepcount.xls\"</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"s1\">'タスクスキャン'</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n                        <span class=\"n\">step</span><span class=\"o\">([</span>\n                            <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'TasksPublisher'</span><span class=\"o\">,</span>\n                            <span class=\"nl\">pattern:</span> <span class=\"s1\">'./**'</span><span class=\"o\">,</span>\n                            <span class=\"c1\">// 集計対象を検索するときに大文字小文字を区別するか</span>\n                            <span class=\"nl\">ignoreCase:</span> <span class=\"kc\">true</span><span class=\"o\">,</span>\n                            <span class=\"c1\">// 優先度別に集計対象の文字列を指定できる</span>\n                            <span class=\"c1\">// 複数指定する場合はカンマ区切りの文字列を指定する</span>\n                            <span class=\"nl\">high:</span> <span class=\"s1\">'System.out.System.err'</span><span class=\"o\">,</span>\n                            <span class=\"nl\">normal:</span> <span class=\"s1\">'TODO,FIXME,XXX'</span><span class=\"o\">,</span>\n                        <span class=\"o\">])</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"s1\">'JavaDoc'</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n                        <span class=\"n\">gradlew</span> <span class=\"s1\">'javadoc -x classes'</span>\n                        <span class=\"n\">step</span><span class=\"o\">([</span>\n                            <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'JavadocArchiver'</span><span class=\"o\">,</span>\n                            <span class=\"c1\">// Javadocのindex.htmlがあるフォルダのパスを指定する</span>\n                            <span class=\"nl\">javadocDir:</span> <span class=\"s2\">\"${javadocDir}\"</span><span class=\"o\">,</span>\n                            <span class=\"nl\">keepAll:</span> <span class=\"kc\">true</span>\n                        <span class=\"o\">])</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">)</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"n\">post</span> <span class=\"o\">{</span>\n                <span class=\"n\">always</span> <span class=\"o\">{</span>\n                   <span class=\"c1\">// JavaDocの警告を収集</span>\n                    <span class=\"n\">step</span><span class=\"o\">([</span>\n                        <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'WarningsPublisher'</span><span class=\"o\">,</span>\n                        <span class=\"nl\">consoleParsers:</span> <span class=\"o\">[</span>\n                            <span class=\"o\">[</span><span class=\"nl\">parserName:</span> <span class=\"s1\">'JavaDoc Tool'</span><span class=\"o\">]</span>\n                        <span class=\"o\">],</span>\n                        <span class=\"nl\">canComputeNew:</span> <span class=\"kc\">false</span><span class=\"o\">,</span>\n                        <span class=\"nl\">canResolveRelativesPaths:</span> <span class=\"kc\">false</span><span class=\"o\">,</span>\n                        <span class=\"nl\">usePreviousBuildAsReference:</span> <span class=\"kc\">true</span>\n                    <span class=\"o\">])</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'テスト'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"n\">gradlew</span> <span class=\"s1\">'test jacocoTestReport -x classes -x testClasses'</span>\n\n                <span class=\"n\">junit</span> <span class=\"s2\">\"${testReportDir}/*.xml\"</span>\n                <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"${testReportDir}/*.xml\"</span>\n\n                <span class=\"c1\">// カバレッジレポートを生成（テストクラスを除外）</span>\n                <span class=\"n\">step</span><span class=\"o\">([</span>\n                    <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'JacocoPublisher'</span><span class=\"o\">,</span>\n                    <span class=\"nl\">execPattern:</span> <span class=\"s2\">\"${jacocoReportDir}/*.exec\"</span><span class=\"o\">,</span>\n                    <span class=\"nl\">exclusionPattern:</span> <span class=\"s1\">'**/*Test.class'</span>\n                <span class=\"o\">])</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'デプロイ'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// whenブロックでstageを実行する条件を指定できる</span>\n            <span class=\"n\">when</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// 静的コード解析とテスト失敗時はデプロイしない</span>\n                <span class=\"n\">expression</span> <span class=\"o\">{</span><span class=\"n\">currentBuild</span><span class=\"o\">.</span><span class=\"na\">currentResult</span> <span class=\"o\">==</span> <span class=\"s1\">'SUCCESS'</span><span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"n\">gradlew</span> <span class=\"s1\">'jar'</span>\n                <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"${libsDir}/${appName}-${appVersion}.jar\"</span>\n                <span class=\"n\">gradlew</span> <span class=\"s1\">'war'</span>\n                <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"${libsDir}/${appName}-${appVersion}.war\"</span>\n                <span class=\"n\">deploy</span> <span class=\"nl\">warDir:</span> <span class=\"n\">libsDir</span><span class=\"o\">,</span> <span class=\"nl\">appName:</span> <span class=\"n\">appName</span><span class=\"o\">,</span> <span class=\"nl\">appVersion:</span> <span class=\"n\">appVersion</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// stagesブロックと同じレベルにpostブロックを定義すると</span>\n    <span class=\"c1\">// 全てのstage処理が終わった後の処理の定義が可能    </span>\n    <span class=\"n\">post</span> <span class=\"o\">{</span>\n        <span class=\"n\">always</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 最後にワークスペースの中身を削除</span>\n            <span class=\"n\">deleteDir</span><span class=\"o\">()</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 連続で成功しているとき以外は自分宛にメールを送信</span>\n\n        <span class=\"c1\">// 結果が前回と変わった時</span>\n        <span class=\"n\">changed</span> <span class=\"o\">{</span>\n            <span class=\"n\">sendMail</span><span class=\"o\">(</span><span class=\"s2\">\"${currentBuild.previousBuild.result} =&gt; ${currentBuild.currentResult}\"</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 失敗した時</span>\n        <span class=\"n\">failure</span> <span class=\"o\">{</span>\n            <span class=\"n\">sendMail</span><span class=\"o\">(</span><span class=\"n\">currentBuild</span><span class=\"o\">.</span><span class=\"na\">currentResult</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 不安定な時（主にテスト失敗時）</span>\n        <span class=\"n\">unstable</span> <span class=\"o\">{</span>\n            <span class=\"n\">sendMail</span><span class=\"o\">(</span><span class=\"n\">currentBuild</span><span class=\"o\">.</span><span class=\"na\">currentResult</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n\n<span class=\"c1\">// Gradlewコマンドを実行する</span>\n<span class=\"kt\">def</span> <span class=\"nf\">gradlew</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">isUnix</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"n\">sh</span> <span class=\"s2\">\"./gradlew ${command} --stacktrace\"</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n        <span class=\"n\">bat</span> <span class=\"s2\">\"./gradlew.bat ${command} --stacktrace\"</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// デプロイする</span>\n<span class=\"c1\">// args.warDir warの格納ディレクトリ </span>\n<span class=\"c1\">// args.appName アプリ名</span>\n<span class=\"c1\">// args.appVersion アプリのバージョン</span>\n<span class=\"kt\">def</span> <span class=\"nf\">deploy</span><span class=\"o\">(</span><span class=\"n\">Map</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 秘密鍵のパス ※Tomcatサーバにファイル転送するので事前にJenkinsサーバのどこかに秘密鍵を格納しておく必要がある</span>\n    <span class=\"kt\">def</span> <span class=\"n\">keyDir</span> <span class=\"o\">=</span> <span class=\"s1\">'/var/lib/jenkins/.ssh/xxx'</span>\n    <span class=\"c1\">// Tomcatサーバのアドレスとユーザ名</span>\n    <span class=\"kt\">def</span> <span class=\"n\">webServerAddress</span> <span class=\"o\">=</span> <span class=\"s1\">'ecX-XX-XXX-X-X.xx-xxxx-x.xxxxxxxx'</span>\n    <span class=\"kt\">def</span> <span class=\"n\">webServerUser</span> <span class=\"o\">=</span> <span class=\"s1\">'hoge-user'</span>\n    <span class=\"kt\">def</span> <span class=\"n\">webServer</span> <span class=\"o\">=</span> <span class=\"s2\">\"${webServerUser}@${webServerAddress}\"</span>\n\n    <span class=\"kt\">def</span> <span class=\"n\">srcWar</span> <span class=\"o\">=</span> <span class=\"s2\">\"${args.appName}-${args.appVersion}.war\"</span>\n    <span class=\"kt\">def</span> <span class=\"n\">destWar</span> <span class=\"o\">=</span> <span class=\"s2\">\"${args.appName}.war\"</span>\n\n    <span class=\"c1\">// ファイル転送してTomcatのwebappsにwarを配置する</span>\n    <span class=\"n\">sh</span> <span class=\"s2\">\"sudo -S scp -i ${keyDir} ./${args.warDir}/${srcWar} ${webServer}:/home/ec2-user\"</span>\n    <span class=\"n\">sh</span> <span class=\"s2\">\"sudo -S ssh -i ${keyDir} ${webServer} \\\"sudo cp /home/ec2-user/${srcWar} /usr/share/tomcat8/webapps/${destWar}\\\"\"</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// メールをGmailに送信する</span>\n<span class=\"kt\">def</span> <span class=\"nf\">sendMail</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">mail</span> <span class=\"nl\">to:</span> <span class=\"s2\">\"xxxxxxxx@gmail.com\"</span><span class=\"o\">,</span>\n        <span class=\"nl\">subject:</span> <span class=\"s2\">\"${env.JOB_NAME} #${env.BUILD_NUMBER} [${result}]\"</span><span class=\"o\">,</span>\n        <span class=\"nl\">body:</span> <span class=\"s2\">\"Build URL: ${env.BUILD_URL}.\\n\\n\"</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"躓いたこと\" class=\"fragment\"></span><a href=\"#%E8%BA%93%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>躓いたこと</h1>\n\n<ul>\n<li>各プラグインともChangelogに「パイプライン対応したよ！」とは書いてあるが、\n具体的は書き方は明記していないことが多いので、\n各プラグインのGithubでソースコード（主に「なんちゃらPublisher」クラス）を見ながら、Jenkinsfileを書いた。</li>\n<li>currentBuildオブジェクトの使い方がよくわからなかったが、Jenkinsのパイプラインジョブ &gt; 設定 &gt; Pipeline Syntax &gt; Global Variables Reference に詳しく載っていた。\n<a href=\"https://camo.qiitausercontent.com/dce98ca18e752127b3f57901a65249f540d2193f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30663631366435302d633537662d323335652d633231342d3863386430643139646139372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/dce98ca18e752127b3f57901a65249f540d2193f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30663631366435302d633537662d323335652d633231342d3863386430643139646139372e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/0f616d50-c57f-235e-c214-8c8d0d19da97.png\"></a>\n</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/f2249e2915cbfd8a261d64823199f32a147bfe7a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61386666326463662d396438352d376334312d316565302d6662346638336562336333632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/f2249e2915cbfd8a261d64823199f32a147bfe7a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61386666326463662d396438352d376334312d316565302d6662346638336562336333632e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/a8ff2dcf-9d85-7c41-1ee0-fb4f83eb3c3c.png\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/313541fc7e1ffe9781ad27141ed0b9d59400be18/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66363362353066352d373639642d386666322d313930392d6630366165636330373130362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/313541fc7e1ffe9781ad27141ed0b9d59400be18/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66363362353066352d373639642d386666322d313930392d6630366165636330373130362e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f63b50f5-769d-8ff2-1909-f06aecc07106.png\"></a></p>\n\n<ul>\n<li>カバレッジレポートはbuild.gradleのjacocoTestReportタスクでカバレッジレポート対象外にしていてもJenkinsのほうではうまく除外されなかったので、Jenkinsfileのほうでも対象外設定をした。</li>\n<li>JenkinsからGmailにメールする場合、Jenkins &gt; Jenkinsの管理 &gt; システムの設定 &gt; E-mail通知で下記のような設定が必要だった。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/a9ab429d39d5959f7d05fe968d1110ccd53738f1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f38356139313162622d303931642d393936622d333663612d6366303336306336353539322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a9ab429d39d5959f7d05fe968d1110ccd53738f1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f38356139313162622d303931642d393936622d333663612d6366303336306336353539322e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/85a911bb-091d-996b-36ca-cf0360c65592.png\"></a></p>\n\n<ul>\n<li>JenkinsからGmailにメールする場合、<a href=\"https://support.google.com/accounts/answer/6010255?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">安全性の低いアプリがアカウントにアクセスするのを許可する</a>の手順に従って許可を有効にする必要があった。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/2758c73a3bb32139599ba67b88c6ac3e77bae419/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32343738646535352d633338332d396130622d366564622d3934623365383438376666342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2758c73a3bb32139599ba67b88c6ac3e77bae419/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32343738646535352d633338332d396130622d366564622d3934623365383438376666342e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/2478de55-c383-9a0b-6edb-94b3e8487ff4.png\"></a></p>\n\n<h1>\n<span id=\"buildgradle\" class=\"fragment\"></span><a href=\"#buildgradle\"><i class=\"fa fa-link\"></i></a>build.gradle</h1>\n\n<p>Jenkins自体は、Gradleのコマンドを実行して出力結果をもとにレポートを生成するだけなので、<br>\nGradleのJavaアプリのbuild.gradleで下記処理が実行できるようになっている必要があります。<br>\nまたJenkinsでGradleをインストールしなくていいようにGradleラッパーを作成しておきます。</p>\n\n<ul>\n<li>checkstyle</li>\n<li>findbugs</li>\n<li>pmd</li>\n<li>cpd(重複コードチェック)</li>\n<li>test</li>\n<li>jacocoReport</li>\n<li>jar</li>\n<li>war</li>\n</ul>\n\n<p>例えばこんな</p>\n\n<div class=\"code-frame\" data-lang=\"groovy\">\n<div class=\"code-lang\"><span class=\"bold\">build.gradle</span></div>\n<div class=\"highlight\"><pre><span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'java'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'war'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'checkstyle'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'findbugs'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'pmd'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'jacoco'</span>\n\n<span class=\"n\">ext</span> <span class=\"o\">{</span>\n    <span class=\"n\">appVersion</span> <span class=\"o\">=</span> <span class=\"s1\">'1.0.0'</span>\n    <span class=\"n\">appName</span> <span class=\"o\">=</span> <span class=\"s1\">'SampleApp'</span>\n    <span class=\"n\">javaVersion</span> <span class=\"o\">=</span> <span class=\"mf\">1.8</span>\n    <span class=\"n\">defaultEncoding</span> <span class=\"o\">=</span> <span class=\"s1\">'UTF-8'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">sourceCompatibility</span> <span class=\"o\">=</span> <span class=\"n\">javaVersion</span>\n<span class=\"n\">targetCompatibility</span>  <span class=\"o\">=</span> <span class=\"n\">javaVersion</span>\n<span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"na\">withType</span><span class=\"o\">(</span><span class=\"n\">AbstractCompile</span><span class=\"o\">)*.</span><span class=\"na\">options</span><span class=\"o\">*.</span><span class=\"na\">encoding</span> <span class=\"o\">=</span> <span class=\"n\">defaultEncoding</span>\n<span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"na\">withType</span><span class=\"o\">(</span><span class=\"n\">GroovyCompile</span><span class=\"o\">)*.</span><span class=\"na\">groovyOptions</span><span class=\"o\">*.</span><span class=\"na\">encoding</span> <span class=\"o\">=</span> <span class=\"n\">defaultEncoding</span>\n<span class=\"n\">mainClassName</span> <span class=\"o\">=</span> <span class=\"s1\">'jp.takumon.sapmleapp.App'</span>\n\n<span class=\"n\">repositories</span> <span class=\"o\">{</span>\n    <span class=\"n\">mavenCentral</span><span class=\"o\">()</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">dependencies</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 依存ライブラリを記載 </span>\n\n    <span class=\"n\">compile</span> <span class=\"nl\">group:</span> <span class=\"s1\">'junit'</span><span class=\"o\">,</span> <span class=\"nl\">name:</span> <span class=\"s1\">'junit'</span><span class=\"o\">,</span> <span class=\"nl\">version:</span> <span class=\"s1\">'4.12'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">jar</span> <span class=\"o\">{</span>\n    <span class=\"n\">baseName</span> <span class=\"o\">=</span> <span class=\"n\">appName</span>\n    <span class=\"n\">version</span> <span class=\"o\">=</span>  <span class=\"n\">appVersion</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">war</span> <span class=\"o\">{</span>\n    <span class=\"n\">baseName</span> <span class=\"o\">=</span> <span class=\"n\">appName</span>\n    <span class=\"n\">version</span> <span class=\"o\">=</span>  <span class=\"n\">appVersion</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">checkstyle</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 失敗しても後続の処理を継続させる</span>\n    <span class=\"n\">ignoreFailures</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"n\">sourceSets</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">sourceSets</span><span class=\"o\">.</span><span class=\"na\">main</span><span class=\"o\">]</span>\n    <span class=\"n\">toolVersion</span> <span class=\"o\">=</span> <span class=\"s1\">'7.6.1'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">findbugs</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 失敗しても後続の処理を継続させる</span>\n    <span class=\"n\">ignoreFailures</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"n\">sourceSets</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">sourceSets</span><span class=\"o\">.</span><span class=\"na\">main</span><span class=\"o\">]</span>\n    <span class=\"n\">toolVersion</span> <span class=\"o\">=</span> <span class=\"s2\">\"3.0.1\"</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">pmd</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 失敗しても後続の処理を継続させる</span>\n    <span class=\"n\">ignoreFailures</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"n\">sourceSets</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">sourceSets</span><span class=\"o\">.</span><span class=\"na\">main</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"na\">withType</span><span class=\"o\">(</span><span class=\"n\">Pmd</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">reports</span> <span class=\"o\">{</span>\n      <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"na\">enabled</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// CPD（重複コードチェック処理）をCheckタスクに追加</span>\n<span class=\"n\">check</span><span class=\"o\">.</span><span class=\"na\">doLast</span> <span class=\"o\">{</span>\n    <span class=\"n\">File</span> <span class=\"n\">outputDir</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">File</span><span class=\"o\">(</span><span class=\"s2\">\"$reportsDir/cpd/\"</span><span class=\"o\">)</span>\n    <span class=\"n\">outputDir</span><span class=\"o\">.</span><span class=\"na\">mkdirs</span><span class=\"o\">()</span>\n\n    <span class=\"n\">ant</span><span class=\"o\">.</span><span class=\"na\">taskdef</span><span class=\"o\">(</span>\n        <span class=\"nl\">name:</span> <span class=\"s1\">'cpd'</span><span class=\"o\">,</span> \n        <span class=\"nl\">classname:</span> <span class=\"s1\">'net.sourceforge.pmd.cpd.CPDTask'</span><span class=\"o\">,</span>\n        <span class=\"nl\">classpath:</span> <span class=\"n\">configurations</span><span class=\"o\">.</span><span class=\"na\">pmd</span><span class=\"o\">.</span><span class=\"na\">asPath</span><span class=\"o\">)</span>\n\n    <span class=\"n\">ant</span><span class=\"o\">.</span><span class=\"na\">cpd</span><span class=\"o\">(</span>\n        <span class=\"nl\">minimumTokenCount:</span> <span class=\"s1\">'100'</span><span class=\"o\">,</span>\n        <span class=\"nl\">format:</span> <span class=\"s1\">'xml'</span><span class=\"o\">,</span>\n        <span class=\"nl\">encoding:</span> <span class=\"n\">defaultEncoding</span><span class=\"o\">,</span>\n        <span class=\"nl\">outputFile:</span> <span class=\"k\">new</span> <span class=\"n\">File</span><span class=\"o\">(</span><span class=\"n\">outputDir</span><span class=\"o\">,</span> <span class=\"s1\">'cpd.xml'</span><span class=\"o\">)</span>\n    <span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">fileset</span><span class=\"o\">(</span><span class=\"nl\">dir:</span> <span class=\"s2\">\"src/main/java\"</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">include</span><span class=\"o\">(</span><span class=\"nl\">name:</span> <span class=\"s1\">'**/*.java'</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">javadoc</span> <span class=\"o\">{</span>\n    <span class=\"n\">failOnError</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n    <span class=\"c1\">// 好みのレベルで</span>\n    <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">memberLevel</span> <span class=\"o\">=</span> <span class=\"n\">JavadocMemberLevel</span><span class=\"o\">.</span><span class=\"na\">PRIVATE</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">test</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 失敗しても後続の処理を継続させる</span>\n    <span class=\"n\">ignoreFailures</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"n\">reports</span> <span class=\"o\">{</span>\n        <span class=\"n\">junitXml</span><span class=\"o\">.</span><span class=\"na\">enabled</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">jacoco</span> <span class=\"o\">{</span>\n    <span class=\"n\">toolVersion</span> <span class=\"o\">=</span> <span class=\"s1\">'0.7.5.201505241946'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">jacocoTestReport</span> <span class=\"o\">{</span>\n    <span class=\"n\">reports</span> <span class=\"o\">{</span>\n      <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"na\">enabled</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// カバレッジレポートからテストクラスを除外</span>\n    <span class=\"n\">afterEvaluate</span> <span class=\"o\">{</span> \n        <span class=\"n\">classDirectories</span> <span class=\"o\">=</span> <span class=\"n\">files</span><span class=\"o\">(</span><span class=\"n\">classDirectories</span><span class=\"o\">.</span><span class=\"na\">files</span><span class=\"o\">.</span><span class=\"na\">collect</span> <span class=\"o\">{</span>\n            <span class=\"n\">fileTree</span><span class=\"o\">(</span><span class=\"nl\">dir:</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"nl\">exclude:</span> <span class=\"o\">[</span><span class=\"s1\">'**/*Test.class'</span><span class=\"o\">])</span> \n        <span class=\"o\">})</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">task</span> <span class=\"nf\">wrapper</span> <span class=\"o\">(</span><span class=\"nl\">type:</span> <span class=\"n\">Wrapper</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">gradleVersion</span> <span class=\"o\">=</span> <span class=\"s1\">'3.4.1'</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>以上。</p>\n","body":"GradleのJavaアプリをJenkinsで１人CIするためのJenkinsfileを書いてみた。\nGithubにプッシュ時に、AWS上のJenkinsのパイプラインジョブが動いて、テストが成功したら同じくAWS上のTomcatにデプロイするみたいな感じで使ってます。\n\n# Declarative Pipeline\nいままではJenkinsfileを\n\n```\nnode {\n  ....\n}\n```\n\nのように書いてましたが、[Jenkinsの公式サイト](https://jenkins.io/doc/book/pipeline/syntax/)を見ると\nこれはScripted Pipelinesの記法であり、\nPipeline Pluginのバージョン2.5移行からは\n\n```\npipeline {\n  ....  \n}\n```\nのように書くDeclarative Pipelineという記法が導入されて、\nそっちのほうがシンプルでわかりやすく書けるよ!ということだったので書き直してみました。\n確かにすっきりしたし（特に最後のメールおくるとことか、デプロイするとことか）、\nいざとなったら従来のScripted Pipelinesもミックスできるのでいい感じです。\n\n# 追加したプラグイン\nJenkins初期設定時のSuggested Pluginに入っていないもの\n\n* [Checkstyle Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Checkstyle+Plugin;jsessionid=E9D4FA5064ACAE1CED7B19928DE0788F)（v3.47） - Checkstyeの結果収集用\n* [FindBugs Plugin](https://wiki.jenkins-ci.org/display/JENKINS/FindBugs+Plugin)（v4.69） - Findbugsのレポート生成用 \n* [PMD Plugin](https://wiki.jenkins-ci.org/display/JENKINS/PMD+Plugin)（v3.46） - PMDのレポート生成用\n* [DRY Plugin](https://wiki.jenkins-ci.org/display/JENKINS/DRY+Plugin)（v2.46） - CPD(重複コードチェック)のレポート生成用\n* [Step Counter Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Step+Counter+Plugin)（v2.0.0） - ソースコードのステップ数を集計してくれる\n* [Task Scanner Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Task+Scanner+Plugin)（v4.50） - ソースコード中のTODOとかを一覧化してくれる\n* [Javadoc Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Javadoc+Plugin)（v1.4） - JavaDoc生成用\n* [Warnings Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Warnings+Plugin)（v4.60） - ジョブ実行時の警告メッセージを収集してくれる\n* [JaCoCo Plugin](https://wiki.jenkins-ci.org/display/JENKINS/JaCoCo+Plugin)（v2.2.0） - テストカバレッジのレポート生成用\n\n\n\n# Jenkinsfile\nGithubからWebhookでJenkinsのパイプラインジョブを実行する。\nパイプラインジョブではGithubのJenkinsfileを使う。\nジョブの流れは下記。デプロイは静的コード解析とテストが成功したときだけ実行する。\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/56c8e12d-267b-a637-224e-fc8cb3474dfa.png)\n\n\n```groovy:Jenkinsfile\npipeline {\n    agent any\n    // 定数や変数を定義する\n    environment {\n        reportDir = 'build/reports'\n        javaDir = 'src/main/java'\n        resourcesDir = 'src/main/resources'\n        testReportDir = 'build/test-results/test'\n        jacocoReportDir = 'build/jacoco' \n        javadocDir = 'build/docs/javadoc'\n        libsDir = 'build/libs'\n        appName = 'SampleApp'\n        appVersion = '1.0.0'\n    }\n    \n    // stagesブロック中に一つ以上のstageを定義する\n    stages {\n        stage('事前準備') {\n            // 実際の処理はstepsブロック中に定義する\n            steps {\n                deleteDir()\n\n                // このJobをトリガーしてきたGithubのプロジェクトをチェックアウト\n                checkout scm\n\n                // ジョブ失敗の原因調査用にJenkinsfileとbuild.gradleは最初に保存する\n                archiveArtifacts \"Jenkinsfile\"\n                archiveArtifacts \"build.gradle\"\n\n                // scriptブロックを使うと従来のScripted Pipelinesの記法も使える\n                script {\n                    // Permission deniedで怒られないために実行権限を付与する\n                    if(isUnix()) {\n                        sh 'chmod +x gradlew'\n                    }\n                }\n                gradlew 'clean'\n            }\n        }\n        \n        stage('コンパイル') {\n            steps {\n                gradlew 'classes testClasses'\n            }\n            \n            // postブロックでstepsブロックの後に実行される処理が定義できる\n            post {\n                // alwaysブロックはstepsブロックの処理が失敗しても成功しても必ず実行される\n                always {\n\n                    // JavaDoc生成時に実行するとJavaDocの警告も含まれてしまうので\n                    // Javaコンパイル時の警告はコンパイル直後に収集する\n                    step([\n\n                        // プラグインを実行するときのクラス指定は完全修飾名でなくてもOK\n                        $class: 'WarningsPublisher',\n\n                        // Job実行時のコンソールから警告を収集する場合はconsoleParsers、\n                        // pmd.xmlなどのファイルから収集する場合はparserConfigurationsを指定する。\n                        // なおparserConfigurationsの場合はparserNameのほかにpattern(集計対象ファイルのパス)も指定が必要\n                        // パーサ名は下記プロパティファイルに定義されているものを使う\n                        // https://github.com/jenkinsci/warnings-plugin/blob/master/src/main/resources/hudson/plugins/warnings/parser/Messages.properties\n                        consoleParsers: [\n                            [parserName: 'Java Compiler (javac)'],\n                        ],\n                        canComputeNew: false,\n                        canResolveRelativesPaths: false,\n                        usePreviousBuildAsReference: true\n                    ])\n                }\n            }\n        }\n        \n        stage('静的コード解析') {\n            steps {\n                // 並列処理の場合はparallelメソッドを使う\n                parallel(\n                    '静的コード解析' : {\n                        gradlew 'check -x test'\n\n                        // dirメソッドでカレントディレクトリを指定できる\n                        dir(reportDir) {\n                            step([\n                                $class: 'CheckStylePublisher',\n                                pattern: \"checkstyle/*.xml\"\n                            ])\n                            step([\n                                $class: 'FindBugsPublisher',\n                                pattern: \"findbugs/*.xml\"\n                            ])\n                            step([\n                                $class: 'PmdPublisher',\n                                pattern: \"pmd/*.xml\"\n                            ])\n                            step([\n                                $class: 'DryPublisher',\n                                pattern: \"cpd/*.xml\"\n                            ])\n                \n                            archiveArtifacts \"checkstyle/*.xml\"\n                            archiveArtifacts \"findbugs/*.xml\"\n                            archiveArtifacts \"pmd/*.xml\"\n                            archiveArtifacts \"cpd/*.xml\"\n                        }\n                    },\n                    'ステップカウント': {\n                        // レポート作成\n                        // outputFileとoutputFormatを指定するとエクセルファイルも作成してくれる\n                        stepcounter outputFile: 'stepcount.xls', outputFormat: 'excel', settings: [\n                            [key:'Java', filePattern: \"${javaDir}/**/*.java\"],\n                            [key:'SQL', filePattern: \"${resourcesDir}/**/*.sql\"],\n                            [key:'HTML', filePattern: \"${resourcesDir}/**/*.html\"],\n                            [key:'JS', filePattern: \"${resourcesDir}/**/*.js\"],\n                            [key:'CSS', filePattern: \"${resourcesDir}/**/*.css\"]\n                        ]\n                        // 一応エクセルファイルも成果物として保存する\n                        archiveArtifacts \"stepcount.xls\"\n                    },\n                    'タスクスキャン': {\n                        step([\n                            $class: 'TasksPublisher',\n                            pattern: './**',\n                            // 集計対象を検索するときに大文字小文字を区別するか\n                            ignoreCase: true,\n                            // 優先度別に集計対象の文字列を指定できる\n                            // 複数指定する場合はカンマ区切りの文字列を指定する\n                            high: 'System.out.System.err',\n                            normal: 'TODO,FIXME,XXX',\n                        ])\n                    },\n                    'JavaDoc': {\n                        gradlew 'javadoc -x classes'\n                        step([\n                            $class: 'JavadocArchiver',\n                            // Javadocのindex.htmlがあるフォルダのパスを指定する\n                            javadocDir: \"${javadocDir}\",\n                            keepAll: true\n                        ])\n                    }\n                )\n            }\n            \n            post {\n                always {\n                   // JavaDocの警告を収集\n                    step([\n                        $class: 'WarningsPublisher',\n                        consoleParsers: [\n                            [parserName: 'JavaDoc Tool']\n                        ],\n                        canComputeNew: false,\n                        canResolveRelativesPaths: false,\n                        usePreviousBuildAsReference: true\n                    ])\n                }\n            }\n        }\n        \n\n        stage('テスト') {\n            steps {\n                gradlew 'test jacocoTestReport -x classes -x testClasses'\n                \n                junit \"${testReportDir}/*.xml\"\n                archiveArtifacts \"${testReportDir}/*.xml\"\n\n                // カバレッジレポートを生成（テストクラスを除外）\n                step([\n                    $class: 'JacocoPublisher',\n                    execPattern: \"${jacocoReportDir}/*.exec\",\n                    exclusionPattern: '**/*Test.class'\n                ])\n            }\n        }\n        \n        stage('デプロイ') {\n            // whenブロックでstageを実行する条件を指定できる\n            when {\n                // 静的コード解析とテスト失敗時はデプロイしない\n                expression {currentBuild.currentResult == 'SUCCESS'}\n            }\n            \n            steps {\n                gradlew 'jar'\n                archiveArtifacts \"${libsDir}/${appName}-${appVersion}.jar\"\n                gradlew 'war'\n                archiveArtifacts \"${libsDir}/${appName}-${appVersion}.war\"\n                deploy warDir: libsDir, appName: appName, appVersion: appVersion\n            }\n        }\n    }\n    \n    // stagesブロックと同じレベルにpostブロックを定義すると\n    // 全てのstage処理が終わった後の処理の定義が可能    \n    post {\n        always {\n            // 最後にワークスペースの中身を削除\n            deleteDir()\n        }\n        // 連続で成功しているとき以外は自分宛にメールを送信\n\n        // 結果が前回と変わった時\n        changed {\n            sendMail(\"${currentBuild.previousBuild.result} => ${currentBuild.currentResult}\")\n        }\n        // 失敗した時\n        failure {\n            sendMail(currentBuild.currentResult)\n        }\n        // 不安定な時（主にテスト失敗時）\n        unstable {\n            sendMail(currentBuild.currentResult)\n        }\n    }\n}\n\n\n// Gradlewコマンドを実行する\ndef gradlew(command) {\n    if(isUnix()) {\n        sh \"./gradlew ${command} --stacktrace\"\n    } else {\n        bat \"./gradlew.bat ${command} --stacktrace\"\n    }\n}\n\n// デプロイする\n// args.warDir warの格納ディレクトリ \n// args.appName アプリ名\n// args.appVersion アプリのバージョン\ndef deploy(Map args) {\n    // 秘密鍵のパス ※Tomcatサーバにファイル転送するので事前にJenkinsサーバのどこかに秘密鍵を格納しておく必要がある\n    def keyDir = '/var/lib/jenkins/.ssh/xxx'\n    // Tomcatサーバのアドレスとユーザ名\n    def webServerAddress = 'ecX-XX-XXX-X-X.xx-xxxx-x.xxxxxxxx'\n    def webServerUser = 'hoge-user'\n    def webServer = \"${webServerUser}@${webServerAddress}\"\n    \n    def srcWar = \"${args.appName}-${args.appVersion}.war\"\n    def destWar = \"${args.appName}.war\"\n    \n    // ファイル転送してTomcatのwebappsにwarを配置する\n    sh \"sudo -S scp -i ${keyDir} ./${args.warDir}/${srcWar} ${webServer}:/home/ec2-user\"\n    sh \"sudo -S ssh -i ${keyDir} ${webServer} \\\"sudo cp /home/ec2-user/${srcWar} /usr/share/tomcat8/webapps/${destWar}\\\"\"\n}\n\n// メールをGmailに送信する\ndef sendMail(result) {\n    mail to: \"xxxxxxxx@gmail.com\",\n        subject: \"${env.JOB_NAME} #${env.BUILD_NUMBER} [${result}]\",\n        body: \"Build URL: ${env.BUILD_URL}.\\n\\n\"\n}\n```\n\n# 躓いたこと\n* 各プラグインともChangelogに「パイプライン対応したよ！」とは書いてあるが、\n具体的は書き方は明記していないことが多いので、\n各プラグインのGithubでソースコード（主に「なんちゃらPublisher」クラス）を見ながら、Jenkinsfileを書いた。\n* currentBuildオブジェクトの使い方がよくわからなかったが、Jenkinsのパイプラインジョブ > 設定 > Pipeline Syntax > Global Variables Reference に詳しく載っていた。\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/0f616d50-c57f-235e-c214-8c8d0d19da97.png)\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/a8ff2dcf-9d85-7c41-1ee0-fb4f83eb3c3c.png)\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/f63b50f5-769d-8ff2-1909-f06aecc07106.png)\n \n* カバレッジレポートはbuild.gradleのjacocoTestReportタスクでカバレッジレポート対象外にしていてもJenkinsのほうではうまく除外されなかったので、Jenkinsfileのほうでも対象外設定をした。\n* JenkinsからGmailにメールする場合、Jenkins > Jenkinsの管理 > システムの設定 > E-mail通知で下記のような設定が必要だった。\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/85a911bb-091d-996b-36ca-cf0360c65592.png)\n\n* JenkinsからGmailにメールする場合、[安全性の低いアプリがアカウントにアクセスするのを許可する](https://support.google.com/accounts/answer/6010255?hl=ja)の手順に従って許可を有効にする必要があった。\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/2478de55-c383-9a0b-6edb-94b3e8487ff4.png)\n\n# build.gradle\nJenkins自体は、Gradleのコマンドを実行して出力結果をもとにレポートを生成するだけなので、\nGradleのJavaアプリのbuild.gradleで下記処理が実行できるようになっている必要があります。\nまたJenkinsでGradleをインストールしなくていいようにGradleラッパーを作成しておきます。\n\n * checkstyle\n * findbugs\n * pmd\n * cpd(重複コードチェック)\n * test\n * jacocoReport\n * jar\n * war\n\n例えばこんな\n\n```groovy:build.gradle\napply plugin: 'java'\napply plugin: 'war'\napply plugin: 'checkstyle'\napply plugin: 'findbugs'\napply plugin: 'pmd'\napply plugin: 'jacoco'\n\next {\n    appVersion = '1.0.0'\n    appName = 'SampleApp'\n    javaVersion = 1.8\n    defaultEncoding = 'UTF-8'\n}\n\nsourceCompatibility = javaVersion\ntargetCompatibility  = javaVersion\ntasks.withType(AbstractCompile)*.options*.encoding = defaultEncoding\ntasks.withType(GroovyCompile)*.groovyOptions*.encoding = defaultEncoding\nmainClassName = 'jp.takumon.sapmleapp.App'\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    // 依存ライブラリを記載 \n\n    compile group: 'junit', name: 'junit', version: '4.12'\n}\n\njar {\n    baseName = appName\n    version =  appVersion\n}\n\nwar {\n    baseName = appName\n    version =  appVersion\n}\n\ncheckstyle {\n    // 失敗しても後続の処理を継続させる\n    ignoreFailures = true\n    sourceSets = [sourceSets.main]\n    toolVersion = '7.6.1'\n}\n\nfindbugs {\n    // 失敗しても後続の処理を継続させる\n    ignoreFailures = true\n    sourceSets = [sourceSets.main]\n    toolVersion = \"3.0.1\"\n}\n\npmd {\n    // 失敗しても後続の処理を継続させる\n    ignoreFailures = true\n    sourceSets = [sourceSets.main]\n}\n\ntasks.withType(Pmd) {\n    reports {\n      xml.enabled = true\n    }\n}\n\n// CPD（重複コードチェック処理）をCheckタスクに追加\ncheck.doLast {\n    File outputDir = new File(\"$reportsDir/cpd/\")\n    outputDir.mkdirs()\n  \n    ant.taskdef(\n        name: 'cpd', \n        classname: 'net.sourceforge.pmd.cpd.CPDTask',\n        classpath: configurations.pmd.asPath)\n  \n    ant.cpd(\n        minimumTokenCount: '100',\n        format: 'xml',\n        encoding: defaultEncoding,\n        outputFile: new File(outputDir, 'cpd.xml')\n    ) {\n        fileset(dir: \"src/main/java\") {\n            include(name: '**/*.java')\n        }\n    }\n}\n\njavadoc {\n    failOnError = false\n    // 好みのレベルで\n    options.memberLevel = JavadocMemberLevel.PRIVATE\n}\n\ntest {\n    // 失敗しても後続の処理を継続させる\n    ignoreFailures = true\n    reports {\n        junitXml.enabled = true\n    }\n}\n\njacoco {\n    toolVersion = '0.7.5.201505241946'\n}\n\njacocoTestReport {\n    reports {\n      xml.enabled = true\n    }\n    \n    // カバレッジレポートからテストクラスを除外\n    afterEvaluate { \n        classDirectories = files(classDirectories.files.collect {\n            fileTree(dir: it, exclude: ['**/*Test.class']) \n        })\n    }\n}\n\ntask wrapper (type: Wrapper) {\n    gradleVersion = '3.4.1'\n}\n```\n\n\n以上。\n","comments_count":0,"created_at":"2017-04-07T02:38:55+09:00","likes_count":58,"reactions_count":0},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Java"},{"weight":50,"keyword":"Java"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/e6e81f10-e1df-58fa-ad49-6da5d018abc4/","title":"Java SE8 Gold取りました。","date":"2017-03-12T17:52:21+09:00","excerpt":"先日Java SE 8 Programmer II(Java SE8 Gold)に合格しました。そのために自分がやったことと受験した感想をメモします。▼試験結果勉強期間　：3カ月得点率　　： 73％（ボーダー65％）　結構ギリギリ(&gt;...","tags":["Java","java8","資格","Qiita"],"keywords":["Java"],"thumbnail":""},"id":"e6e81f10-e1df-58fa-ad49-6da5d018abc4","title":"Java SE8 Gold取りました。","rendered_body":"<p>先日<a href=\"http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-809&amp;p_org_id=70\" rel=\"nofollow noopener\" target=\"_blank\">Java SE 8 Programmer II(Java SE8 Gold)</a>に合格しました。<br>\nそのために自分がやったことと受験した感想をメモします。</p>\n\n<p>▼試験結果<br>\n勉強期間　：3カ月<br>\n得点率　　： 73％（ボーダー65％）　結構ギリギリ(&gt;o&lt;)!</p>\n\n<h2>\n<span id=\"自分とjavaの関係\" class=\"fragment\"></span><a href=\"#%E8%87%AA%E5%88%86%E3%81%A8java%E3%81%AE%E9%96%A2%E4%BF%82\"><i class=\"fa fa-link\"></i></a>自分とJavaの関係</h2>\n\n<ul>\n<li>仕事でJava開発は5年</li>\n<li>保有資格は<a href=\"https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-808&amp;p_org_id=70&amp;lang=JA\" rel=\"nofollow noopener\" target=\"_blank\">Java SE 8 Silver</a>と <a href=\"http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=458&amp;p_org_id=70&amp;lang=JA&amp;get_params=p_track_id:JEE5WCD\" rel=\"nofollow noopener\" target=\"_blank\">WebコンポーネントデベロッパEE 5</a>と <a href=\"http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-851&amp;p_org_id=70&amp;lang=JA\" rel=\"nofollow noopener\" target=\"_blank\">JavaプログラマSE 6</a>\n</li>\n</ul>\n\n<h2>\n<span id=\"きっかけ\" class=\"fragment\"></span><a href=\"#%E3%81%8D%E3%81%A3%E3%81%8B%E3%81%91\"><i class=\"fa fa-link\"></i></a>きっかけ</h2>\n\n<p>Java8で新機能が多く追加されたので、それらを習得するために受験しました。　<br>\n最初は<a href=\"http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-813&amp;p_org_id=70&amp;lang=JA\" rel=\"nofollow noopener\" target=\"_blank\">Upgrade to Java SE 8 OCP</a>の受験を考えていましたが、<br>\n参考書がないのと情報量が少なかったので、こちらを受けることにしました。</p>\n\n<h2>\n<span id=\"買った参考書と感想\" class=\"fragment\"></span><a href=\"#%E8%B2%B7%E3%81%A3%E3%81%9F%E5%8F%82%E8%80%83%E6%9B%B8%E3%81%A8%E6%84%9F%E6%83%B3\"><i class=\"fa fa-link\"></i></a>買った参考書と感想</h2>\n\n<p></p><dl>\n<dt>\n<a href=\"https://www.amazon.co.jp/%E5%BE%B9%E5%BA%95%E6%94%BB%E7%95%A5Java-SE-8-Gold%E5%95%8F%E9%A1%8C%E9%9B%86%EF%BC%BB1Z0-809%EF%BC%BD%E5%AF%BE%E5%BF%9C-%E5%BE%B9%E5%BA%95%E6%94%BB%E7%95%A5%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-ebook/dp/B01LXSG1G9/ref=pd_sim_351_1?_encoding=UTF8&amp;psc=1&amp;refRID=PC6MK9AHZB6JSXW5VM6F\" rel=\"nofollow noopener\" target=\"_blank\">徹底攻略Java SE 8 Gold問題集［1Z0-809］対応 徹底攻略シリーズ</a>（以後、黒本と記述）</dt>\n<br>\n<dd>定番の問題集なので購入しましたが、全体的に難易度が低めの門題が多いです。ただ本の最後の総仕上げ問題は本番試験と難易度が近く、本番でも同じ問題が多数出題されました。</dd>\n<br>\n<dt>\n<a href=\"https://www.amazon.co.jp/dp/B0191U2H8C/ref=dp-kindle-redirect?_encoding=UTF8&amp;btkr=1\" rel=\"nofollow noopener\" target=\"_blank\">OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide: Exam 1Z0-809</a>（以後、 Study Guideと記述）</dt>\n<br>\n<dd>上記の黒本だけでは不安になり購入しました。<a href=\"https://www.amazon.co.jp/dp/B01J1LPKJY/ref=dp-kindle-redirect?_encoding=UTF8&amp;btkr=1\" rel=\"nofollow noopener\" target=\"_blank\">紫本</a>と同じような構成で、参考書と問題集が１つになっています。紫本ではなくStudy Guideにしたのは英語力を身につけたかったからです。本の説明に「Complete, trusted preparation for the Java Programmer II exam」とある通り問題数も多くかなり充実した内容でした。難易度は本番よりも高めです。この本を２周して問題の正答率が90%に達していれば絶対合格できます。ただ量が多いので２周するのはかなり根気が必要です（自分は1周で断念しました）。<br>あと本がでかくて、電車の中では絶対読めません。Kindleで購入したほうがいいです。</dd>\n\n<h2>\n<span id=\"試験本番\" class=\"fragment\"></span><a href=\"#%E8%A9%A6%E9%A8%93%E6%9C%AC%E7%95%AA\"><i class=\"fa fa-link\"></i></a>試験本番</h2>\n\n<p>問題数は85問、試験時間は150分でしたが、時間が足りないということはなく、120分ほどで解き終わりました。<br>\n難易度は黒本の総仕上げ問題よりも少し高めです。<br>\nJavaプログラマSE 6の時のような重箱の隅をつつくような問題は少なく、<br>\nJava8の新規機能がメインで、ストリームAIP、ラムダ式、メソッド参照に関しては単体での出題 or 他と絡めての出題で１／４を占めていました。Study Guideではパラレルストリームの難しめの問題が多かったのですが、本番は簡単な問題が２問程度でした。OptionalとDateTimeAPIについては意外と少なく、１、２問程度でした。<br>\nJDBCは例外処理と絡めた問題もあり５～７問と意外と多めでした。<br>\nNew IOについては絶対パスと相対パスでの挙動の違いをしっかり理解する必要があります。</p>\n\n<h2>\n<span id=\"感想\" class=\"fragment\"></span><a href=\"#%E6%84%9F%E6%83%B3\"><i class=\"fa fa-link\"></i></a>感想</h2>\n\n<p>点数的にはギリギリ合格でした。。。<br>\n問題集に取り組むときに、正解を導き出せるだけでなく、一つ一つの選択肢に対して背景を理解する必要があったと感じています。しかしながらJava8の主要新な機能について一通り整理できました、業務で使う分には十分な理解だと思います。<br>\n試験対策は問題集のみでしたが、試験後に<a href=\"http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-809&amp;p_org_id=70&amp;lang=JA\" rel=\"nofollow noopener\" target=\"_blank\">オラクルの公式サイト</a>を見てみると、試験内容＞チェックリスト＞【トピック】の１つ１つに対して漏れなく問題が出題されてたことが分かったので、試験前に見とけばよかったなぁと感じています。あと英語の勉強もかねて黒本とStudy Guideを選びましたが、他の方のブログを見た感じだと、黒本と紫本を買ってそれぞれ２周すれば合格できるような気がしました。</p>\n</dl>","body":"先日[Java SE 8 Programmer II(Java SE8 Gold)](http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&get_params=p_exam_id:1Z0-809&p_org_id=70)に合格しました。\nそのために自分がやったことと受験した感想をメモします。\n\n▼試験結果\n勉強期間　：3カ月\n得点率　　： 73％（ボーダー65％）　結構ギリギリ(>o<)!\n\n## 自分とJavaの関係\n* 仕事でJava開発は5年\n* 保有資格は[Java SE 8 Silver](https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&get_params=p_exam_id:1Z0-808&p_org_id=70&lang=JA)と [WebコンポーネントデベロッパEE 5](http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=458&p_org_id=70&lang=JA&get_params=p_track_id:JEE5WCD)と [JavaプログラマSE 6](http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&get_params=p_exam_id:1Z0-851&p_org_id=70&lang=JA)\n\n## きっかけ\nJava8で新機能が多く追加されたので、それらを習得するために受験しました。　\n最初は[Upgrade to Java SE 8 OCP](http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&get_params=p_exam_id:1Z0-813&p_org_id=70&lang=JA)の受験を考えていましたが、\n参考書がないのと情報量が少なかったので、こちらを受けることにしました。\n\n## 買った参考書と感想\n<dl><dt>[徹底攻略Java SE 8 Gold問題集［1Z0-809］対応 徹底攻略シリーズ](https://www.amazon.co.jp/%E5%BE%B9%E5%BA%95%E6%94%BB%E7%95%A5Java-SE-8-Gold%E5%95%8F%E9%A1%8C%E9%9B%86%EF%BC%BB1Z0-809%EF%BC%BD%E5%AF%BE%E5%BF%9C-%E5%BE%B9%E5%BA%95%E6%94%BB%E7%95%A5%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-ebook/dp/B01LXSG1G9/ref=pd_sim_351_1?_encoding=UTF8&psc=1&refRID=PC6MK9AHZB6JSXW5VM6F)（以後、黒本と記述）</dt>\n<dd>定番の問題集なので購入しましたが、全体的に難易度が低めの門題が多いです。ただ本の最後の総仕上げ問題は本番試験と難易度が近く、本番でも同じ問題が多数出題されました。</dd>\n<dt>[OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide: Exam 1Z0-809](https://www.amazon.co.jp/dp/B0191U2H8C/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1)（以後、 Study Guideと記述）</dt>\n<dd>上記の黒本だけでは不安になり購入しました。[紫本](https://www.amazon.co.jp/dp/B01J1LPKJY/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1)と同じような構成で、参考書と問題集が１つになっています。紫本ではなくStudy Guideにしたのは英語力を身につけたかったからです。本の説明に「Complete, trusted preparation for the Java Programmer II exam」とある通り問題数も多くかなり充実した内容でした。難易度は本番よりも高めです。この本を２周して問題の正答率が90%に達していれば絶対合格できます。ただ量が多いので２周するのはかなり根気が必要です（自分は1周で断念しました）。<br>あと本がでかくて、電車の中では絶対読めません。Kindleで購入したほうがいいです。</dd>\n\n## 試験本番\n問題数は85問、試験時間は150分でしたが、時間が足りないということはなく、120分ほどで解き終わりました。\n難易度は黒本の総仕上げ問題よりも少し高めです。\nJavaプログラマSE 6の時のような重箱の隅をつつくような問題は少なく、\nJava8の新規機能がメインで、ストリームAIP、ラムダ式、メソッド参照に関しては単体での出題 or 他と絡めての出題で１／４を占めていました。Study Guideではパラレルストリームの難しめの問題が多かったのですが、本番は簡単な問題が２問程度でした。OptionalとDateTimeAPIについては意外と少なく、１、２問程度でした。\nJDBCは例外処理と絡めた問題もあり５～７問と意外と多めでした。\nNew IOについては絶対パスと相対パスでの挙動の違いをしっかり理解する必要があります。\n\n## 感想\n点数的にはギリギリ合格でした。。。\n問題集に取り組むときに、正解を導き出せるだけでなく、一つ一つの選択肢に対して背景を理解する必要があったと感じています。しかしながらJava8の主要新な機能について一通り整理できました、業務で使う分には十分な理解だと思います。\n試験対策は問題集のみでしたが、試験後に[オラクルの公式サイト](http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&get_params=p_exam_id:1Z0-809&p_org_id=70&lang=JA)を見てみると、試験内容＞チェックリスト＞【トピック】の１つ１つに対して漏れなく問題が出題されてたことが分かったので、試験前に見とけばよかったなぁと感じています。あと英語の勉強もかねて黒本とStudy Guideを選びましたが、他の方のブログを見た感じだと、黒本と紫本を買ってそれぞれ２周すれば合格できるような気がしました。\n","comments_count":0,"created_at":"2017-03-12T17:52:21+09:00","likes_count":17,"reactions_count":0},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Java"},{"weight":50,"keyword":"Java"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/38a98fba-b86d-5919-9db1-9defd84588e1/","title":"Reactコンポーネントをnpmで公開する（GitHub Pages付き、Babel7、webpack4）","date":"2018-12-12T00:56:33+09:00","excerpt":"なにこれTIS Advent Calendar 2018の13日目の記事です。よろしくお願いします！最近Reactコンポーネントをnpm公開してみました（参考記事：CSSのclip-pathでSlit Animationを実現する）。そこで...","tags":["npm","github-pages","webpack","React","babel","Qiita"],"keywords":["npm"],"thumbnail":""},"id":"38a98fba-b86d-5919-9db1-9defd84588e1","title":"Reactコンポーネントをnpmで公開する（GitHub Pages付き、Babel7、webpack4）","rendered_body":"\n<h2>\n<span id=\"なにこれ\" class=\"fragment\"></span><a href=\"#%E3%81%AA%E3%81%AB%E3%81%93%E3%82%8C\"><i class=\"fa fa-link\"></i></a>なにこれ</h2>\n\n<p><a href=\"https://qiita.com/advent-calendar/2018/tis\">TIS Advent Calendar 2018</a>の13日目の記事です。よろしくお願いします！</p>\n\n<p>最近Reactコンポーネントをnpm公開してみました（参考記事：<a href=\"https://takumon.com/2018/12/02/\" rel=\"nofollow noopener\" target=\"_blank\">CSSのclip-pathでSlit Animationを実現する</a>）。そこで今回は<strong>簡単なReactコンポーネントを作って、npm公開する方法を紹介します。</strong><br>\n「React始めたんだけど...npmアカウント作ったんだけど...」という方でも30分くらいで公開できるので、とりあえず手を動かしたい人向けのチュートリアルです。<br>\n下記のような手順でnpm公開するまでの方法を見ていきましょう。</p>\n\n<ol>\n<li><a href=\"#1-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">コンポーネントを作成する</a></li>\n<li><a href=\"#2-%E3%83%87%E3%83%A2%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">デモページを作成する</a></li>\n<li><a href=\"#3-%E3%83%87%E3%83%A2%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92github-pages%E3%81%A7%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B\">デモページをGitHub Pagesで公開する</a></li>\n<li><a href=\"#4-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92npm%E3%81%AB%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B\">コンポーネントをnpmに公開する</a></li>\n</ol>\n\n<p>※ 完成品はGitHubに公開しています =&gt; <a href=\"https://github.com/Takumon/react-component-sample/tree/step4\" rel=\"nofollow noopener\" target=\"_blank\">Takumon/react-component-sample</a><br>\n※ 完成品は下記のようなプロジェクト構成になります。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>プロジェクトルート\n├─dist              ・・・ コンポーネントビルド資産出力場所\n├─src               ・・・ コンポーネント資産\n│   ├─index.js\n│   └─styles.css\n├─examples          ・・・ デモページ用資産\n│  ├─dist           ・・・ デモページビルド資産出力場所\n│  └─src\n│     ├─index.html\n│     └─index.js\n├─node_modules\n├─.babelrc          ・・・トランスコンパイル用設定ファイル\n├─webpack.config.js ・・・ビルド用設定ファイル\n├─package.json      ・・・依存ライブラリ・スクリプト定義ファイル\n├─.npmignore        ・・・npm登録除外対処定義ファイル\n└─.gitignore\n</pre></div></div>\n\n<h2>\n<span id=\"1-コンポーネントを作成する\" class=\"fragment\"></span><a href=\"#1-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>1. コンポーネントを作成する</h2>\n\n<p>まずはコンポーネントを作ってトランスパイルするところまで完成させましょう。</p>\n\n<p>※ 本手順完了時のソースコードは<strong><a href=\"https://github.com/Takumon/react-component-sample/tree/step1\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a></strong><br>\n※ 本手順完了時のプロジェクト構成 ↓</p>\n\n<div class=\"code-frame\" data-lang=\"diff\"><div class=\"highlight\"><pre>プロジェクトルート\n<span class=\"gi\">+ ├─dist          ・・・ コンポーネントビルド資産出力場所\n+ ├─src           ・・・ コンポーネント資産\n+ │   ├─index.js\n+ │   └─styles.css\n+ ├─node_modules\n+ ├─.babelrc      ・・・トランスコンパイル用設定ファイル\n+ └─package.json  ・・・依存ライブラリ・スクリプト定義ファイル（追記）\n</span></pre></div></div>\n\n<ul>\n<li>最初にプロジェクトの雛形を作ります。<code>npm init</code>で色々聞かれますが全てデフォルトで構いません。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nb\">mkdir </span>react-component-sample\n<span class=\"nb\">cd </span>react-component-sample\nnpm init\n</pre></div></div>\n\n<ul>\n<li>最低限のReact系ライブラリをインストールします。開発用ライブラリとしてインストールするので<code>-D</code>オプションを付けてください。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>npm i <span class=\"nt\">-D</span> react react-dom\n</pre></div></div>\n\n<ul>\n<li>BabelでReactをトランスコンパイルするためのライブラリをインストールします。こちらも開発用ライブラリなので<code>-D</code>オプションを付けましょう。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>npm i -D @babel/cli @babel/cli @babel/core @babel/preset-env @babel/preset-react babel-loader\n</pre></div></div>\n\n<ul>\n<li>\n<code>.babelrc</code>を作成し、Reactをトランスコンパイルするための定義を記載します。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">.babelrc</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span>\n    <span class=\"s2\">\"presets\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"@babel/preset-env\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"@babel/react\"</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<ul>\n<li>コンポーネントを作ります。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"jsx\">\n<div class=\"code-lang\"><span class=\"bold\">src/index.js</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"s1\">'./styles.css'</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">MyComponent</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>Hello from My Component<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n<span class=\"p\">);</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"nx\">MyComponent</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n\n<ul>\n<li>コンポーネントで読み込むCSSを作ります。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">src/styles.css</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">h1</span> <span class=\"p\">{</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<ul>\n<li>トランスパイル用スクリプトをpackage.jsonに追加します。具体的にはJSファイルをトランスパイルしdistフォルダに出力、それ以外のファイル(CSS)をdistファイルにコピーするスクリプトです。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre>    \"scripts\": {\n<span class=\"gi\">+     \"transpile\": \"babel src -d dist --copy-files\"\n</span>    },\n</pre></div>\n</div>\n\n<h3>\n<span id=\"確認\" class=\"fragment\"></span><a href=\"#%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>確認</h3>\n\n<ul>\n<li>準備が整ったので、トランスパイルしてみましょう。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>npm run transpile\n</pre></div></div>\n\n<ul>\n<li>下記のようにdistフォルダ配下にindex.jsとstyles.cssが生成されればトランスパイル成功です。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">トランスパイル後の資産</span></div>\n<div class=\"highlight\"><pre>プロジェクトルート\n├─dist           ・・・ コンポーネントビルド資産出力場所\n│   ├─index.js\n│   └─styles.css\n</pre></div>\n</div>\n\n<h2>\n<span id=\"2-デモページを作成する\" class=\"fragment\"></span><a href=\"#2-%E3%83%87%E3%83%A2%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>2. デモページを作成する</h2>\n\n<p>実際にコンポーネントを使用したデモページもあわせて用意しておきましょう。コンポーネントの使い方をユーザーにわかりやすく示すことができます。<br>\nここではローカルでデモページが見れるところまでを作成します。</p>\n\n<p>※ 本手順完了時のソースコードは<strong><a href=\"https://github.com/Takumon/react-component-sample/tree/step2\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a></strong><br>\n※ 本手順完了時のプロジェクト構成 ↓</p>\n\n<div class=\"code-frame\" data-lang=\"diff\"><div class=\"highlight\"><pre>プロジェクトルート\n  ├─dist\n  ├─src\n  │   ├─index.js\n  │   └─styles.css\n  ├─node_modules\n  ├─.babelrc\n<span class=\"gi\">+ ├─examples          ・・・ デモページ用資産\n+ │  ├─dist           ・・・ デモページビルド資産出力場所\n+ │  └─src\n+ │     ├─index.html\n+ │     └─index.js\n+ ├─webpack.config.js ・・・ビルド用設定ファイル\n+ └─package.json      ・・・依存ライブラリ・スクリプト定義ファイル\n</span></pre></div></div>\n\n<ul>\n<li>デモページはwebpackでビルドするので必要なライブラリをインストールします。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>npm i -D html-webpack-plugin webpack webpack-cli webpack-dev-server css-loader style-loader\n</pre></div></div>\n\n<ul>\n<li>デモページのHTMLを作成します。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">examples/src/index.html</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;html&gt;</span>\n<span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>My Component Demo<span class=\"nt\">&lt;/title&gt;</span>\n    <span class=\"nt\">&lt;meta</span> <span class=\"na\">charset=</span><span class=\"s\">\"utf-8\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"viewport\"</span> <span class=\"na\">content=</span><span class=\"s\">\"width=device-width, initial-scale=1, shrink-to-fit=no\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/head&gt;</span>\n<span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;noscript&gt;</span>\n        You need to enable JavaScript to run this app.\n    <span class=\"nt\">&lt;/noscript&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"root\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</pre></div>\n</div>\n\n<ul>\n<li>デモページの起点となるコンポーネントを作成します。この時、<a href=\"#1-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">1. コンポーネントを作成する</a>で作成したコンポーネントを使います。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"jsx\">\n<div class=\"code-lang\"><span class=\"bold\">examples/src/index.js</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"s1\">'react'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">render</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'react-dom'</span>\n<span class=\"k\">import</span> <span class=\"nx\">MyComponent</span> <span class=\"k\">from</span> <span class=\"s1\">'../../src'</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">App</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">&lt;</span><span class=\"nc\">MyComponent</span><span class=\"p\">/&gt;;</span>\n<span class=\"nx\">render</span><span class=\"p\">(&lt;</span><span class=\"nc\">App</span> <span class=\"p\">/&gt;,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">'root'</span><span class=\"p\">));</span>\n</pre></div>\n</div>\n\n<ul>\n<li>デモページのビルド設定ファイル（webpack.config.js）を作りましょう。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">webpack.config.js</span></div>\n<div class=\"highlight\"><pre><span class=\"kd\">const</span> <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'path'</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">HtmlWebpackPlugin</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'html-webpack-plugin'</span><span class=\"p\">);</span>\n<span class=\"c1\">// HTMLファイルのビルド設定</span>\n<span class=\"kd\">const</span> <span class=\"nx\">htmlWebpackPlugin</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">HtmlWebpackPlugin</span><span class=\"p\">({</span>\n    <span class=\"na\">template</span><span class=\"p\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'examples/src/index.html'</span><span class=\"p\">),</span>\n    <span class=\"na\">filename</span><span class=\"p\">:</span> <span class=\"s1\">'./index.html'</span>\n<span class=\"p\">});</span>\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 依存関係解決の起点となる資産を指定します。</span>\n    <span class=\"na\">entry</span><span class=\"p\">:</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'examples/src/index.js'</span><span class=\"p\">),</span>\n    <span class=\"c1\">// Babelのトランスパイル対象資産を指定します。</span>\n    <span class=\"na\">module</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">rules</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"p\">{</span>\n                <span class=\"na\">test</span><span class=\"p\">:</span> <span class=\"sr\">/</span><span class=\"se\">\\.(</span><span class=\"sr\">js|jsx</span><span class=\"se\">)</span><span class=\"sr\">/</span><span class=\"p\">,</span>\n                <span class=\"na\">use</span><span class=\"p\">:</span> <span class=\"s1\">'babel-loader'</span><span class=\"p\">,</span>\n                <span class=\"na\">exclude</span><span class=\"p\">:</span> <span class=\"sr\">/node_modules/</span>\n            <span class=\"p\">},</span>\n            <span class=\"p\">{</span>\n                <span class=\"na\">test</span><span class=\"p\">:</span> <span class=\"sr\">/</span><span class=\"se\">\\.</span><span class=\"sr\">css$/</span><span class=\"p\">,</span>\n                <span class=\"na\">use</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"style-loader\"</span><span class=\"p\">,</span> <span class=\"s2\">\"css-loader\"</span><span class=\"p\">]</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"na\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">htmlWebpackPlugin</span><span class=\"p\">],</span>\n    <span class=\"na\">resolve</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">extensions</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'.js'</span><span class=\"p\">,</span> <span class=\"s1\">'.jsx'</span><span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\">// 開発用Webサーバのポートを指定します。</span>\n    <span class=\"na\">devServer</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">port</span><span class=\"p\">:</span> <span class=\"mi\">3001</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<ul>\n<li>デモページ起動用スクリプトをpackage.jsonに追記します。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">package.jsonの一部</span></div>\n<div class=\"highlight\"><pre>    \"scripts\": {\n<span class=\"gi\">+     \"start\": \"webpack-dev-server --mode development\"\n</span>    },\n</pre></div>\n</div>\n\n<h3>\n<span id=\"確認-1\" class=\"fragment\"></span><a href=\"#%E7%A2%BA%E8%AA%8D-1\"><i class=\"fa fa-link\"></i></a>確認</h3>\n\n<ul>\n<li>準備が整ったのでデモページを起動しましょう。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>npm start\n</pre></div></div>\n\n<ul>\n<li>ブラウザで<code>http://localhost:3001</code>にアクセスしてコンポーネントが表示されればOKです。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/a12b4f44783c0003093566184a9ea5badc8efc4d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64363538373137352d323164372d613135622d343865392d3363366563333165643130352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a12b4f44783c0003093566184a9ea5badc8efc4d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64363538373137352d323164372d613135622d343865392d3363366563333165643130352e706e67\" alt=\"図1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/d6587175-21d7-a15b-48e9-3c6ec31ed105.png\"></a></p>\n\n<h2>\n<span id=\"3-デモページをgithub-pagesで公開する\" class=\"fragment\"></span><a href=\"#3-%E3%83%87%E3%83%A2%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92github-pages%E3%81%A7%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>3. デモページをGitHub Pagesで公開する</h2>\n\n<p>デモページをローカルで見れるようになったら、次はGitHubに資産を登録し、GitHub Pagesで公開しましょう。プラグインで簡単に公開できます。</p>\n\n<p>※ 本手順完了時のソースコードは<strong><a href=\"https://github.com/Takumon/react-component-sample/tree/step3\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a></strong><br>\n※ 本手順完了時のプロジェクト構成 ↓</p>\n\n<div class=\"code-frame\" data-lang=\"diff\"><div class=\"highlight\"><pre>プロジェクトルート\n  ├─dist              ・・・ コンポーネントビルド資産出力場所\n  ├─src               ・・・ コンポーネント資産\n  │   ├─index.js\n  │   └─styles.css\n  ├─examples          ・・・ デモページ用資産\n  │  ├─dist           ・・・ デモページビルド資産出力場所\n  │  └─src\n  │     ├─index.html\n  │     └─index.js\n  ├─node_modules\n  ├─.babelrc          ・・・トランスコンパイル用設定ファイル\n<span class=\"gi\">+ ├─webpack.config.js ・・・ビルド用設定ファイル（追記）\n+ ├─package.json      ・・・依存ライブラリ・スクリプト定義ファイル（追記）\n+ └─.gitignore\n</span></pre></div></div>\n\n<ul>\n<li>github-pagesというGitHub公開用プラグインをインストールします。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>npm i <span class=\"nt\">-D</span> gh-pages\n</pre></div></div>\n\n<ul>\n<li>package.jsonにGitHubPages公開用スクリプトを３個追加します。\n\n<ul>\n<li>\n<code>publish-demo</code>はビルドとデプロイをいっぺんにやるスクリプトです。デプロイ前に大抵の場合ビルドするので、1つにまとめておくと便利です。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre>    \"scripts\": {\n<span class=\"gi\">+     \"build\": \"webpack --mode production\",\n+     \"deploy\": \"gh-pages -d examples/dist\",\n+     \"publish-demo\": \"npm run build &amp;&amp; npm run deploy\"\n</span>    },\n</pre></div>\n</div>\n\n<ul>\n<li>webpack.config.jsに出力先を指定します。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">webpack.config.jsの一部</span></div>\n<div class=\"highlight\"><pre>  module.exports = {\n<span class=\"gi\">+     output: {\n+        path: path.join(__dirname, \"examples/dist\"),\n+        filename: \"bundle.js\"\n+    },\n</span>  }\n</pre></div>\n</div>\n\n<ul>\n<li>ではビルドしてみましょう。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>npm run build\n</pre></div></div>\n\n<ul>\n<li><p>ビルドされて最小化された資産が<code>examples/dist</code>配下に出力されたのが確認できればOKです。</p></li>\n<li><p>Gitにあげる準備として<code>.gitignore</code>を作りましょう。</p></li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"txt\">\n<div class=\"code-lang\"><span class=\"bold\">.gitignore</span></div>\n<div class=\"highlight\"><pre>node_modules\ndist\n</pre></div>\n</div>\n\n<ul>\n<li>GitHubでリポジトリを新規作成して資産を登録しましょう。新規作成後の「...or create a new respository on the command line」の説明に従ってください。</li>\n</ul>\n\n<h3>\n<span id=\"確認-2\" class=\"fragment\"></span><a href=\"#%E7%A2%BA%E8%AA%8D-2\"><i class=\"fa fa-link\"></i></a>確認</h3>\n\n<ul>\n<li>下記を実行してGitHub Pagesに登録しましょう。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>npm run publish-demo\n</pre></div></div>\n\n<ul>\n<li>2～3分後にGitHub PagesでWeb公開されていれば成功です。\n\n<ul>\n<li>例 =&gt; 　<a href=\"https://takumon.github.io/react-component-sample/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://takumon.github.io/react-component-sample/</a>\n</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"補足画像ファイルを扱う場合\" class=\"fragment\"></span><a href=\"#%E8%A3%9C%E8%B6%B3%E7%94%BB%E5%83%8F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E6%89%B1%E3%81%86%E5%A0%B4%E5%90%88\"><i class=\"fa fa-link\"></i></a>(補足)画像ファイルを扱う場合</h3>\n\n<p>もしデモページで画像を読み込む場合は<code>file-loader</code>と<code>url-loader</code>を開発用依存ライブラリに追加してください。ビルド設定も下記のように修正が必要です。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>npm i -D file-loader url-loader\n</pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">webpack.config.jsの一部</span></div>\n<div class=\"highlight\"><pre>  module.exports = {\n    module: {\n<span class=\"gi\">+     {\n+       test: /\\.(jpg|png|ico)$/,\n+       use: 'url-loader'\n+     },\n</span>    },\n  }\n</pre></div>\n</div>\n\n<p><br><br>\nこれであとは最終手順のnpm公開を残すのみです！<br>\n<br></p>\n\n<h2>\n<span id=\"4-コンポーネントをnpmに公開する\" class=\"fragment\"></span><a href=\"#4-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92npm%E3%81%AB%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>4. コンポーネントをnpmに公開する</h2>\n\n<p>デモページも準備できたので、いよいよコンポーネントをnpmに公開しましょう。</p>\n\n<p>※ 本手順完了時のソースコードは<strong><a href=\"https://github.com/Takumon/react-component-sample/tree/step4\" rel=\"nofollow noopener\" target=\"_blank\">こちら</a></strong><br>\n※ 本手順完了時のプロジェクト構成 ↓</p>\n\n<div class=\"code-frame\" data-lang=\"diff\"><div class=\"highlight\"><pre>プロジェクトルート\n  ├─dist              ・・・ コンポーネントビルド資産出力場所\n  ├─src               ・・・ コンポーネント資産\n  │   ├─index.js\n  │   └─styles.css\n  ├─examples          ・・・ デモページ用資産\n  │  ├─dist           ・・・ デモページビルド資産出力場所\n  │  └─src\n  │     ├─index.html\n  │     └─index.js\n  ├─node_modules\n  ├─.babelrc          ・・・トランスコンパイル用設定ファイル\n  ├─webpack.config.js ・・・ビルド用設定ファイル\n<span class=\"gi\">+ ├─package.json      ・・・依存ライブラリ・スクリプト定義ファイル(追記)\n+ ├─.npmignore        ・・・npm登録除外対処定義ファイル\n</span>  └─.gitignore\n</pre></div></div>\n\n<ul>\n<li>トランスパイル後に生成されるdist/index.jsを、npm公開資産のメインファイルに指定します。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"gi\">+   \"main\": \"dist/index.js\",\n</span></pre></div>\n</div>\n\n<ul>\n<li>次にnpm公開時に自動で走るスクリプト<code>prepublishOnly</code>を追加します。これによりnpm公開時にビルドし忘れるということを防ぎます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">package.jsonの一部</span></div>\n<div class=\"highlight\"><pre>    \"scripts\": {\n<span class=\"gi\">+     \"prepublishOnly\": \"npm run transpile\"\n</span>    }\n</pre></div>\n</div>\n\n<ul>\n<li>このコンポーネントを使う側には、Reactがインストール済という想定ですのでpeerDependenciesを指定します。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">package.jsonの一部</span></div>\n<div class=\"highlight\"><pre><span class=\"gi\">+   \"peerDependencies\": {\n+     \"react\": \"^16.3.0\",\n+     \"react-dom\": \"^16.3.0\"\n+   },\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<code>.npmignore</code>を作成して、npm公開資産として不用な資産（トランスパイル前のjsファイルなど）は公開対象外としましょう。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"txt\">\n<div class=\"code-lang\"><span class=\"bold\">.npmignore</span></div>\n<div class=\"highlight\"><pre>src\nexamples\n.babelrc\n.gitignore\nwebpack.config.js\n</pre></div>\n</div>\n\n<ul>\n<li>最後にパッケージ名(package.jsonのname)を決めます。現段階では<code>react-component-sample</code>となっていて、お試しで作るコンポーネントとしては少し汎用的すぎる名前なので、<code>@自分のnpmアカウント名/raect-component-sample</code>のようにしましょう。例えば下記のように修正します。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">package.json修正例</span></div>\n<div class=\"highlight\"><pre><span class=\"gd\">-   \"name\": \"react-component-sample\",\n</span><span class=\"gi\">+   \"name\": \"@takumon/react-component-sample\",\n</span></pre></div>\n</div>\n\n<h3>\n<span id=\"確認-3\" class=\"fragment\"></span><a href=\"#%E7%A2%BA%E8%AA%8D-3\"><i class=\"fa fa-link\"></i></a>確認</h3>\n\n<ul>\n<li>ではnpm公開してみましょう。\n\n<ul>\n<li>\n<code>@takumon/react-component-sample</code>のようなパッケージ名は、<a href=\"https://docs.npmjs.com/about-scopes\" rel=\"nofollow noopener\" target=\"_blank\">Scoped Packag</a>(npmのプライベートなパッケージの命名規約)に沿っているのでデフォルトでプライベート公開になってしまいます。npmで有料契約をせずにプライベート公開しようとすると402エラーになります。そのため、ここでは<code>--access=public</code>をつけて一般公開するようにしています。（参考：<a href=\"https://stackoverflow.com/questions/45820881/npm-publish-failed-put-402\" rel=\"nofollow noopener\" target=\"_blank\">stachoverflow</a>)</li>\n<li>\n<code>Failed PUT 403</code>になる場合は、npmの認証エラーです。<code>npm login</code>しましょう。\nそれか<code>package.json</code>の<code>version</code>が古いのが原因です。いったん公開したバージョンで再公開はできません。バージョンをインクリメントしましょう。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>npm publish <span class=\"nt\">--access</span><span class=\"o\">=</span>public\n</pre></div></div>\n\n<ul>\n<li>これで、npm公式サイトを確認しパッケージが追加されていれば、公開完了です！</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/1c02995625c7b4d57870910d6302e8e5b7d1fdfa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32393534363963312d623664302d626563382d303036642d6437306230393564393830362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/1c02995625c7b4d57870910d6302e8e5b7d1fdfa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32393534363963312d623664302d626563382d303036642d6437306230393564393830362e706e67\" alt=\"図4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/295469c1-b6d0-bec8-006d-d70b095d9806.png\"></a></p>\n\n<h2>\n<span id=\"おわりに\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>おわりに</h2>\n\n<p>今回紹介したように、わりと簡単にnpm公開できるので、普段使いまわしているようなコンポーネントがあれば公開してみるのもいいかもしれません。</p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<ul>\n<li><a href=\"https://medium.com/dailyjs/building-a-react-component-with-webpack-publish-to-npm-deploy-to-github-guide-6927f60b3220\" rel=\"nofollow noopener\" target=\"_blank\">A guide to building a React component with webpack 4, publishing to npm, and deploying the demo to GitHub Pages | Medium</a></li>\n<li><a href=\"https://hackernoon.com/creating-a-library-of-react-components-using-create-react-app-without-ejecting-d182df690c6b\" rel=\"nofollow noopener\" target=\"_blank\">Creating a library of React components using Create React App | Medium</a></li>\n</ul>\n","body":"## なにこれ\n\n[TIS Advent Calendar 2018](https://qiita.com/advent-calendar/2018/tis)の13日目の記事です。よろしくお願いします！\n\n最近Reactコンポーネントをnpm公開してみました（参考記事：[CSSのclip-pathでSlit Animationを実現する](https://takumon.com/2018/12/02/)）。そこで今回は**簡単なReactコンポーネントを作って、npm公開する方法を紹介します。**\n「React始めたんだけど...npmアカウント作ったんだけど...」という方でも30分くらいで公開できるので、とりあえず手を動かしたい人向けのチュートリアルです。\n下記のような手順でnpm公開するまでの方法を見ていきましょう。\n\n1. [コンポーネントを作成する](#1-コンポーネントを作成する)\n2. [デモページを作成する](#2-デモページを作成する)\n3. [デモページをGitHub Pagesで公開する](#3-デモページをgithub-pagesで公開する)\n4. [コンポーネントをnpmに公開する](#4-コンポーネントをnpmに公開する)\n\n\n※ 完成品はGitHubに公開しています => [Takumon/react-component-sample](https://github.com/Takumon/react-component-sample/tree/step4)\n※ 完成品は下記のようなプロジェクト構成になります。\n\n```\nプロジェクトルート\n├─dist              ・・・ コンポーネントビルド資産出力場所\n├─src               ・・・ コンポーネント資産\n│   ├─index.js\n│   └─styles.css\n├─examples          ・・・ デモページ用資産\n│  ├─dist           ・・・ デモページビルド資産出力場所\n│  └─src\n│     ├─index.html\n│     └─index.js\n├─node_modules\n├─.babelrc          ・・・トランスコンパイル用設定ファイル\n├─webpack.config.js ・・・ビルド用設定ファイル\n├─package.json      ・・・依存ライブラリ・スクリプト定義ファイル\n├─.npmignore        ・・・npm登録除外対処定義ファイル\n└─.gitignore\n```\n\n\n## 1. コンポーネントを作成する\n\nまずはコンポーネントを作ってトランスパイルするところまで完成させましょう。\n\n<small>※ 本手順完了時のソースコードは**[こちら](https://github.com/Takumon/react-component-sample/tree/step1)**</small>\n<small>※ 本手順完了時のプロジェクト構成 ↓</small>\n\n```diff\nプロジェクトルート\n+ ├─dist          ・・・ コンポーネントビルド資産出力場所\n+ ├─src           ・・・ コンポーネント資産\n+ │   ├─index.js\n+ │   └─styles.css\n+ ├─node_modules\n+ ├─.babelrc      ・・・トランスコンパイル用設定ファイル\n+ └─package.json  ・・・依存ライブラリ・スクリプト定義ファイル（追記）\n```\n\n\n\n* 最初にプロジェクトの雛形を作ります。`npm init`で色々聞かれますが全てデフォルトで構いません。\n\n```bash\nmkdir react-component-sample\ncd react-component-sample\nnpm init\n```\n\n\n* 最低限のReact系ライブラリをインストールします。開発用ライブラリとしてインストールするので`-D`オプションを付けてください。\n\n```bash\nnpm i -D react react-dom\n```\n\n\n* BabelでReactをトランスコンパイルするためのライブラリをインストールします。こちらも開発用ライブラリなので`-D`オプションを付けましょう。\n\n```\nnpm i -D @babel/cli @babel/cli @babel/core @babel/preset-env @babel/preset-react babel-loader\n```\n\n\n* `.babelrc`を作成し、Reactをトランスコンパイルするための定義を記載します。\n\n```javascript:.babelrc\n{\n    \"presets\": [\n        \"@babel/preset-env\",\n        \"@babel/react\"\n    ]\n}\n```\n\n\n* コンポーネントを作ります。\n\n```jsx:src/index.js\nimport React from 'react';\nimport './styles.css';\nconst MyComponent = () => (\n    <h1>Hello from My Component</h1>\n);\nexport default MyComponent;\n```\n\n\n* コンポーネントで読み込むCSSを作ります。\n\n```css:src/styles.css\nh1 {\n    color: red;\n}\n```\n\n\n* トランスパイル用スクリプトをpackage.jsonに追加します。具体的にはJSファイルをトランスパイルしdistフォルダに出力、それ以外のファイル(CSS)をdistファイルにコピーするスクリプトです。\n\n```diff:package.json\n    \"scripts\": {\n+     \"transpile\": \"babel src -d dist --copy-files\"\n    },\n```\n\n### 確認\n\n* 準備が整ったので、トランスパイルしてみましょう。\n\n```bash\nnpm run transpile\n```\n\n\n* 下記のようにdistフォルダ配下にindex.jsとstyles.cssが生成されればトランスパイル成功です。\n\n```:トランスパイル後の資産\nプロジェクトルート\n├─dist           ・・・ コンポーネントビルド資産出力場所\n│   ├─index.js\n│   └─styles.css\n```\n\n\n\n## 2. デモページを作成する\n\n実際にコンポーネントを使用したデモページもあわせて用意しておきましょう。コンポーネントの使い方をユーザーにわかりやすく示すことができます。\nここではローカルでデモページが見れるところまでを作成します。\n\n<small>※ 本手順完了時のソースコードは**[こちら](https://github.com/Takumon/react-component-sample/tree/step2)**</small>\n<small>※ 本手順完了時のプロジェクト構成 ↓</small>\n\n```diff\nプロジェクトルート\n  ├─dist\n  ├─src\n  │   ├─index.js\n  │   └─styles.css\n  ├─node_modules\n  ├─.babelrc\n+ ├─examples          ・・・ デモページ用資産\n+ │  ├─dist           ・・・ デモページビルド資産出力場所\n+ │  └─src\n+ │     ├─index.html\n+ │     └─index.js\n+ ├─webpack.config.js ・・・ビルド用設定ファイル\n+ └─package.json      ・・・依存ライブラリ・スクリプト定義ファイル\n```\n\n\n\n* デモページはwebpackでビルドするので必要なライブラリをインストールします。\n\n```\nnpm i -D html-webpack-plugin webpack webpack-cli webpack-dev-server css-loader style-loader\n```\n\n\n* デモページのHTMLを作成します。\n\n```html:examples/src/index.html\n<html>\n<head>\n    <title>My Component Demo</title>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n</head>\n<body>\n    <noscript>\n        You need to enable JavaScript to run this app.\n    </noscript>\n    <div id=\"root\"></div>\n</body>\n</html>\n```\n\n\n* デモページの起点となるコンポーネントを作成します。この時、[1. コンポーネントを作成する](#1-コンポーネントを作成する)で作成したコンポーネントを使います。\n\n```jsx:examples/src/index.js\nimport React from 'react';\nimport { render } from 'react-dom'\nimport MyComponent from '../../src'\n\nconst App = () => <MyComponent/>;\nrender(<App />, document.getElementById('root'));\n```\n\n\n* デモページのビルド設定ファイル（webpack.config.js）を作りましょう。\n\n```javascript:webpack.config.js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n// HTMLファイルのビルド設定\nconst htmlWebpackPlugin = new HtmlWebpackPlugin({\n    template: path.join(__dirname, 'examples/src/index.html'),\n    filename: './index.html'\n});\nmodule.exports = {\n    // 依存関係解決の起点となる資産を指定します。\n    entry: path.join(__dirname, 'examples/src/index.js'),\n    // Babelのトランスパイル対象資産を指定します。\n    module: {\n        rules: [\n            {\n                test: /\\.(js|jsx)/,\n                use: 'babel-loader',\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.css$/,\n                use: [\"style-loader\", \"css-loader\"]\n            }\n        ]\n    },\n    plugins: [htmlWebpackPlugin],\n    resolve: {\n        extensions: ['.js', '.jsx']\n    },\n    // 開発用Webサーバのポートを指定します。\n    devServer: {\n        port: 3001\n    }\n}\n```\n\n\n* デモページ起動用スクリプトをpackage.jsonに追記します。\n\n```diff:package.jsonの一部\n    \"scripts\": {\n+     \"start\": \"webpack-dev-server --mode development\"\n    },\n```\n\n### 確認\n\n* 準備が整ったのでデモページを起動しましょう。\n\n```bash\nnpm start\n```\n\n\n* ブラウザで`http://localhost:3001`にアクセスしてコンポーネントが表示されればOKです。\n\n\n![図1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/d6587175-21d7-a15b-48e9-3c6ec31ed105.png)\n\n\n\n## 3. デモページをGitHub Pagesで公開する\n\nデモページをローカルで見れるようになったら、次はGitHubに資産を登録し、GitHub Pagesで公開しましょう。プラグインで簡単に公開できます。\n\n\n<small>※ 本手順完了時のソースコードは**[こちら](https://github.com/Takumon/react-component-sample/tree/step3)**</small>\n<small>※ 本手順完了時のプロジェクト構成 ↓</small>\n\n```diff\nプロジェクトルート\n  ├─dist              ・・・ コンポーネントビルド資産出力場所\n  ├─src               ・・・ コンポーネント資産\n  │   ├─index.js\n  │   └─styles.css\n  ├─examples          ・・・ デモページ用資産\n  │  ├─dist           ・・・ デモページビルド資産出力場所\n  │  └─src\n  │     ├─index.html\n  │     └─index.js\n  ├─node_modules\n  ├─.babelrc          ・・・トランスコンパイル用設定ファイル\n+ ├─webpack.config.js ・・・ビルド用設定ファイル（追記）\n+ ├─package.json      ・・・依存ライブラリ・スクリプト定義ファイル（追記）\n+ └─.gitignore\n```\n\n\n\n* github-pagesというGitHub公開用プラグインをインストールします。\n\n```bash\nnpm i -D gh-pages\n```\n\n\n* package.jsonにGitHubPages公開用スクリプトを３個追加します。\n  * `publish-demo`はビルドとデプロイをいっぺんにやるスクリプトです。デプロイ前に大抵の場合ビルドするので、1つにまとめておくと便利です。\n\n```diff:package.json\n    \"scripts\": {\n+     \"build\": \"webpack --mode production\",\n+     \"deploy\": \"gh-pages -d examples/dist\",\n+     \"publish-demo\": \"npm run build && npm run deploy\"\n    },\n```\n\n* webpack.config.jsに出力先を指定します。\n\n```diff:webpack.config.jsの一部\n  module.exports = {\n+     output: {\n+        path: path.join(__dirname, \"examples/dist\"),\n+        filename: \"bundle.js\"\n+    },\n  }\n```\n\n* ではビルドしてみましょう。\n\n```bash\nnpm run build\n```\n\n* ビルドされて最小化された資産が`examples/dist`配下に出力されたのが確認できればOKです。\n\n\n* Gitにあげる準備として`.gitignore`を作りましょう。\n\n```txt:.gitignore\nnode_modules\ndist\n```\n\n\n* GitHubでリポジトリを新規作成して資産を登録しましょう。新規作成後の「...or create a new respository on the command line」の説明に従ってください。\n\n### 確認\n* 下記を実行してGitHub Pagesに登録しましょう。\n\n```bash\nnpm run publish-demo\n```\n\n* 2～3分後にGitHub PagesでWeb公開されていれば成功です。\n    * 例 => 　https://takumon.github.io/react-component-sample/\n\n\n\n### (補足)画像ファイルを扱う場合\n\nもしデモページで画像を読み込む場合は`file-loader`と`url-loader`を開発用依存ライブラリに追加してください。ビルド設定も下記のように修正が必要です。\n\n```\nnpm i -D file-loader url-loader\n```\n\n```diff:webpack.config.jsの一部\n  module.exports = {\n    module: {\n+     {\n+       test: /\\.(jpg|png|ico)$/,\n+       use: 'url-loader'\n+     },\n    },\n  }\n```\n\n\n\n<br />\nこれであとは最終手順のnpm公開を残すのみです！\n<br />\n\n\n\n\n## 4. コンポーネントをnpmに公開する\n\nデモページも準備できたので、いよいよコンポーネントをnpmに公開しましょう。\n\n<small>※ 本手順完了時のソースコードは**[こちら](https://github.com/Takumon/react-component-sample/tree/step4)**</small>\n<small>※ 本手順完了時のプロジェクト構成 ↓</small>\n\n```diff\nプロジェクトルート\n  ├─dist              ・・・ コンポーネントビルド資産出力場所\n  ├─src               ・・・ コンポーネント資産\n  │   ├─index.js\n  │   └─styles.css\n  ├─examples          ・・・ デモページ用資産\n  │  ├─dist           ・・・ デモページビルド資産出力場所\n  │  └─src\n  │     ├─index.html\n  │     └─index.js\n  ├─node_modules\n  ├─.babelrc          ・・・トランスコンパイル用設定ファイル\n  ├─webpack.config.js ・・・ビルド用設定ファイル\n+ ├─package.json      ・・・依存ライブラリ・スクリプト定義ファイル(追記)\n+ ├─.npmignore        ・・・npm登録除外対処定義ファイル\n  └─.gitignore\n```\n\n\n\n* トランスパイル後に生成されるdist/index.jsを、npm公開資産のメインファイルに指定します。\n\n```diff:package.json\n+   \"main\": \"dist/index.js\",\n```\n\n\n* 次にnpm公開時に自動で走るスクリプト`prepublishOnly`を追加します。これによりnpm公開時にビルドし忘れるということを防ぎます。\n\n\n```diff:package.jsonの一部\n    \"scripts\": {\n+     \"prepublishOnly\": \"npm run transpile\"\n    }\n```\n\n\n* このコンポーネントを使う側には、Reactがインストール済という想定ですのでpeerDependenciesを指定します。\n\n```diff:package.jsonの一部\n+   \"peerDependencies\": {\n+     \"react\": \"^16.3.0\",\n+     \"react-dom\": \"^16.3.0\"\n+   },\n```\n\n\n* `.npmignore`を作成して、npm公開資産として不用な資産（トランスパイル前のjsファイルなど）は公開対象外としましょう。\n\n```txt:.npmignore\nsrc\nexamples\n.babelrc\n.gitignore\nwebpack.config.js\n```\n\n* 最後にパッケージ名(package.jsonのname)を決めます。現段階では`react-component-sample`となっていて、お試しで作るコンポーネントとしては少し汎用的すぎる名前なので、`@自分のnpmアカウント名/raect-component-sample`のようにしましょう。例えば下記のように修正します。\n\n```diff:package.json修正例\n-   \"name\": \"react-component-sample\",\n+   \"name\": \"@takumon/react-component-sample\",\n```\n\n\n### 確認\n\n* ではnpm公開してみましょう。\n  * `@takumon/react-component-sample`のようなパッケージ名は、[Scoped Packag](https://docs.npmjs.com/about-scopes)(npmのプライベートなパッケージの命名規約)に沿っているのでデフォルトでプライベート公開になってしまいます。npmで有料契約をせずにプライベート公開しようとすると402エラーになります。そのため、ここでは`--access=public`をつけて一般公開するようにしています。（参考：[stachoverflow](https://stackoverflow.com/questions/45820881/npm-publish-failed-put-402))\n  * `Failed PUT 403`になる場合は、npmの認証エラーです。`npm login`しましょう。\nそれか`package.json`の`version`が古いのが原因です。いったん公開したバージョンで再公開はできません。バージョンをインクリメントしましょう。\n\n```bash\nnpm publish --access=public\n```\n\n\n* これで、npm公式サイトを確認しパッケージが追加されていれば、公開完了です！\n\n![図4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/295469c1-b6d0-bec8-006d-d70b095d9806.png)\n\n\n\n\n\n## おわりに\n\n今回紹介したように、わりと簡単にnpm公開できるので、普段使いまわしているようなコンポーネントがあれば公開してみるのもいいかもしれません。\n\n\n\n## 参考\n* [A guide to building a React component with webpack 4, publishing to npm, and deploying the demo to GitHub Pages | Medium](https://medium.com/dailyjs/building-a-react-component-with-webpack-publish-to-npm-deploy-to-github-guide-6927f60b3220)\n* [Creating a library of React components using Create React App | Medium](https://hackernoon.com/creating-a-library-of-react-components-using-create-react-app-without-ejecting-d182df690c6b)\n\n","comments_count":0,"created_at":"2018-12-12T00:56:33+09:00","likes_count":22,"reactions_count":0},"relations":[]},{"node":{"fields":{"slug":"/2018/12/09/","title":"Vimを始める時に取り組んだ４つのこと","date":"2018-12-09T21:00:00.000+09:00","excerpt":"なにこれ最近DockerまわりをやっていてLinux上でDockerfileなどを編集するのがつらいので、ちゃんとVimを覚えようと思い立ち、とっかかりとして下記４点取り組みました。整理もかねて本記事にまとめます。vimtutor実施Vim...","tags":["Vim","Vimium"],"keywords":["Vim"],"thumbnail":"/thumbnail/2018/vim-beginners.png"}},"relations":[]},{"node":{"fields":{"slug":"/2018/12/02/","title":"CSSのclip-pathでSlit Animationを実現する","date":"2018-12-02T16:00:00.000+09:00","excerpt":"なにこれSlit Animationを実現するReactコンポーネントをCSSのclip-pathを使って作りました。Slit Animation(スリットアニメーション)は下記のようなものです。コマ画像を縞々にして合成した画像に、スリット...","tags":["CSS","clip-path","React"],"keywords":["React"],"thumbnail":"/thumbnail/2018/react-slit-animation.png"}},"relations":[{"node":{"fields":{"slug":"/2018/10/28/","title":"unifiedでMarkdownをHTMLに変換 & ReactでQiitaっぽい目次を作る","date":"2018-10-28T21:00:00.000Z","excerpt":"なにこれ自分のブログの目次をQiitaっぽくしたい...現在表示中の章をハイライトする目次を作りたい...ということで作りました。マークダウンをHTMLに変換するのにunifiedという構文解析ライブラリを使っています。メモ用にReactサ...","tags":["React","unified","remark","rehype"],"keywords":["React"],"thumbnail":"/thumbnail/2018/qiita-like-top-of-content-with-unified.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"React"},{"weight":50,"keyword":"React"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/09/16/","title":"ReactでSNS対応（Gatsby製ブログでSNSシェアボタン、OGPタグ追加）","date":"2018-09-16T22:00:00.000Z","excerpt":"なにこれGatsby製ブログ(Reactアプリ)でSNS対応した時のメモです。(1) SNSシェアボタンと(2) 自分のSNSへのリンクを設置して、ブログの記事をSNSでシェアできるように、、、また、(3) OGPタグを設定し、SNSでシェ...","tags":["Gatsby","React","OGP","SNS","SRE"],"keywords":["React"],"thumbnail":"/thumbnail/2018/react-sns.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"React"},{"weight":50,"keyword":"React"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/2018/11/24/","title":"Gatsby themeを使ってみる","date":"2018-11-24T23:40:00.000+09:00","excerpt":"なにこれ下記の記事を読んで、実験的に追加されたGatsby themeで何ができるのかサンプル作って試してみました。そのときのメモです。Gatsby themeはどんな問題を解決してくれるかGatsbyはスキャフォールド機能があって初期導入...","tags":["Gatsby","Gatsby theme"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-theme.png"}},"relations":[{"node":{"fields":{"slug":"/gatsby-related-posts-like-hugo","title":"GatsbyでRelated Content(関連記事)を表示する / Hugoの関連記事機能をGatsbyに移植した","date":"2019-02-09T17:00:00.000+09:00","excerpt":"なにこれブログでよく見かけるUIのひとつに関連記事リンクあります。記事下部に関連記事リンクを設けておくと、記事を読み終えたユーザーが、また別の記事を見てくれる可能性が上がるので、回遊率向上という観点で非常に効果的なUIです。そんな関連記事リ...","tags":["Gatsby","Hugo","golang"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2019/02/gatsby-related-posts-like-hugo.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/how-to-register-your-blog-in-gatsby-showcase","title":"Gatsbyショーケースに自分のWebサイトを登録する方法","date":"2019-01-15T22:00:00.000+09:00","excerpt":"なにこれGatsbyの公式サイトにはショーケースなるものがあって、世の中に公開されているGatsby製のWebサイトを一覧で見ることができます。実はこのショーケース、けっこう簡単に自分のWebサイトを登録できるということに最近気づきました。...","tags":["Gatsby"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2019/01/how-to-register-your-blog-in-gatsby-showcase.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/14/","title":"Gatsbyにおけるコンポーネント分割とCSS Module","date":"2018-10-14T07:00:00.000Z","excerpt":"なにこれGatsbyでブログを作っていて、機能拡張とともにテンプレートが肥大化してきたので、下記図の青枠単位でコンポーネント分割しました。あわせてCSS Moduleも採用しました。そのときのメモです。CSSをコンポーネントスコープにする方...","tags":["Gatsby","React","CSSModules"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-css-modules.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/12/","title":"Gatsby2系の新機能","date":"2018-10-12T12:00:00.000Z","excerpt":"なにこれGatsby（React製の静的サイトジェネレーター）が2018年9月に2系にアップデートしたそうです。2系の新機能について、公式ブログ(Announcing Gatsby 2.0.0)を参考に、主要な部分をピックアップして紹介しま...","tags":["Gatsby"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-v2.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/08/","title":"GatsbyでPWA対応","date":"2018-10-08T12:00:00.000Z","excerpt":"なにこれスマホでネイティブアプリっぽいUXを実現するため、GatsbyでPWA対応した時のメモです。以下の4つが可能になりました。前提ServiceWorkerを利用するため、SSL化が必須です。そのためブログはhttpsでアクセスできるよ...","tags":["Gatsby","PWA"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-pwa.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/07/","title":"GatsbyでYouTubeとTwitter埋め込み","date":"2018-10-07T12:00:00.000Z","excerpt":"なにこれブログに良くあるYouTubeやTwitterの埋め込みをGatsbyでやる方法のメモです。こんな感じで埋め込めるようになります。YouTubeyoutube:https://www.youtube.com/embed/z8Kt1g...","tags":["Gatsby","SNS","SER"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/youtube-in-gatsby.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/09/10/","title":"Gatsby製ブログ開設手順","date":"2018-09-10T19:00:00.000Z","excerpt":"ブログ開設手順Gatsbyってなにって状態から30分程度でブログを開設できました。下記にそのときの手順をメモしておきます。0. 前提条件Git、Node、npmは事前にインストールしておいてください。1. ブログのスターターキットを起動Ga...","tags":["Gatsby","ブログ"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/how-to-start-a-blog-with-gatsby.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/09/09/","title":"Gatsbyでブログ始めました。","date":"2018-09-09T22:00:00.000Z","excerpt":"ブログをやろうと思った理由Qiitaは、誰得な作業メモは載せられないしはてなブログは、見た目が好きじゃない...一時期、WikiHub日報とかもやっていたんですが、なかなか続かず...そのせいか、やったことを3ヶ月後には忘れてしまう状況がコ...","tags":["Gatsby","ブログ"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/beginning-of-blog.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/2018/11/18/","title":"ファイル名を指定して実行（windows + r）をランチャーとして使う","date":"2018-11-18T12:00:00.000+09:00","excerpt":"なにこれ便利なランチャーは色々ありますが、Windows PCだと僕はファイル名を指定して実行（windows + r）をランチャー代わりにしています。この方法は、どんなWindows PCでもすぐに使えるというのが最大の利点です。PCリプ...","tags":["Windows","ランチャー"],"keywords":["ランチャー"],"thumbnail":"/thumbnail/2018/windows-r-rancher.png"}},"relations":[]},{"node":{"fields":{"slug":"/2018/11/11/","title":"GatsbyでQiitaから記事を取得する(gatsby-source-qiita)","date":"2018-11-11T21:00:00.000+09:00","excerpt":"なにこれGatsbyにQiitaの記事を取り込めるプラグイン(gatsby-source-qiita)を作りましたQiitaからGatsbyに乗り換えようと考えている方で、Qiitaの記事を引き継ぎたい場合に便利なプラグインです。サンプル(...","tags":["Gatsby","GatsbyPlugin","Qiita"],"keywords":["GatsbyPlugin"],"thumbnail":"/thumbnail/2018/gatsby-plugin-qiita.png"}},"relations":[{"node":{"fields":{"slug":"/2018/11/03/","title":"Gatsby PluginでGraphQLデータ追加","date":"2018-11-03T09:00:00.000Z","excerpt":"なにこれ前回のunifiedでMarkdownをHTMLに変換 &#x26; ReactでQiitaっぽい目次を作るで、GraphQLで取得したヘッダー情報をReactコンポーネントで加工していましたが、あらかじめGraphQLのデータとし...","tags":["Gatsby","GatsbyPlugin"],"keywords":["GatsbyPlugin"],"thumbnail":"/thumbnail/2018/gatsby-plugin-graphql.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"GatsbyPlugin"},{"weight":50,"keyword":"Gatsby"},{"weight":50,"keyword":"GatsbyPlugin"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/21/","title":"Gatsbyプラグイン45選","date":"2018-10-21T15:00:00.000Z","excerpt":"なにこれGatsbyのプラグインは、公式プラグインとコミュニティ提供のものをあわせると、なんと502個もあります。（2018/10/21現在）今回はその中でもおすすめプラグイン45個をユースケース別にご紹介します。ユースケース別目次※クリッ...","tags":["Gatsby","GatsbyPlugin"],"keywords":["GatsbyPlugin"],"thumbnail":"/thumbnail/2018/getsby-plugin-best-45.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"GatsbyPlugin"},{"weight":50,"keyword":"Gatsby"},{"weight":50,"keyword":"GatsbyPlugin"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/20/","title":"Gatsbyプラグインの使い方･作り方･公開方法","date":"2018-10-20T21:00:00.000Z","excerpt":"なにこれGatsby公式サイトのプラグインの章のまとめ。プラグイン概要Gatsbyプラグインは、Gatsbyの全処理を拡張および修正可能です。例えば下記のようなことができます。外部コンテンツ（CMS、ファイル、REST APIなど）を追加し...","tags":["Gatsby","GatsbyPlugin"],"keywords":["GatsbyPlugin"],"thumbnail":"/thumbnail/2018/gatsby-plugin.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"GatsbyPlugin"},{"weight":50,"keyword":"Gatsby"},{"weight":50,"keyword":"GatsbyPlugin"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true}]},{"node":{"fields":{"slug":"/2018/11/03/","title":"Gatsby PluginでGraphQLデータ追加","date":"2018-11-03T09:00:00.000Z","excerpt":"なにこれ前回のunifiedでMarkdownをHTMLに変換 &#x26; ReactでQiitaっぽい目次を作るで、GraphQLで取得したヘッダー情報をReactコンポーネントで加工していましたが、あらかじめGraphQLのデータとし...","tags":["Gatsby","GatsbyPlugin"],"keywords":["GatsbyPlugin"],"thumbnail":"/thumbnail/2018/gatsby-plugin-graphql.png"}},"relations":[{"node":{"fields":{"slug":"/2018/11/11/","title":"GatsbyでQiitaから記事を取得する(gatsby-source-qiita)","date":"2018-11-11T21:00:00.000+09:00","excerpt":"なにこれGatsbyにQiitaの記事を取り込めるプラグイン(gatsby-source-qiita)を作りましたQiitaからGatsbyに乗り換えようと考えている方で、Qiitaの記事を引き継ぎたい場合に便利なプラグインです。サンプル(...","tags":["Gatsby","GatsbyPlugin","Qiita"],"keywords":["GatsbyPlugin"],"thumbnail":"/thumbnail/2018/gatsby-plugin-qiita.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"GatsbyPlugin"},{"weight":50,"keyword":"Gatsby"},{"weight":50,"keyword":"GatsbyPlugin"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/21/","title":"Gatsbyプラグイン45選","date":"2018-10-21T15:00:00.000Z","excerpt":"なにこれGatsbyのプラグインは、公式プラグインとコミュニティ提供のものをあわせると、なんと502個もあります。（2018/10/21現在）今回はその中でもおすすめプラグイン45個をユースケース別にご紹介します。ユースケース別目次※クリッ...","tags":["Gatsby","GatsbyPlugin"],"keywords":["GatsbyPlugin"],"thumbnail":"/thumbnail/2018/getsby-plugin-best-45.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"GatsbyPlugin"},{"weight":50,"keyword":"Gatsby"},{"weight":50,"keyword":"GatsbyPlugin"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/20/","title":"Gatsbyプラグインの使い方･作り方･公開方法","date":"2018-10-20T21:00:00.000Z","excerpt":"なにこれGatsby公式サイトのプラグインの章のまとめ。プラグイン概要Gatsbyプラグインは、Gatsbyの全処理を拡張および修正可能です。例えば下記のようなことができます。外部コンテンツ（CMS、ファイル、REST APIなど）を追加し...","tags":["Gatsby","GatsbyPlugin"],"keywords":["GatsbyPlugin"],"thumbnail":"/thumbnail/2018/gatsby-plugin.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"GatsbyPlugin"},{"weight":50,"keyword":"Gatsby"},{"weight":50,"keyword":"GatsbyPlugin"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true}]},{"node":{"fields":{"slug":"/2018/10/28/","title":"unifiedでMarkdownをHTMLに変換 & ReactでQiitaっぽい目次を作る","date":"2018-10-28T21:00:00.000Z","excerpt":"なにこれ自分のブログの目次をQiitaっぽくしたい...現在表示中の章をハイライトする目次を作りたい...ということで作りました。マークダウンをHTMLに変換するのにunifiedという構文解析ライブラリを使っています。メモ用にReactサ...","tags":["React","unified","remark","rehype"],"keywords":["React"],"thumbnail":"/thumbnail/2018/qiita-like-top-of-content-with-unified.png"}},"relations":[{"node":{"fields":{"slug":"/2018/12/02/","title":"CSSのclip-pathでSlit Animationを実現する","date":"2018-12-02T16:00:00.000+09:00","excerpt":"なにこれSlit Animationを実現するReactコンポーネントをCSSのclip-pathを使って作りました。Slit Animation(スリットアニメーション)は下記のようなものです。コマ画像を縞々にして合成した画像に、スリット...","tags":["CSS","clip-path","React"],"keywords":["React"],"thumbnail":"/thumbnail/2018/react-slit-animation.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"React"},{"weight":50,"keyword":"React"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/09/16/","title":"ReactでSNS対応（Gatsby製ブログでSNSシェアボタン、OGPタグ追加）","date":"2018-09-16T22:00:00.000Z","excerpt":"なにこれGatsby製ブログ(Reactアプリ)でSNS対応した時のメモです。(1) SNSシェアボタンと(2) 自分のSNSへのリンクを設置して、ブログの記事をSNSでシェアできるように、、、また、(3) OGPタグを設定し、SNSでシェ...","tags":["Gatsby","React","OGP","SNS","SRE"],"keywords":["React"],"thumbnail":"/thumbnail/2018/react-sns.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"React"},{"weight":50,"keyword":"React"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/2018/10/21/","title":"Gatsbyプラグイン45選","date":"2018-10-21T15:00:00.000Z","excerpt":"なにこれGatsbyのプラグインは、公式プラグインとコミュニティ提供のものをあわせると、なんと502個もあります。（2018/10/21現在）今回はその中でもおすすめプラグイン45個をユースケース別にご紹介します。ユースケース別目次※クリッ...","tags":["Gatsby","GatsbyPlugin"],"keywords":["GatsbyPlugin"],"thumbnail":"/thumbnail/2018/getsby-plugin-best-45.png"}},"relations":[{"node":{"fields":{"slug":"/2018/11/11/","title":"GatsbyでQiitaから記事を取得する(gatsby-source-qiita)","date":"2018-11-11T21:00:00.000+09:00","excerpt":"なにこれGatsbyにQiitaの記事を取り込めるプラグイン(gatsby-source-qiita)を作りましたQiitaからGatsbyに乗り換えようと考えている方で、Qiitaの記事を引き継ぎたい場合に便利なプラグインです。サンプル(...","tags":["Gatsby","GatsbyPlugin","Qiita"],"keywords":["GatsbyPlugin"],"thumbnail":"/thumbnail/2018/gatsby-plugin-qiita.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"GatsbyPlugin"},{"weight":50,"keyword":"Gatsby"},{"weight":50,"keyword":"GatsbyPlugin"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/2018/11/03/","title":"Gatsby PluginでGraphQLデータ追加","date":"2018-11-03T09:00:00.000Z","excerpt":"なにこれ前回のunifiedでMarkdownをHTMLに変換 &#x26; ReactでQiitaっぽい目次を作るで、GraphQLで取得したヘッダー情報をReactコンポーネントで加工していましたが、あらかじめGraphQLのデータとし...","tags":["Gatsby","GatsbyPlugin"],"keywords":["GatsbyPlugin"],"thumbnail":"/thumbnail/2018/gatsby-plugin-graphql.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"GatsbyPlugin"},{"weight":50,"keyword":"Gatsby"},{"weight":50,"keyword":"GatsbyPlugin"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/20/","title":"Gatsbyプラグインの使い方･作り方･公開方法","date":"2018-10-20T21:00:00.000Z","excerpt":"なにこれGatsby公式サイトのプラグインの章のまとめ。プラグイン概要Gatsbyプラグインは、Gatsbyの全処理を拡張および修正可能です。例えば下記のようなことができます。外部コンテンツ（CMS、ファイル、REST APIなど）を追加し...","tags":["Gatsby","GatsbyPlugin"],"keywords":["GatsbyPlugin"],"thumbnail":"/thumbnail/2018/gatsby-plugin.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"GatsbyPlugin"},{"weight":50,"keyword":"Gatsby"},{"weight":50,"keyword":"GatsbyPlugin"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true}]},{"node":{"fields":{"slug":"/2018/10/20/","title":"Gatsbyプラグインの使い方･作り方･公開方法","date":"2018-10-20T21:00:00.000Z","excerpt":"なにこれGatsby公式サイトのプラグインの章のまとめ。プラグイン概要Gatsbyプラグインは、Gatsbyの全処理を拡張および修正可能です。例えば下記のようなことができます。外部コンテンツ（CMS、ファイル、REST APIなど）を追加し...","tags":["Gatsby","GatsbyPlugin"],"keywords":["GatsbyPlugin"],"thumbnail":"/thumbnail/2018/gatsby-plugin.png"}},"relations":[{"node":{"fields":{"slug":"/2018/11/11/","title":"GatsbyでQiitaから記事を取得する(gatsby-source-qiita)","date":"2018-11-11T21:00:00.000+09:00","excerpt":"なにこれGatsbyにQiitaの記事を取り込めるプラグイン(gatsby-source-qiita)を作りましたQiitaからGatsbyに乗り換えようと考えている方で、Qiitaの記事を引き継ぎたい場合に便利なプラグインです。サンプル(...","tags":["Gatsby","GatsbyPlugin","Qiita"],"keywords":["GatsbyPlugin"],"thumbnail":"/thumbnail/2018/gatsby-plugin-qiita.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"GatsbyPlugin"},{"weight":50,"keyword":"Gatsby"},{"weight":50,"keyword":"GatsbyPlugin"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/2018/11/03/","title":"Gatsby PluginでGraphQLデータ追加","date":"2018-11-03T09:00:00.000Z","excerpt":"なにこれ前回のunifiedでMarkdownをHTMLに変換 &#x26; ReactでQiitaっぽい目次を作るで、GraphQLで取得したヘッダー情報をReactコンポーネントで加工していましたが、あらかじめGraphQLのデータとし...","tags":["Gatsby","GatsbyPlugin"],"keywords":["GatsbyPlugin"],"thumbnail":"/thumbnail/2018/gatsby-plugin-graphql.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"GatsbyPlugin"},{"weight":50,"keyword":"Gatsby"},{"weight":50,"keyword":"GatsbyPlugin"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/21/","title":"Gatsbyプラグイン45選","date":"2018-10-21T15:00:00.000Z","excerpt":"なにこれGatsbyのプラグインは、公式プラグインとコミュニティ提供のものをあわせると、なんと502個もあります。（2018/10/21現在）今回はその中でもおすすめプラグイン45個をユースケース別にご紹介します。ユースケース別目次※クリッ...","tags":["Gatsby","GatsbyPlugin"],"keywords":["GatsbyPlugin"],"thumbnail":"/thumbnail/2018/getsby-plugin-best-45.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"GatsbyPlugin"},{"weight":50,"keyword":"Gatsby"},{"weight":50,"keyword":"GatsbyPlugin"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true}]},{"node":{"fields":{"slug":"/2018/10/14/","title":"Gatsbyにおけるコンポーネント分割とCSS Module","date":"2018-10-14T07:00:00.000Z","excerpt":"なにこれGatsbyでブログを作っていて、機能拡張とともにテンプレートが肥大化してきたので、下記図の青枠単位でコンポーネント分割しました。あわせてCSS Moduleも採用しました。そのときのメモです。CSSをコンポーネントスコープにする方...","tags":["Gatsby","React","CSSModules"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-css-modules.png"}},"relations":[{"node":{"fields":{"slug":"/2018/10/08/","title":"GatsbyでPWA対応","date":"2018-10-08T12:00:00.000Z","excerpt":"なにこれスマホでネイティブアプリっぽいUXを実現するため、GatsbyでPWA対応した時のメモです。以下の4つが可能になりました。前提ServiceWorkerを利用するため、SSL化が必須です。そのためブログはhttpsでアクセスできるよ...","tags":["Gatsby","PWA"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-pwa.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/11/24/","title":"Gatsby themeを使ってみる","date":"2018-11-24T23:40:00.000+09:00","excerpt":"なにこれ下記の記事を読んで、実験的に追加されたGatsby themeで何ができるのかサンプル作って試してみました。そのときのメモです。Gatsby themeはどんな問題を解決してくれるかGatsbyはスキャフォールド機能があって初期導入...","tags":["Gatsby","Gatsby theme"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-theme.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/gatsby-related-posts-like-hugo","title":"GatsbyでRelated Content(関連記事)を表示する / Hugoの関連記事機能をGatsbyに移植した","date":"2019-02-09T17:00:00.000+09:00","excerpt":"なにこれブログでよく見かけるUIのひとつに関連記事リンクあります。記事下部に関連記事リンクを設けておくと、記事を読み終えたユーザーが、また別の記事を見てくれる可能性が上がるので、回遊率向上という観点で非常に効果的なUIです。そんな関連記事リ...","tags":["Gatsby","Hugo","golang"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2019/02/gatsby-related-posts-like-hugo.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/12/","title":"Gatsby2系の新機能","date":"2018-10-12T12:00:00.000Z","excerpt":"なにこれGatsby（React製の静的サイトジェネレーター）が2018年9月に2系にアップデートしたそうです。2系の新機能について、公式ブログ(Announcing Gatsby 2.0.0)を参考に、主要な部分をピックアップして紹介しま...","tags":["Gatsby"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-v2.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/how-to-register-your-blog-in-gatsby-showcase","title":"Gatsbyショーケースに自分のWebサイトを登録する方法","date":"2019-01-15T22:00:00.000+09:00","excerpt":"なにこれGatsbyの公式サイトにはショーケースなるものがあって、世の中に公開されているGatsby製のWebサイトを一覧で見ることができます。実はこのショーケース、けっこう簡単に自分のWebサイトを登録できるということに最近気づきました。...","tags":["Gatsby"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2019/01/how-to-register-your-blog-in-gatsby-showcase.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/07/","title":"GatsbyでYouTubeとTwitter埋め込み","date":"2018-10-07T12:00:00.000Z","excerpt":"なにこれブログに良くあるYouTubeやTwitterの埋め込みをGatsbyでやる方法のメモです。こんな感じで埋め込めるようになります。YouTubeyoutube:https://www.youtube.com/embed/z8Kt1g...","tags":["Gatsby","SNS","SER"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/youtube-in-gatsby.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/09/10/","title":"Gatsby製ブログ開設手順","date":"2018-09-10T19:00:00.000Z","excerpt":"ブログ開設手順Gatsbyってなにって状態から30分程度でブログを開設できました。下記にそのときの手順をメモしておきます。0. 前提条件Git、Node、npmは事前にインストールしておいてください。1. ブログのスターターキットを起動Ga...","tags":["Gatsby","ブログ"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/how-to-start-a-blog-with-gatsby.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/09/09/","title":"Gatsbyでブログ始めました。","date":"2018-09-09T22:00:00.000Z","excerpt":"ブログをやろうと思った理由Qiitaは、誰得な作業メモは載せられないしはてなブログは、見た目が好きじゃない...一時期、WikiHub日報とかもやっていたんですが、なかなか続かず...そのせいか、やったことを3ヶ月後には忘れてしまう状況がコ...","tags":["Gatsby","ブログ"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/beginning-of-blog.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/iframely","title":"ブログにあらゆる外部コンテンツを埋め込めるWebサービス「Iframely」の使い方","date":"2019-01-11T23:30:00.000+09:00","excerpt":"なにこれSNSのコンテンツ、動画といった外部コンテンツを自分のブログに載せる場合、単純にリンクを張り付けるよりも、以下のようにHTMLの埋め込みコードを張り付けたほうがビジュアル面で効果的です。ただTwitterやYouTubeなどの埋め込...","tags":["Iframely","oEmbed","埋め込みコード","React","Gatsby"],"keywords":["Iframely"],"thumbnail":"/thumbnail/2019/01/iframely.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"Gatsby"},{"weight":50,"keyword":"React"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/09/16/","title":"ReactでSNS対応（Gatsby製ブログでSNSシェアボタン、OGPタグ追加）","date":"2018-09-16T22:00:00.000Z","excerpt":"なにこれGatsby製ブログ(Reactアプリ)でSNS対応した時のメモです。(1) SNSシェアボタンと(2) 自分のSNSへのリンクを設置して、ブログの記事をSNSでシェアできるように、、、また、(3) OGPタグを設定し、SNSでシェ...","tags":["Gatsby","React","OGP","SNS","SRE"],"keywords":["React"],"thumbnail":"/thumbnail/2018/react-sns.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"Gatsby"},{"weight":50,"keyword":"React"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/2018/10/12/","title":"Gatsby2系の新機能","date":"2018-10-12T12:00:00.000Z","excerpt":"なにこれGatsby（React製の静的サイトジェネレーター）が2018年9月に2系にアップデートしたそうです。2系の新機能について、公式ブログ(Announcing Gatsby 2.0.0)を参考に、主要な部分をピックアップして紹介しま...","tags":["Gatsby"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-v2.png"}},"relations":[{"node":{"fields":{"slug":"/gatsby-related-posts-like-hugo","title":"GatsbyでRelated Content(関連記事)を表示する / Hugoの関連記事機能をGatsbyに移植した","date":"2019-02-09T17:00:00.000+09:00","excerpt":"なにこれブログでよく見かけるUIのひとつに関連記事リンクあります。記事下部に関連記事リンクを設けておくと、記事を読み終えたユーザーが、また別の記事を見てくれる可能性が上がるので、回遊率向上という観点で非常に効果的なUIです。そんな関連記事リ...","tags":["Gatsby","Hugo","golang"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2019/02/gatsby-related-posts-like-hugo.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/how-to-register-your-blog-in-gatsby-showcase","title":"Gatsbyショーケースに自分のWebサイトを登録する方法","date":"2019-01-15T22:00:00.000+09:00","excerpt":"なにこれGatsbyの公式サイトにはショーケースなるものがあって、世の中に公開されているGatsby製のWebサイトを一覧で見ることができます。実はこのショーケース、けっこう簡単に自分のWebサイトを登録できるということに最近気づきました。...","tags":["Gatsby"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2019/01/how-to-register-your-blog-in-gatsby-showcase.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/11/24/","title":"Gatsby themeを使ってみる","date":"2018-11-24T23:40:00.000+09:00","excerpt":"なにこれ下記の記事を読んで、実験的に追加されたGatsby themeで何ができるのかサンプル作って試してみました。そのときのメモです。Gatsby themeはどんな問題を解決してくれるかGatsbyはスキャフォールド機能があって初期導入...","tags":["Gatsby","Gatsby theme"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-theme.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/14/","title":"Gatsbyにおけるコンポーネント分割とCSS Module","date":"2018-10-14T07:00:00.000Z","excerpt":"なにこれGatsbyでブログを作っていて、機能拡張とともにテンプレートが肥大化してきたので、下記図の青枠単位でコンポーネント分割しました。あわせてCSS Moduleも採用しました。そのときのメモです。CSSをコンポーネントスコープにする方...","tags":["Gatsby","React","CSSModules"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-css-modules.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/08/","title":"GatsbyでPWA対応","date":"2018-10-08T12:00:00.000Z","excerpt":"なにこれスマホでネイティブアプリっぽいUXを実現するため、GatsbyでPWA対応した時のメモです。以下の4つが可能になりました。前提ServiceWorkerを利用するため、SSL化が必須です。そのためブログはhttpsでアクセスできるよ...","tags":["Gatsby","PWA"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-pwa.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/07/","title":"GatsbyでYouTubeとTwitter埋め込み","date":"2018-10-07T12:00:00.000Z","excerpt":"なにこれブログに良くあるYouTubeやTwitterの埋め込みをGatsbyでやる方法のメモです。こんな感じで埋め込めるようになります。YouTubeyoutube:https://www.youtube.com/embed/z8Kt1g...","tags":["Gatsby","SNS","SER"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/youtube-in-gatsby.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/09/10/","title":"Gatsby製ブログ開設手順","date":"2018-09-10T19:00:00.000Z","excerpt":"ブログ開設手順Gatsbyってなにって状態から30分程度でブログを開設できました。下記にそのときの手順をメモしておきます。0. 前提条件Git、Node、npmは事前にインストールしておいてください。1. ブログのスターターキットを起動Ga...","tags":["Gatsby","ブログ"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/how-to-start-a-blog-with-gatsby.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/09/09/","title":"Gatsbyでブログ始めました。","date":"2018-09-09T22:00:00.000Z","excerpt":"ブログをやろうと思った理由Qiitaは、誰得な作業メモは載せられないしはてなブログは、見た目が好きじゃない...一時期、WikiHub日報とかもやっていたんですが、なかなか続かず...そのせいか、やったことを3ヶ月後には忘れてしまう状況がコ...","tags":["Gatsby","ブログ"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/beginning-of-blog.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/2018/10/08/","title":"GatsbyでPWA対応","date":"2018-10-08T12:00:00.000Z","excerpt":"なにこれスマホでネイティブアプリっぽいUXを実現するため、GatsbyでPWA対応した時のメモです。以下の4つが可能になりました。前提ServiceWorkerを利用するため、SSL化が必須です。そのためブログはhttpsでアクセスできるよ...","tags":["Gatsby","PWA"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-pwa.png"}},"relations":[{"node":{"fields":{"slug":"/gatsby-related-posts-like-hugo","title":"GatsbyでRelated Content(関連記事)を表示する / Hugoの関連記事機能をGatsbyに移植した","date":"2019-02-09T17:00:00.000+09:00","excerpt":"なにこれブログでよく見かけるUIのひとつに関連記事リンクあります。記事下部に関連記事リンクを設けておくと、記事を読み終えたユーザーが、また別の記事を見てくれる可能性が上がるので、回遊率向上という観点で非常に効果的なUIです。そんな関連記事リ...","tags":["Gatsby","Hugo","golang"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2019/02/gatsby-related-posts-like-hugo.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/how-to-register-your-blog-in-gatsby-showcase","title":"Gatsbyショーケースに自分のWebサイトを登録する方法","date":"2019-01-15T22:00:00.000+09:00","excerpt":"なにこれGatsbyの公式サイトにはショーケースなるものがあって、世の中に公開されているGatsby製のWebサイトを一覧で見ることができます。実はこのショーケース、けっこう簡単に自分のWebサイトを登録できるということに最近気づきました。...","tags":["Gatsby"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2019/01/how-to-register-your-blog-in-gatsby-showcase.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/11/24/","title":"Gatsby themeを使ってみる","date":"2018-11-24T23:40:00.000+09:00","excerpt":"なにこれ下記の記事を読んで、実験的に追加されたGatsby themeで何ができるのかサンプル作って試してみました。そのときのメモです。Gatsby themeはどんな問題を解決してくれるかGatsbyはスキャフォールド機能があって初期導入...","tags":["Gatsby","Gatsby theme"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-theme.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/14/","title":"Gatsbyにおけるコンポーネント分割とCSS Module","date":"2018-10-14T07:00:00.000Z","excerpt":"なにこれGatsbyでブログを作っていて、機能拡張とともにテンプレートが肥大化してきたので、下記図の青枠単位でコンポーネント分割しました。あわせてCSS Moduleも採用しました。そのときのメモです。CSSをコンポーネントスコープにする方...","tags":["Gatsby","React","CSSModules"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-css-modules.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/12/","title":"Gatsby2系の新機能","date":"2018-10-12T12:00:00.000Z","excerpt":"なにこれGatsby（React製の静的サイトジェネレーター）が2018年9月に2系にアップデートしたそうです。2系の新機能について、公式ブログ(Announcing Gatsby 2.0.0)を参考に、主要な部分をピックアップして紹介しま...","tags":["Gatsby"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-v2.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/07/","title":"GatsbyでYouTubeとTwitter埋め込み","date":"2018-10-07T12:00:00.000Z","excerpt":"なにこれブログに良くあるYouTubeやTwitterの埋め込みをGatsbyでやる方法のメモです。こんな感じで埋め込めるようになります。YouTubeyoutube:https://www.youtube.com/embed/z8Kt1g...","tags":["Gatsby","SNS","SER"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/youtube-in-gatsby.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/09/10/","title":"Gatsby製ブログ開設手順","date":"2018-09-10T19:00:00.000Z","excerpt":"ブログ開設手順Gatsbyってなにって状態から30分程度でブログを開設できました。下記にそのときの手順をメモしておきます。0. 前提条件Git、Node、npmは事前にインストールしておいてください。1. ブログのスターターキットを起動Ga...","tags":["Gatsby","ブログ"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/how-to-start-a-blog-with-gatsby.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/09/09/","title":"Gatsbyでブログ始めました。","date":"2018-09-09T22:00:00.000Z","excerpt":"ブログをやろうと思った理由Qiitaは、誰得な作業メモは載せられないしはてなブログは、見た目が好きじゃない...一時期、WikiHub日報とかもやっていたんですが、なかなか続かず...そのせいか、やったことを3ヶ月後には忘れてしまう状況がコ...","tags":["Gatsby","ブログ"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/beginning-of-blog.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/2018/10/07/","title":"GatsbyでYouTubeとTwitter埋め込み","date":"2018-10-07T12:00:00.000Z","excerpt":"なにこれブログに良くあるYouTubeやTwitterの埋め込みをGatsbyでやる方法のメモです。こんな感じで埋め込めるようになります。YouTubeyoutube:https://www.youtube.com/embed/z8Kt1g...","tags":["Gatsby","SNS","SER"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/youtube-in-gatsby.png"}},"relations":[{"node":{"fields":{"slug":"/gatsby-related-posts-like-hugo","title":"GatsbyでRelated Content(関連記事)を表示する / Hugoの関連記事機能をGatsbyに移植した","date":"2019-02-09T17:00:00.000+09:00","excerpt":"なにこれブログでよく見かけるUIのひとつに関連記事リンクあります。記事下部に関連記事リンクを設けておくと、記事を読み終えたユーザーが、また別の記事を見てくれる可能性が上がるので、回遊率向上という観点で非常に効果的なUIです。そんな関連記事リ...","tags":["Gatsby","Hugo","golang"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2019/02/gatsby-related-posts-like-hugo.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/how-to-register-your-blog-in-gatsby-showcase","title":"Gatsbyショーケースに自分のWebサイトを登録する方法","date":"2019-01-15T22:00:00.000+09:00","excerpt":"なにこれGatsbyの公式サイトにはショーケースなるものがあって、世の中に公開されているGatsby製のWebサイトを一覧で見ることができます。実はこのショーケース、けっこう簡単に自分のWebサイトを登録できるということに最近気づきました。...","tags":["Gatsby"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2019/01/how-to-register-your-blog-in-gatsby-showcase.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/11/24/","title":"Gatsby themeを使ってみる","date":"2018-11-24T23:40:00.000+09:00","excerpt":"なにこれ下記の記事を読んで、実験的に追加されたGatsby themeで何ができるのかサンプル作って試してみました。そのときのメモです。Gatsby themeはどんな問題を解決してくれるかGatsbyはスキャフォールド機能があって初期導入...","tags":["Gatsby","Gatsby theme"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-theme.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/14/","title":"Gatsbyにおけるコンポーネント分割とCSS Module","date":"2018-10-14T07:00:00.000Z","excerpt":"なにこれGatsbyでブログを作っていて、機能拡張とともにテンプレートが肥大化してきたので、下記図の青枠単位でコンポーネント分割しました。あわせてCSS Moduleも採用しました。そのときのメモです。CSSをコンポーネントスコープにする方...","tags":["Gatsby","React","CSSModules"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-css-modules.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/12/","title":"Gatsby2系の新機能","date":"2018-10-12T12:00:00.000Z","excerpt":"なにこれGatsby（React製の静的サイトジェネレーター）が2018年9月に2系にアップデートしたそうです。2系の新機能について、公式ブログ(Announcing Gatsby 2.0.0)を参考に、主要な部分をピックアップして紹介しま...","tags":["Gatsby"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-v2.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/08/","title":"GatsbyでPWA対応","date":"2018-10-08T12:00:00.000Z","excerpt":"なにこれスマホでネイティブアプリっぽいUXを実現するため、GatsbyでPWA対応した時のメモです。以下の4つが可能になりました。前提ServiceWorkerを利用するため、SSL化が必須です。そのためブログはhttpsでアクセスできるよ...","tags":["Gatsby","PWA"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-pwa.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/09/10/","title":"Gatsby製ブログ開設手順","date":"2018-09-10T19:00:00.000Z","excerpt":"ブログ開設手順Gatsbyってなにって状態から30分程度でブログを開設できました。下記にそのときの手順をメモしておきます。0. 前提条件Git、Node、npmは事前にインストールしておいてください。1. ブログのスターターキットを起動Ga...","tags":["Gatsby","ブログ"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/how-to-start-a-blog-with-gatsby.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/09/09/","title":"Gatsbyでブログ始めました。","date":"2018-09-09T22:00:00.000Z","excerpt":"ブログをやろうと思った理由Qiitaは、誰得な作業メモは載せられないしはてなブログは、見た目が好きじゃない...一時期、WikiHub日報とかもやっていたんですが、なかなか続かず...そのせいか、やったことを3ヶ月後には忘れてしまう状況がコ...","tags":["Gatsby","ブログ"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/beginning-of-blog.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/09/16/","title":"ReactでSNS対応（Gatsby製ブログでSNSシェアボタン、OGPタグ追加）","date":"2018-09-16T22:00:00.000Z","excerpt":"なにこれGatsby製ブログ(Reactアプリ)でSNS対応した時のメモです。(1) SNSシェアボタンと(2) 自分のSNSへのリンクを設置して、ブログの記事をSNSでシェアできるように、、、また、(3) OGPタグを設定し、SNSでシェ...","tags":["Gatsby","React","OGP","SNS","SRE"],"keywords":["React"],"thumbnail":"/thumbnail/2018/react-sns.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"Gatsby"},{"weight":50,"keyword":"SNS"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/2018/09/29/","title":"Reactで構造化データマークアップ（JSON-LD対応）","date":"2018-09-29T23:50:00.000Z","excerpt":"なにこれググった時に自分のブログ(React製)でパンくずを表示させたいということでJSON-LD対応しました。JSON+LDについてググると色々良い記事がでてきて一通り学ぶことができました。ここでは、それら記事の紹介を兼ねて、構造化データ...","tags":["React","Schema-org","JSON-LD","SRE"],"keywords":["JSON-LD"],"thumbnail":"/thumbnail/2018/react-json-ld.png"}},"relations":[{"node":{"fields":{"slug":"/2018/09/16/","title":"ReactでSNS対応（Gatsby製ブログでSNSシェアボタン、OGPタグ追加）","date":"2018-09-16T22:00:00.000Z","excerpt":"なにこれGatsby製ブログ(Reactアプリ)でSNS対応した時のメモです。(1) SNSシェアボタンと(2) 自分のSNSへのリンクを設置して、ブログの記事をSNSでシェアできるように、、、また、(3) OGPタグを設定し、SNSでシェ...","tags":["Gatsby","React","OGP","SNS","SRE"],"keywords":["React"],"thumbnail":"/thumbnail/2018/react-sns.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"React"},{"weight":50,"keyword":"SRE"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/2018/09/16/","title":"ReactでSNS対応（Gatsby製ブログでSNSシェアボタン、OGPタグ追加）","date":"2018-09-16T22:00:00.000Z","excerpt":"なにこれGatsby製ブログ(Reactアプリ)でSNS対応した時のメモです。(1) SNSシェアボタンと(2) 自分のSNSへのリンクを設置して、ブログの記事をSNSでシェアできるように、、、また、(3) OGPタグを設定し、SNSでシェ...","tags":["Gatsby","React","OGP","SNS","SRE"],"keywords":["React"],"thumbnail":"/thumbnail/2018/react-sns.png"}},"relations":[{"node":{"fields":{"slug":"/2018/12/02/","title":"CSSのclip-pathでSlit Animationを実現する","date":"2018-12-02T16:00:00.000+09:00","excerpt":"なにこれSlit Animationを実現するReactコンポーネントをCSSのclip-pathを使って作りました。Slit Animation(スリットアニメーション)は下記のようなものです。コマ画像を縞々にして合成した画像に、スリット...","tags":["CSS","clip-path","React"],"keywords":["React"],"thumbnail":"/thumbnail/2018/react-slit-animation.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"React"},{"weight":50,"keyword":"React"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/28/","title":"unifiedでMarkdownをHTMLに変換 & ReactでQiitaっぽい目次を作る","date":"2018-10-28T21:00:00.000Z","excerpt":"なにこれ自分のブログの目次をQiitaっぽくしたい...現在表示中の章をハイライトする目次を作りたい...ということで作りました。マークダウンをHTMLに変換するのにunifiedという構文解析ライブラリを使っています。メモ用にReactサ...","tags":["React","unified","remark","rehype"],"keywords":["React"],"thumbnail":"/thumbnail/2018/qiita-like-top-of-content-with-unified.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"React"},{"weight":50,"keyword":"React"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/iframely","title":"ブログにあらゆる外部コンテンツを埋め込めるWebサービス「Iframely」の使い方","date":"2019-01-11T23:30:00.000+09:00","excerpt":"なにこれSNSのコンテンツ、動画といった外部コンテンツを自分のブログに載せる場合、単純にリンクを張り付けるよりも、以下のようにHTMLの埋め込みコードを張り付けたほうがビジュアル面で効果的です。ただTwitterやYouTubeなどの埋め込...","tags":["Iframely","oEmbed","埋め込みコード","React","Gatsby"],"keywords":["Iframely"],"thumbnail":"/thumbnail/2019/01/iframely.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"Gatsby"},{"weight":50,"keyword":"React"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/14/","title":"Gatsbyにおけるコンポーネント分割とCSS Module","date":"2018-10-14T07:00:00.000Z","excerpt":"なにこれGatsbyでブログを作っていて、機能拡張とともにテンプレートが肥大化してきたので、下記図の青枠単位でコンポーネント分割しました。あわせてCSS Moduleも採用しました。そのときのメモです。CSSをコンポーネントスコープにする方...","tags":["Gatsby","React","CSSModules"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-css-modules.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"Gatsby"},{"weight":50,"keyword":"React"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/07/","title":"GatsbyでYouTubeとTwitter埋め込み","date":"2018-10-07T12:00:00.000Z","excerpt":"なにこれブログに良くあるYouTubeやTwitterの埋め込みをGatsbyでやる方法のメモです。こんな感じで埋め込めるようになります。YouTubeyoutube:https://www.youtube.com/embed/z8Kt1g...","tags":["Gatsby","SNS","SER"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/youtube-in-gatsby.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"Gatsby"},{"weight":50,"keyword":"SNS"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/09/29/","title":"Reactで構造化データマークアップ（JSON-LD対応）","date":"2018-09-29T23:50:00.000Z","excerpt":"なにこれググった時に自分のブログ(React製)でパンくずを表示させたいということでJSON-LD対応しました。JSON+LDについてググると色々良い記事がでてきて一通り学ぶことができました。ここでは、それら記事の紹介を兼ねて、構造化データ...","tags":["React","Schema-org","JSON-LD","SRE"],"keywords":["JSON-LD"],"thumbnail":"/thumbnail/2018/react-json-ld.png"}},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"React"},{"weight":50,"keyword":"SRE"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/2018/09/12/","title":"GitHub Pagesを独自ドメイン化 + Https化","date":"2018-09-12T07:00:00.000Z","excerpt":"なにこれGitHub Pagesでブログを開設した後、どうせならURLも短く覚えてもらいやすいものにしようと思い独自ドメインに切り替えました。その方法のメモです。　※（注意）独自ドメイン取得はお金がかかります！！！手順1. 独自ドメインを取...","tags":["Github-Pages","カスタムドメイン","Https化","Gatsby"],"keywords":["カスタムドメイン"],"thumbnail":"/thumbnail/2018/github-pages-https.png"}},"relations":[]},{"node":{"fields":{"slug":"/2018/09/10/","title":"Gatsby製ブログ開設手順","date":"2018-09-10T19:00:00.000Z","excerpt":"ブログ開設手順Gatsbyってなにって状態から30分程度でブログを開設できました。下記にそのときの手順をメモしておきます。0. 前提条件Git、Node、npmは事前にインストールしておいてください。1. ブログのスターターキットを起動Ga...","tags":["Gatsby","ブログ"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/how-to-start-a-blog-with-gatsby.png"}},"relations":[{"node":{"fields":{"slug":"/2018/09/09/","title":"Gatsbyでブログ始めました。","date":"2018-09-09T22:00:00.000Z","excerpt":"ブログをやろうと思った理由Qiitaは、誰得な作業メモは載せられないしはてなブログは、見た目が好きじゃない...一時期、WikiHub日報とかもやっていたんですが、なかなか続かず...そのせいか、やったことを3ヶ月後には忘れてしまう状況がコ...","tags":["Gatsby","ブログ"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/beginning-of-blog.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"},{"weight":50,"keyword":"ブログ"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/gatsby-related-posts-like-hugo","title":"GatsbyでRelated Content(関連記事)を表示する / Hugoの関連記事機能をGatsbyに移植した","date":"2019-02-09T17:00:00.000+09:00","excerpt":"なにこれブログでよく見かけるUIのひとつに関連記事リンクあります。記事下部に関連記事リンクを設けておくと、記事を読み終えたユーザーが、また別の記事を見てくれる可能性が上がるので、回遊率向上という観点で非常に効果的なUIです。そんな関連記事リ...","tags":["Gatsby","Hugo","golang"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2019/02/gatsby-related-posts-like-hugo.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/how-to-register-your-blog-in-gatsby-showcase","title":"Gatsbyショーケースに自分のWebサイトを登録する方法","date":"2019-01-15T22:00:00.000+09:00","excerpt":"なにこれGatsbyの公式サイトにはショーケースなるものがあって、世の中に公開されているGatsby製のWebサイトを一覧で見ることができます。実はこのショーケース、けっこう簡単に自分のWebサイトを登録できるということに最近気づきました。...","tags":["Gatsby"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2019/01/how-to-register-your-blog-in-gatsby-showcase.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/11/24/","title":"Gatsby themeを使ってみる","date":"2018-11-24T23:40:00.000+09:00","excerpt":"なにこれ下記の記事を読んで、実験的に追加されたGatsby themeで何ができるのかサンプル作って試してみました。そのときのメモです。Gatsby themeはどんな問題を解決してくれるかGatsbyはスキャフォールド機能があって初期導入...","tags":["Gatsby","Gatsby theme"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-theme.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/14/","title":"Gatsbyにおけるコンポーネント分割とCSS Module","date":"2018-10-14T07:00:00.000Z","excerpt":"なにこれGatsbyでブログを作っていて、機能拡張とともにテンプレートが肥大化してきたので、下記図の青枠単位でコンポーネント分割しました。あわせてCSS Moduleも採用しました。そのときのメモです。CSSをコンポーネントスコープにする方...","tags":["Gatsby","React","CSSModules"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-css-modules.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/12/","title":"Gatsby2系の新機能","date":"2018-10-12T12:00:00.000Z","excerpt":"なにこれGatsby（React製の静的サイトジェネレーター）が2018年9月に2系にアップデートしたそうです。2系の新機能について、公式ブログ(Announcing Gatsby 2.0.0)を参考に、主要な部分をピックアップして紹介しま...","tags":["Gatsby"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-v2.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/08/","title":"GatsbyでPWA対応","date":"2018-10-08T12:00:00.000Z","excerpt":"なにこれスマホでネイティブアプリっぽいUXを実現するため、GatsbyでPWA対応した時のメモです。以下の4つが可能になりました。前提ServiceWorkerを利用するため、SSL化が必須です。そのためブログはhttpsでアクセスできるよ...","tags":["Gatsby","PWA"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-pwa.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/07/","title":"GatsbyでYouTubeとTwitter埋め込み","date":"2018-10-07T12:00:00.000Z","excerpt":"なにこれブログに良くあるYouTubeやTwitterの埋め込みをGatsbyでやる方法のメモです。こんな感じで埋め込めるようになります。YouTubeyoutube:https://www.youtube.com/embed/z8Kt1g...","tags":["Gatsby","SNS","SER"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/youtube-in-gatsby.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/2018/09/09/","title":"Gatsbyでブログ始めました。","date":"2018-09-09T22:00:00.000Z","excerpt":"ブログをやろうと思った理由Qiitaは、誰得な作業メモは載せられないしはてなブログは、見た目が好きじゃない...一時期、WikiHub日報とかもやっていたんですが、なかなか続かず...そのせいか、やったことを3ヶ月後には忘れてしまう状況がコ...","tags":["Gatsby","ブログ"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/beginning-of-blog.png"}},"relations":[{"node":{"fields":{"slug":"/2018/09/10/","title":"Gatsby製ブログ開設手順","date":"2018-09-10T19:00:00.000Z","excerpt":"ブログ開設手順Gatsbyってなにって状態から30分程度でブログを開設できました。下記にそのときの手順をメモしておきます。0. 前提条件Git、Node、npmは事前にインストールしておいてください。1. ブログのスターターキットを起動Ga...","tags":["Gatsby","ブログ"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/how-to-start-a-blog-with-gatsby.png"}},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"},{"weight":50,"keyword":"ブログ"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/gatsby-related-posts-like-hugo","title":"GatsbyでRelated Content(関連記事)を表示する / Hugoの関連記事機能をGatsbyに移植した","date":"2019-02-09T17:00:00.000+09:00","excerpt":"なにこれブログでよく見かけるUIのひとつに関連記事リンクあります。記事下部に関連記事リンクを設けておくと、記事を読み終えたユーザーが、また別の記事を見てくれる可能性が上がるので、回遊率向上という観点で非常に効果的なUIです。そんな関連記事リ...","tags":["Gatsby","Hugo","golang"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2019/02/gatsby-related-posts-like-hugo.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/how-to-register-your-blog-in-gatsby-showcase","title":"Gatsbyショーケースに自分のWebサイトを登録する方法","date":"2019-01-15T22:00:00.000+09:00","excerpt":"なにこれGatsbyの公式サイトにはショーケースなるものがあって、世の中に公開されているGatsby製のWebサイトを一覧で見ることができます。実はこのショーケース、けっこう簡単に自分のWebサイトを登録できるということに最近気づきました。...","tags":["Gatsby"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2019/01/how-to-register-your-blog-in-gatsby-showcase.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/11/24/","title":"Gatsby themeを使ってみる","date":"2018-11-24T23:40:00.000+09:00","excerpt":"なにこれ下記の記事を読んで、実験的に追加されたGatsby themeで何ができるのかサンプル作って試してみました。そのときのメモです。Gatsby themeはどんな問題を解決してくれるかGatsbyはスキャフォールド機能があって初期導入...","tags":["Gatsby","Gatsby theme"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-theme.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/14/","title":"Gatsbyにおけるコンポーネント分割とCSS Module","date":"2018-10-14T07:00:00.000Z","excerpt":"なにこれGatsbyでブログを作っていて、機能拡張とともにテンプレートが肥大化してきたので、下記図の青枠単位でコンポーネント分割しました。あわせてCSS Moduleも採用しました。そのときのメモです。CSSをコンポーネントスコープにする方...","tags":["Gatsby","React","CSSModules"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-css-modules.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/12/","title":"Gatsby2系の新機能","date":"2018-10-12T12:00:00.000Z","excerpt":"なにこれGatsby（React製の静的サイトジェネレーター）が2018年9月に2系にアップデートしたそうです。2系の新機能について、公式ブログ(Announcing Gatsby 2.0.0)を参考に、主要な部分をピックアップして紹介しま...","tags":["Gatsby"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-v2.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/08/","title":"GatsbyでPWA対応","date":"2018-10-08T12:00:00.000Z","excerpt":"なにこれスマホでネイティブアプリっぽいUXを実現するため、GatsbyでPWA対応した時のメモです。以下の4つが可能になりました。前提ServiceWorkerを利用するため、SSL化が必須です。そのためブログはhttpsでアクセスできるよ...","tags":["Gatsby","PWA"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/gatsby-pwa.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true},{"node":{"fields":{"slug":"/2018/10/07/","title":"GatsbyでYouTubeとTwitter埋め込み","date":"2018-10-07T12:00:00.000Z","excerpt":"なにこれブログに良くあるYouTubeやTwitterの埋め込みをGatsbyでやる方法のメモです。こんな感じで埋め込めるようになります。YouTubeyoutube:https://www.youtube.com/embed/z8Kt1g...","tags":["Gatsby","SNS","SER"],"keywords":["Gatsby"],"thumbnail":"/thumbnail/2018/youtube-in-gatsby.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Gatsby"},{"weight":50,"keyword":"Gatsby"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/41febdc6-bf5d-50b8-a695-3c017b8f766a/","title":"10分でできる！ @ngrx/storeチュートリアル with @ngrx/schematics","date":"2018-07-30T18:01:02+09:00","excerpt":"なにこれAngularで状態管理する方法をざっくり把握するためのチュートリアルです。@ngrx/storeベースの簡単なアプリ（数をカウントするアプリ）を作成します。作るだけなら10分程度で出来上がるので、とりあえず手を動かしてngrxを最...","tags":["Angular","angular-cli","ngrx","Angular6","Qiita"],"keywords":["Angular"],"thumbnail":""},"id":"41febdc6-bf5d-50b8-a695-3c017b8f766a","title":"10分でできる！ @ngrx/storeチュートリアル with @ngrx/schematics","rendered_body":"\n<h2>\n<span id=\"なにこれ\" class=\"fragment\"></span><a href=\"#%E3%81%AA%E3%81%AB%E3%81%93%E3%82%8C\"><i class=\"fa fa-link\"></i></a>なにこれ</h2>\n\n<p>Angularで状態管理する方法をざっくり把握するためのチュートリアルです。<a href=\"http://ngrx.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/store</a>ベースの簡単なアプリ（数をカウントするアプリ）を作成します。作るだけなら10分程度で出来上がるので、とりあえず手を動かしてngrxを最低限を把握したい人向けです。ソースコードも<a href=\"https://github.com/Takumon/ngrx-tutorial/tree/with-ngrx\" rel=\"nofollow noopener\" target=\"_blank\">GitHub</a>に置いているので参考にしてください。<br>\nngrxを使うとボイラープレートが非常に多くなりますが、今回のチュートリアルでは<a href=\"https://github.com/ngrx/platform/tree/master/docs/schematics\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/schematics</a> を使い、ボイラープレートを自動生成することで極力手間を省いています。</p>\n\n<h2>\n<span id=\"アプリの完成イメージ\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E5%AE%8C%E6%88%90%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8\"><i class=\"fa fa-link\"></i></a>アプリの完成イメージ</h2>\n\n<ul>\n<li>\n<code>+</code>ボタンをクリックするとCountが+1される</li>\n<li>\n<code>-</code> ボタンをクリックするとCountが- 1される\n<a href=\"https://camo.qiitausercontent.com/b480b8a4f23b0ad498a61f36f69be9fae9cef250/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f38653666363435652d613733342d646238642d656336622d3134346330666465653162302e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b480b8a4f23b0ad498a61f36f69be9fae9cef250/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f38653666363435652d613733342d646238642d656336622d3134346330666465653162302e676966\" alt=\"counterapp.gif\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/8e6f645e-a734-db8d-ec6b-144c0fdee1b0.gif\"></a>\n</li>\n</ul>\n\n<h2>\n<span id=\"やることやらないこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8%E3%82%84%E3%82%89%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やること/やらないこと</h2>\n\n<ul>\n<li>やる\n\n<ul>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/store/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/store</a>の使い方\n\n<ul>\n<li>Storeの作り方</li>\n<li>Stateの作り方</li>\n<li>Reducerの作り方</li>\n<li>Actionsの作り方</li>\n</ul>\n</li>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/schematics/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/schematics</a>の使い方\n\n<ul>\n<li>オプションなどを使い極力手間を減らす方法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>やらない （下記を理解するには<a href=\"#%E5%8F%82%E8%80%83\">参考</a>のQiitaの記事を見てください。）\n\n<ul>\n<li>状態管理の説明</li>\n<li>Reduxの説明</li>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/router-store/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/router-store</a>の使い方</li>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/entity/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/entity</a>の使い方</li>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/effects/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/effect</a>の使い方<br>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"チュートリアル概要\" class=\"fragment\"></span><a href=\"#%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>チュートリアル概要</h2>\n\n<p>段階を踏んで、ステップごとに動作確認しながら作成していきます。<br>\n各ステップ終了時点のソースコードはGitHubに用意しています。参考にしてください。<br>\n大部分はSchematicsを使ってngコマンドでボイラープレートを自動生成し、メイン部分のみ実装という感じです。</p>\n\n<ol>\n<li>Angularアプリを生成（1分）  ※<a href=\"https://github.com/Takumon/ngrx-tutorial/tree/generated-with-angualr-cli\" rel=\"nofollow noopener\" target=\"_blank\">終了時点のソース</a>\n</li>\n<li>ngrxを使わずにカウント処理実装（2分）※<a href=\"https://github.com/Takumon/ngrx-tutorial/tree/no-ngrx\" rel=\"nofollow noopener\" target=\"_blank\">終了時点のソース</a>\n</li>\n<li>ngrxインストール、初期設定（2分） ※<a href=\"https://github.com/Takumon/ngrx-tutorial/tree/after-ngrx-setting\" rel=\"nofollow noopener\" target=\"_blank\">終了時点のソース</a>\n</li>\n<li>ngrxを使ってカウント処理実装（5分） ※<a href=\"https://github.com/Takumon/ngrx-tutorial/tree/with-ngrx\" rel=\"nofollow noopener\" target=\"_blank\">終了時点のソース</a>\n</li>\n</ol>\n\n<h2>\n<span id=\"前提条件\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6\"><i class=\"fa fa-link\"></i></a>前提条件</h2>\n\n<ul>\n<li>\n<a href=\"https://nodejs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Node.js</a>インストール済み</li>\n<li>\n<a href=\"https://cli.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular CLI</a>グローバルインストール済み</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> npm i <span class=\"nt\">-g</span> @angular/cli\n</pre></div></div>\n\n<ul>\n<li>\n<a href=\"https://cli.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/schematics</a>グローバルインストール済み</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> npm i <span class=\"nt\">-g</span> @ngrx/schematics\n</pre></div></div>\n\n<h2>\n<span id=\"1-angularアプリを生成1分\" class=\"fragment\"></span><a href=\"#1-angular%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E7%94%9F%E6%88%901%E5%88%86\"><i class=\"fa fa-link\"></i></a>1. Angularアプリを生成（1分）</h2>\n\n<ul>\n<li>ng newコマンドを実行します。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng new ngrx-tutorial\n</pre></div></div>\n\n<ul>\n<li>生成されたアプリ配下に移動し、一旦Webアプリを立ち上げてみます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> <span class=\"nb\">cd </span>ngrx-tutorial\n<span class=\"gp\">$</span> ng serve <span class=\"nt\">-o</span>\n</pre></div></div>\n\n<ul>\n<li>ブラウザが起動し下記のような画面が表示されたら成功です。\n<a href=\"https://camo.qiitausercontent.com/f46653279a0efbe1432919aa808f440fc6eb1ede/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35633139633366302d313034612d336566322d613333642d3331356330663061336639662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/f46653279a0efbe1432919aa808f440fc6eb1ede/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35633139633366302d313034612d336566322d613333642d3331356330663061336639662e706e67\" alt=\"スクリーンショット 2018-07-30 1.03.59.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5c19c3f0-104a-3ef2-a33d-315c0f0a3f9f.png\"></a>\n</li>\n</ul>\n\n<h2>\n<span id=\"2-ngrxを使わずにカウント処理実装2分\" class=\"fragment\"></span><a href=\"#2-ngrx%E3%82%92%E4%BD%BF%E3%82%8F%E3%81%9A%E3%81%AB%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E5%87%A6%E7%90%86%E5%AE%9F%E8%A3%852%E5%88%86\"><i class=\"fa fa-link\"></i></a>2. ngrxを使わずにカウント処理実装（2分）</h2>\n\n<p>カウント処理の資産は全て<code>src/app/counter</code>フォルダ配下に作成します。<br>\nまずはコマンドラインからボイラープレートを作成し、その後カウント処理を実装します。</p>\n\n<h3>\n<span id=\"ボイラープレート作成\" class=\"fragment\"></span><a href=\"#%E3%83%9C%E3%82%A4%E3%83%A9%E3%83%BC%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>ボイラープレート作成</h3>\n\n<ul>\n<li>カウント処理関連資産をまとめるモジュールを作成します。\n\n<ul>\n<li>このモジュールをアプリ全体のモジュールに登録するため<code>--module</code>オプションを指定します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g module counter <span class=\"nt\">--module</span><span class=\"o\">=</span>app.module.ts\n</pre></div></div>\n\n<ul>\n<li>カウント処理用のコンポーネントを作成します。\n\n<ul>\n<li>上記で作成したモジュールにコンポーネントを登録するため<code>--module</code>オプションを指定します。</li>\n<li>最終的にアプリ全体のモジュールにコンポーネントを登録するため<code>--export</code>オプションを指定します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g component counter <span class=\"nt\">--module</span><span class=\"o\">=</span>counter/counter.module.ts <span class=\"nt\">--export</span>\n</pre></div></div>\n\n<ul>\n<li>\n<code>app.component.html</code>修正し、作成したカウント処理用のコンポーネントを呼び出すようにします。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.html</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;app-counter&gt;&lt;/app-counter&gt;</span>\n</pre></div>\n</div>\n\n<ul>\n<li>一旦ここまででWebアプリを立ち上げてみます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng serve <span class=\"nt\">-o</span>\n</pre></div></div>\n\n<ul>\n<li>ブラウザが起動し、下記画面が表示されます。開発者ツールでエラーがなければ成功です。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/6ed3cc13498f56621ca94113a6eacdc34949e17f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37373261373530312d333461372d336566312d363636362d6431336537393338326365362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/6ed3cc13498f56621ca94113a6eacdc34949e17f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37373261373530312d333461372d336566312d363636362d6431336537393338326365362e706e67\" alt=\"スクリーンショット 2018-07-30 1.06.30.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/772a7501-34a7-3ef1-6666-d13e79382ce6.png\"></a></p>\n\n<h3>\n<span id=\"処理実装\" class=\"fragment\"></span><a href=\"#%E5%87%A6%E7%90%86%E5%AE%9F%E8%A3%85\"><i class=\"fa fa-link\"></i></a>処理実装</h3>\n\n<ul>\n<li>カウント用コンポーネントで実際の処理を記述します。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/counter.component.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span><span class=\"p\">,</span> <span class=\"nx\">OnInit</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-counter'</span><span class=\"p\">,</span>\n  <span class=\"na\">templateUrl</span><span class=\"p\">:</span> <span class=\"s1\">'./counter.component.html'</span><span class=\"p\">,</span>\n  <span class=\"na\">styleUrls</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'./counter.component.css'</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">CounterComponent</span> <span class=\"kr\">implements</span> <span class=\"nx\">OnInit</span> <span class=\"p\">{</span>\n  <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n  <span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">increment</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">decrement</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">count</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/counter.component.html</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;button</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">increment</span><span class=\"err\">()\"</span><span class=\"nt\">&gt;</span>+<span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">decrement</span><span class=\"err\">()\"</span><span class=\"nt\">&gt;</span>-<span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"nt\">&lt;div&gt;</span>Count: {{count}}<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n</div>\n\n<ul>\n<li>ここまででWebアプリを立ち上げてみます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng serve <span class=\"nt\">-o</span>\n</pre></div></div>\n\n<ul>\n<li>ブラウザが起動し下記画面が表示されます。<code>+</code>,<code>-</code>ボタンをクリックすると数字が増えたり減ったりした、開発者ツールでもエラーがなければ成功です。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" alt=\"スクリーンショット 2018-07-30 0.59.12.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png\"></a></p>\n\n<h2>\n<span id=\"3-ngrxインストール初期設定2分\" class=\"fragment\"></span><a href=\"#3-ngrx%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A2%E5%88%86\"><i class=\"fa fa-link\"></i></a>3. ngrxインストール、初期設定（2分）</h2>\n\n<p>@ngrx/storeをアプリに導入し、初期設定をします。</p>\n\n<ul>\n<li>下記ライブラリをインストールします。\n\n<ul>\n<li>\n<code>@ngrx/schematics</code>\n\n<ul>\n<li>Angualr CLIでngrxの雛形を作るためのライブラリ</li>\n</ul>\n</li>\n<li>\n<code>@ngrx/store</code>\n\n<ul>\n<li>ngrxでStore,Reducer,Actionを使うためのライブラリ</li>\n</ul>\n</li>\n<li>\n<code>@ngrx/store-devtools</code>\n\n<ul>\n<li>強力なデバッカを使えるようにするためのライブラリ</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> npm i <span class=\"nt\">-D</span> @ngrx/schematics\n<span class=\"gp\">$</span> npm i <span class=\"nt\">-s</span> @ngrx/store\n<span class=\"gp\">$</span> npm i <span class=\"nt\">-s</span> @ngrx/store-devtools\n</pre></div></div>\n\n<p>*<code>@ngrx/schematics</code>をデフォルトのSchematicsに追加します（コマンドラインでngrxのボイラープレート生成時に<code>@ngrx/schematics</code>の指定を省略できるようにするためです。）</p>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng config cli.defaultCollection @ngrx/schematics\n</pre></div></div>\n\n<ul>\n<li>上記を実行すると、<code>angular.json</code>にこのような設定が追加されます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">angular.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\">  </span><span class=\"s2\">\"defaultProject\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ngrx-tutorial\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"cli\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"defaultCollection\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"@ngrx/schematics\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>ルートのStoreを作成します。\n\n<ul>\n<li>\n<code>src/app/state</code>配下に生成したいので<code>--statePath</code>オプションを指定します。</li>\n<li>アプリ全体のモジュールに登録したいので<code>--module</code>オプションを指定します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g store state <span class=\"nt\">--statePath</span> state <span class=\"nt\">--root</span> <span class=\"nt\">--module</span> app.module.ts\n</pre></div></div>\n\n<ul>\n<li>上記コマンドで更新した<code>src/app/app.module.ts</code>で<code>environment</code>のimport文のパスでエラーが出ている場合は修正してください。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">app/src/app.module.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"gd\">- import { environment } from '../../environments/environment';\n</span><span class=\"gi\">+ import { environment } from '../environments/environment';\n</span></pre></div>\n</div>\n\n<ul>\n<li>ここまででWebアプリを立ち上げてみます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng serve <span class=\"nt\">-o</span>\n</pre></div></div>\n\n<ul>\n<li>手順2の動作確認時と同様の挙動になります、開発者ツールでもエラーがなければ成功です。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" alt=\"スクリーンショット 2018-07-30 0.59.12.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png\"></a></p>\n\n<h2>\n<span id=\"4-ngrxを使ってカウント処理実装5分\" class=\"fragment\"></span><a href=\"#4-ngrx%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E5%87%A6%E7%90%86%E5%AE%9F%E8%A3%855%E5%88%86\"><i class=\"fa fa-link\"></i></a>4. ngrxを使ってカウント処理実装（5分）</h2>\n\n<p>ここからは実際にStore、Reducer、Actionを作成し、カウント処理の値をStoreに移行します。<br>\nここで作成する資産はカウンター処理に閉じたものなので、<code>src/app/counter/state</code>配下に作成します。<br>\nまた<code>@ngrx/schemetics</code>のデフォルトではReducer、Actionなどの資産が、役割ごとにフォルダ分けされてしまいますが、１フォルダに集約したほうがソースが修正しやすいので、今回は全て<code>src/app/counter/state</code>の直下に作成します。</p>\n\n<h3>\n<span id=\"ボイラープレート生成\" class=\"fragment\"></span><a href=\"#%E3%83%9C%E3%82%A4%E3%83%A9%E3%83%BC%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E7%94%9F%E6%88%90\"><i class=\"fa fa-link\"></i></a>ボイラープレート生成</h3>\n\n<ul>\n<li>Store\n\n<ul>\n<li>\n<code>src/app/counter/state</code>直下に作成するため<code>--statePath</code>オプションを指定します。</li>\n<li>カウント処理関連モジュールに登録したいので<code>--module</code>オプションを指定します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g store counter/counter <span class=\"nt\">--statePath</span> state <span class=\"nt\">--module</span> counter.module.ts\n</pre></div></div>\n\n<ul>\n<li>Reducer\n\n<ul>\n<li>上記で作成したStoreに本Reducerを登録したいため<code>--reducers</code>オプションを指定します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g reducer counter/state/counter <span class=\"nt\">--reducers</span> index.ts\n</pre></div></div>\n\n<ul>\n<li>Action\n\n<ul>\n<li>\n<code>src/app/counter/state</code>直下に作成するため<code>--flat</code>オプションを登録します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g action counter/state/counter <span class=\"nt\">--flat</span>\n</pre></div></div>\n\n<p>※この時点ではコンパイルエラーがでますので、動作確認はできません。そのまま次に進みます。</p>\n\n<h2>\n<span id=\"処理実装-1\" class=\"fragment\"></span><a href=\"#%E5%87%A6%E7%90%86%E5%AE%9F%E8%A3%85-1\"><i class=\"fa fa-link\"></i></a>処理実装</h2>\n\n<p>依存関係の都合でボイラープレートとは逆順で実装していきます。</p>\n\n<h3>\n<span id=\"action\" class=\"fragment\"></span><a href=\"#action\"><i class=\"fa fa-link\"></i></a>Action</h3>\n\n<p>ボイラープレート生成時から下記のように修正します。<br>\n※コメントはコードの説明なので無視して実装してください。</p>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/state/counter.actions.ts</span></div>\n<div class=\"highlight\"><pre>import { Action } from '@ngrx/store';\n\nexport enum CounterActionTypes {\n// Actionごとに型を定義します。\n<span class=\"gd\">-  LoadCounters = '[Counter] Load Counters'\n</span><span class=\"gi\">+  CountIncrement = '[Counter] Increment Count',\n+  CountDecrement = '[Counter] Decrement Count'\n</span>}\n\n// Actionごとに@ngrx.storeのActionをインプリしたクラスを作成します。\n// 複雑な処理をする場合はコンストラクタ引数をとりますが、\n// 本チュートリアルでは簡単のため引数なしにしています。\n<span class=\"gd\">- export class Counter implements Action {\n-   readonly type = CounterActionTypes.LoadCounters;\n- }\n</span><span class=\"gi\">+ export class CountIncrement implements Action {\n+   readonly type = CounterActionTypes.CountIncrement;\n+   public constructor() {}\n+ }\n+ \n+ export class CountDecrement implements Action {\n+   readonly type = CounterActionTypes.CountDecrement;\n+   public constructor() {}\n+ }\n</span>\n\n// 上記で定義したActionクラスを集約した型を定義します。Reducerで使うためです。\n<span class=\"gd\">- export type CounterActions = LoadCounters;\n</span><span class=\"gi\">+ export type CounterActions = CountIncrement | CountDecrement;\n</span></pre></div>\n</div>\n\n<h2>\n<span id=\"reducer作成\" class=\"fragment\"></span><a href=\"#reducer%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>Reducer作成</h2>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/state/counter.reducer.ts</span></div>\n<div class=\"highlight\"><pre>import { Action } from '@ngrx/store';\n<span class=\"gi\">+ import { CounterActionTypes } from './counter.actions';\n</span>\n\nexport interface State {\n// カウンター処理に置けるStateを定義します。\n<span class=\"gi\">+   count: number;\n</span>}\n\nexport const initialState: State = {\n// カウンター処理に置けるStateの初期値を定義します。\n<span class=\"gi\">+   count: 0\n</span>};\n\n\nexport function reducer(state = initialState, action: Action): State {\n  switch (action.type) {\n// 引数として受け取ったActionの型に応じて処理を振り分けます\n// ここではカウンター処理に関連するアクションのみ拾って、他はStateをそのまま返します。\n<span class=\"gi\">+     case CounterActionTypes.CountIncrement:\n</span>// Stateを変更する場合は、Stateがイミュータブルになるように元のStateには変更を加えず\n// Object.assingで新規オブジェクトを作るようにします。\n<span class=\"gi\">+       return Object.assign({}, { ...state, count : state.count + 1 });\n+     case CounterActionTypes.CountDecrement:\n+       return Object.assign({}, { ...state, count : state.count - 1 });\n</span>    default:\n      return state;\n  }\n}\n\n// コンポーネントでStateのCountを取得するための関数を定義します。\n// Storeの方にも定義しますが、ここでは本ファイルで定義している\n// Stateのプロパティに関連する処理のみ定義します。\n<span class=\"gi\">+ export const getCount = (state: State) =&gt; state.count;\n</span></pre></div>\n</div>\n\n<ul>\n<li>Store</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/state/index.ts</span></div>\n<div class=\"highlight\"><pre>import {\n  ActionReducerMap,\n  createFeatureSelector,\n  createSelector,\n  MetaReducer\n} from '@ngrx/store';\n// ng gコマンド生成時は相対パスがずれている可能性があるため\n// その場合は修正する\n<span class=\"gd\">- import { environment } from '../../environments/environment';\n</span><span class=\"gi\">+ import { environment } from '../../../environments/environment';\n</span>import * as fromCounter from './counter.reducer';\n\nexport interface State {\n\n  counter: fromCounter.State;\n}\n\nexport const reducers: ActionReducerMap&lt;State&gt; = {\n\n  counter: fromCounter.reducer,\n};\n\n\nexport const metaReducers: MetaReducer&lt;State&gt;[] = !environment.production ? [] : [];\n\n// コンポーネントでStateのプロパティを取得するための関数を定義します。\n// 複数コンポーネントで使う度に定義するのは冗長なのでココで共通的に定義します。\n<span class=\"gi\">+ export const getCounterFeatureState = createFeatureSelector&lt;State&gt;('counter');\n+ export const getCounter = createSelector(getCounterFeatureState, s =&gt; s.counter);\n+ export const getCount = createSelector(getCounter, fromCounter.getCount);\n</span></pre></div>\n</div>\n\n<ul>\n<li>Component</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/counter.component.ts</span></div>\n<div class=\"highlight\"><pre>import { Component, OnInit } from '@angular/core';\n<span class=\"gi\">+ import { Observable } from 'rxjs';\n+ import { Store } from '@ngrx/store';\n</span>\n<span class=\"gi\">+ import * as CounterReducer from './state/counter.reducer';\n+ import * as CounterActions from './state/counter.actions';\n+ import { getCount } from './state';\n</span>\n<span class=\"gu\">@Component({\n</span>  selector: 'app-counter',\n  templateUrl: './counter.component.html',\n  styleUrls: ['./counter.component.css']\n})\nexport class CounterComponent implements OnInit {\n// Storeでの値変更を順次受け付けれるように型をObservableに変更します\n<span class=\"gd\">-   count = 0;\n</span><span class=\"gi\">+   count$: Observable&lt;number&gt;;\n</span>\n// Storeをインジェクションします\n<span class=\"gd\">-   constructor() { }\n</span><span class=\"gi\">+   constructor(private store: Store&lt;CounterReducer.State&gt;) {\n</span>// Storeからカウンタを取得します\n<span class=\"gi\">+     this.count$ = store.select(getCount);\n+  }\n</span>\n  ngOnInit() {\n  }\n\n  increment() {\n// インクリメントの実処理はカウンタのReducerに任せるので\n// ここではActionをdispatchするだけです。\n<span class=\"gd\">-     this.count = this.count + 1;\n</span><span class=\"gi\">+     this.store.dispatch(new CounterActions.CountIncrement());\n</span>  }\n\n  decrement() {\n<span class=\"gd\">-     this.count = this.count - 1;\n</span><span class=\"gi\">+     this.store.dispatch(new CounterActions.CountDecrement());\n</span>  }\n\n}\n</pre></div>\n</div>\n\n<ul>\n<li>ConponentのHTML</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/counter.component.html</span></div>\n<div class=\"highlight\"><pre>&lt;button (click)=\"increment()\"&gt;+&lt;/button&gt;\n&lt;button (click)=\"decrement()\"&gt;-&lt;/button&gt;\n&lt;!-- 変数名と型が変わったのでHTMLも若干修正します --&gt;\n<span class=\"gd\">- &lt;div&gt;Count: {{count }}&lt;/div&gt;\n</span><span class=\"gi\">+ &lt;div&gt;Count: {{count$ | async }}&lt;/div&gt;\n</span></pre></div>\n</div>\n\n<ul>\n<li>Webアプリを立ち上げてみます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng serve <span class=\"nt\">-o</span>\n</pre></div></div>\n\n<ul>\n<li>開発者ツールなどで全くエラーが出ていなければ成功です。見た目は変わっていませんが、Countは<code>@ngrx/store</code>で管理されるようになっています。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" alt=\"スクリーンショット 2018-07-30 0.59.12.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png\"></a></p>\n\n<h2>\n<span id=\"補足ストアとストア登録方法\" class=\"fragment\"></span><a href=\"#%E8%A3%9C%E8%B6%B3%E3%82%B9%E3%83%88%E3%82%A2%E3%81%A8%E3%82%B9%E3%83%88%E3%82%A2%E7%99%BB%E9%8C%B2%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>補足：ストアとストア登録方法</h2>\n\n<p>ストアとストア登録処理はボイラープレートで生成するのでココで改めて説明します。</p>\n\n<p><strong>まずはルートのストアです。</strong><br>\nストアは<code>src/app/state/index.ts</code>に作成されます。<br>\n中身を見るとわかりますが、実態はReducerを集約したActionReducerMapです。<br>\nReducerを新しく作成した時は、このマップにどんどん追加していきます。</p>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/state/index.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span>\n  <span class=\"nx\">ActionReducer</span><span class=\"p\">,</span>\n  <span class=\"nx\">ActionReducerMap</span><span class=\"p\">,</span>\n  <span class=\"nx\">createFeatureSelector</span><span class=\"p\">,</span>\n  <span class=\"nx\">createSelector</span><span class=\"p\">,</span>\n  <span class=\"nx\">MetaReducer</span>\n<span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@ngrx/store'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">environment</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../../environments/environment'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kr\">interface</span> <span class=\"nx\">State</span> <span class=\"p\">{</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">reducers</span><span class=\"p\">:</span> <span class=\"nx\">ActionReducerMap</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ココにReducerが追加されていきます。</span>\n  <span class=\"c1\">// 今回のチュートリアルではルートのストアに１つもReducerを定義していないので空っぽです。</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">metaReducers</span><span class=\"p\">:</span> <span class=\"nx\">MetaReducer</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"o\">&gt;</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"o\">!</span><span class=\"nx\">environment</span><span class=\"p\">.</span><span class=\"nx\">production</span> <span class=\"p\">?</span> <span class=\"p\">[]</span> <span class=\"p\">:</span> <span class=\"p\">[];</span>\n\n</pre></div>\n</div>\n\n<p>ストアをモジュールに登録するには下記のように<code>StoreModule.forRoot</code>を使います(ボイラープレートでやってくれます)</p>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/app.module.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"c1\">// ・・・</span>\n  <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"c1\">// ・・・</span>\n    <span class=\"nx\">StoreModule</span><span class=\"p\">.</span><span class=\"nx\">forRoot</span><span class=\"p\">(</span><span class=\"nx\">reducers</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">metaReducers</span> <span class=\"p\">}),</span>\n    <span class=\"o\">!</span><span class=\"nx\">environment</span><span class=\"p\">.</span><span class=\"nx\">production</span> <span class=\"p\">?</span> <span class=\"nx\">StoreDevtoolsModule</span><span class=\"p\">.</span><span class=\"nx\">instrument</span><span class=\"p\">()</span> <span class=\"p\">:</span> <span class=\"p\">[]</span>\n    <span class=\"c1\">// ・・・</span>\n  <span class=\"p\">],</span>\n  <span class=\"c1\">// ・・・</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppModule</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<p><strong>次にカウンタのストアに関してです。</strong><br>\nこちらもルートの場合とほぼ同じです。</p>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/state/index.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"c1\">// ・・・</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">reducers</span><span class=\"p\">:</span> <span class=\"nx\">ActionReducerMap</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// カウンタのReducerをマップに登録しています。</span>\n  <span class=\"na\">counter</span><span class=\"p\">:</span> <span class=\"nx\">fromCounter</span><span class=\"p\">.</span><span class=\"nx\">reducer</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">metaReducers</span><span class=\"p\">:</span> <span class=\"nx\">MetaReducer</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"o\">&gt;</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"o\">!</span><span class=\"nx\">environment</span><span class=\"p\">.</span><span class=\"nx\">production</span> <span class=\"p\">?</span> <span class=\"p\">[]</span> <span class=\"p\">:</span> <span class=\"p\">[];</span>\n<span class=\"c1\">// ・・・</span>\n</pre></div>\n</div>\n\n<p>ただ登録は<code>StoreModule.forFeature</code>を使います。<br>\nこのメソッドは、機能毎に状態管理する時に使うもので、ルートのストアに指定した名前で登録されます。使う時になったら遅延ロードしてくれる機能を持っています。</p>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/counter.module.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"c1\">// ・・・</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">fromCounter</span> <span class=\"k\">from</span> <span class=\"s1\">'./state'</span><span class=\"p\">;</span>\n<span class=\"c1\">// ・・・</span>\n<span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"c1\">// ・・・</span>\n    <span class=\"c1\">// アプリ全体のストアにcounterという名前で登録します</span>\n    <span class=\"nx\">StoreModule</span><span class=\"p\">.</span><span class=\"nx\">forFeature</span><span class=\"p\">(</span><span class=\"s1\">'counter'</span><span class=\"p\">,</span> <span class=\"nx\">fromCounter</span><span class=\"p\">.</span><span class=\"nx\">reducers</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">metaReducers</span><span class=\"p\">:</span> <span class=\"nx\">fromCounter</span><span class=\"p\">.</span><span class=\"nx\">metaReducers</span> <span class=\"p\">})</span>\n    <span class=\"c1\">// ・・・</span>\n  <span class=\"p\">],</span>\n  <span class=\"c1\">// ・・・</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">CounterModule</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>以上で<code>@ngrx/schematics</code>を使った<code>@ngrx/store</code>のチュートリアルは終了です。<br>\n<code>ngrx</code>ライブラリは他にも<code>@ngrx/router-store</code>、<code>@ngrx/entity</code>、<code>@ngrx/effect</code>があるので、<br>\n今回のアプリをベースに拡張し、理解を深めてみるのも良いかもしれません。</p>\n\n<p>AngularはVue.jsなどと比較するとボイラープレートが多くなってしまいます。<br>\nしかし、ソースコード自動生成機能が充実しているので、けっこう便利なフレームワークです！<br>\nあまり周りでAngular使ってる人がいなくて寂しいのですが、、、、皆さん是非Angular使いましょう！</p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<ul>\n<li>GitHub\n\n<ul>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/store/README.md#ngrxstore\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/store</a>\n\n<ul>\n<li>公式ページ。サンプルは少し古いですが、ドキュメントは充実しています。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/schematics/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/schematics</a>\n\n<ul>\n<li>各リンクに行くと、コマンドのオプションの説明などが記載されています。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Medium\n\n<ul>\n<li>\n<a href=\"https://blog.nrwl.io/managing-state-in-angular-applications-22b75ef5625f\" rel=\"nofollow noopener\" target=\"_blank\">Managing State in Angular Applications</a>\n\n<ul>\n<li>Angularで状態管理する時のベストプラクティスを検討し、最終的に@ngrx/storeを紹介している記事です。ソースコードもGitHubにあり、大変参考になります。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Qiita\n\n<ul>\n<li>\n<a href=\"https://qiita.com/puku0x/items/0a8e7224761dc549bd06\" id=\"reference-55d4d1f3588dbe22005a\">@ngrx/storeと@ngrx/effectsの使い方</a>\n\n<ul>\n<li>GitHubに<a href=\"https://github.com/puku0x/ngrx-todo\" rel=\"nofollow noopener\" target=\"_blank\">サンプル</a>もありコード例が多く大変参考になりました。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://qiita.com/musou1500/items/8003c4a3f2b2e80d919f\" id=\"reference-0b88f55e95af744439cc\">@ngrx/schematicsを触ってみる</a>\n\n<ul>\n<li>\n<code>@ngrx/schematics</code>の使い方が網羅されており参考になりました。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://qiita.com/gen2-gk/items/5e5c5b81243def8edc2c#ngrx-%E9%96%A2%E9%80%A3%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AF1%E3%81%A4%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AB%E3%81%BE%E3%81%A8%E3%82%81%E3%82%8B\" id=\"reference-00af0c3c5f2c814f6e6e\">ngrxでハマったポイント</a>\n\n<ul>\n<li>ngrx関連資産をstoreフォルダ配下に集約するという知見はココを参考にさせていただきました。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://qiita.com/kouMatsumoto/items/c8297466c1824953632f\" id=\"reference-2bdc06375583d7c16351\">ngrx紹介</a>\n\n<ul>\n<li>ngrxを知るきっかけになった記事です。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","body":"## なにこれ\nAngularで状態管理する方法をざっくり把握するためのチュートリアルです。[@ngrx/store](http://ngrx.github.io/)ベースの簡単なアプリ（数をカウントするアプリ）を作成します。作るだけなら10分程度で出来上がるので、とりあえず手を動かしてngrxを最低限を把握したい人向けです。ソースコードも[GitHub](https://github.com/Takumon/ngrx-tutorial/tree/with-ngrx)に置いているので参考にしてください。\nngrxを使うとボイラープレートが非常に多くなりますが、今回のチュートリアルでは[@ngrx/schematics](https://github.com/ngrx/platform/tree/master/docs/schematics) を使い、ボイラープレートを自動生成することで極力手間を省いています。\n\n\n## アプリの完成イメージ\n* `+`ボタンをクリックするとCountが+1される\n* `-` ボタンをクリックするとCountが- 1される\n![counterapp.gif](https://qiita-image-store.s3.amazonaws.com/0/49915/8e6f645e-a734-db8d-ec6b-144c0fdee1b0.gif)\n\n## やること/やらないこと\n* やる\n    * [@ngrx/store](https://github.com/ngrx/platform/blob/master/docs/store/README.md)の使い方\n        * Storeの作り方\n        * Stateの作り方\n        * Reducerの作り方\n        * Actionsの作り方\n    * [@ngrx/schematics](https://github.com/ngrx/platform/blob/master/docs/schematics/README.md)の使い方\n        * オプションなどを使い極力手間を減らす方法\n* やらない （下記を理解するには[参考](#参考)のQiitaの記事を見てください。）\n    * 状態管理の説明\n    * Reduxの説明\n    * [@ngrx/router-store](https://github.com/ngrx/platform/blob/master/docs/router-store/README.md)の使い方\n    * [@ngrx/entity](https://github.com/ngrx/platform/blob/master/docs/entity/README.md)の使い方\n    * [@ngrx/effect](https://github.com/ngrx/platform/blob/master/docs/effects/README.md)の使い方  \n    \n\n\n## チュートリアル概要\n段階を踏んで、ステップごとに動作確認しながら作成していきます。\n各ステップ終了時点のソースコードはGitHubに用意しています。参考にしてください。\n大部分はSchematicsを使ってngコマンドでボイラープレートを自動生成し、メイン部分のみ実装という感じです。\n\n1. Angularアプリを生成（1分）  ※[終了時点のソース](https://github.com/Takumon/ngrx-tutorial/tree/generated-with-angualr-cli)\n1. ngrxを使わずにカウント処理実装（2分）※[終了時点のソース](https://github.com/Takumon/ngrx-tutorial/tree/no-ngrx)\n1. ngrxインストール、初期設定（2分） ※[終了時点のソース](https://github.com/Takumon/ngrx-tutorial/tree/after-ngrx-setting)\n1. ngrxを使ってカウント処理実装（5分） ※[終了時点のソース](https://github.com/Takumon/ngrx-tutorial/tree/with-ngrx)\n\n\n\n\n## 前提条件\n* [Node.js](https://nodejs.org/ja/)インストール済み\n* [Angular CLI](https://cli.angular.io/)グローバルインストール済み\n\n```terminal\n$ npm i -g @angular/cli\n```\n\n* [@ngrx/schematics](https://cli.angular.io/)グローバルインストール済み\n\n```terminal\n$ npm i -g @ngrx/schematics\n```\n\n\n## 1. Angularアプリを生成（1分）\n\n* ng newコマンドを実行します。\n\n```terminal\n$ ng new ngrx-tutorial\n```\n\n* 生成されたアプリ配下に移動し、一旦Webアプリを立ち上げてみます。\n\n```terminal\n$ cd ngrx-tutorial\n$ ng serve -o\n```\n\n* ブラウザが起動し下記のような画面が表示されたら成功です。\n![スクリーンショット 2018-07-30 1.03.59.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5c19c3f0-104a-3ef2-a33d-315c0f0a3f9f.png)\n\n\n\n## 2. ngrxを使わずにカウント処理実装（2分）\nカウント処理の資産は全て`src/app/counter`フォルダ配下に作成します。\nまずはコマンドラインからボイラープレートを作成し、その後カウント処理を実装します。\n### ボイラープレート作成\n\n\n* カウント処理関連資産をまとめるモジュールを作成します。\n    * このモジュールをアプリ全体のモジュールに登録するため`--module`オプションを指定します。\n\n```terminal\n$ ng g module counter --module=app.module.ts\n```\n\n\n* カウント処理用のコンポーネントを作成します。\n    * 上記で作成したモジュールにコンポーネントを登録するため`--module`オプションを指定します。\n    * 最終的にアプリ全体のモジュールにコンポーネントを登録するため`--export`オプションを指定します。\n\n```terminal\n$ ng g component counter --module=counter/counter.module.ts --export\n```\n\n\n* `app.component.html`修正し、作成したカウント処理用のコンポーネントを呼び出すようにします。\n\n```html:app.component.html\n<app-counter></app-counter>\n```\n\n* 一旦ここまででWebアプリを立ち上げてみます。\n\n```terminal\n$ ng serve -o\n```\n\n* ブラウザが起動し、下記画面が表示されます。開発者ツールでエラーがなければ成功です。\n\n![スクリーンショット 2018-07-30 1.06.30.png](https://qiita-image-store.s3.amazonaws.com/0/49915/772a7501-34a7-3ef1-6666-d13e79382ce6.png)\n\n\n### 処理実装\n\n* カウント用コンポーネントで実際の処理を記述します。\n\n```ts:src/app/counter/counter.component.ts\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-counter',\n  templateUrl: './counter.component.html',\n  styleUrls: ['./counter.component.css']\n})\nexport class CounterComponent implements OnInit {\n  count = 0;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  increment() {\n    this.count = this.count + 1;\n  }\n\n  decrement() {\n    this.count = this.count - 1;\n  }\n\n}\n\n```\n\n\n```html:src/app/counter/counter.component.html\n<button (click)=\"increment()\">+</button>\n<button (click)=\"decrement()\">-</button>\n<div>Count: {{count}}</div>\n```\n\n\n* ここまででWebアプリを立ち上げてみます。\n\n```terminal\n$ ng serve -o\n```\n\n* ブラウザが起動し下記画面が表示されます。`+`,`-`ボタンをクリックすると数字が増えたり減ったりした、開発者ツールでもエラーがなければ成功です。\n\n![スクリーンショット 2018-07-30 0.59.12.png](https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png)\n\n\n## 3. ngrxインストール、初期設定（2分）\n@ngrx/storeをアプリに導入し、初期設定をします。\n\n\n* 下記ライブラリをインストールします。\n    * `@ngrx/schematics`\n        * Angualr CLIでngrxの雛形を作るためのライブラリ\n    * `@ngrx/store`\n        * ngrxでStore,Reducer,Actionを使うためのライブラリ\n    * `@ngrx/store-devtools`\n        * 強力なデバッカを使えるようにするためのライブラリ\n\n```terminal\n$ npm i -D @ngrx/schematics\n$ npm i -s @ngrx/store\n$ npm i -s @ngrx/store-devtools\n```\n\n\n*`@ngrx/schematics`をデフォルトのSchematicsに追加します（コマンドラインでngrxのボイラープレート生成時に`@ngrx/schematics`の指定を省略できるようにするためです。）\n\n```terminal\n$ ng config cli.defaultCollection @ngrx/schematics\n```\n\n* 上記を実行すると、`angular.json`にこのような設定が追加されます。\n\n```json:angular.json\n  \"defaultProject\": \"ngrx-tutorial\",\n  \"cli\": {\n    \"defaultCollection\": \"@ngrx/schematics\"\n  }\n```\n\n* ルートのStoreを作成します。\n    * `src/app/state`配下に生成したいので`--statePath`オプションを指定します。\n    * アプリ全体のモジュールに登録したいので`--module`オプションを指定します。\n\n```terminal\n$ ng g store state --statePath state --root --module app.module.ts\n```\n\n* 上記コマンドで更新した`src/app/app.module.ts`で`environment`のimport文のパスでエラーが出ている場合は修正してください。\n\n```diff:app/src/app.module.ts\n- import { environment } from '../../environments/environment';\n+ import { environment } from '../environments/environment';\n```\n\n* ここまででWebアプリを立ち上げてみます。\n\n```terminal\n$ ng serve -o\n```\n\n* 手順2の動作確認時と同様の挙動になります、開発者ツールでもエラーがなければ成功です。\n\n![スクリーンショット 2018-07-30 0.59.12.png](https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png)\n\n\n## 4. ngrxを使ってカウント処理実装（5分）\nここからは実際にStore、Reducer、Actionを作成し、カウント処理の値をStoreに移行します。\nここで作成する資産はカウンター処理に閉じたものなので、`src/app/counter/state`配下に作成します。\nまた`@ngrx/schemetics`のデフォルトではReducer、Actionなどの資産が、役割ごとにフォルダ分けされてしまいますが、１フォルダに集約したほうがソースが修正しやすいので、今回は全て`src/app/counter/state`の直下に作成します。\n\n\n### ボイラープレート生成\n\n\n* Store\n    * `src/app/counter/state`直下に作成するため`--statePath`オプションを指定します。\n    * カウント処理関連モジュールに登録したいので`--module`オプションを指定します。\n\n```terminal\n$ ng g store counter/counter --statePath state --module counter.module.ts\n```\n\n* Reducer\n    * 上記で作成したStoreに本Reducerを登録したいため`--reducers`オプションを指定します。\n\n```terminal\n$ ng g reducer counter/state/counter --reducers index.ts\n```\n\n* Action\n    * `src/app/counter/state`直下に作成するため`--flat`オプションを登録します。\n\n```terminal\n$ ng g action counter/state/counter --flat\n``` \n\n※この時点ではコンパイルエラーがでますので、動作確認はできません。そのまま次に進みます。\n\n\n## 処理実装\n依存関係の都合でボイラープレートとは逆順で実装していきます。\n\n### Action\nボイラープレート生成時から下記のように修正します。\n※コメントはコードの説明なので無視して実装してください。\n\n```diff:src/app/counter/state/counter.actions.ts\nimport { Action } from '@ngrx/store';\n\nexport enum CounterActionTypes {\n// Actionごとに型を定義します。\n-  LoadCounters = '[Counter] Load Counters'\n+  CountIncrement = '[Counter] Increment Count',\n+  CountDecrement = '[Counter] Decrement Count'\n}\n\n// Actionごとに@ngrx.storeのActionをインプリしたクラスを作成します。\n// 複雑な処理をする場合はコンストラクタ引数をとりますが、\n// 本チュートリアルでは簡単のため引数なしにしています。\n- export class Counter implements Action {\n-   readonly type = CounterActionTypes.LoadCounters;\n- }\n+ export class CountIncrement implements Action {\n+   readonly type = CounterActionTypes.CountIncrement;\n+   public constructor() {}\n+ }\n+ \n+ export class CountDecrement implements Action {\n+   readonly type = CounterActionTypes.CountDecrement;\n+   public constructor() {}\n+ }\n\n\n// 上記で定義したActionクラスを集約した型を定義します。Reducerで使うためです。\n- export type CounterActions = LoadCounters;\n+ export type CounterActions = CountIncrement | CountDecrement;\n```\n\n\n## Reducer作成\n\n```diff:src/app/counter/state/counter.reducer.ts\nimport { Action } from '@ngrx/store';\n+ import { CounterActionTypes } from './counter.actions';\n\n\nexport interface State {\n// カウンター処理に置けるStateを定義します。\n+   count: number;\n}\n\nexport const initialState: State = {\n// カウンター処理に置けるStateの初期値を定義します。\n+   count: 0\n};\n\n\nexport function reducer(state = initialState, action: Action): State {\n  switch (action.type) {\n// 引数として受け取ったActionの型に応じて処理を振り分けます\n// ここではカウンター処理に関連するアクションのみ拾って、他はStateをそのまま返します。\n+     case CounterActionTypes.CountIncrement:\n// Stateを変更する場合は、Stateがイミュータブルになるように元のStateには変更を加えず\n// Object.assingで新規オブジェクトを作るようにします。\n+       return Object.assign({}, { ...state, count : state.count + 1 });\n+     case CounterActionTypes.CountDecrement:\n+       return Object.assign({}, { ...state, count : state.count - 1 });\n    default:\n      return state;\n  }\n}\n\n// コンポーネントでStateのCountを取得するための関数を定義します。\n// Storeの方にも定義しますが、ここでは本ファイルで定義している\n// Stateのプロパティに関連する処理のみ定義します。\n+ export const getCount = (state: State) => state.count;\n```\n\n* Store\n\n```diff:src/app/counter/state/index.ts\nimport {\n  ActionReducerMap,\n  createFeatureSelector,\n  createSelector,\n  MetaReducer\n} from '@ngrx/store';\n// ng gコマンド生成時は相対パスがずれている可能性があるため\n// その場合は修正する\n- import { environment } from '../../environments/environment';\n+ import { environment } from '../../../environments/environment';\nimport * as fromCounter from './counter.reducer';\n\nexport interface State {\n\n  counter: fromCounter.State;\n}\n\nexport const reducers: ActionReducerMap<State> = {\n\n  counter: fromCounter.reducer,\n};\n\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\n\n// コンポーネントでStateのプロパティを取得するための関数を定義します。\n// 複数コンポーネントで使う度に定義するのは冗長なのでココで共通的に定義します。\n+ export const getCounterFeatureState = createFeatureSelector<State>('counter');\n+ export const getCounter = createSelector(getCounterFeatureState, s => s.counter);\n+ export const getCount = createSelector(getCounter, fromCounter.getCount);\n```\n\n\n\n* Component\n\n```diff:src/app/counter/counter.component.ts\nimport { Component, OnInit } from '@angular/core';\n+ import { Observable } from 'rxjs';\n+ import { Store } from '@ngrx/store';\n\n+ import * as CounterReducer from './state/counter.reducer';\n+ import * as CounterActions from './state/counter.actions';\n+ import { getCount } from './state';\n\n@Component({\n  selector: 'app-counter',\n  templateUrl: './counter.component.html',\n  styleUrls: ['./counter.component.css']\n})\nexport class CounterComponent implements OnInit {\n// Storeでの値変更を順次受け付けれるように型をObservableに変更します\n-   count = 0;\n+   count$: Observable<number>;\n\n// Storeをインジェクションします\n-   constructor() { }\n+   constructor(private store: Store<CounterReducer.State>) {\n// Storeからカウンタを取得します\n+     this.count$ = store.select(getCount);\n+  }\n\n  ngOnInit() {\n  }\n\n  increment() {\n// インクリメントの実処理はカウンタのReducerに任せるので\n// ここではActionをdispatchするだけです。\n-     this.count = this.count + 1;\n+     this.store.dispatch(new CounterActions.CountIncrement());\n  }\n\n  decrement() {\n-     this.count = this.count - 1;\n+     this.store.dispatch(new CounterActions.CountDecrement());\n  }\n\n}\n```\n\n* ConponentのHTML\n\n```diff:src/app/counter/counter.component.html\n<button (click)=\"increment()\">+</button>\n<button (click)=\"decrement()\">-</button>\n<!-- 変数名と型が変わったのでHTMLも若干修正します -->\n- <div>Count: {{count }}</div>\n+ <div>Count: {{count$ | async }}</div>\n```\n\n* Webアプリを立ち上げてみます。\n\n```terminal\n$ ng serve -o\n```\n\n* 開発者ツールなどで全くエラーが出ていなければ成功です。見た目は変わっていませんが、Countは`@ngrx/store`で管理されるようになっています。\n\n![スクリーンショット 2018-07-30 0.59.12.png](https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png)\n\n## 補足：ストアとストア登録方法\nストアとストア登録処理はボイラープレートで生成するのでココで改めて説明します。\n\n**まずはルートのストアです。**\nストアは`src/app/state/index.ts`に作成されます。\n中身を見るとわかりますが、実態はReducerを集約したActionReducerMapです。\nReducerを新しく作成した時は、このマップにどんどん追加していきます。\n\n```ts:src/app/state/index.ts\nimport {\n  ActionReducer,\n  ActionReducerMap,\n  createFeatureSelector,\n  createSelector,\n  MetaReducer\n} from '@ngrx/store';\nimport { environment } from '../../environments/environment';\n\nexport interface State {\n\n}\n\nexport const reducers: ActionReducerMap<State> = {\n  // ココにReducerが追加されていきます。\n  // 今回のチュートリアルではルートのストアに１つもReducerを定義していないので空っぽです。\n};\n\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\n\n```\n\nストアをモジュールに登録するには下記のように`StoreModule.forRoot`を使います(ボイラープレートでやってくれます)\n\n```ts:src/app/app.module.ts\n@NgModule({\n  // ・・・\n  imports: [\n    // ・・・\n    StoreModule.forRoot(reducers, { metaReducers }),\n    !environment.production ? StoreDevtoolsModule.instrument() : []\n    // ・・・\n  ],\n  // ・・・\n})\nexport class AppModule { }\n\n```\n\n**次にカウンタのストアに関してです。**\nこちらもルートの場合とほぼ同じです。\n\n```ts:src/app/counter/state/index.ts\n// ・・・\nexport const reducers: ActionReducerMap<State> = {\n  // カウンタのReducerをマップに登録しています。\n  counter: fromCounter.reducer,\n};\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\n// ・・・\n```\n\nただ登録は`StoreModule.forFeature`を使います。\nこのメソッドは、機能毎に状態管理する時に使うもので、ルートのストアに指定した名前で登録されます。使う時になったら遅延ロードしてくれる機能を持っています。\n\n```ts:src/app/counter/counter.module.ts\n// ・・・\nimport * as fromCounter from './state';\n// ・・・\n@NgModule({\n  imports: [\n    // ・・・\n    // アプリ全体のストアにcounterという名前で登録します\n    StoreModule.forFeature('counter', fromCounter.reducers, { metaReducers: fromCounter.metaReducers })\n    // ・・・\n  ],\n  // ・・・\n})\nexport class CounterModule { }\n\n```\n\n\n## まとめ\n以上で`@ngrx/schematics`を使った`@ngrx/store`のチュートリアルは終了です。\n`ngrx`ライブラリは他にも`@ngrx/router-store`、`@ngrx/entity`、`@ngrx/effect`があるので、\n今回のアプリをベースに拡張し、理解を深めてみるのも良いかもしれません。\n\nAngularはVue.jsなどと比較するとボイラープレートが多くなってしまいます。\nしかし、ソースコード自動生成機能が充実しているので、けっこう便利なフレームワークです！\nあまり周りでAngular使ってる人がいなくて寂しいのですが、、、、皆さん是非Angular使いましょう！\n\n## 参考\n* GitHub\n    * [@ngrx/store](https://github.com/ngrx/platform/blob/master/docs/store/README.md#ngrxstore)\n        * 公式ページ。サンプルは少し古いですが、ドキュメントは充実しています。\n    * [@ngrx/schematics](https://github.com/ngrx/platform/blob/master/docs/schematics/README.md)\n        * 各リンクに行くと、コマンドのオプションの説明などが記載されています。\n* Medium\n    * [Managing State in Angular Applications](https://blog.nrwl.io/managing-state-in-angular-applications-22b75ef5625f)\n        * Angularで状態管理する時のベストプラクティスを検討し、最終的に@ngrx/storeを紹介している記事です。ソースコードもGitHubにあり、大変参考になります。\n* Qiita\n    * [@ngrx/storeと@ngrx/effectsの使い方](https://qiita.com/puku0x/items/0a8e7224761dc549bd06)\n        * GitHubに[サンプル](https://github.com/puku0x/ngrx-todo)もありコード例が多く大変参考になりました。\n    * [@ngrx/schematicsを触ってみる](https://qiita.com/musou1500/items/8003c4a3f2b2e80d919f)\n        * `@ngrx/schematics`の使い方が網羅されており参考になりました。\n    * [ngrxでハマったポイント](https://qiita.com/gen2-gk/items/5e5c5b81243def8edc2c#ngrx-%E9%96%A2%E9%80%A3%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AF1%E3%81%A4%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AB%E3%81%BE%E3%81%A8%E3%82%81%E3%82%8B)\n        * ngrx関連資産をstoreフォルダ配下に集約するという知見はココを参考にさせていただきました。\n    * [ngrx紹介](https://qiita.com/kouMatsumoto/items/c8297466c1824953632f)\n        * ngrxを知るきっかけになった記事です。\n\n\n\n","comments_count":0,"created_at":"2018-07-30T18:01:02+09:00","likes_count":22,"reactions_count":0},"relations":[{"node":{"fields":{"slug":"/e0ec0869-f368-5083-bdc2-cdba9d59427a/","title":"フロントエンド初心者がMEANスタック(MongoDB+Express+Angular+Node.js)でアプリを作ってみて躓いたこと","date":"2017-12-12T03:19:11+09:00","excerpt":"FUJITSU Advent Calendar 2017 12日目の記事です。リッチでイマドキなデザインのアプリが作りたくて、ここ４ヶ月ほどMEANスタック(MongoDB+Express+Angular+Node.js)でブログアプリを作...","tags":["JavaScript","Node.js","Express","mongoose","Angular","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"e0ec0869-f368-5083-bdc2-cdba9d59427a","title":"フロントエンド初心者がMEANスタック(MongoDB+Express+Angular+Node.js)でアプリを作ってみて躓いたこと","rendered_body":"<p><a href=\"https://qiita.com/advent-calendar/2017/fujitsu\">FUJITSU Advent Calendar 2017</a> 12日目の記事です。</p>\n\n<p>リッチでイマドキなデザインのアプリが作りたくて、<br>\nここ４ヶ月ほど<strong>MEAN</strong>スタック(<strong>M</strong>ongoDB+<strong>E</strong>xpress+<strong>A</strong>ngular+<strong>N</strong>ode.js)でブログアプリを作っています。<br>\n知識ゼロからのスタートでしたが、多くの方々がブログやStackOverFlowに情報を載せてくれているので、躓きながらもなんとかアプリ開発を進めることができました。</p>\n\n<p>この記事では、フロントエンド初心者の自分がMEANスタックでアプリを作る時に躓いたことや、こういう機能を実現するにはどうすればいいか?などをまとめています。<br>\nこれからをAngularを学ぼうとしている方、ExpressやMongoDBなどサーバーサイドJavaScriptを学ぼうとしている方の参考になればうれしいです。</p>\n\n<h2>\n<span id=\"アプリの紹介\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E7%B4%B9%E4%BB%8B\"><i class=\"fa fa-link\"></i></a>アプリの紹介</h2>\n\n<p>本線から脱線しますが、イントラでの使用を想定したQiitaのようなブログアプリです。デモ環境もあるのでよければ触ってみてください(モバイルには未対応ですが。。。)</p>\n\n<ul>\n<li><a href=\"https://github.com/Takumon/mean-blog\" rel=\"nofollow noopener\" target=\"_blank\">Github</a></li>\n<li><a href=\"https://hub.docker.com/r/takumon/mean-blog_auto/\" rel=\"nofollow noopener\" target=\"_blank\">Dockerhub</a></li>\n<li>\n<a href=\"https://material-blog-demo.herokuapp.com/\" rel=\"nofollow noopener\" target=\"_blank\">デモ環境</a> (ユーザID/パスは DemoUser / DemoUser1234# です)</li>\n</ul>\n\n<p>アプリキャプチャ その１ (記事詳細)<br>\n<a href=\"https://camo.qiitausercontent.com/4d64d8bd315bcf330d1ac6de1cfe8bb53f280992/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62383133333331372d666163322d626239622d386632642d3133646238393662656366352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/4d64d8bd315bcf330d1ac6de1cfe8bb53f280992/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62383133333331372d666163322d626239622d386632642d3133646238393662656366352e706e67\" alt=\"appdemo_detail.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/b8133317-fac2-bb9b-8f2d-13db896becf5.png\"></a></p>\n\n<p>アプリキャプチャ その２ (記事一覧)<br>\n<a href=\"https://camo.qiitausercontent.com/96927cda50e8df84b0c5415e996246c6d720b607/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39353064313036322d316261342d363366362d666535332d6366653664343634333061342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/96927cda50e8df84b0c5415e996246c6d720b607/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39353064313036322d316261342d363366362d666535332d6366653664343634333061342e706e67\" alt=\"アプリ_スクリーンキャプチャ_記事一覧.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/950d1062-1ba4-63f6-fe53-cfe6d46430a4.png\"></a></p>\n\n<p>アプリキャプチャ その３ (プロフィール)<br>\n<a href=\"https://camo.qiitausercontent.com/46aab6c2add74ca826b1dbe730d1a82eb481e295/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33323563373934382d636531362d396330382d306236362d6433383932653034366165642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/46aab6c2add74ca826b1dbe730d1a82eb481e295/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33323563373934382d636531362d396330382d306236362d6433383932653034366165642e706e67\" alt=\"アプリ_スクリーンキャプチャ_ ユーザ画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/325c7948-ce16-9c08-0b66-d3892e046aed.png\"></a></p>\n\n<h1>\n<span id=\"1-フロント側angularまわり\" class=\"fragment\"></span><a href=\"#1-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4angular%E3%81%BE%E3%82%8F%E3%82%8A\"><i class=\"fa fa-link\"></i></a>1. フロント側Angularまわり</h1>\n\n<h2>\n<span id=\"angularについて調べる時に古い情報を除外したい\" class=\"fragment\"></span><a href=\"#angular%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%BF%E3%81%B9%E3%82%8B%E6%99%82%E3%81%AB%E5%8F%A4%E3%81%84%E6%83%85%E5%A0%B1%E3%82%92%E9%99%A4%E5%A4%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Angularについて調べる時に古い情報を除外したい</h2>\n\n<p>1系は<code>AngularJS</code>、2系以降は<code>Angular</code>と呼ばれており、1系と2系以降では大きく仕様が異なります。<br>\nそのため検索する時は<code>Angualr2</code>などバージョンを指定したり、1系を除外するため<code>--AngularJS</code>をつけたりすると検索しやすいです。</p>\n\n<h2>\n<span id=\"htmlのdom要素を別のdom要素またはcomponentから扱いたい\" class=\"fragment\"></span><a href=\"#html%E3%81%AEdom%E8%A6%81%E7%B4%A0%E3%82%92%E5%88%A5%E3%81%AEdom%E8%A6%81%E7%B4%A0%E3%81%BE%E3%81%9F%E3%81%AFcomponent%E3%81%8B%E3%82%89%E6%89%B1%E3%81%84%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>HTMLのDOM要素を、別のDOM要素またはComponentから扱いたい</h2>\n\n<p>要素に<code>#xxxxx</code>のように<code>#</code>始まりの名前をつけると、別のDOM要素から参照できます</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;input</span> <span class=\"err\">#</span><span class=\"na\">phone</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"電話番号\"</span><span class=\"nt\">/&gt;</span>\n<span class=\"c\">&lt;!--  他のDOM要素からphonという変数名でDOM要素を参照できるようになる --&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"nt\">&gt;</span>(click)=\"callPhone(phone.value)\"&gt;\n</pre></div>\n</div>\n\n<p>Componentから参照する場合は<code>@ViewChild</code>を使います</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">Component</span></div>\n<div class=\"highlight\"><pre>  <span class=\"c1\">// ViewChildの引数に名前を文字列で指定します</span>\n  <span class=\"p\">@</span><span class=\"nd\">ViewChild</span><span class=\"p\">(</span><span class=\"s1\">'phone'</span><span class=\"p\">)</span> <span class=\"nx\">phoneElement</span><span class=\"p\">:</span> <span class=\"nx\">phoneElement</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">showPhoneValue</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">phoneElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://angular.io/guide/template-syntax#ref-vars\" rel=\"nofollow noopener\" target=\"_blank\">Angular公式サイト</a></li>\n<li><a href=\"https://stackoverflow.com/questions/32693061/how-can-i-select-an-element-in-a-component-template\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"routing時の認証を非同期で行いたい\" class=\"fragment\"></span><a href=\"#routing%E6%99%82%E3%81%AE%E8%AA%8D%E8%A8%BC%E3%82%92%E9%9D%9E%E5%90%8C%E6%9C%9F%E3%81%A7%E8%A1%8C%E3%81%84%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Routing時の認証を非同期で行いたい</h2>\n\n<p>URLごとの認証は<code>CanActivate</code>インターフェースを実装すればできますが、<br>\nサーバから認証情報を取得して非同期で認証したい場合もあると思います。<br>\nそのような時は、<strong><code>CanActivate#canActivate</code>で</strong>booleanの代わりに<strong>Observableを戻り値に指定する</strong>ことで実現できます。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">SampleAuthGuard</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Router</span><span class=\"p\">,</span> <span class=\"nx\">CanActivate</span><span class=\"p\">,</span> <span class=\"nx\">ActivatedRouteSnapshot</span><span class=\"p\">,</span> <span class=\"nx\">RouterStateSnapshot</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/router'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AuthenticationService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./authentication.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SampleAuthGuard</span> <span class=\"kr\">implements</span> <span class=\"nx\">CanActivate</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span>\n    <span class=\"kr\">private</span> <span class=\"nx\">auth</span><span class=\"p\">:</span> <span class=\"nx\">AuthenticationService</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n  <span class=\"c1\">// booleanではなくObservable&lt;boolean&gt;を戻り値で返す</span>\n  <span class=\"nx\">canActivate</span><span class=\"p\">(</span><span class=\"nx\">route</span><span class=\"p\">:</span> <span class=\"nx\">ActivatedRouteSnapshot</span><span class=\"p\">,</span> <span class=\"nx\">state</span><span class=\"p\">:</span> <span class=\"nx\">RouterStateSnapshot</span><span class=\"p\">):</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"kr\">boolean</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">auth</span><span class=\"p\">.</span><span class=\"nx\">checkState</span><span class=\"p\">()</span>\n      <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">err</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">of</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">))</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/38425461/angular2-canactivate-calling-async-function\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"formarrayの値を初期化したい\" class=\"fragment\"></span><a href=\"#formarray%E3%81%AE%E5%80%A4%E3%82%92%E5%88%9D%E6%9C%9F%E5%8C%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>FormArrayの値を初期化したい</h2>\n\n<p>FormControlはpatchValueで初期値を設定できますが、<br>\nFormArrayの場合patchValueで配列の値を設定しようとしても設定できません。<br>\nこういう場合は、<strong>配列1つ１つの値をもとにFormControlを生成してFormArrayにpush</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">ダメな例</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Form生成</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">group</span><span class=\"p\">({</span>\n    <span class=\"na\">schoolName</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">([])</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// Formに初期値を設定</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">pathValue</span><span class=\"p\">({</span>\n    <span class=\"na\">schooleName</span><span class=\"p\">:</span> <span class=\"s1\">'SampleSchoolName'</span> <span class=\"c1\">// FormControlの値の初期化はpatchValueで可能</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'taro'</span><span class=\"p\">,</span> <span class=\"s1\">'jiro'</span><span class=\"p\">,</span> <span class=\"s1\">'saburo'</span><span class=\"p\">];</span> <span class=\"c1\">// FormArrayに要素を追加する場合patchValueでは不可能</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">良い例</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Formを生成</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">group</span><span class=\"p\">({</span>\n    <span class=\"na\">schoolName</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">([])</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// Formに初期値を設定</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">pathValue</span><span class=\"p\">({</span>\n    <span class=\"na\">schooleName</span><span class=\"p\">:</span> <span class=\"s1\">'SampleSchoolName'</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// データからFormControlを生成し１件１件FormArrayにpushする</span>\n  <span class=\"p\">[</span><span class=\"s1\">'taro'</span><span class=\"p\">,</span> <span class=\"s1\">'jiro'</span><span class=\"p\">,</span> <span class=\"s1\">'saburo'</span><span class=\"p\">].</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">student</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">controls</span><span class=\"p\">[</span><span class=\"s1\">'students'</span><span class=\"p\">].</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">FormControll</span><span class=\"p\">(</span><span class=\"nx\">student</span><span class=\"p\">));</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/40916084/angular2-patchvalue-push-value-into-array\" rel=\"nofollow noopener\" target=\"_blank\">StackOvereFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"error-error-no-provider-for-templaterefというエラー\" class=\"fragment\"></span><a href=\"#error-error-no-provider-for-templateref%E3%81%A8%E3%81%84%E3%81%86%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>「ERROR Error: No provider for TemplateRef!」というエラー</h2>\n\n<p>最初このエラーが出た時は、何が原因なのかわからずに困りました。。。<br>\n大抵の場合は、<strong><code>*ngIf</code>や<code>*ngForm</code>の<code>*</code>が抜けてることが原因</strong>です(要するにただのタイポです。。。)<br>\n<code>*</code>が抜けると、Angularは<code>ngIf</code>をディレクティブとして解釈しようとしますが、<br>\nそんなディレクティブは存在しないので<code>No provider for TemplateRef!</code>と言われてしまうそうです。</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/35932074/angular2-no-provider-for-templateref-ngif-templateref\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"textareaにおいてtabキーでインデントしたい\" class=\"fragment\"></span><a href=\"#textarea%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6tab%E3%82%AD%E3%83%BC%E3%81%A7%E3%82%A4%E3%83%B3%E3%83%87%E3%83%B3%E3%83%88%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>textareaにおいてTabキーでインデントしたい</h2>\n\n<p>文書を入力するようなテキストエリアの場合に、Tabキーでのインデントしたい場合は、<br>\nkyedownイベント発生時にテキストエリアの値とキャレットの位置を操作することで実現可能です。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;textarea</span> <span class=\"err\">#</span><span class=\"na\">sampletextarea</span>\n  <span class=\"err\">(</span><span class=\"na\">keydown</span><span class=\"err\">)=\"</span><span class=\"na\">indent</span><span class=\"err\">($</span><span class=\"na\">event</span><span class=\"err\">,</span> <span class=\"na\">sampletextarea</span><span class=\"err\">)\"</span> <span class=\"nt\">&gt;&lt;/textarea&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">Component</span></div>\n<div class=\"highlight\"><pre>  <span class=\"nx\">indent</span><span class=\"p\">(</span><span class=\"nx\">$event</span><span class=\"p\">,</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Tabキー押下時</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">$event</span><span class=\"p\">.</span><span class=\"nx\">keyCode</span> <span class=\"o\">===</span> <span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 次の要素にフォーカスが移らないようにする</span>\n      <span class=\"nx\">$event</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n\n      <span class=\"c1\">// 現在のキャレット位置を取得</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">caretStart</span> <span class=\"o\">=</span> <span class=\"nx\">textareaElement</span><span class=\"p\">.</span><span class=\"nx\">selectionStart</span><span class=\"p\">;</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">caretEnd</span> <span class=\"o\">=</span> <span class=\"nx\">textareaElement</span><span class=\"p\">.</span><span class=\"nx\">selectionEnd</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// テキストエリアの値を取得し、キャレット位置にTabを挿入</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">TAB</span> <span class=\"o\">=</span> <span class=\"s1\">'¥t'</span><span class=\"p\">;</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">caretStart</span><span class=\"p\">)</span>\n                     <span class=\"o\">+</span> <span class=\"nx\">TAB</span> <span class=\"o\">+</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"nx\">caretStart</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// キャレット位置をTab分ずらす</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">focus</span><span class=\"p\">();</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">setSelectionRange</span><span class=\"p\">(</span><span class=\"nx\">caretStart</span> <span class=\"o\">+</span> <span class=\"nx\">TAB</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">,</span> <span class=\"nx\">caretEnd</span> <span class=\"o\">+</span> <span class=\"nx\">TAB</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h2>\n<span id=\"markdownプレビューを表示したいソースコードはシンタックスハイライトさせたい\" class=\"fragment\"></span><a href=\"#markdown%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%97%E3%81%9F%E3%81%84%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AF%E3%82%B7%E3%83%B3%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B9%E3%83%8F%E3%82%A4%E3%83%A9%E3%82%A4%E3%83%88%E3%81%95%E3%81%9B%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Markdownプレビューを表示したい、ソースコードはシンタックスハイライトさせたい</h2>\n\n<p><a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">marked</a>と<a href=\"https://github.com/isagalaev/highlight.js\" rel=\"nofollow noopener\" target=\"_blank\">highlight.js</a>を組み合わせて使います。<br>\n<a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">marked</a>のReadmeを見ればなんとなくわかりますが、Angularの仕組みに乗せる必要があるのでPipeやらServiceやらを作ります。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">markdown-parse.service.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">marked</span> <span class=\"k\">from</span> <span class=\"s1\">'marked'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">hljs</span> <span class=\"k\">from</span> <span class=\"s1\">'highlight.js'</span><span class=\"p\">;</span>\n\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MarkdownParseService</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">marked</span><span class=\"p\">.</span><span class=\"nx\">setOptions</span><span class=\"p\">({</span>\n      <span class=\"na\">highlight</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">hljs</span><span class=\"p\">.</span><span class=\"nx\">highlightAuto</span><span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">).</span><span class=\"nx\">value</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"na\">rawText</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">marked</span><span class=\"p\">(</span><span class=\"nx\">rawText</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">markdown.pipe.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nx\">marked</span> <span class=\"k\">from</span> <span class=\"s1\">'marked'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MarkdownParseService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./markdown-parse.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'toMarkdown'</span> <span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MarkdownParsePipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">markdownParseService</span><span class=\"p\">:</span> <span class=\"nx\">MarkdownParseService</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">any</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">markdownParseService</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>HTMLで下記のように指定します。<code>{{}}</code>だとサニタイズされてしまうので<code>innerHTML</code>属性を指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">innerHTML</span><span class=\"err\">]=\"</span><span class=\"na\">md</span> <span class=\"err\">|</span> <span class=\"na\">toMarkdown</span><span class=\"err\">\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://qiita.com/daikiojm/items/e02e2aeb0231b3620a0b\" id=\"reference-9001a931765f8f52acaf\">Qiita AngularでMarkdownをHTMLとして表示するカスタムpipeを作成する</a></li>\n<li>Github <a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">chjj/marked</a>\n</li>\n</ul>\n\n<h2>\n<span id=\"絞り込み条件付きリストにおいてリストの要素が変更追加削除された時に絞り込み結果をリフレッシュしたい\" class=\"fragment\"></span><a href=\"#%E7%B5%9E%E3%82%8A%E8%BE%BC%E3%81%BF%E6%9D%A1%E4%BB%B6%E4%BB%98%E3%81%8D%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%8C%E5%A4%89%E6%9B%B4%E8%BF%BD%E5%8A%A0%E5%89%8A%E9%99%A4%E3%81%95%E3%82%8C%E3%81%9F%E6%99%82%E3%81%AB%E7%B5%9E%E3%82%8A%E8%BE%BC%E3%81%BF%E7%B5%90%E6%9E%9C%E3%82%92%E3%83%AA%E3%83%95%E3%83%AC%E3%83%83%E3%82%B7%E3%83%A5%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>絞り込み条件付きリストにおいて、リストの要素が変更、追加、削除された時に絞り込み結果をリフレッシュしたい</h2>\n\n<p>リストの絞り込みはPipeで実現しますが、通常Pipeはリストの要素が変更されても再び絞り込みが実施されることはありません。<br>\nこのような場合はPipeアノテーションにて<strong>pureオプションをfalseに設定</strong>ましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"err\">#</span><span class=\"na\">searchUserName</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n  <span class=\"nt\">&lt;li</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let user of (userList | searchUserFilter: searchUserName.value);\"</span> <span class=\"nt\">&gt;</span>{{user.name}}<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">search-user.pipe.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">User</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./user'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'searchUserFilter'</span><span class=\"p\">,</span>\n  <span class=\"na\">pure</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"c1\">// pureをfalseにすることでユーザが変更、追加、削除された時にリフレッシュできる</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SearchFilterPipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">User</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">searchUserName</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">any</span><span class=\"p\">[]</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">searchUserName</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">items</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">searchUserName</span> <span class=\"o\">=</span> <span class=\"nx\">searchUserName</span><span class=\"p\">.</span><span class=\"nx\">toLowerCase</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span> <span class=\"nx\">item</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">userId</span><span class=\"p\">.</span><span class=\"nx\">toLowerCase</span><span class=\"p\">().</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"nx\">searchUserName</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://angular.io/guide/pipes#pure-and-impure-pipes\" rel=\"nofollow noopener\" target=\"_blank\">Angular公式サイト</a></li>\n</ul>\n\n<h2>\n<span id=\"グローバル定数を定義したい\" class=\"fragment\"></span><a href=\"#%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E5%AE%9A%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>グローバル定数を定義したい</h2>\n\n<p>いろんなクラスで使う定数を共通化する時は、単純に<strong>クラスを作ってstaticなメンバとして定数を定義</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">app-settings.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppSettings</span> <span class=\"p\">{</span>\n   <span class=\"kr\">public</span> <span class=\"kr\">static</span> <span class=\"nx\">API_ENDPOINT</span><span class=\"o\">=</span><span class=\"s1\">'http://127.0.0.1:6666/api/'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">SampleService</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">Injectable</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'angular2/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">AppSettings</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app-settings'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SampleService</span> <span class=\"p\">{</span>\n    <span class=\"nx\">sampleMethod</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">AppSettings</span><span class=\"p\">.</span><span class=\"nx\">API_ENDPOINT</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/34986922/define-global-constants-in-angular-2\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"画像が多い画面の初期表示を早くしたい\" class=\"fragment\"></span><a href=\"#%E7%94%BB%E5%83%8F%E3%81%8C%E5%A4%9A%E3%81%84%E7%94%BB%E9%9D%A2%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A1%A8%E7%A4%BA%E3%82%92%E6%97%A9%E3%81%8F%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>画像が多い画面の初期表示を早くしたい</h2>\n\n<p><a href=\"https://github.com/tjoskar/ng-lazyload-image\" rel=\"nofollow noopener\" target=\"_blank\">ng-lazyload-image</a>を使えば画像の遅延ロードを実現できます。<br>\n使い方もとても簡単でimgタグにディレクティブを指定するだけです。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre> <span class=\"nt\">&lt;img</span>\n  <span class=\"err\">[</span><span class=\"na\">defaultImage</span><span class=\"err\">]=\"</span><span class=\"na\">https:</span><span class=\"err\">//</span><span class=\"na\">images</span><span class=\"err\">.</span><span class=\"na\">sample</span><span class=\"err\">.</span><span class=\"na\">com</span><span class=\"err\">/</span><span class=\"na\">photo</span><span class=\"err\">/</span><span class=\"na\">defaultimage</span><span class=\"err\">\"</span> \n  <span class=\"err\">[</span><span class=\"na\">lazyLoad</span><span class=\"err\">]=\"</span><span class=\"na\">https:</span><span class=\"err\">//</span><span class=\"na\">images</span><span class=\"err\">.</span><span class=\"na\">sample</span><span class=\"err\">.</span><span class=\"na\">com</span><span class=\"err\">/</span><span class=\"na\">photo</span><span class=\"err\">/</span><span class=\"na\">sampleimage</span><span class=\"err\">\"</span>\n  <span class=\"err\">[</span><span class=\"na\">offset</span><span class=\"err\">]=\"</span><span class=\"na\">30</span><span class=\"err\">\"</span>\n <span class=\"nt\">&gt;</span>\n</pre></div>\n</div>\n\n<p><em>defaultImage</em><br>\n　即時ロードされる画像のURL、遅延ロードする画像を読み込む間、表示される<br>\n<em>lazyLoad</em><br>\n　遅延ロードする画像のURL<br>\n<em>offset</em><br>\n　スクロールが発生する場合に画面下部の何ピクセル下に来た時にロードを開始するか<br>\n<em>errorImage</em><br>\n　遅延ロード失敗時に表示する画像URL</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/tjoskar/ng-lazyload-image\" rel=\"nofollow noopener\" target=\"_blank\">ng-lazyload-image</a></li>\n</ul>\n\n<h2>\n<span id=\"angular-cliのng-serveコマンドでdistフォルダを一旦削除したくない\" class=\"fragment\"></span><a href=\"#angular-cli%E3%81%AEng-serve%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7dist%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E3%82%92%E4%B8%80%E6%97%A6%E5%89%8A%E9%99%A4%E3%81%97%E3%81%9F%E3%81%8F%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>Angular Cliの<code>ng serve</code>コマンドでdistフォルダを一旦削除したくない</h2>\n\n<p><code>ng serve</code>コマンドは<code>dist</code>フォルダを削除してからtsファイルをトランスコンパイルします。<br>\nそれを防ぐためには、<strong>delete-output-pathオプションをfalse</strong>に指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json　ビルドスクリプト</span></div>\n<div class=\"highlight\"><pre><span class=\"s2\">\"script\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"cp ./resource/* dist &amp;&amp; ng serve --delete-output-path=false\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/angular/angular-cli/issues/4366\" rel=\"nofollow noopener\" target=\"_blank\">angular-cli github issue #4366</a></li>\n</ul>\n\n<h2>\n<span id=\"aotコンパイルが遅いのでなんとかしたい\" class=\"fragment\"></span><a href=\"#aot%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%8C%E9%81%85%E3%81%84%E3%81%AE%E3%81%A7%E3%81%AA%E3%82%93%E3%81%A8%E3%81%8B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>AOTコンパイルが遅いのでなんとかしたい</h2>\n\n<p>なんとかできませんでした。。。(もしかしたら方法があるのかもしれません。誰か教えてください!!!)<br>\nAOTコンパイルはJITコンパイルが検出してくれないHTMLのエラーを警告してくれますが、その反面遅いです。特に<a href=\"https://material.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular Material</a>を使う場合は顕著です。<br>\nそのため、自分の場合は基本的にJITビルドを使い、issueのプルリクをする前など区切りのいいタイミングでAOTビルドしてエラーがないか確認するというように使い分けてました。</p>\n\n<h1>\n<span id=\"2-フロント側angularでのテスト周り\" class=\"fragment\"></span><a href=\"#2-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4angular%E3%81%A7%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A\"><i class=\"fa fa-link\"></i></a>2. フロント側Angularでのテスト周り</h1>\n\n<h2>\n<span id=\"ci環境などでテストが終わらずにタイムアウトしてしまう\" class=\"fragment\"></span><a href=\"#ci%E7%92%B0%E5%A2%83%E3%81%AA%E3%81%A9%E3%81%A7%E3%83%86%E3%82%B9%E3%83%88%E3%81%8C%E7%B5%82%E3%82%8F%E3%82%89%E3%81%9A%E3%81%AB%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%97%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86\"><i class=\"fa fa-link\"></i></a>CI環境などでテストが終わらずにタイムアウトしてしまう</h2>\n\n<p>CirleCiなどでテストを実行する場合<code>ng test</code>コマンドだとプロセスが終了しないためタイムアウトで失敗してしまいます。<br>\nこのような場合は<strong>watchオプションをfalseに設定</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ng test --wtach=false\n</pre></div></div>\n\n<p><strong>参考サイト</strong><br>\n<a href=\"https://github.com/angular/angular-cli/issues/362\" rel=\"nofollow noopener\" target=\"_blank\">Github isssue</a></p>\n\n<h2>\n<span id=\"テスト時にerror-timeout---async-callback-was-not-invoked-within-timeout-specified-by-jasminedefault_timeout_intervalやfailed-to-execute-send-on-xmlhttprequestのエラー\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E6%99%82%E3%81%ABerror-timeout---async-callback-was-not-invoked-within-timeout-specified-by-jasminedefault_timeout_interval%E3%82%84failed-to-execute-send-on-xmlhttprequest%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>テスト時に「Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.」や「Failed to execute 'send' on 'XMLHttpRequest'」のエラー</h2>\n\n<p>このような場合は、一時的に<code>ng test</code>コマンドのオプションに<strong><code>-sm=false</code>を追加</strong>してテストし直すと根本原因エラーメッセージで出力されるようになります。<br>\n大抵の場合は自作したモッククラスに必要なメソッドがないことが原因です。</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/45399079/angular-tests-failing-with-failed-to-execute-send-on-xmlhttprequest\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト用に子コンポーネントをモック化したい\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%94%A8%E3%81%AB%E5%AD%90%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E3%83%A2%E3%83%83%E3%82%AF%E5%8C%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト用に子コンポーネントをモック化したい</h2>\n\n<p>意外と簡単で、TestBed#configureTestingModuleで<br>\ndeclarationsに自作したモックの子コンポーネントを追加するだけです。<br>\ninput,outputがあれば必要に応じてメンバ定義します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\"><div class=\"highlight\"><pre><span class=\"c1\">// ※import文は省略</span>\n\n<span class=\"c1\">// モックの子コンポーネントを定義</span>\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-child'</span><span class=\"p\">,</span> <span class=\"c1\">// 子コンポーネントと同じものを定義</span>\n  <span class=\"na\">template</span><span class=\"p\">:</span> <span class=\"s1\">'&lt;p&gt;Mock Child Component&lt;/p&gt;'</span>\n<span class=\"p\">})</span>\n<span class=\"kd\">class</span> <span class=\"nx\">MockClildComponent</span> <span class=\"p\">{</span>\n  <span class=\"p\">@</span><span class=\"nd\">Input</span><span class=\"p\">()</span> <span class=\"nx\">childInput</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"p\">@</span><span class=\"nd\">Output</span><span class=\"p\">()</span> <span class=\"nx\">childOutput</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">EventEmitter</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// ...</span>\n\n<span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n    <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"c1\">// テスト時のdeclarationsにモックの定義を追加</span>\n      <span class=\"nx\">MockProductSettingsComponent</span><span class=\"p\">,</span>\n      <span class=\"c1\">// ...</span>\n    <span class=\"p\">],</span>\n    <span class=\"c1\">// ...</span>\n  <span class=\"p\">});</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">});</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/41240163/mocking-child-components-angular-2\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト結果にangular-materilaのスタイルが反映されない\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%B5%90%E6%9E%9C%E3%81%ABangular-materila%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%8C%E5%8F%8D%E6%98%A0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト結果にAngular Materilaのスタイルが反映されない</h2>\n\n<p>UIフレームワークで<a href=\"https://material.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular Material</a>を使っている場合、<br>\n<code>karma.config.js</code>でAngular Materilaのcssを直接読み込んであげる必要あります。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">karma.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"err\">・・・</span>\n      <span class=\"c1\">// Angular Materialのスタイルをテスト開始時に読み込んでおく</span>\n      <span class=\"p\">{</span><span class=\"nl\">pattern</span><span class=\"p\">:</span> <span class=\"s1\">'./node_modules/@angular/material/prebuilt-themes/indigo-pink.css'</span><span class=\"p\">,</span> <span class=\"nx\">included</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">watched</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">},</span>\n<span class=\"p\">],</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/angular/material2/issues/4056\" rel=\"nofollow noopener\" target=\"_blank\">stackoverflow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト結果にstylesscssアプリ共通のスタイル定義のスタイルが反映されない\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%B5%90%E6%9E%9C%E3%81%ABstylesscss%E3%82%A2%E3%83%97%E3%83%AA%E5%85%B1%E9%80%9A%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E5%AE%9A%E7%BE%A9%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%8C%E5%8F%8D%E6%98%A0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト結果にstyles.scss(アプリ共通のスタイル定義)のスタイルが反映されない</h2>\n\n<p>アプリ共通スタイルをSASS形式にしている場合<br>\n開発用ライブライに<code>karma-scss-preprocessor</code>と<code>node-sass</code>を追加して<code>karma.conf.js</code>を下記のように設定します。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">karma.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"err\">・・・</span>\n<span class=\"err\">　</span> <span class=\"c1\">// プラグインに`karma-scss-preprocessor`を追加</span>\n  <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'karma-scss-preprocessor'</span><span class=\"p\">)</span>\n<span class=\"p\">],</span>\n\n\n<span class=\"nx\">files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"err\">・・・</span>\n  <span class=\"c1\">// filesにアプリ共通スタイルを追加</span>\n  <span class=\"p\">{</span> <span class=\"nl\">pattern</span><span class=\"p\">:</span> <span class=\"s1\">'./src/styles.scss'</span><span class=\"p\">,</span> <span class=\"nx\">watched</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>  <span class=\"nx\">included</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">served</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n<span class=\"p\">],</span>\n\n<span class=\"c1\">// preprocessorsを追加</span>\n<span class=\"nx\">preprocessors</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n <span class=\"s1\">'./src/test.ts'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'@angular/cli'</span><span class=\"p\">],</span>\n <span class=\"s1\">'./src/styles.scss'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'scss'</span><span class=\"p\">]</span>\n<span class=\"p\">},</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong>:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/44460733/how-to-configure-karma-to-include-global-scss-files-for-an-angular-cli-project/44498689#44498689\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n<li><a href=\"https://github.com/karma-runner/karma/issues/2700\" rel=\"nofollow noopener\" target=\"_blank\">Github karma/issue/2700</a></li>\n</ul>\n\n<h1>\n<span id=\"3-バックエンド側-expressmongodb周り\" class=\"fragment\"></span><a href=\"#3-%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89%E5%81%B4-expressmongodb%E5%91%A8%E3%82%8A\"><i class=\"fa fa-link\"></i></a>3. バックエンド側 Express、MongoDB周り</h1>\n\n<p>※MongDBをNode.jsで扱う場合は<a href=\"https://github.com/Automattic/mongoose\" rel=\"nofollow noopener\" target=\"_blank\">mongoose</a>という便利なライブラリがあるのでそれを使う前提のお話です。</p>\n\n<h2>\n<span id=\"mongooseのvirtualメソッドを使う\" class=\"fragment\"></span><a href=\"#mongoose%E3%81%AEvirtual%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>mongooseのvirtualメソッドを使う</h2>\n\n<p>例えば<code>記事</code>,<code>コメント</code>,<code>リプライ</code>などのモデルを定義する場合、<br>\n３つのモデルのライフサイクルは、記事追加 =&gt; 記事に対するコメント追加 =&gt; コメントに対するリプライ追加　のようになります。<br>\nこのような場合は、コメントが記事の参照を持ち、リプライがコメントの参照を持つモデル構造が望ましいです。コメントやリプライ追加時に１つのモデルの更新だけですむからです。<br>\n<a href=\"https://camo.qiitausercontent.com/129a84bd908d87c7fcbda29704ad50ac10529129/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393361633065362d333137652d316364662d626662612d3133353331653234353562612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/129a84bd908d87c7fcbda29704ad50ac10529129/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393361633065362d333137652d316364662d626662612d3133353331653234353562612e706e67\" alt=\"db構造_良.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f93ac0e6-317e-1cdf-bfba-13531e2455ba.png\"></a></p>\n\n<p>ただ記事の検索は少し工夫が必要で、<strong>mongooseのvirtualを使います</strong>。これによって記事からコメントへの参照、コメントからリプライへの参照を擬似的に定義できるため、<br>\n検索時に擬似要素をpopulateするだけで、記事に紐付くコメントとリプライを取得できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/bd8d4eedcb08eeaca13290e8dc91b8b2e10c5dae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34616162376633382d316631392d653030622d623335642d3233626162663336613735622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/bd8d4eedcb08eeaca13290e8dc91b8b2e10c5dae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34616162376633382d316631392d653030622d623335642d3233626162663336613735622e706e67\" alt=\"mongoose virtualのイメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/4aab7f38-1f19-e00b-b35d-23babf36a75b.png\"></a></p>\n\n<p>具体的なソースコードを示します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">article.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">ArticleSchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">content</span><span class=\"p\">:</span> <span class=\"nb\">String</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">toJSON</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">virtuals</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"p\">});</span>\n\n\n<span class=\"c1\">// 記事に紐付くコメントモデルの配列をcommentsという擬似要素で定義する</span>\n<span class=\"nx\">ArticleSchema</span><span class=\"p\">.</span><span class=\"nx\">virtual</span><span class=\"p\">(</span><span class=\"s1\">'comments'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Comment'</span><span class=\"p\">,</span>\n  <span class=\"na\">localField</span><span class=\"p\">:</span> <span class=\"s1\">'_id'</span><span class=\"p\">,</span>\n  <span class=\"na\">foreignField</span><span class=\"p\">:</span> <span class=\"s1\">'articleId'</span><span class=\"p\">,</span>\n  <span class=\"na\">justOne</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Article</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Article'</span><span class=\"p\">,</span> <span class=\"nx\">ArticleSchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Article</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">comment.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">CommentSchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">articleId</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">.</span><span class=\"nx\">Types</span><span class=\"p\">.</span><span class=\"nx\">ObjectId</span><span class=\"p\">,</span>\n    <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Article'</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">comment</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">;</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">toJSON</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">virtuals</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"p\">});</span>\n\n<span class=\"c1\">// コメントに紐付くリプライモデルの配列をrepliesという擬似要素で定義する</span>\n<span class=\"nx\">CommentSchema</span><span class=\"p\">.</span><span class=\"nx\">virtual</span><span class=\"p\">(</span><span class=\"s1\">'replies'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Reply'</span><span class=\"p\">,</span>\n  <span class=\"na\">localField</span><span class=\"p\">:</span> <span class=\"s1\">'_id'</span><span class=\"p\">,</span>\n  <span class=\"na\">foreignField</span><span class=\"p\">:</span> <span class=\"s1\">'commentId'</span><span class=\"p\">,</span>\n  <span class=\"na\">justOne</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Comment</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Comment'</span><span class=\"p\">,</span> <span class=\"nx\">CommentSchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Comment</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">reply.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">ReplySchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">commentId</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">.</span><span class=\"nx\">Types</span><span class=\"p\">.</span><span class=\"nx\">ObjectId</span><span class=\"p\">,</span>\n    <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Comment'</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">reply</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Reply</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Reply'</span><span class=\"p\">,</span> <span class=\"nx\">ReplySchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Reply</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">検索処理</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">Article</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">()</span>\n<span class=\"p\">.</span><span class=\"nx\">populate</span><span class=\"p\">({</span>\n  <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"s1\">'comments'</span><span class=\"p\">,</span> <span class=\"c1\">// Articleモデルで定義した擬似要素commentsをpopulateする</span>\n  <span class=\"na\">populate</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"s1\">'replies'</span><span class=\"p\">,</span> <span class=\"c1\">// Commentモデルで定義した擬似要素repliesをpopulateする</span>\n  <span class=\"p\">}],</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"リクエストレスポンスのログ出力したい\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%81%AE%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>リクエスト、レスポンスのログ出力したい</h2>\n\n<p>Expressのuseにて実現します。<br>\nレスポンスオブジェクトのfinishイベントを監視することで、レスポンス時にログを出力しています。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">リクエストとレスポンスのログ出力　※ここでは簡単のためコンソールに出力しています</span></div>\n<div class=\"highlight\"><pre><span class=\"kd\">const</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n<span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"nx\">accessLogHandler</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n  <span class=\"c1\">// リクエスト時のログ　</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">([</span>\n    <span class=\"s1\">'start'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'x-forwarded-for'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span>\n    <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">referer</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'user-agent'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'--ms--'</span>\n  <span class=\"p\">].</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">',</span><span class=\"err\">\\</span><span class=\"s1\">t'</span><span class=\"p\">));</span>\n\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">once</span><span class=\"p\">(</span><span class=\"s1\">'finish'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"err\">　　</span> <span class=\"c1\">// レスポンス時のログ</span>\n    <span class=\"nx\">accessLogger</span><span class=\"p\">.</span><span class=\"nx\">info</span><span class=\"p\">([</span>\n      <span class=\"s1\">'end'</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'x-forwarded-for'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">referer</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'user-agent'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'--'</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">getMilliseconds</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"nx\">start</span><span class=\"p\">.</span><span class=\"nx\">getMilliseconds</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"s1\">'ms--'</span>\n    <span class=\"p\">].</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">',</span><span class=\"err\">\\</span><span class=\"s1\">t'</span><span class=\"p\">));</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">next</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<p>実際のログはこんな感じで出力されます。</p>\n\n<div class=\"code-frame\" data-lang=\"py3\"><div class=\"highlight\"><pre><span class=\"n\">start</span><span class=\"p\">,</span>  <span class=\"p\">::</span><span class=\"n\">ffff</span><span class=\"p\">:</span><span class=\"mf\">127.0</span><span class=\"o\">.</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">authenticate</span><span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"p\">,</span>   <span class=\"o\">-</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">4200</span><span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"n\">Mozilla</span><span class=\"o\">/</span><span class=\"mf\">5.0</span> <span class=\"p\">(</span><span class=\"n\">Macintosh</span><span class=\"p\">;</span> <span class=\"n\">Intel</span> <span class=\"n\">Mac</span> <span class=\"n\">OS</span> <span class=\"n\">X</span> <span class=\"mi\">10</span><span class=\"n\">_12_6</span><span class=\"p\">)</span> <span class=\"n\">AppleWebKit</span><span class=\"o\">/</span><span class=\"mf\">537.36</span> <span class=\"p\">(</span><span class=\"n\">KHTML</span><span class=\"p\">,</span> <span class=\"n\">like</span> <span class=\"n\">Gecko</span><span class=\"p\">)</span> <span class=\"n\">Chrome</span><span class=\"o\">/</span><span class=\"mf\">62.0</span><span class=\"o\">.</span><span class=\"mf\">3202.94</span> <span class=\"n\">Safari</span><span class=\"o\">/</span><span class=\"mf\">537.36</span><span class=\"p\">,</span> <span class=\"o\">--</span><span class=\"n\">ms</span><span class=\"o\">--</span>\n<span class=\"n\">end</span><span class=\"p\">,</span>    <span class=\"p\">::</span><span class=\"n\">ffff</span><span class=\"p\">:</span><span class=\"mf\">127.0</span><span class=\"o\">.</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"p\">,</span>                  <span class=\"mi\">403</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">4200</span><span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"n\">Mozilla</span><span class=\"o\">/</span><span class=\"mf\">5.0</span> <span class=\"p\">(</span><span class=\"n\">Macintosh</span><span class=\"p\">;</span> <span class=\"n\">Intel</span> <span class=\"n\">Mac</span> <span class=\"n\">OS</span> <span class=\"n\">X</span> <span class=\"mi\">10</span><span class=\"n\">_12_6</span><span class=\"p\">)</span> <span class=\"n\">AppleWebKit</span><span class=\"o\">/</span><span class=\"mf\">537.36</span> <span class=\"p\">(</span><span class=\"n\">KHTML</span><span class=\"p\">,</span> <span class=\"n\">like</span> <span class=\"n\">Gecko</span><span class=\"p\">)</span> <span class=\"n\">Chrome</span><span class=\"o\">/</span><span class=\"mf\">62.0</span><span class=\"o\">.</span><span class=\"mf\">3202.94</span> <span class=\"n\">Safari</span><span class=\"o\">/</span><span class=\"mf\">537.36</span><span class=\"p\">,</span>  <span class=\"o\">--</span><span class=\"mi\">47</span><span class=\"n\">ms</span><span class=\"o\">--</span>\n</pre></div></div>\n\n<h2>\n<span id=\"ログ出力でオブジェクトの全プロパティを出力したい\" class=\"fragment\"></span><a href=\"#%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E3%81%A7%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%85%A8%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%82%92%E5%87%BA%E5%8A%9B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>ログ出力でオブジェクトの全プロパティを出力したい</h2>\n\n<p>オブジェクトの中身をログで確認する時はNode.jsの<code>util.inspect()</code>を使います。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre><span class=\"kd\">const</span> <span class=\"nx\">util</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'util'</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">myObject</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"s2\">\"a\"</span><span class=\"p\">:</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span>\n   <span class=\"s2\">\"b\"</span><span class=\"p\">:{</span>\n      <span class=\"s2\">\"c\"</span><span class=\"p\">:</span><span class=\"s2\">\"c\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"d\"</span><span class=\"p\">:{</span>\n         <span class=\"s2\">\"e\"</span><span class=\"p\">:</span><span class=\"s2\">\"e\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"f\"</span><span class=\"p\">:{</span>\n            <span class=\"s2\">\"g\"</span><span class=\"p\">:</span><span class=\"s2\">\"g\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"h\"</span><span class=\"p\">:{</span>\n               <span class=\"s2\">\"i\"</span><span class=\"p\">:</span><span class=\"s2\">\"i\"</span>\n            <span class=\"p\">}</span>\n         <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">};</span> \n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">util</span><span class=\"p\">.</span><span class=\"nx\">inspect</span><span class=\"p\">(</span><span class=\"nx\">myObject</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">));</span>\n</pre></div></div>\n\n<p>このようなログが出力されます</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>{ a: 'a', b: { c: 'c', d: { e: 'e', f: [Object] } } }\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/10729276/how-can-i-get-the-full-object-in-node-jss-console-log-rather-than-object\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"環境変数で上書きできる定数を定義したい\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%81%A7%E4%B8%8A%E6%9B%B8%E3%81%8D%E3%81%A7%E3%81%8D%E3%82%8B%E5%AE%9A%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>環境変数で上書きできる定数を定義したい</h2>\n\n<p>例えばサーバのポートなど環境個別に設定したくなるようなものは<br>\n環境変数で上書きできる定数にしておくと便利です。<br>\nNode.jsではprocess.env.変数名で環境変数が参照できるので下記のようにします。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">定数定義</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_PORT</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">SERVER_PORT</span> <span class=\"o\">||</span> <span class=\"s1\">'3000'</span><span class=\"p\">;</span><span class=\"err\">　</span><span class=\"c1\">// 環境変数SERVER_PORTが未指定の場合は3000となる</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_HOST</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">SERVER_HOST</span> <span class=\"o\">||</span> <span class=\"s1\">'localhost'</span><span class=\"p\">;</span> <span class=\"c1\">// 環境変数SERVER_HOSTが未指定の場合はlocalhostとなる</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"db初回アクセスに失敗した場合にリトライされない\" class=\"fragment\"></span><a href=\"#db%E5%88%9D%E5%9B%9E%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%AB%E5%A4%B1%E6%95%97%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AB%E3%83%AA%E3%83%88%E3%83%A9%E3%82%A4%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>DB初回アクセスに失敗した場合にリトライされない</h2>\n\n<p>mongooseを使っていると、DB初回接続時にエラーが起きた時に、なぜか再接続処理してくれません。<br>\nDockerでアプリを配布する場合、アプリとMongoDBをdocker-composeで同時に立ち上げることがあると思いますが、まだMongoDBが起動しきってない状態でアプリからDBに接続しようとすると、アプリが異常終了してしまいます。これを防ぐには自力で再接続処理を実装する必要があります。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre><span class=\"kd\">function</span> <span class=\"nx\">createConnection</span> <span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">createConnection</span><span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">(</span><span class=\"sr\">/failed to connect to server .* on first connect/</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(),</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">));</span>\n\n            <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Retrying first connect...\"</span><span class=\"p\">);</span>\n                <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">openUri</span><span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">).</span><span class=\"k\">catch</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n            <span class=\"c1\">// 20秒後に再接続する</span>\n            <span class=\"p\">},</span> <span class=\"mi\">20</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(),</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">once</span><span class=\"p\">(</span><span class=\"s1\">'open'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Connection to db established.\"</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">db</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/Automattic/mongoose/issues/5169\" rel=\"nofollow noopener\" target=\"_blank\">Github mongooseのissue5169</a></li>\n</ul>\n","body":"[FUJITSU Advent Calendar 2017](https://qiita.com/advent-calendar/2017/fujitsu) 12日目の記事です。\n\nリッチでイマドキなデザインのアプリが作りたくて、\nここ４ヶ月ほど**MEAN**スタック(**M**ongoDB+**E**xpress+**A**ngular+**N**ode.js)でブログアプリを作っています。\n知識ゼロからのスタートでしたが、多くの方々がブログやStackOverFlowに情報を載せてくれているので、躓きながらもなんとかアプリ開発を進めることができました。\n\nこの記事では、フロントエンド初心者の自分がMEANスタックでアプリを作る時に躓いたことや、こういう機能を実現するにはどうすればいいか?などをまとめています。\nこれからをAngularを学ぼうとしている方、ExpressやMongoDBなどサーバーサイドJavaScriptを学ぼうとしている方の参考になればうれしいです。\n\n## アプリの紹介\n本線から脱線しますが、イントラでの使用を想定したQiitaのようなブログアプリです。デモ環境もあるのでよければ触ってみてください(モバイルには未対応ですが。。。)\n\n* [Github](https://github.com/Takumon/mean-blog)\n* [Dockerhub](https://hub.docker.com/r/takumon/mean-blog_auto/)\n* [デモ環境](https://material-blog-demo.herokuapp.com/) (ユーザID/パスは DemoUser / DemoUser1234# です)\n\nアプリキャプチャ その１ (記事詳細)\n![appdemo_detail.png](https://qiita-image-store.s3.amazonaws.com/0/49915/b8133317-fac2-bb9b-8f2d-13db896becf5.png)\n\nアプリキャプチャ その２ (記事一覧)\n![アプリ_スクリーンキャプチャ_記事一覧.png](https://qiita-image-store.s3.amazonaws.com/0/49915/950d1062-1ba4-63f6-fe53-cfe6d46430a4.png)\n\nアプリキャプチャ その３ (プロフィール)\n![アプリ_スクリーンキャプチャ_ ユーザ画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/325c7948-ce16-9c08-0b66-d3892e046aed.png)\n\n# 1. フロント側Angularまわり\n## Angularについて調べる時に古い情報を除外したい\n1系は`AngularJS`、2系以降は`Angular`と呼ばれており、1系と2系以降では大きく仕様が異なります。\nそのため検索する時は`Angualr2`などバージョンを指定したり、1系を除外するため\u001e`--AngularJS`をつけたり\u001dすると検索しやすいです。\n\n## HTMLのDOM\b要素を、別のDOM要素またはComponentから扱いたい\n要素に`#xxxxx`\bのように`#`始まりの名前をつけると、別の\bDOM要素から参照できます\n\n```html:HTML\n<input #phone placeholder=\"電話番号\"/>\n<!--  他のDOM要素からphonという変数名でDOM要素を参照できるようになる -->\n<button >(click)=\"callPhone\b(phone.value)\">\n```\n\n\bComponentから参照する場合は`@ViewChild`を使います\n\n```typescript:Component\n  // \bViewChildの引数に\b\b名前を文字列で指定します\n  @ViewChild('phone') phoneElement: phoneElement;\n\n  showPhoneValue() {\n    console.log(this.phoneElement.value);\n    )\n  }\n```\n\n\b**参考サイト**\n\n* [Angular公式サイト](https://angular.io/guide/template-syntax#ref-vars)\n* [StackOverFlow](https://stackoverflow.com/questions/32693061/how-can-i-select-an-element-in-a-component-template)\n\n\n\n## Routing時の認証を非同期で行いたい\nURLごとの認証は`CanActivate`インターフェースを実装すればできますが、\nサーバから認証情報を取得して非同期で認証したい場合もあると思います。\nそのような時は、**`CanActivate#canActivate`で**booleanの代わりに**Observable<boolean>を戻り値に指定する**ことで実現できます。\n\n\n```typescript:SampleAuthGuard\nimport { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs/Rx';\n\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable()\nexport class SampleAuthGuard implements CanActivate {\n\n  constructor(\n    private auth: AuthenticationService,\n  ) { }\n\n  // booleanではなくObservable<boolean>を戻り値で返す\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.auth.checkState()\n      .map(res => true)\n      .catch(err => Observable.of(false))\n  }\n}\n\n```\n\n\b**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/38425461/angular2-canactivate-calling-async-function)\n\n## FormArrayの値を初期化したい\nFormControlはpatchValueで初期値を設定できますが、\nFormArrayの場合patch\bValueで配列の値を設定しようと\bしても設定できません。\n\bこういう場合は、**\b\b配列1つ１つの値をもとにFormControlを生成してFormArrayにpush**します。\n\n```typescript:ダメな例\nngOnInit() {\n  // Form生成\n  this.form = this.formBuilder.group({\n    schoolName: '',\n    students: this.formBuilder.array([])\n  });\n\n  // Formに初期値を設定\n  this.form.pathValue({\n    schooleName: 'SampleSchoolName' // FormControlの値の初期化はpatchValueで可能\n    students: ['taro', 'jiro', 'saburo']; // FormArrayに要素を追加する場合patchValueでは不可能\n  });\n}\n```\n\n```typescript:\b良い例\nngOnInit() {\n  // Formを生成\n  this.form = this.formBuilder.group({\n    schoolName: '',\n    students: this.formBuilder.array([])\n  });\n\n  // Formに初期値を設定\n  this.form.pathValue({\n    schooleName: 'SampleSchoolName'\n  });\n\n  // データからFormControlを生成し１件１件FormArrayにpushする\n  ['taro', 'jiro', 'saburo'].forEach(student -> {\n    this.form.controls['students'].push(new FormControll(student));\n  });\n}\n```\n\n\b**参考サイト**\n\n* [StackOvereFlow](https://stackoverflow.com/questions/40916084/angular2-patchvalue-push-value-into-array)\n\n## 「ERROR Error: No provider for TemplateRef!」というエラー\n最初このエラーが出た時は、何が原因なのかわからずに困りました。。。\n大抵の場合は、**`*ngIf`や`*ngForm`の`*`が抜けてることが原因**です(要するにただのタイポです。。。)\n`*`が抜けると、Angularは`ngIf`をディレクティブとして解釈しようとしますが、\n\bそんな\b\bディレクティブは存在しないので`No provider for TemplateRef!`と言われてしまうそうです。\n\n\b**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/35932074/angular2-no-provider-for-templateref-ngif-templateref)\n\n\n## textareaにおいてTabキーでインデントしたい\n文書を入力するようなテキストエリアの場合に、\u001dTabキーでのインデントしたい場合は、\n\bkyedownイベント発生時に\bテキストエリアの値とキャレットの位置を操作することで実現可能です。\n\n```html:HTML\n<textarea #sampletextarea\n  (keydown)=\"indent($event, sampletextarea)\" ></textarea>\n```\n\n```typescript:Component\n  indent($event, sampleTextAreaElement) {\n    // Tabキー押下時\n    if ($event.keyCode === 9) {\n      \b// 次の要素に\bフォーカスが移らないようにする\n      $event.preventDefault();\n\n      // 現在のキャレット位置を取得\n      \bconst caretStart = textareaElement.selectionStart;\n      const caretEnd = textareaElement.selectionEnd;\n\n      // テキストエリアの値を\b取得し、キャレット位置にTabを挿入\n      const TAB = '¥t';\n      sampleTextAreaElement.value = sampleTextAreaElement.value.substring(0, caretStart)\n                     + TAB + sampleTextAreaElement.value.substring(caretStart, value.length);\n\n      // キャレット位置をTab分ずらす\n      sampleTextAreaElement.focus();\n      sampleTextAreaElement.setSelectionRange(caretStart + TAB.length, caretEnd + TAB.length);\n\n      return;\n    }\n  }\n\n```\n\n\n\n## \bMarkdownプレビューを\b表示したい、ソースコードはシンタックスハイライトさせたい\n[marked](https://github.com/chjj/marked)と[highlight.js](https://github.com/isagalaev/highlight.js)を組み合わせて使います。\n[marked](https://github.com/chjj/marked)のReadmeを見ればなんとなくわかりますが、Angularの仕組みに乗せる必要があるのでPipeやらServiceやらを作ります。\n\n```typescript:markdown-parse.service.ts\nimport { Injectable } from '@angular/core';\nimport marked from 'marked';\nimport hljs from 'highlight.js';\n\n\n@Injectable()\nexport class MarkdownParseService {\n\n  constructor() {\n    marked.setOptions({\n      highlight: function (code) {\n        return hljs.highlightAuto(code).value;\n      }\n    });\n  }\n\n  parse(rawText: string) {\n    return marked(rawText);\n  }\n}\n```\n\n\n```typescript:markdown.pipe.ts\nimport marked from 'marked';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { MarkdownParseService } from './markdown-parse.service';\n\n@Pipe({ name: 'toMarkdown' })\nexport class MarkdownParsePipe implements PipeTransform {\n  constructor(markdownParseService: MarkdownParseService) {}\n\n  transform(value: string): any {\n    return this.markdownParseService.parse(value);\n  }\n}\n```\n\nHTMLで下記のように指定します。`{{}}`だと\bサニタイズされてしまうので\b`innerHTML`属性を指定します。\n\n```html\n<div [innerHTML]=\"md | toMarkdown\"></div>\n```\n\n\n\b**参考サイト**\n\n* [Qiita AngularでMarkdownをHTMLとして表示するカスタムpipeを作成する](https://qiita.com/daikiojm/items/e02e2aeb0231b3620a0b)\n* Github [chjj/marked](https://github.com/chjj/marked)\n\n\n\n\n## 絞り込み条件付きリストにおいて、リストの要素が\b変更、追加\b、削除された時に絞り込み結果をリフレッシュしたい\nリストの絞り込みはPipeで実現しますが、通常Pipeはリストの要素が変更されても再び絞り込みが実施されることはありません。\nこのような場合はPipeアノテーションにて**pureオプションをfalseに設定**ましょう。\n\n```html:HTML\n<input type=\"text\" #searchUserName>\n<ul>\n  <li *ngFor=\"let user of (userList | searchUserFilter: searchUserName.value);\" >{{user.name}}</li>\n<ul>\n```\n\n```typescript:search-user.pipe.ts\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { User } from './user';\n\n@Pipe({\n  name: 'searchUserFilter',\n  pure: false // pureをfalseにすることでユーザが変更、追加、削除された時にリフレッシュできる\n})\nexport class SearchFilterPipe implements PipeTransform {\n  transform(items: Array<User>, searchUserName: string): any[] {\n    if (!searchUserName) return items;\n\n    searchUserName = searchUserName.toLowerCase();\n    return items.filter( item => item.user.userId.toLowerCase().includes(searchUserName));\n  }\n}\n```\n\n\b**参考サイト**\n\n* [Angular公式サイト](https://angular.io/guide/pipes#pure-and-impure-pipes)\n\n\n\n\n## グローバル定数を定義したい\nいろんなクラスで使う定数を\b共通\b化する時は、単純に**クラスを作ってstaticなメンバとして定数を定義**します。\n\n```typescript:app-settings.ts\nexport class AppSettings {\n   public static API_ENDPOINT='http://127.0.0.1:6666/api/';\n}\n```\n\n```typescript:SampleService\nimport {Injectable} from 'angular2/core';\nimport {AppSettings} from './app-settings';\n\n@Injectable()\nexport class SampleService {\n    \bsampleMethod() {\n      console.log(AppSettings.API_ENDPOINT);\n    }\n}\n```\n\n**参考**\n\n* [StackOverFlow](https://stackoverflow.com/questions/34986922/define-global-constants-in-angular-2)\n\n\n## 画像が多い画面の初期表示を早くしたい\n[ng-lazyload-image](https://github.com/tjoskar/ng-lazyload-image)を使えば画像の遅延ロードを実現できます。\n使い方もとても簡単でimgタグにディレクティブを指定するだけです。\n\n```html:HTML\n <img\n  [defaultImage]=\"https://images.sample.com/photo/defaultimage\" \n  [lazyLoad]=\"https://images.sample.com/photo/sampleimage\"\n  [offset]=\"30\"\n >\n```\n\n*defaultImage*\n　即時ロードされる画像のURL、遅延ロードする画像を読み込む間、表示される\n*lazyLoad*\n　遅延ロードする画像のURL\n*offset*\n　スクロールが発生する場合に画面下部の何ピクセル下に来た時にロードを開始するか\n*errorImage*\n　遅延ロード失敗時に表示する画像URL\n\n**参考サイト**\n\n* [ng-lazyload-image](https://github.com/tjoskar/ng-lazyload-image)\n\n\n## Angular Cliの`ng serve`コマンドでdistフォルダを一旦削除したくない\n`ng serve`コマンドは`dist`フォルダを削除してからtsファイルをトランスコンパイルします。\nそれを防ぐためには、**delete-output-pathオプションをfalse**に指定します。\n\n```json:package.json　ビルドスクリプト\n\"script\": {\n  \"build\": \"cp ./resource/* dist && ng serve --delete-output-path=false\"\n}\n```\n\n\b**参考サイト**\n\n* [angular-cli github issue #4366](https://github.com/angular/angular-cli/issues/4366)\n\n\n## AOTコンパイルが遅いのでなんとかしたい\nなんとかできませんでした。。。(もしかしたら方法があるのかもしれません。誰か教えてください!!!)\nAOTコンパイルはJITコンパイルが検出してくれないHTMLのエラーを警告してくれますが、その反面遅いです。特に[Angular Material](https://material.angular.io/)を使う場合は顕著です。\nそのため、自分の場合は基本的にJITビルドを使い、issueのプルリクをする前など区切りのいいタイミングでAOTビルドしてエラーがないか確認するというように使い分けてました。\n\n\n# 2. フロント側Angularでのテスト周り\n## CI環境などでテストが終わらずにタイムアウトしてしまう\nCirleCiなどでテストを実行する場合`ng test`コマンドだとプロセスが終了しないためタイムアウトで失敗してしまいます。\nこのような場合は**watchオプションをfalseに設定**します。\n\n```\nng test --wtach=false\n```\n\n**参考サイト**\n[Github isssue](https://github.com/angular/angular-cli/issues/362)\n\n## テスト時に「Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.」や「Failed to execute 'send' on 'XMLHttpRequest'」のエラー\nこのような場合は、一時的に`ng test`コマンドのオプションに**`-sm=false`を追加**してテストし直すと根本原因エラーメッセージで出力されるようになります。\n大抵の場合は自作したモッククラスに必要なメソッドがないことが原因です。\n\n\b**参考サイト**\n\n* [stackOverFlow](https://stackoverflow.com/questions/45399079/angular-tests-failing-with-failed-to-execute-send-on-xmlhttprequest)\n\n\n## テスト用に子コンポーネントをモック化したい\n意外と簡単で、TestBed#configureTestingModuleで\ndeclarationsに自作したモックの子コンポーネントを追加するだけです。\ninput,outputがあれば必要に応じてメンバ定義します。\n\n\n```typescript\n// ※import文は省略\n\n// モックの子コンポーネントを定義\n@Component({\n  selector: 'app-child', // 子コンポーネントと同じものを定義\n  template: '<p>Mock Child Component</p>'\n})\nclass MockClildComponent {\n  @Input() childInput: string;\n  @Output() childOutput = new EventEmitter();\n}\n\n// ...\n\nbeforeEach(() => {\n  TestBed.configureTestingModule({\n    declarations: [\n      // テスト時のdeclarationsにモックの定義を追加\n      MockProductSettingsComponent,\n      // ...\n    ],\n    // ...\n  });\n  // ...\n});\n```\n\n\b**参考サイト**\n\n* [stackOverFlow](https://stackoverflow.com/questions/41240163/mocking-child-components-angular-2)\n\n\n## テスト結果にAngular Materilaのスタイルが反映されない\nUIフレームワークで[Angular Material](https://material.angular.io/)を使っている場合、\n`karma.config.js`でAngular Materilaのcssを直接読み込んであげる必要あります。\n\n```javascript:karma.conf.js\nfiles: [\n      ・・・\n      // Angular Materialのスタイルをテスト開始時に読み込んでおく\n      {pattern: './node_modules/@angular/material/prebuilt-themes/indigo-pink.css', included: true, watched: false},\n],\n```\n\n**参考サイト**\n\n* [stackoverflow](https://github.com/angular/material2/issues/4056)\n\n\n## テスト結果にstyles.scss(アプリ共通のスタイル定義)のスタイルが反映されない\nアプリ共通スタイルをSASS形式にしている場合\n開発用ライブライに`karma-scss-preprocessor`と`node-sass`を追加して`karma.conf.js`を下記のように設定します。\n\n```javascript:karma.conf.js\nplugins: [\n  ・・・\n　 // プラグインに`karma-scss-preprocessor`を追加\n  require('karma-scss-preprocessor')\n],\n\n\nfiles: [\n  ・・・\n  // filesにアプリ共通スタイルを追加\n  { pattern: './src/styles.scss', watched: false,  included: true, served: true }\n],\n\n// preprocessorsを追加\npreprocessors: {\n './src/test.ts': ['@angular/cli'],\n './src/styles.scss': ['scss']\n},\n```\n\n\b**参考サイト**:\n\n* [stackOverFlow](https://stackoverflow.com/questions/44460733/how-to-configure-karma-to-include-global-scss-files-for-an-angular-cli-project/44498689#44498689)\n* [Github karma/issue/2700](https://github.com/karma-runner/karma/issues/2700)\n\n\n\n\n# 3. バックエンド側 Express、MongoDB周り\n※MongDBをNode.jsで扱う場合は[mongoose](https://github.com/Automattic/mongoose)という便利なライブラリがあるのでそれを使う前提のお話です。\n\n## mongooseのvirtualメソッドを使う\n例えば`記事`,`コメント`,`リプライ`などのモデルを定義する場合、\n３つのモデルのライフサイクルは、記事追加 => 記事に対するコメント追加 => コメントに対するリプライ追加　のようになります。\nこのような場合は、コメントが記事の参照を持ち、リプライがコメントの参照を持つモデル構造が望ましいです。コメントやリプライ追加時に１つのモデルの更新だけですむからです。\n![db構造_良.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f93ac0e6-317e-1cdf-bfba-13531e2455ba.png)\n\nただ記事の検索は少し工夫が必要で、**mongooseのvirtualを使います**。これによって記事からコメントへの参照、コメントからリプライへの参照を擬似的に定義できるため、\n検索時に擬似要素をpopulateするだけで、記事に紐付くコメントとリプライを取得できるようになります。\n![mongoose virtualのイメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/4aab7f38-1f19-e00b-b35d-23babf36a75b.png)\n\n具体的なソースコードを示します。\n\n```typescript:article.model.ts\nimport * as mongoose from 'mongoose';\n\nconst ArticleSchema = new mongoose.Schema({\n  content: String\n}, { toJSON: { virtuals: true } });\n\n\n// 記事に紐付くコメントモデルの配列をcommentsという擬似要素で定義する\nArticleSchema.virtual('comments', {\n  ref: 'Comment',\n  localField: '_id',\n  foreignField: 'articleId',\n  justOne: false,\n});\n\nconst Article = mongoose.model('Article', ArticleSchema);\n\nexport { Article };\n```\n\n\n```typescript:comment.model.ts\nimport * as mongoose from 'mongoose';\n\nconst CommentSchema = new mongoose.Schema({\n  articleId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Article',\n  },\n  comment: String;\n}, { toJSON: { virtuals: true } });\n\n// コメントに紐付くリプライモデルの配列をrepliesという擬似要素で定義する\nCommentSchema.virtual('replies', {\n  ref: 'Reply',\n  localField: '_id',\n  foreignField: 'commentId',\n  justOne: false,\n});\n\nconst Comment = mongoose.model('Comment', CommentSchema);\n\nexport { Comment };\n```\n\n```typescript:reply.model.ts\nimport * as mongoose from 'mongoose';\n\nconst ReplySchema = new mongoose.Schema({\n  commentId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Comment'\n  },\n  reply: String;\n});\n\nconst Reply = mongoose.model('Reply', ReplySchema);\n\nexport { Reply };\n```\n\n```typescript:検索処理\nArticle.find()\n.populate({\n  path: 'comments', // Articleモデルで定義した擬似要素commentsをpopulateする\n  populate: [{\n    path: 'replies', // Commentモデルで定義した擬似要素repliesをpopulateする\n  }],\n});\n```\n\n\n## リクエスト、レスポンスのログ出力したい\nExpressのuseにて実現します。\nレスポンスオブジェクトのfinishイベントを監視することで、レスポンス時にログを出力しています。\n\n\n```javascript:リクエストとレスポンスのログ出力　※ここでは簡単のためコンソールに出力しています\nconst express = express();\nexpress.use(function accessLogHandler (req, res, next) {\n  const start = new Date();\n  // リクエスト時のログ　\n  console.log([\n    'start',\n    req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n    req.method,\n    req.url,\n    '-',\n    req.headers.referer || '-',\n    req.headers['user-agent'] || '-',\n    '--ms--'\n  ].join(',\\t'));\n\n  res.once('finish', function() {\n　　 // レスポンス時のログ\n    accessLogger.info([\n      'end',\n      req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n      req.method,\n      req.url,\n      res.statusCode,\n      req.headers.referer || '-',\n      req.headers['user-agent'] || '-',\n      '--' + (new Date().getMilliseconds() - start.getMilliseconds()) + 'ms--'\n    ].join(',\\t'));\n  });\n\n  next();\n});\n```\n\n実際のログはこんな感じで出力されます。\n\n```py3\nstart,  ::ffff:127.0.0.1, GET, /api/authenticate/check-state,   -, http://localhost:4200/, Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36, --ms--\nend,    ::ffff:127.0.0.1, GET, /check-state,                  403, http://localhost:4200/, Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36,  --47ms--\n```\n\n\n\n## ログ出力でオブジェクトの全プロパティを出力したい\nオブジェクトの中身をログで確認する時はNode.jsの`util.inspect()`を使います。\n\n\n```javascript\nconst util = require('util');\nconst myObject = {\n   \"a\":\"a\",\n   \"b\":{\n      \"c\":\"c\",\n      \"d\":{\n         \"e\":\"e\",\n         \"f\":{\n            \"g\":\"g\",\n            \"h\":{\n               \"i\":\"i\"\n            }\n         }\n      }\n   }\n}; \n\nconsole.log(util.inspect(myObject, false, null));\n```\n\nこのようなログが出力されます\n\n```\n{ a: 'a', b: { c: 'c', d: { e: 'e', f: [Object] } } }\n```\n\n**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/10729276/how-can-i-get-the-full-object-in-node-jss-console-log-rather-than-object)\n\n\n## 環境変数で上書きできる定数を定義したい\n例えばサーバのポートなど環境個別に設定したくなるようなものは\n環境変数で上書きできる定数にしておくと便利です。\nNode.jsではprocess.env.変数名で環境変数が参照できるので下記のようにします。\n\n```typescript:定数定義\nexport const SERVER_PORT: string = process.env.SERVER_PORT || '3000';　// 環境変数SERVER_PORTが未指定の場合は3000となる\nexport const SERVER_HOST: string = process.env.SERVER_HOST || 'localhost'; // 環境変数SERVER_HOSTが未指定の場合はlocalhostとなる\n```\n\n\n## DB初回アクセスに失敗した場合にリトライされない\nmongooseを使っていると、DB初回接続時にエラーが起きた時に、なぜか再接続処理してくれません。\nDockerでアプリを配布する場合、アプリとMongoDBをdocker-composeで同時に立ち上げることがあると思いますが、まだMongoDBが起動しきってない状態でアプリからDBに接続しようとすると、アプリが異常終了してしまいます。これを防ぐには自力で再接続処理を実装する必要があります。\n\n```javascript\nfunction createConnection (dbURL, options) {\n    var db = mongoose.createConnection(dbURL, options);\n\n    db.on('error', function (err) {\n        if (err.message && err.message.match(/failed to connect to server .* on first connect/)) {\n            console.log(new Date(), String(err));\n\n            setTimeout(function () {\n                console.log(\"Retrying first connect...\");\n                db.openUri(dbURL).catch(() => {});\n            // 20秒後に再接続する\n            }, 20 * 1000);\n        } else {\n            console.error(new Date(), String(err));\n        }\n    });\n\n    db.once('open', function () {\n        console.log(\"Connection to db established.\");\n    });\n\n    return db;\n}\n```\n\n**参考サイト**\n\n* [Github mongooseのissue5169](https://github.com/Automattic/mongoose/issues/5169)\n\n","comments_count":0,"created_at":"2017-12-12T03:19:11+09:00","likes_count":46,"reactions_count":0},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"Angular"},{"weight":50,"keyword":"Qiita"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/7780e313-8bda-5534-99aa-37bf47e9deb3/","title":"GitBucketのissueで作業量を設定できるプラグイン","date":"2017-12-31T23:49:04+09:00","excerpt":"== 2018/4/7 追記 ==========================================本記事ではChrome拡張とDockerによって実現していましたが、その後GitBucket Plugin化しました。gitb...","tags":["JavaScript","chrome-extension","Docker","GitBucket","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"7780e313-8bda-5534-99aa-37bf47e9deb3","title":"GitBucketのissueで作業量を設定できるプラグイン","rendered_body":"<p>== 2018/4/7 追記 ==========================================<br>\n本記事ではChrome拡張とDockerによって実現していましたが、<br>\nその後GitBucket Plugin化しました。</p>\n\n<p><a href=\"https://github.com/Takumon/gitbucket-issue-estimation-plugin\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-plugin</a></p>\n\n<p><a href=\"https://github.com/Takumon/gitbucket-issue-estimation-plugin/releases/tag/0.1\" rel=\"nofollow noopener\" target=\"_blank\">リリースページ</a>からjarファイルをダウンロードして<code>&lt;GITBUCKET_HOME&gt;/plugins/</code>に置くだけで導入可能です。<br>\n== =======================================================</p>\n\n<p>Git Advent Calendarが埋まっていなかったので、大晦日ですが代わりに投稿させていただきました。</p>\n\n<h2>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h2>\n\n<p><a href=\"https://gitbucket.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">GitBucket</a>のマイルストーンの進捗率はissueの件数ベースなので、issueごとに作業量のバラつきがあったりすると現実的な進捗率と乖離してしまいます。</p>\n\n<p>そこで今回はChrome拡張とDockerイメージを作成して、<br>\nissueに作業量を設定できるようにして、マイルストーンで作業量ベースの進捗率を確認できるようにしました。</p>\n\n<p>Chrome拡張とDockerイメージはどちらも公開しているので簡単に導入できます。是非試してみてください。</p>\n\n<ul>\n<li>\n<em>Chrome拡張</em>\n\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-client</a></li>\n</ul>\n</li>\n<li>\n<em>Dockerイメージ</em>\n\n<ul>\n<li><a href=\"https://hub.docker.com/r/takumon/gitbucket-issue-estimation-server/\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-server</a></li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"導入すると\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B%E3%81%A8\"><i class=\"fa fa-link\"></i></a>導入すると</h2>\n\n<p><a href=\"https://gitbucket.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">GitBucket</a>のissueで作業量が設定できるようになり、<br>\n<a href=\"https://camo.qiitausercontent.com/f13706aedeb42c177c1f4f57975596b5ff002407/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36313030366263392d326438322d663062302d363461322d3037393233633737333963372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/f13706aedeb42c177c1f4f57975596b5ff002407/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36313030366263392d326438322d663062302d363461322d3037393233633737333963372e706e67\" alt=\"導入後_イシュー画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/61006bc9-2d82-f0b0-64a2-07923c7739c7.png\"></a></p>\n\n<p>マイルストーンで作業量ベースの進捗率が見れるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/b86e2b23bc0f4b9fae45b07bfd568b11bc005121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36613462383664382d323937332d656338342d383662632d3632383965343262643636362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b86e2b23bc0f4b9fae45b07bfd568b11bc005121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36613462383664382d323937332d656338342d383662632d3632383965343262643636362e706e67\" alt=\"導入後_マイルストーン画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/6a4b86d8-2973-ec84-86bc-6289e42bd666.png\"></a></p>\n\n<p>またissue一覧画面でも作業量を設定できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/7c2ee31427698b7fe01b30f25b8e31b7e3115e2d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39633835386533622d356463312d313432342d663334662d3562323661633665323066642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7c2ee31427698b7fe01b30f25b8e31b7e3115e2d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39633835386533622d356463312d313432342d663334662d3562323661633665323066642e706e67\" alt=\"導入後_イシュー一覧画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/9c858e3b-5dc1-1424-f34f-5b26ac6e20fd.png\"></a></p>\n\n<h2>\n<span id=\"導入手順\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>導入手順</h2>\n\n<h3>\n<span id=\"1-docker側\" class=\"fragment\"></span><a href=\"#1-docker%E5%81%B4\"><i class=\"fa fa-link\"></i></a>1. Docker側</h3>\n\n<p>GitBucketと同じネットワーク環境に作業量保存用のサーバを立てます。Dockerが導入されていることが前提です。</p>\n\n<ul>\n<li>docker-compose.ymlを作成（MongoDBのボリューム用にdocker-compose.ymlファイルと同階層にdbフォルダを作成してください）</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"docker\">\n<div class=\"code-lang\"><span class=\"bold\">docker-compose.yml</span></div>\n<div class=\"highlight\"><pre>version: \"3.3\"\nservices:\n  server:\n    image: takumon/gitbucket-issue-estimation-server\n    ports:\n      - 3000:3000\n    depends_on:\n      - mongo\n    links:\n      - mongo\n    environment:\n      MONGO_URL: mongodb://mongo:27017/test\n  mongo:\n    image: mongo:3.5.12\n    ports:\n      - 27017:27017\n    volumes:\n      - ./db:/data/db\n</pre></div>\n</div>\n\n<ul>\n<li>docker-conpose.ymlがあるフォルダで下記を実行</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span>docker-compose up <span class=\"nt\">-d</span>\n</pre></div></div>\n\n<h3>\n<span id=\"2-gitbucket側\" class=\"fragment\"></span><a href=\"#2-gitbucket%E5%81%B4\"><i class=\"fa fa-link\"></i></a>2. GitBucket側</h3>\n\n<p>Chrome拡張をインストールする前に、GitBucketのトークンを発行してメモしておきます。</p>\n\n<ul>\n<li><p>GitBucketヘッダー右上アイコン &gt; Account Setting を選択<br>\n<a href=\"https://camo.qiitausercontent.com/b06f383ce5768cc2c9b84b7bcd92537cbd0f94ef/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34323637363166372d633139392d653139652d633631392d6131383264643035623065612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b06f383ce5768cc2c9b84b7bcd92537cbd0f94ef/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34323637363166372d633139392d653139652d633631392d6131383264643035623065612e706e67\" alt=\"導入手順_GitBucketトークン発行_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/426761f7-c199-e19e-c619-a182dd05b0ea.png\"></a><br>\n<br></p></li>\n<li><p>左メニュー Applicationsを選択し、Generate new tokenのToken descriptionにトークンの概要を記載、その後<code>Generate token</code>ボタンをクリック<br>\n<a href=\"https://camo.qiitausercontent.com/e21ff3f5214f3833cc66ed4d9cf2037b31c6d02f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64313836663730322d663764622d353231652d366436642d6564636133313836643931352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e21ff3f5214f3833cc66ed4d9cf2037b31c6d02f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64313836663730322d663764622d353231652d366436642d6564636133313836643931352e706e67\" alt=\"導入手順_GitBucketトークン発行_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/d186f702-f7db-521e-6d6d-edca3186d915.png\"></a><br>\n<br></p></li>\n<li><p>発行されたトークンをコピー（後の手順で使います）<br>\n<a href=\"https://camo.qiitausercontent.com/d46de4cb3222a8304001bbc2f89abc1e14b2cba8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30633830346661662d666431332d383064322d386365392d6535303439323262623534612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d46de4cb3222a8304001bbc2f89abc1e14b2cba8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30633830346661662d666431332d383064322d386365392d6535303439323262623534612e706e67\" alt=\"導入手順_GitBucketトークン発行_３.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/0c804faf-fd13-80d2-8ce9-e504922bb54a.png\"></a></p></li>\n</ul>\n\n<h3>\n<span id=\"3-chrome-extension側\" class=\"fragment\"></span><a href=\"#3-chrome-extension%E5%81%B4\"><i class=\"fa fa-link\"></i></a>3. Chrome Extension側</h3>\n\n<ul>\n<li><p>Chromeを開きChromeウェブストアで<a href=\"https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-client</a>をインストール<br>\n<a href=\"https://camo.qiitausercontent.com/b7b7e21c6391cd1436ad73eb356bdec6f93bb3b4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63336365666639382d313731372d626566302d306465392d3836313736303638613635632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b7b7e21c6391cd1436ad73eb356bdec6f93bb3b4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63336365666639382d313731372d626566302d306465392d3836313736303638613635632e706e67\" alt=\"導入手順_GitBucket_拡張インストール_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/c3ceff98-1717-bef0-0de9-86176068a65c.png\"></a><br>\n<br></p></li>\n<li>\n<p>右上の「E」アイコンをクリック、下記情報を入力し<code>Save</code>ボタンクリック</p>\n\n<ul>\n<li>\n<strong>gitbucket-issue-estimation-server URL</strong>\n\n<ul>\n<li>サーバ側の手順で立てたサーバのURL 例： <code>http://127.0.0.1:3000</code> </li>\n</ul>\n</li>\n<li>\n<strong>GitBucket Token</strong>\n\n<ul>\n<li>GitBucket側の手順でメモしたトークン\n<a href=\"https://camo.qiitausercontent.com/be5ab7568b1a4eee506be3546cae994189e34d15/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66366162333739622d613835322d366562342d663634382d6131346437353139663365622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/be5ab7568b1a4eee506be3546cae994189e34d15/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66366162333739622d613835322d366562342d663634382d6131346437353139663365622e706e67\" alt=\"導入手順_GitBucketトークン発行_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f6ab379b-a852-6eb4-f648-a14d7519f3eb.png\"></a>\n<br>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"具体的な仕組み\" class=\"fragment\"></span><a href=\"#%E5%85%B7%E4%BD%93%E7%9A%84%E3%81%AA%E4%BB%95%E7%B5%84%E3%81%BF\"><i class=\"fa fa-link\"></i></a>具体的な仕組み</h2>\n\n<p>Docker側はMongoDBとNode.jsを使っていて、issueの作業量の検索登録・更新・削除APIを提供しているだけです。<br>\nChrome拡張側で下記のように全体をコントロールしています。</p>\n\n<p><strong>(1)</strong> ・・・　GitBucketの画面からissueとマイルストーンの情報を取得、issueの作業量、作業量ベースの進捗率を画面に挿入<br>\n<strong>(2)</strong> ・・・　画面から取得したissueの情報をもとに詳細情報を取得<br>\n<strong>(3)</strong> ・・・　issueの作業量を検索・登録・更新・削除</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/d5736e48c469204a17566c6cfb4003420add2c8e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63616435323063332d376439632d666134372d326262302d3732633534663638383233362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d5736e48c469204a17566c6cfb4003420add2c8e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63616435323063332d376439632d666134372d326262302d3732633534663638383233362e706e67\" alt=\"全体像.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/cad520c3-7d9c-fa47-2bb0-72c54f688236.png\"></a></p>\n\n<h2>\n<span id=\"chrome拡張作成時にgitbucket-apiまわりで躓いたこと\" class=\"fragment\"></span><a href=\"#chrome%E6%8B%A1%E5%BC%B5%E4%BD%9C%E6%88%90%E6%99%82%E3%81%ABgitbucket-api%E3%81%BE%E3%82%8F%E3%82%8A%E3%81%A7%E8%BA%93%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>Chrome拡張作成時にGitBucket APIまわりで躓いたこと</h2>\n\n<p><a href=\"https://github.com/gitbucket/gitbucket/wiki/API-WebHook\" rel=\"nofollow noopener\" target=\"_blank\">GitBucketのAPI</a>は<a href=\"https://developer.github.com/v3/\" rel=\"nofollow noopener\" target=\"_blank\">GithubのREST API v3</a>に準拠していますが、一部実装されていない部分があったので、Chrome拡張作成時に躓きました。</p>\n\n<h3>\n<span id=\"stateallが効かない\" class=\"fragment\"></span><a href=\"#stateall%E3%81%8C%E5%8A%B9%E3%81%8B%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a><code>state=all</code>が効かない</h3>\n\n<p>未解決issueと解決済issue両方をいっぺんに取得したかったのですが、GitBucketのAPIでは<code>state=all</code>が効きません。そのため<code>state=open</code>と<code>state=closed</code>を指定して２回に分けて取得する実装にしました。</p>\n\n<h4>\n<span id=\"per_pageが効かない1度に25件が最大\" class=\"fragment\"></span><a href=\"#per_page%E3%81%8C%E5%8A%B9%E3%81%8B%E3%81%AA%E3%81%841%E5%BA%A6%E3%81%AB25%E4%BB%B6%E3%81%8C%E6%9C%80%E5%A4%A7\"><i class=\"fa fa-link\"></i></a><code>per_page</code>が効かない（1度に25件が最大）</h4>\n\n<p>GitBucketのAPIでは<code>per_page</code>（検索時の１ページあたりの件数）が実装されていません。<br>\nそのためマイルストーンに紐づくissue取得時は、１ページ目を検索して取得結果が25件の場合は次のページも検索するような実装にしました。</p>\n\n<h4>\n<span id=\"closed_atクローズ日が取得できない\" class=\"fragment\"></span><a href=\"#closed_at%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%BA%E6%97%A5%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a><code>closed_at</code>（クローズ日）が取得できない</h4>\n\n<p>Chrome拡張作成当初は、バーンダウンチャートを表示しようと思っていたのですが、issueのクローズ日が取得出来ないので断念しました。</p>\n\n<h4>\n<span id=\"-参考にさせていただいたサイト\" class=\"fragment\"></span><a href=\"#-%E5%8F%82%E8%80%83%E3%81%AB%E3%81%95%E3%81%9B%E3%81%A6%E3%81%84%E3%81%9F%E3%81%A0%E3%81%84%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88\"><i class=\"fa fa-link\"></i></a>※ 参考にさせていただいたサイト</h4>\n\n<ul>\n<li><a href=\"https://qiita.com/5zm/items/b0b620cdeb9596108418#1%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8C%E6%9C%80%E5%A4%A725%E4%BB%B6%E3%81%A7%E5%85%A8issue%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\" id=\"reference-1c197ca99a2ee070efac\">PythonでGitBucketのIssueをExcel出力する（その後）</a></li>\n<li><a href=\"https://qiita.com/5zm/items/57d7abca8e0d447e326d#2-gitbucket%E3%81%AEapi%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6issues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0\" id=\"reference-7d56ea50a58cb24addc5\">PythonでGitBucketのIssueをExcel出力する（API呼び出し編）</a></li>\n</ul>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>本来こういう追加機能はGitBucketプラグインで作るべきなのかもしれませんが、今回はChrome拡張とDockerイメージで実現してみました。<br>\nChrome拡張は任意の画面にJavaScriptやCSSを差し込めるので、既存のWebサービスををちょっと便利にするのにはうってつけですね。</p>\n","body":"== 2018/4/7 追記 ==========================================\n本記事ではChrome拡張とDockerによって実現していましたが、\nその後GitBucket Plugin化しました。\n\n[gitbucket-issue-estimation-plugin](https://github.com/Takumon/gitbucket-issue-estimation-plugin)\n\n[リリースページ](https://github.com/Takumon/gitbucket-issue-estimation-plugin/releases/tag/0.1)からjarファイルをダウンロードして`<GITBUCKET_HOME>/plugins/`に置くだけで導入可能です。\n== =======================================================\n\n\nGit Advent Calendarが埋まっていなかったので、大晦日ですが代わりに投稿させていただきました。\n\n## はじめに\n[GitBucket](https://gitbucket.github.io/)のマイルストーンの進捗率はissueの件数ベースなので、issueごとに作業量のバラつきがあったりすると現実的な進捗率と乖離してしまいます。\n\nそこで今回は\bChrome拡張とDockerイメージを作成して、\nissueに作業量を設定できるようにして、マイルストーンで作業量ベースの進捗率を確認できるようにしました。\n\nChrome拡張とDockerイメージはどちらも公開しているので簡単に導入できます。是非試してみてください。\n\n\n* *Chrome拡張*\n    * [gitbucket-issue-estimation-client](https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja)\n* *Dockerイメージ*\n    * [gitbucket-issue-estimation-server](https://hub.docker.com/r/takumon/gitbucket-issue-estimation-server/)\n\n## 導入すると\n[GitBucket](https://gitbucket.github.io/)のissueで作業量が設定できるようになり、\n![導入後_イシュー画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/61006bc9-2d82-f0b0-64a2-07923c7739c7.png)\n\n\bマイルストーンで作業量ベースの進捗率が見れるようになります。\n![導入後_マイルストーン画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/6a4b86d8-2973-ec84-86bc-6289e42bd666.png)\n\nまた\bissue\b一覧画面でも作業量を設定できるようになります。\n![導入後_イシュー一覧画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/9c858e3b-5dc1-1424-f34f-5b26ac6e20fd.png)\n\n\n\n\n## 導入手順\n### 1. Docker側\nGitBucketと同じネットワーク環境に作業量\b保存用のサーバを立てます。Dockerが導入されていることが前提です。\n\n* \u001edocker-compose\b.ymlを作成（MongoDBのボリューム用にdocker-compose.ymlファイルと同階層にdbフォルダを作成してください）\n\n```docker:docker-compose.yml\nversion: \"3.3\"\nservices:\n  server:\n    image: takumon/gitbucket-issue-estimation-server\n    ports:\n      - 3000:3000\n    depends_on:\n      - mongo\n    links:\n      - mongo\n    environment:\n      MONGO_URL: mongodb://mongo:27017/test\n  mongo:\n    image: mongo:3.5.12\n    ports:\n      - 27017:27017\n    volumes:\n      - ./db:/data/db\n```\n\n* docker-conpose.ymlがあるフォルダで下記を実行\n\n```bash:\n$ docker-compose up -d\n```\n\n\n### 2. GitBucket側\nChrome拡張をインストールする前に、GitBucketの\bトークンを発行してメモしておきます。\n\n* GitBucketヘッダー右上アイコン > Account Setting\b を選択\n![導入手順_GitBucketトークン発行_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/426761f7-c199-e19e-c619-a182dd05b0ea.png)\n<br>\n\n* 左メニュー Applicationsを選択し、Generate new tokenのToken descriptionにトークンの概要を記載、その後`Generate token`ボタンをクリック\n![導入手順_GitBucketトークン発行_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/d186f702-f7db-521e-6d6d-edca3186d915.png)\n<br>\n\n* 発行されたトークンをコピー（後の手順で使います）\n![導入手順_GitBucketトークン発行_３.png](https://qiita-image-store.s3.amazonaws.com/0/49915/0c804faf-fd13-80d2-8ce9-e504922bb54a.png)\n\n\n### 3. Chrome Extension側\n* Chromeを開きChromeウェブストアで[gitbucket-issue-estimation-client](https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja)をインストール\n![導入手順_GitBucket_拡張インストール_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/c3ceff98-1717-bef0-0de9-86176068a65c.png)\n<br>\n\n* \b右上の「E」アイコンをクリック、下記情報を入力し`Save`ボタンクリック\n    * **gitbucket-issue-estimation-server URL**\n        * サーバ側の手順で立てたサーバのURL 例： `http://127.0.0.1:3000` \n    * **GitBucket Token**\n        * GitBucket側の手順でメモしたトークン\n![導入手順_GitBucketトークン発行_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f6ab379b-a852-6eb4-f648-a14d7519f3eb.png)\n<br>\n\n## 具体的な仕組み\nDocker側はMongoDBとNode.jsを使っていて、issueの作業量の検索登録・更新・削除APIを提供しているだけです。\nChrome拡張側で下記のように全体をコントロールしています。\n\n**(1)** ・・・　GitBucketの画面からissueとマイルストーンの情報を取得、issueの作業量、作業量ベースの進捗率を画面に挿入\n**(2)** ・・・　画面から取得したissueの情報をもとに詳細情報を取得\n**(3)** ・・・　issueの作業量を検索・登録・更新・削除\n\n![全体像.png](https://qiita-image-store.s3.amazonaws.com/0/49915/cad520c3-7d9c-fa47-2bb0-72c54f688236.png)\n\n\n\n## Chrome拡張作成時にGitBucket APIまわりで躓いたこと\n[GitBucketのAPI](https://github.com/gitbucket/gitbucket/wiki/API-WebHook)は[GithubのREST API v3](https://developer.github.com/v3/)に準拠していますが、一部実装されていない部分があったので、Chrome拡張作成時に躓きました。\n\n### `state=all`が効かない\n未解決issueと解決済issue両方をいっぺんに取得したかったのですが、GitBucketのAPIでは`state=all`が効きません。そのため`state=open`と`state=closed`を指定して２回に分けて取得する実装にしました。\n\n#### `per_page`が効かない（\b1度に25件が最大）\nGitBucketのAPIでは`per_page`（検索時の１ページあたりの件数）が実装されていません。\nそのためマイルストーンに紐づくissue取得時は、１ページ目を検索して取得結果が25件の場合は次のページも検索するような実装にしました。\n\n#### `closed_at`（クローズ日）が取得できない\nChrome拡張作成当初は、バーンダウンチャートを表示しようと思っていたのですが、issueのクローズ日が取得出来ないので断念しました。\n\n#### ※ 参考にさせていただいたサイト\n* [PythonでGitBucketのIssueをExcel出力する（その後）](https://qiita.com/5zm/items/b0b620cdeb9596108418#1%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8C%E6%9C%80%E5%A4%A725%E4%BB%B6%E3%81%A7%E5%85%A8issue%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84)\n* [PythonでGitBucketのIssueをExcel出力する（API呼び出し編）](https://qiita.com/5zm/items/57d7abca8e0d447e326d#2-gitbucket%E3%81%AEapi%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6issues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0)\n\n\n## まとめ\n本来こういう追加機能はGitBucketプラグインで作るべきなのかもしれませんが、今回はChrome拡張とDockerイメージで実現してみました。\nChrome拡張は任意の画面にJavaScriptやCSSを差し込めるので、既存のWebサービスををちょっと便利にするのにはうってつけですね。\n\n","comments_count":0,"created_at":"2017-12-31T23:49:04+09:00","likes_count":6,"reactions_count":0},"relations":[{"node":{"fields":{"slug":"/b4c7d1b9-428f-569a-af40-527d89794a77/","title":"TypeScriptで簡単にChrome Extensionを作る方法","date":"2017-12-20T02:36:27+09:00","excerpt":"Githubで草を生やす活動は楽しいですね!増えてきて芝みたいになると達成感があって、モチベーションも上がります。ところで、この前の10/30に草がハロウィン仕様になっていたのを見て、草を自分の好みの色を変更できればもっと楽しくなるのでは?...","tags":["JavaScript","GitHub","TypeScript","chrome-extension","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"b4c7d1b9-428f-569a-af40-527d89794a77","title":"TypeScriptで簡単にChrome Extensionを作る方法","rendered_body":"<p>Githubで草を生やす活動は楽しいですね!<br>\n増えてきて芝みたいになると達成感があって、モチベーションも上がります。<br>\nところで、この前の10/30に草がハロウィン仕様になっていたのを見て、<br>\n草を自分の好みの色を変更できればもっと楽しくなるのでは?と思い<br>\n<a href=\"https://chrome.google.com/webstore/detail/github-contributions-pain/bdibnecenojddgmjplnfehpjdmkiddok?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">草の色が変更できる（ついでにお絵描きもできる）Chrome Extension</a>を作りました。<br>\n<strong>その時に<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使って、TypeScriptで簡単にChrome Extensionが作れたので、アプリ作成から公開までの手順をまとめます。</strong></p>\n\n<h2>\n<span id=\"1-プロジェクトの雛形を生成する\" class=\"fragment\"></span><a href=\"#1-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E9%9B%9B%E5%BD%A2%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>1. プロジェクトの雛形を生成する</h2>\n\n<p>yomanと<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>で簡単に雛形が作れるのでコレらを使っていきます。</p>\n\n<ul>\n<li>\n<code>yoman</code>と<code>generator-chrome-extension-kickstart-typescript</code>をグローバルインストールします</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install -g yo generator-chrome-extension-kickstart-typescript \n</pre></div></div>\n\n<ul>\n<li>プロジェクトのルートフォルダを作成後、ルートフォルダに移動して<code>yo</code>コマンドで雛形を生成します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ mkdir project\n$ cd project\n$ yo chrome-extension-kickstart-typescript \n</pre></div></div>\n\n<ul>\n<li>いくつか質問されるので適当に答えます\n\n<ul>\n<li>\n<strong>What would you like to call this extension?</strong>\n\n<ul>\n<li>プロジェクト名を入力します。デフォルトはプロジェクトのフォルダ名</li>\n</ul>\n</li>\n<li>\n<strong>And how would you call it if you only had 12 characters (short_name)?</strong>\n\n<ul>\n<li>プロジェクトの略称を12文字以内で入力します</li>\n</ul>\n</li>\n<li>\n<strong>How would you like to describe this extension?</strong>\n\n<ul>\n<li>プロジェクト概要を入力します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to use UI Action?</strong>\n\n<ul>\n<li>作りたいUI Actionに応じて、<code>No</code>,<code>Browser</code>,<code>Page</code>のいずれかを選択します\n\n<ul>\n<li>\n<code>No</code> ・・・ UI Actionを使わない場合</li>\n<li>\n<code>Browser</code> ・・・ ツールバーの右にアイコンが常駐するタイプのChrome拡張を作成する場合</li>\n<li>\n<code>Page</code> ・・・ 特定のWebサイト観覧時のみにアドレスバー右にアイコンが表示されるタイプのChrome拡張を作成する場合</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to override a chrome page?</strong>\n\n<ul>\n<li>Chromeの内部ページを書き換えるかどうかで、<code>No</code>,<code>Bookmarks Page</code>,<code>History Page</code>,<code>Newtab Page</code>のいずれかを選択します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like more UI Features?</strong>\n\n<ul>\n<li>作りたいUIを複数選択します\n\n<ul>\n<li>\n<code>Options Page</code> ・・・ オプション画面を作りたい場合</li>\n<li>\n<code>Devtools Page</code> ・・・ 開発者ツールを拡張したい場合</li>\n<li>\n<code>Content Scripts</code> ・・・ Webで表示している画面にJavaScriptを差し込んで何か処理をしたい場合</li>\n<li>\n<code>Omnibox</code> ・・・ アドレスバーを拡張したい時に選択</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to use permissions?</strong>\n\n<ul>\n<li>使用するパーミッションを複数選択します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to install promo images for the Chrome Web Store?</strong>\n\n<ul>\n<li>Chromeストアで使う宣伝用画像を自動で生成するかを選択します</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<p>※自分は下記のように答えました<br>\n<strong>What would you like to call this extension?</strong> =&gt; github-contributions-paint<br>\n<strong>And how would you call it if you only had 12 characters (short_name)?</strong> =&gt;  github-paint<br>\n<strong>How would you like to describe this extension?</strong> =&gt;  You can paint github contributions!<br>\n<strong>Would you like to use UI Action?</strong> =&gt; Browser<br>\n<strong>Would you like to override a chrome page?</strong> =&gt;  No<br>\n<strong>Would you like more UI Features?</strong> =&gt;  Content Scripts<br>\n<strong>Would you like to use permissions?</strong> =&gt;  Tabs<br>\n<strong>Would you like to install promo images for the Chrome Web Store?</strong> =&gt;  Yes</p>\n\n<ul>\n<li>すると雛形が生成されます</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">生成された雛形のフォルダ構成</span></div>\n<div class=\"highlight\"><pre>github-contributions-paint\n├── README.md\n├── app\n│   ├── images       　　　    　・・・Chromeウェブストア公開時に必要なアイコン格納フォルダ\n│   │   ├── icon-128.png\n│   │   ├── icon-16.png\n│   │   ├── icon-19.png\n│   │   └── icon-38.png\n│   ├── manifest.json          ・・・Chrome拡張の設定を定義するファイル\n│   ├── pages                  ・・・HTMLファイル格納フォルダ\n│   │   └── popup.html         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── scripts                ・・・TSファイル格納フォルダ\n│   │   ├── background.ts      ・・・バックグランド処理を記述するファイル\n│   │   └── popup.ts           ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── styles                 ・・・CSSファイル格納フォルダ\n│   │   └── popup.scss         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── _locales\n│   │   └── en\n│   │       └── messages.json ・・・アプリの設定ファイル\n│   └── fonts\n├── promo                     ・・・Chromeウェブストア公開時に必要な宣伝用画像の格納フォルダ\n│   ├── Chrome-Webstore-Icon_128x128.png\n│   ├── Promo-Image-Large_920x680.png\n│   ├── Promo-Image-Marquee_1400x560.png\n│   ├── Promo-Image-Small_440x280.png\n│   ├── Screenshot_1280x800.png\n│   └── Screenshot_640x400.png\n├── dist\n├── gulpfile.babel.js\n├── node_modules\n├── package-lock.json\n├── package.json\n├── tasks\n├── tsconfig.json\n└── tslint.json\n\n</pre></div>\n</div>\n\n<ul>\n<li>最後にTypeScriptをグローバルインストールしていない場合は、グローバルインストールまたはプロジェクトにインストールします</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install typescript --save-dev\n</pre></div></div>\n\n<p>==2018/11/24 追記(ここから)==</p>\n\n<ul>\n<li>このまま次手順にいくと警告がでるのでそれを防ぐためにgulpのバージョンを下げます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install gulp@3.9.0 --save-dev\n</pre></div></div>\n\n<p>※関連する<a href=\"https://github.com/gulpjs/gulp/issues/1631\" rel=\"nofollow noopener\" target=\"_blank\">issue</a>、<a href=\"https://stackoverflow.com/questions/48568942/failed-to-load-external-module-babel-register-while-gulp\" rel=\"nofollow noopener\" target=\"_blank\">stackoverflow</a></p>\n\n<p>==2018/11/24 追記(ここまで)==</p>\n\n<h2>\n<span id=\"2-作ったchrome-extensionを動かしてみる\" class=\"fragment\"></span><a href=\"#2-%E4%BD%9C%E3%81%A3%E3%81%9Fchrome-extension%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>2. 作ったChrome Extensionを動かしてみる</h2>\n\n<p>雛形を作成したら早速動かすことができます</p>\n\n<ul>\n<li>ビルドコマンドを実行します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run dev:chrome\n</pre></div></div>\n\n<ul>\n<li><p>Chromeで<code>chrome://extensions</code>を開いて<code>パッケージ化されていない拡張機能を読み込む</code>ボタンをクリック<br>\n<a href=\"https://camo.qiitausercontent.com/88e144ea0fc880ccec17978afc9ec782fb0d62c1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35613534396134352d386563342d383935352d623733332d3837353534396638616433312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/88e144ea0fc880ccec17978afc9ec782fb0d62c1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35613534396134352d386563342d383935352d623733332d3837353534396638616433312e706e67\" alt=\"手順_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5a549a45-8ec4-8955-b733-875549f8ad31.png\"></a></p></li>\n<li><p>プロジェクトルート/dist配下の<code>chrome</code>フォルダを選択<br>\n<a href=\"https://camo.qiitausercontent.com/53813821851801eddbed514961987f9070733381/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393161313636652d366532652d336633372d373130652d6565373532306339336563322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/53813821851801eddbed514961987f9070733381/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393161313636652d366532652d336633372d373130652d6565373532306339336563322e706e67\" alt=\"操作_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f91a166e-6e2e-3f37-710e-ee7520c93ec2.png\"></a></p></li>\n<li><p>するとプロジェクトが<a>Chrome Extension管理画面</a>に追加されて、ブラウザ右上にアイコンが表示されます<br>\n<a href=\"https://camo.qiitausercontent.com/e2e0fba31b666b0fea44ded1ded106236dd280e8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36316232653131332d653532302d376566382d633437652d3432366265393361613834622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e2e0fba31b666b0fea44ded1ded106236dd280e8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36316232653131332d653532302d376566382d633437652d3432366265393361613834622e706e67\" alt=\"動作確認1_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/61b2e113-e520-7ef8-c47e-426be93aa84b.png\"></a></p></li>\n<li><p>アイコンをクリックして動作検証ができます<br>\n<a href=\"https://camo.qiitausercontent.com/909be0f655c64c11846b9b3ca31630357ddd7121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33666631316537332d383162332d636435612d386537302d3961373534613661393936352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/909be0f655c64c11846b9b3ca31630357ddd7121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33666631316537332d383162332d636435612d386537302d3961373534613661393936352e706e67\" alt=\"動作確認_11.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/3ff11e73-81b3-cd5a-8e70-9a754a6a9965.png\"></a></p></li>\n</ul>\n\n<h2>\n<span id=\"3-開発中にchrome-extensionの動作確認する\" class=\"fragment\"></span><a href=\"#3-%E9%96%8B%E7%99%BA%E4%B8%AD%E3%81%ABchrome-extension%E3%81%AE%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>3. 開発中にChrome Extensionの動作確認する</h2>\n\n<p>雛形の動作検証ができたらTypeScriptファイルを編集して処理を追加していきます。<br>\n<code>npm run dev:chrome</code>を実行した後、下記手順繰り返すことで、ソースコードを修正しながら随時動作検証ができます。</p>\n\n<ul>\n<li>資産（TypeScriptやHTML,CSS）を修正する（勝手にビルドが走ります）</li>\n<li>最新のビルド資産を取り込むため<a>Chrome Extension管理画面</a>でリロードをクリックします\n<a href=\"https://camo.qiitausercontent.com/090a13aa3e617e29329421ec4c5fba4a56e1fb9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35663936353163362d373337662d643664622d383062662d3434613731363662323030352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/090a13aa3e617e29329421ec4c5fba4a56e1fb9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35663936353163362d373337662d643664622d383062662d3434613731363662323030352e706e67\" alt=\"開発手順_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5f9651c6-737f-d6db-80bf-44a7166b2005.png\"></a>\n</li>\n<li>Chrome Extensionの動作確認をする</li>\n</ul>\n\n<h2>\n<span id=\"4-アイコンと宣伝用画像を作る\" class=\"fragment\"></span><a href=\"#4-%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%81%A8%E5%AE%A3%E4%BC%9D%E7%94%A8%E7%94%BB%E5%83%8F%E3%82%92%E4%BD%9C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>4. アイコンと宣伝用画像を作る</h2>\n\n<p>アプリを公開する前に、アイコンと宣伝用画像を作成し、雛形生成時のデフォルト資産と差し替えます。<br>\nデザイナーさんなら苦労しないでしょうが、自分はこれが一番大変でした。<br>\n3つのアイコンと3つの宣伝用画像が必要です。</p>\n\n<h3>\n<span id=\"アイコン\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3\"><i class=\"fa fa-link\"></i></a>アイコン</h3>\n\n<ul>\n<li>128x128\n\n<ul>\n<li>必須。インストール時やChromeウェブストアで表示する用</li>\n</ul>\n</li>\n<li>48x48\n\n<ul>\n<li>拡張機能の管理ページで表示する用</li>\n</ul>\n</li>\n<li>16x16\n\n<ul>\n<li>ブラウザ右上に表示する用</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"宣伝用画像\" class=\"fragment\"></span><a href=\"#%E5%AE%A3%E4%BC%9D%E7%94%A8%E7%94%BB%E5%83%8F\"><i class=\"fa fa-link\"></i></a>宣伝用画像</h3>\n\n<ul>\n<li>440x280\n\n<ul>\n<li>必須</li>\n</ul>\n</li>\n<li>920x680\n\n<ul>\n<li>大きめの画像</li>\n</ul>\n</li>\n<li>1400x560\n\n<ul>\n<li>ChromeExtensionをChrome Storeで選択した時に表示される画像</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"5-chromeウェブストアに公開する\" class=\"fragment\"></span><a href=\"#5-chrome%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B9%E3%83%88%E3%82%A2%E3%81%AB%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>5. Chromeウェブストアに公開する</h2>\n\n<ul>\n<li>雛形生成時バージョンが0.0.0になっており、バージョンが低すぎて公開できない状態なので、<code>manifest.json</code>と<code>package.json</code>のバージョン指定を0.0.1にあげます</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">manifest.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n  </span><span class=\"s2\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0.0.1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">&lt;-</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">0</span><span class=\"err\">から</span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">1</span><span class=\"err\">にあげる</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n  </span><span class=\"s2\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0.0.1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">&lt;-</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">0</span><span class=\"err\">から</span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">1</span><span class=\"err\">にあげる</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>下記コマンドで公開用のzipファイルを作成します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run build:chrome\n</pre></div></div>\n\n<ul>\n<li><p><a href=\"https://chrome.google.com/webstore/category/extensions\" rel=\"nofollow noopener\" target=\"_blank\">Chromeウェブストア</a>のデベロッパーダッシュボードを開きます。Chromeアカウントでログインします<br>\n<a href=\"https://camo.qiitausercontent.com/d0db218423075317e350940d46d6510353fc81bd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65646234386163392d303138312d316437382d633761642d6130383237313261663031632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d0db218423075317e350940d46d6510353fc81bd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65646234386163392d303138312d316437382d633761642d6130383237313261663031632e706e67\" alt=\"アプリ登録_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/edb48ac9-0181-1d78-c7ad-a082712af01c.png\"></a></p></li>\n<li><p>ダッシュボードで<code>新しいアイテムを追加する</code>を選択します<br>\n<a href=\"https://camo.qiitausercontent.com/70b8f467a4819f7fd2251cf96abf3749b7626eeb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37383761336132352d326539332d363138362d313765642d3662313962626233626162352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/70b8f467a4819f7fd2251cf96abf3749b7626eeb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37383761336132352d326539332d363138362d313765642d3662313962626233626162352e706e67\" alt=\"アプリ登録_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/787a3a25-2e93-6186-17ed-6b19bbb3bab5.png\"></a></p></li>\n<li><p><code>ファイルを追加</code>で作成したzipファイル(プロジェクトルート/packages配下にあります)を選択後、<code>アップロード</code>を選択します<br>\n<a href=\"https://camo.qiitausercontent.com/2bc72004e70eb79c898506904f452d396754f39f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32323362343632342d643839322d336562382d356561382d3733633461616632623562382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2bc72004e70eb79c898506904f452d396754f39f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32323362343632342d643839322d336562382d356561382d3733633461616632623562382e706e67\" alt=\"アプリ登録_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/223b4624-d892-3eb8-5ea8-73c4aaf2b5b8.png\"></a></p></li>\n<li><p>説明、アイコン、宣伝用画像、カテゴリを入力して<code>変更を公開</code>をクリックします<br>\n<a href=\"https://camo.qiitausercontent.com/efa7c9ab0ced7326af8c7cb2d03fe9c2282e7f11/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323466303335352d666537622d373931382d326437352d3039633333636365356530302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/efa7c9ab0ced7326af8c7cb2d03fe9c2282e7f11/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323466303335352d666537622d373931382d326437352d3039633333636365356530302e706e67\" alt=\"登録_5.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/724f0355-fe7b-7918-2d75-09c33cce5e00.png\"></a></p></li>\n<li><p>これで公開作業は完了です。しばらくするとChromeウェブストアに公開されます</p></li>\n</ul>\n\n<h2>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h2>\n\n<p>今回は<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使って、TypeScriptでChrome Extensionを作成、公開する手順をまとめました。<br>\n最初はTypeScriptでChrome Extensionを作るのは、ビルドの設定など色々めんどくさそうだぁと思っていましたが、<br>\n<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使うことで、簡単に作成から公開まで実現できました。<br>\nブラウザでのちょっとした作業を効率化するのにChrome Extentionは非常に強力なツールなので、今後なにかアイディアがあればまた作ってみたいと思います。</p>\n","body":"Githubで草を生やす活動は楽しいですね!\n増えてきて芝みたいになると達成感があって、モチベーションも上がります。\nところで、この前の10/30に草がハロウィン仕様になっていたのを見て、\n草を自分の好みの色を変更できればもっと楽しくなるのでは?と思い\n[草の色が変更できる（ついでにお絵描きもできる）Chrome Extension](https://chrome.google.com/webstore/detail/github-contributions-pain/bdibnecenojddgmjplnfehpjdmkiddok?hl=ja)を作りました。\n**その時に[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使って、TypeScriptで簡単にChrome Extensionが作れたので、アプリ作成から公開までの手順をまとめます。**\n\n## 1. プロジェクトの雛形を生成する\nyomanと[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)で簡単に雛形が作れるのでコレらを使っていきます。\n\n* `yoman`と`generator-chrome-extension-kickstart-typescript`をグローバルインストールします\n\n```\n$ npm install -g yo generator-chrome-extension-kickstart-typescript \n```\n* プロジェクトのルートフォルダを作成後、ルートフォルダに移動して`yo`コマンドで雛形を生成します\n\n```\n$ mkdir project\n$ cd project\n$ yo chrome-extension-kickstart-typescript \n```\n\n* いくつか質問されるので適当に答えます\n    * **What would you like to call this extension?**\n        * プロジェクト名を入力します。デフォルトはプロジェクトのフォルダ名\n    * **And how would you call it if you only had 12 characters (short_name)?**\n        * プロジェクトの略称を12文字以内で入力します\n    * **How would you like to describe this extension?**\n        * プロジェクト概要を入力します\n    * **Would you like to use UI Action?**\n        * 作りたいUI Actionに応じて、`No`,`Browser`,`Page`のいずれかを選択します\n            * `No` ・・・ UI Actionを使わない場合\n            * `Browser` ・・・ ツールバーの右にアイコンが常駐するタイプのChrome拡張を作成する場合\n            * `Page` ・・・ 特定のWebサイト観覧時のみにアドレスバー右にアイコンが表示されるタイプのChrome拡張を作成する場合\n    * **Would you like to override a chrome page?**\n        * Chromeの内部ページを書き換えるかどうかで、`No`,`Bookmarks Page`,`History Page`,`Newtab Page`のいずれかを選択します\n    * **Would you like more UI Features?**\n        * 作りたいUIを複数選択します\n            * `Options Page` ・・・ オプション画面を作りたい場合\n            * `Devtools Page` ・・・ 開発者ツールを拡張したい場合\n            * `Content Scripts` ・・・ Webで表示している画面にJavaScriptを差し込んで何か処理をしたい場合\n            * `Omnibox` ・・・ アドレスバーを拡張したい時に選択\n    * **Would you like to use permissions?**\n        * 使用するパーミッションを複数選択します\n    * **Would you like to install promo images for the Chrome Web Store?**\n        * Chromeストアで使う宣伝用画像を自動で生成するかを選択します\n\n\n※自分は下記のように答えました\n**What would you like to call this extension?** => github-contributions-paint\n**And how would you call it if you only had 12 characters (short_name)?** =>  github-paint\n**How would you like to describe this extension?** =>  You can paint github contributions!\n**Would you like to use UI Action?** => Browser\n**Would you like to override a chrome page?** =>  No\n**Would you like more UI Features?** =>  Content Scripts\n**Would you like to use permissions?** =>  Tabs\n**Would you like to install promo images for the Chrome Web Store?** =>  Yes\n\n* すると雛形が生成されます\n\n```:生成された雛形のフォルダ構成\ngithub-contributions-paint\n├── README.md\n├── app\n│   ├── images       　　　    　・・・Chromeウェブストア公開時に必要なアイコン格納フォルダ\n│   │   ├── icon-128.png\n│   │   ├── icon-16.png\n│   │   ├── icon-19.png\n│   │   └── icon-38.png\n│   ├── manifest.json          ・・・Chrome拡張の設定を定義するファイル\n│   ├── pages                  ・・・HTMLファイル格納フォルダ\n│   │   └── popup.html         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── scripts                ・・・TSファイル格納フォルダ\n│   │   ├── background.ts      ・・・バックグランド処理を記述するファイル\n│   │   └── popup.ts           ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── styles                 ・・・CSSファイル格納フォルダ\n│   │   └── popup.scss         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── _locales\n│   │   └── en\n│   │       └── messages.json ・・・アプリの設定ファイル\n│   └── fonts\n├── promo                     ・・・Chromeウェブストア公開時に必要な宣伝用画像の格納フォルダ\n│   ├── Chrome-Webstore-Icon_128x128.png\n│   ├── Promo-Image-Large_920x680.png\n│   ├── Promo-Image-Marquee_1400x560.png\n│   ├── Promo-Image-Small_440x280.png\n│   ├── Screenshot_1280x800.png\n│   └── Screenshot_640x400.png\n├── dist\n├── gulpfile.babel.js\n├── node_modules\n├── package-lock.json\n├── package.json\n├── tasks\n├── tsconfig.json\n└── tslint.json\n\n```\n\n* 最後にTypeScriptをグローバルインストールしていない場合は、グローバルインストールまたはプロジェクトにインストールします\n\n```\n$ npm install typescript --save-dev\n```\n\n==2018/11/24 追記(ここから)==\n\n* このまま次手順にいくと警告がでるのでそれを防ぐためにgulpのバージョンを下げます。\n\n```\n$ npm install gulp@3.9.0 --save-dev\n```\n\n<small>※関連する[issue](https://github.com/gulpjs/gulp/issues/1631)、[stackoverflow](https://stackoverflow.com/questions/48568942/failed-to-load-external-module-babel-register-while-gulp)</small>\n\n==2018/11/24 追記(ここまで)==\n## 2. 作ったChrome Extensionを動かしてみる\n雛形を作成したら早速動かすことができます\n\n* ビルドコマンドを実行します\n\n```\n$ npm run dev:chrome\n```\n\n* Chromeで`chrome://extensions`を開いて`パッケージ化されていない拡張機能を読み込む`ボタンをクリック\n![手順_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5a549a45-8ec4-8955-b733-875549f8ad31.png)\n\n* プロジェクトルート/dist配下の`chrome`フォルダを選択\n![操作_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f91a166e-6e2e-3f37-710e-ee7520c93ec2.png)\n\n* するとプロジェクトが[Chrome Extension管理画面](chrome://extensions/)に追加されて、ブラウザ右上にアイコンが表示されます\n![動作確認1_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/61b2e113-e520-7ef8-c47e-426be93aa84b.png)\n\n\n* アイコンをクリックして動作検証ができます\n![動作確認_11.png](https://qiita-image-store.s3.amazonaws.com/0/49915/3ff11e73-81b3-cd5a-8e70-9a754a6a9965.png)\n\n\n## 3. 開発中にChrome Extensionの動作確認する\n雛形の動作検証ができたらTypeScriptファイルを編集して処理を追加していきます。\n`npm run dev:chrome`を実行した後、下記手順繰り返すことで、ソースコードを修正しながら随時動作検証ができます。\n\n* 資産（TypeScriptやHTML,CSS）を修正する（勝手にビルドが走ります）\n* 最新のビルド資産を取り込むため[Chrome Extension管理画面](chrome://extensions/)でリロードをクリックします\n![開発手順_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5f9651c6-737f-d6db-80bf-44a7166b2005.png)\n* Chrome Extensionの動作確認をする\n\n## 4. アイコンと宣伝用画像を作る\nアプリを公開する前に、アイコンと宣伝用画像を作成し、雛形生成時のデフォルト資産と差し替えます。\nデザイナーさんなら苦労しないでしょうが、自分はこれが一番大変でした。\n3つのアイコンと3つの宣伝用画像が必要です。\n\n### アイコン\n* 128x128\n    * 必須。インストール時やChromeウェブストアで表示する用\n* 48x48\n    * 拡張機能の管理ページで表示する用\n* 16x16\n    * ブラウザ右上に表示する用\n  \n### 宣伝用画像\n* 440x280\n    * 必須\n* 920x680\n    * 大きめの画像\n* 1400x560\n    * ChromeExtensionをChrome Storeで選択した時に表示される画像\n\n## 5. Chromeウェブストアに公開する\n* 雛形生成時バージョンが0.0.0になっており、バージョンが低すぎて公開できない状態なので、`manifest.json`と`package.json`のバージョン指定を0.0.1にあげます\n\n```json:manifest.json\n{\n  ・・・\n  \"version\": \"0.0.1\", <- 0.0.0から0.0.1にあげる\n  ・・・\n}\n```\n\n```json:package.json\n{\n  ・・・\n  \"version\": \"0.0.1\", <- 0.0.0から0.0.1にあげる\n  ・・・\n}\n```\n\n* 下記コマンドで公開用のzipファイルを作成します\n\n```\n$ npm run build:chrome\n```\n\n* [Chromeウェブストア](https://chrome.google.com/webstore/category/extensions)のデベロッパーダッシュボードを開きます。Chromeアカウントでログインします\n![アプリ登録_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/edb48ac9-0181-1d78-c7ad-a082712af01c.png)\n\n* ダッシュボードで`新しいアイテムを追加する`を選択します\n![アプリ登録_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/787a3a25-2e93-6186-17ed-6b19bbb3bab5.png)\n\n* `ファイルを追加`で作成したzipファイル(プロジェクトルート/packages配下にあります)を選択後、`アップロード`を選択します\n![アプリ登録_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/223b4624-d892-3eb8-5ea8-73c4aaf2b5b8.png)\n\n* 説明、アイコン、宣伝用画像、カテゴリを入力して`変更を公開`をクリックします\n![登録_5.png](https://qiita-image-store.s3.amazonaws.com/0/49915/724f0355-fe7b-7918-2d75-09c33cce5e00.png)\n\n* これで公開作業は完了です。しばらくするとChromeウェブストアに公開されます\n\n\n## 最後に\n今回は[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使って、TypeScriptでChrome Extensionを作成、公開する手順をまとめました。\n最初はTypeScriptでChrome Extensionを作るのは、ビルドの設定など色々めんどくさそうだぁと思っていましたが、\n[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使うことで、簡単に作成から公開まで実現できました。\nブラウザでのちょっとした作業を効率化するのにChrome Extentionは非常に強力なツールなので、今後なにかアイディアがあればまた作ってみたいと思います。\n\n","comments_count":5,"created_at":"2017-12-20T02:36:27+09:00","likes_count":48,"reactions_count":0},"matches":4,"weight":250,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"chrome-extension"},{"weight":50,"keyword":"Qiita"}],"avgWeight":62.5,"totalWeight":58,"threshold":12.5,"isRelated":true},{"node":{"fields":{"slug":"/e0ec0869-f368-5083-bdc2-cdba9d59427a/","title":"フロントエンド初心者がMEANスタック(MongoDB+Express+Angular+Node.js)でアプリを作ってみて躓いたこと","date":"2017-12-12T03:19:11+09:00","excerpt":"FUJITSU Advent Calendar 2017 12日目の記事です。リッチでイマドキなデザインのアプリが作りたくて、ここ４ヶ月ほどMEANスタック(MongoDB+Express+Angular+Node.js)でブログアプリを作...","tags":["JavaScript","Node.js","Express","mongoose","Angular","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"e0ec0869-f368-5083-bdc2-cdba9d59427a","title":"フロントエンド初心者がMEANスタック(MongoDB+Express+Angular+Node.js)でアプリを作ってみて躓いたこと","rendered_body":"<p><a href=\"https://qiita.com/advent-calendar/2017/fujitsu\">FUJITSU Advent Calendar 2017</a> 12日目の記事です。</p>\n\n<p>リッチでイマドキなデザインのアプリが作りたくて、<br>\nここ４ヶ月ほど<strong>MEAN</strong>スタック(<strong>M</strong>ongoDB+<strong>E</strong>xpress+<strong>A</strong>ngular+<strong>N</strong>ode.js)でブログアプリを作っています。<br>\n知識ゼロからのスタートでしたが、多くの方々がブログやStackOverFlowに情報を載せてくれているので、躓きながらもなんとかアプリ開発を進めることができました。</p>\n\n<p>この記事では、フロントエンド初心者の自分がMEANスタックでアプリを作る時に躓いたことや、こういう機能を実現するにはどうすればいいか?などをまとめています。<br>\nこれからをAngularを学ぼうとしている方、ExpressやMongoDBなどサーバーサイドJavaScriptを学ぼうとしている方の参考になればうれしいです。</p>\n\n<h2>\n<span id=\"アプリの紹介\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E7%B4%B9%E4%BB%8B\"><i class=\"fa fa-link\"></i></a>アプリの紹介</h2>\n\n<p>本線から脱線しますが、イントラでの使用を想定したQiitaのようなブログアプリです。デモ環境もあるのでよければ触ってみてください(モバイルには未対応ですが。。。)</p>\n\n<ul>\n<li><a href=\"https://github.com/Takumon/mean-blog\" rel=\"nofollow noopener\" target=\"_blank\">Github</a></li>\n<li><a href=\"https://hub.docker.com/r/takumon/mean-blog_auto/\" rel=\"nofollow noopener\" target=\"_blank\">Dockerhub</a></li>\n<li>\n<a href=\"https://material-blog-demo.herokuapp.com/\" rel=\"nofollow noopener\" target=\"_blank\">デモ環境</a> (ユーザID/パスは DemoUser / DemoUser1234# です)</li>\n</ul>\n\n<p>アプリキャプチャ その１ (記事詳細)<br>\n<a href=\"https://camo.qiitausercontent.com/4d64d8bd315bcf330d1ac6de1cfe8bb53f280992/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62383133333331372d666163322d626239622d386632642d3133646238393662656366352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/4d64d8bd315bcf330d1ac6de1cfe8bb53f280992/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62383133333331372d666163322d626239622d386632642d3133646238393662656366352e706e67\" alt=\"appdemo_detail.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/b8133317-fac2-bb9b-8f2d-13db896becf5.png\"></a></p>\n\n<p>アプリキャプチャ その２ (記事一覧)<br>\n<a href=\"https://camo.qiitausercontent.com/96927cda50e8df84b0c5415e996246c6d720b607/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39353064313036322d316261342d363366362d666535332d6366653664343634333061342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/96927cda50e8df84b0c5415e996246c6d720b607/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39353064313036322d316261342d363366362d666535332d6366653664343634333061342e706e67\" alt=\"アプリ_スクリーンキャプチャ_記事一覧.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/950d1062-1ba4-63f6-fe53-cfe6d46430a4.png\"></a></p>\n\n<p>アプリキャプチャ その３ (プロフィール)<br>\n<a href=\"https://camo.qiitausercontent.com/46aab6c2add74ca826b1dbe730d1a82eb481e295/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33323563373934382d636531362d396330382d306236362d6433383932653034366165642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/46aab6c2add74ca826b1dbe730d1a82eb481e295/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33323563373934382d636531362d396330382d306236362d6433383932653034366165642e706e67\" alt=\"アプリ_スクリーンキャプチャ_ ユーザ画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/325c7948-ce16-9c08-0b66-d3892e046aed.png\"></a></p>\n\n<h1>\n<span id=\"1-フロント側angularまわり\" class=\"fragment\"></span><a href=\"#1-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4angular%E3%81%BE%E3%82%8F%E3%82%8A\"><i class=\"fa fa-link\"></i></a>1. フロント側Angularまわり</h1>\n\n<h2>\n<span id=\"angularについて調べる時に古い情報を除外したい\" class=\"fragment\"></span><a href=\"#angular%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%BF%E3%81%B9%E3%82%8B%E6%99%82%E3%81%AB%E5%8F%A4%E3%81%84%E6%83%85%E5%A0%B1%E3%82%92%E9%99%A4%E5%A4%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Angularについて調べる時に古い情報を除外したい</h2>\n\n<p>1系は<code>AngularJS</code>、2系以降は<code>Angular</code>と呼ばれており、1系と2系以降では大きく仕様が異なります。<br>\nそのため検索する時は<code>Angualr2</code>などバージョンを指定したり、1系を除外するため<code>--AngularJS</code>をつけたりすると検索しやすいです。</p>\n\n<h2>\n<span id=\"htmlのdom要素を別のdom要素またはcomponentから扱いたい\" class=\"fragment\"></span><a href=\"#html%E3%81%AEdom%E8%A6%81%E7%B4%A0%E3%82%92%E5%88%A5%E3%81%AEdom%E8%A6%81%E7%B4%A0%E3%81%BE%E3%81%9F%E3%81%AFcomponent%E3%81%8B%E3%82%89%E6%89%B1%E3%81%84%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>HTMLのDOM要素を、別のDOM要素またはComponentから扱いたい</h2>\n\n<p>要素に<code>#xxxxx</code>のように<code>#</code>始まりの名前をつけると、別のDOM要素から参照できます</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;input</span> <span class=\"err\">#</span><span class=\"na\">phone</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"電話番号\"</span><span class=\"nt\">/&gt;</span>\n<span class=\"c\">&lt;!--  他のDOM要素からphonという変数名でDOM要素を参照できるようになる --&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"nt\">&gt;</span>(click)=\"callPhone(phone.value)\"&gt;\n</pre></div>\n</div>\n\n<p>Componentから参照する場合は<code>@ViewChild</code>を使います</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">Component</span></div>\n<div class=\"highlight\"><pre>  <span class=\"c1\">// ViewChildの引数に名前を文字列で指定します</span>\n  <span class=\"p\">@</span><span class=\"nd\">ViewChild</span><span class=\"p\">(</span><span class=\"s1\">'phone'</span><span class=\"p\">)</span> <span class=\"nx\">phoneElement</span><span class=\"p\">:</span> <span class=\"nx\">phoneElement</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">showPhoneValue</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">phoneElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://angular.io/guide/template-syntax#ref-vars\" rel=\"nofollow noopener\" target=\"_blank\">Angular公式サイト</a></li>\n<li><a href=\"https://stackoverflow.com/questions/32693061/how-can-i-select-an-element-in-a-component-template\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"routing時の認証を非同期で行いたい\" class=\"fragment\"></span><a href=\"#routing%E6%99%82%E3%81%AE%E8%AA%8D%E8%A8%BC%E3%82%92%E9%9D%9E%E5%90%8C%E6%9C%9F%E3%81%A7%E8%A1%8C%E3%81%84%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Routing時の認証を非同期で行いたい</h2>\n\n<p>URLごとの認証は<code>CanActivate</code>インターフェースを実装すればできますが、<br>\nサーバから認証情報を取得して非同期で認証したい場合もあると思います。<br>\nそのような時は、<strong><code>CanActivate#canActivate</code>で</strong>booleanの代わりに<strong>Observableを戻り値に指定する</strong>ことで実現できます。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">SampleAuthGuard</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Router</span><span class=\"p\">,</span> <span class=\"nx\">CanActivate</span><span class=\"p\">,</span> <span class=\"nx\">ActivatedRouteSnapshot</span><span class=\"p\">,</span> <span class=\"nx\">RouterStateSnapshot</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/router'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AuthenticationService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./authentication.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SampleAuthGuard</span> <span class=\"kr\">implements</span> <span class=\"nx\">CanActivate</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span>\n    <span class=\"kr\">private</span> <span class=\"nx\">auth</span><span class=\"p\">:</span> <span class=\"nx\">AuthenticationService</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n  <span class=\"c1\">// booleanではなくObservable&lt;boolean&gt;を戻り値で返す</span>\n  <span class=\"nx\">canActivate</span><span class=\"p\">(</span><span class=\"nx\">route</span><span class=\"p\">:</span> <span class=\"nx\">ActivatedRouteSnapshot</span><span class=\"p\">,</span> <span class=\"nx\">state</span><span class=\"p\">:</span> <span class=\"nx\">RouterStateSnapshot</span><span class=\"p\">):</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"kr\">boolean</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">auth</span><span class=\"p\">.</span><span class=\"nx\">checkState</span><span class=\"p\">()</span>\n      <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">err</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">of</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">))</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/38425461/angular2-canactivate-calling-async-function\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"formarrayの値を初期化したい\" class=\"fragment\"></span><a href=\"#formarray%E3%81%AE%E5%80%A4%E3%82%92%E5%88%9D%E6%9C%9F%E5%8C%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>FormArrayの値を初期化したい</h2>\n\n<p>FormControlはpatchValueで初期値を設定できますが、<br>\nFormArrayの場合patchValueで配列の値を設定しようとしても設定できません。<br>\nこういう場合は、<strong>配列1つ１つの値をもとにFormControlを生成してFormArrayにpush</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">ダメな例</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Form生成</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">group</span><span class=\"p\">({</span>\n    <span class=\"na\">schoolName</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">([])</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// Formに初期値を設定</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">pathValue</span><span class=\"p\">({</span>\n    <span class=\"na\">schooleName</span><span class=\"p\">:</span> <span class=\"s1\">'SampleSchoolName'</span> <span class=\"c1\">// FormControlの値の初期化はpatchValueで可能</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'taro'</span><span class=\"p\">,</span> <span class=\"s1\">'jiro'</span><span class=\"p\">,</span> <span class=\"s1\">'saburo'</span><span class=\"p\">];</span> <span class=\"c1\">// FormArrayに要素を追加する場合patchValueでは不可能</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">良い例</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Formを生成</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">group</span><span class=\"p\">({</span>\n    <span class=\"na\">schoolName</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">([])</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// Formに初期値を設定</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">pathValue</span><span class=\"p\">({</span>\n    <span class=\"na\">schooleName</span><span class=\"p\">:</span> <span class=\"s1\">'SampleSchoolName'</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// データからFormControlを生成し１件１件FormArrayにpushする</span>\n  <span class=\"p\">[</span><span class=\"s1\">'taro'</span><span class=\"p\">,</span> <span class=\"s1\">'jiro'</span><span class=\"p\">,</span> <span class=\"s1\">'saburo'</span><span class=\"p\">].</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">student</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">controls</span><span class=\"p\">[</span><span class=\"s1\">'students'</span><span class=\"p\">].</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">FormControll</span><span class=\"p\">(</span><span class=\"nx\">student</span><span class=\"p\">));</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/40916084/angular2-patchvalue-push-value-into-array\" rel=\"nofollow noopener\" target=\"_blank\">StackOvereFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"error-error-no-provider-for-templaterefというエラー\" class=\"fragment\"></span><a href=\"#error-error-no-provider-for-templateref%E3%81%A8%E3%81%84%E3%81%86%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>「ERROR Error: No provider for TemplateRef!」というエラー</h2>\n\n<p>最初このエラーが出た時は、何が原因なのかわからずに困りました。。。<br>\n大抵の場合は、<strong><code>*ngIf</code>や<code>*ngForm</code>の<code>*</code>が抜けてることが原因</strong>です(要するにただのタイポです。。。)<br>\n<code>*</code>が抜けると、Angularは<code>ngIf</code>をディレクティブとして解釈しようとしますが、<br>\nそんなディレクティブは存在しないので<code>No provider for TemplateRef!</code>と言われてしまうそうです。</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/35932074/angular2-no-provider-for-templateref-ngif-templateref\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"textareaにおいてtabキーでインデントしたい\" class=\"fragment\"></span><a href=\"#textarea%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6tab%E3%82%AD%E3%83%BC%E3%81%A7%E3%82%A4%E3%83%B3%E3%83%87%E3%83%B3%E3%83%88%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>textareaにおいてTabキーでインデントしたい</h2>\n\n<p>文書を入力するようなテキストエリアの場合に、Tabキーでのインデントしたい場合は、<br>\nkyedownイベント発生時にテキストエリアの値とキャレットの位置を操作することで実現可能です。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;textarea</span> <span class=\"err\">#</span><span class=\"na\">sampletextarea</span>\n  <span class=\"err\">(</span><span class=\"na\">keydown</span><span class=\"err\">)=\"</span><span class=\"na\">indent</span><span class=\"err\">($</span><span class=\"na\">event</span><span class=\"err\">,</span> <span class=\"na\">sampletextarea</span><span class=\"err\">)\"</span> <span class=\"nt\">&gt;&lt;/textarea&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">Component</span></div>\n<div class=\"highlight\"><pre>  <span class=\"nx\">indent</span><span class=\"p\">(</span><span class=\"nx\">$event</span><span class=\"p\">,</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Tabキー押下時</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">$event</span><span class=\"p\">.</span><span class=\"nx\">keyCode</span> <span class=\"o\">===</span> <span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 次の要素にフォーカスが移らないようにする</span>\n      <span class=\"nx\">$event</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n\n      <span class=\"c1\">// 現在のキャレット位置を取得</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">caretStart</span> <span class=\"o\">=</span> <span class=\"nx\">textareaElement</span><span class=\"p\">.</span><span class=\"nx\">selectionStart</span><span class=\"p\">;</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">caretEnd</span> <span class=\"o\">=</span> <span class=\"nx\">textareaElement</span><span class=\"p\">.</span><span class=\"nx\">selectionEnd</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// テキストエリアの値を取得し、キャレット位置にTabを挿入</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">TAB</span> <span class=\"o\">=</span> <span class=\"s1\">'¥t'</span><span class=\"p\">;</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">caretStart</span><span class=\"p\">)</span>\n                     <span class=\"o\">+</span> <span class=\"nx\">TAB</span> <span class=\"o\">+</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"nx\">caretStart</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// キャレット位置をTab分ずらす</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">focus</span><span class=\"p\">();</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">setSelectionRange</span><span class=\"p\">(</span><span class=\"nx\">caretStart</span> <span class=\"o\">+</span> <span class=\"nx\">TAB</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">,</span> <span class=\"nx\">caretEnd</span> <span class=\"o\">+</span> <span class=\"nx\">TAB</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h2>\n<span id=\"markdownプレビューを表示したいソースコードはシンタックスハイライトさせたい\" class=\"fragment\"></span><a href=\"#markdown%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%97%E3%81%9F%E3%81%84%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AF%E3%82%B7%E3%83%B3%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B9%E3%83%8F%E3%82%A4%E3%83%A9%E3%82%A4%E3%83%88%E3%81%95%E3%81%9B%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Markdownプレビューを表示したい、ソースコードはシンタックスハイライトさせたい</h2>\n\n<p><a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">marked</a>と<a href=\"https://github.com/isagalaev/highlight.js\" rel=\"nofollow noopener\" target=\"_blank\">highlight.js</a>を組み合わせて使います。<br>\n<a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">marked</a>のReadmeを見ればなんとなくわかりますが、Angularの仕組みに乗せる必要があるのでPipeやらServiceやらを作ります。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">markdown-parse.service.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">marked</span> <span class=\"k\">from</span> <span class=\"s1\">'marked'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">hljs</span> <span class=\"k\">from</span> <span class=\"s1\">'highlight.js'</span><span class=\"p\">;</span>\n\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MarkdownParseService</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">marked</span><span class=\"p\">.</span><span class=\"nx\">setOptions</span><span class=\"p\">({</span>\n      <span class=\"na\">highlight</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">hljs</span><span class=\"p\">.</span><span class=\"nx\">highlightAuto</span><span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">).</span><span class=\"nx\">value</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"na\">rawText</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">marked</span><span class=\"p\">(</span><span class=\"nx\">rawText</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">markdown.pipe.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nx\">marked</span> <span class=\"k\">from</span> <span class=\"s1\">'marked'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MarkdownParseService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./markdown-parse.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'toMarkdown'</span> <span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MarkdownParsePipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">markdownParseService</span><span class=\"p\">:</span> <span class=\"nx\">MarkdownParseService</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">any</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">markdownParseService</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>HTMLで下記のように指定します。<code>{{}}</code>だとサニタイズされてしまうので<code>innerHTML</code>属性を指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">innerHTML</span><span class=\"err\">]=\"</span><span class=\"na\">md</span> <span class=\"err\">|</span> <span class=\"na\">toMarkdown</span><span class=\"err\">\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://qiita.com/daikiojm/items/e02e2aeb0231b3620a0b\" id=\"reference-9001a931765f8f52acaf\">Qiita AngularでMarkdownをHTMLとして表示するカスタムpipeを作成する</a></li>\n<li>Github <a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">chjj/marked</a>\n</li>\n</ul>\n\n<h2>\n<span id=\"絞り込み条件付きリストにおいてリストの要素が変更追加削除された時に絞り込み結果をリフレッシュしたい\" class=\"fragment\"></span><a href=\"#%E7%B5%9E%E3%82%8A%E8%BE%BC%E3%81%BF%E6%9D%A1%E4%BB%B6%E4%BB%98%E3%81%8D%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%8C%E5%A4%89%E6%9B%B4%E8%BF%BD%E5%8A%A0%E5%89%8A%E9%99%A4%E3%81%95%E3%82%8C%E3%81%9F%E6%99%82%E3%81%AB%E7%B5%9E%E3%82%8A%E8%BE%BC%E3%81%BF%E7%B5%90%E6%9E%9C%E3%82%92%E3%83%AA%E3%83%95%E3%83%AC%E3%83%83%E3%82%B7%E3%83%A5%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>絞り込み条件付きリストにおいて、リストの要素が変更、追加、削除された時に絞り込み結果をリフレッシュしたい</h2>\n\n<p>リストの絞り込みはPipeで実現しますが、通常Pipeはリストの要素が変更されても再び絞り込みが実施されることはありません。<br>\nこのような場合はPipeアノテーションにて<strong>pureオプションをfalseに設定</strong>ましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"err\">#</span><span class=\"na\">searchUserName</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n  <span class=\"nt\">&lt;li</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let user of (userList | searchUserFilter: searchUserName.value);\"</span> <span class=\"nt\">&gt;</span>{{user.name}}<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">search-user.pipe.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">User</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./user'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'searchUserFilter'</span><span class=\"p\">,</span>\n  <span class=\"na\">pure</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"c1\">// pureをfalseにすることでユーザが変更、追加、削除された時にリフレッシュできる</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SearchFilterPipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">User</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">searchUserName</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">any</span><span class=\"p\">[]</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">searchUserName</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">items</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">searchUserName</span> <span class=\"o\">=</span> <span class=\"nx\">searchUserName</span><span class=\"p\">.</span><span class=\"nx\">toLowerCase</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span> <span class=\"nx\">item</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">userId</span><span class=\"p\">.</span><span class=\"nx\">toLowerCase</span><span class=\"p\">().</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"nx\">searchUserName</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://angular.io/guide/pipes#pure-and-impure-pipes\" rel=\"nofollow noopener\" target=\"_blank\">Angular公式サイト</a></li>\n</ul>\n\n<h2>\n<span id=\"グローバル定数を定義したい\" class=\"fragment\"></span><a href=\"#%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E5%AE%9A%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>グローバル定数を定義したい</h2>\n\n<p>いろんなクラスで使う定数を共通化する時は、単純に<strong>クラスを作ってstaticなメンバとして定数を定義</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">app-settings.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppSettings</span> <span class=\"p\">{</span>\n   <span class=\"kr\">public</span> <span class=\"kr\">static</span> <span class=\"nx\">API_ENDPOINT</span><span class=\"o\">=</span><span class=\"s1\">'http://127.0.0.1:6666/api/'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">SampleService</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">Injectable</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'angular2/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">AppSettings</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app-settings'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SampleService</span> <span class=\"p\">{</span>\n    <span class=\"nx\">sampleMethod</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">AppSettings</span><span class=\"p\">.</span><span class=\"nx\">API_ENDPOINT</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/34986922/define-global-constants-in-angular-2\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"画像が多い画面の初期表示を早くしたい\" class=\"fragment\"></span><a href=\"#%E7%94%BB%E5%83%8F%E3%81%8C%E5%A4%9A%E3%81%84%E7%94%BB%E9%9D%A2%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A1%A8%E7%A4%BA%E3%82%92%E6%97%A9%E3%81%8F%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>画像が多い画面の初期表示を早くしたい</h2>\n\n<p><a href=\"https://github.com/tjoskar/ng-lazyload-image\" rel=\"nofollow noopener\" target=\"_blank\">ng-lazyload-image</a>を使えば画像の遅延ロードを実現できます。<br>\n使い方もとても簡単でimgタグにディレクティブを指定するだけです。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre> <span class=\"nt\">&lt;img</span>\n  <span class=\"err\">[</span><span class=\"na\">defaultImage</span><span class=\"err\">]=\"</span><span class=\"na\">https:</span><span class=\"err\">//</span><span class=\"na\">images</span><span class=\"err\">.</span><span class=\"na\">sample</span><span class=\"err\">.</span><span class=\"na\">com</span><span class=\"err\">/</span><span class=\"na\">photo</span><span class=\"err\">/</span><span class=\"na\">defaultimage</span><span class=\"err\">\"</span> \n  <span class=\"err\">[</span><span class=\"na\">lazyLoad</span><span class=\"err\">]=\"</span><span class=\"na\">https:</span><span class=\"err\">//</span><span class=\"na\">images</span><span class=\"err\">.</span><span class=\"na\">sample</span><span class=\"err\">.</span><span class=\"na\">com</span><span class=\"err\">/</span><span class=\"na\">photo</span><span class=\"err\">/</span><span class=\"na\">sampleimage</span><span class=\"err\">\"</span>\n  <span class=\"err\">[</span><span class=\"na\">offset</span><span class=\"err\">]=\"</span><span class=\"na\">30</span><span class=\"err\">\"</span>\n <span class=\"nt\">&gt;</span>\n</pre></div>\n</div>\n\n<p><em>defaultImage</em><br>\n　即時ロードされる画像のURL、遅延ロードする画像を読み込む間、表示される<br>\n<em>lazyLoad</em><br>\n　遅延ロードする画像のURL<br>\n<em>offset</em><br>\n　スクロールが発生する場合に画面下部の何ピクセル下に来た時にロードを開始するか<br>\n<em>errorImage</em><br>\n　遅延ロード失敗時に表示する画像URL</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/tjoskar/ng-lazyload-image\" rel=\"nofollow noopener\" target=\"_blank\">ng-lazyload-image</a></li>\n</ul>\n\n<h2>\n<span id=\"angular-cliのng-serveコマンドでdistフォルダを一旦削除したくない\" class=\"fragment\"></span><a href=\"#angular-cli%E3%81%AEng-serve%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7dist%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E3%82%92%E4%B8%80%E6%97%A6%E5%89%8A%E9%99%A4%E3%81%97%E3%81%9F%E3%81%8F%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>Angular Cliの<code>ng serve</code>コマンドでdistフォルダを一旦削除したくない</h2>\n\n<p><code>ng serve</code>コマンドは<code>dist</code>フォルダを削除してからtsファイルをトランスコンパイルします。<br>\nそれを防ぐためには、<strong>delete-output-pathオプションをfalse</strong>に指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json　ビルドスクリプト</span></div>\n<div class=\"highlight\"><pre><span class=\"s2\">\"script\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"cp ./resource/* dist &amp;&amp; ng serve --delete-output-path=false\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/angular/angular-cli/issues/4366\" rel=\"nofollow noopener\" target=\"_blank\">angular-cli github issue #4366</a></li>\n</ul>\n\n<h2>\n<span id=\"aotコンパイルが遅いのでなんとかしたい\" class=\"fragment\"></span><a href=\"#aot%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%8C%E9%81%85%E3%81%84%E3%81%AE%E3%81%A7%E3%81%AA%E3%82%93%E3%81%A8%E3%81%8B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>AOTコンパイルが遅いのでなんとかしたい</h2>\n\n<p>なんとかできませんでした。。。(もしかしたら方法があるのかもしれません。誰か教えてください!!!)<br>\nAOTコンパイルはJITコンパイルが検出してくれないHTMLのエラーを警告してくれますが、その反面遅いです。特に<a href=\"https://material.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular Material</a>を使う場合は顕著です。<br>\nそのため、自分の場合は基本的にJITビルドを使い、issueのプルリクをする前など区切りのいいタイミングでAOTビルドしてエラーがないか確認するというように使い分けてました。</p>\n\n<h1>\n<span id=\"2-フロント側angularでのテスト周り\" class=\"fragment\"></span><a href=\"#2-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4angular%E3%81%A7%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A\"><i class=\"fa fa-link\"></i></a>2. フロント側Angularでのテスト周り</h1>\n\n<h2>\n<span id=\"ci環境などでテストが終わらずにタイムアウトしてしまう\" class=\"fragment\"></span><a href=\"#ci%E7%92%B0%E5%A2%83%E3%81%AA%E3%81%A9%E3%81%A7%E3%83%86%E3%82%B9%E3%83%88%E3%81%8C%E7%B5%82%E3%82%8F%E3%82%89%E3%81%9A%E3%81%AB%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%97%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86\"><i class=\"fa fa-link\"></i></a>CI環境などでテストが終わらずにタイムアウトしてしまう</h2>\n\n<p>CirleCiなどでテストを実行する場合<code>ng test</code>コマンドだとプロセスが終了しないためタイムアウトで失敗してしまいます。<br>\nこのような場合は<strong>watchオプションをfalseに設定</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ng test --wtach=false\n</pre></div></div>\n\n<p><strong>参考サイト</strong><br>\n<a href=\"https://github.com/angular/angular-cli/issues/362\" rel=\"nofollow noopener\" target=\"_blank\">Github isssue</a></p>\n\n<h2>\n<span id=\"テスト時にerror-timeout---async-callback-was-not-invoked-within-timeout-specified-by-jasminedefault_timeout_intervalやfailed-to-execute-send-on-xmlhttprequestのエラー\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E6%99%82%E3%81%ABerror-timeout---async-callback-was-not-invoked-within-timeout-specified-by-jasminedefault_timeout_interval%E3%82%84failed-to-execute-send-on-xmlhttprequest%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>テスト時に「Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.」や「Failed to execute 'send' on 'XMLHttpRequest'」のエラー</h2>\n\n<p>このような場合は、一時的に<code>ng test</code>コマンドのオプションに<strong><code>-sm=false</code>を追加</strong>してテストし直すと根本原因エラーメッセージで出力されるようになります。<br>\n大抵の場合は自作したモッククラスに必要なメソッドがないことが原因です。</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/45399079/angular-tests-failing-with-failed-to-execute-send-on-xmlhttprequest\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト用に子コンポーネントをモック化したい\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%94%A8%E3%81%AB%E5%AD%90%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E3%83%A2%E3%83%83%E3%82%AF%E5%8C%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト用に子コンポーネントをモック化したい</h2>\n\n<p>意外と簡単で、TestBed#configureTestingModuleで<br>\ndeclarationsに自作したモックの子コンポーネントを追加するだけです。<br>\ninput,outputがあれば必要に応じてメンバ定義します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\"><div class=\"highlight\"><pre><span class=\"c1\">// ※import文は省略</span>\n\n<span class=\"c1\">// モックの子コンポーネントを定義</span>\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-child'</span><span class=\"p\">,</span> <span class=\"c1\">// 子コンポーネントと同じものを定義</span>\n  <span class=\"na\">template</span><span class=\"p\">:</span> <span class=\"s1\">'&lt;p&gt;Mock Child Component&lt;/p&gt;'</span>\n<span class=\"p\">})</span>\n<span class=\"kd\">class</span> <span class=\"nx\">MockClildComponent</span> <span class=\"p\">{</span>\n  <span class=\"p\">@</span><span class=\"nd\">Input</span><span class=\"p\">()</span> <span class=\"nx\">childInput</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"p\">@</span><span class=\"nd\">Output</span><span class=\"p\">()</span> <span class=\"nx\">childOutput</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">EventEmitter</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// ...</span>\n\n<span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n    <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"c1\">// テスト時のdeclarationsにモックの定義を追加</span>\n      <span class=\"nx\">MockProductSettingsComponent</span><span class=\"p\">,</span>\n      <span class=\"c1\">// ...</span>\n    <span class=\"p\">],</span>\n    <span class=\"c1\">// ...</span>\n  <span class=\"p\">});</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">});</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/41240163/mocking-child-components-angular-2\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト結果にangular-materilaのスタイルが反映されない\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%B5%90%E6%9E%9C%E3%81%ABangular-materila%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%8C%E5%8F%8D%E6%98%A0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト結果にAngular Materilaのスタイルが反映されない</h2>\n\n<p>UIフレームワークで<a href=\"https://material.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular Material</a>を使っている場合、<br>\n<code>karma.config.js</code>でAngular Materilaのcssを直接読み込んであげる必要あります。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">karma.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"err\">・・・</span>\n      <span class=\"c1\">// Angular Materialのスタイルをテスト開始時に読み込んでおく</span>\n      <span class=\"p\">{</span><span class=\"nl\">pattern</span><span class=\"p\">:</span> <span class=\"s1\">'./node_modules/@angular/material/prebuilt-themes/indigo-pink.css'</span><span class=\"p\">,</span> <span class=\"nx\">included</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">watched</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">},</span>\n<span class=\"p\">],</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/angular/material2/issues/4056\" rel=\"nofollow noopener\" target=\"_blank\">stackoverflow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト結果にstylesscssアプリ共通のスタイル定義のスタイルが反映されない\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%B5%90%E6%9E%9C%E3%81%ABstylesscss%E3%82%A2%E3%83%97%E3%83%AA%E5%85%B1%E9%80%9A%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E5%AE%9A%E7%BE%A9%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%8C%E5%8F%8D%E6%98%A0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト結果にstyles.scss(アプリ共通のスタイル定義)のスタイルが反映されない</h2>\n\n<p>アプリ共通スタイルをSASS形式にしている場合<br>\n開発用ライブライに<code>karma-scss-preprocessor</code>と<code>node-sass</code>を追加して<code>karma.conf.js</code>を下記のように設定します。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">karma.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"err\">・・・</span>\n<span class=\"err\">　</span> <span class=\"c1\">// プラグインに`karma-scss-preprocessor`を追加</span>\n  <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'karma-scss-preprocessor'</span><span class=\"p\">)</span>\n<span class=\"p\">],</span>\n\n\n<span class=\"nx\">files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"err\">・・・</span>\n  <span class=\"c1\">// filesにアプリ共通スタイルを追加</span>\n  <span class=\"p\">{</span> <span class=\"nl\">pattern</span><span class=\"p\">:</span> <span class=\"s1\">'./src/styles.scss'</span><span class=\"p\">,</span> <span class=\"nx\">watched</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>  <span class=\"nx\">included</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">served</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n<span class=\"p\">],</span>\n\n<span class=\"c1\">// preprocessorsを追加</span>\n<span class=\"nx\">preprocessors</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n <span class=\"s1\">'./src/test.ts'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'@angular/cli'</span><span class=\"p\">],</span>\n <span class=\"s1\">'./src/styles.scss'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'scss'</span><span class=\"p\">]</span>\n<span class=\"p\">},</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong>:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/44460733/how-to-configure-karma-to-include-global-scss-files-for-an-angular-cli-project/44498689#44498689\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n<li><a href=\"https://github.com/karma-runner/karma/issues/2700\" rel=\"nofollow noopener\" target=\"_blank\">Github karma/issue/2700</a></li>\n</ul>\n\n<h1>\n<span id=\"3-バックエンド側-expressmongodb周り\" class=\"fragment\"></span><a href=\"#3-%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89%E5%81%B4-expressmongodb%E5%91%A8%E3%82%8A\"><i class=\"fa fa-link\"></i></a>3. バックエンド側 Express、MongoDB周り</h1>\n\n<p>※MongDBをNode.jsで扱う場合は<a href=\"https://github.com/Automattic/mongoose\" rel=\"nofollow noopener\" target=\"_blank\">mongoose</a>という便利なライブラリがあるのでそれを使う前提のお話です。</p>\n\n<h2>\n<span id=\"mongooseのvirtualメソッドを使う\" class=\"fragment\"></span><a href=\"#mongoose%E3%81%AEvirtual%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>mongooseのvirtualメソッドを使う</h2>\n\n<p>例えば<code>記事</code>,<code>コメント</code>,<code>リプライ</code>などのモデルを定義する場合、<br>\n３つのモデルのライフサイクルは、記事追加 =&gt; 記事に対するコメント追加 =&gt; コメントに対するリプライ追加　のようになります。<br>\nこのような場合は、コメントが記事の参照を持ち、リプライがコメントの参照を持つモデル構造が望ましいです。コメントやリプライ追加時に１つのモデルの更新だけですむからです。<br>\n<a href=\"https://camo.qiitausercontent.com/129a84bd908d87c7fcbda29704ad50ac10529129/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393361633065362d333137652d316364662d626662612d3133353331653234353562612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/129a84bd908d87c7fcbda29704ad50ac10529129/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393361633065362d333137652d316364662d626662612d3133353331653234353562612e706e67\" alt=\"db構造_良.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f93ac0e6-317e-1cdf-bfba-13531e2455ba.png\"></a></p>\n\n<p>ただ記事の検索は少し工夫が必要で、<strong>mongooseのvirtualを使います</strong>。これによって記事からコメントへの参照、コメントからリプライへの参照を擬似的に定義できるため、<br>\n検索時に擬似要素をpopulateするだけで、記事に紐付くコメントとリプライを取得できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/bd8d4eedcb08eeaca13290e8dc91b8b2e10c5dae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34616162376633382d316631392d653030622d623335642d3233626162663336613735622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/bd8d4eedcb08eeaca13290e8dc91b8b2e10c5dae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34616162376633382d316631392d653030622d623335642d3233626162663336613735622e706e67\" alt=\"mongoose virtualのイメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/4aab7f38-1f19-e00b-b35d-23babf36a75b.png\"></a></p>\n\n<p>具体的なソースコードを示します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">article.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">ArticleSchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">content</span><span class=\"p\">:</span> <span class=\"nb\">String</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">toJSON</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">virtuals</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"p\">});</span>\n\n\n<span class=\"c1\">// 記事に紐付くコメントモデルの配列をcommentsという擬似要素で定義する</span>\n<span class=\"nx\">ArticleSchema</span><span class=\"p\">.</span><span class=\"nx\">virtual</span><span class=\"p\">(</span><span class=\"s1\">'comments'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Comment'</span><span class=\"p\">,</span>\n  <span class=\"na\">localField</span><span class=\"p\">:</span> <span class=\"s1\">'_id'</span><span class=\"p\">,</span>\n  <span class=\"na\">foreignField</span><span class=\"p\">:</span> <span class=\"s1\">'articleId'</span><span class=\"p\">,</span>\n  <span class=\"na\">justOne</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Article</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Article'</span><span class=\"p\">,</span> <span class=\"nx\">ArticleSchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Article</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">comment.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">CommentSchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">articleId</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">.</span><span class=\"nx\">Types</span><span class=\"p\">.</span><span class=\"nx\">ObjectId</span><span class=\"p\">,</span>\n    <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Article'</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">comment</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">;</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">toJSON</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">virtuals</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"p\">});</span>\n\n<span class=\"c1\">// コメントに紐付くリプライモデルの配列をrepliesという擬似要素で定義する</span>\n<span class=\"nx\">CommentSchema</span><span class=\"p\">.</span><span class=\"nx\">virtual</span><span class=\"p\">(</span><span class=\"s1\">'replies'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Reply'</span><span class=\"p\">,</span>\n  <span class=\"na\">localField</span><span class=\"p\">:</span> <span class=\"s1\">'_id'</span><span class=\"p\">,</span>\n  <span class=\"na\">foreignField</span><span class=\"p\">:</span> <span class=\"s1\">'commentId'</span><span class=\"p\">,</span>\n  <span class=\"na\">justOne</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Comment</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Comment'</span><span class=\"p\">,</span> <span class=\"nx\">CommentSchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Comment</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">reply.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">ReplySchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">commentId</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">.</span><span class=\"nx\">Types</span><span class=\"p\">.</span><span class=\"nx\">ObjectId</span><span class=\"p\">,</span>\n    <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Comment'</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">reply</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Reply</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Reply'</span><span class=\"p\">,</span> <span class=\"nx\">ReplySchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Reply</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">検索処理</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">Article</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">()</span>\n<span class=\"p\">.</span><span class=\"nx\">populate</span><span class=\"p\">({</span>\n  <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"s1\">'comments'</span><span class=\"p\">,</span> <span class=\"c1\">// Articleモデルで定義した擬似要素commentsをpopulateする</span>\n  <span class=\"na\">populate</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"s1\">'replies'</span><span class=\"p\">,</span> <span class=\"c1\">// Commentモデルで定義した擬似要素repliesをpopulateする</span>\n  <span class=\"p\">}],</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"リクエストレスポンスのログ出力したい\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%81%AE%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>リクエスト、レスポンスのログ出力したい</h2>\n\n<p>Expressのuseにて実現します。<br>\nレスポンスオブジェクトのfinishイベントを監視することで、レスポンス時にログを出力しています。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">リクエストとレスポンスのログ出力　※ここでは簡単のためコンソールに出力しています</span></div>\n<div class=\"highlight\"><pre><span class=\"kd\">const</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n<span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"nx\">accessLogHandler</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n  <span class=\"c1\">// リクエスト時のログ　</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">([</span>\n    <span class=\"s1\">'start'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'x-forwarded-for'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span>\n    <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">referer</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'user-agent'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'--ms--'</span>\n  <span class=\"p\">].</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">',</span><span class=\"err\">\\</span><span class=\"s1\">t'</span><span class=\"p\">));</span>\n\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">once</span><span class=\"p\">(</span><span class=\"s1\">'finish'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"err\">　　</span> <span class=\"c1\">// レスポンス時のログ</span>\n    <span class=\"nx\">accessLogger</span><span class=\"p\">.</span><span class=\"nx\">info</span><span class=\"p\">([</span>\n      <span class=\"s1\">'end'</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'x-forwarded-for'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">referer</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'user-agent'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'--'</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">getMilliseconds</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"nx\">start</span><span class=\"p\">.</span><span class=\"nx\">getMilliseconds</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"s1\">'ms--'</span>\n    <span class=\"p\">].</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">',</span><span class=\"err\">\\</span><span class=\"s1\">t'</span><span class=\"p\">));</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">next</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<p>実際のログはこんな感じで出力されます。</p>\n\n<div class=\"code-frame\" data-lang=\"py3\"><div class=\"highlight\"><pre><span class=\"n\">start</span><span class=\"p\">,</span>  <span class=\"p\">::</span><span class=\"n\">ffff</span><span class=\"p\">:</span><span class=\"mf\">127.0</span><span class=\"o\">.</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">authenticate</span><span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"p\">,</span>   <span class=\"o\">-</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">4200</span><span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"n\">Mozilla</span><span class=\"o\">/</span><span class=\"mf\">5.0</span> <span class=\"p\">(</span><span class=\"n\">Macintosh</span><span class=\"p\">;</span> <span class=\"n\">Intel</span> <span class=\"n\">Mac</span> <span class=\"n\">OS</span> <span class=\"n\">X</span> <span class=\"mi\">10</span><span class=\"n\">_12_6</span><span class=\"p\">)</span> <span class=\"n\">AppleWebKit</span><span class=\"o\">/</span><span class=\"mf\">537.36</span> <span class=\"p\">(</span><span class=\"n\">KHTML</span><span class=\"p\">,</span> <span class=\"n\">like</span> <span class=\"n\">Gecko</span><span class=\"p\">)</span> <span class=\"n\">Chrome</span><span class=\"o\">/</span><span class=\"mf\">62.0</span><span class=\"o\">.</span><span class=\"mf\">3202.94</span> <span class=\"n\">Safari</span><span class=\"o\">/</span><span class=\"mf\">537.36</span><span class=\"p\">,</span> <span class=\"o\">--</span><span class=\"n\">ms</span><span class=\"o\">--</span>\n<span class=\"n\">end</span><span class=\"p\">,</span>    <span class=\"p\">::</span><span class=\"n\">ffff</span><span class=\"p\">:</span><span class=\"mf\">127.0</span><span class=\"o\">.</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"p\">,</span>                  <span class=\"mi\">403</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">4200</span><span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"n\">Mozilla</span><span class=\"o\">/</span><span class=\"mf\">5.0</span> <span class=\"p\">(</span><span class=\"n\">Macintosh</span><span class=\"p\">;</span> <span class=\"n\">Intel</span> <span class=\"n\">Mac</span> <span class=\"n\">OS</span> <span class=\"n\">X</span> <span class=\"mi\">10</span><span class=\"n\">_12_6</span><span class=\"p\">)</span> <span class=\"n\">AppleWebKit</span><span class=\"o\">/</span><span class=\"mf\">537.36</span> <span class=\"p\">(</span><span class=\"n\">KHTML</span><span class=\"p\">,</span> <span class=\"n\">like</span> <span class=\"n\">Gecko</span><span class=\"p\">)</span> <span class=\"n\">Chrome</span><span class=\"o\">/</span><span class=\"mf\">62.0</span><span class=\"o\">.</span><span class=\"mf\">3202.94</span> <span class=\"n\">Safari</span><span class=\"o\">/</span><span class=\"mf\">537.36</span><span class=\"p\">,</span>  <span class=\"o\">--</span><span class=\"mi\">47</span><span class=\"n\">ms</span><span class=\"o\">--</span>\n</pre></div></div>\n\n<h2>\n<span id=\"ログ出力でオブジェクトの全プロパティを出力したい\" class=\"fragment\"></span><a href=\"#%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E3%81%A7%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%85%A8%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%82%92%E5%87%BA%E5%8A%9B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>ログ出力でオブジェクトの全プロパティを出力したい</h2>\n\n<p>オブジェクトの中身をログで確認する時はNode.jsの<code>util.inspect()</code>を使います。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre><span class=\"kd\">const</span> <span class=\"nx\">util</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'util'</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">myObject</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"s2\">\"a\"</span><span class=\"p\">:</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span>\n   <span class=\"s2\">\"b\"</span><span class=\"p\">:{</span>\n      <span class=\"s2\">\"c\"</span><span class=\"p\">:</span><span class=\"s2\">\"c\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"d\"</span><span class=\"p\">:{</span>\n         <span class=\"s2\">\"e\"</span><span class=\"p\">:</span><span class=\"s2\">\"e\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"f\"</span><span class=\"p\">:{</span>\n            <span class=\"s2\">\"g\"</span><span class=\"p\">:</span><span class=\"s2\">\"g\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"h\"</span><span class=\"p\">:{</span>\n               <span class=\"s2\">\"i\"</span><span class=\"p\">:</span><span class=\"s2\">\"i\"</span>\n            <span class=\"p\">}</span>\n         <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">};</span> \n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">util</span><span class=\"p\">.</span><span class=\"nx\">inspect</span><span class=\"p\">(</span><span class=\"nx\">myObject</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">));</span>\n</pre></div></div>\n\n<p>このようなログが出力されます</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>{ a: 'a', b: { c: 'c', d: { e: 'e', f: [Object] } } }\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/10729276/how-can-i-get-the-full-object-in-node-jss-console-log-rather-than-object\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"環境変数で上書きできる定数を定義したい\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%81%A7%E4%B8%8A%E6%9B%B8%E3%81%8D%E3%81%A7%E3%81%8D%E3%82%8B%E5%AE%9A%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>環境変数で上書きできる定数を定義したい</h2>\n\n<p>例えばサーバのポートなど環境個別に設定したくなるようなものは<br>\n環境変数で上書きできる定数にしておくと便利です。<br>\nNode.jsではprocess.env.変数名で環境変数が参照できるので下記のようにします。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">定数定義</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_PORT</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">SERVER_PORT</span> <span class=\"o\">||</span> <span class=\"s1\">'3000'</span><span class=\"p\">;</span><span class=\"err\">　</span><span class=\"c1\">// 環境変数SERVER_PORTが未指定の場合は3000となる</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_HOST</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">SERVER_HOST</span> <span class=\"o\">||</span> <span class=\"s1\">'localhost'</span><span class=\"p\">;</span> <span class=\"c1\">// 環境変数SERVER_HOSTが未指定の場合はlocalhostとなる</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"db初回アクセスに失敗した場合にリトライされない\" class=\"fragment\"></span><a href=\"#db%E5%88%9D%E5%9B%9E%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%AB%E5%A4%B1%E6%95%97%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AB%E3%83%AA%E3%83%88%E3%83%A9%E3%82%A4%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>DB初回アクセスに失敗した場合にリトライされない</h2>\n\n<p>mongooseを使っていると、DB初回接続時にエラーが起きた時に、なぜか再接続処理してくれません。<br>\nDockerでアプリを配布する場合、アプリとMongoDBをdocker-composeで同時に立ち上げることがあると思いますが、まだMongoDBが起動しきってない状態でアプリからDBに接続しようとすると、アプリが異常終了してしまいます。これを防ぐには自力で再接続処理を実装する必要があります。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre><span class=\"kd\">function</span> <span class=\"nx\">createConnection</span> <span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">createConnection</span><span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">(</span><span class=\"sr\">/failed to connect to server .* on first connect/</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(),</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">));</span>\n\n            <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Retrying first connect...\"</span><span class=\"p\">);</span>\n                <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">openUri</span><span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">).</span><span class=\"k\">catch</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n            <span class=\"c1\">// 20秒後に再接続する</span>\n            <span class=\"p\">},</span> <span class=\"mi\">20</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(),</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">once</span><span class=\"p\">(</span><span class=\"s1\">'open'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Connection to db established.\"</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">db</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/Automattic/mongoose/issues/5169\" rel=\"nofollow noopener\" target=\"_blank\">Github mongooseのissue5169</a></li>\n</ul>\n","body":"[FUJITSU Advent Calendar 2017](https://qiita.com/advent-calendar/2017/fujitsu) 12日目の記事です。\n\nリッチでイマドキなデザインのアプリが作りたくて、\nここ４ヶ月ほど**MEAN**スタック(**M**ongoDB+**E**xpress+**A**ngular+**N**ode.js)でブログアプリを作っています。\n知識ゼロからのスタートでしたが、多くの方々がブログやStackOverFlowに情報を載せてくれているので、躓きながらもなんとかアプリ開発を進めることができました。\n\nこの記事では、フロントエンド初心者の自分がMEANスタックでアプリを作る時に躓いたことや、こういう機能を実現するにはどうすればいいか?などをまとめています。\nこれからをAngularを学ぼうとしている方、ExpressやMongoDBなどサーバーサイドJavaScriptを学ぼうとしている方の参考になればうれしいです。\n\n## アプリの紹介\n本線から脱線しますが、イントラでの使用を想定したQiitaのようなブログアプリです。デモ環境もあるのでよければ触ってみてください(モバイルには未対応ですが。。。)\n\n* [Github](https://github.com/Takumon/mean-blog)\n* [Dockerhub](https://hub.docker.com/r/takumon/mean-blog_auto/)\n* [デモ環境](https://material-blog-demo.herokuapp.com/) (ユーザID/パスは DemoUser / DemoUser1234# です)\n\nアプリキャプチャ その１ (記事詳細)\n![appdemo_detail.png](https://qiita-image-store.s3.amazonaws.com/0/49915/b8133317-fac2-bb9b-8f2d-13db896becf5.png)\n\nアプリキャプチャ その２ (記事一覧)\n![アプリ_スクリーンキャプチャ_記事一覧.png](https://qiita-image-store.s3.amazonaws.com/0/49915/950d1062-1ba4-63f6-fe53-cfe6d46430a4.png)\n\nアプリキャプチャ その３ (プロフィール)\n![アプリ_スクリーンキャプチャ_ ユーザ画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/325c7948-ce16-9c08-0b66-d3892e046aed.png)\n\n# 1. フロント側Angularまわり\n## Angularについて調べる時に古い情報を除外したい\n1系は`AngularJS`、2系以降は`Angular`と呼ばれており、1系と2系以降では大きく仕様が異なります。\nそのため検索する時は`Angualr2`などバージョンを指定したり、1系を除外するため\u001e`--AngularJS`をつけたり\u001dすると検索しやすいです。\n\n## HTMLのDOM\b要素を、別のDOM要素またはComponentから扱いたい\n要素に`#xxxxx`\bのように`#`始まりの名前をつけると、別の\bDOM要素から参照できます\n\n```html:HTML\n<input #phone placeholder=\"電話番号\"/>\n<!--  他のDOM要素からphonという変数名でDOM要素を参照できるようになる -->\n<button >(click)=\"callPhone\b(phone.value)\">\n```\n\n\bComponentから参照する場合は`@ViewChild`を使います\n\n```typescript:Component\n  // \bViewChildの引数に\b\b名前を文字列で指定します\n  @ViewChild('phone') phoneElement: phoneElement;\n\n  showPhoneValue() {\n    console.log(this.phoneElement.value);\n    )\n  }\n```\n\n\b**参考サイト**\n\n* [Angular公式サイト](https://angular.io/guide/template-syntax#ref-vars)\n* [StackOverFlow](https://stackoverflow.com/questions/32693061/how-can-i-select-an-element-in-a-component-template)\n\n\n\n## Routing時の認証を非同期で行いたい\nURLごとの認証は`CanActivate`インターフェースを実装すればできますが、\nサーバから認証情報を取得して非同期で認証したい場合もあると思います。\nそのような時は、**`CanActivate#canActivate`で**booleanの代わりに**Observable<boolean>を戻り値に指定する**ことで実現できます。\n\n\n```typescript:SampleAuthGuard\nimport { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs/Rx';\n\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable()\nexport class SampleAuthGuard implements CanActivate {\n\n  constructor(\n    private auth: AuthenticationService,\n  ) { }\n\n  // booleanではなくObservable<boolean>を戻り値で返す\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.auth.checkState()\n      .map(res => true)\n      .catch(err => Observable.of(false))\n  }\n}\n\n```\n\n\b**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/38425461/angular2-canactivate-calling-async-function)\n\n## FormArrayの値を初期化したい\nFormControlはpatchValueで初期値を設定できますが、\nFormArrayの場合patch\bValueで配列の値を設定しようと\bしても設定できません。\n\bこういう場合は、**\b\b配列1つ１つの値をもとにFormControlを生成してFormArrayにpush**します。\n\n```typescript:ダメな例\nngOnInit() {\n  // Form生成\n  this.form = this.formBuilder.group({\n    schoolName: '',\n    students: this.formBuilder.array([])\n  });\n\n  // Formに初期値を設定\n  this.form.pathValue({\n    schooleName: 'SampleSchoolName' // FormControlの値の初期化はpatchValueで可能\n    students: ['taro', 'jiro', 'saburo']; // FormArrayに要素を追加する場合patchValueでは不可能\n  });\n}\n```\n\n```typescript:\b良い例\nngOnInit() {\n  // Formを生成\n  this.form = this.formBuilder.group({\n    schoolName: '',\n    students: this.formBuilder.array([])\n  });\n\n  // Formに初期値を設定\n  this.form.pathValue({\n    schooleName: 'SampleSchoolName'\n  });\n\n  // データからFormControlを生成し１件１件FormArrayにpushする\n  ['taro', 'jiro', 'saburo'].forEach(student -> {\n    this.form.controls['students'].push(new FormControll(student));\n  });\n}\n```\n\n\b**参考サイト**\n\n* [StackOvereFlow](https://stackoverflow.com/questions/40916084/angular2-patchvalue-push-value-into-array)\n\n## 「ERROR Error: No provider for TemplateRef!」というエラー\n最初このエラーが出た時は、何が原因なのかわからずに困りました。。。\n大抵の場合は、**`*ngIf`や`*ngForm`の`*`が抜けてることが原因**です(要するにただのタイポです。。。)\n`*`が抜けると、Angularは`ngIf`をディレクティブとして解釈しようとしますが、\n\bそんな\b\bディレクティブは存在しないので`No provider for TemplateRef!`と言われてしまうそうです。\n\n\b**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/35932074/angular2-no-provider-for-templateref-ngif-templateref)\n\n\n## textareaにおいてTabキーでインデントしたい\n文書を入力するようなテキストエリアの場合に、\u001dTabキーでのインデントしたい場合は、\n\bkyedownイベント発生時に\bテキストエリアの値とキャレットの位置を操作することで実現可能です。\n\n```html:HTML\n<textarea #sampletextarea\n  (keydown)=\"indent($event, sampletextarea)\" ></textarea>\n```\n\n```typescript:Component\n  indent($event, sampleTextAreaElement) {\n    // Tabキー押下時\n    if ($event.keyCode === 9) {\n      \b// 次の要素に\bフォーカスが移らないようにする\n      $event.preventDefault();\n\n      // 現在のキャレット位置を取得\n      \bconst caretStart = textareaElement.selectionStart;\n      const caretEnd = textareaElement.selectionEnd;\n\n      // テキストエリアの値を\b取得し、キャレット位置にTabを挿入\n      const TAB = '¥t';\n      sampleTextAreaElement.value = sampleTextAreaElement.value.substring(0, caretStart)\n                     + TAB + sampleTextAreaElement.value.substring(caretStart, value.length);\n\n      // キャレット位置をTab分ずらす\n      sampleTextAreaElement.focus();\n      sampleTextAreaElement.setSelectionRange(caretStart + TAB.length, caretEnd + TAB.length);\n\n      return;\n    }\n  }\n\n```\n\n\n\n## \bMarkdownプレビューを\b表示したい、ソースコードはシンタックスハイライトさせたい\n[marked](https://github.com/chjj/marked)と[highlight.js](https://github.com/isagalaev/highlight.js)を組み合わせて使います。\n[marked](https://github.com/chjj/marked)のReadmeを見ればなんとなくわかりますが、Angularの仕組みに乗せる必要があるのでPipeやらServiceやらを作ります。\n\n```typescript:markdown-parse.service.ts\nimport { Injectable } from '@angular/core';\nimport marked from 'marked';\nimport hljs from 'highlight.js';\n\n\n@Injectable()\nexport class MarkdownParseService {\n\n  constructor() {\n    marked.setOptions({\n      highlight: function (code) {\n        return hljs.highlightAuto(code).value;\n      }\n    });\n  }\n\n  parse(rawText: string) {\n    return marked(rawText);\n  }\n}\n```\n\n\n```typescript:markdown.pipe.ts\nimport marked from 'marked';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { MarkdownParseService } from './markdown-parse.service';\n\n@Pipe({ name: 'toMarkdown' })\nexport class MarkdownParsePipe implements PipeTransform {\n  constructor(markdownParseService: MarkdownParseService) {}\n\n  transform(value: string): any {\n    return this.markdownParseService.parse(value);\n  }\n}\n```\n\nHTMLで下記のように指定します。`{{}}`だと\bサニタイズされてしまうので\b`innerHTML`属性を指定します。\n\n```html\n<div [innerHTML]=\"md | toMarkdown\"></div>\n```\n\n\n\b**参考サイト**\n\n* [Qiita AngularでMarkdownをHTMLとして表示するカスタムpipeを作成する](https://qiita.com/daikiojm/items/e02e2aeb0231b3620a0b)\n* Github [chjj/marked](https://github.com/chjj/marked)\n\n\n\n\n## 絞り込み条件付きリストにおいて、リストの要素が\b変更、追加\b、削除された時に絞り込み結果をリフレッシュしたい\nリストの絞り込みはPipeで実現しますが、通常Pipeはリストの要素が変更されても再び絞り込みが実施されることはありません。\nこのような場合はPipeアノテーションにて**pureオプションをfalseに設定**ましょう。\n\n```html:HTML\n<input type=\"text\" #searchUserName>\n<ul>\n  <li *ngFor=\"let user of (userList | searchUserFilter: searchUserName.value);\" >{{user.name}}</li>\n<ul>\n```\n\n```typescript:search-user.pipe.ts\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { User } from './user';\n\n@Pipe({\n  name: 'searchUserFilter',\n  pure: false // pureをfalseにすることでユーザが変更、追加、削除された時にリフレッシュできる\n})\nexport class SearchFilterPipe implements PipeTransform {\n  transform(items: Array<User>, searchUserName: string): any[] {\n    if (!searchUserName) return items;\n\n    searchUserName = searchUserName.toLowerCase();\n    return items.filter( item => item.user.userId.toLowerCase().includes(searchUserName));\n  }\n}\n```\n\n\b**参考サイト**\n\n* [Angular公式サイト](https://angular.io/guide/pipes#pure-and-impure-pipes)\n\n\n\n\n## グローバル定数を定義したい\nいろんなクラスで使う定数を\b共通\b化する時は、単純に**クラスを作ってstaticなメンバとして定数を定義**します。\n\n```typescript:app-settings.ts\nexport class AppSettings {\n   public static API_ENDPOINT='http://127.0.0.1:6666/api/';\n}\n```\n\n```typescript:SampleService\nimport {Injectable} from 'angular2/core';\nimport {AppSettings} from './app-settings';\n\n@Injectable()\nexport class SampleService {\n    \bsampleMethod() {\n      console.log(AppSettings.API_ENDPOINT);\n    }\n}\n```\n\n**参考**\n\n* [StackOverFlow](https://stackoverflow.com/questions/34986922/define-global-constants-in-angular-2)\n\n\n## 画像が多い画面の初期表示を早くしたい\n[ng-lazyload-image](https://github.com/tjoskar/ng-lazyload-image)を使えば画像の遅延ロードを実現できます。\n使い方もとても簡単でimgタグにディレクティブを指定するだけです。\n\n```html:HTML\n <img\n  [defaultImage]=\"https://images.sample.com/photo/defaultimage\" \n  [lazyLoad]=\"https://images.sample.com/photo/sampleimage\"\n  [offset]=\"30\"\n >\n```\n\n*defaultImage*\n　即時ロードされる画像のURL、遅延ロードする画像を読み込む間、表示される\n*lazyLoad*\n　遅延ロードする画像のURL\n*offset*\n　スクロールが発生する場合に画面下部の何ピクセル下に来た時にロードを開始するか\n*errorImage*\n　遅延ロード失敗時に表示する画像URL\n\n**参考サイト**\n\n* [ng-lazyload-image](https://github.com/tjoskar/ng-lazyload-image)\n\n\n## Angular Cliの`ng serve`コマンドでdistフォルダを一旦削除したくない\n`ng serve`コマンドは`dist`フォルダを削除してからtsファイルをトランスコンパイルします。\nそれを防ぐためには、**delete-output-pathオプションをfalse**に指定します。\n\n```json:package.json　ビルドスクリプト\n\"script\": {\n  \"build\": \"cp ./resource/* dist && ng serve --delete-output-path=false\"\n}\n```\n\n\b**参考サイト**\n\n* [angular-cli github issue #4366](https://github.com/angular/angular-cli/issues/4366)\n\n\n## AOTコンパイルが遅いのでなんとかしたい\nなんとかできませんでした。。。(もしかしたら方法があるのかもしれません。誰か教えてください!!!)\nAOTコンパイルはJITコンパイルが検出してくれないHTMLのエラーを警告してくれますが、その反面遅いです。特に[Angular Material](https://material.angular.io/)を使う場合は顕著です。\nそのため、自分の場合は基本的にJITビルドを使い、issueのプルリクをする前など区切りのいいタイミングでAOTビルドしてエラーがないか確認するというように使い分けてました。\n\n\n# 2. フロント側Angularでのテスト周り\n## CI環境などでテストが終わらずにタイムアウトしてしまう\nCirleCiなどでテストを実行する場合`ng test`コマンドだとプロセスが終了しないためタイムアウトで失敗してしまいます。\nこのような場合は**watchオプションをfalseに設定**します。\n\n```\nng test --wtach=false\n```\n\n**参考サイト**\n[Github isssue](https://github.com/angular/angular-cli/issues/362)\n\n## テスト時に「Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.」や「Failed to execute 'send' on 'XMLHttpRequest'」のエラー\nこのような場合は、一時的に`ng test`コマンドのオプションに**`-sm=false`を追加**してテストし直すと根本原因エラーメッセージで出力されるようになります。\n大抵の場合は自作したモッククラスに必要なメソッドがないことが原因です。\n\n\b**参考サイト**\n\n* [stackOverFlow](https://stackoverflow.com/questions/45399079/angular-tests-failing-with-failed-to-execute-send-on-xmlhttprequest)\n\n\n## テスト用に子コンポーネントをモック化したい\n意外と簡単で、TestBed#configureTestingModuleで\ndeclarationsに自作したモックの子コンポーネントを追加するだけです。\ninput,outputがあれば必要に応じてメンバ定義します。\n\n\n```typescript\n// ※import文は省略\n\n// モックの子コンポーネントを定義\n@Component({\n  selector: 'app-child', // 子コンポーネントと同じものを定義\n  template: '<p>Mock Child Component</p>'\n})\nclass MockClildComponent {\n  @Input() childInput: string;\n  @Output() childOutput = new EventEmitter();\n}\n\n// ...\n\nbeforeEach(() => {\n  TestBed.configureTestingModule({\n    declarations: [\n      // テスト時のdeclarationsにモックの定義を追加\n      MockProductSettingsComponent,\n      // ...\n    ],\n    // ...\n  });\n  // ...\n});\n```\n\n\b**参考サイト**\n\n* [stackOverFlow](https://stackoverflow.com/questions/41240163/mocking-child-components-angular-2)\n\n\n## テスト結果にAngular Materilaのスタイルが反映されない\nUIフレームワークで[Angular Material](https://material.angular.io/)を使っている場合、\n`karma.config.js`でAngular Materilaのcssを直接読み込んであげる必要あります。\n\n```javascript:karma.conf.js\nfiles: [\n      ・・・\n      // Angular Materialのスタイルをテスト開始時に読み込んでおく\n      {pattern: './node_modules/@angular/material/prebuilt-themes/indigo-pink.css', included: true, watched: false},\n],\n```\n\n**参考サイト**\n\n* [stackoverflow](https://github.com/angular/material2/issues/4056)\n\n\n## テスト結果にstyles.scss(アプリ共通のスタイル定義)のスタイルが反映されない\nアプリ共通スタイルをSASS形式にしている場合\n開発用ライブライに`karma-scss-preprocessor`と`node-sass`を追加して`karma.conf.js`を下記のように設定します。\n\n```javascript:karma.conf.js\nplugins: [\n  ・・・\n　 // プラグインに`karma-scss-preprocessor`を追加\n  require('karma-scss-preprocessor')\n],\n\n\nfiles: [\n  ・・・\n  // filesにアプリ共通スタイルを追加\n  { pattern: './src/styles.scss', watched: false,  included: true, served: true }\n],\n\n// preprocessorsを追加\npreprocessors: {\n './src/test.ts': ['@angular/cli'],\n './src/styles.scss': ['scss']\n},\n```\n\n\b**参考サイト**:\n\n* [stackOverFlow](https://stackoverflow.com/questions/44460733/how-to-configure-karma-to-include-global-scss-files-for-an-angular-cli-project/44498689#44498689)\n* [Github karma/issue/2700](https://github.com/karma-runner/karma/issues/2700)\n\n\n\n\n# 3. バックエンド側 Express、MongoDB周り\n※MongDBをNode.jsで扱う場合は[mongoose](https://github.com/Automattic/mongoose)という便利なライブラリがあるのでそれを使う前提のお話です。\n\n## mongooseのvirtualメソッドを使う\n例えば`記事`,`コメント`,`リプライ`などのモデルを定義する場合、\n３つのモデルのライフサイクルは、記事追加 => 記事に対するコメント追加 => コメントに対するリプライ追加　のようになります。\nこのような場合は、コメントが記事の参照を持ち、リプライがコメントの参照を持つモデル構造が望ましいです。コメントやリプライ追加時に１つのモデルの更新だけですむからです。\n![db構造_良.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f93ac0e6-317e-1cdf-bfba-13531e2455ba.png)\n\nただ記事の検索は少し工夫が必要で、**mongooseのvirtualを使います**。これによって記事からコメントへの参照、コメントからリプライへの参照を擬似的に定義できるため、\n検索時に擬似要素をpopulateするだけで、記事に紐付くコメントとリプライを取得できるようになります。\n![mongoose virtualのイメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/4aab7f38-1f19-e00b-b35d-23babf36a75b.png)\n\n具体的なソースコードを示します。\n\n```typescript:article.model.ts\nimport * as mongoose from 'mongoose';\n\nconst ArticleSchema = new mongoose.Schema({\n  content: String\n}, { toJSON: { virtuals: true } });\n\n\n// 記事に紐付くコメントモデルの配列をcommentsという擬似要素で定義する\nArticleSchema.virtual('comments', {\n  ref: 'Comment',\n  localField: '_id',\n  foreignField: 'articleId',\n  justOne: false,\n});\n\nconst Article = mongoose.model('Article', ArticleSchema);\n\nexport { Article };\n```\n\n\n```typescript:comment.model.ts\nimport * as mongoose from 'mongoose';\n\nconst CommentSchema = new mongoose.Schema({\n  articleId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Article',\n  },\n  comment: String;\n}, { toJSON: { virtuals: true } });\n\n// コメントに紐付くリプライモデルの配列をrepliesという擬似要素で定義する\nCommentSchema.virtual('replies', {\n  ref: 'Reply',\n  localField: '_id',\n  foreignField: 'commentId',\n  justOne: false,\n});\n\nconst Comment = mongoose.model('Comment', CommentSchema);\n\nexport { Comment };\n```\n\n```typescript:reply.model.ts\nimport * as mongoose from 'mongoose';\n\nconst ReplySchema = new mongoose.Schema({\n  commentId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Comment'\n  },\n  reply: String;\n});\n\nconst Reply = mongoose.model('Reply', ReplySchema);\n\nexport { Reply };\n```\n\n```typescript:検索処理\nArticle.find()\n.populate({\n  path: 'comments', // Articleモデルで定義した擬似要素commentsをpopulateする\n  populate: [{\n    path: 'replies', // Commentモデルで定義した擬似要素repliesをpopulateする\n  }],\n});\n```\n\n\n## リクエスト、レスポンスのログ出力したい\nExpressのuseにて実現します。\nレスポンスオブジェクトのfinishイベントを監視することで、レスポンス時にログを出力しています。\n\n\n```javascript:リクエストとレスポンスのログ出力　※ここでは簡単のためコンソールに出力しています\nconst express = express();\nexpress.use(function accessLogHandler (req, res, next) {\n  const start = new Date();\n  // リクエスト時のログ　\n  console.log([\n    'start',\n    req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n    req.method,\n    req.url,\n    '-',\n    req.headers.referer || '-',\n    req.headers['user-agent'] || '-',\n    '--ms--'\n  ].join(',\\t'));\n\n  res.once('finish', function() {\n　　 // レスポンス時のログ\n    accessLogger.info([\n      'end',\n      req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n      req.method,\n      req.url,\n      res.statusCode,\n      req.headers.referer || '-',\n      req.headers['user-agent'] || '-',\n      '--' + (new Date().getMilliseconds() - start.getMilliseconds()) + 'ms--'\n    ].join(',\\t'));\n  });\n\n  next();\n});\n```\n\n実際のログはこんな感じで出力されます。\n\n```py3\nstart,  ::ffff:127.0.0.1, GET, /api/authenticate/check-state,   -, http://localhost:4200/, Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36, --ms--\nend,    ::ffff:127.0.0.1, GET, /check-state,                  403, http://localhost:4200/, Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36,  --47ms--\n```\n\n\n\n## ログ出力でオブジェクトの全プロパティを出力したい\nオブジェクトの中身をログで確認する時はNode.jsの`util.inspect()`を使います。\n\n\n```javascript\nconst util = require('util');\nconst myObject = {\n   \"a\":\"a\",\n   \"b\":{\n      \"c\":\"c\",\n      \"d\":{\n         \"e\":\"e\",\n         \"f\":{\n            \"g\":\"g\",\n            \"h\":{\n               \"i\":\"i\"\n            }\n         }\n      }\n   }\n}; \n\nconsole.log(util.inspect(myObject, false, null));\n```\n\nこのようなログが出力されます\n\n```\n{ a: 'a', b: { c: 'c', d: { e: 'e', f: [Object] } } }\n```\n\n**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/10729276/how-can-i-get-the-full-object-in-node-jss-console-log-rather-than-object)\n\n\n## 環境変数で上書きできる定数を定義したい\n例えばサーバのポートなど環境個別に設定したくなるようなものは\n環境変数で上書きできる定数にしておくと便利です。\nNode.jsではprocess.env.変数名で環境変数が参照できるので下記のようにします。\n\n```typescript:定数定義\nexport const SERVER_PORT: string = process.env.SERVER_PORT || '3000';　// 環境変数SERVER_PORTが未指定の場合は3000となる\nexport const SERVER_HOST: string = process.env.SERVER_HOST || 'localhost'; // 環境変数SERVER_HOSTが未指定の場合はlocalhostとなる\n```\n\n\n## DB初回アクセスに失敗した場合にリトライされない\nmongooseを使っていると、DB初回接続時にエラーが起きた時に、なぜか再接続処理してくれません。\nDockerでアプリを配布する場合、アプリとMongoDBをdocker-composeで同時に立ち上げることがあると思いますが、まだMongoDBが起動しきってない状態でアプリからDBに接続しようとすると、アプリが異常終了してしまいます。これを防ぐには自力で再接続処理を実装する必要があります。\n\n```javascript\nfunction createConnection (dbURL, options) {\n    var db = mongoose.createConnection(dbURL, options);\n\n    db.on('error', function (err) {\n        if (err.message && err.message.match(/failed to connect to server .* on first connect/)) {\n            console.log(new Date(), String(err));\n\n            setTimeout(function () {\n                console.log(\"Retrying first connect...\");\n                db.openUri(dbURL).catch(() => {});\n            // 20秒後に再接続する\n            }, 20 * 1000);\n        } else {\n            console.error(new Date(), String(err));\n        }\n    });\n\n    db.once('open', function () {\n        console.log(\"Connection to db established.\");\n    });\n\n    return db;\n}\n```\n\n**参考サイト**\n\n* [Github mongooseのissue5169](https://github.com/Automattic/mongoose/issues/5169)\n\n","comments_count":0,"created_at":"2017-12-12T03:19:11+09:00","likes_count":46,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/5644c24e-eade-50ca-aa11-83a4eaeba122/","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その２. テスト編","date":"2017-07-24T07:12:10+09:00","excerpt":"やりたいことAngular CLI使って、MEANスタック(MongoDB + Express + Angular + NodeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。フロント側とサーバ側の両方をweb...","tags":["JavaScript","jasmine","TypeScript","AngularJS","Protractor","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"5644c24e-eade-50ca-aa11-83a4eaeba122","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その２. テスト編","rendered_body":"\n<h2>\n<span id=\"やりたいこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたいこと</h2>\n\n<ul>\n<li>Angular CLI使って、MEANスタック(<strong>M</strong>ongoDB + <strong>E</strong>xpress + <strong>A</strong>ngular + <strong>N</strong>odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。</li>\n<li>フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。</li>\n<li>Dockerを使ってアプリを簡単に配布したい。</li>\n</ul>\n\n<p>これらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。</p>\n\n<ul>\n<li><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\" id=\"reference-fc6741a6eda3b7ffd9f1\">その１. ビルド編</a></li>\n<li>その２. テスト編　⇦　今回はココ</li>\n<li>その３. Dockerビルド編</li>\n</ul>\n\n<h2>\n<span id=\"その２-テスト編\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%81%AE%EF%BC%92-%E3%83%86%E3%82%B9%E3%83%88%E7%B7%A8\"><i class=\"fa fa-link\"></i></a>その２. テスト編</h2>\n\n<p><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\">その１. ビルド編</a>では、Angular CLIで作成したプロジェクトをベースに、<br>\nMongoDBに登録しているメッセージを画面に一覧で表示するアプリを作成しました。<br>\n今回は、クライアント側とサーバ側の<a href=\"https://jasmine.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">Jasmine</a>を使った単体テスト、<a href=\"http://www.protractortest.org/#/\" rel=\"nofollow noopener\" target=\"_blank\">Protractor</a>を使ったE2Eテスト、それらを実行するnpm scriptsを作成します。<br>\n最終的には下記のように<code>npm test</code>コマンドで単体テストが実行できるようになります。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" alt=\"10_単体テスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png\"></a></p>\n\n<p>またE2Eテストは<code>npm run e2e</code>コマンドで実施できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" alt=\"20_E2Eテスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png\"></a></p>\n\n<h3>\n<span id=\"プロジェクト構成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクト構成</h3>\n\n<p>今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。<br>\n<a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\">その１. ビルド編</a>で作成したものをベースにテスト用の資産を追加します。詳細は<a href=\"https://github.com/Takumon/angular4-express4-typescritp2/tree/test\" rel=\"nofollow noopener\" target=\"_blank\">リポジトリ</a>を参照してください。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">プロジェクト構成（完成イメージ）</span></div>\n<div class=\"highlight\"><pre>.\n├── dist                              ・・・(1) コンパイル資産出力先\n│   ├── server\n│   │   ├── ...\n│   │   ...\n│   │ \n│   └── server_test                      ・・・(1-1)　コンパイルされたサーバ側テスト資産\n│       ├── app.spec.js\n│       ├── app.spec.js.map\n│       ├── test.server.conf.js\n│       ├── test.server.conf.js.map\n│       ├── test.server.js\n│       └── test.server.js.map\n├── e2e                                ・・・(2)　E2Eテスト資産\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── server\n│   ├── ...\n│   ...\n│\n├── server_test                         ・・・(3)　サーバ側テスト資産\n│   ├── app.spec.ts\n│   ├── test.server.conf.ts\n│   ├── test.server.ts\n│   └── tsconfig.server_test.json\n├── src\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts      ・・・(4)　クライアント側テスト資産\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       ├── message.service.spec.ts ・・・(4)　クライアント側テスト資産\n│   │       └── message.service.ts\n│   ...\n│\n├── package-lock.json\n├── package.json\n├── protractor.conf.js                   ・・・(5)　E2Eテスト設定ファイル\n├── proxy.conf.json\n├── karma.conf.js\n├── tsconfig.json\n├── tslint.json\n└── README.md\n</pre></div>\n</div>\n\n<h4>\n<span id=\"各資産について\" class=\"fragment\"></span><a href=\"#%E5%90%84%E8%B3%87%E7%94%A3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>各資産について</h4>\n\n<h5>\n<span id=\"1-dist\" class=\"fragment\"></span><a href=\"#1-dist\"><i class=\"fa fa-link\"></i></a>(1) dist</h5>\n\n<p>コンパイル資産出力先。</p>\n\n<h5>\n<span id=\"1-1-distserver_test\" class=\"fragment\"></span><a href=\"#1-1-distserver_test\"><i class=\"fa fa-link\"></i></a>(1-1) dist/server_test</h5>\n\n<p>コンパイルされたサーバ側テスト資産(JSファイル)の出力先。<br>\nデプロイを考慮して本資産(dist/server)とは別ディレクトリにしています。</p>\n\n<h5>\n<span id=\"2-server_test\" class=\"fragment\"></span><a href=\"#2-server_test\"><i class=\"fa fa-link\"></i></a>(2) server_test</h5>\n\n<p>サーバ側テスト資産のディレクトリ。<br>\nコンパイル用の設定ファイルとテスト用の設定ファイルもココに格納します。</p>\n\n<h5>\n<span id=\"3-e2e\" class=\"fragment\"></span><a href=\"#3-e2e\"><i class=\"fa fa-link\"></i></a>(3) e2e</h5>\n\n<p>E2Eテスト用資産のディレクトリ。</p>\n\n<h5>\n<span id=\"4-srcapp配下のspectsファイル\" class=\"fragment\"></span><a href=\"#4-srcapp%E9%85%8D%E4%B8%8B%E3%81%AEspects%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\"><i class=\"fa fa-link\"></i></a>(4) src/app配下のspec.tsファイル</h5>\n\n<p>フロント側テスト資産。<br>\nコンパイルやテストは<code>ng</code>コマンドで実施します。</p>\n\n<h5>\n<span id=\"5-protractorconfjs\" class=\"fragment\"></span><a href=\"#5-protractorconfjs\"><i class=\"fa fa-link\"></i></a>(5) protractor.conf.js</h5>\n\n<p>E2Eテスト設定ファイル。<br>\n今回はAngular CLIでプロジェクトが作成するデフォルトから少しだけ修正します。</p>\n\n<h2>\n<span id=\"構築手順\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E7%AF%89%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>構築手順</h2>\n\n<h3>\n<span id=\"1-テストに必要なライブラリをインストール\" class=\"fragment\"></span><a href=\"#1-%E3%83%86%E3%82%B9%E3%83%88%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>1. テストに必要なライブラリをインストール</h3>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install --save zone.js@0.8.12\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n</pre></div></div>\n\n<ul>\n<li>\n<a href=\"https://www.npmjs.com/package/zone.js\" rel=\"nofollow noopener\" target=\"_blank\"><code>zone.js@0.8.12</code></a>\n\n<ul>\n<li>クライアント側のテストで使用します。Angular CLIでプロジェクトを作成した時点でインストールされていますが、テスト実行時に<code>Failed: Cannot create property '__creationTrace__' on string '__zone_symbol__optimizedZoneEventTask'</code>のようなエラーが出ます。<a href=\"https://github.com/angular/zone.js/issues/832\" rel=\"nofollow noopener\" target=\"_blank\">GitHubのissues</a>によるとv0.8.12はエラーが出ないそうなので、v0.8.12を再インストールします。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://www.npmjs.com/package/supertest\" rel=\"nofollow noopener\" target=\"_blank\"><code>supertest</code></a>\n\n<ul>\n<li>サーバ側のテストで使用します。APIテストを簡単にしてくれます。</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"2-クライアント側を作成\" class=\"fragment\"></span><a href=\"#2-%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2. クライアント側を作成</h3>\n\n<p>コンポーネント(app.component.ts)とサービス(message.service.ts)に対するテストコードを作成します。<br>\nクライアント側のテスト実行には<code>ng test</code>コマンドを使うので、ビルド周りの設定は不要です。</p>\n\n<h4>\n<span id=\"srcappappcomponentspects\" class=\"fragment\"></span><a href=\"#srcappappcomponentspects\"><i class=\"fa fa-link\"></i></a>src/app/app.component.spec.ts</h4>\n\n<p>コンポーネントは画面描画についてテストします。<br>\nコンポーネントで使うサービスは、<code>TestBed</code>の<code>overrideComponent</code>メソッドを使ってモック化します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.spec.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"k\">async</span><span class=\"p\">,</span> <span class=\"nx\">ComponentFixture</span><span class=\"p\">,</span> <span class=\"nx\">TestBed</span><span class=\"p\">,</span> <span class=\"nx\">inject</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/forms'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.component'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'AppComponent'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// テスト対象のComponent</span>\n  <span class=\"kd\">let</span> <span class=\"na\">component</span><span class=\"p\">:</span> <span class=\"nx\">AppComponent</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// テスト対象のFixture</span>\n  <span class=\"kd\">let</span> <span class=\"na\">fixture</span><span class=\"p\">:</span> <span class=\"nx\">ComponentFixture</span><span class=\"o\">&lt;</span><span class=\"nx\">AppComponent</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// MessageServiceのモック</span>\n  <span class=\"kd\">class</span> <span class=\"nx\">MessageServiceMock</span> <span class=\"p\">{</span>\n    <span class=\"nx\">getAll</span><span class=\"p\">():</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span>  <span class=\"p\">{</span> <span class=\"na\">messages</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n      <span class=\"p\">]};</span>\n\n      <span class=\"k\">return</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">([</span><span class=\"nx\">response</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n      <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">],</span>\n      <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"nx\">AppComponent</span>\n      <span class=\"p\">],</span>\n    <span class=\"p\">})</span>\n<span class=\"err\">　　　　　　　　　</span><span class=\"c1\">// MessageServiceのモックを設定</span>\n    <span class=\"p\">.</span><span class=\"nx\">overrideComponent</span><span class=\"p\">(</span><span class=\"nx\">AppComponent</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">set</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span> <span class=\"na\">provide</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">,</span> <span class=\"na\">useClass</span><span class=\"p\">:</span> <span class=\"nx\">MessageServiceMock</span> <span class=\"p\">},</span>\n        <span class=\"p\">]</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n    <span class=\"p\">.</span><span class=\"nx\">compileComponents</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">fixture</span> <span class=\"o\">=</span> <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">createComponent</span><span class=\"p\">(</span><span class=\"nx\">AppComponent</span><span class=\"p\">);</span>\n    <span class=\"nx\">component</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">componentInstance</span><span class=\"p\">;</span>\n    <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">detectChanges</span><span class=\"p\">();</span>\n  <span class=\"p\">}));</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'オブジェクトが生成されるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">debugElement</span><span class=\"p\">.</span><span class=\"nx\">componentInstance</span><span class=\"p\">;</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">).</span><span class=\"nx\">toBeTruthy</span><span class=\"p\">();</span>\n  <span class=\"p\">}));</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージを３件保持しているか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">component</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">([</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n    <span class=\"p\">]);</span>\n  <span class=\"p\">}));</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'画面にメッセージが３件表示されているか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">el</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">debugElement</span><span class=\"p\">.</span><span class=\"nx\">nativeElement</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ1'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ2'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ3'</span><span class=\"p\">);</span>\n  <span class=\"p\">}));</span>\n<span class=\"p\">});</span>\n\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappmessagemessageservicespects一部抜粋\" class=\"fragment\"></span><a href=\"#srcappmessagemessageservicespects%E4%B8%80%E9%83%A8%E6%8A%9C%E7%B2%8B\"><i class=\"fa fa-link\"></i></a>src/app/message/message.service.spec.ts(一部抜粋)</h4>\n\n<p>サービスのテストです。<br>\nサーバとのやりとり(HTTP通信)については<code>MockBackend</code>を使ってモック化しています。<br>\nなお<code>Error</code>は別途モックを作らなければなりません。<br>\n全て載せると冗長なので<code>register</code>メソッドのテストは割愛しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.service.spec.ts(一部抜粋)</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">TestBed</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">,</span> <span class=\"nx\">inject</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">HttpModule</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">,</span> <span class=\"nx\">Http</span><span class=\"p\">,</span> <span class=\"nx\">Response</span><span class=\"p\">,</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MockConnection</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">RequestMethod</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message.service'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'MessageService'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　</span><span class=\"c1\">// HTTP通信エラー用のモック</span>\n  <span class=\"kd\">class</span> <span class=\"nx\">MockError</span> <span class=\"kd\">extends</span> <span class=\"nx\">Response</span> <span class=\"kr\">implements</span> <span class=\"nb\">Error</span> <span class=\"p\">{</span>\n    <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">;</span>\n    <span class=\"nl\">message</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n<span class=\"err\">　　　　</span><span class=\"c1\">// HTTP通信はMockBackendでモック化</span>\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n      <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">HttpModule</span><span class=\"p\">],</span>\n      <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MessageService</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"na\">provide</span><span class=\"p\">:</span> <span class=\"nx\">Http</span><span class=\"p\">,</span>\n        <span class=\"na\">useFactory</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nx\">backend</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nx\">Http</span><span class=\"p\">(</span><span class=\"nx\">backend</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">),</span>\n        <span class=\"na\">deps</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">]</span>\n      <span class=\"p\">},</span> <span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">]</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'オブジェクトが生成されるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">service</span><span class=\"p\">).</span><span class=\"nx\">toBeTruthy</span><span class=\"p\">();</span>\n  <span class=\"p\">})));</span>\n\n\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'getAll'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージが取得できるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// HTTP通信のモックで返す具体的な値の設定</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">body</span> <span class=\"o\">=</span>  <span class=\"p\">{</span> <span class=\"na\">messages</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n        <span class=\"p\">]};</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">ops</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">({</span>\n          <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n          <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">mockRespond</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">Response</span><span class=\"p\">(</span><span class=\"nx\">ops</span><span class=\"p\">));</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストの内容を検証</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">RequestMethod</span><span class=\"p\">.</span><span class=\"nx\">Get</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// レスポンスの内容を検証</span>\n      <span class=\"nx\">service</span><span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">().</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">([</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n        <span class=\"p\">]);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">})));</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'異常時にエラーハンドリングされるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// HTTP通信のモックで返す具体的な値の設定</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">body</span> <span class=\"o\">=</span>  <span class=\"p\">{</span>\n          <span class=\"na\">title</span> <span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"s1\">'エラー'</span>\n        <span class=\"p\">};</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">ops</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">({</span>\n          <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span>\n          <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">mockError</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">MockError</span><span class=\"p\">(</span><span class=\"nx\">ops</span><span class=\"p\">));</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストの内容を検証</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">RequestMethod</span><span class=\"p\">.</span><span class=\"nx\">Get</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// レスポンスの内容を検証</span>\n      <span class=\"nx\">service</span><span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">().</span><span class=\"nx\">subscribe</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">fail</span><span class=\"p\">(</span><span class=\"s1\">'エラーハンドリングされなかった。'</span><span class=\"p\">);</span>\n      <span class=\"p\">},</span> <span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span> <span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"s1\">'エラー'</span>\n        <span class=\"p\">});</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">})));</span>\n\n  <span class=\"p\">});</span>\n\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"3-サーバ側を作成\" class=\"fragment\"></span><a href=\"#3-%E3%82%B5%E3%83%BC%E3%83%90%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>3. サーバ側を作成</h3>\n\n<p>プロジェクトの直下にserver_testディレクトリを作ってテストコードを書いていきます。<br>\nどちらかというと結合テストよりで、１つ１つの資産に対してではなくapp.tsに対して、実際にDBに接続しながらAPIテストを行います。規模が小さい場合はコレで充分だと思います。<br>\nまたExpressのテストフレームワークは<a href=\"https://mochajs.org/\" rel=\"nofollow noopener\" target=\"_blank\">Mocha</a>が一般的ですが、クライアント側と統一したいので、今回は<a href=\"https://jasmine.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">Jasmine</a>を使うことにします。</p>\n\n<h4>\n<span id=\"server_testappspects一部抜粋\" class=\"fragment\"></span><a href=\"#server_testappspects%E4%B8%80%E9%83%A8%E6%8A%9C%E7%B2%8B\"><i class=\"fa fa-link\"></i></a>server_test/app.spec.ts(一部抜粋)</h4>\n\n<p>ポイントとしてはテスト実行前にMessageモデルを使ってDBを初期化していることです。<br>\nそれによりテストデータがテストメソッドごとに想定する形になるようにしています。<br>\n異常時のテストは、Messsageのfindメソッドでエラーが発生するようにJasmineの<code>spyOn</code>メソッドで処理を置き換えます。<br>\n全て載せると冗長なのでメッセージ登録のテストは割愛しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.spec.ts(一部抜粋)</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">supertest</span> <span class=\"k\">from</span> <span class=\"s1\">'supertest'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"nx\">app</span> <span class=\"k\">from</span> <span class=\"s1\">'../server/app'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../server/models/message'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">request</span> <span class=\"o\">=</span> <span class=\"nx\">supertest</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">endpoint</span> <span class=\"o\">=</span> <span class=\"s1\">'/api/messages'</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">messageAscending</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">,</span> <span class=\"nx\">m2</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&gt;</span> <span class=\"nx\">m2</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&lt;</span> <span class=\"nx\">m2</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"c1\">// テスト前にDBのmessagesを初期化する</span>\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">({},</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n  <span class=\"p\">});</span>\n\n\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'Get'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'レスポンスがjson形式でステータスコードが200か'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n      <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// 検証</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'application/json'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">);</span>\n        <span class=\"p\">}).</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージ一覧が取得できるか'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n      <span class=\"kd\">const</span> <span class=\"nx\">testData</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ１'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ２'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ３'</span> <span class=\"p\">},</span>\n      <span class=\"p\">];</span>\n<span class=\"err\">　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// 事前準備（テストデータを作成）</span>\n      <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">testData</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">erro</span> <span class=\"p\">,</span> <span class=\"nx\">doc</span> <span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n        <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n          <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// 検証</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">sortedMessages</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">sort</span><span class=\"p\">(</span><span class=\"nx\">messageAscending</span><span class=\"p\">);</span>\n\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ１'</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ２'</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ３'</span><span class=\"p\">);</span>\n          <span class=\"p\">})</span>\n          <span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">});</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'異常時にエラーハンドリングされるか'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n      <span class=\"c1\">// エラーとなるようにMessageのfindメソッドを置き換える</span>\n      <span class=\"nx\">spyOn</span><span class=\"p\">(</span><span class=\"nx\">Message</span><span class=\"p\">,</span> <span class=\"s1\">'find'</span><span class=\"p\">).</span><span class=\"nx\">and</span><span class=\"p\">.</span><span class=\"nx\">callFake</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">callback</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">'エラー'</span><span class=\"p\">),</span> <span class=\"kc\">null</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n<span class=\"err\">　　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n      <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n          <span class=\"c1\">// 検証</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'application/json'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">);</span>\n\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'エラー'</span><span class=\"p\">);</span>\n        <span class=\"p\">})</span>\n        <span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"4-単体テスト周りの環境を整備\" class=\"fragment\"></span><a href=\"#4-%E5%8D%98%E4%BD%93%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>4. 単体テスト周りの環境を整備</h3>\n\n<p>E2Eの説明に入る前に、いったん単体テスト周りの環境を整備します。</p>\n\n<h4>\n<span id=\"packagejson\" class=\"fragment\"></span><a href=\"#packagejson\"><i class=\"fa fa-link\"></i></a>package.json</h4>\n\n<p><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792#pakcagejson\" id=\"reference-fc6741a6eda3b7ffd9f1\">前回</a>作成したものをベースに単体テストのスクリプトを追加してください。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\"> </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-p test:*\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"test:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng test\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"test:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s build:server_test -p watch:server_test  boot:server_test\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"watch:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -w -p ./server_test/tsconfig.server_test.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"boot:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"nodemon ./dist/server_test/test.server.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>test</strong>でクライアント側とサーバ側のテストを実行します。</li>\n<li>\n<strong>test:client</strong>でクライアント側のテストを実行します。Angular CLIのngコマンドにお任せしています。</li>\n<li>\n<strong>watch:server_test</strong>でサーバ側テスト資産をウォッチして変更があればコンパイルするようにします。</li>\n<li>\n<strong>boot:server_test</strong>でコンパイルしたサーバ側テスト資産を起動します。nodeではなくnodemonを使うことで資産に更新があった場合でも即座に反映するようにしています。</li>\n<li>\n<strong>build:server_test</strong>でサーバ側テスト資産をコンパイルします。コンパイル時の設定は下で触れるserver_test/test.server.conf.tsを使います。</li>\n</ul>\n\n<h4>\n<span id=\"server_testtestserverts\" class=\"fragment\"></span><a href=\"#server_testtestserverts\"><i class=\"fa fa-link\"></i></a>server_test/test.server.ts</h4>\n\n<p>サーバ側テストの起動処理を書きます。<br>\nレポーターには<a href=\"https://www.npmjs.com/package/jasmine-spec-reporter\" rel=\"nofollow noopener\" target=\"_blank\">jasmine-spec-reporter</a>を使いましょう。このライブラリはAngular CLIで作ったプロジェクトにはデフォルトでインストール済みです。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">test.server.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">SpecReporter</span><span class=\"p\">,</span> <span class=\"nx\">DisplayProcessor</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'jasmine-spec-reporter'</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">Jasmine</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'jasmine'</span><span class=\"p\">);</span>\n<span class=\"k\">import</span> <span class=\"nx\">SuiteInfo</span> <span class=\"o\">=</span> <span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">SuiteInfo</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">config</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./test.server.conf'</span><span class=\"p\">;</span>\n\n\n<span class=\"kd\">class</span> <span class=\"nx\">CustomProcessor</span> <span class=\"kd\">extends</span> <span class=\"nx\">DisplayProcessor</span> <span class=\"p\">{</span>\n    <span class=\"kr\">public</span> <span class=\"nx\">displayJasmineStarted</span><span class=\"p\">(</span><span class=\"nx\">info</span><span class=\"p\">:</span> <span class=\"nx\">SuiteInfo</span><span class=\"p\">,</span> <span class=\"nx\">log</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">string</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s2\">`TypeScript </span><span class=\"p\">${</span><span class=\"nx\">log</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">runner</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Jasmine</span><span class=\"p\">();</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">loadConfig</span><span class=\"p\">(</span><span class=\"nx\">config</span><span class=\"p\">);</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">addReporter</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">SpecReporter</span><span class=\"p\">({</span>\n    <span class=\"na\">customProcessors</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">CustomProcessor</span><span class=\"p\">],</span>\n<span class=\"p\">}));</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">onComplete</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">passed</span><span class=\"p\">){</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nx\">passed</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Success'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"s1\">'Failed'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">execute</span><span class=\"p\">();</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"server_testtestserverconfts\" class=\"fragment\"></span><a href=\"#server_testtestserverconfts\"><i class=\"fa fa-link\"></i></a>server_test/test.server.conf.ts</h4>\n\n<p>サーバ側テスト起動時の設定です。<br>\n注意点として<code>spec_files</code>に指定する相対パスはプロジェクト直下が起点になります。そのため<code>__dirname</code>を使って指定してください。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">test.server.conf.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">spec_dir</span><span class=\"p\">:</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span>\n  <span class=\"na\">spec_files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">__dirname</span><span class=\"p\">}</span><span class=\"s2\">/*spec.js`</span>\n  <span class=\"p\">],</span>\n  <span class=\"s1\">'stopSpecOnExpectationFailure'</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"s1\">'random'</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n<span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"server_testtsconfigserver_testjson\" class=\"fragment\"></span><a href=\"#server_testtsconfigserver_testjson\"><i class=\"fa fa-link\"></i></a>server_test/tsconfig.server_test.json</h4>\n\n<p>サーバ側テスト資産をコンパイルする時の設定ファイルです。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">tsconfig.server_test.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"extends\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../tsconfig.json\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"preserveConstEnums\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"outDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"mapRoot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"module\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"commonjs\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"include\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"s2\">\"**/*.spec.ts\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"./test.server.ts\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"./test.server.conf.ts\"</span><span class=\"w\">\n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<p><code>outDir</code>が<code>../dist/server_test</code>ではなく<code>../dist</code>であることに注意してください。<br>\nテスト資産は<code>server</code>ディレクトリ配下の資産に依存しているため、<code>../dist/server_test</code>を指定するとコンパイルした時に下記のように出力されてしまいます。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">（悪い例）outDirに\"../dist/server_test\"を指定したときのコンパイル結果</span></div>\n<div class=\"highlight\"><pre>.\n└── dist\n    └── server_test\n        ├── server\n        └── server_test \n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">（良い例）outDirに\"../dist\"を指定したときのコンパイル結果</span></div>\n<div class=\"highlight\"><pre>.\n└── dist\n    ├── server\n    └── server_test \n</pre></div>\n</div>\n\n<h3>\n<span id=\"5-e2eテストを作成\" class=\"fragment\"></span><a href=\"#5-e2e%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>5. E2Eテストを作成</h3>\n\n<p>単体テストを作成したので次はE2Eテストを作りましょう。<br>\nAngular CLIで作成したプロジェクトにデフォルトで用意されている<a href=\"http://www.protractortest.org/#/\" rel=\"nofollow noopener\" target=\"_blank\">Protractor</a>を使ったテストコードを作成します。</p>\n\n<h4>\n<span id=\"e2eappe2e-spects\" class=\"fragment\"></span><a href=\"#e2eappe2e-spects\"><i class=\"fa fa-link\"></i></a>e2e/app.e2e-spec.ts</h4>\n\n<p>基本的にelementメソッドで要素を取得して、sendKeysメソッドやclickメソッドで操作を行います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.e2e-spec.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.po'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">browser</span><span class=\"p\">,</span> <span class=\"nx\">element</span><span class=\"p\">,</span> <span class=\"nx\">by</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'protractor'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'E2Eテスト'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"na\">page</span><span class=\"p\">:</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'画面タイトルが正しいか'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">navigateTo</span><span class=\"p\">();</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">getParagraphText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'メッセージ一覧'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージが登録できるか'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">navigateTo</span><span class=\"p\">();</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">newMessage</span> <span class=\"o\">=</span> <span class=\"s2\">`サンプルメッセージ </span><span class=\"p\">${</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">toString</span><span class=\"p\">()}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n    <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessage'</span><span class=\"p\">)).</span><span class=\"nx\">sendKeys</span><span class=\"p\">(</span><span class=\"nx\">newMessage</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessageButton'</span><span class=\"p\">)).</span><span class=\"nx\">click</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// 登録後メッセージ入力項目が初期化されているか</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessage'</span><span class=\"p\">)).</span><span class=\"nx\">getText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 登録後一覧に登録したメッセージが含まれているか</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'messageList'</span><span class=\"p\">)).</span><span class=\"nx\">all</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">tagName</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">));</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">last</span><span class=\"p\">().</span><span class=\"nx\">getText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">newMessage</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"6-e2eテスト周りの環境を整備\" class=\"fragment\"></span><a href=\"#6-e2e%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>6. E2Eテスト周りの環境を整備</h3>\n\n<h4>\n<span id=\"packagejson-1\" class=\"fragment\"></span><a href=\"#packagejson-1\"><i class=\"fa fa-link\"></i></a>package.json</h4>\n\n<p>Angular CILプロジェクトデフォルトの\"e2e\"コマンドは削除して、スクリプトに下記を追加してください。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\"> </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"e2e\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s  webdriver:update -p webdriver:start protractor\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"webdriver:update\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"webdriver-manager update\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"webdriver:start\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"webdriver-manager start\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"protractor\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"protractor protractor.conf.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>e2e</strong>でE2Eテストを実行します。Angular CILプロジェクトデフォルトの<code>e2e</code>コマンド(= <code>ng e2e</code>コマンド)は使いません。<code>ng　e2e</code>はクライアント資産だけコンパイルして起動する処理が入っているからです。今回はビルドしたアプリ(クライアントとサーバが１つにまとまったアプリ)に対してテストします。</li>\n<li>\n<strong>webdriver:update</strong>でE2Eテストに必要なWebDriverをインストールまたは更新します。</li>\n<li>\n<strong>webdriver:start</strong>でWebDriverを起動します。Protractorのテストは事前にWebDriverを起動しておく必要があります。</li>\n<li>\n<strong>protractor</strong>でE2Eテストを実行します。起動時の設定は下で触れるprotractor.conf.jsを使います。</li>\n</ul>\n\n<h4>\n<span id=\"protractorconfjs\" class=\"fragment\"></span><a href=\"#protractorconfjs\"><i class=\"fa fa-link\"></i></a>protractor.conf.js</h4>\n\n<p>デフォルトでbaseUrlのポートは4200になっていますが、今回はビルドしたアプリに対してテストするので3000を指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">protractor.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"p\">...</span>\n  <span class=\"na\">baseUrl</span><span class=\"p\">:</span> <span class=\"s1\">'http://localhost:3000/'</span><span class=\"p\">,</span>\n  <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"7-試してみる\" class=\"fragment\"></span><a href=\"#7-%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>7. 試してみる</h3>\n\n<h4>\n<span id=\"単体テストを実行してみる\" class=\"fragment\"></span><a href=\"#%E5%8D%98%E4%BD%93%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>単体テストを実行してみる</h4>\n\n<ul>\n<li>\n<p>MongoDBをローカルで立ち上げる</p>\n\n<ul>\n<li>具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。</li>\n</ul>\n</li>\n<li><p>プロジェクト直下で<code>npm test</code>コマンドを実行するとテストが実行されます。クライアント側のテスト結果はブラウザに、サーバ側はターミナル（またはコンソール）に表示されます。資産はウォッチしているので、テストコードを修正すると、コンパイルされ再度テストが実行されるでしょう。</p></li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" alt=\"10_単体テスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png\"></a></p>\n\n<h4>\n<span id=\"e2eテストを実行してみる\" class=\"fragment\"></span><a href=\"#e2e%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>E2Eテストを実行してみる</h4>\n\n<ul>\n<li>\n<p>MongoDBをローカルで立ち上げる</p>\n\n<ul>\n<li>これも単体テストと同じでDBを事前に起動しておいてください。</li>\n</ul>\n</li>\n<li>\n<p>ビルドしたアプリを起動する</p>\n\n<ul>\n<li>プロジェクト直下で<code>npm run buildRun</code>を実行し、ビルド資産を起動します。</li>\n</ul>\n</li>\n<li>\n<p><code>npm run e2e</code>する</p>\n\n<ul>\n<li>別ターミナル（またはコマンドプロンプト）を開き、プロジェクト直下で<code>npm run e2e</code>コマンドを実行します。するとブラウザが立ち上がりテストが実行されます。\n<a href=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" alt=\"20_E2Eテスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png\"></a>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h2>\n\n<p>今回はMEANスタックアプリの単体テスト、E2Eテストについて紹介しました。<br>\nこれでビルドとテストができるようになったので、次回「その3. Dockerデプロイ編」では、Dockerでアプリを起動する方法とDockerでアプリのイメージを作ってデプロイする方法ついて紹介します。</p>\n","body":"## やりたいこと\n* Angular CLI使って、MEANスタック(**M**ongoDB + **E**xpress + **A**ngular + **N**odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。\n* フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。\n* Dockerを使ってアプリを簡単に配布したい。\n\nこれらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。\n\n* [その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)\n* その２. テスト編　⇦　今回はココ\n* その３. Dockerビルド編\n\n\n## その２. テスト編\n[その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)では、Angular CLIで作成したプロジェクトをベースに、\nMongoDBに登録しているメッセージを画面に一覧で表示するアプリを作成しました。\n今回は、クライアント側とサーバ側の[Jasmine](https://jasmine.github.io/)を使った単体テスト、[Protractor](http://www.protractortest.org/#/)を使ったE2Eテスト、それらを実行するnpm scriptsを作成します。\n最終的には下記のように`npm test`コマンドで単体テストが実行できるようになります。\n\n![10_単体テスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png)\n\nまたE2Eテストは`npm run e2e`コマンドで実施できるようになります。\n![20_E2Eテスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png)\n\n\n### プロジェクト構成\n今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。\n[その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)で作成したものをベースにテスト用の資産を追加します。詳細は[リポジトリ](https://github.com/Takumon/angular4-express4-typescritp2/tree/test)を参照してください。\n\n```:プロジェクト構成（完成イメージ）\n.\n├── dist                              ・・・(1) コンパイル資産出力先\n│   ├── server\n│   │   ├── ...\n│   │   ...\n│   │ \n│   └── server_test                      ・・・\u001c(1-1)　コンパイルされたサーバ側テスト資産\n│       ├── app.spec.js\n│       ├── app.spec.js.map\n│       ├── test.server.conf.js\n│       ├── test.server.conf.js.map\n│       ├── test.server.js\n│       └── test.server.js.map\n├── e2e                                ・・・\u001c(2)　E2Eテスト資産\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── server\n│   ├── ...\n│   ...\n│\n├── server_test                         ・・・\u001c(3)　サーバ側テスト資産\n│   ├── app.spec.ts\n│   ├── test.server.conf.ts\n│   ├── test.server.ts\n│   └── tsconfig.server_test.json\n├── src\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts      ・・・\u001c(4)　クライアント側テスト資産\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       ├── message.service.spec.ts ・・・\u001c(4)　クライアント側テスト資産\n│   │       └── message.service.ts\n│   ...\n│\n├── package-lock.json\n├── package.json\n├── protractor.conf.js                   ・・・\u001c(5)　E2Eテスト設定ファイル\n├── proxy.conf.json\n├── karma.conf.js\n├── tsconfig.json\n├── tslint.json\n└── README.md\n```\n#### 各資産について\n##### (1) dist\nコンパイル資産出力先。\n\n##### (1-1) dist/server_test\nコンパイルされたサーバ側テスト資産(JSファイル)の出力先。\nデプロイを考慮して本資産(dist/server)とは別ディレクトリにしています。\n\n##### (2) server_test\nサーバ側テスト資産のディレクトリ。\nコンパイル用の設定ファイルとテスト用の設定ファイルもココに格納します。\n\n##### (3) e2e\nE2Eテスト用資産のディレクトリ。\n\n##### (4) src/app配下のspec.tsファイル\nフロント側テスト資産。\nコンパイルやテストは`ng`コマンドで実施します。\n\n##### (5) protractor.conf.js\nE2Eテスト設定ファイル。\n今回はAngular CLIでプロジェクトが作成するデフォルトから少しだけ修正します。\n\n\n\n## 構築手順\n\n### 1. テストに必要なライブラリをインストール\n\n```\n$ npm install --save zone.js@0.8.12\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n```\n\n* [`zone.js@0.8.12`](https://www.npmjs.com/package/zone.js)\n    * クライアント側のテストで使用します。Angular CLIでプロジェクトを作成した時点でインストールされていますが、テスト実行時に`Failed: Cannot create property '__creationTrace__' on string '__zone_symbol__optimizedZoneEventTask'`のようなエラーが出ます。[GitHubのissues](https://github.com/angular/zone.js/issues/832)によるとv0.8.12はエラーが出ないそうなので、v0.8.12を再インストールします。\n* [`supertest`](https://www.npmjs.com/package/supertest)\n    * サーバ側のテストで使用します。APIテストを簡単にしてくれます。\n\n### 2. クライアント側を作成\nコンポーネント(app.component.ts)とサービス(message.service.ts)に対するテストコードを作成します。\nクライアント側のテスト実行には`ng test`コマンドを使うので、ビルド周りの設定は不要です。\n\n#### src/app/app.component.spec.ts\nコンポーネントは画面描画についてテストします。\nコンポーネントで使うサービスは、`TestBed`の`overrideComponent`メソッドを使ってモック化します。\n\n\n```js:app.component.spec.ts\nimport { async, ComponentFixture, TestBed, inject } from '@angular/core/testing';\nimport { FormsModule } from '@angular/forms';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/Rx';\n\nimport { AppComponent } from './app.component';\nimport { MessageService } from './message/message.service';\n\ndescribe('AppComponent', () => {\n  // テスト対象のComponent\n  let component: AppComponent;\n\n  // テスト対象のFixture\n  let fixture: ComponentFixture<AppComponent>;\n\n  // MessageServiceのモック\n  class MessageServiceMock {\n    getAll(): Observable<any> {\n      const response =  { messages : [\n        { message : 'テスト用メッセージ1' },\n        { message : 'テスト用メッセージ2' },\n        { message : 'テスト用メッセージ3' }\n      ]};\n\n      return Observable.from([response]);\n    }\n  }\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [ FormsModule ],\n      declarations: [\n        AppComponent\n      ],\n    })\n　　　　　　　　　// MessageServiceのモックを設定\n    .overrideComponent(AppComponent, {\n      set: {\n        providers: [\n          { provide: MessageService, useClass: MessageServiceMock },\n        ]\n      }\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(AppComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  }));\n\n  it('オブジェクトが生成されるか', async(() => {\n    const app = fixture.debugElement.componentInstance;\n    expect(app).toBeTruthy();\n  }));\n\n\n  it('メッセージを３件保持しているか', async(() => {\n    expect(component.messages).toEqual([\n        { message : 'テスト用メッセージ1' },\n        { message : 'テスト用メッセージ2' },\n        { message : 'テスト用メッセージ3' }\n    ]);\n  }));\n\n\n  it('画面にメッセージが３件表示されているか', async(() => {\n\n    const el = fixture.debugElement.nativeElement;\n\n    expect(el.querySelectorAll('li').length).toEqual(3);\n    expect(el.querySelectorAll('li')[0].textContent).toContain('テスト用メッセージ1');\n    expect(el.querySelectorAll('li')[1].textContent).toContain('テスト用メッセージ2');\n    expect(el.querySelectorAll('li')[2].textContent).toContain('テスト用メッセージ3');\n  }));\n});\n\n```\n\n\n#### src/app/message/message.service.spec.ts(一部抜粋)\nサービスのテストです。\nサーバとのやりとり(HTTP通信)については`MockBackend`を使ってモック化しています。\nなお`Error`は別途モックを作らなければなりません。\n全て載せると冗長なので`register`メソッドのテストは割愛しています。\n\n```js:message.service.spec.ts(一部抜粋)\nimport { TestBed, async, inject } from '@angular/core/testing';\nimport {HttpModule, BaseRequestOptions, Http, Response, ResponseOptions} from '@angular/http';\nimport {MockBackend, MockConnection} from '@angular/http/testing';\nimport { RequestMethod } from '@angular/http';\n\nimport { MessageService } from './message.service';\n\n\ndescribe('MessageService', () => {\n　　　　// HTTP通信エラー用のモック\n  class MockError extends Response implements Error {\n    name: any;\n    message: any;\n  }\n\n　　　　// HTTP通信はMockBackendでモック化\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpModule],\n      providers: [MessageService, {\n        provide: Http,\n        useFactory: (backend, options) => new Http(backend, options),\n        deps: [MockBackend, BaseRequestOptions]\n      }, MockBackend, BaseRequestOptions]\n    });\n  });\n\n  it('オブジェクトが生成されるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n    expect(service).toBeTruthy();\n  })));\n\n\n  describe('getAll', () => {\n\n    it('メッセージが取得できるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n　　　　　　　　　　　　// HTTP通信のモックで返す具体的な値の設定\n      backend.connections.subscribe((conn: MockConnection) => {\n        const body =  { messages : [\n          { message : 'テスト用メッセージ1' },\n          { message : 'テスト用メッセージ2' },\n          { message : 'テスト用メッセージ3' }\n        ]};\n\n        const ops = new ResponseOptions({\n          status: 200,\n          body: JSON.stringify(body)\n        });\n\n        conn.mockRespond(new Response(ops));\n      });\n\n　　　　　　　　　　　　// リクエストの内容を検証\n      backend.connections.subscribe((conn: MockConnection) => {\n        expect(conn.request.url).toEqual('/api/messages');\n        expect(conn.request.method).toEqual(RequestMethod.Get);\n      });\n\n　　　　　　　　　　　　// レスポンスの内容を検証\n      service.getAll().subscribe((res) => {\n        expect(res.messages.length).toEqual(3);\n        expect(res.messages).toEqual([\n          { message : 'テスト用メッセージ1' },\n          { message : 'テスト用メッセージ2' },\n          { message : 'テスト用メッセージ3' }\n        ]);\n      });\n    })));\n\n\n    it('異常時にエラーハンドリングされるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n　　　　　　　　　　　　// HTTP通信のモックで返す具体的な値の設定\n      backend.connections.subscribe((conn: MockConnection) => {\n        const body =  {\n          title : 'エラーが発生しました。',\n          error: 'エラー'\n        };\n\n        const ops = new ResponseOptions({\n          status: 500,\n          body: JSON.stringify(body)\n        });\n\n        conn.mockError(new MockError(ops));\n      });\n\n　　　　　　　　　　　　// リクエストの内容を検証\n      backend.connections.subscribe((conn: MockConnection) => {\n        expect(conn.request.url).toEqual('/api/messages');\n        expect(conn.request.method).toEqual(RequestMethod.Get);\n      });\n\n　　　　　　　　　　　　// レスポンスの内容を検証\n      service.getAll().subscribe(() => {\n        fail('エラーハンドリングされなかった。');\n      }, res => {\n        expect(res).toEqual({\n          title : 'エラーが発生しました。',\n          error: 'エラー'\n        });\n      });\n    })));\n\n  });\n\n\n});\n```\n\n\n\n### 3. サーバ側を作成\nプロジェクトの直下にserver_testディレクトリを作ってテストコードを書いていきます。\nどちらかというと結合テストよりで、１つ１つの資産に対してではなくapp.tsに対して、実際にDBに接続しながらAPIテストを行います。規模が小さい場合はコレで充分だと思います。\nまたExpressのテストフレームワークは[Mocha](https://mochajs.org/)が一般的ですが、クライアント側と統一したいので、今回は[Jasmine](https://jasmine.github.io/)を使うことにします。\n\n#### server_test/app.spec.ts(一部抜粋)\nポイントとしてはテスト実行前にMessageモデルを使ってDBを初期化していることです。\nそれによりテストデータがテストメソッドごとに想定する形になるようにしています。\n異常時のテストは、Messsageのfindメソッドでエラーが発生するようにJasmineの`spyOn`メソッドで処理を置き換えます。\n全て載せると冗長なのでメッセージ登録のテストは割愛しています。\n\n```js:app.spec.ts(一部抜粋)\nimport * as supertest from 'supertest';\n\nimport app from '../server/app';\nimport { Message } from '../server/models/message';\n\n\ndescribe('/api/messages', () => {\n  const request = supertest(app);\n  const endpoint = '/api/messages';\n\n  const messageAscending = (m1, m2) => {\n    if (m1.message > m2.message) {\n      return 1;\n    }\n\n    if (m1.message < m2.message) {\n      return -1;\n    }\n\n    return 0;\n  };\n\n  // テスト前にDBのmessagesを初期化する\n  beforeEach(() => {\n    Message.remove({}, () => {});\n  });\n\n\n  describe('Get', () => {\n\n    it('レスポンスがjson形式でステータスコードが200か', (done) => {\n\n　　　　　　　　　　　　　// リクエストを投げる\n      request.get(endpoint)\n        .expect((res) => {\n\n　　　　　　　　　　　　　　　　　　　　// 検証\n          expect(res.type).toEqual('application/json');\n          expect(res.statusCode).toEqual(200);\n        }).end(done);\n    });\n\n\n    it('メッセージ一覧が取得できるか', (done) => {\n\n      const testData = [\n        { message: 'テスト用メッセージ１' },\n        { message: 'テスト用メッセージ２' },\n        { message: 'テスト用メッセージ３' },\n      ];\n　　　　　　　　　　　　\n　　　　　　　　　　　　// 事前準備（テストデータを作成）\n      Message.create(testData, (erro , doc ) => {\n\n　　　　　　　　　　　　　　　　　// リクエストを投げる\n        request.get(endpoint)\n          .expect((res) => {\n　　　　　　　　　　　　　　　　　　　　　　　　\n　　　　　　　　　　　　　　　　　　　　　　　　// 検証\n            const sortedMessages = res.body.messages.sort(messageAscending);\n\n            expect(sortedMessages.length).toEqual(3);\n            expect(sortedMessages[0].message).toEqual('テスト用メッセージ１');\n            expect(sortedMessages[1].message).toEqual('テスト用メッセージ２');\n            expect(sortedMessages[2].message).toEqual('テスト用メッセージ３');\n          })\n          .end(done);\n      });\n    });\n\n\n    it('異常時にエラーハンドリングされるか', (done) => {\n\n      // エラーとなるようにMessageのfindメソッドを置き換える\n      spyOn(Message, 'find').and.callFake(function(callback) {\n        callback(new Error('エラー'), null);\n      });\n　　　　　　　　　　　　　\n　　　　　　　　　　　　// リクエストを投げる\n      request.get(endpoint)\n        .expect((res) => {\n\n          // 検証\n          expect(res.type).toEqual('application/json');\n          expect(res.statusCode).toEqual(500);\n\n          expect(res.body.title).toEqual('エラーが発生しました。');\n          expect(res.body.error).toEqual('エラー');\n        })\n        .end(done);\n    });\n\n  });\n});\n```\n\n\n\n### 4. 単体テスト周りの環境を整備\nE2Eの説明に入る前に、いったん単体テスト周りの環境を整備します。\n\n\n#### package.json\n[前回](http://qiita.com/Takumon/items/572438809384e2e11792#pakcagejson)作成したものをベースに単体テストのスクリプトを追加してください。\n\n```json:package.json\n \"scripts\": {\n    ...\n    \"test\": \"run-p test:*\",\n    \"test:client\": \"ng test\",\n    \"test:server\": \"npm-run-all -s build:server_test -p watch:server_test  boot:server_test\",\n    \"watch:server_test\": \"tsc -w -p ./server_test/tsconfig.server_test.json\",\n    \"boot:server_test\": \"nodemon ./dist/server_test/test.server.js\",\n    \"build:server_test\": \"tsc -p ./server/tsconfig.server.json\",\n    ...\n  },\n```\n\n\n* **test**でクライアント側とサーバ側のテストを実行します。\n* **test:client**でクライアント側のテストを実行します。Angular CLIのngコマンドにお任せしています。\n* **watch:server_test**でサーバ側テスト資産をウォッチして変更があればコンパイルするようにします。\n* **boot:server_test**でコンパイルしたサーバ側テスト資産を起動します。nodeではなくnodemonを使うことで資産に更新があった場合でも即座に反映するようにしています。\n* **build:server_test**でサーバ側テスト資産をコンパイルします。コンパイル時の設定は下で触れるserver_test/test.server.conf.tsを使います。\n\n#### server_test/test.server.ts\nサーバ側テストの起動処理を書きます。\nレポーターには[jasmine-spec-reporter](https://www.npmjs.com/package/jasmine-spec-reporter)を使いましょう。このライブラリはAngular CLIで作ったプロジェクトにはデフォルトでインストール済みです。\n\n```js:test.server.ts\nimport { SpecReporter, DisplayProcessor } from 'jasmine-spec-reporter';\nconst Jasmine = require('jasmine');\nimport SuiteInfo = jasmine.SuiteInfo;\n\nimport { config } from './test.server.conf';\n\n\nclass CustomProcessor extends DisplayProcessor {\n    public displayJasmineStarted(info: SuiteInfo, log: string): string {\n        return `TypeScript ${log}`;\n    }\n}\n\nconst runner = new Jasmine();\nrunner.loadConfig(config);\nrunner.addReporter(new SpecReporter({\n    customProcessors: [CustomProcessor],\n}));\nrunner.onComplete(function(passed){\n  if ( passed ) {\n    console.log('Success');\n  } else {\n    console.error('Failed');\n  }\n});\n\nrunner.execute();\n```\n\n\n#### server_test/test.server.conf.ts\nサーバ側テスト起動時の設定です。\n注意点として`spec_files`に指定する相対パスはプロジェクト直下が起点になります。そのため`__dirname`を使って指定してください。\n\n```js:test.server.conf.ts\nexport const config = {\n  spec_dir: '.',\n  spec_files: [\n    `${__dirname}/*spec.js`\n  ],\n  'stopSpecOnExpectationFailure': false,\n  'random': false\n};\n```\n\n\n\n#### server_test/tsconfig.server_test.json\n\nサーバ側テスト資産をコンパイルする時の設定ファイルです。\n\n```json:tsconfig.server_test.json\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"preserveConstEnums\": true,\n    \"outDir\": \"../dist\",\n    \"mapRoot\": \"../dist\",\n    \"module\": \"commonjs\"\n  } ,\n  \"include\": [\n    \"**/*.spec.ts\",\n    \"./test.server.ts\",\n    \"./test.server.conf.ts\"\n  ]\n}\n```\n\n`outDir`が`../dist/server_test`ではなく`../dist`であることに注意してください。\nテスト資産は`server`ディレクトリ配下の資産に依存しているため、`../dist/server_test`を指定するとコンパイルした時に下記のように出力されてしまいます。\n\n```:\u001c（悪い例）outDirに\"../dist/server_test\"を指定したときのコンパイル結果\n.\n└── dist\n    └── server_test\n        ├── server\n        └── server_test \n```\n```:\u001c（良い例）outDirに\"../dist\"を指定したときのコンパイル結果\n.\n└── dist\n    ├── server\n    └── server_test \n```\n\n\n### 5. E2Eテストを作成\n単体テストを作成したので次はE2Eテストを作りましょう。\nAngular CLIで作成したプロジェクトにデフォルトで用意されている[Protractor](http://www.protractortest.org/#/)を使ったテストコードを作成します。\n\n#### e2e/app.e2e-spec.ts\n基本的にelementメソッドで要素を取得して、sendKeysメソッドやclickメソッドで操作を行います。\n\n```js:app.e2e-spec.ts\nimport { Angular4Express4Typescritp2Page } from './app.po';\nimport { browser, element, by } from 'protractor';\n\n\ndescribe('E2Eテスト', () => {\n  let page: Angular4Express4Typescritp2Page;\n\n  beforeEach(() => {\n    page = new Angular4Express4Typescritp2Page();\n  });\n\n  it('画面タイトルが正しいか', () => {\n    page.navigateTo();\n    expect(page.getParagraphText()).toEqual('メッセージ一覧');\n  });\n\n\n  it('メッセージが登録できるか', () => {\n    page.navigateTo();\n    const newMessage = `サンプルメッセージ ${new Date().toString()}`;\n    element(by.id('registerMessage')).sendKeys(newMessage);\n\n    element(by.id('registerMessageButton')).click();\n\n    // 登録後メッセージ入力項目が初期化されているか\n    expect(element(by.id('registerMessage')).getText()).toEqual('');\n\n    // 登録後一覧に登録したメッセージが含まれているか\n    const messages = element(by.id('messageList')).all(by.tagName('li'));\n    expect(messages.last().getText()).toEqual(newMessage);\n  });\n\n});\n```\n\n### 6. E2Eテスト周りの環境を整備\n\n#### package.json\nAngular CILプロジェクトデフォルトの\"e2e\"コマンドは削除して、スクリプトに下記を追加してください。\n\n```json:package.json\n \"scripts\": {\n    ...\n    \"e2e\": \"npm-run-all -s  webdriver:update -p webdriver:start protractor\",\n    \"webdriver:update\": \"webdriver-manager update\",\n    \"webdriver:start\": \"webdriver-manager start\",\n    \"protractor\": \"protractor protractor.conf.js\",\n    ...\n  },\n```\n\n* **e2e**でE2Eテストを実行します。Angular CILプロジェクトデフォルトの`e2e`コマンド(= `ng e2e`コマンド)は使いません。`ng　e2e`はクライアント資産だけコンパイルして起動する処理が入っているからです。今回はビルドしたアプリ(クライアントとサーバが１つにまとまったアプリ)に対してテストします。\n* **webdriver:update**でE2Eテストに必要なWebDriverをインストールまたは更新します。\n* **webdriver:start**でWebDriverを起動します。Protractorのテストは事前にWebDriverを起動しておく必要があります。\n* **protractor**でE2Eテストを実行します。起動時の設定は下で触れるprotractor.conf.jsを使います。\n\n#### protractor.conf.js\nデフォルトでbaseUrlのポートは4200になっていますが、今回はビルドしたアプリに対してテストするので3000を指定します。\n\n```js:protractor.conf.js\nexports.config = {\n  ...\n  baseUrl: 'http://localhost:3000/',\n  ...\n}\n```\n\n### 7. 試してみる\n#### 単体テストを実行してみる\n* MongoDBをローカルで立ち上げる\n    * 具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。\n\n* プロジェクト直下で`npm test`コマンドを実行するとテストが実行されます。クライアント側のテスト結果はブラウザに、サーバ側はターミナル（またはコンソール）に表示されます。資産はウォッチしているので、テストコードを修正すると、コンパイルされ再度テストが実行されるでしょう。\n\n![10_単体テスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png)\n\n\n\n#### E2Eテストを実行してみる\n* MongoDBをローカルで立ち上げる\n    * これも単体テストと同じでDBを事前に起動しておいてください。\n \n* ビルドしたアプリを起動する\n    * プロジェクト直下で`npm run buildRun`を実行し、ビルド資産を起動します。\n\n* `npm run e2e`する\n    * 別ターミナル（またはコマンドプロンプト）を開き、プロジェクト直下で`npm run e2e`コマンドを実行します。するとブラウザが立ち上がりテストが実行されます。\n![20_E2Eテスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png)\n\n\n## 終わりに\n今回はMEANスタックアプリの単体テスト、E2Eテストについて紹介しました。\nこれでビルドとテストができるようになったので、次回「その3. Dockerデプロイ編」では、Dockerでアプリを起動する方法とDockerでアプリのイメージを作ってデプロイする方法ついて紹介します。\n\n","comments_count":0,"created_at":"2017-07-24T07:12:10+09:00","likes_count":9,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/bb5bc899-9dfd-5e67-bc4c-bc422ba8d176/","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その１. ビルド編","date":"2017-07-19T02:06:59+09:00","excerpt":"やりたいことAngular CLI使って、MEANスタック(MongoDB + Express + Angular + NodeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。フロント側とサーバ側の両方をweb...","tags":["JavaScript","MongoDB","Express","TypeScript","AngularJS","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"bb5bc899-9dfd-5e67-bc4c-bc422ba8d176","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その１. ビルド編","rendered_body":"\n<h2>\n<span id=\"やりたいこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたいこと</h2>\n\n<ul>\n<li>Angular CLI使って、MEANスタック(<strong>M</strong>ongoDB + <strong>E</strong>xpress + <strong>A</strong>ngular + <strong>N</strong>odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。</li>\n<li>フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。</li>\n<li>Dockerを使ってアプリを簡単に配布したい。</li>\n</ul>\n\n<p>これらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。</p>\n\n<ul>\n<li>その１. ビルド編　⇦　今回はココ</li>\n<li><a href=\"http://qiita.com/Takumon/items/b4211fcabad740baa551\" id=\"reference-b35cd1a7f8ba1daaecd8\">その２. テスト編</a></li>\n<li>その３. Dockerビルド編</li>\n</ul>\n\n<h2>\n<span id=\"その１-ビルド編\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%81%AE%EF%BC%91-%E3%83%93%E3%83%AB%E3%83%89%E7%B7%A8\"><i class=\"fa fa-link\"></i></a>その１. ビルド編</h2>\n\n<p>Angular CLIで作成したプロジェクトをベースに、<br>\nMongoDBに登録したメッセージを画面に一覧で表示するアプリを作成していきます。<br>\nメッセージを登録すると一覧に追加されていくようなアプリです。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" alt=\"アプリ概要.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png\"></a></p>\n\n<h3>\n<span id=\"プロジェクト構成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクト構成</h3>\n\n<p>今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。<br>\n<a href=\"https://github.com/Takumon/angular4-express4-typescritp2/tree/build\" rel=\"nofollow noopener\" target=\"_blank\">リポジトリ</a>も用意しているので詳細はそちらを参照してください。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">プロジェクトの構成（完成イメージ）</span></div>\n<div class=\"highlight\"><pre>.\n├── dist                ・・・(1) コンパイル資産出力先\n│   └── server　　　　　　　　      ・・・(1-1)　コンパイルされたサーバ資産\n│       ├── app.js\n│       ├── app.js.map\n│       ├── bin\n│       │   ├── www.js\n│       │   └── www.js.map\n│       ├── config.js\n│       ├── config.js.map\n│       ├── models\n│       │   ├── message.js\n│       │   └── message.js.map\n│       ├── public      ・・・(1-2) コンパイルされたクライアント資産\n│       │   ├── favicon.ico\n│       │   ├── index.html\n│       │   ├── inline.bundle.js\n│       │   ├── inline.bundle.js.map\n│       │   ├── main.bundle.js\n│       │   ├── main.bundle.js.map\n│       │   ├── polyfills.bundle.js\n│       │   ├── polyfills.bundle.js.map\n│       │   ├── styles.bundle.js\n│       │   ├── styles.bundle.js.map\n│       │   ├── vendor.bundle.js\n│       │   └── vendor.bundle.js.map\n│       └── routes\n│           ├── message.js\n│           └── message.js.map\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── e2e\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── server               ・・・(2)　サーバ資産\n│   ├── app.ts\n│   ├── bin\n│   │   └── www.ts\n│   ├── config.ts\n│   ├── models\n│   │   └── message.ts\n│   ├── routes\n│   │   └── message.ts\n│   └── tsconfig.server.json\n├── src                   ・・・(3)　クライアント資産\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       └── message.service.ts\n│   ├── assets\n│   ├── environments\n│   │   ├── environment.prod.ts\n│   │   └── environment.ts\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── main.ts\n│   ├── polyfills.ts\n│   ├── styles.css\n│   ├── test.ts\n│   ├── tsconfig.app.json\n│   ├── tsconfig.spec.json\n│   └── typings.d.ts\n├── karma.conf.js\n├── package-lock.json\n├── package.json\n├── protractor.conf.js\n├── proxy.conf.json    ・・・(4) \n├── tsconfig.json\n├── tslint.json\n└── README.md\n</pre></div>\n</div>\n\n<h4>\n<span id=\"各資産について\" class=\"fragment\"></span><a href=\"#%E5%90%84%E8%B3%87%E7%94%A3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>各資産について</h4>\n\n<h5>\n<span id=\"1-dist\" class=\"fragment\"></span><a href=\"#1-dist\"><i class=\"fa fa-link\"></i></a>(1) dist</h5>\n\n<p>コンパイルした資産の出力先フォルダ</p>\n\n<h5>\n<span id=\"1-1-distserver\" class=\"fragment\"></span><a href=\"#1-1-distserver\"><i class=\"fa fa-link\"></i></a>(1-1) dist/server</h5>\n\n<p>ここにサーバ側のコンパイルされたjsファイルが出力されます。<br>\nserverフォルダを設けているのは本資産とテスト資産を分離したかったからです。<br>\nその２. テスト編で説明しますが、サーバ側テスト用jsファイルはdist配下のserver_testフォルダに出力されるようにしています。</p>\n\n<h5>\n<span id=\"1-2-distserverpublic\" class=\"fragment\"></span><a href=\"#1-2-distserverpublic\"><i class=\"fa fa-link\"></i></a>(1-2) dist/server/public</h5>\n\n<p>コンパイルされたクライアント資産。<br>\nサーバ側アプリの資産の一部としてコンパイルされるようにしています。<br>\nExpressのアプリでは静的資産をpublicフォルダに置くのが一般的なのでこうしました。</p>\n\n<h5>\n<span id=\"2-server\" class=\"fragment\"></span><a href=\"#2-server\"><i class=\"fa fa-link\"></i></a>(2) server</h5>\n\n<p>サーバ資産を格納するためのディレクトリ。<br>\nいろいろ悩みましたが、TypeScript資産をコンパイルすることとテストすることを考慮してこのような構成にしました。</p>\n\n<h5>\n<span id=\"3-src\" class=\"fragment\"></span><a href=\"#3-src\"><i class=\"fa fa-link\"></i></a>(3) src</h5>\n\n<p>フロントの実行資産とテスト資産を格納するためのディレクリ。<br>\nAngular CLIでプロジェクトを作成するとデフォルトで作成されます。<br>\nビルドやアプリ起動は<code>ng</code>コマンドで実施します。</p>\n\n<h5>\n<span id=\"4-proxyconfjson\" class=\"fragment\"></span><a href=\"#4-proxyconfjson\"><i class=\"fa fa-link\"></i></a>(4) proxy.conf.json</h5>\n\n<p><code>npm start</code>でフロント側とサーバ側を同時に起動した時に、クライアント側からサーバ側へのリクエストを送れるようにするためのプロキシ設定です。</p>\n\n<h2>\n<span id=\"構築手順\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E7%AF%89%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>構築手順</h2>\n\n<h3>\n<span id=\"1-プロジェクト作成\" class=\"fragment\"></span><a href=\"#1-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>1. プロジェクト作成</h3>\n\n<ul>\n<li>\n<p>Angular CLIをインストール</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install -g @angular/cli\n</pre></div></div>\n</li>\n<li>\n<p>プロジェクトを生成、Angular CLIであらかじめ定義している依存ライブラリをインストール</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ ng new sample\n$ cd sample\n$ npm install\n</pre></div></div>\n</li>\n<li>\n<p>Angular CLIであらかじめ定義している依存ライブラリの他に必要なものををインストール<br>\n</p>\n<dd>\n<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/express\" rel=\"nofollow noopener\" target=\"_blank\"><code>express</code></a><br>\n    </dt>\n<dd>Webアプリケーションフレームワーク<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/body-parser\" rel=\"nofollow noopener\" target=\"_blank\"><code>body-parser</code></a><br>\n    </dt>\n<dd>リクエストボディのパーサー<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/mongoose\" rel=\"nofollow noopener\" target=\"_blank\"><code>mongoose</code></a><br>\n    </dt>\n<dd>MongoDBへのアクセスを簡単にしてくれるAPI<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/nodemon\" rel=\"nofollow noopener\" target=\"_blank\"><code>nodemon</code></a><br>\n    </dt>\n<dd>node実行時にソースの変更を自動反映してくれるツール<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/npm-run-all\" rel=\"nofollow noopener\" target=\"_blank\"><code>npm-run-all</code></a><br>\n    </dt>\n<dd>npm-scripts の連結実行を管理するためのパッケージ<br>\n</dd>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install --save express body-parser mongoose\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n</pre></div></div>\n</li>\n</ul>\n\n<h3>\n<span id=\"2-サーバ側を作成\" class=\"fragment\"></span><a href=\"#2-%E3%82%B5%E3%83%BC%E3%83%90%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2. サーバ側を作成</h3>\n\n<p>Angular CLIで作ったプロジェクトの直下に<code>server</code>フォルダを作って、その中にサーバ側の処理を書いていきます。</p>\n\n<h4>\n<span id=\"servermodelsmessagets\" class=\"fragment\"></span><a href=\"#servermodelsmessagets\"><i class=\"fa fa-link\"></i></a>server/models/message.ts</h4>\n\n<p>MongoDBにアクセスするためのモデルを定義します。<br>\nDBアクセスにはmangoosを使います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Message</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'messages'</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">}</span>\n<span class=\"p\">}));</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverroutesmessagets\" class=\"fragment\"></span><a href=\"#serverroutesmessagets\"><i class=\"fa fa-link\"></i></a>server/routes/message.ts</h4>\n\n<p>エンドポイントごとの処理を記述するルータを定義します。<br>\nメッセージの取得と登録には<code>server/models/message.ts</code>を使います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">http</span> <span class=\"k\">from</span> <span class=\"s1\">'http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Router</span><span class=\"p\">,</span> <span class=\"nx\">Response</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'express'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../models/message'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">messageRouter</span><span class=\"p\">:</span> <span class=\"nx\">Router</span> <span class=\"o\">=</span> <span class=\"nx\">Router</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// 全てのメッセージを取得する</span>\n<span class=\"nx\">messageRouter</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">doc</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span><span class=\"na\">messages</span><span class=\"p\">:</span> <span class=\"nx\">doc</span><span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// メッセージを登録する</span>\n<span class=\"nx\">messageRouter</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Message</span><span class=\"p\">({</span>\n    <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">save</span><span class=\"p\">((</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n      <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'メッセージを登録しました。'</span><span class=\"p\">,</span>\n      <span class=\"na\">obj</span><span class=\"p\">:</span> <span class=\"nx\">result</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">messageRouter</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverappts\" class=\"fragment\"></span><a href=\"#serverappts\"><i class=\"fa fa-link\"></i></a>server/app.ts</h4>\n\n<p>Expressで使用するルータと依存モジュールを定義するためのファイルを作成します。<br>\nメッセージAPIのエンドポイントは<code>/api/messages</code>に設定し、<br>\nmongooseを使ってMongoDBへの接続設定をしています。<br>\nクライアント資産はビルドするとpublicフォルダ配下に出力されるようにしているので、<br>\n静的資産へのルーティングはpublicフォルダを指定しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">express</span> <span class=\"k\">from</span> <span class=\"s1\">'express'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">path</span> <span class=\"k\">from</span> <span class=\"s1\">'path'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">bodyParser</span> <span class=\"k\">from</span> <span class=\"s1\">'body-parser'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">messageRouter</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./routes/message'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MONGO_URL</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./config'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">App</span> <span class=\"p\">{</span>\n  <span class=\"kr\">public</span> <span class=\"nx\">express</span><span class=\"p\">:</span> <span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">Application</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">middleware</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">routes</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kr\">private</span> <span class=\"nx\">middleware</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">bodyParser</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">());</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">bodyParser</span><span class=\"p\">.</span><span class=\"nx\">urlencoded</span><span class=\"p\">({</span> <span class=\"na\">extended</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">}));</span>\n    <span class=\"c1\">// 接続する MongoDB の設定</span>\n    <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nb\">Promise</span> <span class=\"o\">=</span> <span class=\"nb\">global</span><span class=\"p\">.</span><span class=\"nb\">Promise</span><span class=\"p\">;</span>\n    <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">MONGO_URL</span> <span class=\"o\">||</span> <span class=\"nx\">MONGO_URL</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">useMongoClient</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"p\">});</span>\n    <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'SIGINT'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">disconnect</span><span class=\"p\">();</span> <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kr\">private</span> <span class=\"nx\">routes</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 静的資産へのルーティング</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"kr\">static</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'public'</span><span class=\"p\">)));</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"nx\">messageRouter</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// その他のリクエストはindexファイルにルーティング</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">sendFile</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'public/index.html'</span><span class=\"p\">));</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"k\">new</span> <span class=\"nx\">App</span><span class=\"p\">().</span><span class=\"nx\">express</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverbinwwwts\" class=\"fragment\"></span><a href=\"#serverbinwwwts\"><i class=\"fa fa-link\"></i></a>server/bin/www.ts</h4>\n\n<p>Node.js でサーバを起動するための設定ファイルを作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">www.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">http</span> <span class=\"k\">from</span> <span class=\"s1\">'http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">SERVER_PORT</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../config'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">app</span> <span class=\"k\">from</span> <span class=\"s1\">'../app'</span><span class=\"p\">;</span>\n\n\n\n<span class=\"c1\">// ポートの設定.</span>\n<span class=\"kd\">const</span> <span class=\"nx\">port</span> <span class=\"o\">=</span> <span class=\"nx\">normalizePort</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">PORT</span> <span class=\"o\">||</span> <span class=\"nx\">SERVER_PORT</span><span class=\"p\">);</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"kd\">set</span><span class=\"p\">(</span><span class=\"s1\">'port'</span><span class=\"p\">,</span> <span class=\"nx\">port</span><span class=\"p\">);</span>\n\n\n<span class=\"c1\">// HTTPサーバ生成.</span>\n<span class=\"kd\">const</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">);</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"nx\">port</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`API running on localhost:</span><span class=\"p\">${</span><span class=\"nx\">port</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">));</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"nx\">onError</span><span class=\"p\">);</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'listening'</span><span class=\"p\">,</span> <span class=\"nx\">onListening</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// ポートを正規化.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">normalizePort</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">):</span> <span class=\"nx\">number</span><span class=\"o\">|</span><span class=\"nx\">string</span><span class=\"o\">|</span><span class=\"kr\">boolean</span>  <span class=\"p\">{</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">normalizedPort</span><span class=\"p\">:</span> <span class=\"nx\">number</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">val</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span><span class=\"p\">)</span>\n    <span class=\"p\">?</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">:</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">isNaN</span><span class=\"p\">(</span><span class=\"nx\">normalizedPort</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">normalizedPort</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">normalizedPort</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// エラーハンドラー.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">onError</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">):</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">syscall</span> <span class=\"o\">!==</span> <span class=\"s1\">'listen'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">bind</span> <span class=\"o\">=</span> <span class=\"k\">typeof</span> <span class=\"nx\">port</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span>\n    <span class=\"p\">?</span> <span class=\"s1\">'Pipe '</span> <span class=\"o\">+</span> <span class=\"nx\">port</span>\n    <span class=\"p\">:</span> <span class=\"s1\">'Port '</span> <span class=\"o\">+</span> <span class=\"nx\">port</span><span class=\"p\">;</span>\n\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"s1\">'EACCES'</span><span class=\"p\">:</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">bind</span> <span class=\"o\">+</span> <span class=\"s1\">' requires elevated privileges'</span><span class=\"p\">);</span>\n      <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"s1\">'EADDRINUSE'</span><span class=\"p\">:</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">bind</span> <span class=\"o\">+</span> <span class=\"s1\">' is already in use'</span><span class=\"p\">);</span>\n      <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// サーバ起動時のリスナー.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">onListening</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">addr</span> <span class=\"o\">=</span> <span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">address</span><span class=\"p\">();</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">bind</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">addr</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span><span class=\"p\">)</span>\n    <span class=\"p\">?</span> <span class=\"s2\">`pipe </span><span class=\"p\">${</span><span class=\"nx\">addr</span><span class=\"p\">}</span><span class=\"s2\">`</span>\n    <span class=\"p\">:</span> <span class=\"s2\">`port </span><span class=\"p\">${</span><span class=\"nx\">addr</span><span class=\"p\">.</span><span class=\"nx\">port</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverconfigts\" class=\"fragment\"></span><a href=\"#serverconfigts\"><i class=\"fa fa-link\"></i></a>server/config.ts</h4>\n\n<p>サーバ側の設定ファイルを作成します。<br>\nポートとMongoDBのURLを定義しています。<br>\n今回MongoDBはローカルにポート27017で立てる想定です。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">config.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_PORT</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">MONGO_URL</span> <span class=\"o\">=</span> <span class=\"s1\">'mongodb://localhost:27017/test'</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"3-クライアント側を作成\" class=\"fragment\"></span><a href=\"#3-%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>3. クライアント側を作成</h3>\n\n<p>Angular CLIでプロジェクトを作成すると最低限のクライアント資産が生成されるので、<br>\nここでは修正が必要なファイル、新規作成するファイルのみ紹介します。</p>\n\n<h4>\n<span id=\"srcappmessagemessageservicets\" class=\"fragment\"></span><a href=\"#srcappmessagemessageservicets\"><i class=\"fa fa-link\"></i></a>src/app/message/message.service.ts</h4>\n\n<p>サーバ側からメッセージを取得するためのサービスを新規作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.service.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Http</span><span class=\"p\">,</span> <span class=\"nx\">Response</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MessageService</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">private</span> <span class=\"nx\">http</span><span class=\"p\">:</span> <span class=\"nx\">Http</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"nx\">getAll</span><span class=\"p\">():</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">http</span>\n        <span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"na\">response</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n            <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n        <span class=\"p\">})</span>\n        <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">throw</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()));</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">regist</span><span class=\"p\">(</span><span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">http</span>\n      <span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">message</span><span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"na\">response</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n            <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n      <span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">throw</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappcomponentts\" class=\"fragment\"></span><a href=\"#srcappappcomponentts\"><i class=\"fa fa-link\"></i></a>src/app/app.component.ts</h4>\n\n<p>既存のファイルを修正して、messagesを保持するようにします。<br>\nMessageServiceを使ってメッセージを取得します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span><span class=\"p\">,</span> <span class=\"nx\">OnInit</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-root'</span><span class=\"p\">,</span>\n  <span class=\"na\">templateUrl</span><span class=\"p\">:</span> <span class=\"s1\">'./app.component.html'</span><span class=\"p\">,</span>\n  <span class=\"na\">styleUrls</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'./app.component.css'</span><span class=\"p\">],</span>\n  <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"nx\">MessageService</span> <span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">{</span>\n  <span class=\"nl\">messages</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n  <span class=\"nl\">message</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">private</span> <span class=\"nx\">messageService</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getMessages</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">getMessages</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messageService</span>\n      <span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">()</span>\n      <span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">res</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">;</span>\n      <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">registerMessage</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messageService</span>\n      <span class=\"p\">.</span><span class=\"nx\">register</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">res</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getMessages</span><span class=\"p\">();</span>\n      <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappcomponenthtml\" class=\"fragment\"></span><a href=\"#srcappappcomponenthtml\"><i class=\"fa fa-link\"></i></a>src/app/app.component.html</h4>\n\n<p>既存のファイルの修正して、メッセージ一覧と登録のUIに書き換えます。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.html</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>メッセージ一覧<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;button</span> <span class=\"na\">id=</span><span class=\"s\">\"getMessagesButton\"</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">getMessages</span><span class=\"err\">()\"</span><span class=\"nt\">&gt;</span>メッセージ一覧を最新化<span class=\"nt\">&lt;/button&gt;</span>\n    <span class=\"nt\">&lt;ul</span> <span class=\"na\">id=</span><span class=\"s\">\"messageList\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;li</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let item of messages\"</span><span class=\"nt\">&gt;</span>\n        {{item.message}}\n      <span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;/ul&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>メッセージ登録<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"na\">id=</span><span class=\"s\">\"registerMessage\"</span> <span class=\"err\">[(</span><span class=\"na\">ngModel</span><span class=\"err\">)]=\"</span><span class=\"na\">message</span><span class=\"err\">\"</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"登録するメッセージを入力してください。\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span> <span class=\"na\">id=</span><span class=\"s\">\"registerMessageButton\"</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)='</span><span class=\"na\">registerMessage</span><span class=\"err\">()'</span><span class=\"nt\">&gt;</span>登録<span class=\"nt\">&lt;/button&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappmodulets\" class=\"fragment\"></span><a href=\"#srcappappmodulets\"><i class=\"fa fa-link\"></i></a>src/app/app.module.ts</h4>\n\n<p>HttpModule、FormsModule、MessageServiceを追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.module.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">BrowserModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/platform-browser'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">NgModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">HttpModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/forms'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.component'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"nx\">AppComponent</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"nx\">BrowserModule</span><span class=\"p\">,</span>\n    <span class=\"nx\">HttpModule</span><span class=\"p\">,</span>\n    <span class=\"nx\">FormsModule</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MessageService</span><span class=\"p\">],</span>\n  <span class=\"na\">bootstrap</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">AppComponent</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppModule</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n\n</pre></div>\n</div>\n\n<h3>\n<span id=\"4-ビルドまわり環境を整備\" class=\"fragment\"></span><a href=\"#4-%E3%83%93%E3%83%AB%E3%83%89%E3%81%BE%E3%82%8F%E3%82%8A%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>4. ビルドまわり環境を整備</h3>\n\n<h4>\n<span id=\"pakcagejson\" class=\"fragment\"></span><a href=\"#pakcagejson\"><i class=\"fa fa-link\"></i></a>pakcage.json</h4>\n\n<p>スクリプトを下記のように修正します。<br>\n(npm scriptsは便利ですが、コメントが記述できないのが残念だなーと思いました。)</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\">\n  </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"start\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s build:server -p start:*\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"start:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng serve --aot=true --progress=false --proxy-config proxy.conf.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"start:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-p watch:server boot:server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"watch:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -w -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"boot:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"nodemon ./dist/server/bin/www.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-s build:server build:client\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng build --output-path=./dist/server/public\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"buildRun\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-s build boot:server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>start</strong>でクライアント資産とサーバ資産の両方を起動します。</li>\n<li>\n<strong>start:client</strong>でクライアント資産をコンパイルして起動します。Angular CLIのngコマンドにお任せしています。なおstartではクライアント資産とサーバ資産で二つのサーバを起動するので、クライアントからサーバへ（リクエストを送れるようにプロキシ設定を行っています。プロキシ設定ファイルについては下で触れます。</li>\n<li>\n<strong>start:server</strong>でサーバ資産をコンパイルしてExpressを起動します。</li>\n<li>\n<strong>watch:server</strong>でサーバ側のTypeScriptをウォッチして変更があればコンパイルするようにします。</li>\n<li>\n<strong>boot:server</strong>でコンパイルしたサーバ側資産を起動します。nodeではなくnodemonを使うことでコンパイルしたサーバ資産に更新があった場合でも即座に更新を反映するようにしています。</li>\n<li>\n<strong>build</strong>クライアント資産とサーバ資産の両方をコンパイルします。</li>\n<li>\n<strong>build:server</strong>でサーバ資産をコンパイルしています。コンパイル時の設定は下で触れる<code>/server/tsconfig.server.json</code>を使います。</li>\n<li>\n<strong>build:client</strong>でクライアント資産をコンパイルしています。出力先はサーバ側資産の静的ファイル格納フォルダ（<code>dist/server/public</code>）を指定しています。</li>\n<li>\n<strong>buildRun</strong>でクライアント資産とサーバ資産の両方をコンパイルしサーバ資産を起動します。とりあえずデプロイするアプリを起動したい時の便利コマンドです。</li>\n</ul>\n\n<h4>\n<span id=\"servertsconfigserverjson\" class=\"fragment\"></span><a href=\"#servertsconfigserverjson\"><i class=\"fa fa-link\"></i></a>server/tsconfig.server.json</h4>\n\n<p>サーバ資産コンパイルときの設定ファイルを作成します。<br>\n<code>outDir</code>で出力先をdist/serverに指定しています。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">tsconfig.server.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"extends\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../tsconfig.json\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"preserveConstEnums\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"outDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist/server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"mapRoot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist/server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"module\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"commonjs\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<h4>\n<span id=\"proxyconfjson\" class=\"fragment\"></span><a href=\"#proxyconfjson\"><i class=\"fa fa-link\"></i></a>proxy.conf.json</h4>\n\n<p><code>start</code>でクライアントとサーバの２つを起動した時に、クラ<br>\nイアントからサーバへのリクエストを送れるようにするためのプロキシ設定ファイルを作成します。<br>\n<code>/api</code>始まるリクエストをサーバへのリクエストとみなしてプロキシ設定を行います。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">proxy.conf.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"/api\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"target\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"http://localhost:3000\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"secure\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<h4>\n<span id=\"mongodbをローカルで立ち上げる\" class=\"fragment\"></span><a href=\"#mongodb%E3%82%92%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7%E7%AB%8B%E3%81%A1%E4%B8%8A%E3%81%92%E3%82%8B\"><i class=\"fa fa-link\"></i></a>MongoDBをローカルで立ち上げる</h4>\n\n<p>具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。</p>\n\n<h3>\n<span id=\"5-試してみる\" class=\"fragment\"></span><a href=\"#5-%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>5. 試してみる</h3>\n\n<h4>\n<span id=\"アプリを起動してみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリを起動してみる</h4>\n\n<ul>\n<li>\n<p>プロジェクト直下で下記コマンドを実行するとアプリが起動します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm start \n</pre></div></div>\n</li>\n<li><p>起動したら<code>http://localhost:4200</code>にアクセスしてみます。すると下記のようにメッセージ一覧画面が表示され、メッセージを登録すると適宜一覧に追加されていきます。</p></li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" alt=\"アプリ概要.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png\"></a></p>\n\n<ul>\n<li>試しにクライアント資産かサーバ資産を修正してみると、コンンパイルされてアプリに変更がリアルタイムに反映されることがわかります。</li>\n</ul>\n\n<h4>\n<span id=\"アプリをビルドしてみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリをビルドしてみる</h4>\n\n<ul>\n<li>\n<p>プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力されます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run build\n</pre></div></div>\n</li>\n</ul>\n\n<h4>\n<span id=\"アプリをビルドして起動してみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリをビルドして起動してみる</h4>\n\n<ul>\n<li>プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力された後に起動されます。\nビルドしたアプリは<code>http://localhost:3000</code>でアクセスできます。\n<code>\n$ npm run buildRun\n</code>\n</li>\n</ul>\n\n<h2>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h2>\n\n<p>今回はAngular CLIベースのプロジェクトをベースにしてMEANスタックの最小構成プロジェクトを構築する方法を紹介しました。プロジェクトを起動、ビルドすることはできるようになったので、次回「<a href=\"http://qiita.com/Takumon/items/b4211fcabad740baa551\">その２. テスト編</a>」ではテストコードの作成とテスト実施環境の構築について紹介しようと思います。</p>\n","body":"## やりたいこと\n* Angular CLI使って、MEANスタック(**M**ongoDB + **E**xpress + **A**ngular + **N**odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。\n* フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。\n* Dockerを使ってアプリを簡単に配布したい。\n\nこれらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。\n\n* その１. ビルド編　⇦　今回はココ\n* [その２. テスト編](http://qiita.com/Takumon/items/b4211fcabad740baa551)\n* その３. Dockerビルド編\n\n\n\n## その１. ビルド編\nAngular CLIで作成したプロジェクトをベースに、\nMongoDBに登録したメッセージを画面に一覧で表示するアプリを作成していきます。\nメッセージを登録すると一覧に追加されていくようなアプリです。\n\n![アプリ概要.png](https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png)\n\n\n\n\n### プロジェクト構成\n今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。\n[リポジトリ](https://github.com/Takumon/angular4-express4-typescritp2/tree/build)も用意しているので詳細はそちらを参照してください。\n\n```:プロジェクトの構成（完成イメージ）\n.\n├── dist                ・・・(1) コンパイル資産出力先\n│   └── server　　　　　　　　      ・・・\u001c(1-1)　コンパイルされたサーバ資産\n│       ├── app.js\n│       ├── app.js.map\n│       ├── bin\n│       │   ├── www.js\n│       │   └── www.js.map\n│       ├── config.js\n│       ├── config.js.map\n│       ├── models\n│       │   ├── message.js\n│       │   └── message.js.map\n│       ├── public      ・・・(1-2) コンパイルされたクライアント資産\n│       │   ├── favicon.ico\n│       │   ├── index.html\n│       │   ├── inline.bundle.js\n│       │   ├── inline.bundle.js.map\n│       │   ├── main.bundle.js\n│       │   ├── main.bundle.js.map\n│       │   ├── polyfills.bundle.js\n│       │   ├── polyfills.bundle.js.map\n│       │   ├── styles.bundle.js\n│       │   ├── styles.bundle.js.map\n│       │   ├── vendor.bundle.js\n│       │   └── vendor.bundle.js.map\n│       └── routes\n│           ├── message.js\n│           └── message.js.map\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── e2e\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── server               ・・・(2)　サーバ資産\n│   ├── app.ts\n│   ├── bin\n│   │   └── www.ts\n│   ├── config.ts\n│   ├── models\n│   │   └── message.ts\n│   ├── routes\n│   │   └── message.ts\n│   └── tsconfig.server.json\n├── src                   ・・・(3)　クライアント資産\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       └── message.service.ts\n│   ├── assets\n│   ├── environments\n│   │   ├── environment.prod.ts\n│   │   └── environment.ts\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── main.ts\n│   ├── polyfills.ts\n│   ├── styles.css\n│   ├── test.ts\n│   ├── tsconfig.app.json\n│   ├── tsconfig.spec.json\n│   └── typings.d.ts\n├── karma.conf.js\n├── package-lock.json\n├── package.json\n├── protractor.conf.js\n├── proxy.conf.json    ・・・(4) \n├── tsconfig.json\n├── tslint.json\n└── README.md\n```\n#### 各資産について\n##### (1) dist\nコンパイルした資産の出力先フォルダ\n\n##### (1-1) dist/server\nここにサーバ側のコンパイルされたjsファイルが出力されます。\nserverフォルダを設けているのは本資産とテスト資産を分離したかったからです。\nその２. テスト編で説明しますが、サーバ側テスト用jsファイルはdist配下のserver_testフォルダに出力されるようにしています。\n\n##### (1-2) dist/server/public\nコンパイルされたクライアント資産。\nサーバ側アプリの資産の一部としてコンパイルされるようにしています。\nExpressのアプリでは静的資産をpublicフォルダに置くのが一般的なのでこうしました。\n\n##### (2) server\nサーバ資産を格納するためのディレクトリ。\nいろいろ悩みましたが、TypeScript資産をコンパイルすることとテストすることを考慮してこのような構成にしました。\n\n##### (3) src\nフロントの実行資産とテスト資産を格納するためのディレクリ。\nAngular CLIでプロジェクトを作成するとデフォルトで作成されます。\nビルドやアプリ起動は`ng`コマンドで実施します。\n\n##### (4) proxy.conf.json\n`npm start`でフロント側とサーバ側を同時に起動した時に、クライアント側からサーバ側へのリクエストを送れるようにするためのプロキシ設定です。\n\n\n\n\n## 構築手順\n\n### 1. プロジェクト作成\n* Angular CLIをインストール\n\n\t```\n\t$ npm install -g @angular/cli\n\t```\n\n* プロジェクトを生成、Angular CLIであらかじめ定義している依存ライブラリをインストール\n\n\t```\n\t$ ng new sample\n\t$ cd sample\n\t$ npm install\n\t```\n\n* Angular CLIであらかじめ定義している依存ライブラリの他に必要なものををインストール\n<dd>\n    <dt>[`express`](https://www.npmjs.com/package/express)\n        <dd>Webアプリケーションフレームワーク\n    <dt>[`body-parser`](https://www.npmjs.com/package/body-parser)\n        <dd>リクエストボディのパーサー\n    <dt>[`mongoose`](https://www.npmjs.com/package/mongoose)\n        <dd>MongoDBへのアクセスを簡単にしてくれるAPI\n    <dt>[`nodemon`](https://www.npmjs.com/package/nodemon)\n        <dd>node実行時にソースの変更を自動反映してくれるツール\n    <dt>[`npm-run-all`](https://www.npmjs.com/package/npm-run-all)\n        <dd>npm-scripts の連結実行を管理するためのパッケージ\n</dd>\n\n\t```\n\t$ npm install --save express body-parser mongoose\n\t$ npm install --save-dev @types/mongoose nodemon npm-run-all\n\t```\n\n\n\n### 2. サーバ側を作成\nAngular CLIで作ったプロジェクトの直下に`server`フォルダを作って、その中にサーバ側の処理を書いていきます。\n#### server/models/message.ts\nMongoDBにアクセスするためのモデルを定義します。\nDBアクセスにはmangoosを使います。\n\n```js:message.ts\nimport * as mongoose from 'mongoose';\n\nconst Message = mongoose.model('messages', new mongoose.Schema({\n  message: {type: String}\n}));\n\nexport { Message };\n```\n\n\n\n#### server/routes/message.ts\nエンドポイントごとの処理を記述するルータを定義します。\nメッセージの取得と登録には`server/models/message.ts`を使います。\n\n```js:message.ts\nimport * as http from 'http';\nimport { Router, Response } from 'express';\nimport { Message } from '../models/message';\n\nconst messageRouter: Router = Router();\n\n// 全てのメッセージを取得する\nmessageRouter.get('/', (req, res, next) => {\n  Message.find(function(err, doc) {\n    if (err) {\n      return res.status(500).json({\n          title: 'エラーが発生しました。',\n          error: err.message\n      });\n    }\n\n    return res.status(200).json({messages: doc});\n  });\n});\n\n// メッセージを登録する\nmessageRouter.post('/', (req, res, next) => {\n  const message = new Message({\n    message: req.body.message\n  });\n\n  message.save((err, result) => {\n    if (err) {\n      return res.status(500).json({\n          title: 'エラーが発生しました。',\n          error: err.message\n      });\n    }\n\n    return res.status(200).json({\n      message: 'メッセージを登録しました。',\n      obj: result\n    });\n  });\n});\n\nexport { messageRouter };\n```\n\n\n#### server/app.ts\nExpressで使用するルータと依存モジュールを定義するためのファイルを作成します。\nメッセージAPIのエンドポイントは`/api/messages`に設定し、\nmongooseを使ってMongoDBへの接続設定をしています。\nクライアント資産はビルドするとpublicフォルダ配下に出力されるようにしているので、\n静的資産へのルーティングはpublicフォルダを指定しています。\n\n```js:app.ts\nimport * as express from 'express';\nimport * as path from 'path';\nimport * as bodyParser from 'body-parser';\nimport * as mongoose from 'mongoose';\n\nimport { messageRouter } from './routes/message';\nimport { MONGO_URL } from './config';\n\nclass App {\n  public express: express.Application;\n\n  constructor() {\n    this.express = express();\n    this.middleware();\n    this.routes();\n  }\n\n  private middleware(): void {\n    this.express.use(bodyParser.json());\n    this.express.use(bodyParser.urlencoded({ extended: false }));\n    // 接続する MongoDB の設定\n    mongoose.Promise = global.Promise;\n    mongoose.connect(process.env.MONGO_URL || MONGO_URL, {\n      useMongoClient: true,\n    });\n    process.on('SIGINT', function() { mongoose.disconnect(); });\n  }\n\n  private routes(): void {\n    // 静的資産へのルーティング\n    this.express.use(express.static(path.join(__dirname, 'public')));\n\n    this.express.use('/api/messages', messageRouter);\n\n    // その他のリクエストはindexファイルにルーティング\n    this.express.get('*', (req, res) => {\n      res.sendFile(path.join(__dirname, 'public/index.html'));\n    });\n  }\n}\n\nexport default new App().express;\n```\n\n\n#### server/bin/www\\.ts\nNode.js でサーバを起動するための設定ファイルを作成します。\n\n```js:www.ts\nimport * as http from 'http';\nimport { SERVER_PORT } from '../config';\nimport app from '../app';\n\n\n\n// ポートの設定.\nconst port = normalizePort(process.env.PORT || SERVER_PORT);\napp.set('port', port);\n\n\n// HTTPサーバ生成.\nconst server = http.createServer(app);\nserver.listen(port, () => console.log(`API running on localhost:${port}`));\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n// ポートを正規化.\nfunction normalizePort(val): number|string|boolean  {\n\n  const normalizedPort: number = (typeof val === 'string')\n    ? parseInt(val, 10)\n    : val;\n\n  if (isNaN(normalizedPort)) {\n    return val;\n  }\n\n  if (normalizedPort >= 0) {\n    return normalizedPort;\n  }\n\n  return false;\n}\n\n// エラーハンドラー.\nfunction onError(error): void {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  const bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n// サーバ起動時のリスナー.\nfunction onListening(): void {\n  const addr = server.address();\n  const bind = (typeof addr === 'string')\n    ? `pipe ${addr}`\n    : `port ${addr.port}`;\n}\n```\n\n#### server/config.ts\nサーバ側の設定ファイルを作成します。\nポートとMongoDBのURLを定義しています。\n今回MongoDBはローカルにポート27017で立てる想定です。\n\n```js:config.ts\nexport const SERVER_PORT = 3000;\nexport const MONGO_URL = 'mongodb://localhost:27017/test';\n```\n\n\n\n### 3. クライアント側を作成\nAngular CLIでプロジェクトを作成すると最低限のクライアント資産が生成されるので、\nここでは修正が必要なファイル、新規作成するファイルのみ紹介します。\n\n\n#### src/app/message/message.service.ts\nサーバ側からメッセージを取得するためのサービスを新規作成します。\n\n```js:message.service.ts\nimport { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/Rx';\n\n@Injectable()\nexport class MessageService {\n\n  constructor(private http: Http) {}\n\n  getAll(): Observable<any> {\n    return this.http\n        .get('/api/messages')\n        .map((response: Response) => {\n            const result = response.json();\n            return result;\n        })\n        .catch((error: Response) => Observable.throw(error.json()));\n  }\n\n  regist(message: string): Observable<any> {\n    return this.http\n      .post('/api/messages', {message: message})\n      .map((response: Response) => {\n            const result = response.json();\n            return result;\n      })\n      .catch((error: Response) => Observable.throw(error.json()));\n  }\n}\n```\n\n\n\n\n\n#### src/app/app.component.ts\n既存のファイルを修正して、messagesを保持するようにします。\nMessageServiceを使ってメッセージを取得します。\n\n```js:app.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { MessageService } from './message/message.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  providers: [ MessageService ]\n})\nexport class AppComponent {\n  messages: Array<any>;\n  message: string;\n\n  constructor(private messageService: MessageService) {\n    this.getMessages();\n  }\n\n  getMessages(): void {\n    this.messageService\n      .getAll()\n      .subscribe((res: any) => {\n        this.messages = res.messages;\n      });\n  }\n\n  registerMessage(): void {\n    if (!this.message) {\n      return;\n    }\n\n    this.messageService\n      .register(this.message)\n      .subscribe((res: any) => {\n        this.message = '';\n        this.getMessages();\n      });\n  }\n}\n```\n\n\n#### src/app/app.component.html\n既存のファイルの修正して、メッセージ一覧と登録のUIに書き換えます。\n\n```html:app.component.html\n<div>\n  <div>\n    <h1>メッセージ一覧</h1>\n    <button id=\"getMessagesButton\" (click)=\"getMessages()\">メッセージ一覧を最新化</button>\n    <ul id=\"messageList\">\n      <li *ngFor=\"let item of messages\">\n        {{item.message}}\n      </li>\n    </ul>\n  </div>\n  <div>\n    <h1>メッセージ登録</h1>\n    <input type=\"text\" id=\"registerMessage\" [(ngModel)]=\"message\" placeholder=\"登録するメッセージを入力してください。\">\n    <button type=\"submit\" id=\"registerMessageButton\" (click)='registerMessage()'>登録</button>\n  </div>\n</div>\n```\n#### src/app/app.module.ts\nHttpModule、FormsModule、MessageServiceを追加します。\n\n\n```js:app.module.ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpModule } from '@angular/http';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { MessageService } from './message/message.service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpModule,\n    FormsModule\n  ],\n  providers: [MessageService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n```\n\n\n### 4. ビルドまわり環境を整備\n\n#### pakcage.json\nスクリプトを下記のように修正します。\n(npm scriptsは便利ですが、コメントが記述できないのが残念だなーと思いました。)\n\n```json:package.json\n\n  \"scripts\": {\n    ...\n    \"start\": \"npm-run-all -s build:server -p start:*\",\n    \"start:client\": \"ng serve --aot=true --progress=false --proxy-config proxy.conf.json\",\n    \"start:server\": \"run-p watch:server boot:server\",\n    \"watch:server\": \"tsc -w -p ./server/tsconfig.server.json\",\n    \"boot:server\": \"nodemon ./dist/server/bin/www.js\",\n    \"build\": \"run-s build:server build:client\",\n    \"build:client\": \"ng build --output-path=./dist/server/public\",\n    \"build:server\": \"tsc -p ./server/tsconfig.server.json\",\n    \"buildRun\": \"run-s build boot:server\",\n    ...\n  },\n```\n\n* **start**でクライアント資産とサーバ資産の両方を起動します。\n* **start:client**でクライアント資産をコンパイルして起動します。Angular CLIのngコマンドにお任せしています。なおstartではクライアント資産とサーバ資産で二つのサーバを起動するので、クライアントからサーバへ（リクエストを送れるようにプロキシ設定を行っています。プロキシ設定ファイルについては下で触れます。\n* **start:server**でサーバ資産をコンパイルしてExpressを起動します。\n* **watch:server**でサーバ側のTypeScriptをウォッチして変更があればコンパイルするようにします。\n* **boot:server**でコンパイルしたサーバ側資産を起動します。nodeではなくnodemonを使うことでコンパイルしたサーバ資産に更新があった場合でも即座に更新を反映するようにしています。\n* **build**クライアント資産とサーバ資産の両方をコンパイルします。\n* **build:server**でサーバ資産をコンパイルしています。コンパイル時の設定は下で触れる`/server/tsconfig.server.json`を使います。\n* **build:client**でクライアント資産をコンパイルしています。出力先はサーバ側資産の静的ファイル格納フォルダ（`dist/server/public`）を指定しています。\n* **buildRun**でクライアント資産とサーバ資産の両方をコンパイルしサーバ資産を起動します。とりあえずデプロイするアプリを起動したい時の便利コマンドです。\n\n\n\n#### server/tsconfig.server.json\nサーバ資産コンパイルときの設定ファイルを作成します。\n`outDir`で出力先をdist/serverに指定しています。\n\n```json:tsconfig.server.json\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"preserveConstEnums\": true,\n    \"outDir\": \"../dist/server\",\n    \"mapRoot\": \"../dist/server\",\n    \"module\": \"commonjs\"\n  }\n}\n```\n\n#### proxy.conf.json\n`start`でクライアントとサーバの２つを起動した時に、クラ\nイアントからサーバへのリクエストを送れるようにするためのプロキシ設定ファイルを作成します。\n`/api`始まるリクエストをサーバへのリクエストとみなしてプロキシ設定を行います。\n\n```json:proxy.conf.json\n{\n  \"/api\": {\n    \"target\": \"http://localhost:3000\",\n    \"secure\": false\n  }\n}\n```\n\n#### MongoDBをローカルで立ち上げる\n具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。\n\n\n\n### 5. 試してみる\n#### アプリを起動してみる\n* プロジェクト直下で下記コマンドを実行するとアプリが起動します。\n\n\t```\n\t$ npm start \n\t```\n\n* 起動したら`http://localhost:4200`にアクセスしてみます。すると下記のようにメッセージ一覧画面が表示され、メッセージを登録すると適宜一覧に追加されていきます。\n\n![アプリ概要.png](https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png)\n\n* 試しにクライアント資産かサーバ資産を修正してみると、コンンパイルされてアプリに変更がリアルタイムに反映されることがわかります。\n\n#### アプリをビルドしてみる\n* プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力されます。\n\n\t```\n\t$ npm run build\n\t```\n\n#### アプリをビルドして起動してみる\n* プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力された後に起動されます。\nビルドしたアプリは`http://localhost:3000`でアクセスできます。\n\t```\n\t$ npm run buildRun\n\t```\n\n## 終わりに\n今回はAngular CLIベースのプロジェクトをベースにしてMEANスタックの最小構成プロジェクトを構築する方法を紹介しました。プロジェクトを起動、ビルドすることはできるようになったので、次回「[その２. テスト編](http://qiita.com/Takumon/items/b4211fcabad740baa551)」ではテストコードの作成とテスト実施環境の構築について紹介しようと思います。\n\n\n","comments_count":0,"created_at":"2017-07-19T02:06:59+09:00","likes_count":27,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/270e2fae-ed90-5539-8c90-a2ed93ebba83/","title":"Fessを使用して、Asciidoctorで簡単に全文検索できるようにする","date":"2017-06-26T00:21:37+09:00","excerpt":"Asciidoctorを使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。そこで今回は、Dockerで...","tags":["JavaScript","全文検索","ドキュメント","Fess","asciidoctor","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"270e2fae-ed90-5539-8c90-a2ed93ebba83","title":"Fessを使用して、Asciidoctorで簡単に全文検索できるようにする","rendered_body":"<p><a href=\"http://asciidoctor.org/\" rel=\"nofollow noopener\" target=\"_blank\">Asciidoctor</a>を使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。</p>\n\n<p>そこで今回は、Dockerで全文検索サーバの<a href=\"http://fess.codelibs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Fess</a>を立てて、<br>\nドキュメントからJavaScript経由でFessのJSON APIを呼び出すことで、<br>\n全文検索を簡単に導入する方法をご紹介します。</p>\n\n<p>導入するとドキュメントの右上に検索窓が出てきて全文検索できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/e020d2b6619c0b7ce4332c80ea15b89a6efb895e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31323365633737312d666237372d653464632d646637652d6134623430373739323735392e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e020d2b6619c0b7ce4332c80ea15b89a6efb895e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31323365633737312d666237372d653464632d646637652d6134623430373739323735392e676966\" alt=\"6月-24-2017 19-05-32.gif\" title=\"6月-24-2017 19-05-32.gif\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/123ec771-fb77-e4dc-df7e-a4b407792759.gif\"></a></p>\n\n<h2>\n<span id=\"fessとは\" class=\"fragment\"></span><a href=\"#fess%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Fessとは</h2>\n\n<p><a href=\"http://fess.codelibs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Fess</a>は<strong>「5 分で簡単に構築可能な全文検索サーバー」</strong>です。<br>\nJavaベースで構築されており、Apacheライセンスで提供されるオープンソース製品で、無料で使用できます。<br>\n自分でクローラを設定して、自分だけの検索エンジンがつくれるようなイメージです。<br>\nデフォルトで検索画面を提供していますが、JSON APIも提供しているので、様々なシステムと連携可能です。</p>\n\n<h2>\n<span id=\"全体像\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E4%BD%93%E5%83%8F\"><i class=\"fa fa-link\"></i></a>全体像</h2>\n\n<p>ドキュメント用Webサーバに全文検索用のJavaScriptファイルとCSSファイルを追加し、Dockerで全文検索用のFessサーバを立てます。<br>\nFessサーバはドキュメント用Webサーバをクロールし、その情報を保存しておきます。<br>\nドキュメントで全文検索を実施すると、JavaScript経由でFessサーバのJSON AIPを呼び出して、全文検索結果をドキュメントに表示します。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/6fe043176da6b6451722114a3d0418bc40ac8c99/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31306338616334362d323135352d386562372d613565642d3763313363653534346563322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/6fe043176da6b6451722114a3d0418bc40ac8c99/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31306338616334362d323135352d386562372d613565642d3763313363653534346563322e706e67\" alt=\"0_Fess_全体像_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/10c8ac46-2155-8eb7-a5ed-7c13ce544ec2.png\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/729e46c74903de7be597a6ac4adea0c03cd8559f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34306531643435362d323633352d326165642d333333642d3862316165633434373933312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/729e46c74903de7be597a6ac4adea0c03cd8559f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34306531643435362d323633352d326165642d333333642d3862316165633434373933312e706e67\" alt=\"0_Fess_全体像_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/40e1d456-2635-2aed-333d-8b1aec447931.png\"></a></p>\n\n<h2>\n<span id=\"導入手順\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>導入手順</h2>\n\n<p>この導入手順は、下記のような環境（ローカルPCのDocker上にドキュメント用WebサーバとFessサーバが立っている環境）を作った時のものです。<br>\nDockerを使わなくても、ローカルPC以外でも、導入可能です。導入手順は適宜読み替えてください。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/a94911642557c486b240ffa8c3c184c64bfabc2c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30626164623864322d316135382d323262362d343537632d3132626563663361383931312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a94911642557c486b240ffa8c3c184c64bfabc2c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30626164623864322d316135382d323262362d343537632d3132626563663361383931312e706e67\" alt=\"0_Fess_全体像_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/0badb8d2-1a58-22b6-457c-12becf3a8911.png\"></a></p>\n\n<h3>\n<span id=\"fessのインストール\" class=\"fragment\"></span><a href=\"#fess%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>Fessのインストール</h3>\n\n<p>Docker Hubの<a href=\"https://hub.docker.com/r/codelibs/fess/\" rel=\"nofollow noopener\" target=\"_blank\">codelibs/fess</a>を使用します。今回ポートは10084で公開します。<br>\nDockerを使わない場合は<a href=\"http://fess.codelibs.org/ja/11.2/install/index.html\" rel=\"nofollow noopener\" target=\"_blank\">Fess インストールガイド</a>を参考にしてください。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ docker run -d -p 10084:8080 --name fess codelibs/fess:latest\n</pre></div></div>\n\n<h3>\n<span id=\"fessの設定\" class=\"fragment\"></span><a href=\"#fess%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>Fessの設定</h3>\n\n<h4>\n<span id=\"クローラの設定\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>クローラの設定</h4>\n\n<p><code>http://[PCのローカルIPアドレス]:10084/login</code>にアクセスするとログイン画面が表示されます。<br>\nデフォルトのID/PASS　<code>admin/admin</code>でログインしましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/d173fd5ce7a76eb7b5a6ef053a670dd6551d720c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65373930656361392d353037332d393438652d336534332d6437353436643537666165352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d173fd5ce7a76eb7b5a6ef053a670dd6551d720c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65373930656361392d353037332d393438652d336534332d6437353436643537666165352e706e67\" alt=\"1_Fess管理者_ログイン画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/e790eca9-5073-948e-3e43-d7546d57fae5.png\"></a><br>\n<br></p>\n\n<p>ログインするとダッシュボードが表示されます。左ペインの<code>クローラ</code> &gt; <code>Web</code>　を選択しましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/cbfee37bd5d06381615f013da8587b1af91c35aa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61636662653935302d666137342d643063622d336365652d3565386462346465356237342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/cbfee37bd5d06381615f013da8587b1af91c35aa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61636662653935302d666137342d643063622d336365652d3565386462346465356237342e706e67\" alt=\"2_Fess管理者_ダッシュボード.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/acfbe950-fa74-d0cb-3cee-5e8db4de5b74.png\"></a><br>\n<br></p>\n\n<p>Webクローラにはまだ何も登録されていないので、左上の<code>+　新規作成</code>ボタンをクリックしましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/e60be4a90df24cb1275c165752de363b15859b87/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36333130333762342d616162322d386530642d663961612d3364323365633931376132392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e60be4a90df24cb1275c165752de363b15859b87/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36333130333762342d616162322d386530642d663961612d3364323365633931376132392e706e67\" alt=\"3_Fess管理者_Webクロール設定_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/631037b4-aab2-8e0d-f9aa-3d23ec917a29.png\"></a><br>\n<br></p>\n\n<p>Webクロール情報入力画面が表示されます。<br>\n<a href=\"https://camo.qiitausercontent.com/62cd6f97bb7dfebb163873f26b5fda4fabcf89c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653561303963392d376363652d336665632d373838342d3132353863333266613931612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/62cd6f97bb7dfebb163873f26b5fda4fabcf89c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653561303963392d376363652d336665632d373838342d3132353863333266613931612e706e67\" alt=\"3_Fess管理者_Webクロール設定_2.png\" title=\"3_Fess管理者_Webクロール設定_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/ee5a09c9-7cce-3fec-7884-1258c32fa91a.png\"></a></p>\n\n<p>設定項目は色々ありますが、とりあえず下記項目だけ設定しましょう。</p>\n\n<ul>\n<li>名前 \n\n<ul>\n<li>任意の名前を設定してください。</li>\n</ul>\n</li>\n<li>URL \n\n<ul>\n<li>ドキュメント用Webサーバにおいてドキュメントが格納されているルートフォルダのURLを指定してください。末尾に<code>/</code>を付けてください。</li>\n</ul>\n</li>\n<li>クロール対象とするURL \n\n<ul>\n<li>正規表現で値を設定します。上記<code>URL</code>で設定したルートフォルダ配下の全資産を対象とするために、<code>URLで設定した値</code> + <code>.*</code> を指定してください。</li>\n</ul>\n</li>\n<li>検索対象とするURL\n\n<ul>\n<li>正規表現で値を設定します。HTMLのみを検索対象にしたい（JS、CSSなどは除外したい）ので、<code>URLで設定した値</code> + <code>.+\\.html$</code> を指定してください。\n<br>\n<br>\n</li>\n</ul>\n</li>\n</ul>\n\n<p>値を設定したら、画面を下にスクロールして<code>+　作成</code>ボタンをクリックします。<br>\nすると下記のようにWebクロールのデータが１件登録されます。<br>\n<a href=\"https://camo.qiitausercontent.com/8302d25592df90b2bdf59fbf3b43e31ecf106b3e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33643030626635612d663133312d643336372d646535332d6166313062623336383339642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/8302d25592df90b2bdf59fbf3b43e31ecf106b3e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33643030626635612d663133312d643336372d646535332d6166313062623336383339642e706e67\" alt=\"3_Fess管理者_Webクロール設定_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/3d00bf5a-f131-d367-de53-af10bb36839d.png\"></a><br>\n<br></p>\n\n<h4>\n<span id=\"クローラの実行\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AE%E5%AE%9F%E8%A1%8C\"><i class=\"fa fa-link\"></i></a>クローラの実行</h4>\n\n<p>左ペインで　<code>システム</code> &gt; <code>スケジューラ</code> を選択してジョブスケジューラを開きます。<br>\nジョブスケジューラで <code>Default Crawler</code>を選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/52e6c84dc635dabd786a05e2dc2dbc01bbcd62b3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62306165636130642d363461342d343364612d373832622d3061316130636437306238332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/52e6c84dc635dabd786a05e2dc2dbc01bbcd62b3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62306165636130642d363461342d343364612d373832622d3061316130636437306238332e706e67\" alt=\"4_Fess管理者_スケジューラ_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/b0aeca0d-64a4-43da-782b-0a1a0cd70b83.png\"></a><br>\n<br></p>\n\n<p><code>今すぐ開始</code>をクリックします。<br>\n<a href=\"https://camo.qiitausercontent.com/15c56153ff7878a59bfda2bab0ac3b8b6182fa23/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30306537363932302d626661642d656562312d636239392d3732346533613933393261392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/15c56153ff7878a59bfda2bab0ac3b8b6182fa23/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30306537363932302d626661642d656562312d636239392d3732346533613933393261392e706e67\" alt=\"4_Fess管理者_スケジューラ_1.1.png\" title=\"4_Fess管理者_スケジューラ_1.1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/00e76920-bfad-eeb1-cb99-724e3a9392a9.png\"></a><br>\n<br></p>\n\n<p>するとクロールが実行されます。<br>\n<a href=\"https://camo.qiitausercontent.com/b34d527efb0b07d2b04cabccebe97f0e1e4b594c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323564333030662d303766352d373234642d636539332d3865316339373532653130652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b34d527efb0b07d2b04cabccebe97f0e1e4b594c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323564333030662d303766352d373234642d636539332d3865316339373532653130652e706e67\" alt=\"4_Fess管理者_スケジューラ_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/725d300f-07f5-724d-ce93-8e1c9752e10e.png\"></a><br>\n<br></p>\n\n<p>しばらくして<code>F5</code>キーを押してブラウザを更新してください。<br>\nクロールが終了すると、スケジューラの状態が<code>実行中</code>から<code>有効</code>になります。<br>\n<a href=\"https://camo.qiitausercontent.com/2d860e111077a3a0b63a44b45e14e0e18b02fcb1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653466353237372d616163332d616437652d636465622d3431643339623733336331662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2d860e111077a3a0b63a44b45e14e0e18b02fcb1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653466353237372d616163332d616437652d636465622d3431643339623733336331662e706e67\" alt=\"4_Fess管理者_スケジューラ_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/ee4f5277-aac3-ad7e-cdeb-41d39b733c1f.png\"></a><br>\n<br></p>\n\n<h4>\n<span id=\"クローラ実行結果の確認\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>クローラ実行結果の確認</h4>\n\n<p>左ペインの<code>システム情報</code>&gt;<code>クロール情報</code>を選択すると、先ほど実行したクロールの結果が表示されています。その行を選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/e35eccd76c8d85dcc368298adfebb71871f083a7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39326633313062352d383366362d646564612d343438642d6166613863356230663130342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e35eccd76c8d85dcc368298adfebb71871f083a7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39326633313062352d383366362d646564612d343438642d6166613863356230663130342e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_1.png\" title=\"5_Fess管理者_システム情報_クロール情報_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/92f310b5-83f6-deda-448d-afa8c5b0f104.png\"></a><br>\n<br></p>\n\n<p>セッションIDを選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/341936c3d088fb04a1029cc6c891a35253a079da/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34653830636431342d333633342d663636352d623434382d3862346234653761386432312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/341936c3d088fb04a1029cc6c891a35253a079da/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34653830636431342d333633342d663636352d623434382d3862346234653761386432312e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_2.png\" title=\"5_Fess管理者_システム情報_クロール情報_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/4e80cd14-3634-f665-b448-8b4b4e7a8d21.png\"></a><br>\n<br></p>\n\n<p>ここにドキュメント用Webサーバのドキュメントが全て表示されればOKです。<br>\n<a href=\"https://camo.qiitausercontent.com/767e79c91f7521caf880a890deee50513f520ea9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36306238366263342d663730662d343263382d613031372d3566313338623362383865332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/767e79c91f7521caf880a890deee50513f520ea9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36306238366263342d663730662d343263382d613031372d3566313338623362383865332e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_3.png\" title=\"5_Fess管理者_システム情報_クロール情報_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/60b86bc4-f70f-42c8-a017-5f138b3b88e3.png\"></a><br>\n<br></p>\n\n<h3>\n<span id=\"ドキュメント用webサーバに全文検索用資産を配置\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E7%94%A8web%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AB%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E7%94%A8%E8%B3%87%E7%94%A3%E3%82%92%E9%85%8D%E7%BD%AE\"><i class=\"fa fa-link\"></i></a>ドキュメント用Webサーバに全文検索用資産を配置</h3>\n\n<p>全文検索用の資産は<code>full-text-search.js</code>と<code>full-text-search.css</code>の２つです。<br>\n<code>full-text-search.js</code>の変数 FESS_JSON_ENDPOINT(FESSサーバのJSON APIのエンドポイント) は適時置き換えてください。<br>\nこれらの資産をドキュメント用Webサーバのドキュメントのルートフォルダ直下に配置してください。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">full-text-search.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'use strict'</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// FESSサーバのJSON APIのエンドポイント（FessサーバのIPアドレス + /json）</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">FESS_JSON_ENDPOINT</span> <span class=\"o\">=</span> <span class=\"s1\">'http://192.168.1.5:10084/json'</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// １ページあたりの検索結果表示件数</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">COUNT_PAR_PAGE</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n\n\n    <span class=\"c1\">// 目次の</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#toc'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 一番上に検索条件入力エリアを挿入</span>\n        <span class=\"p\">.</span><span class=\"nx\">prepend</span><span class=\"p\">(</span>\n            <span class=\"s1\">'&lt;div id=\"search-area\"&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;form id=\"search-form\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;div class=\"search-input-area\"&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;i class=\"fa fa-search left-icon\"&gt;&lt;/i&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;input id=\"search-query\" placeholder=\"全文検索\" /&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;i class=\"fa fa-close right-icon\"&gt;&lt;/i&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;/div&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;input id=\"search-start\" type=\"hidden\" value=\"0\"/&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;input id=\"search-num\" type=\"hidden\" value=\"'</span> <span class=\"o\">+</span> <span class=\"nx\">COUNT_PAR_PAGE</span> <span class=\"o\">+</span> <span class=\"s1\">'\"/&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;form&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// イベント登録</span>\n        <span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">$searchArea</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 入力項目の検索条件でEnterを押したら、検索処理を実行する</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-form'</span><span class=\"p\">).</span><span class=\"nx\">submit</span><span class=\"p\">({</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 虫眼鏡アイコン押下したら、検索処理を実行する</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".left-icon\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">({</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 検索条件入力したら、</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\"#search-query\"</span><span class=\"p\">).</span><span class=\"nx\">keyup</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n              <span class=\"kd\">var</span> <span class=\"nx\">$this</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n              <span class=\"kd\">var</span> <span class=\"nx\">$rightIcon</span> <span class=\"o\">=</span> <span class=\"nx\">$this</span><span class=\"p\">.</span><span class=\"nx\">parent</span><span class=\"p\">().</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".right-icon\"</span><span class=\"p\">);</span>\n\n              <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">$this</span><span class=\"p\">.</span><span class=\"nx\">val</span><span class=\"p\">().</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                 <span class=\"c1\">// 検索条件に値がある場合は×アイコンの色を濃くする</span>\n                 <span class=\"nx\">$rightIcon</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#555'</span><span class=\"p\">);</span>\n              <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                 <span class=\"c1\">// 検索条件に値がない場合は×アイコンの色を薄くする</span>\n                 <span class=\"nx\">$rightIcon</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#ccc'</span><span class=\"p\">);</span>\n              <span class=\"p\">}</span>\n            <span class=\"p\">});</span>\n\n            <span class=\"c1\">// ×アイコン押下したら、</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".right-icon\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n              <span class=\"c1\">// ×アイコンの色を薄くして</span>\n              <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">).</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#ccc'</span><span class=\"p\">)</span>\n                      <span class=\"c1\">// 検索条件をクリアする</span>\n                     <span class=\"p\">.</span><span class=\"nx\">parent</span><span class=\"p\">().</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\"input\"</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span>\n            <span class=\"p\">});</span>\n        <span class=\"p\">});</span>\n\n    <span class=\"c1\">// ドキュメントタイトルの</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#header&gt;h1'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 直下に検索結果エリアを挿入</span>\n        <span class=\"p\">.</span><span class=\"nx\">before</span><span class=\"p\">(</span>\n            <span class=\"s1\">'&lt;div id=\"search-result-area\"&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div id=\"search-result-subheader\"&gt;&lt;/div&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div id=\"search-result-content\"&gt;&lt;/div&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// イベント登録</span>\n        <span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span>\n                <span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-area'</span><span class=\"p\">)</span>\n                    <span class=\"c1\">// 検索結果エリアのバツアイコンをクリックしたら、</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s1\">'#remove-search-result'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                      <span class=\"kd\">var</span> <span class=\"nx\">$searchResultArea</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">delegateTarget</span><span class=\"p\">)</span>\n                      <span class=\"c1\">// 検索結果エリアを非表示モードにする</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">removeClass</span><span class=\"p\">(</span><span class=\"s1\">'show'</span><span class=\"p\">);</span>\n                      <span class=\"c1\">// 検索結果エリアの中身を削除する</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-subheader'</span><span class=\"p\">).</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-content'</span><span class=\"p\">).</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n                    <span class=\"p\">})</span>\n                    <span class=\"c1\">// 前ページリンクをクリックしたら、１ページ前を検索する</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#prevPageLink\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">)</span>\n                    <span class=\"c1\">// 次ページリンクをクリックしたら、１ページ後を検索する</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#nextPageLink\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n        <span class=\"p\">});</span>\n\n\n\n    <span class=\"cm\">/**\n     * 検索処理\n     *\n     * @param  {eventObject} event\n     * @return {boolean}  submit処理を中断させるために必ずfalseを返却する\n     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">doSearch</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">){</span>\n      <span class=\"c1\">// 検索フィールドの値をトリムして取得</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">searchQuery</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">trim</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-query'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">());</span>\n      <span class=\"c1\">// 空の場合は検索処理を実行しない</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">searchQuery</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// 表示開始位置、表示件数の取得</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-start'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">()),</span>\n          <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-num'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">());</span>\n      <span class=\"c1\">// 表示開始位置のチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">start</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">// 表示件数のチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">num</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"nx\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">// 表示ページ情報の取得</span>\n      <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">navi</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n          <span class=\"c1\">// 前のページの場合</span>\n          <span class=\"nx\">start</span> <span class=\"o\">-=</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n          <span class=\"c1\">// 次のページの場合</span>\n          <span class=\"nx\">start</span> <span class=\"o\">+=</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"nl\">default</span><span class=\"p\">:</span>\n        <span class=\"k\">case</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n          <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// URLを構築</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"nx\">FESS_JSON_ENDPOINT</span> <span class=\"o\">+</span> <span class=\"s1\">'?callback=?'</span> <span class=\"o\">+</span> <span class=\"c1\">// 別ドメインを想定してJSONP形式でリクエストを送信する</span>\n                                     <span class=\"s1\">'&amp;q='</span> <span class=\"o\">+</span> <span class=\"nb\">encodeURIComponent</span><span class=\"p\">(</span><span class=\"nx\">searchQuery</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n                                     <span class=\"s1\">'&amp;start='</span> <span class=\"o\">+</span> <span class=\"nx\">start</span> <span class=\"o\">+</span>\n                                     <span class=\"s1\">'&amp;num='</span> <span class=\"o\">+</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// 検索リクエスト送信</span>\n      <span class=\"c1\">// 別ドメインを想定してJSONP形式でリクエストを送信する</span>\n      <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span>\n          <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"nx\">url</span><span class=\"p\">,</span>\n          <span class=\"na\">dataType</span><span class=\"p\">:</span> <span class=\"s1\">'jsonp'</span><span class=\"p\">,</span>\n          <span class=\"na\">success</span><span class=\"p\">:</span> <span class=\"nx\">renderSearchResult</span>\n      <span class=\"p\">});</span>\n\n\n      <span class=\"c1\">// ページ情報の更新</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#searchNum'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// ページ表示を上部に移動</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">).</span><span class=\"nx\">scrollTop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// サブミットを抑止するためにfalseを返す</span>\n      <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n\n\n    <span class=\"cm\">/**\n     * 検索成功時に検索結果を描画する\n     *\n     * @param  {Anything} data レスポンスデータ\n     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">renderSearchResult</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 検索結果処理</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">dataResponse</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">;</span>\n      <span class=\"c1\">// ステータスチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s2\">\"検索中に問題が発生しました。\"</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// 検索結果領域を表示する</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-area'</span><span class=\"p\">).</span><span class=\"nx\">addClass</span><span class=\"p\">(</span><span class=\"s1\">'show'</span><span class=\"p\">);</span>\n\n      <span class=\"kd\">var</span> <span class=\"nx\">$searchResultSubheader</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-subheader'</span><span class=\"p\">),</span>\n          <span class=\"nx\">$searchResultContent</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-content'</span><span class=\"p\">),</span>\n          <span class=\"nx\">record_count</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">record_count</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// 検索結果がない場合</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">record_count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// サブヘッダーに出力</span>\n        <span class=\"nx\">$searchResultSubheader</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span>  <span class=\"s1\">'&lt;div id=\"remove-search-result\" style=\"float:right;\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/div&gt;'</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// 結果領域に出力</span>\n        <span class=\"nx\">$searchResultContent</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;b&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">q</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/b&gt;に一致する情報は見つかりませんでした。'</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// 検索にヒットした場合</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">page_number</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_number</span><span class=\"p\">,</span>\n          <span class=\"nx\">page_size</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_size</span><span class=\"p\">,</span>\n          <span class=\"nx\">page_count</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_count</span><span class=\"p\">,</span>\n          <span class=\"nx\">startRange</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nx\">page_size</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n          <span class=\"nx\">endRange</span> <span class=\"o\">=</span> <span class=\"nx\">page_number</span> <span class=\"o\">*</span> <span class=\"nx\">page_size</span><span class=\"p\">,</span>\n          <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n          <span class=\"nx\">max</span><span class=\"p\">,</span>\n          <span class=\"nx\">offset</span> <span class=\"o\">=</span> <span class=\"nx\">startRange</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-start'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"nx\">offset</span><span class=\"p\">);</span>\n\n\n      <span class=\"c1\">// サブヘッダーに出力</span>\n      <span class=\"nx\">$searchResultSubheader</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;b&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">q</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/b&gt; の検索結果 '</span> <span class=\"o\">+</span>\n                                <span class=\"nx\">record_count</span> <span class=\"o\">+</span> <span class=\"s2\">\" 件中 \"</span> <span class=\"o\">+</span>  <span class=\"nx\">startRange</span> <span class=\"o\">+</span> <span class=\"s1\">' - '</span> <span class=\"o\">+</span>\n                                <span class=\"nx\">endRange</span> <span class=\"o\">+</span> <span class=\"s1\">' 件目 ('</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">exec_time</span> <span class=\"o\">+</span> <span class=\"s1\">' 秒)'</span> <span class=\"o\">+</span>\n                               <span class=\"s1\">'&lt;div id=\"remove-search-result\" style=\"float:right;\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/div&gt;'</span>\n\n      <span class=\"c1\">// 検索結果領域のクリア</span>\n      <span class=\"nx\">$searchResultContent</span><span class=\"p\">.</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n\n\n      <span class=\"c1\">// 検索結果の出力</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">$resultBody</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;ol/&gt;\"</span><span class=\"p\">);</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">results</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">;</span>\n      <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">max</span> <span class=\"o\">=</span> <span class=\"nx\">results</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">max</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">element</span> <span class=\"o\">=</span>\n            <span class=\"s1\">'&lt;li&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;h4 class=\"title\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;a href=\"'</span> <span class=\"o\">+</span><span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">url_link</span> <span class=\"o\">+</span> <span class=\"s1\">'\"&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">title</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/a&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;/h4&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div class=\"body\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">content_description</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;br/&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;cite&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">site</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/cite&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;/div&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/li&gt;'</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">).</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$resultBody</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">$resultBody</span><span class=\"p\">.</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$searchResultContent</span><span class=\"p\">);</span>\n\n\n      <span class=\"c1\">// ページ番号情報の出力</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">pageArea</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n      <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;div id=\"pageInfo\"&gt;'</span><span class=\"p\">,</span> <span class=\"nx\">page_number</span><span class=\"p\">,</span> <span class=\"s1\">'ページ目&lt;br/&gt;'</span><span class=\"p\">);</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 前のページへのリンク</span>\n        <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;a id=\"prevPageLink\" href=\"#\"&gt;&amp;lt;&amp;lt;前ページへ&lt;/a&gt; '</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">&lt;</span> <span class=\"nx\">page_count</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 次のページへのリンク</span>\n        <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;a id=\"nextPageLink\" href=\"#\"&gt;次ページへ&amp;gt;&amp;gt;&lt;/a&gt;'</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">);</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"p\">)).</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$searchResultContent</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">full-text-search.css</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">@charset</span> <span class=\"s1\">\"UTF-8\"</span><span class=\"p\">;</span>\n\n<span class=\"nf\">#search-area</span> <span class=\"p\">{</span>\n    <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"p\">{</span>\n    <span class=\"nl\">position</span><span class=\"p\">:</span><span class=\"nb\">relative</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* 入力項目 */</span>\n<span class=\"nf\">#search-query</span> <span class=\"p\">{</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span> <span class=\"m\">2em</span><span class=\"p\">;</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">black</span><span class=\"p\">;</span>\n    <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"n\">arial</span><span class=\"p\">,</span><span class=\"nb\">sans-serif</span><span class=\"p\">;</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span>\n    <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">2em</span><span class=\"p\">;</span>\n    <span class=\"nl\">outline</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nt\">input</span><span class=\"nd\">:focus</span> <span class=\"p\">{</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"m\">#4d90fe</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* アイコンは入力項目の左と右に配置する */</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"o\">,</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span> <span class=\"p\">{</span>\n    <span class=\"c\">/* 縦方向の中央寄せ */</span>\n    <span class=\"nl\">position</span><span class=\"p\">:</span><span class=\"nb\">absolute</span><span class=\"p\">;</span>\n    <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">50%</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">-0.5em</span><span class=\"p\">;</span>\n    <span class=\"py\">font-sise</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 要素にマウスを合わせたら、マウスポインタのマークを変える */</span>\n    <span class=\"nl\">cursor</span><span class=\"p\">:</span><span class=\"nb\">pointer</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span> <span class=\"p\">{</span>\n    <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span><span class=\"p\">;</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span><span class=\"m\">#444</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span> <span class=\"p\">{</span>\n    <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 最初は、グレーアウトしておく */</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* アイコンにマウスを合わせたら、サイズを大きくする */</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"nd\">:hover</span><span class=\"o\">,</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1.4em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* 検索結果表示時に適用するスタイル */</span>\n<span class=\"nf\">#search-result-area</span><span class=\"nc\">.show</span> <span class=\"p\">{</span>\n    <span class=\"nl\">background</span><span class=\"p\">:</span> <span class=\"m\">#f8f8f7</span><span class=\"p\">;</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">0px</span> <span class=\"nb\">solid</span><span class=\"p\">;</span>\n    <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h3>\n<span id=\"ドキュメントに全文検索用資産の読み込み処理を追加\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AB%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E7%94%A8%E8%B3%87%E7%94%A3%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF%E5%87%A6%E7%90%86%E3%82%92%E8%BF%BD%E5%8A%A0\"><i class=\"fa fa-link\"></i></a>ドキュメントに全文検索用資産の読み込み処理を追加</h3>\n\n<p>前手順でドキュメント用Webサーバに配置した<code>full-text-search.js</code>と<code>full-text-search.css</code>を、<br>\n各ドキュメントから読み込むようにします。<br>\n<code>full-text-search.js</code>はjQueryに依存しているので、<br>\n既存のドキュメントで読み込んでいない場合はjQueryも読み込みも追加してください。</p>\n\n<p>ドキュメント用Webサーバがこのようなフォルダ構成だとしたら、</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ドキュメント用Webサーバのドキュメントルート\n├── full-text-search.css\n├── full-text-search.js\n└── asciidoctor-sample\n    └── asciidoctor-sample.html\n</pre></div></div>\n\n<p><code>asciidoctor-sample.adoc</code>には下記を追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>++++\n&lt;link rel=\"stylesheet\" href=\"../full-text-search.css\"&gt;&lt;/link&gt;\n&lt;script\n  src=\"https://code.jquery.com/jquery-3.2.1.min.js\"\n  integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\"\n  crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n&lt;script src=\"../full-text-search.js\"&gt;&lt;/script&gt;\n++++\n</pre></div></div>\n\n<h3>\n<span id=\"全文検索ができるかの確認\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%8B%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>全文検索ができるかの確認</h3>\n\n<p>以上の手順を実施すると、Asdciidoctorで全文検索ができるようになります。<br>\nドキュメントをブラウザで見ると、目次上部に検索窓が追加されています。<br>\n<a href=\"https://camo.qiitausercontent.com/daf3699de0e01b28ba4d3c2a8b8b535d3c54a2ab/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39393039336364362d353865382d376364652d613364382d3562656332613032303636382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/daf3699de0e01b28ba4d3c2a8b8b535d3c54a2ab/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39393039336364362d353865382d376364652d613364382d3562656332613032303636382e706e67\" alt=\"7_全文検索イメージ_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/99093cd6-58e8-7cde-a3d8-5bec2a020668.png\"></a><br>\n<br></p>\n\n<p>検索条件を入力し、虫眼鏡アイコンをクリックすると、検索結果が表示されます。<br>\n<a href=\"https://camo.qiitausercontent.com/5d8e0c5f2db223d5f021d484351b0c840010bb4f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63646533643865612d643838332d613636622d663838642d3961353934313032366263392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/5d8e0c5f2db223d5f021d484351b0c840010bb4f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63646533643865612d643838332d613636622d663838642d3961353934313032366263392e706e67\" alt=\"7_全文検索イメージ_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/cde3d8ea-d883-a66b-f88d-9a5941026bc9.png\"></a><br>\n<br></p>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>FessのREST APIを使用してAsciidoctorで全文検索できるようにする方法を紹介しました。<br>\nFessのREST APIを使えば、Asciidoctorに限らず、様々なシステムに全文検索機能を導入できそうです。</p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<ul>\n<li><a href=\"http://fess.codelibs.org/ja/articles/article-4.html#js\" rel=\"nofollow noopener\" target=\"_blank\">Fess で作るApache Solrベースの検索サーバー 〜 REST API 編</a></li>\n<li><a href=\"http://qiita.com/cookienote/items/1f2443be25630a78d946\" id=\"reference-69c989703115d994be84\">全文検索サーバー Fess を Docker で動かす</a></li>\n</ul>\n","body":"[Asciidoctor](http://asciidoctor.org/)を使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。\n\nそこで今回は、Dockerで全文検索サーバの[Fess](http://fess.codelibs.org/ja/)を立てて、\nドキュメントからJavaScript経由でFessのJSON APIを呼び出すことで、\n全文検索を簡単に導入する方法をご紹介します。\n\n導入するとドキュメントの右上に検索窓が出てきて全文検索できるようになります。\n![6月-24-2017 19-05-32.gif](https://qiita-image-store.s3.amazonaws.com/0/49915/123ec771-fb77-e4dc-df7e-a4b407792759.gif \"6月-24-2017 19-05-32.gif\")\n\n\n## Fessとは\n[Fess](http://fess.codelibs.org/ja/)は**「5 分で簡単に構築可能な全文検索サーバー」**です。\nJavaベースで構築されており、Apacheライセンスで提供されるオープンソース製品で、無料で使用できます。\n自分でクローラを設定して、自分だけの検索エンジンがつくれるようなイメージです。\nデフォルトで検索画面を提供していますが、JSON APIも提供しているので、様々なシステムと連携可能です。\n\n\n## 全体像\nドキュメント用Webサーバに全文検索用のJavaScriptファイルとCSSファイルを追加し、Dockerで全文検索用のFessサーバを立てます。\nFessサーバはドキュメント用Webサーバをクロールし、その情報を保存しておきます。\nドキュメントで全文検索を実施すると、JavaScript経由でFessサーバのJSON AIPを呼び出して、全文検索結果をドキュメントに表示します。\n\n![0_Fess_全体像_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/10c8ac46-2155-8eb7-a5ed-7c13ce544ec2.png)\n\n![0_Fess_全体像_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/40e1d456-2635-2aed-333d-8b1aec447931.png)\n\n## 導入手順\nこの導入手順は、下記のような環境\u001c（ローカルPCのDocker上にドキュメント用WebサーバとFessサーバが立っている環境）を作った時のものです。\nDockerを使わなくても、ローカルPC以外でも、導入可能です。導入手順は適宜読み替えてください。\n\n![0_Fess_全体像_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/0badb8d2-1a58-22b6-457c-12becf3a8911.png)\n\n\n### Fessのインストール\nDocker Hubの[codelibs/fess](https://hub.docker.com/r/codelibs/fess/)を使用します。今回ポートは10084で公開します。\nDockerを使わない場合は[Fess インストールガイド](http://fess.codelibs.org/ja/11.2/install/index.html)を参考にしてください。\n\n```\n$ docker run -d -p 10084:8080 --name fess codelibs/fess:latest\n```\n\n### Fessの設定\n#### クローラの設定\n`http://[PCのローカルIPアドレス]:10084/login`にアクセスするとログイン画面が表示されます。\nデフォルトのID/PASS　`admin/admin`でログインしましょう。\n![1_Fess管理者_ログイン画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/e790eca9-5073-948e-3e43-d7546d57fae5.png)\n<br/>\n\nログインするとダッシュボードが表示されます。左ペインの`クローラ` > `Web`　を選択しましょう。\n![2_Fess管理者_ダッシュボード.png](https://qiita-image-store.s3.amazonaws.com/0/49915/acfbe950-fa74-d0cb-3cee-5e8db4de5b74.png)\n<br/>\n\nWebクローラにはまだ何も登録されていないので、左上の`+　新規作成`ボタンをクリックしましょう。\n![3_Fess管理者_Webクロール設定_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/631037b4-aab2-8e0d-f9aa-3d23ec917a29.png)\n<br/>\n\nWebクロール情報入力画面が表示されます。\n![3_Fess管理者_Webクロール設定_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/ee5a09c9-7cce-3fec-7884-1258c32fa91a.png \"3_Fess管理者_Webクロール設定_2.png\")\n\n設定項目は色々ありますが、とりあえず下記項目だけ設定しましょう。\n\n* 名前 \n    * 任意の名前を設定してください。\n* URL \n    * ドキュメント用Webサーバにおいてドキュメントが格納されているルートフォルダのURLを指定してください。末尾に`/`を付けてください。\n* クロール対象とするURL \n    * 正規表現で値を設定します。上記`URL`で設定したルートフォルダ配下の全資産を対象とするために、`URLで設定した値` + `.*` を指定してください。\n* 検索対象とするURL\n   * 正規表現で値を設定します。HTMLのみを検索対象にしたい（JS、CSSなどは除外したい）ので、`URLで設定した値` + `.+\\.html$` を指定してください。\n<br/>\n<br/>\n\n\n値を設定したら、画面を下にスクロールして`+　作成`ボタンをクリックします。\nすると下記のようにWebクロールのデータが１件登録されます。\n![3_Fess管理者_Webクロール設定_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/3d00bf5a-f131-d367-de53-af10bb36839d.png)\n<br/>\n\n\n#### クローラの実行\n左ペインで　`システム` > `スケジューラ` を選択してジョブスケジューラを開きます。\nジョブスケジューラで `Default Crawler`を選択します。\n![4_Fess管理者_スケジューラ_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/b0aeca0d-64a4-43da-782b-0a1a0cd70b83.png)\n<br/>\n\n`今すぐ開始`をクリックします。\n![4_Fess管理者_スケジューラ_1.1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/00e76920-bfad-eeb1-cb99-724e3a9392a9.png \"4_Fess管理者_スケジューラ_1.1.png\")\n<br/>\n\nするとクロールが実行されます。\n![4_Fess管理者_スケジューラ_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/725d300f-07f5-724d-ce93-8e1c9752e10e.png)\n<br/>\n\nしばらくして`F5`キーを押してブラウザを更新してください。\nクロールが終了すると、スケジューラの状態が`実行中`から`有効`になります。\n![4_Fess管理者_スケジューラ_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/ee4f5277-aac3-ad7e-cdeb-41d39b733c1f.png)\n<br/>\n\n\n#### クローラ実行結果の確認\n左ペインの`システム情報`>`クロール情報`を選択すると、先ほど実行したクロールの結果が表示されています。その行を選択します。\n![5_Fess管理者_システム情報_クロール情報_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/92f310b5-83f6-deda-448d-afa8c5b0f104.png \"5_Fess管理者_システム情報_クロール情報_1.png\")\n<br/>\n\n\nセッションIDを選択します。\n![5_Fess管理者_システム情報_クロール情報_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/4e80cd14-3634-f665-b448-8b4b4e7a8d21.png \"5_Fess管理者_システム情報_クロール情報_2.png\")\n<br/>\n\nここにドキュメント用Webサーバのドキュメントが全て表示されればOKです。\n![5_Fess管理者_システム情報_クロール情報_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/60b86bc4-f70f-42c8-a017-5f138b3b88e3.png \"5_Fess管理者_システム情報_クロール情報_3.png\")\n<br/>\n\n### ドキュメント用Webサーバに全文検索用資産を配置\n全文検索用の資産は`full-text-search.js`と`full-text-search.css`の２つです。\n`full-text-search.js`の変数 FESS_JSON_ENDPOINT(FESSサーバのJSON APIのエンドポイント) は適時置き換えてください。\nこれらの資産をドキュメント用Webサーバのドキュメントのルートフォルダ直下に配置してください。\n\n```javascript:full-text-search.js\n$(function() {\n    'use strict';\n\n    // FESSサーバのJSON APIのエンドポイント（FessサーバのIPアドレス + /json）\n    var FESS_JSON_ENDPOINT = 'http://192.168.1.5:10084/json';\n\n    // １ページあたりの検索結果表示件数\n    var COUNT_PAR_PAGE = 10;\n\n\n    // 目次の\n    $('#toc')\n        // 一番上に検索条件入力エリアを挿入\n        .prepend(\n            '<div id=\"search-area\">' +\n                '<form id=\"search-form\">' +\n                    '<div class=\"search-input-area\">' +\n                        '<i class=\"fa fa-search left-icon\"></i>' +\n                        '<input id=\"search-query\" placeholder=\"全文検索\" />' +\n                        '<i class=\"fa fa-close right-icon\"></i>' +\n                    '</div>' +\n                    '<input id=\"search-start\" type=\"hidden\" value=\"0\"/>' +\n                    '<input id=\"search-num\" type=\"hidden\" value=\"' + COUNT_PAR_PAGE + '\"/>' +\n                '<form>' +\n            '</div>')\n        // イベント登録\n        .ready(function() {\n            var $searchArea = $(this);\n\n            // 入力項目の検索条件でEnterを押したら、検索処理を実行する\n            $searchArea.find('#search-form').submit({navi:0}, doSearch);\n\n            // 虫眼鏡アイコン押下したら、検索処理を実行する\n            $searchArea.find(\".left-icon\").click({navi:0}, doSearch);\n\n            // 検索条件入力したら、\n            $searchArea.find(\"#search-query\").keyup(function(){\n              var $this = $(this);\n              var $rightIcon = $this.parent().find(\".right-icon\");\n\n              if($this.val().length > 0) {\n                 // 検索条件に値がある場合は×アイコンの色を濃くする\n                 $rightIcon.css('color','#555');\n              } else {\n                 // 検索条件に値がない場合は×アイコンの色を薄くする\n                 $rightIcon.css('color','#ccc');\n              }\n            });\n\n            // ×アイコン押下したら、\n            $searchArea.find(\".right-icon\").click(function(){\n              // ×アイコンの色を薄くして\n              $(this).css('color','#ccc')\n                      // 検索条件をクリアする\n                     .parent().find(\"input\").val('');\n            });\n        });\n\n    // ドキュメントタイトルの\n    $('#header>h1')\n        // 直下に検索結果エリアを挿入\n        .before(\n            '<div id=\"search-result-area\">' +\n                '<div id=\"search-result-subheader\"></div>' +\n                '<div id=\"search-result-content\"></div>' +\n            '</div>')\n        // イベント登録\n        .ready(function() {\n            $(this)\n                .find('#search-result-area')\n                    // 検索結果エリアのバツアイコンをクリックしたら、\n                    .on(\"click\", '#remove-search-result', function(e) {\n                      var $searchResultArea = $(e.delegateTarget)\n                      // 検索結果エリアを非表示モードにする\n                      $searchResultArea.removeClass('show');\n                      // 検索結果エリアの中身を削除する\n                      $searchResultArea.find('#search-result-subheader').empty();\n                      $searchResultArea.find('#search-result-content').empty();\n                    })\n                    // 前ページリンクをクリックしたら、１ページ前を検索する\n                    .on(\"click\", \"#prevPageLink\", {navi:-1}, doSearch)\n                    // 次ページリンクをクリックしたら、１ページ後を検索する\n                    .on(\"click\", \"#nextPageLink\", {navi:1}, doSearch);\n        });\n\n\n\n    /**\n     * 検索処理\n     *\n     * @param  {eventObject} event\n     * @return {boolean}  submit処理を中断させるために必ずfalseを返却する\n     */\n    function doSearch(event){\n      // 検索フィールドの値をトリムして取得\n      var searchQuery = $.trim($('#search-query').val());\n      // 空の場合は検索処理を実行しない\n      if(searchQuery.length == 0) {\n        return false;\n      }\n\n\n      // 表示開始位置、表示件数の取得\n      var start = parseInt($('#search-start').val()),\n          num = parseInt($('#search-num').val());\n      // 表示開始位置のチェック\n      if(start < 0) {\n        start = 0;\n      }\n      // 表示件数のチェック\n      if(num < 1 || num > 100) {\n        num = 20;\n      }\n      // 表示ページ情報の取得\n      switch(event.data.navi) {\n        case -1:\n          // 前のページの場合\n          start -= num;\n          break;\n        case 1:\n          // 次のページの場合\n          start += num;\n          break;\n        default:\n        case 0:\n          start = 0;\n          break;\n      }\n\n\n      // URLを構築\n      var url = FESS_JSON_ENDPOINT + '?callback=?' + // 別ドメインを想定してJSONP形式でリクエストを送信する\n                                     '&q=' + encodeURIComponent(searchQuery) +\n                                     '&start=' + start +\n                                     '&num=' + num;\n\n      // 検索リクエスト送信\n      // 別ドメインを想定してJSONP形式でリクエストを送信する\n      $.ajax({\n          url: url,\n          dataType: 'jsonp',\n          success: renderSearchResult\n      });\n\n\n      // ページ情報の更新\n      $('#searchNum').val(num);\n\n      // ページ表示を上部に移動\n      $(document).scrollTop(0);\n\n      // サブミットを抑止するためにfalseを返す\n      return false;\n    };\n\n\n    /**\n     * 検索成功時に検索結果を描画する\n     *\n     * @param  {Anything} data レスポンスデータ\n     */\n    function renderSearchResult(data) {\n      // 検索結果処理\n      var dataResponse = data.response;\n      // ステータスチェック\n      if(dataResponse.status != 0) {\n        alert(\"検索中に問題が発生しました。\");\n        return;\n      }\n\n      // 検索結果領域を表示する\n      $('#search-result-area').addClass('show');\n\n      var $searchResultSubheader = $('#search-result-subheader'),\n          $searchResultContent = $('#search-result-content'),\n          record_count = dataResponse.record_count;\n\n      // 検索結果がない場合\n      if(record_count == 0) {\n        // サブヘッダーに出力\n        $searchResultSubheader[0].innerHTML =  '<div id=\"remove-search-result\" style=\"float:right;\"><i class=\"fa fa-times\"></i></div>';\n\n        // 結果領域に出力\n        $searchResultContent[0].innerHTML = '<b>' + dataResponse.q + '</b>に一致する情報は見つかりませんでした。';\n\n        return;\n      }\n\n\n      // 検索にヒットした場合\n      var page_number = dataResponse.page_number,\n          page_size = dataResponse.page_size,\n          page_count = dataResponse.page_count,\n          startRange = (page_number - 1) * page_size + 1,\n          endRange = page_number * page_size,\n          i = 0,\n          max,\n          offset = startRange - 1;\n\n      $('#search-start').val(offset);\n\n\n      // サブヘッダーに出力\n      $searchResultSubheader[0].innerHTML = '<b>' + dataResponse.q + '</b> の検索結果 ' +\n                                record_count + \" 件中 \" +  startRange + ' - ' +\n                                endRange + ' 件目 (' + dataResponse.exec_time + ' 秒)' +\n                               '<div id=\"remove-search-result\" style=\"float:right;\"><i class=\"fa fa-times\"></i></div>'\n\n      // 検索結果領域のクリア\n      $searchResultContent.empty();\n\n\n      // 検索結果の出力\n      var $resultBody = $(\"<ol/>\");\n      var results = dataResponse.result;\n      for(i = 0, max = results.length; i < max; i++) {\n        var element =\n            '<li>' +\n                '<h4 class=\"title\">' +\n                    '<a href=\"' +results[i].url_link + '\">' + results[i].title + '</a>' +\n                '</h4>' +\n                '<div class=\"body\">' +\n                    results[i].content_description +\n                    '<br/>' +\n                    '<cite>' + results[i].site + '</cite>' +\n                '</div>' +\n            '</li>';\n\n        $(element).appendTo($resultBody);\n      }\n      $resultBody.appendTo($searchResultContent);\n\n\n      // ページ番号情報の出力\n      var pageArea = [];\n      pageArea.push('<div id=\"pageInfo\">', page_number, 'ページ目<br/>');\n      if(page_number > 1) {\n        // 前のページへのリンク\n        pageArea.push('<a id=\"prevPageLink\" href=\"#\">&lt;&lt;前ページへ</a> ');\n      }\n      if(page_number < page_count) {\n        // 次のページへのリンク\n        pageArea.push('<a id=\"nextPageLink\" href=\"#\">次ページへ&gt;&gt;</a>');\n      }\n      pageArea.push('</div>');\n      $(pageArea.join(\"\")).appendTo($searchResultContent);\n    }\n});\n\n```\n\n\n```css:full-text-search.css\n@charset \"UTF-8\";\n\n#search-area {\n    margin-bottom: 1em;\n}\n\n.search-input-area {\n    position:relative;\n}\n\n/* 入力項目 */\n#search-query {\n    padding: 0.7em 2em;\n    width: 100%;\n    color: black;\n    font-family: arial,sans-serif;\n    font-size: 1em;\n    border: 1px solid #ccc;\n    border-radius: 2em;\n    outline: 0;\n}\n\n.search-input-area input:focus {\n    border: 1px solid #4d90fe;\n}\n\n/* アイコンは入力項目の左と右に配置する */\n.search-input-area .left-icon,\n.search-input-area .right-icon {\n    /* 縦方向の中央寄せ */\n    position:absolute;\n    top: 50%;\n    margin-top: -0.5em;\n    font-sise: 1em;\n    /* 要素にマウスを合わせたら、マウスポインタのマークを変える */\n    cursor:pointer;\n}\n\n.search-input-area .left-icon {\n    left: 0.7em;\n    color:#444;\n}\n\n.search-input-area .right-icon {\n    right: 0.7em;\n    /* 最初は、グレーアウトしておく */\n    color: #ccc;\n}\n\n/* アイコンにマウスを合わせたら、サイズを大きくする */\n.search-input-area .left-icon:hover,\n.search-input-area .right-icon:hover {\n    font-size: 1.4em;\n}\n\n\n.search-input-area .left-icon:hover {\n    left: 0.5em;\n}\n\n\n.search-input-area .right-icon:hover {\n    right: 0.5em;\n}\n\n/* 検索結果表示時に適用するスタイル */\n#search-result-area.show {\n    background: #f8f8f7;\n    border: 0px solid;\n    border-radius: 0.5em;\n    margin-top: 1em;\n    margin-bottom: 1em;\n    padding: 1em;\n}\n\n```\n\n### ドキュメントに全文検索用資産の読み込み処理を追加\n前手順でドキュメント用Webサーバに配置した`full-text-search.js`と`full-text-search.css`を、\n各ドキュメントから読み込むようにします。\n`full-text-search.js`はjQueryに依存しているので、\n既存のドキュメントで読み込んでいない場合はjQueryも読み込みも追加してください。\n\nドキュメント用Webサーバがこのようなフォルダ構成だとしたら、\n\n```\nドキュメント用Webサーバのドキュメントルート\n├── full-text-search.css\n├── full-text-search.js\n└── asciidoctor-sample\n    └── asciidoctor-sample.html\n```\n\n\n`asciidoctor-sample.adoc`には下記を追加します。\n\n```\n++++\n<link rel=\"stylesheet\" href=\"../full-text-search.css\"></link>\n<script\n  src=\"https://code.jquery.com/jquery-3.2.1.min.js\"\n  integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\"\n  crossorigin=\"anonymous\"></script>\n<script src=\"../full-text-search.js\"></script>\n++++\n```\n\n### 全文検索ができるかの確認\n以上の手順を実施すると、Asdciidoctorで全文検索ができるようになります。\nドキュメントをブラウザで見ると、目次上部に検索窓が追加されています。\n![7_全文検索イメージ_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/99093cd6-58e8-7cde-a3d8-5bec2a020668.png)\n<br/>\n\n検索条件を入力し、虫眼鏡アイコンをクリックすると、検索結果が表示されます。\n![7_全文検索イメージ_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/cde3d8ea-d883-a66b-f88d-9a5941026bc9.png)\n<br/>\n\n\n## まとめ\nFessのREST APIを使用してAsciidoctorで全文検索できるようにする方法を紹介しました。\nFessのREST APIを使えば、Asciidoctorに限らず、様々なシステムに全文検索機能を導入できそうです。\n\n\n## 参考\n* [Fess で作るApache Solrベースの検索サーバー 〜 REST API 編](http://fess.codelibs.org/ja/articles/article-4.html#js)\n* [全文検索サーバー Fess を Docker で動かす](http://qiita.com/cookienote/items/1f2443be25630a78d946)\n\n","comments_count":0,"created_at":"2017-06-26T00:21:37+09:00","likes_count":21,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true}]},{"node":{"fields":{"slug":"/b4c7d1b9-428f-569a-af40-527d89794a77/","title":"TypeScriptで簡単にChrome Extensionを作る方法","date":"2017-12-20T02:36:27+09:00","excerpt":"Githubで草を生やす活動は楽しいですね!増えてきて芝みたいになると達成感があって、モチベーションも上がります。ところで、この前の10/30に草がハロウィン仕様になっていたのを見て、草を自分の好みの色を変更できればもっと楽しくなるのでは?...","tags":["JavaScript","GitHub","TypeScript","chrome-extension","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"b4c7d1b9-428f-569a-af40-527d89794a77","title":"TypeScriptで簡単にChrome Extensionを作る方法","rendered_body":"<p>Githubで草を生やす活動は楽しいですね!<br>\n増えてきて芝みたいになると達成感があって、モチベーションも上がります。<br>\nところで、この前の10/30に草がハロウィン仕様になっていたのを見て、<br>\n草を自分の好みの色を変更できればもっと楽しくなるのでは?と思い<br>\n<a href=\"https://chrome.google.com/webstore/detail/github-contributions-pain/bdibnecenojddgmjplnfehpjdmkiddok?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">草の色が変更できる（ついでにお絵描きもできる）Chrome Extension</a>を作りました。<br>\n<strong>その時に<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使って、TypeScriptで簡単にChrome Extensionが作れたので、アプリ作成から公開までの手順をまとめます。</strong></p>\n\n<h2>\n<span id=\"1-プロジェクトの雛形を生成する\" class=\"fragment\"></span><a href=\"#1-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E9%9B%9B%E5%BD%A2%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>1. プロジェクトの雛形を生成する</h2>\n\n<p>yomanと<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>で簡単に雛形が作れるのでコレらを使っていきます。</p>\n\n<ul>\n<li>\n<code>yoman</code>と<code>generator-chrome-extension-kickstart-typescript</code>をグローバルインストールします</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install -g yo generator-chrome-extension-kickstart-typescript \n</pre></div></div>\n\n<ul>\n<li>プロジェクトのルートフォルダを作成後、ルートフォルダに移動して<code>yo</code>コマンドで雛形を生成します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ mkdir project\n$ cd project\n$ yo chrome-extension-kickstart-typescript \n</pre></div></div>\n\n<ul>\n<li>いくつか質問されるので適当に答えます\n\n<ul>\n<li>\n<strong>What would you like to call this extension?</strong>\n\n<ul>\n<li>プロジェクト名を入力します。デフォルトはプロジェクトのフォルダ名</li>\n</ul>\n</li>\n<li>\n<strong>And how would you call it if you only had 12 characters (short_name)?</strong>\n\n<ul>\n<li>プロジェクトの略称を12文字以内で入力します</li>\n</ul>\n</li>\n<li>\n<strong>How would you like to describe this extension?</strong>\n\n<ul>\n<li>プロジェクト概要を入力します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to use UI Action?</strong>\n\n<ul>\n<li>作りたいUI Actionに応じて、<code>No</code>,<code>Browser</code>,<code>Page</code>のいずれかを選択します\n\n<ul>\n<li>\n<code>No</code> ・・・ UI Actionを使わない場合</li>\n<li>\n<code>Browser</code> ・・・ ツールバーの右にアイコンが常駐するタイプのChrome拡張を作成する場合</li>\n<li>\n<code>Page</code> ・・・ 特定のWebサイト観覧時のみにアドレスバー右にアイコンが表示されるタイプのChrome拡張を作成する場合</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to override a chrome page?</strong>\n\n<ul>\n<li>Chromeの内部ページを書き換えるかどうかで、<code>No</code>,<code>Bookmarks Page</code>,<code>History Page</code>,<code>Newtab Page</code>のいずれかを選択します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like more UI Features?</strong>\n\n<ul>\n<li>作りたいUIを複数選択します\n\n<ul>\n<li>\n<code>Options Page</code> ・・・ オプション画面を作りたい場合</li>\n<li>\n<code>Devtools Page</code> ・・・ 開発者ツールを拡張したい場合</li>\n<li>\n<code>Content Scripts</code> ・・・ Webで表示している画面にJavaScriptを差し込んで何か処理をしたい場合</li>\n<li>\n<code>Omnibox</code> ・・・ アドレスバーを拡張したい時に選択</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to use permissions?</strong>\n\n<ul>\n<li>使用するパーミッションを複数選択します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to install promo images for the Chrome Web Store?</strong>\n\n<ul>\n<li>Chromeストアで使う宣伝用画像を自動で生成するかを選択します</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<p>※自分は下記のように答えました<br>\n<strong>What would you like to call this extension?</strong> =&gt; github-contributions-paint<br>\n<strong>And how would you call it if you only had 12 characters (short_name)?</strong> =&gt;  github-paint<br>\n<strong>How would you like to describe this extension?</strong> =&gt;  You can paint github contributions!<br>\n<strong>Would you like to use UI Action?</strong> =&gt; Browser<br>\n<strong>Would you like to override a chrome page?</strong> =&gt;  No<br>\n<strong>Would you like more UI Features?</strong> =&gt;  Content Scripts<br>\n<strong>Would you like to use permissions?</strong> =&gt;  Tabs<br>\n<strong>Would you like to install promo images for the Chrome Web Store?</strong> =&gt;  Yes</p>\n\n<ul>\n<li>すると雛形が生成されます</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">生成された雛形のフォルダ構成</span></div>\n<div class=\"highlight\"><pre>github-contributions-paint\n├── README.md\n├── app\n│   ├── images       　　　    　・・・Chromeウェブストア公開時に必要なアイコン格納フォルダ\n│   │   ├── icon-128.png\n│   │   ├── icon-16.png\n│   │   ├── icon-19.png\n│   │   └── icon-38.png\n│   ├── manifest.json          ・・・Chrome拡張の設定を定義するファイル\n│   ├── pages                  ・・・HTMLファイル格納フォルダ\n│   │   └── popup.html         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── scripts                ・・・TSファイル格納フォルダ\n│   │   ├── background.ts      ・・・バックグランド処理を記述するファイル\n│   │   └── popup.ts           ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── styles                 ・・・CSSファイル格納フォルダ\n│   │   └── popup.scss         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── _locales\n│   │   └── en\n│   │       └── messages.json ・・・アプリの設定ファイル\n│   └── fonts\n├── promo                     ・・・Chromeウェブストア公開時に必要な宣伝用画像の格納フォルダ\n│   ├── Chrome-Webstore-Icon_128x128.png\n│   ├── Promo-Image-Large_920x680.png\n│   ├── Promo-Image-Marquee_1400x560.png\n│   ├── Promo-Image-Small_440x280.png\n│   ├── Screenshot_1280x800.png\n│   └── Screenshot_640x400.png\n├── dist\n├── gulpfile.babel.js\n├── node_modules\n├── package-lock.json\n├── package.json\n├── tasks\n├── tsconfig.json\n└── tslint.json\n\n</pre></div>\n</div>\n\n<ul>\n<li>最後にTypeScriptをグローバルインストールしていない場合は、グローバルインストールまたはプロジェクトにインストールします</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install typescript --save-dev\n</pre></div></div>\n\n<p>==2018/11/24 追記(ここから)==</p>\n\n<ul>\n<li>このまま次手順にいくと警告がでるのでそれを防ぐためにgulpのバージョンを下げます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install gulp@3.9.0 --save-dev\n</pre></div></div>\n\n<p>※関連する<a href=\"https://github.com/gulpjs/gulp/issues/1631\" rel=\"nofollow noopener\" target=\"_blank\">issue</a>、<a href=\"https://stackoverflow.com/questions/48568942/failed-to-load-external-module-babel-register-while-gulp\" rel=\"nofollow noopener\" target=\"_blank\">stackoverflow</a></p>\n\n<p>==2018/11/24 追記(ここまで)==</p>\n\n<h2>\n<span id=\"2-作ったchrome-extensionを動かしてみる\" class=\"fragment\"></span><a href=\"#2-%E4%BD%9C%E3%81%A3%E3%81%9Fchrome-extension%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>2. 作ったChrome Extensionを動かしてみる</h2>\n\n<p>雛形を作成したら早速動かすことができます</p>\n\n<ul>\n<li>ビルドコマンドを実行します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run dev:chrome\n</pre></div></div>\n\n<ul>\n<li><p>Chromeで<code>chrome://extensions</code>を開いて<code>パッケージ化されていない拡張機能を読み込む</code>ボタンをクリック<br>\n<a href=\"https://camo.qiitausercontent.com/88e144ea0fc880ccec17978afc9ec782fb0d62c1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35613534396134352d386563342d383935352d623733332d3837353534396638616433312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/88e144ea0fc880ccec17978afc9ec782fb0d62c1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35613534396134352d386563342d383935352d623733332d3837353534396638616433312e706e67\" alt=\"手順_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5a549a45-8ec4-8955-b733-875549f8ad31.png\"></a></p></li>\n<li><p>プロジェクトルート/dist配下の<code>chrome</code>フォルダを選択<br>\n<a href=\"https://camo.qiitausercontent.com/53813821851801eddbed514961987f9070733381/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393161313636652d366532652d336633372d373130652d6565373532306339336563322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/53813821851801eddbed514961987f9070733381/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393161313636652d366532652d336633372d373130652d6565373532306339336563322e706e67\" alt=\"操作_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f91a166e-6e2e-3f37-710e-ee7520c93ec2.png\"></a></p></li>\n<li><p>するとプロジェクトが<a>Chrome Extension管理画面</a>に追加されて、ブラウザ右上にアイコンが表示されます<br>\n<a href=\"https://camo.qiitausercontent.com/e2e0fba31b666b0fea44ded1ded106236dd280e8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36316232653131332d653532302d376566382d633437652d3432366265393361613834622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e2e0fba31b666b0fea44ded1ded106236dd280e8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36316232653131332d653532302d376566382d633437652d3432366265393361613834622e706e67\" alt=\"動作確認1_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/61b2e113-e520-7ef8-c47e-426be93aa84b.png\"></a></p></li>\n<li><p>アイコンをクリックして動作検証ができます<br>\n<a href=\"https://camo.qiitausercontent.com/909be0f655c64c11846b9b3ca31630357ddd7121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33666631316537332d383162332d636435612d386537302d3961373534613661393936352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/909be0f655c64c11846b9b3ca31630357ddd7121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33666631316537332d383162332d636435612d386537302d3961373534613661393936352e706e67\" alt=\"動作確認_11.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/3ff11e73-81b3-cd5a-8e70-9a754a6a9965.png\"></a></p></li>\n</ul>\n\n<h2>\n<span id=\"3-開発中にchrome-extensionの動作確認する\" class=\"fragment\"></span><a href=\"#3-%E9%96%8B%E7%99%BA%E4%B8%AD%E3%81%ABchrome-extension%E3%81%AE%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>3. 開発中にChrome Extensionの動作確認する</h2>\n\n<p>雛形の動作検証ができたらTypeScriptファイルを編集して処理を追加していきます。<br>\n<code>npm run dev:chrome</code>を実行した後、下記手順繰り返すことで、ソースコードを修正しながら随時動作検証ができます。</p>\n\n<ul>\n<li>資産（TypeScriptやHTML,CSS）を修正する（勝手にビルドが走ります）</li>\n<li>最新のビルド資産を取り込むため<a>Chrome Extension管理画面</a>でリロードをクリックします\n<a href=\"https://camo.qiitausercontent.com/090a13aa3e617e29329421ec4c5fba4a56e1fb9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35663936353163362d373337662d643664622d383062662d3434613731363662323030352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/090a13aa3e617e29329421ec4c5fba4a56e1fb9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35663936353163362d373337662d643664622d383062662d3434613731363662323030352e706e67\" alt=\"開発手順_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5f9651c6-737f-d6db-80bf-44a7166b2005.png\"></a>\n</li>\n<li>Chrome Extensionの動作確認をする</li>\n</ul>\n\n<h2>\n<span id=\"4-アイコンと宣伝用画像を作る\" class=\"fragment\"></span><a href=\"#4-%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%81%A8%E5%AE%A3%E4%BC%9D%E7%94%A8%E7%94%BB%E5%83%8F%E3%82%92%E4%BD%9C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>4. アイコンと宣伝用画像を作る</h2>\n\n<p>アプリを公開する前に、アイコンと宣伝用画像を作成し、雛形生成時のデフォルト資産と差し替えます。<br>\nデザイナーさんなら苦労しないでしょうが、自分はこれが一番大変でした。<br>\n3つのアイコンと3つの宣伝用画像が必要です。</p>\n\n<h3>\n<span id=\"アイコン\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3\"><i class=\"fa fa-link\"></i></a>アイコン</h3>\n\n<ul>\n<li>128x128\n\n<ul>\n<li>必須。インストール時やChromeウェブストアで表示する用</li>\n</ul>\n</li>\n<li>48x48\n\n<ul>\n<li>拡張機能の管理ページで表示する用</li>\n</ul>\n</li>\n<li>16x16\n\n<ul>\n<li>ブラウザ右上に表示する用</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"宣伝用画像\" class=\"fragment\"></span><a href=\"#%E5%AE%A3%E4%BC%9D%E7%94%A8%E7%94%BB%E5%83%8F\"><i class=\"fa fa-link\"></i></a>宣伝用画像</h3>\n\n<ul>\n<li>440x280\n\n<ul>\n<li>必須</li>\n</ul>\n</li>\n<li>920x680\n\n<ul>\n<li>大きめの画像</li>\n</ul>\n</li>\n<li>1400x560\n\n<ul>\n<li>ChromeExtensionをChrome Storeで選択した時に表示される画像</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"5-chromeウェブストアに公開する\" class=\"fragment\"></span><a href=\"#5-chrome%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B9%E3%83%88%E3%82%A2%E3%81%AB%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>5. Chromeウェブストアに公開する</h2>\n\n<ul>\n<li>雛形生成時バージョンが0.0.0になっており、バージョンが低すぎて公開できない状態なので、<code>manifest.json</code>と<code>package.json</code>のバージョン指定を0.0.1にあげます</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">manifest.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n  </span><span class=\"s2\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0.0.1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">&lt;-</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">0</span><span class=\"err\">から</span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">1</span><span class=\"err\">にあげる</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n  </span><span class=\"s2\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0.0.1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">&lt;-</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">0</span><span class=\"err\">から</span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">1</span><span class=\"err\">にあげる</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>下記コマンドで公開用のzipファイルを作成します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run build:chrome\n</pre></div></div>\n\n<ul>\n<li><p><a href=\"https://chrome.google.com/webstore/category/extensions\" rel=\"nofollow noopener\" target=\"_blank\">Chromeウェブストア</a>のデベロッパーダッシュボードを開きます。Chromeアカウントでログインします<br>\n<a href=\"https://camo.qiitausercontent.com/d0db218423075317e350940d46d6510353fc81bd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65646234386163392d303138312d316437382d633761642d6130383237313261663031632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d0db218423075317e350940d46d6510353fc81bd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65646234386163392d303138312d316437382d633761642d6130383237313261663031632e706e67\" alt=\"アプリ登録_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/edb48ac9-0181-1d78-c7ad-a082712af01c.png\"></a></p></li>\n<li><p>ダッシュボードで<code>新しいアイテムを追加する</code>を選択します<br>\n<a href=\"https://camo.qiitausercontent.com/70b8f467a4819f7fd2251cf96abf3749b7626eeb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37383761336132352d326539332d363138362d313765642d3662313962626233626162352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/70b8f467a4819f7fd2251cf96abf3749b7626eeb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37383761336132352d326539332d363138362d313765642d3662313962626233626162352e706e67\" alt=\"アプリ登録_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/787a3a25-2e93-6186-17ed-6b19bbb3bab5.png\"></a></p></li>\n<li><p><code>ファイルを追加</code>で作成したzipファイル(プロジェクトルート/packages配下にあります)を選択後、<code>アップロード</code>を選択します<br>\n<a href=\"https://camo.qiitausercontent.com/2bc72004e70eb79c898506904f452d396754f39f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32323362343632342d643839322d336562382d356561382d3733633461616632623562382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2bc72004e70eb79c898506904f452d396754f39f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32323362343632342d643839322d336562382d356561382d3733633461616632623562382e706e67\" alt=\"アプリ登録_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/223b4624-d892-3eb8-5ea8-73c4aaf2b5b8.png\"></a></p></li>\n<li><p>説明、アイコン、宣伝用画像、カテゴリを入力して<code>変更を公開</code>をクリックします<br>\n<a href=\"https://camo.qiitausercontent.com/efa7c9ab0ced7326af8c7cb2d03fe9c2282e7f11/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323466303335352d666537622d373931382d326437352d3039633333636365356530302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/efa7c9ab0ced7326af8c7cb2d03fe9c2282e7f11/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323466303335352d666537622d373931382d326437352d3039633333636365356530302e706e67\" alt=\"登録_5.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/724f0355-fe7b-7918-2d75-09c33cce5e00.png\"></a></p></li>\n<li><p>これで公開作業は完了です。しばらくするとChromeウェブストアに公開されます</p></li>\n</ul>\n\n<h2>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h2>\n\n<p>今回は<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使って、TypeScriptでChrome Extensionを作成、公開する手順をまとめました。<br>\n最初はTypeScriptでChrome Extensionを作るのは、ビルドの設定など色々めんどくさそうだぁと思っていましたが、<br>\n<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使うことで、簡単に作成から公開まで実現できました。<br>\nブラウザでのちょっとした作業を効率化するのにChrome Extentionは非常に強力なツールなので、今後なにかアイディアがあればまた作ってみたいと思います。</p>\n","body":"Githubで草を生やす活動は楽しいですね!\n増えてきて芝みたいになると達成感があって、モチベーションも上がります。\nところで、この前の10/30に草がハロウィン仕様になっていたのを見て、\n草を自分の好みの色を変更できればもっと楽しくなるのでは?と思い\n[草の色が変更できる（ついでにお絵描きもできる）Chrome Extension](https://chrome.google.com/webstore/detail/github-contributions-pain/bdibnecenojddgmjplnfehpjdmkiddok?hl=ja)を作りました。\n**その時に[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使って、TypeScriptで簡単にChrome Extensionが作れたので、アプリ作成から公開までの手順をまとめます。**\n\n## 1. プロジェクトの雛形を生成する\nyomanと[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)で簡単に雛形が作れるのでコレらを使っていきます。\n\n* `yoman`と`generator-chrome-extension-kickstart-typescript`をグローバルインストールします\n\n```\n$ npm install -g yo generator-chrome-extension-kickstart-typescript \n```\n* プロジェクトのルートフォルダを作成後、ルートフォルダに移動して`yo`コマンドで雛形を生成します\n\n```\n$ mkdir project\n$ cd project\n$ yo chrome-extension-kickstart-typescript \n```\n\n* いくつか質問されるので適当に答えます\n    * **What would you like to call this extension?**\n        * プロジェクト名を入力します。デフォルトはプロジェクトのフォルダ名\n    * **And how would you call it if you only had 12 characters (short_name)?**\n        * プロジェクトの略称を12文字以内で入力します\n    * **How would you like to describe this extension?**\n        * プロジェクト概要を入力します\n    * **Would you like to use UI Action?**\n        * 作りたいUI Actionに応じて、`No`,`Browser`,`Page`のいずれかを選択します\n            * `No` ・・・ UI Actionを使わない場合\n            * `Browser` ・・・ ツールバーの右にアイコンが常駐するタイプのChrome拡張を作成する場合\n            * `Page` ・・・ 特定のWebサイト観覧時のみにアドレスバー右にアイコンが表示されるタイプのChrome拡張を作成する場合\n    * **Would you like to override a chrome page?**\n        * Chromeの内部ページを書き換えるかどうかで、`No`,`Bookmarks Page`,`History Page`,`Newtab Page`のいずれかを選択します\n    * **Would you like more UI Features?**\n        * 作りたいUIを複数選択します\n            * `Options Page` ・・・ オプション画面を作りたい場合\n            * `Devtools Page` ・・・ 開発者ツールを拡張したい場合\n            * `Content Scripts` ・・・ Webで表示している画面にJavaScriptを差し込んで何か処理をしたい場合\n            * `Omnibox` ・・・ アドレスバーを拡張したい時に選択\n    * **Would you like to use permissions?**\n        * 使用するパーミッションを複数選択します\n    * **Would you like to install promo images for the Chrome Web Store?**\n        * Chromeストアで使う宣伝用画像を自動で生成するかを選択します\n\n\n※自分は下記のように答えました\n**What would you like to call this extension?** => github-contributions-paint\n**And how would you call it if you only had 12 characters (short_name)?** =>  github-paint\n**How would you like to describe this extension?** =>  You can paint github contributions!\n**Would you like to use UI Action?** => Browser\n**Would you like to override a chrome page?** =>  No\n**Would you like more UI Features?** =>  Content Scripts\n**Would you like to use permissions?** =>  Tabs\n**Would you like to install promo images for the Chrome Web Store?** =>  Yes\n\n* すると雛形が生成されます\n\n```:生成された雛形のフォルダ構成\ngithub-contributions-paint\n├── README.md\n├── app\n│   ├── images       　　　    　・・・Chromeウェブストア公開時に必要なアイコン格納フォルダ\n│   │   ├── icon-128.png\n│   │   ├── icon-16.png\n│   │   ├── icon-19.png\n│   │   └── icon-38.png\n│   ├── manifest.json          ・・・Chrome拡張の設定を定義するファイル\n│   ├── pages                  ・・・HTMLファイル格納フォルダ\n│   │   └── popup.html         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── scripts                ・・・TSファイル格納フォルダ\n│   │   ├── background.ts      ・・・バックグランド処理を記述するファイル\n│   │   └── popup.ts           ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── styles                 ・・・CSSファイル格納フォルダ\n│   │   └── popup.scss         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── _locales\n│   │   └── en\n│   │       └── messages.json ・・・アプリの設定ファイル\n│   └── fonts\n├── promo                     ・・・Chromeウェブストア公開時に必要な宣伝用画像の格納フォルダ\n│   ├── Chrome-Webstore-Icon_128x128.png\n│   ├── Promo-Image-Large_920x680.png\n│   ├── Promo-Image-Marquee_1400x560.png\n│   ├── Promo-Image-Small_440x280.png\n│   ├── Screenshot_1280x800.png\n│   └── Screenshot_640x400.png\n├── dist\n├── gulpfile.babel.js\n├── node_modules\n├── package-lock.json\n├── package.json\n├── tasks\n├── tsconfig.json\n└── tslint.json\n\n```\n\n* 最後にTypeScriptをグローバルインストールしていない場合は、グローバルインストールまたはプロジェクトにインストールします\n\n```\n$ npm install typescript --save-dev\n```\n\n==2018/11/24 追記(ここから)==\n\n* このまま次手順にいくと警告がでるのでそれを防ぐためにgulpのバージョンを下げます。\n\n```\n$ npm install gulp@3.9.0 --save-dev\n```\n\n<small>※関連する[issue](https://github.com/gulpjs/gulp/issues/1631)、[stackoverflow](https://stackoverflow.com/questions/48568942/failed-to-load-external-module-babel-register-while-gulp)</small>\n\n==2018/11/24 追記(ここまで)==\n## 2. 作ったChrome Extensionを動かしてみる\n雛形を作成したら早速動かすことができます\n\n* ビルドコマンドを実行します\n\n```\n$ npm run dev:chrome\n```\n\n* Chromeで`chrome://extensions`を開いて`パッケージ化されていない拡張機能を読み込む`ボタンをクリック\n![手順_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5a549a45-8ec4-8955-b733-875549f8ad31.png)\n\n* プロジェクトルート/dist配下の`chrome`フォルダを選択\n![操作_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f91a166e-6e2e-3f37-710e-ee7520c93ec2.png)\n\n* するとプロジェクトが[Chrome Extension管理画面](chrome://extensions/)に追加されて、ブラウザ右上にアイコンが表示されます\n![動作確認1_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/61b2e113-e520-7ef8-c47e-426be93aa84b.png)\n\n\n* アイコンをクリックして動作検証ができます\n![動作確認_11.png](https://qiita-image-store.s3.amazonaws.com/0/49915/3ff11e73-81b3-cd5a-8e70-9a754a6a9965.png)\n\n\n## 3. 開発中にChrome Extensionの動作確認する\n雛形の動作検証ができたらTypeScriptファイルを編集して処理を追加していきます。\n`npm run dev:chrome`を実行した後、下記手順繰り返すことで、ソースコードを修正しながら随時動作検証ができます。\n\n* 資産（TypeScriptやHTML,CSS）を修正する（勝手にビルドが走ります）\n* 最新のビルド資産を取り込むため[Chrome Extension管理画面](chrome://extensions/)でリロードをクリックします\n![開発手順_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5f9651c6-737f-d6db-80bf-44a7166b2005.png)\n* Chrome Extensionの動作確認をする\n\n## 4. アイコンと宣伝用画像を作る\nアプリを公開する前に、アイコンと宣伝用画像を作成し、雛形生成時のデフォルト資産と差し替えます。\nデザイナーさんなら苦労しないでしょうが、自分はこれが一番大変でした。\n3つのアイコンと3つの宣伝用画像が必要です。\n\n### アイコン\n* 128x128\n    * 必須。インストール時やChromeウェブストアで表示する用\n* 48x48\n    * 拡張機能の管理ページで表示する用\n* 16x16\n    * ブラウザ右上に表示する用\n  \n### 宣伝用画像\n* 440x280\n    * 必須\n* 920x680\n    * 大きめの画像\n* 1400x560\n    * ChromeExtensionをChrome Storeで選択した時に表示される画像\n\n## 5. Chromeウェブストアに公開する\n* 雛形生成時バージョンが0.0.0になっており、バージョンが低すぎて公開できない状態なので、`manifest.json`と`package.json`のバージョン指定を0.0.1にあげます\n\n```json:manifest.json\n{\n  ・・・\n  \"version\": \"0.0.1\", <- 0.0.0から0.0.1にあげる\n  ・・・\n}\n```\n\n```json:package.json\n{\n  ・・・\n  \"version\": \"0.0.1\", <- 0.0.0から0.0.1にあげる\n  ・・・\n}\n```\n\n* 下記コマンドで公開用のzipファイルを作成します\n\n```\n$ npm run build:chrome\n```\n\n* [Chromeウェブストア](https://chrome.google.com/webstore/category/extensions)のデベロッパーダッシュボードを開きます。Chromeアカウントでログインします\n![アプリ登録_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/edb48ac9-0181-1d78-c7ad-a082712af01c.png)\n\n* ダッシュボードで`新しいアイテムを追加する`を選択します\n![アプリ登録_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/787a3a25-2e93-6186-17ed-6b19bbb3bab5.png)\n\n* `ファイルを追加`で作成したzipファイル(プロジェクトルート/packages配下にあります)を選択後、`アップロード`を選択します\n![アプリ登録_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/223b4624-d892-3eb8-5ea8-73c4aaf2b5b8.png)\n\n* 説明、アイコン、宣伝用画像、カテゴリを入力して`変更を公開`をクリックします\n![登録_5.png](https://qiita-image-store.s3.amazonaws.com/0/49915/724f0355-fe7b-7918-2d75-09c33cce5e00.png)\n\n* これで公開作業は完了です。しばらくするとChromeウェブストアに公開されます\n\n\n## 最後に\n今回は[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使って、TypeScriptでChrome Extensionを作成、公開する手順をまとめました。\n最初はTypeScriptでChrome Extensionを作るのは、ビルドの設定など色々めんどくさそうだぁと思っていましたが、\n[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使うことで、簡単に作成から公開まで実現できました。\nブラウザでのちょっとした作業を効率化するのにChrome Extentionは非常に強力なツールなので、今後なにかアイディアがあればまた作ってみたいと思います。\n\n","comments_count":5,"created_at":"2017-12-20T02:36:27+09:00","likes_count":48,"reactions_count":0},"relations":[{"node":{"fields":{"slug":"/7780e313-8bda-5534-99aa-37bf47e9deb3/","title":"GitBucketのissueで作業量を設定できるプラグイン","date":"2017-12-31T23:49:04+09:00","excerpt":"== 2018/4/7 追記 ==========================================本記事ではChrome拡張とDockerによって実現していましたが、その後GitBucket Plugin化しました。gitb...","tags":["JavaScript","chrome-extension","Docker","GitBucket","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"7780e313-8bda-5534-99aa-37bf47e9deb3","title":"GitBucketのissueで作業量を設定できるプラグイン","rendered_body":"<p>== 2018/4/7 追記 ==========================================<br>\n本記事ではChrome拡張とDockerによって実現していましたが、<br>\nその後GitBucket Plugin化しました。</p>\n\n<p><a href=\"https://github.com/Takumon/gitbucket-issue-estimation-plugin\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-plugin</a></p>\n\n<p><a href=\"https://github.com/Takumon/gitbucket-issue-estimation-plugin/releases/tag/0.1\" rel=\"nofollow noopener\" target=\"_blank\">リリースページ</a>からjarファイルをダウンロードして<code>&lt;GITBUCKET_HOME&gt;/plugins/</code>に置くだけで導入可能です。<br>\n== =======================================================</p>\n\n<p>Git Advent Calendarが埋まっていなかったので、大晦日ですが代わりに投稿させていただきました。</p>\n\n<h2>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h2>\n\n<p><a href=\"https://gitbucket.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">GitBucket</a>のマイルストーンの進捗率はissueの件数ベースなので、issueごとに作業量のバラつきがあったりすると現実的な進捗率と乖離してしまいます。</p>\n\n<p>そこで今回はChrome拡張とDockerイメージを作成して、<br>\nissueに作業量を設定できるようにして、マイルストーンで作業量ベースの進捗率を確認できるようにしました。</p>\n\n<p>Chrome拡張とDockerイメージはどちらも公開しているので簡単に導入できます。是非試してみてください。</p>\n\n<ul>\n<li>\n<em>Chrome拡張</em>\n\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-client</a></li>\n</ul>\n</li>\n<li>\n<em>Dockerイメージ</em>\n\n<ul>\n<li><a href=\"https://hub.docker.com/r/takumon/gitbucket-issue-estimation-server/\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-server</a></li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"導入すると\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B%E3%81%A8\"><i class=\"fa fa-link\"></i></a>導入すると</h2>\n\n<p><a href=\"https://gitbucket.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">GitBucket</a>のissueで作業量が設定できるようになり、<br>\n<a href=\"https://camo.qiitausercontent.com/f13706aedeb42c177c1f4f57975596b5ff002407/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36313030366263392d326438322d663062302d363461322d3037393233633737333963372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/f13706aedeb42c177c1f4f57975596b5ff002407/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36313030366263392d326438322d663062302d363461322d3037393233633737333963372e706e67\" alt=\"導入後_イシュー画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/61006bc9-2d82-f0b0-64a2-07923c7739c7.png\"></a></p>\n\n<p>マイルストーンで作業量ベースの進捗率が見れるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/b86e2b23bc0f4b9fae45b07bfd568b11bc005121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36613462383664382d323937332d656338342d383662632d3632383965343262643636362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b86e2b23bc0f4b9fae45b07bfd568b11bc005121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36613462383664382d323937332d656338342d383662632d3632383965343262643636362e706e67\" alt=\"導入後_マイルストーン画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/6a4b86d8-2973-ec84-86bc-6289e42bd666.png\"></a></p>\n\n<p>またissue一覧画面でも作業量を設定できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/7c2ee31427698b7fe01b30f25b8e31b7e3115e2d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39633835386533622d356463312d313432342d663334662d3562323661633665323066642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7c2ee31427698b7fe01b30f25b8e31b7e3115e2d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39633835386533622d356463312d313432342d663334662d3562323661633665323066642e706e67\" alt=\"導入後_イシュー一覧画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/9c858e3b-5dc1-1424-f34f-5b26ac6e20fd.png\"></a></p>\n\n<h2>\n<span id=\"導入手順\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>導入手順</h2>\n\n<h3>\n<span id=\"1-docker側\" class=\"fragment\"></span><a href=\"#1-docker%E5%81%B4\"><i class=\"fa fa-link\"></i></a>1. Docker側</h3>\n\n<p>GitBucketと同じネットワーク環境に作業量保存用のサーバを立てます。Dockerが導入されていることが前提です。</p>\n\n<ul>\n<li>docker-compose.ymlを作成（MongoDBのボリューム用にdocker-compose.ymlファイルと同階層にdbフォルダを作成してください）</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"docker\">\n<div class=\"code-lang\"><span class=\"bold\">docker-compose.yml</span></div>\n<div class=\"highlight\"><pre>version: \"3.3\"\nservices:\n  server:\n    image: takumon/gitbucket-issue-estimation-server\n    ports:\n      - 3000:3000\n    depends_on:\n      - mongo\n    links:\n      - mongo\n    environment:\n      MONGO_URL: mongodb://mongo:27017/test\n  mongo:\n    image: mongo:3.5.12\n    ports:\n      - 27017:27017\n    volumes:\n      - ./db:/data/db\n</pre></div>\n</div>\n\n<ul>\n<li>docker-conpose.ymlがあるフォルダで下記を実行</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span>docker-compose up <span class=\"nt\">-d</span>\n</pre></div></div>\n\n<h3>\n<span id=\"2-gitbucket側\" class=\"fragment\"></span><a href=\"#2-gitbucket%E5%81%B4\"><i class=\"fa fa-link\"></i></a>2. GitBucket側</h3>\n\n<p>Chrome拡張をインストールする前に、GitBucketのトークンを発行してメモしておきます。</p>\n\n<ul>\n<li><p>GitBucketヘッダー右上アイコン &gt; Account Setting を選択<br>\n<a href=\"https://camo.qiitausercontent.com/b06f383ce5768cc2c9b84b7bcd92537cbd0f94ef/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34323637363166372d633139392d653139652d633631392d6131383264643035623065612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b06f383ce5768cc2c9b84b7bcd92537cbd0f94ef/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34323637363166372d633139392d653139652d633631392d6131383264643035623065612e706e67\" alt=\"導入手順_GitBucketトークン発行_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/426761f7-c199-e19e-c619-a182dd05b0ea.png\"></a><br>\n<br></p></li>\n<li><p>左メニュー Applicationsを選択し、Generate new tokenのToken descriptionにトークンの概要を記載、その後<code>Generate token</code>ボタンをクリック<br>\n<a href=\"https://camo.qiitausercontent.com/e21ff3f5214f3833cc66ed4d9cf2037b31c6d02f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64313836663730322d663764622d353231652d366436642d6564636133313836643931352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e21ff3f5214f3833cc66ed4d9cf2037b31c6d02f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64313836663730322d663764622d353231652d366436642d6564636133313836643931352e706e67\" alt=\"導入手順_GitBucketトークン発行_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/d186f702-f7db-521e-6d6d-edca3186d915.png\"></a><br>\n<br></p></li>\n<li><p>発行されたトークンをコピー（後の手順で使います）<br>\n<a href=\"https://camo.qiitausercontent.com/d46de4cb3222a8304001bbc2f89abc1e14b2cba8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30633830346661662d666431332d383064322d386365392d6535303439323262623534612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d46de4cb3222a8304001bbc2f89abc1e14b2cba8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30633830346661662d666431332d383064322d386365392d6535303439323262623534612e706e67\" alt=\"導入手順_GitBucketトークン発行_３.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/0c804faf-fd13-80d2-8ce9-e504922bb54a.png\"></a></p></li>\n</ul>\n\n<h3>\n<span id=\"3-chrome-extension側\" class=\"fragment\"></span><a href=\"#3-chrome-extension%E5%81%B4\"><i class=\"fa fa-link\"></i></a>3. Chrome Extension側</h3>\n\n<ul>\n<li><p>Chromeを開きChromeウェブストアで<a href=\"https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-client</a>をインストール<br>\n<a href=\"https://camo.qiitausercontent.com/b7b7e21c6391cd1436ad73eb356bdec6f93bb3b4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63336365666639382d313731372d626566302d306465392d3836313736303638613635632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b7b7e21c6391cd1436ad73eb356bdec6f93bb3b4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63336365666639382d313731372d626566302d306465392d3836313736303638613635632e706e67\" alt=\"導入手順_GitBucket_拡張インストール_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/c3ceff98-1717-bef0-0de9-86176068a65c.png\"></a><br>\n<br></p></li>\n<li>\n<p>右上の「E」アイコンをクリック、下記情報を入力し<code>Save</code>ボタンクリック</p>\n\n<ul>\n<li>\n<strong>gitbucket-issue-estimation-server URL</strong>\n\n<ul>\n<li>サーバ側の手順で立てたサーバのURL 例： <code>http://127.0.0.1:3000</code> </li>\n</ul>\n</li>\n<li>\n<strong>GitBucket Token</strong>\n\n<ul>\n<li>GitBucket側の手順でメモしたトークン\n<a href=\"https://camo.qiitausercontent.com/be5ab7568b1a4eee506be3546cae994189e34d15/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66366162333739622d613835322d366562342d663634382d6131346437353139663365622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/be5ab7568b1a4eee506be3546cae994189e34d15/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66366162333739622d613835322d366562342d663634382d6131346437353139663365622e706e67\" alt=\"導入手順_GitBucketトークン発行_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f6ab379b-a852-6eb4-f648-a14d7519f3eb.png\"></a>\n<br>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"具体的な仕組み\" class=\"fragment\"></span><a href=\"#%E5%85%B7%E4%BD%93%E7%9A%84%E3%81%AA%E4%BB%95%E7%B5%84%E3%81%BF\"><i class=\"fa fa-link\"></i></a>具体的な仕組み</h2>\n\n<p>Docker側はMongoDBとNode.jsを使っていて、issueの作業量の検索登録・更新・削除APIを提供しているだけです。<br>\nChrome拡張側で下記のように全体をコントロールしています。</p>\n\n<p><strong>(1)</strong> ・・・　GitBucketの画面からissueとマイルストーンの情報を取得、issueの作業量、作業量ベースの進捗率を画面に挿入<br>\n<strong>(2)</strong> ・・・　画面から取得したissueの情報をもとに詳細情報を取得<br>\n<strong>(3)</strong> ・・・　issueの作業量を検索・登録・更新・削除</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/d5736e48c469204a17566c6cfb4003420add2c8e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63616435323063332d376439632d666134372d326262302d3732633534663638383233362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d5736e48c469204a17566c6cfb4003420add2c8e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63616435323063332d376439632d666134372d326262302d3732633534663638383233362e706e67\" alt=\"全体像.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/cad520c3-7d9c-fa47-2bb0-72c54f688236.png\"></a></p>\n\n<h2>\n<span id=\"chrome拡張作成時にgitbucket-apiまわりで躓いたこと\" class=\"fragment\"></span><a href=\"#chrome%E6%8B%A1%E5%BC%B5%E4%BD%9C%E6%88%90%E6%99%82%E3%81%ABgitbucket-api%E3%81%BE%E3%82%8F%E3%82%8A%E3%81%A7%E8%BA%93%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>Chrome拡張作成時にGitBucket APIまわりで躓いたこと</h2>\n\n<p><a href=\"https://github.com/gitbucket/gitbucket/wiki/API-WebHook\" rel=\"nofollow noopener\" target=\"_blank\">GitBucketのAPI</a>は<a href=\"https://developer.github.com/v3/\" rel=\"nofollow noopener\" target=\"_blank\">GithubのREST API v3</a>に準拠していますが、一部実装されていない部分があったので、Chrome拡張作成時に躓きました。</p>\n\n<h3>\n<span id=\"stateallが効かない\" class=\"fragment\"></span><a href=\"#stateall%E3%81%8C%E5%8A%B9%E3%81%8B%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a><code>state=all</code>が効かない</h3>\n\n<p>未解決issueと解決済issue両方をいっぺんに取得したかったのですが、GitBucketのAPIでは<code>state=all</code>が効きません。そのため<code>state=open</code>と<code>state=closed</code>を指定して２回に分けて取得する実装にしました。</p>\n\n<h4>\n<span id=\"per_pageが効かない1度に25件が最大\" class=\"fragment\"></span><a href=\"#per_page%E3%81%8C%E5%8A%B9%E3%81%8B%E3%81%AA%E3%81%841%E5%BA%A6%E3%81%AB25%E4%BB%B6%E3%81%8C%E6%9C%80%E5%A4%A7\"><i class=\"fa fa-link\"></i></a><code>per_page</code>が効かない（1度に25件が最大）</h4>\n\n<p>GitBucketのAPIでは<code>per_page</code>（検索時の１ページあたりの件数）が実装されていません。<br>\nそのためマイルストーンに紐づくissue取得時は、１ページ目を検索して取得結果が25件の場合は次のページも検索するような実装にしました。</p>\n\n<h4>\n<span id=\"closed_atクローズ日が取得できない\" class=\"fragment\"></span><a href=\"#closed_at%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%BA%E6%97%A5%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a><code>closed_at</code>（クローズ日）が取得できない</h4>\n\n<p>Chrome拡張作成当初は、バーンダウンチャートを表示しようと思っていたのですが、issueのクローズ日が取得出来ないので断念しました。</p>\n\n<h4>\n<span id=\"-参考にさせていただいたサイト\" class=\"fragment\"></span><a href=\"#-%E5%8F%82%E8%80%83%E3%81%AB%E3%81%95%E3%81%9B%E3%81%A6%E3%81%84%E3%81%9F%E3%81%A0%E3%81%84%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88\"><i class=\"fa fa-link\"></i></a>※ 参考にさせていただいたサイト</h4>\n\n<ul>\n<li><a href=\"https://qiita.com/5zm/items/b0b620cdeb9596108418#1%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8C%E6%9C%80%E5%A4%A725%E4%BB%B6%E3%81%A7%E5%85%A8issue%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\" id=\"reference-1c197ca99a2ee070efac\">PythonでGitBucketのIssueをExcel出力する（その後）</a></li>\n<li><a href=\"https://qiita.com/5zm/items/57d7abca8e0d447e326d#2-gitbucket%E3%81%AEapi%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6issues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0\" id=\"reference-7d56ea50a58cb24addc5\">PythonでGitBucketのIssueをExcel出力する（API呼び出し編）</a></li>\n</ul>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>本来こういう追加機能はGitBucketプラグインで作るべきなのかもしれませんが、今回はChrome拡張とDockerイメージで実現してみました。<br>\nChrome拡張は任意の画面にJavaScriptやCSSを差し込めるので、既存のWebサービスををちょっと便利にするのにはうってつけですね。</p>\n","body":"== 2018/4/7 追記 ==========================================\n本記事ではChrome拡張とDockerによって実現していましたが、\nその後GitBucket Plugin化しました。\n\n[gitbucket-issue-estimation-plugin](https://github.com/Takumon/gitbucket-issue-estimation-plugin)\n\n[リリースページ](https://github.com/Takumon/gitbucket-issue-estimation-plugin/releases/tag/0.1)からjarファイルをダウンロードして`<GITBUCKET_HOME>/plugins/`に置くだけで導入可能です。\n== =======================================================\n\n\nGit Advent Calendarが埋まっていなかったので、大晦日ですが代わりに投稿させていただきました。\n\n## はじめに\n[GitBucket](https://gitbucket.github.io/)のマイルストーンの進捗率はissueの件数ベースなので、issueごとに作業量のバラつきがあったりすると現実的な進捗率と乖離してしまいます。\n\nそこで今回は\bChrome拡張とDockerイメージを作成して、\nissueに作業量を設定できるようにして、マイルストーンで作業量ベースの進捗率を確認できるようにしました。\n\nChrome拡張とDockerイメージはどちらも公開しているので簡単に導入できます。是非試してみてください。\n\n\n* *Chrome拡張*\n    * [gitbucket-issue-estimation-client](https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja)\n* *Dockerイメージ*\n    * [gitbucket-issue-estimation-server](https://hub.docker.com/r/takumon/gitbucket-issue-estimation-server/)\n\n## 導入すると\n[GitBucket](https://gitbucket.github.io/)のissueで作業量が設定できるようになり、\n![導入後_イシュー画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/61006bc9-2d82-f0b0-64a2-07923c7739c7.png)\n\n\bマイルストーンで作業量ベースの進捗率が見れるようになります。\n![導入後_マイルストーン画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/6a4b86d8-2973-ec84-86bc-6289e42bd666.png)\n\nまた\bissue\b一覧画面でも作業量を設定できるようになります。\n![導入後_イシュー一覧画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/9c858e3b-5dc1-1424-f34f-5b26ac6e20fd.png)\n\n\n\n\n## 導入手順\n### 1. Docker側\nGitBucketと同じネットワーク環境に作業量\b保存用のサーバを立てます。Dockerが導入されていることが前提です。\n\n* \u001edocker-compose\b.ymlを作成（MongoDBのボリューム用にdocker-compose.ymlファイルと同階層にdbフォルダを作成してください）\n\n```docker:docker-compose.yml\nversion: \"3.3\"\nservices:\n  server:\n    image: takumon/gitbucket-issue-estimation-server\n    ports:\n      - 3000:3000\n    depends_on:\n      - mongo\n    links:\n      - mongo\n    environment:\n      MONGO_URL: mongodb://mongo:27017/test\n  mongo:\n    image: mongo:3.5.12\n    ports:\n      - 27017:27017\n    volumes:\n      - ./db:/data/db\n```\n\n* docker-conpose.ymlがあるフォルダで下記を実行\n\n```bash:\n$ docker-compose up -d\n```\n\n\n### 2. GitBucket側\nChrome拡張をインストールする前に、GitBucketの\bトークンを発行してメモしておきます。\n\n* GitBucketヘッダー右上アイコン > Account Setting\b を選択\n![導入手順_GitBucketトークン発行_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/426761f7-c199-e19e-c619-a182dd05b0ea.png)\n<br>\n\n* 左メニュー Applicationsを選択し、Generate new tokenのToken descriptionにトークンの概要を記載、その後`Generate token`ボタンをクリック\n![導入手順_GitBucketトークン発行_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/d186f702-f7db-521e-6d6d-edca3186d915.png)\n<br>\n\n* 発行されたトークンをコピー（後の手順で使います）\n![導入手順_GitBucketトークン発行_３.png](https://qiita-image-store.s3.amazonaws.com/0/49915/0c804faf-fd13-80d2-8ce9-e504922bb54a.png)\n\n\n### 3. Chrome Extension側\n* Chromeを開きChromeウェブストアで[gitbucket-issue-estimation-client](https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja)をインストール\n![導入手順_GitBucket_拡張インストール_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/c3ceff98-1717-bef0-0de9-86176068a65c.png)\n<br>\n\n* \b右上の「E」アイコンをクリック、下記情報を入力し`Save`ボタンクリック\n    * **gitbucket-issue-estimation-server URL**\n        * サーバ側の手順で立てたサーバのURL 例： `http://127.0.0.1:3000` \n    * **GitBucket Token**\n        * GitBucket側の手順でメモしたトークン\n![導入手順_GitBucketトークン発行_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f6ab379b-a852-6eb4-f648-a14d7519f3eb.png)\n<br>\n\n## 具体的な仕組み\nDocker側はMongoDBとNode.jsを使っていて、issueの作業量の検索登録・更新・削除APIを提供しているだけです。\nChrome拡張側で下記のように全体をコントロールしています。\n\n**(1)** ・・・　GitBucketの画面からissueとマイルストーンの情報を取得、issueの作業量、作業量ベースの進捗率を画面に挿入\n**(2)** ・・・　画面から取得したissueの情報をもとに詳細情報を取得\n**(3)** ・・・　issueの作業量を検索・登録・更新・削除\n\n![全体像.png](https://qiita-image-store.s3.amazonaws.com/0/49915/cad520c3-7d9c-fa47-2bb0-72c54f688236.png)\n\n\n\n## Chrome拡張作成時にGitBucket APIまわりで躓いたこと\n[GitBucketのAPI](https://github.com/gitbucket/gitbucket/wiki/API-WebHook)は[GithubのREST API v3](https://developer.github.com/v3/)に準拠していますが、一部実装されていない部分があったので、Chrome拡張作成時に躓きました。\n\n### `state=all`が効かない\n未解決issueと解決済issue両方をいっぺんに取得したかったのですが、GitBucketのAPIでは`state=all`が効きません。そのため`state=open`と`state=closed`を指定して２回に分けて取得する実装にしました。\n\n#### `per_page`が効かない（\b1度に25件が最大）\nGitBucketのAPIでは`per_page`（検索時の１ページあたりの件数）が実装されていません。\nそのためマイルストーンに紐づくissue取得時は、１ページ目を検索して取得結果が25件の場合は次のページも検索するような実装にしました。\n\n#### `closed_at`（クローズ日）が取得できない\nChrome拡張作成当初は、バーンダウンチャートを表示しようと思っていたのですが、issueのクローズ日が取得出来ないので断念しました。\n\n#### ※ 参考にさせていただいたサイト\n* [PythonでGitBucketのIssueをExcel出力する（その後）](https://qiita.com/5zm/items/b0b620cdeb9596108418#1%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8C%E6%9C%80%E5%A4%A725%E4%BB%B6%E3%81%A7%E5%85%A8issue%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84)\n* [PythonでGitBucketのIssueをExcel出力する（API呼び出し編）](https://qiita.com/5zm/items/57d7abca8e0d447e326d#2-gitbucket%E3%81%AEapi%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6issues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0)\n\n\n## まとめ\n本来こういう追加機能はGitBucketプラグインで作るべきなのかもしれませんが、今回はChrome拡張とDockerイメージで実現してみました。\nChrome拡張は任意の画面にJavaScriptやCSSを差し込めるので、既存のWebサービスををちょっと便利にするのにはうってつけですね。\n\n","comments_count":0,"created_at":"2017-12-31T23:49:04+09:00","likes_count":6,"reactions_count":0},"matches":4,"weight":250,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"chrome-extension"},{"weight":50,"keyword":"Qiita"}],"avgWeight":62.5,"totalWeight":58,"threshold":12.5,"isRelated":true},{"node":{"fields":{"slug":"/5644c24e-eade-50ca-aa11-83a4eaeba122/","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その２. テスト編","date":"2017-07-24T07:12:10+09:00","excerpt":"やりたいことAngular CLI使って、MEANスタック(MongoDB + Express + Angular + NodeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。フロント側とサーバ側の両方をweb...","tags":["JavaScript","jasmine","TypeScript","AngularJS","Protractor","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"5644c24e-eade-50ca-aa11-83a4eaeba122","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その２. テスト編","rendered_body":"\n<h2>\n<span id=\"やりたいこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたいこと</h2>\n\n<ul>\n<li>Angular CLI使って、MEANスタック(<strong>M</strong>ongoDB + <strong>E</strong>xpress + <strong>A</strong>ngular + <strong>N</strong>odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。</li>\n<li>フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。</li>\n<li>Dockerを使ってアプリを簡単に配布したい。</li>\n</ul>\n\n<p>これらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。</p>\n\n<ul>\n<li><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\" id=\"reference-fc6741a6eda3b7ffd9f1\">その１. ビルド編</a></li>\n<li>その２. テスト編　⇦　今回はココ</li>\n<li>その３. Dockerビルド編</li>\n</ul>\n\n<h2>\n<span id=\"その２-テスト編\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%81%AE%EF%BC%92-%E3%83%86%E3%82%B9%E3%83%88%E7%B7%A8\"><i class=\"fa fa-link\"></i></a>その２. テスト編</h2>\n\n<p><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\">その１. ビルド編</a>では、Angular CLIで作成したプロジェクトをベースに、<br>\nMongoDBに登録しているメッセージを画面に一覧で表示するアプリを作成しました。<br>\n今回は、クライアント側とサーバ側の<a href=\"https://jasmine.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">Jasmine</a>を使った単体テスト、<a href=\"http://www.protractortest.org/#/\" rel=\"nofollow noopener\" target=\"_blank\">Protractor</a>を使ったE2Eテスト、それらを実行するnpm scriptsを作成します。<br>\n最終的には下記のように<code>npm test</code>コマンドで単体テストが実行できるようになります。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" alt=\"10_単体テスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png\"></a></p>\n\n<p>またE2Eテストは<code>npm run e2e</code>コマンドで実施できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" alt=\"20_E2Eテスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png\"></a></p>\n\n<h3>\n<span id=\"プロジェクト構成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクト構成</h3>\n\n<p>今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。<br>\n<a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\">その１. ビルド編</a>で作成したものをベースにテスト用の資産を追加します。詳細は<a href=\"https://github.com/Takumon/angular4-express4-typescritp2/tree/test\" rel=\"nofollow noopener\" target=\"_blank\">リポジトリ</a>を参照してください。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">プロジェクト構成（完成イメージ）</span></div>\n<div class=\"highlight\"><pre>.\n├── dist                              ・・・(1) コンパイル資産出力先\n│   ├── server\n│   │   ├── ...\n│   │   ...\n│   │ \n│   └── server_test                      ・・・(1-1)　コンパイルされたサーバ側テスト資産\n│       ├── app.spec.js\n│       ├── app.spec.js.map\n│       ├── test.server.conf.js\n│       ├── test.server.conf.js.map\n│       ├── test.server.js\n│       └── test.server.js.map\n├── e2e                                ・・・(2)　E2Eテスト資産\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── server\n│   ├── ...\n│   ...\n│\n├── server_test                         ・・・(3)　サーバ側テスト資産\n│   ├── app.spec.ts\n│   ├── test.server.conf.ts\n│   ├── test.server.ts\n│   └── tsconfig.server_test.json\n├── src\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts      ・・・(4)　クライアント側テスト資産\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       ├── message.service.spec.ts ・・・(4)　クライアント側テスト資産\n│   │       └── message.service.ts\n│   ...\n│\n├── package-lock.json\n├── package.json\n├── protractor.conf.js                   ・・・(5)　E2Eテスト設定ファイル\n├── proxy.conf.json\n├── karma.conf.js\n├── tsconfig.json\n├── tslint.json\n└── README.md\n</pre></div>\n</div>\n\n<h4>\n<span id=\"各資産について\" class=\"fragment\"></span><a href=\"#%E5%90%84%E8%B3%87%E7%94%A3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>各資産について</h4>\n\n<h5>\n<span id=\"1-dist\" class=\"fragment\"></span><a href=\"#1-dist\"><i class=\"fa fa-link\"></i></a>(1) dist</h5>\n\n<p>コンパイル資産出力先。</p>\n\n<h5>\n<span id=\"1-1-distserver_test\" class=\"fragment\"></span><a href=\"#1-1-distserver_test\"><i class=\"fa fa-link\"></i></a>(1-1) dist/server_test</h5>\n\n<p>コンパイルされたサーバ側テスト資産(JSファイル)の出力先。<br>\nデプロイを考慮して本資産(dist/server)とは別ディレクトリにしています。</p>\n\n<h5>\n<span id=\"2-server_test\" class=\"fragment\"></span><a href=\"#2-server_test\"><i class=\"fa fa-link\"></i></a>(2) server_test</h5>\n\n<p>サーバ側テスト資産のディレクトリ。<br>\nコンパイル用の設定ファイルとテスト用の設定ファイルもココに格納します。</p>\n\n<h5>\n<span id=\"3-e2e\" class=\"fragment\"></span><a href=\"#3-e2e\"><i class=\"fa fa-link\"></i></a>(3) e2e</h5>\n\n<p>E2Eテスト用資産のディレクトリ。</p>\n\n<h5>\n<span id=\"4-srcapp配下のspectsファイル\" class=\"fragment\"></span><a href=\"#4-srcapp%E9%85%8D%E4%B8%8B%E3%81%AEspects%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\"><i class=\"fa fa-link\"></i></a>(4) src/app配下のspec.tsファイル</h5>\n\n<p>フロント側テスト資産。<br>\nコンパイルやテストは<code>ng</code>コマンドで実施します。</p>\n\n<h5>\n<span id=\"5-protractorconfjs\" class=\"fragment\"></span><a href=\"#5-protractorconfjs\"><i class=\"fa fa-link\"></i></a>(5) protractor.conf.js</h5>\n\n<p>E2Eテスト設定ファイル。<br>\n今回はAngular CLIでプロジェクトが作成するデフォルトから少しだけ修正します。</p>\n\n<h2>\n<span id=\"構築手順\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E7%AF%89%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>構築手順</h2>\n\n<h3>\n<span id=\"1-テストに必要なライブラリをインストール\" class=\"fragment\"></span><a href=\"#1-%E3%83%86%E3%82%B9%E3%83%88%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>1. テストに必要なライブラリをインストール</h3>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install --save zone.js@0.8.12\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n</pre></div></div>\n\n<ul>\n<li>\n<a href=\"https://www.npmjs.com/package/zone.js\" rel=\"nofollow noopener\" target=\"_blank\"><code>zone.js@0.8.12</code></a>\n\n<ul>\n<li>クライアント側のテストで使用します。Angular CLIでプロジェクトを作成した時点でインストールされていますが、テスト実行時に<code>Failed: Cannot create property '__creationTrace__' on string '__zone_symbol__optimizedZoneEventTask'</code>のようなエラーが出ます。<a href=\"https://github.com/angular/zone.js/issues/832\" rel=\"nofollow noopener\" target=\"_blank\">GitHubのissues</a>によるとv0.8.12はエラーが出ないそうなので、v0.8.12を再インストールします。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://www.npmjs.com/package/supertest\" rel=\"nofollow noopener\" target=\"_blank\"><code>supertest</code></a>\n\n<ul>\n<li>サーバ側のテストで使用します。APIテストを簡単にしてくれます。</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"2-クライアント側を作成\" class=\"fragment\"></span><a href=\"#2-%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2. クライアント側を作成</h3>\n\n<p>コンポーネント(app.component.ts)とサービス(message.service.ts)に対するテストコードを作成します。<br>\nクライアント側のテスト実行には<code>ng test</code>コマンドを使うので、ビルド周りの設定は不要です。</p>\n\n<h4>\n<span id=\"srcappappcomponentspects\" class=\"fragment\"></span><a href=\"#srcappappcomponentspects\"><i class=\"fa fa-link\"></i></a>src/app/app.component.spec.ts</h4>\n\n<p>コンポーネントは画面描画についてテストします。<br>\nコンポーネントで使うサービスは、<code>TestBed</code>の<code>overrideComponent</code>メソッドを使ってモック化します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.spec.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"k\">async</span><span class=\"p\">,</span> <span class=\"nx\">ComponentFixture</span><span class=\"p\">,</span> <span class=\"nx\">TestBed</span><span class=\"p\">,</span> <span class=\"nx\">inject</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/forms'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.component'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'AppComponent'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// テスト対象のComponent</span>\n  <span class=\"kd\">let</span> <span class=\"na\">component</span><span class=\"p\">:</span> <span class=\"nx\">AppComponent</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// テスト対象のFixture</span>\n  <span class=\"kd\">let</span> <span class=\"na\">fixture</span><span class=\"p\">:</span> <span class=\"nx\">ComponentFixture</span><span class=\"o\">&lt;</span><span class=\"nx\">AppComponent</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// MessageServiceのモック</span>\n  <span class=\"kd\">class</span> <span class=\"nx\">MessageServiceMock</span> <span class=\"p\">{</span>\n    <span class=\"nx\">getAll</span><span class=\"p\">():</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span>  <span class=\"p\">{</span> <span class=\"na\">messages</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n      <span class=\"p\">]};</span>\n\n      <span class=\"k\">return</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">([</span><span class=\"nx\">response</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n      <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">],</span>\n      <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"nx\">AppComponent</span>\n      <span class=\"p\">],</span>\n    <span class=\"p\">})</span>\n<span class=\"err\">　　　　　　　　　</span><span class=\"c1\">// MessageServiceのモックを設定</span>\n    <span class=\"p\">.</span><span class=\"nx\">overrideComponent</span><span class=\"p\">(</span><span class=\"nx\">AppComponent</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">set</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span> <span class=\"na\">provide</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">,</span> <span class=\"na\">useClass</span><span class=\"p\">:</span> <span class=\"nx\">MessageServiceMock</span> <span class=\"p\">},</span>\n        <span class=\"p\">]</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n    <span class=\"p\">.</span><span class=\"nx\">compileComponents</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">fixture</span> <span class=\"o\">=</span> <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">createComponent</span><span class=\"p\">(</span><span class=\"nx\">AppComponent</span><span class=\"p\">);</span>\n    <span class=\"nx\">component</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">componentInstance</span><span class=\"p\">;</span>\n    <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">detectChanges</span><span class=\"p\">();</span>\n  <span class=\"p\">}));</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'オブジェクトが生成されるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">debugElement</span><span class=\"p\">.</span><span class=\"nx\">componentInstance</span><span class=\"p\">;</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">).</span><span class=\"nx\">toBeTruthy</span><span class=\"p\">();</span>\n  <span class=\"p\">}));</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージを３件保持しているか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">component</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">([</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n    <span class=\"p\">]);</span>\n  <span class=\"p\">}));</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'画面にメッセージが３件表示されているか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">el</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">debugElement</span><span class=\"p\">.</span><span class=\"nx\">nativeElement</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ1'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ2'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ3'</span><span class=\"p\">);</span>\n  <span class=\"p\">}));</span>\n<span class=\"p\">});</span>\n\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappmessagemessageservicespects一部抜粋\" class=\"fragment\"></span><a href=\"#srcappmessagemessageservicespects%E4%B8%80%E9%83%A8%E6%8A%9C%E7%B2%8B\"><i class=\"fa fa-link\"></i></a>src/app/message/message.service.spec.ts(一部抜粋)</h4>\n\n<p>サービスのテストです。<br>\nサーバとのやりとり(HTTP通信)については<code>MockBackend</code>を使ってモック化しています。<br>\nなお<code>Error</code>は別途モックを作らなければなりません。<br>\n全て載せると冗長なので<code>register</code>メソッドのテストは割愛しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.service.spec.ts(一部抜粋)</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">TestBed</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">,</span> <span class=\"nx\">inject</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">HttpModule</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">,</span> <span class=\"nx\">Http</span><span class=\"p\">,</span> <span class=\"nx\">Response</span><span class=\"p\">,</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MockConnection</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">RequestMethod</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message.service'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'MessageService'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　</span><span class=\"c1\">// HTTP通信エラー用のモック</span>\n  <span class=\"kd\">class</span> <span class=\"nx\">MockError</span> <span class=\"kd\">extends</span> <span class=\"nx\">Response</span> <span class=\"kr\">implements</span> <span class=\"nb\">Error</span> <span class=\"p\">{</span>\n    <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">;</span>\n    <span class=\"nl\">message</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n<span class=\"err\">　　　　</span><span class=\"c1\">// HTTP通信はMockBackendでモック化</span>\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n      <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">HttpModule</span><span class=\"p\">],</span>\n      <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MessageService</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"na\">provide</span><span class=\"p\">:</span> <span class=\"nx\">Http</span><span class=\"p\">,</span>\n        <span class=\"na\">useFactory</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nx\">backend</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nx\">Http</span><span class=\"p\">(</span><span class=\"nx\">backend</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">),</span>\n        <span class=\"na\">deps</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">]</span>\n      <span class=\"p\">},</span> <span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">]</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'オブジェクトが生成されるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">service</span><span class=\"p\">).</span><span class=\"nx\">toBeTruthy</span><span class=\"p\">();</span>\n  <span class=\"p\">})));</span>\n\n\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'getAll'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージが取得できるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// HTTP通信のモックで返す具体的な値の設定</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">body</span> <span class=\"o\">=</span>  <span class=\"p\">{</span> <span class=\"na\">messages</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n        <span class=\"p\">]};</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">ops</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">({</span>\n          <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n          <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">mockRespond</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">Response</span><span class=\"p\">(</span><span class=\"nx\">ops</span><span class=\"p\">));</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストの内容を検証</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">RequestMethod</span><span class=\"p\">.</span><span class=\"nx\">Get</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// レスポンスの内容を検証</span>\n      <span class=\"nx\">service</span><span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">().</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">([</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n        <span class=\"p\">]);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">})));</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'異常時にエラーハンドリングされるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// HTTP通信のモックで返す具体的な値の設定</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">body</span> <span class=\"o\">=</span>  <span class=\"p\">{</span>\n          <span class=\"na\">title</span> <span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"s1\">'エラー'</span>\n        <span class=\"p\">};</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">ops</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">({</span>\n          <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span>\n          <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">mockError</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">MockError</span><span class=\"p\">(</span><span class=\"nx\">ops</span><span class=\"p\">));</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストの内容を検証</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">RequestMethod</span><span class=\"p\">.</span><span class=\"nx\">Get</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// レスポンスの内容を検証</span>\n      <span class=\"nx\">service</span><span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">().</span><span class=\"nx\">subscribe</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">fail</span><span class=\"p\">(</span><span class=\"s1\">'エラーハンドリングされなかった。'</span><span class=\"p\">);</span>\n      <span class=\"p\">},</span> <span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span> <span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"s1\">'エラー'</span>\n        <span class=\"p\">});</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">})));</span>\n\n  <span class=\"p\">});</span>\n\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"3-サーバ側を作成\" class=\"fragment\"></span><a href=\"#3-%E3%82%B5%E3%83%BC%E3%83%90%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>3. サーバ側を作成</h3>\n\n<p>プロジェクトの直下にserver_testディレクトリを作ってテストコードを書いていきます。<br>\nどちらかというと結合テストよりで、１つ１つの資産に対してではなくapp.tsに対して、実際にDBに接続しながらAPIテストを行います。規模が小さい場合はコレで充分だと思います。<br>\nまたExpressのテストフレームワークは<a href=\"https://mochajs.org/\" rel=\"nofollow noopener\" target=\"_blank\">Mocha</a>が一般的ですが、クライアント側と統一したいので、今回は<a href=\"https://jasmine.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">Jasmine</a>を使うことにします。</p>\n\n<h4>\n<span id=\"server_testappspects一部抜粋\" class=\"fragment\"></span><a href=\"#server_testappspects%E4%B8%80%E9%83%A8%E6%8A%9C%E7%B2%8B\"><i class=\"fa fa-link\"></i></a>server_test/app.spec.ts(一部抜粋)</h4>\n\n<p>ポイントとしてはテスト実行前にMessageモデルを使ってDBを初期化していることです。<br>\nそれによりテストデータがテストメソッドごとに想定する形になるようにしています。<br>\n異常時のテストは、Messsageのfindメソッドでエラーが発生するようにJasmineの<code>spyOn</code>メソッドで処理を置き換えます。<br>\n全て載せると冗長なのでメッセージ登録のテストは割愛しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.spec.ts(一部抜粋)</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">supertest</span> <span class=\"k\">from</span> <span class=\"s1\">'supertest'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"nx\">app</span> <span class=\"k\">from</span> <span class=\"s1\">'../server/app'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../server/models/message'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">request</span> <span class=\"o\">=</span> <span class=\"nx\">supertest</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">endpoint</span> <span class=\"o\">=</span> <span class=\"s1\">'/api/messages'</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">messageAscending</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">,</span> <span class=\"nx\">m2</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&gt;</span> <span class=\"nx\">m2</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&lt;</span> <span class=\"nx\">m2</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"c1\">// テスト前にDBのmessagesを初期化する</span>\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">({},</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n  <span class=\"p\">});</span>\n\n\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'Get'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'レスポンスがjson形式でステータスコードが200か'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n      <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// 検証</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'application/json'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">);</span>\n        <span class=\"p\">}).</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージ一覧が取得できるか'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n      <span class=\"kd\">const</span> <span class=\"nx\">testData</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ１'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ２'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ３'</span> <span class=\"p\">},</span>\n      <span class=\"p\">];</span>\n<span class=\"err\">　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// 事前準備（テストデータを作成）</span>\n      <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">testData</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">erro</span> <span class=\"p\">,</span> <span class=\"nx\">doc</span> <span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n        <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n          <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// 検証</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">sortedMessages</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">sort</span><span class=\"p\">(</span><span class=\"nx\">messageAscending</span><span class=\"p\">);</span>\n\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ１'</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ２'</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ３'</span><span class=\"p\">);</span>\n          <span class=\"p\">})</span>\n          <span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">});</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'異常時にエラーハンドリングされるか'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n      <span class=\"c1\">// エラーとなるようにMessageのfindメソッドを置き換える</span>\n      <span class=\"nx\">spyOn</span><span class=\"p\">(</span><span class=\"nx\">Message</span><span class=\"p\">,</span> <span class=\"s1\">'find'</span><span class=\"p\">).</span><span class=\"nx\">and</span><span class=\"p\">.</span><span class=\"nx\">callFake</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">callback</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">'エラー'</span><span class=\"p\">),</span> <span class=\"kc\">null</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n<span class=\"err\">　　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n      <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n          <span class=\"c1\">// 検証</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'application/json'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">);</span>\n\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'エラー'</span><span class=\"p\">);</span>\n        <span class=\"p\">})</span>\n        <span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"4-単体テスト周りの環境を整備\" class=\"fragment\"></span><a href=\"#4-%E5%8D%98%E4%BD%93%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>4. 単体テスト周りの環境を整備</h3>\n\n<p>E2Eの説明に入る前に、いったん単体テスト周りの環境を整備します。</p>\n\n<h4>\n<span id=\"packagejson\" class=\"fragment\"></span><a href=\"#packagejson\"><i class=\"fa fa-link\"></i></a>package.json</h4>\n\n<p><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792#pakcagejson\" id=\"reference-fc6741a6eda3b7ffd9f1\">前回</a>作成したものをベースに単体テストのスクリプトを追加してください。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\"> </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-p test:*\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"test:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng test\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"test:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s build:server_test -p watch:server_test  boot:server_test\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"watch:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -w -p ./server_test/tsconfig.server_test.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"boot:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"nodemon ./dist/server_test/test.server.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>test</strong>でクライアント側とサーバ側のテストを実行します。</li>\n<li>\n<strong>test:client</strong>でクライアント側のテストを実行します。Angular CLIのngコマンドにお任せしています。</li>\n<li>\n<strong>watch:server_test</strong>でサーバ側テスト資産をウォッチして変更があればコンパイルするようにします。</li>\n<li>\n<strong>boot:server_test</strong>でコンパイルしたサーバ側テスト資産を起動します。nodeではなくnodemonを使うことで資産に更新があった場合でも即座に反映するようにしています。</li>\n<li>\n<strong>build:server_test</strong>でサーバ側テスト資産をコンパイルします。コンパイル時の設定は下で触れるserver_test/test.server.conf.tsを使います。</li>\n</ul>\n\n<h4>\n<span id=\"server_testtestserverts\" class=\"fragment\"></span><a href=\"#server_testtestserverts\"><i class=\"fa fa-link\"></i></a>server_test/test.server.ts</h4>\n\n<p>サーバ側テストの起動処理を書きます。<br>\nレポーターには<a href=\"https://www.npmjs.com/package/jasmine-spec-reporter\" rel=\"nofollow noopener\" target=\"_blank\">jasmine-spec-reporter</a>を使いましょう。このライブラリはAngular CLIで作ったプロジェクトにはデフォルトでインストール済みです。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">test.server.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">SpecReporter</span><span class=\"p\">,</span> <span class=\"nx\">DisplayProcessor</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'jasmine-spec-reporter'</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">Jasmine</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'jasmine'</span><span class=\"p\">);</span>\n<span class=\"k\">import</span> <span class=\"nx\">SuiteInfo</span> <span class=\"o\">=</span> <span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">SuiteInfo</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">config</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./test.server.conf'</span><span class=\"p\">;</span>\n\n\n<span class=\"kd\">class</span> <span class=\"nx\">CustomProcessor</span> <span class=\"kd\">extends</span> <span class=\"nx\">DisplayProcessor</span> <span class=\"p\">{</span>\n    <span class=\"kr\">public</span> <span class=\"nx\">displayJasmineStarted</span><span class=\"p\">(</span><span class=\"nx\">info</span><span class=\"p\">:</span> <span class=\"nx\">SuiteInfo</span><span class=\"p\">,</span> <span class=\"nx\">log</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">string</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s2\">`TypeScript </span><span class=\"p\">${</span><span class=\"nx\">log</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">runner</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Jasmine</span><span class=\"p\">();</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">loadConfig</span><span class=\"p\">(</span><span class=\"nx\">config</span><span class=\"p\">);</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">addReporter</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">SpecReporter</span><span class=\"p\">({</span>\n    <span class=\"na\">customProcessors</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">CustomProcessor</span><span class=\"p\">],</span>\n<span class=\"p\">}));</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">onComplete</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">passed</span><span class=\"p\">){</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nx\">passed</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Success'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"s1\">'Failed'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">execute</span><span class=\"p\">();</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"server_testtestserverconfts\" class=\"fragment\"></span><a href=\"#server_testtestserverconfts\"><i class=\"fa fa-link\"></i></a>server_test/test.server.conf.ts</h4>\n\n<p>サーバ側テスト起動時の設定です。<br>\n注意点として<code>spec_files</code>に指定する相対パスはプロジェクト直下が起点になります。そのため<code>__dirname</code>を使って指定してください。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">test.server.conf.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">spec_dir</span><span class=\"p\">:</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span>\n  <span class=\"na\">spec_files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">__dirname</span><span class=\"p\">}</span><span class=\"s2\">/*spec.js`</span>\n  <span class=\"p\">],</span>\n  <span class=\"s1\">'stopSpecOnExpectationFailure'</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"s1\">'random'</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n<span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"server_testtsconfigserver_testjson\" class=\"fragment\"></span><a href=\"#server_testtsconfigserver_testjson\"><i class=\"fa fa-link\"></i></a>server_test/tsconfig.server_test.json</h4>\n\n<p>サーバ側テスト資産をコンパイルする時の設定ファイルです。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">tsconfig.server_test.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"extends\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../tsconfig.json\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"preserveConstEnums\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"outDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"mapRoot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"module\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"commonjs\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"include\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"s2\">\"**/*.spec.ts\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"./test.server.ts\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"./test.server.conf.ts\"</span><span class=\"w\">\n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<p><code>outDir</code>が<code>../dist/server_test</code>ではなく<code>../dist</code>であることに注意してください。<br>\nテスト資産は<code>server</code>ディレクトリ配下の資産に依存しているため、<code>../dist/server_test</code>を指定するとコンパイルした時に下記のように出力されてしまいます。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">（悪い例）outDirに\"../dist/server_test\"を指定したときのコンパイル結果</span></div>\n<div class=\"highlight\"><pre>.\n└── dist\n    └── server_test\n        ├── server\n        └── server_test \n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">（良い例）outDirに\"../dist\"を指定したときのコンパイル結果</span></div>\n<div class=\"highlight\"><pre>.\n└── dist\n    ├── server\n    └── server_test \n</pre></div>\n</div>\n\n<h3>\n<span id=\"5-e2eテストを作成\" class=\"fragment\"></span><a href=\"#5-e2e%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>5. E2Eテストを作成</h3>\n\n<p>単体テストを作成したので次はE2Eテストを作りましょう。<br>\nAngular CLIで作成したプロジェクトにデフォルトで用意されている<a href=\"http://www.protractortest.org/#/\" rel=\"nofollow noopener\" target=\"_blank\">Protractor</a>を使ったテストコードを作成します。</p>\n\n<h4>\n<span id=\"e2eappe2e-spects\" class=\"fragment\"></span><a href=\"#e2eappe2e-spects\"><i class=\"fa fa-link\"></i></a>e2e/app.e2e-spec.ts</h4>\n\n<p>基本的にelementメソッドで要素を取得して、sendKeysメソッドやclickメソッドで操作を行います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.e2e-spec.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.po'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">browser</span><span class=\"p\">,</span> <span class=\"nx\">element</span><span class=\"p\">,</span> <span class=\"nx\">by</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'protractor'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'E2Eテスト'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"na\">page</span><span class=\"p\">:</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'画面タイトルが正しいか'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">navigateTo</span><span class=\"p\">();</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">getParagraphText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'メッセージ一覧'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージが登録できるか'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">navigateTo</span><span class=\"p\">();</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">newMessage</span> <span class=\"o\">=</span> <span class=\"s2\">`サンプルメッセージ </span><span class=\"p\">${</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">toString</span><span class=\"p\">()}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n    <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessage'</span><span class=\"p\">)).</span><span class=\"nx\">sendKeys</span><span class=\"p\">(</span><span class=\"nx\">newMessage</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessageButton'</span><span class=\"p\">)).</span><span class=\"nx\">click</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// 登録後メッセージ入力項目が初期化されているか</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessage'</span><span class=\"p\">)).</span><span class=\"nx\">getText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 登録後一覧に登録したメッセージが含まれているか</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'messageList'</span><span class=\"p\">)).</span><span class=\"nx\">all</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">tagName</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">));</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">last</span><span class=\"p\">().</span><span class=\"nx\">getText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">newMessage</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"6-e2eテスト周りの環境を整備\" class=\"fragment\"></span><a href=\"#6-e2e%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>6. E2Eテスト周りの環境を整備</h3>\n\n<h4>\n<span id=\"packagejson-1\" class=\"fragment\"></span><a href=\"#packagejson-1\"><i class=\"fa fa-link\"></i></a>package.json</h4>\n\n<p>Angular CILプロジェクトデフォルトの\"e2e\"コマンドは削除して、スクリプトに下記を追加してください。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\"> </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"e2e\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s  webdriver:update -p webdriver:start protractor\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"webdriver:update\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"webdriver-manager update\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"webdriver:start\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"webdriver-manager start\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"protractor\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"protractor protractor.conf.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>e2e</strong>でE2Eテストを実行します。Angular CILプロジェクトデフォルトの<code>e2e</code>コマンド(= <code>ng e2e</code>コマンド)は使いません。<code>ng　e2e</code>はクライアント資産だけコンパイルして起動する処理が入っているからです。今回はビルドしたアプリ(クライアントとサーバが１つにまとまったアプリ)に対してテストします。</li>\n<li>\n<strong>webdriver:update</strong>でE2Eテストに必要なWebDriverをインストールまたは更新します。</li>\n<li>\n<strong>webdriver:start</strong>でWebDriverを起動します。Protractorのテストは事前にWebDriverを起動しておく必要があります。</li>\n<li>\n<strong>protractor</strong>でE2Eテストを実行します。起動時の設定は下で触れるprotractor.conf.jsを使います。</li>\n</ul>\n\n<h4>\n<span id=\"protractorconfjs\" class=\"fragment\"></span><a href=\"#protractorconfjs\"><i class=\"fa fa-link\"></i></a>protractor.conf.js</h4>\n\n<p>デフォルトでbaseUrlのポートは4200になっていますが、今回はビルドしたアプリに対してテストするので3000を指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">protractor.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"p\">...</span>\n  <span class=\"na\">baseUrl</span><span class=\"p\">:</span> <span class=\"s1\">'http://localhost:3000/'</span><span class=\"p\">,</span>\n  <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"7-試してみる\" class=\"fragment\"></span><a href=\"#7-%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>7. 試してみる</h3>\n\n<h4>\n<span id=\"単体テストを実行してみる\" class=\"fragment\"></span><a href=\"#%E5%8D%98%E4%BD%93%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>単体テストを実行してみる</h4>\n\n<ul>\n<li>\n<p>MongoDBをローカルで立ち上げる</p>\n\n<ul>\n<li>具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。</li>\n</ul>\n</li>\n<li><p>プロジェクト直下で<code>npm test</code>コマンドを実行するとテストが実行されます。クライアント側のテスト結果はブラウザに、サーバ側はターミナル（またはコンソール）に表示されます。資産はウォッチしているので、テストコードを修正すると、コンパイルされ再度テストが実行されるでしょう。</p></li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" alt=\"10_単体テスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png\"></a></p>\n\n<h4>\n<span id=\"e2eテストを実行してみる\" class=\"fragment\"></span><a href=\"#e2e%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>E2Eテストを実行してみる</h4>\n\n<ul>\n<li>\n<p>MongoDBをローカルで立ち上げる</p>\n\n<ul>\n<li>これも単体テストと同じでDBを事前に起動しておいてください。</li>\n</ul>\n</li>\n<li>\n<p>ビルドしたアプリを起動する</p>\n\n<ul>\n<li>プロジェクト直下で<code>npm run buildRun</code>を実行し、ビルド資産を起動します。</li>\n</ul>\n</li>\n<li>\n<p><code>npm run e2e</code>する</p>\n\n<ul>\n<li>別ターミナル（またはコマンドプロンプト）を開き、プロジェクト直下で<code>npm run e2e</code>コマンドを実行します。するとブラウザが立ち上がりテストが実行されます。\n<a href=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" alt=\"20_E2Eテスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png\"></a>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h2>\n\n<p>今回はMEANスタックアプリの単体テスト、E2Eテストについて紹介しました。<br>\nこれでビルドとテストができるようになったので、次回「その3. Dockerデプロイ編」では、Dockerでアプリを起動する方法とDockerでアプリのイメージを作ってデプロイする方法ついて紹介します。</p>\n","body":"## やりたいこと\n* Angular CLI使って、MEANスタック(**M**ongoDB + **E**xpress + **A**ngular + **N**odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。\n* フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。\n* Dockerを使ってアプリを簡単に配布したい。\n\nこれらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。\n\n* [その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)\n* その２. テスト編　⇦　今回はココ\n* その３. Dockerビルド編\n\n\n## その２. テスト編\n[その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)では、Angular CLIで作成したプロジェクトをベースに、\nMongoDBに登録しているメッセージを画面に一覧で表示するアプリを作成しました。\n今回は、クライアント側とサーバ側の[Jasmine](https://jasmine.github.io/)を使った単体テスト、[Protractor](http://www.protractortest.org/#/)を使ったE2Eテスト、それらを実行するnpm scriptsを作成します。\n最終的には下記のように`npm test`コマンドで単体テストが実行できるようになります。\n\n![10_単体テスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png)\n\nまたE2Eテストは`npm run e2e`コマンドで実施できるようになります。\n![20_E2Eテスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png)\n\n\n### プロジェクト構成\n今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。\n[その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)で作成したものをベースにテスト用の資産を追加します。詳細は[リポジトリ](https://github.com/Takumon/angular4-express4-typescritp2/tree/test)を参照してください。\n\n```:プロジェクト構成（完成イメージ）\n.\n├── dist                              ・・・(1) コンパイル資産出力先\n│   ├── server\n│   │   ├── ...\n│   │   ...\n│   │ \n│   └── server_test                      ・・・\u001c(1-1)　コンパイルされたサーバ側テスト資産\n│       ├── app.spec.js\n│       ├── app.spec.js.map\n│       ├── test.server.conf.js\n│       ├── test.server.conf.js.map\n│       ├── test.server.js\n│       └── test.server.js.map\n├── e2e                                ・・・\u001c(2)　E2Eテスト資産\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── server\n│   ├── ...\n│   ...\n│\n├── server_test                         ・・・\u001c(3)　サーバ側テスト資産\n│   ├── app.spec.ts\n│   ├── test.server.conf.ts\n│   ├── test.server.ts\n│   └── tsconfig.server_test.json\n├── src\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts      ・・・\u001c(4)　クライアント側テスト資産\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       ├── message.service.spec.ts ・・・\u001c(4)　クライアント側テスト資産\n│   │       └── message.service.ts\n│   ...\n│\n├── package-lock.json\n├── package.json\n├── protractor.conf.js                   ・・・\u001c(5)　E2Eテスト設定ファイル\n├── proxy.conf.json\n├── karma.conf.js\n├── tsconfig.json\n├── tslint.json\n└── README.md\n```\n#### 各資産について\n##### (1) dist\nコンパイル資産出力先。\n\n##### (1-1) dist/server_test\nコンパイルされたサーバ側テスト資産(JSファイル)の出力先。\nデプロイを考慮して本資産(dist/server)とは別ディレクトリにしています。\n\n##### (2) server_test\nサーバ側テスト資産のディレクトリ。\nコンパイル用の設定ファイルとテスト用の設定ファイルもココに格納します。\n\n##### (3) e2e\nE2Eテスト用資産のディレクトリ。\n\n##### (4) src/app配下のspec.tsファイル\nフロント側テスト資産。\nコンパイルやテストは`ng`コマンドで実施します。\n\n##### (5) protractor.conf.js\nE2Eテスト設定ファイル。\n今回はAngular CLIでプロジェクトが作成するデフォルトから少しだけ修正します。\n\n\n\n## 構築手順\n\n### 1. テストに必要なライブラリをインストール\n\n```\n$ npm install --save zone.js@0.8.12\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n```\n\n* [`zone.js@0.8.12`](https://www.npmjs.com/package/zone.js)\n    * クライアント側のテストで使用します。Angular CLIでプロジェクトを作成した時点でインストールされていますが、テスト実行時に`Failed: Cannot create property '__creationTrace__' on string '__zone_symbol__optimizedZoneEventTask'`のようなエラーが出ます。[GitHubのissues](https://github.com/angular/zone.js/issues/832)によるとv0.8.12はエラーが出ないそうなので、v0.8.12を再インストールします。\n* [`supertest`](https://www.npmjs.com/package/supertest)\n    * サーバ側のテストで使用します。APIテストを簡単にしてくれます。\n\n### 2. クライアント側を作成\nコンポーネント(app.component.ts)とサービス(message.service.ts)に対するテストコードを作成します。\nクライアント側のテスト実行には`ng test`コマンドを使うので、ビルド周りの設定は不要です。\n\n#### src/app/app.component.spec.ts\nコンポーネントは画面描画についてテストします。\nコンポーネントで使うサービスは、`TestBed`の`overrideComponent`メソッドを使ってモック化します。\n\n\n```js:app.component.spec.ts\nimport { async, ComponentFixture, TestBed, inject } from '@angular/core/testing';\nimport { FormsModule } from '@angular/forms';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/Rx';\n\nimport { AppComponent } from './app.component';\nimport { MessageService } from './message/message.service';\n\ndescribe('AppComponent', () => {\n  // テスト対象のComponent\n  let component: AppComponent;\n\n  // テスト対象のFixture\n  let fixture: ComponentFixture<AppComponent>;\n\n  // MessageServiceのモック\n  class MessageServiceMock {\n    getAll(): Observable<any> {\n      const response =  { messages : [\n        { message : 'テスト用メッセージ1' },\n        { message : 'テスト用メッセージ2' },\n        { message : 'テスト用メッセージ3' }\n      ]};\n\n      return Observable.from([response]);\n    }\n  }\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [ FormsModule ],\n      declarations: [\n        AppComponent\n      ],\n    })\n　　　　　　　　　// MessageServiceのモックを設定\n    .overrideComponent(AppComponent, {\n      set: {\n        providers: [\n          { provide: MessageService, useClass: MessageServiceMock },\n        ]\n      }\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(AppComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  }));\n\n  it('オブジェクトが生成されるか', async(() => {\n    const app = fixture.debugElement.componentInstance;\n    expect(app).toBeTruthy();\n  }));\n\n\n  it('メッセージを３件保持しているか', async(() => {\n    expect(component.messages).toEqual([\n        { message : 'テスト用メッセージ1' },\n        { message : 'テスト用メッセージ2' },\n        { message : 'テスト用メッセージ3' }\n    ]);\n  }));\n\n\n  it('画面にメッセージが３件表示されているか', async(() => {\n\n    const el = fixture.debugElement.nativeElement;\n\n    expect(el.querySelectorAll('li').length).toEqual(3);\n    expect(el.querySelectorAll('li')[0].textContent).toContain('テスト用メッセージ1');\n    expect(el.querySelectorAll('li')[1].textContent).toContain('テスト用メッセージ2');\n    expect(el.querySelectorAll('li')[2].textContent).toContain('テスト用メッセージ3');\n  }));\n});\n\n```\n\n\n#### src/app/message/message.service.spec.ts(一部抜粋)\nサービスのテストです。\nサーバとのやりとり(HTTP通信)については`MockBackend`を使ってモック化しています。\nなお`Error`は別途モックを作らなければなりません。\n全て載せると冗長なので`register`メソッドのテストは割愛しています。\n\n```js:message.service.spec.ts(一部抜粋)\nimport { TestBed, async, inject } from '@angular/core/testing';\nimport {HttpModule, BaseRequestOptions, Http, Response, ResponseOptions} from '@angular/http';\nimport {MockBackend, MockConnection} from '@angular/http/testing';\nimport { RequestMethod } from '@angular/http';\n\nimport { MessageService } from './message.service';\n\n\ndescribe('MessageService', () => {\n　　　　// HTTP通信エラー用のモック\n  class MockError extends Response implements Error {\n    name: any;\n    message: any;\n  }\n\n　　　　// HTTP通信はMockBackendでモック化\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpModule],\n      providers: [MessageService, {\n        provide: Http,\n        useFactory: (backend, options) => new Http(backend, options),\n        deps: [MockBackend, BaseRequestOptions]\n      }, MockBackend, BaseRequestOptions]\n    });\n  });\n\n  it('オブジェクトが生成されるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n    expect(service).toBeTruthy();\n  })));\n\n\n  describe('getAll', () => {\n\n    it('メッセージが取得できるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n　　　　　　　　　　　　// HTTP通信のモックで返す具体的な値の設定\n      backend.connections.subscribe((conn: MockConnection) => {\n        const body =  { messages : [\n          { message : 'テスト用メッセージ1' },\n          { message : 'テスト用メッセージ2' },\n          { message : 'テスト用メッセージ3' }\n        ]};\n\n        const ops = new ResponseOptions({\n          status: 200,\n          body: JSON.stringify(body)\n        });\n\n        conn.mockRespond(new Response(ops));\n      });\n\n　　　　　　　　　　　　// リクエストの内容を検証\n      backend.connections.subscribe((conn: MockConnection) => {\n        expect(conn.request.url).toEqual('/api/messages');\n        expect(conn.request.method).toEqual(RequestMethod.Get);\n      });\n\n　　　　　　　　　　　　// レスポンスの内容を検証\n      service.getAll().subscribe((res) => {\n        expect(res.messages.length).toEqual(3);\n        expect(res.messages).toEqual([\n          { message : 'テスト用メッセージ1' },\n          { message : 'テスト用メッセージ2' },\n          { message : 'テスト用メッセージ3' }\n        ]);\n      });\n    })));\n\n\n    it('異常時にエラーハンドリングされるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n　　　　　　　　　　　　// HTTP通信のモックで返す具体的な値の設定\n      backend.connections.subscribe((conn: MockConnection) => {\n        const body =  {\n          title : 'エラーが発生しました。',\n          error: 'エラー'\n        };\n\n        const ops = new ResponseOptions({\n          status: 500,\n          body: JSON.stringify(body)\n        });\n\n        conn.mockError(new MockError(ops));\n      });\n\n　　　　　　　　　　　　// リクエストの内容を検証\n      backend.connections.subscribe((conn: MockConnection) => {\n        expect(conn.request.url).toEqual('/api/messages');\n        expect(conn.request.method).toEqual(RequestMethod.Get);\n      });\n\n　　　　　　　　　　　　// レスポンスの内容を検証\n      service.getAll().subscribe(() => {\n        fail('エラーハンドリングされなかった。');\n      }, res => {\n        expect(res).toEqual({\n          title : 'エラーが発生しました。',\n          error: 'エラー'\n        });\n      });\n    })));\n\n  });\n\n\n});\n```\n\n\n\n### 3. サーバ側を作成\nプロジェクトの直下にserver_testディレクトリを作ってテストコードを書いていきます。\nどちらかというと結合テストよりで、１つ１つの資産に対してではなくapp.tsに対して、実際にDBに接続しながらAPIテストを行います。規模が小さい場合はコレで充分だと思います。\nまたExpressのテストフレームワークは[Mocha](https://mochajs.org/)が一般的ですが、クライアント側と統一したいので、今回は[Jasmine](https://jasmine.github.io/)を使うことにします。\n\n#### server_test/app.spec.ts(一部抜粋)\nポイントとしてはテスト実行前にMessageモデルを使ってDBを初期化していることです。\nそれによりテストデータがテストメソッドごとに想定する形になるようにしています。\n異常時のテストは、Messsageのfindメソッドでエラーが発生するようにJasmineの`spyOn`メソッドで処理を置き換えます。\n全て載せると冗長なのでメッセージ登録のテストは割愛しています。\n\n```js:app.spec.ts(一部抜粋)\nimport * as supertest from 'supertest';\n\nimport app from '../server/app';\nimport { Message } from '../server/models/message';\n\n\ndescribe('/api/messages', () => {\n  const request = supertest(app);\n  const endpoint = '/api/messages';\n\n  const messageAscending = (m1, m2) => {\n    if (m1.message > m2.message) {\n      return 1;\n    }\n\n    if (m1.message < m2.message) {\n      return -1;\n    }\n\n    return 0;\n  };\n\n  // テスト前にDBのmessagesを初期化する\n  beforeEach(() => {\n    Message.remove({}, () => {});\n  });\n\n\n  describe('Get', () => {\n\n    it('レスポンスがjson形式でステータスコードが200か', (done) => {\n\n　　　　　　　　　　　　　// リクエストを投げる\n      request.get(endpoint)\n        .expect((res) => {\n\n　　　　　　　　　　　　　　　　　　　　// 検証\n          expect(res.type).toEqual('application/json');\n          expect(res.statusCode).toEqual(200);\n        }).end(done);\n    });\n\n\n    it('メッセージ一覧が取得できるか', (done) => {\n\n      const testData = [\n        { message: 'テスト用メッセージ１' },\n        { message: 'テスト用メッセージ２' },\n        { message: 'テスト用メッセージ３' },\n      ];\n　　　　　　　　　　　　\n　　　　　　　　　　　　// 事前準備（テストデータを作成）\n      Message.create(testData, (erro , doc ) => {\n\n　　　　　　　　　　　　　　　　　// リクエストを投げる\n        request.get(endpoint)\n          .expect((res) => {\n　　　　　　　　　　　　　　　　　　　　　　　　\n　　　　　　　　　　　　　　　　　　　　　　　　// 検証\n            const sortedMessages = res.body.messages.sort(messageAscending);\n\n            expect(sortedMessages.length).toEqual(3);\n            expect(sortedMessages[0].message).toEqual('テスト用メッセージ１');\n            expect(sortedMessages[1].message).toEqual('テスト用メッセージ２');\n            expect(sortedMessages[2].message).toEqual('テスト用メッセージ３');\n          })\n          .end(done);\n      });\n    });\n\n\n    it('異常時にエラーハンドリングされるか', (done) => {\n\n      // エラーとなるようにMessageのfindメソッドを置き換える\n      spyOn(Message, 'find').and.callFake(function(callback) {\n        callback(new Error('エラー'), null);\n      });\n　　　　　　　　　　　　　\n　　　　　　　　　　　　// リクエストを投げる\n      request.get(endpoint)\n        .expect((res) => {\n\n          // 検証\n          expect(res.type).toEqual('application/json');\n          expect(res.statusCode).toEqual(500);\n\n          expect(res.body.title).toEqual('エラーが発生しました。');\n          expect(res.body.error).toEqual('エラー');\n        })\n        .end(done);\n    });\n\n  });\n});\n```\n\n\n\n### 4. 単体テスト周りの環境を整備\nE2Eの説明に入る前に、いったん単体テスト周りの環境を整備します。\n\n\n#### package.json\n[前回](http://qiita.com/Takumon/items/572438809384e2e11792#pakcagejson)作成したものをベースに単体テストのスクリプトを追加してください。\n\n```json:package.json\n \"scripts\": {\n    ...\n    \"test\": \"run-p test:*\",\n    \"test:client\": \"ng test\",\n    \"test:server\": \"npm-run-all -s build:server_test -p watch:server_test  boot:server_test\",\n    \"watch:server_test\": \"tsc -w -p ./server_test/tsconfig.server_test.json\",\n    \"boot:server_test\": \"nodemon ./dist/server_test/test.server.js\",\n    \"build:server_test\": \"tsc -p ./server/tsconfig.server.json\",\n    ...\n  },\n```\n\n\n* **test**でクライアント側とサーバ側のテストを実行します。\n* **test:client**でクライアント側のテストを実行します。Angular CLIのngコマンドにお任せしています。\n* **watch:server_test**でサーバ側テスト資産をウォッチして変更があればコンパイルするようにします。\n* **boot:server_test**でコンパイルしたサーバ側テスト資産を起動します。nodeではなくnodemonを使うことで資産に更新があった場合でも即座に反映するようにしています。\n* **build:server_test**でサーバ側テスト資産をコンパイルします。コンパイル時の設定は下で触れるserver_test/test.server.conf.tsを使います。\n\n#### server_test/test.server.ts\nサーバ側テストの起動処理を書きます。\nレポーターには[jasmine-spec-reporter](https://www.npmjs.com/package/jasmine-spec-reporter)を使いましょう。このライブラリはAngular CLIで作ったプロジェクトにはデフォルトでインストール済みです。\n\n```js:test.server.ts\nimport { SpecReporter, DisplayProcessor } from 'jasmine-spec-reporter';\nconst Jasmine = require('jasmine');\nimport SuiteInfo = jasmine.SuiteInfo;\n\nimport { config } from './test.server.conf';\n\n\nclass CustomProcessor extends DisplayProcessor {\n    public displayJasmineStarted(info: SuiteInfo, log: string): string {\n        return `TypeScript ${log}`;\n    }\n}\n\nconst runner = new Jasmine();\nrunner.loadConfig(config);\nrunner.addReporter(new SpecReporter({\n    customProcessors: [CustomProcessor],\n}));\nrunner.onComplete(function(passed){\n  if ( passed ) {\n    console.log('Success');\n  } else {\n    console.error('Failed');\n  }\n});\n\nrunner.execute();\n```\n\n\n#### server_test/test.server.conf.ts\nサーバ側テスト起動時の設定です。\n注意点として`spec_files`に指定する相対パスはプロジェクト直下が起点になります。そのため`__dirname`を使って指定してください。\n\n```js:test.server.conf.ts\nexport const config = {\n  spec_dir: '.',\n  spec_files: [\n    `${__dirname}/*spec.js`\n  ],\n  'stopSpecOnExpectationFailure': false,\n  'random': false\n};\n```\n\n\n\n#### server_test/tsconfig.server_test.json\n\nサーバ側テスト資産をコンパイルする時の設定ファイルです。\n\n```json:tsconfig.server_test.json\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"preserveConstEnums\": true,\n    \"outDir\": \"../dist\",\n    \"mapRoot\": \"../dist\",\n    \"module\": \"commonjs\"\n  } ,\n  \"include\": [\n    \"**/*.spec.ts\",\n    \"./test.server.ts\",\n    \"./test.server.conf.ts\"\n  ]\n}\n```\n\n`outDir`が`../dist/server_test`ではなく`../dist`であることに注意してください。\nテスト資産は`server`ディレクトリ配下の資産に依存しているため、`../dist/server_test`を指定するとコンパイルした時に下記のように出力されてしまいます。\n\n```:\u001c（悪い例）outDirに\"../dist/server_test\"を指定したときのコンパイル結果\n.\n└── dist\n    └── server_test\n        ├── server\n        └── server_test \n```\n```:\u001c（良い例）outDirに\"../dist\"を指定したときのコンパイル結果\n.\n└── dist\n    ├── server\n    └── server_test \n```\n\n\n### 5. E2Eテストを作成\n単体テストを作成したので次はE2Eテストを作りましょう。\nAngular CLIで作成したプロジェクトにデフォルトで用意されている[Protractor](http://www.protractortest.org/#/)を使ったテストコードを作成します。\n\n#### e2e/app.e2e-spec.ts\n基本的にelementメソッドで要素を取得して、sendKeysメソッドやclickメソッドで操作を行います。\n\n```js:app.e2e-spec.ts\nimport { Angular4Express4Typescritp2Page } from './app.po';\nimport { browser, element, by } from 'protractor';\n\n\ndescribe('E2Eテスト', () => {\n  let page: Angular4Express4Typescritp2Page;\n\n  beforeEach(() => {\n    page = new Angular4Express4Typescritp2Page();\n  });\n\n  it('画面タイトルが正しいか', () => {\n    page.navigateTo();\n    expect(page.getParagraphText()).toEqual('メッセージ一覧');\n  });\n\n\n  it('メッセージが登録できるか', () => {\n    page.navigateTo();\n    const newMessage = `サンプルメッセージ ${new Date().toString()}`;\n    element(by.id('registerMessage')).sendKeys(newMessage);\n\n    element(by.id('registerMessageButton')).click();\n\n    // 登録後メッセージ入力項目が初期化されているか\n    expect(element(by.id('registerMessage')).getText()).toEqual('');\n\n    // 登録後一覧に登録したメッセージが含まれているか\n    const messages = element(by.id('messageList')).all(by.tagName('li'));\n    expect(messages.last().getText()).toEqual(newMessage);\n  });\n\n});\n```\n\n### 6. E2Eテスト周りの環境を整備\n\n#### package.json\nAngular CILプロジェクトデフォルトの\"e2e\"コマンドは削除して、スクリプトに下記を追加してください。\n\n```json:package.json\n \"scripts\": {\n    ...\n    \"e2e\": \"npm-run-all -s  webdriver:update -p webdriver:start protractor\",\n    \"webdriver:update\": \"webdriver-manager update\",\n    \"webdriver:start\": \"webdriver-manager start\",\n    \"protractor\": \"protractor protractor.conf.js\",\n    ...\n  },\n```\n\n* **e2e**でE2Eテストを実行します。Angular CILプロジェクトデフォルトの`e2e`コマンド(= `ng e2e`コマンド)は使いません。`ng　e2e`はクライアント資産だけコンパイルして起動する処理が入っているからです。今回はビルドしたアプリ(クライアントとサーバが１つにまとまったアプリ)に対してテストします。\n* **webdriver:update**でE2Eテストに必要なWebDriverをインストールまたは更新します。\n* **webdriver:start**でWebDriverを起動します。Protractorのテストは事前にWebDriverを起動しておく必要があります。\n* **protractor**でE2Eテストを実行します。起動時の設定は下で触れるprotractor.conf.jsを使います。\n\n#### protractor.conf.js\nデフォルトでbaseUrlのポートは4200になっていますが、今回はビルドしたアプリに対してテストするので3000を指定します。\n\n```js:protractor.conf.js\nexports.config = {\n  ...\n  baseUrl: 'http://localhost:3000/',\n  ...\n}\n```\n\n### 7. 試してみる\n#### 単体テストを実行してみる\n* MongoDBをローカルで立ち上げる\n    * 具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。\n\n* プロジェクト直下で`npm test`コマンドを実行するとテストが実行されます。クライアント側のテスト結果はブラウザに、サーバ側はターミナル（またはコンソール）に表示されます。資産はウォッチしているので、テストコードを修正すると、コンパイルされ再度テストが実行されるでしょう。\n\n![10_単体テスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png)\n\n\n\n#### E2Eテストを実行してみる\n* MongoDBをローカルで立ち上げる\n    * これも単体テストと同じでDBを事前に起動しておいてください。\n \n* ビルドしたアプリを起動する\n    * プロジェクト直下で`npm run buildRun`を実行し、ビルド資産を起動します。\n\n* `npm run e2e`する\n    * 別ターミナル（またはコマンドプロンプト）を開き、プロジェクト直下で`npm run e2e`コマンドを実行します。するとブラウザが立ち上がりテストが実行されます。\n![20_E2Eテスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png)\n\n\n## 終わりに\n今回はMEANスタックアプリの単体テスト、E2Eテストについて紹介しました。\nこれでビルドとテストができるようになったので、次回「その3. Dockerデプロイ編」では、Dockerでアプリを起動する方法とDockerでアプリのイメージを作ってデプロイする方法ついて紹介します。\n\n","comments_count":0,"created_at":"2017-07-24T07:12:10+09:00","likes_count":9,"reactions_count":0},"matches":4,"weight":250,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"TypeScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":62.5,"totalWeight":58,"threshold":12.5,"isRelated":true},{"node":{"fields":{"slug":"/bb5bc899-9dfd-5e67-bc4c-bc422ba8d176/","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その１. ビルド編","date":"2017-07-19T02:06:59+09:00","excerpt":"やりたいことAngular CLI使って、MEANスタック(MongoDB + Express + Angular + NodeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。フロント側とサーバ側の両方をweb...","tags":["JavaScript","MongoDB","Express","TypeScript","AngularJS","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"bb5bc899-9dfd-5e67-bc4c-bc422ba8d176","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その１. ビルド編","rendered_body":"\n<h2>\n<span id=\"やりたいこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたいこと</h2>\n\n<ul>\n<li>Angular CLI使って、MEANスタック(<strong>M</strong>ongoDB + <strong>E</strong>xpress + <strong>A</strong>ngular + <strong>N</strong>odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。</li>\n<li>フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。</li>\n<li>Dockerを使ってアプリを簡単に配布したい。</li>\n</ul>\n\n<p>これらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。</p>\n\n<ul>\n<li>その１. ビルド編　⇦　今回はココ</li>\n<li><a href=\"http://qiita.com/Takumon/items/b4211fcabad740baa551\" id=\"reference-b35cd1a7f8ba1daaecd8\">その２. テスト編</a></li>\n<li>その３. Dockerビルド編</li>\n</ul>\n\n<h2>\n<span id=\"その１-ビルド編\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%81%AE%EF%BC%91-%E3%83%93%E3%83%AB%E3%83%89%E7%B7%A8\"><i class=\"fa fa-link\"></i></a>その１. ビルド編</h2>\n\n<p>Angular CLIで作成したプロジェクトをベースに、<br>\nMongoDBに登録したメッセージを画面に一覧で表示するアプリを作成していきます。<br>\nメッセージを登録すると一覧に追加されていくようなアプリです。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" alt=\"アプリ概要.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png\"></a></p>\n\n<h3>\n<span id=\"プロジェクト構成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクト構成</h3>\n\n<p>今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。<br>\n<a href=\"https://github.com/Takumon/angular4-express4-typescritp2/tree/build\" rel=\"nofollow noopener\" target=\"_blank\">リポジトリ</a>も用意しているので詳細はそちらを参照してください。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">プロジェクトの構成（完成イメージ）</span></div>\n<div class=\"highlight\"><pre>.\n├── dist                ・・・(1) コンパイル資産出力先\n│   └── server　　　　　　　　      ・・・(1-1)　コンパイルされたサーバ資産\n│       ├── app.js\n│       ├── app.js.map\n│       ├── bin\n│       │   ├── www.js\n│       │   └── www.js.map\n│       ├── config.js\n│       ├── config.js.map\n│       ├── models\n│       │   ├── message.js\n│       │   └── message.js.map\n│       ├── public      ・・・(1-2) コンパイルされたクライアント資産\n│       │   ├── favicon.ico\n│       │   ├── index.html\n│       │   ├── inline.bundle.js\n│       │   ├── inline.bundle.js.map\n│       │   ├── main.bundle.js\n│       │   ├── main.bundle.js.map\n│       │   ├── polyfills.bundle.js\n│       │   ├── polyfills.bundle.js.map\n│       │   ├── styles.bundle.js\n│       │   ├── styles.bundle.js.map\n│       │   ├── vendor.bundle.js\n│       │   └── vendor.bundle.js.map\n│       └── routes\n│           ├── message.js\n│           └── message.js.map\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── e2e\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── server               ・・・(2)　サーバ資産\n│   ├── app.ts\n│   ├── bin\n│   │   └── www.ts\n│   ├── config.ts\n│   ├── models\n│   │   └── message.ts\n│   ├── routes\n│   │   └── message.ts\n│   └── tsconfig.server.json\n├── src                   ・・・(3)　クライアント資産\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       └── message.service.ts\n│   ├── assets\n│   ├── environments\n│   │   ├── environment.prod.ts\n│   │   └── environment.ts\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── main.ts\n│   ├── polyfills.ts\n│   ├── styles.css\n│   ├── test.ts\n│   ├── tsconfig.app.json\n│   ├── tsconfig.spec.json\n│   └── typings.d.ts\n├── karma.conf.js\n├── package-lock.json\n├── package.json\n├── protractor.conf.js\n├── proxy.conf.json    ・・・(4) \n├── tsconfig.json\n├── tslint.json\n└── README.md\n</pre></div>\n</div>\n\n<h4>\n<span id=\"各資産について\" class=\"fragment\"></span><a href=\"#%E5%90%84%E8%B3%87%E7%94%A3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>各資産について</h4>\n\n<h5>\n<span id=\"1-dist\" class=\"fragment\"></span><a href=\"#1-dist\"><i class=\"fa fa-link\"></i></a>(1) dist</h5>\n\n<p>コンパイルした資産の出力先フォルダ</p>\n\n<h5>\n<span id=\"1-1-distserver\" class=\"fragment\"></span><a href=\"#1-1-distserver\"><i class=\"fa fa-link\"></i></a>(1-1) dist/server</h5>\n\n<p>ここにサーバ側のコンパイルされたjsファイルが出力されます。<br>\nserverフォルダを設けているのは本資産とテスト資産を分離したかったからです。<br>\nその２. テスト編で説明しますが、サーバ側テスト用jsファイルはdist配下のserver_testフォルダに出力されるようにしています。</p>\n\n<h5>\n<span id=\"1-2-distserverpublic\" class=\"fragment\"></span><a href=\"#1-2-distserverpublic\"><i class=\"fa fa-link\"></i></a>(1-2) dist/server/public</h5>\n\n<p>コンパイルされたクライアント資産。<br>\nサーバ側アプリの資産の一部としてコンパイルされるようにしています。<br>\nExpressのアプリでは静的資産をpublicフォルダに置くのが一般的なのでこうしました。</p>\n\n<h5>\n<span id=\"2-server\" class=\"fragment\"></span><a href=\"#2-server\"><i class=\"fa fa-link\"></i></a>(2) server</h5>\n\n<p>サーバ資産を格納するためのディレクトリ。<br>\nいろいろ悩みましたが、TypeScript資産をコンパイルすることとテストすることを考慮してこのような構成にしました。</p>\n\n<h5>\n<span id=\"3-src\" class=\"fragment\"></span><a href=\"#3-src\"><i class=\"fa fa-link\"></i></a>(3) src</h5>\n\n<p>フロントの実行資産とテスト資産を格納するためのディレクリ。<br>\nAngular CLIでプロジェクトを作成するとデフォルトで作成されます。<br>\nビルドやアプリ起動は<code>ng</code>コマンドで実施します。</p>\n\n<h5>\n<span id=\"4-proxyconfjson\" class=\"fragment\"></span><a href=\"#4-proxyconfjson\"><i class=\"fa fa-link\"></i></a>(4) proxy.conf.json</h5>\n\n<p><code>npm start</code>でフロント側とサーバ側を同時に起動した時に、クライアント側からサーバ側へのリクエストを送れるようにするためのプロキシ設定です。</p>\n\n<h2>\n<span id=\"構築手順\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E7%AF%89%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>構築手順</h2>\n\n<h3>\n<span id=\"1-プロジェクト作成\" class=\"fragment\"></span><a href=\"#1-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>1. プロジェクト作成</h3>\n\n<ul>\n<li>\n<p>Angular CLIをインストール</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install -g @angular/cli\n</pre></div></div>\n</li>\n<li>\n<p>プロジェクトを生成、Angular CLIであらかじめ定義している依存ライブラリをインストール</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ ng new sample\n$ cd sample\n$ npm install\n</pre></div></div>\n</li>\n<li>\n<p>Angular CLIであらかじめ定義している依存ライブラリの他に必要なものををインストール<br>\n</p>\n<dd>\n<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/express\" rel=\"nofollow noopener\" target=\"_blank\"><code>express</code></a><br>\n    </dt>\n<dd>Webアプリケーションフレームワーク<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/body-parser\" rel=\"nofollow noopener\" target=\"_blank\"><code>body-parser</code></a><br>\n    </dt>\n<dd>リクエストボディのパーサー<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/mongoose\" rel=\"nofollow noopener\" target=\"_blank\"><code>mongoose</code></a><br>\n    </dt>\n<dd>MongoDBへのアクセスを簡単にしてくれるAPI<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/nodemon\" rel=\"nofollow noopener\" target=\"_blank\"><code>nodemon</code></a><br>\n    </dt>\n<dd>node実行時にソースの変更を自動反映してくれるツール<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/npm-run-all\" rel=\"nofollow noopener\" target=\"_blank\"><code>npm-run-all</code></a><br>\n    </dt>\n<dd>npm-scripts の連結実行を管理するためのパッケージ<br>\n</dd>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install --save express body-parser mongoose\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n</pre></div></div>\n</li>\n</ul>\n\n<h3>\n<span id=\"2-サーバ側を作成\" class=\"fragment\"></span><a href=\"#2-%E3%82%B5%E3%83%BC%E3%83%90%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2. サーバ側を作成</h3>\n\n<p>Angular CLIで作ったプロジェクトの直下に<code>server</code>フォルダを作って、その中にサーバ側の処理を書いていきます。</p>\n\n<h4>\n<span id=\"servermodelsmessagets\" class=\"fragment\"></span><a href=\"#servermodelsmessagets\"><i class=\"fa fa-link\"></i></a>server/models/message.ts</h4>\n\n<p>MongoDBにアクセスするためのモデルを定義します。<br>\nDBアクセスにはmangoosを使います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Message</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'messages'</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">}</span>\n<span class=\"p\">}));</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverroutesmessagets\" class=\"fragment\"></span><a href=\"#serverroutesmessagets\"><i class=\"fa fa-link\"></i></a>server/routes/message.ts</h4>\n\n<p>エンドポイントごとの処理を記述するルータを定義します。<br>\nメッセージの取得と登録には<code>server/models/message.ts</code>を使います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">http</span> <span class=\"k\">from</span> <span class=\"s1\">'http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Router</span><span class=\"p\">,</span> <span class=\"nx\">Response</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'express'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../models/message'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">messageRouter</span><span class=\"p\">:</span> <span class=\"nx\">Router</span> <span class=\"o\">=</span> <span class=\"nx\">Router</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// 全てのメッセージを取得する</span>\n<span class=\"nx\">messageRouter</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">doc</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span><span class=\"na\">messages</span><span class=\"p\">:</span> <span class=\"nx\">doc</span><span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// メッセージを登録する</span>\n<span class=\"nx\">messageRouter</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Message</span><span class=\"p\">({</span>\n    <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">save</span><span class=\"p\">((</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n      <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'メッセージを登録しました。'</span><span class=\"p\">,</span>\n      <span class=\"na\">obj</span><span class=\"p\">:</span> <span class=\"nx\">result</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">messageRouter</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverappts\" class=\"fragment\"></span><a href=\"#serverappts\"><i class=\"fa fa-link\"></i></a>server/app.ts</h4>\n\n<p>Expressで使用するルータと依存モジュールを定義するためのファイルを作成します。<br>\nメッセージAPIのエンドポイントは<code>/api/messages</code>に設定し、<br>\nmongooseを使ってMongoDBへの接続設定をしています。<br>\nクライアント資産はビルドするとpublicフォルダ配下に出力されるようにしているので、<br>\n静的資産へのルーティングはpublicフォルダを指定しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">express</span> <span class=\"k\">from</span> <span class=\"s1\">'express'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">path</span> <span class=\"k\">from</span> <span class=\"s1\">'path'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">bodyParser</span> <span class=\"k\">from</span> <span class=\"s1\">'body-parser'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">messageRouter</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./routes/message'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MONGO_URL</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./config'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">App</span> <span class=\"p\">{</span>\n  <span class=\"kr\">public</span> <span class=\"nx\">express</span><span class=\"p\">:</span> <span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">Application</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">middleware</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">routes</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kr\">private</span> <span class=\"nx\">middleware</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">bodyParser</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">());</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">bodyParser</span><span class=\"p\">.</span><span class=\"nx\">urlencoded</span><span class=\"p\">({</span> <span class=\"na\">extended</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">}));</span>\n    <span class=\"c1\">// 接続する MongoDB の設定</span>\n    <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nb\">Promise</span> <span class=\"o\">=</span> <span class=\"nb\">global</span><span class=\"p\">.</span><span class=\"nb\">Promise</span><span class=\"p\">;</span>\n    <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">MONGO_URL</span> <span class=\"o\">||</span> <span class=\"nx\">MONGO_URL</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">useMongoClient</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"p\">});</span>\n    <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'SIGINT'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">disconnect</span><span class=\"p\">();</span> <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kr\">private</span> <span class=\"nx\">routes</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 静的資産へのルーティング</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"kr\">static</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'public'</span><span class=\"p\">)));</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"nx\">messageRouter</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// その他のリクエストはindexファイルにルーティング</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">sendFile</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'public/index.html'</span><span class=\"p\">));</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"k\">new</span> <span class=\"nx\">App</span><span class=\"p\">().</span><span class=\"nx\">express</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverbinwwwts\" class=\"fragment\"></span><a href=\"#serverbinwwwts\"><i class=\"fa fa-link\"></i></a>server/bin/www.ts</h4>\n\n<p>Node.js でサーバを起動するための設定ファイルを作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">www.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">http</span> <span class=\"k\">from</span> <span class=\"s1\">'http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">SERVER_PORT</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../config'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">app</span> <span class=\"k\">from</span> <span class=\"s1\">'../app'</span><span class=\"p\">;</span>\n\n\n\n<span class=\"c1\">// ポートの設定.</span>\n<span class=\"kd\">const</span> <span class=\"nx\">port</span> <span class=\"o\">=</span> <span class=\"nx\">normalizePort</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">PORT</span> <span class=\"o\">||</span> <span class=\"nx\">SERVER_PORT</span><span class=\"p\">);</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"kd\">set</span><span class=\"p\">(</span><span class=\"s1\">'port'</span><span class=\"p\">,</span> <span class=\"nx\">port</span><span class=\"p\">);</span>\n\n\n<span class=\"c1\">// HTTPサーバ生成.</span>\n<span class=\"kd\">const</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">);</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"nx\">port</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`API running on localhost:</span><span class=\"p\">${</span><span class=\"nx\">port</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">));</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"nx\">onError</span><span class=\"p\">);</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'listening'</span><span class=\"p\">,</span> <span class=\"nx\">onListening</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// ポートを正規化.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">normalizePort</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">):</span> <span class=\"nx\">number</span><span class=\"o\">|</span><span class=\"nx\">string</span><span class=\"o\">|</span><span class=\"kr\">boolean</span>  <span class=\"p\">{</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">normalizedPort</span><span class=\"p\">:</span> <span class=\"nx\">number</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">val</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span><span class=\"p\">)</span>\n    <span class=\"p\">?</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">:</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">isNaN</span><span class=\"p\">(</span><span class=\"nx\">normalizedPort</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">normalizedPort</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">normalizedPort</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// エラーハンドラー.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">onError</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">):</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">syscall</span> <span class=\"o\">!==</span> <span class=\"s1\">'listen'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">bind</span> <span class=\"o\">=</span> <span class=\"k\">typeof</span> <span class=\"nx\">port</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span>\n    <span class=\"p\">?</span> <span class=\"s1\">'Pipe '</span> <span class=\"o\">+</span> <span class=\"nx\">port</span>\n    <span class=\"p\">:</span> <span class=\"s1\">'Port '</span> <span class=\"o\">+</span> <span class=\"nx\">port</span><span class=\"p\">;</span>\n\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"s1\">'EACCES'</span><span class=\"p\">:</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">bind</span> <span class=\"o\">+</span> <span class=\"s1\">' requires elevated privileges'</span><span class=\"p\">);</span>\n      <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"s1\">'EADDRINUSE'</span><span class=\"p\">:</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">bind</span> <span class=\"o\">+</span> <span class=\"s1\">' is already in use'</span><span class=\"p\">);</span>\n      <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// サーバ起動時のリスナー.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">onListening</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">addr</span> <span class=\"o\">=</span> <span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">address</span><span class=\"p\">();</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">bind</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">addr</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span><span class=\"p\">)</span>\n    <span class=\"p\">?</span> <span class=\"s2\">`pipe </span><span class=\"p\">${</span><span class=\"nx\">addr</span><span class=\"p\">}</span><span class=\"s2\">`</span>\n    <span class=\"p\">:</span> <span class=\"s2\">`port </span><span class=\"p\">${</span><span class=\"nx\">addr</span><span class=\"p\">.</span><span class=\"nx\">port</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverconfigts\" class=\"fragment\"></span><a href=\"#serverconfigts\"><i class=\"fa fa-link\"></i></a>server/config.ts</h4>\n\n<p>サーバ側の設定ファイルを作成します。<br>\nポートとMongoDBのURLを定義しています。<br>\n今回MongoDBはローカルにポート27017で立てる想定です。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">config.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_PORT</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">MONGO_URL</span> <span class=\"o\">=</span> <span class=\"s1\">'mongodb://localhost:27017/test'</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"3-クライアント側を作成\" class=\"fragment\"></span><a href=\"#3-%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>3. クライアント側を作成</h3>\n\n<p>Angular CLIでプロジェクトを作成すると最低限のクライアント資産が生成されるので、<br>\nここでは修正が必要なファイル、新規作成するファイルのみ紹介します。</p>\n\n<h4>\n<span id=\"srcappmessagemessageservicets\" class=\"fragment\"></span><a href=\"#srcappmessagemessageservicets\"><i class=\"fa fa-link\"></i></a>src/app/message/message.service.ts</h4>\n\n<p>サーバ側からメッセージを取得するためのサービスを新規作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.service.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Http</span><span class=\"p\">,</span> <span class=\"nx\">Response</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MessageService</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">private</span> <span class=\"nx\">http</span><span class=\"p\">:</span> <span class=\"nx\">Http</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"nx\">getAll</span><span class=\"p\">():</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">http</span>\n        <span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"na\">response</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n            <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n        <span class=\"p\">})</span>\n        <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">throw</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()));</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">regist</span><span class=\"p\">(</span><span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">http</span>\n      <span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">message</span><span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"na\">response</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n            <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n      <span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">throw</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappcomponentts\" class=\"fragment\"></span><a href=\"#srcappappcomponentts\"><i class=\"fa fa-link\"></i></a>src/app/app.component.ts</h4>\n\n<p>既存のファイルを修正して、messagesを保持するようにします。<br>\nMessageServiceを使ってメッセージを取得します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span><span class=\"p\">,</span> <span class=\"nx\">OnInit</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-root'</span><span class=\"p\">,</span>\n  <span class=\"na\">templateUrl</span><span class=\"p\">:</span> <span class=\"s1\">'./app.component.html'</span><span class=\"p\">,</span>\n  <span class=\"na\">styleUrls</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'./app.component.css'</span><span class=\"p\">],</span>\n  <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"nx\">MessageService</span> <span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">{</span>\n  <span class=\"nl\">messages</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n  <span class=\"nl\">message</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">private</span> <span class=\"nx\">messageService</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getMessages</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">getMessages</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messageService</span>\n      <span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">()</span>\n      <span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">res</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">;</span>\n      <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">registerMessage</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messageService</span>\n      <span class=\"p\">.</span><span class=\"nx\">register</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">res</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getMessages</span><span class=\"p\">();</span>\n      <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappcomponenthtml\" class=\"fragment\"></span><a href=\"#srcappappcomponenthtml\"><i class=\"fa fa-link\"></i></a>src/app/app.component.html</h4>\n\n<p>既存のファイルの修正して、メッセージ一覧と登録のUIに書き換えます。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.html</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>メッセージ一覧<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;button</span> <span class=\"na\">id=</span><span class=\"s\">\"getMessagesButton\"</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">getMessages</span><span class=\"err\">()\"</span><span class=\"nt\">&gt;</span>メッセージ一覧を最新化<span class=\"nt\">&lt;/button&gt;</span>\n    <span class=\"nt\">&lt;ul</span> <span class=\"na\">id=</span><span class=\"s\">\"messageList\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;li</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let item of messages\"</span><span class=\"nt\">&gt;</span>\n        {{item.message}}\n      <span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;/ul&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>メッセージ登録<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"na\">id=</span><span class=\"s\">\"registerMessage\"</span> <span class=\"err\">[(</span><span class=\"na\">ngModel</span><span class=\"err\">)]=\"</span><span class=\"na\">message</span><span class=\"err\">\"</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"登録するメッセージを入力してください。\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span> <span class=\"na\">id=</span><span class=\"s\">\"registerMessageButton\"</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)='</span><span class=\"na\">registerMessage</span><span class=\"err\">()'</span><span class=\"nt\">&gt;</span>登録<span class=\"nt\">&lt;/button&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappmodulets\" class=\"fragment\"></span><a href=\"#srcappappmodulets\"><i class=\"fa fa-link\"></i></a>src/app/app.module.ts</h4>\n\n<p>HttpModule、FormsModule、MessageServiceを追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.module.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">BrowserModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/platform-browser'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">NgModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">HttpModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/forms'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.component'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"nx\">AppComponent</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"nx\">BrowserModule</span><span class=\"p\">,</span>\n    <span class=\"nx\">HttpModule</span><span class=\"p\">,</span>\n    <span class=\"nx\">FormsModule</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MessageService</span><span class=\"p\">],</span>\n  <span class=\"na\">bootstrap</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">AppComponent</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppModule</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n\n</pre></div>\n</div>\n\n<h3>\n<span id=\"4-ビルドまわり環境を整備\" class=\"fragment\"></span><a href=\"#4-%E3%83%93%E3%83%AB%E3%83%89%E3%81%BE%E3%82%8F%E3%82%8A%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>4. ビルドまわり環境を整備</h3>\n\n<h4>\n<span id=\"pakcagejson\" class=\"fragment\"></span><a href=\"#pakcagejson\"><i class=\"fa fa-link\"></i></a>pakcage.json</h4>\n\n<p>スクリプトを下記のように修正します。<br>\n(npm scriptsは便利ですが、コメントが記述できないのが残念だなーと思いました。)</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\">\n  </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"start\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s build:server -p start:*\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"start:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng serve --aot=true --progress=false --proxy-config proxy.conf.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"start:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-p watch:server boot:server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"watch:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -w -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"boot:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"nodemon ./dist/server/bin/www.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-s build:server build:client\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng build --output-path=./dist/server/public\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"buildRun\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-s build boot:server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>start</strong>でクライアント資産とサーバ資産の両方を起動します。</li>\n<li>\n<strong>start:client</strong>でクライアント資産をコンパイルして起動します。Angular CLIのngコマンドにお任せしています。なおstartではクライアント資産とサーバ資産で二つのサーバを起動するので、クライアントからサーバへ（リクエストを送れるようにプロキシ設定を行っています。プロキシ設定ファイルについては下で触れます。</li>\n<li>\n<strong>start:server</strong>でサーバ資産をコンパイルしてExpressを起動します。</li>\n<li>\n<strong>watch:server</strong>でサーバ側のTypeScriptをウォッチして変更があればコンパイルするようにします。</li>\n<li>\n<strong>boot:server</strong>でコンパイルしたサーバ側資産を起動します。nodeではなくnodemonを使うことでコンパイルしたサーバ資産に更新があった場合でも即座に更新を反映するようにしています。</li>\n<li>\n<strong>build</strong>クライアント資産とサーバ資産の両方をコンパイルします。</li>\n<li>\n<strong>build:server</strong>でサーバ資産をコンパイルしています。コンパイル時の設定は下で触れる<code>/server/tsconfig.server.json</code>を使います。</li>\n<li>\n<strong>build:client</strong>でクライアント資産をコンパイルしています。出力先はサーバ側資産の静的ファイル格納フォルダ（<code>dist/server/public</code>）を指定しています。</li>\n<li>\n<strong>buildRun</strong>でクライアント資産とサーバ資産の両方をコンパイルしサーバ資産を起動します。とりあえずデプロイするアプリを起動したい時の便利コマンドです。</li>\n</ul>\n\n<h4>\n<span id=\"servertsconfigserverjson\" class=\"fragment\"></span><a href=\"#servertsconfigserverjson\"><i class=\"fa fa-link\"></i></a>server/tsconfig.server.json</h4>\n\n<p>サーバ資産コンパイルときの設定ファイルを作成します。<br>\n<code>outDir</code>で出力先をdist/serverに指定しています。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">tsconfig.server.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"extends\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../tsconfig.json\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"preserveConstEnums\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"outDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist/server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"mapRoot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist/server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"module\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"commonjs\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<h4>\n<span id=\"proxyconfjson\" class=\"fragment\"></span><a href=\"#proxyconfjson\"><i class=\"fa fa-link\"></i></a>proxy.conf.json</h4>\n\n<p><code>start</code>でクライアントとサーバの２つを起動した時に、クラ<br>\nイアントからサーバへのリクエストを送れるようにするためのプロキシ設定ファイルを作成します。<br>\n<code>/api</code>始まるリクエストをサーバへのリクエストとみなしてプロキシ設定を行います。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">proxy.conf.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"/api\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"target\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"http://localhost:3000\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"secure\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<h4>\n<span id=\"mongodbをローカルで立ち上げる\" class=\"fragment\"></span><a href=\"#mongodb%E3%82%92%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7%E7%AB%8B%E3%81%A1%E4%B8%8A%E3%81%92%E3%82%8B\"><i class=\"fa fa-link\"></i></a>MongoDBをローカルで立ち上げる</h4>\n\n<p>具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。</p>\n\n<h3>\n<span id=\"5-試してみる\" class=\"fragment\"></span><a href=\"#5-%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>5. 試してみる</h3>\n\n<h4>\n<span id=\"アプリを起動してみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリを起動してみる</h4>\n\n<ul>\n<li>\n<p>プロジェクト直下で下記コマンドを実行するとアプリが起動します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm start \n</pre></div></div>\n</li>\n<li><p>起動したら<code>http://localhost:4200</code>にアクセスしてみます。すると下記のようにメッセージ一覧画面が表示され、メッセージを登録すると適宜一覧に追加されていきます。</p></li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" alt=\"アプリ概要.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png\"></a></p>\n\n<ul>\n<li>試しにクライアント資産かサーバ資産を修正してみると、コンンパイルされてアプリに変更がリアルタイムに反映されることがわかります。</li>\n</ul>\n\n<h4>\n<span id=\"アプリをビルドしてみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリをビルドしてみる</h4>\n\n<ul>\n<li>\n<p>プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力されます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run build\n</pre></div></div>\n</li>\n</ul>\n\n<h4>\n<span id=\"アプリをビルドして起動してみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリをビルドして起動してみる</h4>\n\n<ul>\n<li>プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力された後に起動されます。\nビルドしたアプリは<code>http://localhost:3000</code>でアクセスできます。\n<code>\n$ npm run buildRun\n</code>\n</li>\n</ul>\n\n<h2>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h2>\n\n<p>今回はAngular CLIベースのプロジェクトをベースにしてMEANスタックの最小構成プロジェクトを構築する方法を紹介しました。プロジェクトを起動、ビルドすることはできるようになったので、次回「<a href=\"http://qiita.com/Takumon/items/b4211fcabad740baa551\">その２. テスト編</a>」ではテストコードの作成とテスト実施環境の構築について紹介しようと思います。</p>\n","body":"## やりたいこと\n* Angular CLI使って、MEANスタック(**M**ongoDB + **E**xpress + **A**ngular + **N**odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。\n* フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。\n* Dockerを使ってアプリを簡単に配布したい。\n\nこれらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。\n\n* その１. ビルド編　⇦　今回はココ\n* [その２. テスト編](http://qiita.com/Takumon/items/b4211fcabad740baa551)\n* その３. Dockerビルド編\n\n\n\n## その１. ビルド編\nAngular CLIで作成したプロジェクトをベースに、\nMongoDBに登録したメッセージを画面に一覧で表示するアプリを作成していきます。\nメッセージを登録すると一覧に追加されていくようなアプリです。\n\n![アプリ概要.png](https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png)\n\n\n\n\n### プロジェクト構成\n今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。\n[リポジトリ](https://github.com/Takumon/angular4-express4-typescritp2/tree/build)も用意しているので詳細はそちらを参照してください。\n\n```:プロジェクトの構成（完成イメージ）\n.\n├── dist                ・・・(1) コンパイル資産出力先\n│   └── server　　　　　　　　      ・・・\u001c(1-1)　コンパイルされたサーバ資産\n│       ├── app.js\n│       ├── app.js.map\n│       ├── bin\n│       │   ├── www.js\n│       │   └── www.js.map\n│       ├── config.js\n│       ├── config.js.map\n│       ├── models\n│       │   ├── message.js\n│       │   └── message.js.map\n│       ├── public      ・・・(1-2) コンパイルされたクライアント資産\n│       │   ├── favicon.ico\n│       │   ├── index.html\n│       │   ├── inline.bundle.js\n│       │   ├── inline.bundle.js.map\n│       │   ├── main.bundle.js\n│       │   ├── main.bundle.js.map\n│       │   ├── polyfills.bundle.js\n│       │   ├── polyfills.bundle.js.map\n│       │   ├── styles.bundle.js\n│       │   ├── styles.bundle.js.map\n│       │   ├── vendor.bundle.js\n│       │   └── vendor.bundle.js.map\n│       └── routes\n│           ├── message.js\n│           └── message.js.map\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── e2e\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── server               ・・・(2)　サーバ資産\n│   ├── app.ts\n│   ├── bin\n│   │   └── www.ts\n│   ├── config.ts\n│   ├── models\n│   │   └── message.ts\n│   ├── routes\n│   │   └── message.ts\n│   └── tsconfig.server.json\n├── src                   ・・・(3)　クライアント資産\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       └── message.service.ts\n│   ├── assets\n│   ├── environments\n│   │   ├── environment.prod.ts\n│   │   └── environment.ts\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── main.ts\n│   ├── polyfills.ts\n│   ├── styles.css\n│   ├── test.ts\n│   ├── tsconfig.app.json\n│   ├── tsconfig.spec.json\n│   └── typings.d.ts\n├── karma.conf.js\n├── package-lock.json\n├── package.json\n├── protractor.conf.js\n├── proxy.conf.json    ・・・(4) \n├── tsconfig.json\n├── tslint.json\n└── README.md\n```\n#### 各資産について\n##### (1) dist\nコンパイルした資産の出力先フォルダ\n\n##### (1-1) dist/server\nここにサーバ側のコンパイルされたjsファイルが出力されます。\nserverフォルダを設けているのは本資産とテスト資産を分離したかったからです。\nその２. テスト編で説明しますが、サーバ側テスト用jsファイルはdist配下のserver_testフォルダに出力されるようにしています。\n\n##### (1-2) dist/server/public\nコンパイルされたクライアント資産。\nサーバ側アプリの資産の一部としてコンパイルされるようにしています。\nExpressのアプリでは静的資産をpublicフォルダに置くのが一般的なのでこうしました。\n\n##### (2) server\nサーバ資産を格納するためのディレクトリ。\nいろいろ悩みましたが、TypeScript資産をコンパイルすることとテストすることを考慮してこのような構成にしました。\n\n##### (3) src\nフロントの実行資産とテスト資産を格納するためのディレクリ。\nAngular CLIでプロジェクトを作成するとデフォルトで作成されます。\nビルドやアプリ起動は`ng`コマンドで実施します。\n\n##### (4) proxy.conf.json\n`npm start`でフロント側とサーバ側を同時に起動した時に、クライアント側からサーバ側へのリクエストを送れるようにするためのプロキシ設定です。\n\n\n\n\n## 構築手順\n\n### 1. プロジェクト作成\n* Angular CLIをインストール\n\n\t```\n\t$ npm install -g @angular/cli\n\t```\n\n* プロジェクトを生成、Angular CLIであらかじめ定義している依存ライブラリをインストール\n\n\t```\n\t$ ng new sample\n\t$ cd sample\n\t$ npm install\n\t```\n\n* Angular CLIであらかじめ定義している依存ライブラリの他に必要なものををインストール\n<dd>\n    <dt>[`express`](https://www.npmjs.com/package/express)\n        <dd>Webアプリケーションフレームワーク\n    <dt>[`body-parser`](https://www.npmjs.com/package/body-parser)\n        <dd>リクエストボディのパーサー\n    <dt>[`mongoose`](https://www.npmjs.com/package/mongoose)\n        <dd>MongoDBへのアクセスを簡単にしてくれるAPI\n    <dt>[`nodemon`](https://www.npmjs.com/package/nodemon)\n        <dd>node実行時にソースの変更を自動反映してくれるツール\n    <dt>[`npm-run-all`](https://www.npmjs.com/package/npm-run-all)\n        <dd>npm-scripts の連結実行を管理するためのパッケージ\n</dd>\n\n\t```\n\t$ npm install --save express body-parser mongoose\n\t$ npm install --save-dev @types/mongoose nodemon npm-run-all\n\t```\n\n\n\n### 2. サーバ側を作成\nAngular CLIで作ったプロジェクトの直下に`server`フォルダを作って、その中にサーバ側の処理を書いていきます。\n#### server/models/message.ts\nMongoDBにアクセスするためのモデルを定義します。\nDBアクセスにはmangoosを使います。\n\n```js:message.ts\nimport * as mongoose from 'mongoose';\n\nconst Message = mongoose.model('messages', new mongoose.Schema({\n  message: {type: String}\n}));\n\nexport { Message };\n```\n\n\n\n#### server/routes/message.ts\nエンドポイントごとの処理を記述するルータを定義します。\nメッセージの取得と登録には`server/models/message.ts`を使います。\n\n```js:message.ts\nimport * as http from 'http';\nimport { Router, Response } from 'express';\nimport { Message } from '../models/message';\n\nconst messageRouter: Router = Router();\n\n// 全てのメッセージを取得する\nmessageRouter.get('/', (req, res, next) => {\n  Message.find(function(err, doc) {\n    if (err) {\n      return res.status(500).json({\n          title: 'エラーが発生しました。',\n          error: err.message\n      });\n    }\n\n    return res.status(200).json({messages: doc});\n  });\n});\n\n// メッセージを登録する\nmessageRouter.post('/', (req, res, next) => {\n  const message = new Message({\n    message: req.body.message\n  });\n\n  message.save((err, result) => {\n    if (err) {\n      return res.status(500).json({\n          title: 'エラーが発生しました。',\n          error: err.message\n      });\n    }\n\n    return res.status(200).json({\n      message: 'メッセージを登録しました。',\n      obj: result\n    });\n  });\n});\n\nexport { messageRouter };\n```\n\n\n#### server/app.ts\nExpressで使用するルータと依存モジュールを定義するためのファイルを作成します。\nメッセージAPIのエンドポイントは`/api/messages`に設定し、\nmongooseを使ってMongoDBへの接続設定をしています。\nクライアント資産はビルドするとpublicフォルダ配下に出力されるようにしているので、\n静的資産へのルーティングはpublicフォルダを指定しています。\n\n```js:app.ts\nimport * as express from 'express';\nimport * as path from 'path';\nimport * as bodyParser from 'body-parser';\nimport * as mongoose from 'mongoose';\n\nimport { messageRouter } from './routes/message';\nimport { MONGO_URL } from './config';\n\nclass App {\n  public express: express.Application;\n\n  constructor() {\n    this.express = express();\n    this.middleware();\n    this.routes();\n  }\n\n  private middleware(): void {\n    this.express.use(bodyParser.json());\n    this.express.use(bodyParser.urlencoded({ extended: false }));\n    // 接続する MongoDB の設定\n    mongoose.Promise = global.Promise;\n    mongoose.connect(process.env.MONGO_URL || MONGO_URL, {\n      useMongoClient: true,\n    });\n    process.on('SIGINT', function() { mongoose.disconnect(); });\n  }\n\n  private routes(): void {\n    // 静的資産へのルーティング\n    this.express.use(express.static(path.join(__dirname, 'public')));\n\n    this.express.use('/api/messages', messageRouter);\n\n    // その他のリクエストはindexファイルにルーティング\n    this.express.get('*', (req, res) => {\n      res.sendFile(path.join(__dirname, 'public/index.html'));\n    });\n  }\n}\n\nexport default new App().express;\n```\n\n\n#### server/bin/www\\.ts\nNode.js でサーバを起動するための設定ファイルを作成します。\n\n```js:www.ts\nimport * as http from 'http';\nimport { SERVER_PORT } from '../config';\nimport app from '../app';\n\n\n\n// ポートの設定.\nconst port = normalizePort(process.env.PORT || SERVER_PORT);\napp.set('port', port);\n\n\n// HTTPサーバ生成.\nconst server = http.createServer(app);\nserver.listen(port, () => console.log(`API running on localhost:${port}`));\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n// ポートを正規化.\nfunction normalizePort(val): number|string|boolean  {\n\n  const normalizedPort: number = (typeof val === 'string')\n    ? parseInt(val, 10)\n    : val;\n\n  if (isNaN(normalizedPort)) {\n    return val;\n  }\n\n  if (normalizedPort >= 0) {\n    return normalizedPort;\n  }\n\n  return false;\n}\n\n// エラーハンドラー.\nfunction onError(error): void {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  const bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n// サーバ起動時のリスナー.\nfunction onListening(): void {\n  const addr = server.address();\n  const bind = (typeof addr === 'string')\n    ? `pipe ${addr}`\n    : `port ${addr.port}`;\n}\n```\n\n#### server/config.ts\nサーバ側の設定ファイルを作成します。\nポートとMongoDBのURLを定義しています。\n今回MongoDBはローカルにポート27017で立てる想定です。\n\n```js:config.ts\nexport const SERVER_PORT = 3000;\nexport const MONGO_URL = 'mongodb://localhost:27017/test';\n```\n\n\n\n### 3. クライアント側を作成\nAngular CLIでプロジェクトを作成すると最低限のクライアント資産が生成されるので、\nここでは修正が必要なファイル、新規作成するファイルのみ紹介します。\n\n\n#### src/app/message/message.service.ts\nサーバ側からメッセージを取得するためのサービスを新規作成します。\n\n```js:message.service.ts\nimport { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/Rx';\n\n@Injectable()\nexport class MessageService {\n\n  constructor(private http: Http) {}\n\n  getAll(): Observable<any> {\n    return this.http\n        .get('/api/messages')\n        .map((response: Response) => {\n            const result = response.json();\n            return result;\n        })\n        .catch((error: Response) => Observable.throw(error.json()));\n  }\n\n  regist(message: string): Observable<any> {\n    return this.http\n      .post('/api/messages', {message: message})\n      .map((response: Response) => {\n            const result = response.json();\n            return result;\n      })\n      .catch((error: Response) => Observable.throw(error.json()));\n  }\n}\n```\n\n\n\n\n\n#### src/app/app.component.ts\n既存のファイルを修正して、messagesを保持するようにします。\nMessageServiceを使ってメッセージを取得します。\n\n```js:app.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { MessageService } from './message/message.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  providers: [ MessageService ]\n})\nexport class AppComponent {\n  messages: Array<any>;\n  message: string;\n\n  constructor(private messageService: MessageService) {\n    this.getMessages();\n  }\n\n  getMessages(): void {\n    this.messageService\n      .getAll()\n      .subscribe((res: any) => {\n        this.messages = res.messages;\n      });\n  }\n\n  registerMessage(): void {\n    if (!this.message) {\n      return;\n    }\n\n    this.messageService\n      .register(this.message)\n      .subscribe((res: any) => {\n        this.message = '';\n        this.getMessages();\n      });\n  }\n}\n```\n\n\n#### src/app/app.component.html\n既存のファイルの修正して、メッセージ一覧と登録のUIに書き換えます。\n\n```html:app.component.html\n<div>\n  <div>\n    <h1>メッセージ一覧</h1>\n    <button id=\"getMessagesButton\" (click)=\"getMessages()\">メッセージ一覧を最新化</button>\n    <ul id=\"messageList\">\n      <li *ngFor=\"let item of messages\">\n        {{item.message}}\n      </li>\n    </ul>\n  </div>\n  <div>\n    <h1>メッセージ登録</h1>\n    <input type=\"text\" id=\"registerMessage\" [(ngModel)]=\"message\" placeholder=\"登録するメッセージを入力してください。\">\n    <button type=\"submit\" id=\"registerMessageButton\" (click)='registerMessage()'>登録</button>\n  </div>\n</div>\n```\n#### src/app/app.module.ts\nHttpModule、FormsModule、MessageServiceを追加します。\n\n\n```js:app.module.ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpModule } from '@angular/http';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { MessageService } from './message/message.service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpModule,\n    FormsModule\n  ],\n  providers: [MessageService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n```\n\n\n### 4. ビルドまわり環境を整備\n\n#### pakcage.json\nスクリプトを下記のように修正します。\n(npm scriptsは便利ですが、コメントが記述できないのが残念だなーと思いました。)\n\n```json:package.json\n\n  \"scripts\": {\n    ...\n    \"start\": \"npm-run-all -s build:server -p start:*\",\n    \"start:client\": \"ng serve --aot=true --progress=false --proxy-config proxy.conf.json\",\n    \"start:server\": \"run-p watch:server boot:server\",\n    \"watch:server\": \"tsc -w -p ./server/tsconfig.server.json\",\n    \"boot:server\": \"nodemon ./dist/server/bin/www.js\",\n    \"build\": \"run-s build:server build:client\",\n    \"build:client\": \"ng build --output-path=./dist/server/public\",\n    \"build:server\": \"tsc -p ./server/tsconfig.server.json\",\n    \"buildRun\": \"run-s build boot:server\",\n    ...\n  },\n```\n\n* **start**でクライアント資産とサーバ資産の両方を起動します。\n* **start:client**でクライアント資産をコンパイルして起動します。Angular CLIのngコマンドにお任せしています。なおstartではクライアント資産とサーバ資産で二つのサーバを起動するので、クライアントからサーバへ（リクエストを送れるようにプロキシ設定を行っています。プロキシ設定ファイルについては下で触れます。\n* **start:server**でサーバ資産をコンパイルしてExpressを起動します。\n* **watch:server**でサーバ側のTypeScriptをウォッチして変更があればコンパイルするようにします。\n* **boot:server**でコンパイルしたサーバ側資産を起動します。nodeではなくnodemonを使うことでコンパイルしたサーバ資産に更新があった場合でも即座に更新を反映するようにしています。\n* **build**クライアント資産とサーバ資産の両方をコンパイルします。\n* **build:server**でサーバ資産をコンパイルしています。コンパイル時の設定は下で触れる`/server/tsconfig.server.json`を使います。\n* **build:client**でクライアント資産をコンパイルしています。出力先はサーバ側資産の静的ファイル格納フォルダ（`dist/server/public`）を指定しています。\n* **buildRun**でクライアント資産とサーバ資産の両方をコンパイルしサーバ資産を起動します。とりあえずデプロイするアプリを起動したい時の便利コマンドです。\n\n\n\n#### server/tsconfig.server.json\nサーバ資産コンパイルときの設定ファイルを作成します。\n`outDir`で出力先をdist/serverに指定しています。\n\n```json:tsconfig.server.json\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"preserveConstEnums\": true,\n    \"outDir\": \"../dist/server\",\n    \"mapRoot\": \"../dist/server\",\n    \"module\": \"commonjs\"\n  }\n}\n```\n\n#### proxy.conf.json\n`start`でクライアントとサーバの２つを起動した時に、クラ\nイアントからサーバへのリクエストを送れるようにするためのプロキシ設定ファイルを作成します。\n`/api`始まるリクエストをサーバへのリクエストとみなしてプロキシ設定を行います。\n\n```json:proxy.conf.json\n{\n  \"/api\": {\n    \"target\": \"http://localhost:3000\",\n    \"secure\": false\n  }\n}\n```\n\n#### MongoDBをローカルで立ち上げる\n具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。\n\n\n\n### 5. 試してみる\n#### アプリを起動してみる\n* プロジェクト直下で下記コマンドを実行するとアプリが起動します。\n\n\t```\n\t$ npm start \n\t```\n\n* 起動したら`http://localhost:4200`にアクセスしてみます。すると下記のようにメッセージ一覧画面が表示され、メッセージを登録すると適宜一覧に追加されていきます。\n\n![アプリ概要.png](https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png)\n\n* 試しにクライアント資産かサーバ資産を修正してみると、コンンパイルされてアプリに変更がリアルタイムに反映されることがわかります。\n\n#### アプリをビルドしてみる\n* プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力されます。\n\n\t```\n\t$ npm run build\n\t```\n\n#### アプリをビルドして起動してみる\n* プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力された後に起動されます。\nビルドしたアプリは`http://localhost:3000`でアクセスできます。\n\t```\n\t$ npm run buildRun\n\t```\n\n## 終わりに\n今回はAngular CLIベースのプロジェクトをベースにしてMEANスタックの最小構成プロジェクトを構築する方法を紹介しました。プロジェクトを起動、ビルドすることはできるようになったので、次回「[その２. テスト編](http://qiita.com/Takumon/items/b4211fcabad740baa551)」ではテストコードの作成とテスト実施環境の構築について紹介しようと思います。\n\n\n","comments_count":0,"created_at":"2017-07-19T02:06:59+09:00","likes_count":27,"reactions_count":0},"matches":4,"weight":250,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"TypeScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":62.5,"totalWeight":58,"threshold":12.5,"isRelated":true},{"node":{"fields":{"slug":"/e0ec0869-f368-5083-bdc2-cdba9d59427a/","title":"フロントエンド初心者がMEANスタック(MongoDB+Express+Angular+Node.js)でアプリを作ってみて躓いたこと","date":"2017-12-12T03:19:11+09:00","excerpt":"FUJITSU Advent Calendar 2017 12日目の記事です。リッチでイマドキなデザインのアプリが作りたくて、ここ４ヶ月ほどMEANスタック(MongoDB+Express+Angular+Node.js)でブログアプリを作...","tags":["JavaScript","Node.js","Express","mongoose","Angular","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"e0ec0869-f368-5083-bdc2-cdba9d59427a","title":"フロントエンド初心者がMEANスタック(MongoDB+Express+Angular+Node.js)でアプリを作ってみて躓いたこと","rendered_body":"<p><a href=\"https://qiita.com/advent-calendar/2017/fujitsu\">FUJITSU Advent Calendar 2017</a> 12日目の記事です。</p>\n\n<p>リッチでイマドキなデザインのアプリが作りたくて、<br>\nここ４ヶ月ほど<strong>MEAN</strong>スタック(<strong>M</strong>ongoDB+<strong>E</strong>xpress+<strong>A</strong>ngular+<strong>N</strong>ode.js)でブログアプリを作っています。<br>\n知識ゼロからのスタートでしたが、多くの方々がブログやStackOverFlowに情報を載せてくれているので、躓きながらもなんとかアプリ開発を進めることができました。</p>\n\n<p>この記事では、フロントエンド初心者の自分がMEANスタックでアプリを作る時に躓いたことや、こういう機能を実現するにはどうすればいいか?などをまとめています。<br>\nこれからをAngularを学ぼうとしている方、ExpressやMongoDBなどサーバーサイドJavaScriptを学ぼうとしている方の参考になればうれしいです。</p>\n\n<h2>\n<span id=\"アプリの紹介\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E7%B4%B9%E4%BB%8B\"><i class=\"fa fa-link\"></i></a>アプリの紹介</h2>\n\n<p>本線から脱線しますが、イントラでの使用を想定したQiitaのようなブログアプリです。デモ環境もあるのでよければ触ってみてください(モバイルには未対応ですが。。。)</p>\n\n<ul>\n<li><a href=\"https://github.com/Takumon/mean-blog\" rel=\"nofollow noopener\" target=\"_blank\">Github</a></li>\n<li><a href=\"https://hub.docker.com/r/takumon/mean-blog_auto/\" rel=\"nofollow noopener\" target=\"_blank\">Dockerhub</a></li>\n<li>\n<a href=\"https://material-blog-demo.herokuapp.com/\" rel=\"nofollow noopener\" target=\"_blank\">デモ環境</a> (ユーザID/パスは DemoUser / DemoUser1234# です)</li>\n</ul>\n\n<p>アプリキャプチャ その１ (記事詳細)<br>\n<a href=\"https://camo.qiitausercontent.com/4d64d8bd315bcf330d1ac6de1cfe8bb53f280992/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62383133333331372d666163322d626239622d386632642d3133646238393662656366352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/4d64d8bd315bcf330d1ac6de1cfe8bb53f280992/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62383133333331372d666163322d626239622d386632642d3133646238393662656366352e706e67\" alt=\"appdemo_detail.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/b8133317-fac2-bb9b-8f2d-13db896becf5.png\"></a></p>\n\n<p>アプリキャプチャ その２ (記事一覧)<br>\n<a href=\"https://camo.qiitausercontent.com/96927cda50e8df84b0c5415e996246c6d720b607/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39353064313036322d316261342d363366362d666535332d6366653664343634333061342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/96927cda50e8df84b0c5415e996246c6d720b607/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39353064313036322d316261342d363366362d666535332d6366653664343634333061342e706e67\" alt=\"アプリ_スクリーンキャプチャ_記事一覧.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/950d1062-1ba4-63f6-fe53-cfe6d46430a4.png\"></a></p>\n\n<p>アプリキャプチャ その３ (プロフィール)<br>\n<a href=\"https://camo.qiitausercontent.com/46aab6c2add74ca826b1dbe730d1a82eb481e295/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33323563373934382d636531362d396330382d306236362d6433383932653034366165642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/46aab6c2add74ca826b1dbe730d1a82eb481e295/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33323563373934382d636531362d396330382d306236362d6433383932653034366165642e706e67\" alt=\"アプリ_スクリーンキャプチャ_ ユーザ画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/325c7948-ce16-9c08-0b66-d3892e046aed.png\"></a></p>\n\n<h1>\n<span id=\"1-フロント側angularまわり\" class=\"fragment\"></span><a href=\"#1-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4angular%E3%81%BE%E3%82%8F%E3%82%8A\"><i class=\"fa fa-link\"></i></a>1. フロント側Angularまわり</h1>\n\n<h2>\n<span id=\"angularについて調べる時に古い情報を除外したい\" class=\"fragment\"></span><a href=\"#angular%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%BF%E3%81%B9%E3%82%8B%E6%99%82%E3%81%AB%E5%8F%A4%E3%81%84%E6%83%85%E5%A0%B1%E3%82%92%E9%99%A4%E5%A4%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Angularについて調べる時に古い情報を除外したい</h2>\n\n<p>1系は<code>AngularJS</code>、2系以降は<code>Angular</code>と呼ばれており、1系と2系以降では大きく仕様が異なります。<br>\nそのため検索する時は<code>Angualr2</code>などバージョンを指定したり、1系を除外するため<code>--AngularJS</code>をつけたりすると検索しやすいです。</p>\n\n<h2>\n<span id=\"htmlのdom要素を別のdom要素またはcomponentから扱いたい\" class=\"fragment\"></span><a href=\"#html%E3%81%AEdom%E8%A6%81%E7%B4%A0%E3%82%92%E5%88%A5%E3%81%AEdom%E8%A6%81%E7%B4%A0%E3%81%BE%E3%81%9F%E3%81%AFcomponent%E3%81%8B%E3%82%89%E6%89%B1%E3%81%84%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>HTMLのDOM要素を、別のDOM要素またはComponentから扱いたい</h2>\n\n<p>要素に<code>#xxxxx</code>のように<code>#</code>始まりの名前をつけると、別のDOM要素から参照できます</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;input</span> <span class=\"err\">#</span><span class=\"na\">phone</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"電話番号\"</span><span class=\"nt\">/&gt;</span>\n<span class=\"c\">&lt;!--  他のDOM要素からphonという変数名でDOM要素を参照できるようになる --&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"nt\">&gt;</span>(click)=\"callPhone(phone.value)\"&gt;\n</pre></div>\n</div>\n\n<p>Componentから参照する場合は<code>@ViewChild</code>を使います</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">Component</span></div>\n<div class=\"highlight\"><pre>  <span class=\"c1\">// ViewChildの引数に名前を文字列で指定します</span>\n  <span class=\"p\">@</span><span class=\"nd\">ViewChild</span><span class=\"p\">(</span><span class=\"s1\">'phone'</span><span class=\"p\">)</span> <span class=\"nx\">phoneElement</span><span class=\"p\">:</span> <span class=\"nx\">phoneElement</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">showPhoneValue</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">phoneElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://angular.io/guide/template-syntax#ref-vars\" rel=\"nofollow noopener\" target=\"_blank\">Angular公式サイト</a></li>\n<li><a href=\"https://stackoverflow.com/questions/32693061/how-can-i-select-an-element-in-a-component-template\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"routing時の認証を非同期で行いたい\" class=\"fragment\"></span><a href=\"#routing%E6%99%82%E3%81%AE%E8%AA%8D%E8%A8%BC%E3%82%92%E9%9D%9E%E5%90%8C%E6%9C%9F%E3%81%A7%E8%A1%8C%E3%81%84%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Routing時の認証を非同期で行いたい</h2>\n\n<p>URLごとの認証は<code>CanActivate</code>インターフェースを実装すればできますが、<br>\nサーバから認証情報を取得して非同期で認証したい場合もあると思います。<br>\nそのような時は、<strong><code>CanActivate#canActivate</code>で</strong>booleanの代わりに<strong>Observableを戻り値に指定する</strong>ことで実現できます。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">SampleAuthGuard</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Router</span><span class=\"p\">,</span> <span class=\"nx\">CanActivate</span><span class=\"p\">,</span> <span class=\"nx\">ActivatedRouteSnapshot</span><span class=\"p\">,</span> <span class=\"nx\">RouterStateSnapshot</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/router'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AuthenticationService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./authentication.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SampleAuthGuard</span> <span class=\"kr\">implements</span> <span class=\"nx\">CanActivate</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span>\n    <span class=\"kr\">private</span> <span class=\"nx\">auth</span><span class=\"p\">:</span> <span class=\"nx\">AuthenticationService</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n  <span class=\"c1\">// booleanではなくObservable&lt;boolean&gt;を戻り値で返す</span>\n  <span class=\"nx\">canActivate</span><span class=\"p\">(</span><span class=\"nx\">route</span><span class=\"p\">:</span> <span class=\"nx\">ActivatedRouteSnapshot</span><span class=\"p\">,</span> <span class=\"nx\">state</span><span class=\"p\">:</span> <span class=\"nx\">RouterStateSnapshot</span><span class=\"p\">):</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"kr\">boolean</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">auth</span><span class=\"p\">.</span><span class=\"nx\">checkState</span><span class=\"p\">()</span>\n      <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">err</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">of</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">))</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/38425461/angular2-canactivate-calling-async-function\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"formarrayの値を初期化したい\" class=\"fragment\"></span><a href=\"#formarray%E3%81%AE%E5%80%A4%E3%82%92%E5%88%9D%E6%9C%9F%E5%8C%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>FormArrayの値を初期化したい</h2>\n\n<p>FormControlはpatchValueで初期値を設定できますが、<br>\nFormArrayの場合patchValueで配列の値を設定しようとしても設定できません。<br>\nこういう場合は、<strong>配列1つ１つの値をもとにFormControlを生成してFormArrayにpush</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">ダメな例</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Form生成</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">group</span><span class=\"p\">({</span>\n    <span class=\"na\">schoolName</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">([])</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// Formに初期値を設定</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">pathValue</span><span class=\"p\">({</span>\n    <span class=\"na\">schooleName</span><span class=\"p\">:</span> <span class=\"s1\">'SampleSchoolName'</span> <span class=\"c1\">// FormControlの値の初期化はpatchValueで可能</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'taro'</span><span class=\"p\">,</span> <span class=\"s1\">'jiro'</span><span class=\"p\">,</span> <span class=\"s1\">'saburo'</span><span class=\"p\">];</span> <span class=\"c1\">// FormArrayに要素を追加する場合patchValueでは不可能</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">良い例</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Formを生成</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">group</span><span class=\"p\">({</span>\n    <span class=\"na\">schoolName</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">([])</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// Formに初期値を設定</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">pathValue</span><span class=\"p\">({</span>\n    <span class=\"na\">schooleName</span><span class=\"p\">:</span> <span class=\"s1\">'SampleSchoolName'</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// データからFormControlを生成し１件１件FormArrayにpushする</span>\n  <span class=\"p\">[</span><span class=\"s1\">'taro'</span><span class=\"p\">,</span> <span class=\"s1\">'jiro'</span><span class=\"p\">,</span> <span class=\"s1\">'saburo'</span><span class=\"p\">].</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">student</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">controls</span><span class=\"p\">[</span><span class=\"s1\">'students'</span><span class=\"p\">].</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">FormControll</span><span class=\"p\">(</span><span class=\"nx\">student</span><span class=\"p\">));</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/40916084/angular2-patchvalue-push-value-into-array\" rel=\"nofollow noopener\" target=\"_blank\">StackOvereFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"error-error-no-provider-for-templaterefというエラー\" class=\"fragment\"></span><a href=\"#error-error-no-provider-for-templateref%E3%81%A8%E3%81%84%E3%81%86%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>「ERROR Error: No provider for TemplateRef!」というエラー</h2>\n\n<p>最初このエラーが出た時は、何が原因なのかわからずに困りました。。。<br>\n大抵の場合は、<strong><code>*ngIf</code>や<code>*ngForm</code>の<code>*</code>が抜けてることが原因</strong>です(要するにただのタイポです。。。)<br>\n<code>*</code>が抜けると、Angularは<code>ngIf</code>をディレクティブとして解釈しようとしますが、<br>\nそんなディレクティブは存在しないので<code>No provider for TemplateRef!</code>と言われてしまうそうです。</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/35932074/angular2-no-provider-for-templateref-ngif-templateref\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"textareaにおいてtabキーでインデントしたい\" class=\"fragment\"></span><a href=\"#textarea%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6tab%E3%82%AD%E3%83%BC%E3%81%A7%E3%82%A4%E3%83%B3%E3%83%87%E3%83%B3%E3%83%88%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>textareaにおいてTabキーでインデントしたい</h2>\n\n<p>文書を入力するようなテキストエリアの場合に、Tabキーでのインデントしたい場合は、<br>\nkyedownイベント発生時にテキストエリアの値とキャレットの位置を操作することで実現可能です。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;textarea</span> <span class=\"err\">#</span><span class=\"na\">sampletextarea</span>\n  <span class=\"err\">(</span><span class=\"na\">keydown</span><span class=\"err\">)=\"</span><span class=\"na\">indent</span><span class=\"err\">($</span><span class=\"na\">event</span><span class=\"err\">,</span> <span class=\"na\">sampletextarea</span><span class=\"err\">)\"</span> <span class=\"nt\">&gt;&lt;/textarea&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">Component</span></div>\n<div class=\"highlight\"><pre>  <span class=\"nx\">indent</span><span class=\"p\">(</span><span class=\"nx\">$event</span><span class=\"p\">,</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Tabキー押下時</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">$event</span><span class=\"p\">.</span><span class=\"nx\">keyCode</span> <span class=\"o\">===</span> <span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 次の要素にフォーカスが移らないようにする</span>\n      <span class=\"nx\">$event</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n\n      <span class=\"c1\">// 現在のキャレット位置を取得</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">caretStart</span> <span class=\"o\">=</span> <span class=\"nx\">textareaElement</span><span class=\"p\">.</span><span class=\"nx\">selectionStart</span><span class=\"p\">;</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">caretEnd</span> <span class=\"o\">=</span> <span class=\"nx\">textareaElement</span><span class=\"p\">.</span><span class=\"nx\">selectionEnd</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// テキストエリアの値を取得し、キャレット位置にTabを挿入</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">TAB</span> <span class=\"o\">=</span> <span class=\"s1\">'¥t'</span><span class=\"p\">;</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">caretStart</span><span class=\"p\">)</span>\n                     <span class=\"o\">+</span> <span class=\"nx\">TAB</span> <span class=\"o\">+</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"nx\">caretStart</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// キャレット位置をTab分ずらす</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">focus</span><span class=\"p\">();</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">setSelectionRange</span><span class=\"p\">(</span><span class=\"nx\">caretStart</span> <span class=\"o\">+</span> <span class=\"nx\">TAB</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">,</span> <span class=\"nx\">caretEnd</span> <span class=\"o\">+</span> <span class=\"nx\">TAB</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h2>\n<span id=\"markdownプレビューを表示したいソースコードはシンタックスハイライトさせたい\" class=\"fragment\"></span><a href=\"#markdown%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%97%E3%81%9F%E3%81%84%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AF%E3%82%B7%E3%83%B3%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B9%E3%83%8F%E3%82%A4%E3%83%A9%E3%82%A4%E3%83%88%E3%81%95%E3%81%9B%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Markdownプレビューを表示したい、ソースコードはシンタックスハイライトさせたい</h2>\n\n<p><a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">marked</a>と<a href=\"https://github.com/isagalaev/highlight.js\" rel=\"nofollow noopener\" target=\"_blank\">highlight.js</a>を組み合わせて使います。<br>\n<a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">marked</a>のReadmeを見ればなんとなくわかりますが、Angularの仕組みに乗せる必要があるのでPipeやらServiceやらを作ります。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">markdown-parse.service.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">marked</span> <span class=\"k\">from</span> <span class=\"s1\">'marked'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">hljs</span> <span class=\"k\">from</span> <span class=\"s1\">'highlight.js'</span><span class=\"p\">;</span>\n\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MarkdownParseService</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">marked</span><span class=\"p\">.</span><span class=\"nx\">setOptions</span><span class=\"p\">({</span>\n      <span class=\"na\">highlight</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">hljs</span><span class=\"p\">.</span><span class=\"nx\">highlightAuto</span><span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">).</span><span class=\"nx\">value</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"na\">rawText</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">marked</span><span class=\"p\">(</span><span class=\"nx\">rawText</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">markdown.pipe.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nx\">marked</span> <span class=\"k\">from</span> <span class=\"s1\">'marked'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MarkdownParseService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./markdown-parse.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'toMarkdown'</span> <span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MarkdownParsePipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">markdownParseService</span><span class=\"p\">:</span> <span class=\"nx\">MarkdownParseService</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">any</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">markdownParseService</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>HTMLで下記のように指定します。<code>{{}}</code>だとサニタイズされてしまうので<code>innerHTML</code>属性を指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">innerHTML</span><span class=\"err\">]=\"</span><span class=\"na\">md</span> <span class=\"err\">|</span> <span class=\"na\">toMarkdown</span><span class=\"err\">\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://qiita.com/daikiojm/items/e02e2aeb0231b3620a0b\" id=\"reference-9001a931765f8f52acaf\">Qiita AngularでMarkdownをHTMLとして表示するカスタムpipeを作成する</a></li>\n<li>Github <a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">chjj/marked</a>\n</li>\n</ul>\n\n<h2>\n<span id=\"絞り込み条件付きリストにおいてリストの要素が変更追加削除された時に絞り込み結果をリフレッシュしたい\" class=\"fragment\"></span><a href=\"#%E7%B5%9E%E3%82%8A%E8%BE%BC%E3%81%BF%E6%9D%A1%E4%BB%B6%E4%BB%98%E3%81%8D%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%8C%E5%A4%89%E6%9B%B4%E8%BF%BD%E5%8A%A0%E5%89%8A%E9%99%A4%E3%81%95%E3%82%8C%E3%81%9F%E6%99%82%E3%81%AB%E7%B5%9E%E3%82%8A%E8%BE%BC%E3%81%BF%E7%B5%90%E6%9E%9C%E3%82%92%E3%83%AA%E3%83%95%E3%83%AC%E3%83%83%E3%82%B7%E3%83%A5%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>絞り込み条件付きリストにおいて、リストの要素が変更、追加、削除された時に絞り込み結果をリフレッシュしたい</h2>\n\n<p>リストの絞り込みはPipeで実現しますが、通常Pipeはリストの要素が変更されても再び絞り込みが実施されることはありません。<br>\nこのような場合はPipeアノテーションにて<strong>pureオプションをfalseに設定</strong>ましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"err\">#</span><span class=\"na\">searchUserName</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n  <span class=\"nt\">&lt;li</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let user of (userList | searchUserFilter: searchUserName.value);\"</span> <span class=\"nt\">&gt;</span>{{user.name}}<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">search-user.pipe.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">User</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./user'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'searchUserFilter'</span><span class=\"p\">,</span>\n  <span class=\"na\">pure</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"c1\">// pureをfalseにすることでユーザが変更、追加、削除された時にリフレッシュできる</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SearchFilterPipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">User</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">searchUserName</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">any</span><span class=\"p\">[]</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">searchUserName</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">items</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">searchUserName</span> <span class=\"o\">=</span> <span class=\"nx\">searchUserName</span><span class=\"p\">.</span><span class=\"nx\">toLowerCase</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span> <span class=\"nx\">item</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">userId</span><span class=\"p\">.</span><span class=\"nx\">toLowerCase</span><span class=\"p\">().</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"nx\">searchUserName</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://angular.io/guide/pipes#pure-and-impure-pipes\" rel=\"nofollow noopener\" target=\"_blank\">Angular公式サイト</a></li>\n</ul>\n\n<h2>\n<span id=\"グローバル定数を定義したい\" class=\"fragment\"></span><a href=\"#%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E5%AE%9A%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>グローバル定数を定義したい</h2>\n\n<p>いろんなクラスで使う定数を共通化する時は、単純に<strong>クラスを作ってstaticなメンバとして定数を定義</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">app-settings.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppSettings</span> <span class=\"p\">{</span>\n   <span class=\"kr\">public</span> <span class=\"kr\">static</span> <span class=\"nx\">API_ENDPOINT</span><span class=\"o\">=</span><span class=\"s1\">'http://127.0.0.1:6666/api/'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">SampleService</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">Injectable</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'angular2/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">AppSettings</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app-settings'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SampleService</span> <span class=\"p\">{</span>\n    <span class=\"nx\">sampleMethod</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">AppSettings</span><span class=\"p\">.</span><span class=\"nx\">API_ENDPOINT</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/34986922/define-global-constants-in-angular-2\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"画像が多い画面の初期表示を早くしたい\" class=\"fragment\"></span><a href=\"#%E7%94%BB%E5%83%8F%E3%81%8C%E5%A4%9A%E3%81%84%E7%94%BB%E9%9D%A2%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A1%A8%E7%A4%BA%E3%82%92%E6%97%A9%E3%81%8F%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>画像が多い画面の初期表示を早くしたい</h2>\n\n<p><a href=\"https://github.com/tjoskar/ng-lazyload-image\" rel=\"nofollow noopener\" target=\"_blank\">ng-lazyload-image</a>を使えば画像の遅延ロードを実現できます。<br>\n使い方もとても簡単でimgタグにディレクティブを指定するだけです。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre> <span class=\"nt\">&lt;img</span>\n  <span class=\"err\">[</span><span class=\"na\">defaultImage</span><span class=\"err\">]=\"</span><span class=\"na\">https:</span><span class=\"err\">//</span><span class=\"na\">images</span><span class=\"err\">.</span><span class=\"na\">sample</span><span class=\"err\">.</span><span class=\"na\">com</span><span class=\"err\">/</span><span class=\"na\">photo</span><span class=\"err\">/</span><span class=\"na\">defaultimage</span><span class=\"err\">\"</span> \n  <span class=\"err\">[</span><span class=\"na\">lazyLoad</span><span class=\"err\">]=\"</span><span class=\"na\">https:</span><span class=\"err\">//</span><span class=\"na\">images</span><span class=\"err\">.</span><span class=\"na\">sample</span><span class=\"err\">.</span><span class=\"na\">com</span><span class=\"err\">/</span><span class=\"na\">photo</span><span class=\"err\">/</span><span class=\"na\">sampleimage</span><span class=\"err\">\"</span>\n  <span class=\"err\">[</span><span class=\"na\">offset</span><span class=\"err\">]=\"</span><span class=\"na\">30</span><span class=\"err\">\"</span>\n <span class=\"nt\">&gt;</span>\n</pre></div>\n</div>\n\n<p><em>defaultImage</em><br>\n　即時ロードされる画像のURL、遅延ロードする画像を読み込む間、表示される<br>\n<em>lazyLoad</em><br>\n　遅延ロードする画像のURL<br>\n<em>offset</em><br>\n　スクロールが発生する場合に画面下部の何ピクセル下に来た時にロードを開始するか<br>\n<em>errorImage</em><br>\n　遅延ロード失敗時に表示する画像URL</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/tjoskar/ng-lazyload-image\" rel=\"nofollow noopener\" target=\"_blank\">ng-lazyload-image</a></li>\n</ul>\n\n<h2>\n<span id=\"angular-cliのng-serveコマンドでdistフォルダを一旦削除したくない\" class=\"fragment\"></span><a href=\"#angular-cli%E3%81%AEng-serve%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7dist%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E3%82%92%E4%B8%80%E6%97%A6%E5%89%8A%E9%99%A4%E3%81%97%E3%81%9F%E3%81%8F%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>Angular Cliの<code>ng serve</code>コマンドでdistフォルダを一旦削除したくない</h2>\n\n<p><code>ng serve</code>コマンドは<code>dist</code>フォルダを削除してからtsファイルをトランスコンパイルします。<br>\nそれを防ぐためには、<strong>delete-output-pathオプションをfalse</strong>に指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json　ビルドスクリプト</span></div>\n<div class=\"highlight\"><pre><span class=\"s2\">\"script\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"cp ./resource/* dist &amp;&amp; ng serve --delete-output-path=false\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/angular/angular-cli/issues/4366\" rel=\"nofollow noopener\" target=\"_blank\">angular-cli github issue #4366</a></li>\n</ul>\n\n<h2>\n<span id=\"aotコンパイルが遅いのでなんとかしたい\" class=\"fragment\"></span><a href=\"#aot%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%8C%E9%81%85%E3%81%84%E3%81%AE%E3%81%A7%E3%81%AA%E3%82%93%E3%81%A8%E3%81%8B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>AOTコンパイルが遅いのでなんとかしたい</h2>\n\n<p>なんとかできませんでした。。。(もしかしたら方法があるのかもしれません。誰か教えてください!!!)<br>\nAOTコンパイルはJITコンパイルが検出してくれないHTMLのエラーを警告してくれますが、その反面遅いです。特に<a href=\"https://material.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular Material</a>を使う場合は顕著です。<br>\nそのため、自分の場合は基本的にJITビルドを使い、issueのプルリクをする前など区切りのいいタイミングでAOTビルドしてエラーがないか確認するというように使い分けてました。</p>\n\n<h1>\n<span id=\"2-フロント側angularでのテスト周り\" class=\"fragment\"></span><a href=\"#2-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4angular%E3%81%A7%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A\"><i class=\"fa fa-link\"></i></a>2. フロント側Angularでのテスト周り</h1>\n\n<h2>\n<span id=\"ci環境などでテストが終わらずにタイムアウトしてしまう\" class=\"fragment\"></span><a href=\"#ci%E7%92%B0%E5%A2%83%E3%81%AA%E3%81%A9%E3%81%A7%E3%83%86%E3%82%B9%E3%83%88%E3%81%8C%E7%B5%82%E3%82%8F%E3%82%89%E3%81%9A%E3%81%AB%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%97%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86\"><i class=\"fa fa-link\"></i></a>CI環境などでテストが終わらずにタイムアウトしてしまう</h2>\n\n<p>CirleCiなどでテストを実行する場合<code>ng test</code>コマンドだとプロセスが終了しないためタイムアウトで失敗してしまいます。<br>\nこのような場合は<strong>watchオプションをfalseに設定</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ng test --wtach=false\n</pre></div></div>\n\n<p><strong>参考サイト</strong><br>\n<a href=\"https://github.com/angular/angular-cli/issues/362\" rel=\"nofollow noopener\" target=\"_blank\">Github isssue</a></p>\n\n<h2>\n<span id=\"テスト時にerror-timeout---async-callback-was-not-invoked-within-timeout-specified-by-jasminedefault_timeout_intervalやfailed-to-execute-send-on-xmlhttprequestのエラー\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E6%99%82%E3%81%ABerror-timeout---async-callback-was-not-invoked-within-timeout-specified-by-jasminedefault_timeout_interval%E3%82%84failed-to-execute-send-on-xmlhttprequest%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>テスト時に「Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.」や「Failed to execute 'send' on 'XMLHttpRequest'」のエラー</h2>\n\n<p>このような場合は、一時的に<code>ng test</code>コマンドのオプションに<strong><code>-sm=false</code>を追加</strong>してテストし直すと根本原因エラーメッセージで出力されるようになります。<br>\n大抵の場合は自作したモッククラスに必要なメソッドがないことが原因です。</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/45399079/angular-tests-failing-with-failed-to-execute-send-on-xmlhttprequest\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト用に子コンポーネントをモック化したい\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%94%A8%E3%81%AB%E5%AD%90%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E3%83%A2%E3%83%83%E3%82%AF%E5%8C%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト用に子コンポーネントをモック化したい</h2>\n\n<p>意外と簡単で、TestBed#configureTestingModuleで<br>\ndeclarationsに自作したモックの子コンポーネントを追加するだけです。<br>\ninput,outputがあれば必要に応じてメンバ定義します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\"><div class=\"highlight\"><pre><span class=\"c1\">// ※import文は省略</span>\n\n<span class=\"c1\">// モックの子コンポーネントを定義</span>\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-child'</span><span class=\"p\">,</span> <span class=\"c1\">// 子コンポーネントと同じものを定義</span>\n  <span class=\"na\">template</span><span class=\"p\">:</span> <span class=\"s1\">'&lt;p&gt;Mock Child Component&lt;/p&gt;'</span>\n<span class=\"p\">})</span>\n<span class=\"kd\">class</span> <span class=\"nx\">MockClildComponent</span> <span class=\"p\">{</span>\n  <span class=\"p\">@</span><span class=\"nd\">Input</span><span class=\"p\">()</span> <span class=\"nx\">childInput</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"p\">@</span><span class=\"nd\">Output</span><span class=\"p\">()</span> <span class=\"nx\">childOutput</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">EventEmitter</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// ...</span>\n\n<span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n    <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"c1\">// テスト時のdeclarationsにモックの定義を追加</span>\n      <span class=\"nx\">MockProductSettingsComponent</span><span class=\"p\">,</span>\n      <span class=\"c1\">// ...</span>\n    <span class=\"p\">],</span>\n    <span class=\"c1\">// ...</span>\n  <span class=\"p\">});</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">});</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/41240163/mocking-child-components-angular-2\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト結果にangular-materilaのスタイルが反映されない\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%B5%90%E6%9E%9C%E3%81%ABangular-materila%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%8C%E5%8F%8D%E6%98%A0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト結果にAngular Materilaのスタイルが反映されない</h2>\n\n<p>UIフレームワークで<a href=\"https://material.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular Material</a>を使っている場合、<br>\n<code>karma.config.js</code>でAngular Materilaのcssを直接読み込んであげる必要あります。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">karma.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"err\">・・・</span>\n      <span class=\"c1\">// Angular Materialのスタイルをテスト開始時に読み込んでおく</span>\n      <span class=\"p\">{</span><span class=\"nl\">pattern</span><span class=\"p\">:</span> <span class=\"s1\">'./node_modules/@angular/material/prebuilt-themes/indigo-pink.css'</span><span class=\"p\">,</span> <span class=\"nx\">included</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">watched</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">},</span>\n<span class=\"p\">],</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/angular/material2/issues/4056\" rel=\"nofollow noopener\" target=\"_blank\">stackoverflow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト結果にstylesscssアプリ共通のスタイル定義のスタイルが反映されない\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%B5%90%E6%9E%9C%E3%81%ABstylesscss%E3%82%A2%E3%83%97%E3%83%AA%E5%85%B1%E9%80%9A%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E5%AE%9A%E7%BE%A9%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%8C%E5%8F%8D%E6%98%A0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト結果にstyles.scss(アプリ共通のスタイル定義)のスタイルが反映されない</h2>\n\n<p>アプリ共通スタイルをSASS形式にしている場合<br>\n開発用ライブライに<code>karma-scss-preprocessor</code>と<code>node-sass</code>を追加して<code>karma.conf.js</code>を下記のように設定します。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">karma.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"err\">・・・</span>\n<span class=\"err\">　</span> <span class=\"c1\">// プラグインに`karma-scss-preprocessor`を追加</span>\n  <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'karma-scss-preprocessor'</span><span class=\"p\">)</span>\n<span class=\"p\">],</span>\n\n\n<span class=\"nx\">files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"err\">・・・</span>\n  <span class=\"c1\">// filesにアプリ共通スタイルを追加</span>\n  <span class=\"p\">{</span> <span class=\"nl\">pattern</span><span class=\"p\">:</span> <span class=\"s1\">'./src/styles.scss'</span><span class=\"p\">,</span> <span class=\"nx\">watched</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>  <span class=\"nx\">included</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">served</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n<span class=\"p\">],</span>\n\n<span class=\"c1\">// preprocessorsを追加</span>\n<span class=\"nx\">preprocessors</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n <span class=\"s1\">'./src/test.ts'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'@angular/cli'</span><span class=\"p\">],</span>\n <span class=\"s1\">'./src/styles.scss'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'scss'</span><span class=\"p\">]</span>\n<span class=\"p\">},</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong>:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/44460733/how-to-configure-karma-to-include-global-scss-files-for-an-angular-cli-project/44498689#44498689\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n<li><a href=\"https://github.com/karma-runner/karma/issues/2700\" rel=\"nofollow noopener\" target=\"_blank\">Github karma/issue/2700</a></li>\n</ul>\n\n<h1>\n<span id=\"3-バックエンド側-expressmongodb周り\" class=\"fragment\"></span><a href=\"#3-%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89%E5%81%B4-expressmongodb%E5%91%A8%E3%82%8A\"><i class=\"fa fa-link\"></i></a>3. バックエンド側 Express、MongoDB周り</h1>\n\n<p>※MongDBをNode.jsで扱う場合は<a href=\"https://github.com/Automattic/mongoose\" rel=\"nofollow noopener\" target=\"_blank\">mongoose</a>という便利なライブラリがあるのでそれを使う前提のお話です。</p>\n\n<h2>\n<span id=\"mongooseのvirtualメソッドを使う\" class=\"fragment\"></span><a href=\"#mongoose%E3%81%AEvirtual%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>mongooseのvirtualメソッドを使う</h2>\n\n<p>例えば<code>記事</code>,<code>コメント</code>,<code>リプライ</code>などのモデルを定義する場合、<br>\n３つのモデルのライフサイクルは、記事追加 =&gt; 記事に対するコメント追加 =&gt; コメントに対するリプライ追加　のようになります。<br>\nこのような場合は、コメントが記事の参照を持ち、リプライがコメントの参照を持つモデル構造が望ましいです。コメントやリプライ追加時に１つのモデルの更新だけですむからです。<br>\n<a href=\"https://camo.qiitausercontent.com/129a84bd908d87c7fcbda29704ad50ac10529129/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393361633065362d333137652d316364662d626662612d3133353331653234353562612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/129a84bd908d87c7fcbda29704ad50ac10529129/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393361633065362d333137652d316364662d626662612d3133353331653234353562612e706e67\" alt=\"db構造_良.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f93ac0e6-317e-1cdf-bfba-13531e2455ba.png\"></a></p>\n\n<p>ただ記事の検索は少し工夫が必要で、<strong>mongooseのvirtualを使います</strong>。これによって記事からコメントへの参照、コメントからリプライへの参照を擬似的に定義できるため、<br>\n検索時に擬似要素をpopulateするだけで、記事に紐付くコメントとリプライを取得できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/bd8d4eedcb08eeaca13290e8dc91b8b2e10c5dae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34616162376633382d316631392d653030622d623335642d3233626162663336613735622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/bd8d4eedcb08eeaca13290e8dc91b8b2e10c5dae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34616162376633382d316631392d653030622d623335642d3233626162663336613735622e706e67\" alt=\"mongoose virtualのイメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/4aab7f38-1f19-e00b-b35d-23babf36a75b.png\"></a></p>\n\n<p>具体的なソースコードを示します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">article.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">ArticleSchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">content</span><span class=\"p\">:</span> <span class=\"nb\">String</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">toJSON</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">virtuals</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"p\">});</span>\n\n\n<span class=\"c1\">// 記事に紐付くコメントモデルの配列をcommentsという擬似要素で定義する</span>\n<span class=\"nx\">ArticleSchema</span><span class=\"p\">.</span><span class=\"nx\">virtual</span><span class=\"p\">(</span><span class=\"s1\">'comments'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Comment'</span><span class=\"p\">,</span>\n  <span class=\"na\">localField</span><span class=\"p\">:</span> <span class=\"s1\">'_id'</span><span class=\"p\">,</span>\n  <span class=\"na\">foreignField</span><span class=\"p\">:</span> <span class=\"s1\">'articleId'</span><span class=\"p\">,</span>\n  <span class=\"na\">justOne</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Article</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Article'</span><span class=\"p\">,</span> <span class=\"nx\">ArticleSchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Article</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">comment.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">CommentSchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">articleId</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">.</span><span class=\"nx\">Types</span><span class=\"p\">.</span><span class=\"nx\">ObjectId</span><span class=\"p\">,</span>\n    <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Article'</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">comment</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">;</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">toJSON</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">virtuals</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"p\">});</span>\n\n<span class=\"c1\">// コメントに紐付くリプライモデルの配列をrepliesという擬似要素で定義する</span>\n<span class=\"nx\">CommentSchema</span><span class=\"p\">.</span><span class=\"nx\">virtual</span><span class=\"p\">(</span><span class=\"s1\">'replies'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Reply'</span><span class=\"p\">,</span>\n  <span class=\"na\">localField</span><span class=\"p\">:</span> <span class=\"s1\">'_id'</span><span class=\"p\">,</span>\n  <span class=\"na\">foreignField</span><span class=\"p\">:</span> <span class=\"s1\">'commentId'</span><span class=\"p\">,</span>\n  <span class=\"na\">justOne</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Comment</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Comment'</span><span class=\"p\">,</span> <span class=\"nx\">CommentSchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Comment</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">reply.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">ReplySchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">commentId</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">.</span><span class=\"nx\">Types</span><span class=\"p\">.</span><span class=\"nx\">ObjectId</span><span class=\"p\">,</span>\n    <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Comment'</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">reply</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Reply</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Reply'</span><span class=\"p\">,</span> <span class=\"nx\">ReplySchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Reply</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">検索処理</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">Article</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">()</span>\n<span class=\"p\">.</span><span class=\"nx\">populate</span><span class=\"p\">({</span>\n  <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"s1\">'comments'</span><span class=\"p\">,</span> <span class=\"c1\">// Articleモデルで定義した擬似要素commentsをpopulateする</span>\n  <span class=\"na\">populate</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"s1\">'replies'</span><span class=\"p\">,</span> <span class=\"c1\">// Commentモデルで定義した擬似要素repliesをpopulateする</span>\n  <span class=\"p\">}],</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"リクエストレスポンスのログ出力したい\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%81%AE%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>リクエスト、レスポンスのログ出力したい</h2>\n\n<p>Expressのuseにて実現します。<br>\nレスポンスオブジェクトのfinishイベントを監視することで、レスポンス時にログを出力しています。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">リクエストとレスポンスのログ出力　※ここでは簡単のためコンソールに出力しています</span></div>\n<div class=\"highlight\"><pre><span class=\"kd\">const</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n<span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"nx\">accessLogHandler</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n  <span class=\"c1\">// リクエスト時のログ　</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">([</span>\n    <span class=\"s1\">'start'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'x-forwarded-for'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span>\n    <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">referer</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'user-agent'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'--ms--'</span>\n  <span class=\"p\">].</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">',</span><span class=\"err\">\\</span><span class=\"s1\">t'</span><span class=\"p\">));</span>\n\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">once</span><span class=\"p\">(</span><span class=\"s1\">'finish'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"err\">　　</span> <span class=\"c1\">// レスポンス時のログ</span>\n    <span class=\"nx\">accessLogger</span><span class=\"p\">.</span><span class=\"nx\">info</span><span class=\"p\">([</span>\n      <span class=\"s1\">'end'</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'x-forwarded-for'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">referer</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'user-agent'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'--'</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">getMilliseconds</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"nx\">start</span><span class=\"p\">.</span><span class=\"nx\">getMilliseconds</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"s1\">'ms--'</span>\n    <span class=\"p\">].</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">',</span><span class=\"err\">\\</span><span class=\"s1\">t'</span><span class=\"p\">));</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">next</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<p>実際のログはこんな感じで出力されます。</p>\n\n<div class=\"code-frame\" data-lang=\"py3\"><div class=\"highlight\"><pre><span class=\"n\">start</span><span class=\"p\">,</span>  <span class=\"p\">::</span><span class=\"n\">ffff</span><span class=\"p\">:</span><span class=\"mf\">127.0</span><span class=\"o\">.</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">authenticate</span><span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"p\">,</span>   <span class=\"o\">-</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">4200</span><span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"n\">Mozilla</span><span class=\"o\">/</span><span class=\"mf\">5.0</span> <span class=\"p\">(</span><span class=\"n\">Macintosh</span><span class=\"p\">;</span> <span class=\"n\">Intel</span> <span class=\"n\">Mac</span> <span class=\"n\">OS</span> <span class=\"n\">X</span> <span class=\"mi\">10</span><span class=\"n\">_12_6</span><span class=\"p\">)</span> <span class=\"n\">AppleWebKit</span><span class=\"o\">/</span><span class=\"mf\">537.36</span> <span class=\"p\">(</span><span class=\"n\">KHTML</span><span class=\"p\">,</span> <span class=\"n\">like</span> <span class=\"n\">Gecko</span><span class=\"p\">)</span> <span class=\"n\">Chrome</span><span class=\"o\">/</span><span class=\"mf\">62.0</span><span class=\"o\">.</span><span class=\"mf\">3202.94</span> <span class=\"n\">Safari</span><span class=\"o\">/</span><span class=\"mf\">537.36</span><span class=\"p\">,</span> <span class=\"o\">--</span><span class=\"n\">ms</span><span class=\"o\">--</span>\n<span class=\"n\">end</span><span class=\"p\">,</span>    <span class=\"p\">::</span><span class=\"n\">ffff</span><span class=\"p\">:</span><span class=\"mf\">127.0</span><span class=\"o\">.</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"p\">,</span>                  <span class=\"mi\">403</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">4200</span><span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"n\">Mozilla</span><span class=\"o\">/</span><span class=\"mf\">5.0</span> <span class=\"p\">(</span><span class=\"n\">Macintosh</span><span class=\"p\">;</span> <span class=\"n\">Intel</span> <span class=\"n\">Mac</span> <span class=\"n\">OS</span> <span class=\"n\">X</span> <span class=\"mi\">10</span><span class=\"n\">_12_6</span><span class=\"p\">)</span> <span class=\"n\">AppleWebKit</span><span class=\"o\">/</span><span class=\"mf\">537.36</span> <span class=\"p\">(</span><span class=\"n\">KHTML</span><span class=\"p\">,</span> <span class=\"n\">like</span> <span class=\"n\">Gecko</span><span class=\"p\">)</span> <span class=\"n\">Chrome</span><span class=\"o\">/</span><span class=\"mf\">62.0</span><span class=\"o\">.</span><span class=\"mf\">3202.94</span> <span class=\"n\">Safari</span><span class=\"o\">/</span><span class=\"mf\">537.36</span><span class=\"p\">,</span>  <span class=\"o\">--</span><span class=\"mi\">47</span><span class=\"n\">ms</span><span class=\"o\">--</span>\n</pre></div></div>\n\n<h2>\n<span id=\"ログ出力でオブジェクトの全プロパティを出力したい\" class=\"fragment\"></span><a href=\"#%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E3%81%A7%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%85%A8%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%82%92%E5%87%BA%E5%8A%9B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>ログ出力でオブジェクトの全プロパティを出力したい</h2>\n\n<p>オブジェクトの中身をログで確認する時はNode.jsの<code>util.inspect()</code>を使います。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre><span class=\"kd\">const</span> <span class=\"nx\">util</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'util'</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">myObject</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"s2\">\"a\"</span><span class=\"p\">:</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span>\n   <span class=\"s2\">\"b\"</span><span class=\"p\">:{</span>\n      <span class=\"s2\">\"c\"</span><span class=\"p\">:</span><span class=\"s2\">\"c\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"d\"</span><span class=\"p\">:{</span>\n         <span class=\"s2\">\"e\"</span><span class=\"p\">:</span><span class=\"s2\">\"e\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"f\"</span><span class=\"p\">:{</span>\n            <span class=\"s2\">\"g\"</span><span class=\"p\">:</span><span class=\"s2\">\"g\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"h\"</span><span class=\"p\">:{</span>\n               <span class=\"s2\">\"i\"</span><span class=\"p\">:</span><span class=\"s2\">\"i\"</span>\n            <span class=\"p\">}</span>\n         <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">};</span> \n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">util</span><span class=\"p\">.</span><span class=\"nx\">inspect</span><span class=\"p\">(</span><span class=\"nx\">myObject</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">));</span>\n</pre></div></div>\n\n<p>このようなログが出力されます</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>{ a: 'a', b: { c: 'c', d: { e: 'e', f: [Object] } } }\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/10729276/how-can-i-get-the-full-object-in-node-jss-console-log-rather-than-object\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"環境変数で上書きできる定数を定義したい\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%81%A7%E4%B8%8A%E6%9B%B8%E3%81%8D%E3%81%A7%E3%81%8D%E3%82%8B%E5%AE%9A%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>環境変数で上書きできる定数を定義したい</h2>\n\n<p>例えばサーバのポートなど環境個別に設定したくなるようなものは<br>\n環境変数で上書きできる定数にしておくと便利です。<br>\nNode.jsではprocess.env.変数名で環境変数が参照できるので下記のようにします。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">定数定義</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_PORT</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">SERVER_PORT</span> <span class=\"o\">||</span> <span class=\"s1\">'3000'</span><span class=\"p\">;</span><span class=\"err\">　</span><span class=\"c1\">// 環境変数SERVER_PORTが未指定の場合は3000となる</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_HOST</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">SERVER_HOST</span> <span class=\"o\">||</span> <span class=\"s1\">'localhost'</span><span class=\"p\">;</span> <span class=\"c1\">// 環境変数SERVER_HOSTが未指定の場合はlocalhostとなる</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"db初回アクセスに失敗した場合にリトライされない\" class=\"fragment\"></span><a href=\"#db%E5%88%9D%E5%9B%9E%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%AB%E5%A4%B1%E6%95%97%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AB%E3%83%AA%E3%83%88%E3%83%A9%E3%82%A4%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>DB初回アクセスに失敗した場合にリトライされない</h2>\n\n<p>mongooseを使っていると、DB初回接続時にエラーが起きた時に、なぜか再接続処理してくれません。<br>\nDockerでアプリを配布する場合、アプリとMongoDBをdocker-composeで同時に立ち上げることがあると思いますが、まだMongoDBが起動しきってない状態でアプリからDBに接続しようとすると、アプリが異常終了してしまいます。これを防ぐには自力で再接続処理を実装する必要があります。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre><span class=\"kd\">function</span> <span class=\"nx\">createConnection</span> <span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">createConnection</span><span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">(</span><span class=\"sr\">/failed to connect to server .* on first connect/</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(),</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">));</span>\n\n            <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Retrying first connect...\"</span><span class=\"p\">);</span>\n                <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">openUri</span><span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">).</span><span class=\"k\">catch</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n            <span class=\"c1\">// 20秒後に再接続する</span>\n            <span class=\"p\">},</span> <span class=\"mi\">20</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(),</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">once</span><span class=\"p\">(</span><span class=\"s1\">'open'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Connection to db established.\"</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">db</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/Automattic/mongoose/issues/5169\" rel=\"nofollow noopener\" target=\"_blank\">Github mongooseのissue5169</a></li>\n</ul>\n","body":"[FUJITSU Advent Calendar 2017](https://qiita.com/advent-calendar/2017/fujitsu) 12日目の記事です。\n\nリッチでイマドキなデザインのアプリが作りたくて、\nここ４ヶ月ほど**MEAN**スタック(**M**ongoDB+**E**xpress+**A**ngular+**N**ode.js)でブログアプリを作っています。\n知識ゼロからのスタートでしたが、多くの方々がブログやStackOverFlowに情報を載せてくれているので、躓きながらもなんとかアプリ開発を進めることができました。\n\nこの記事では、フロントエンド初心者の自分がMEANスタックでアプリを作る時に躓いたことや、こういう機能を実現するにはどうすればいいか?などをまとめています。\nこれからをAngularを学ぼうとしている方、ExpressやMongoDBなどサーバーサイドJavaScriptを学ぼうとしている方の参考になればうれしいです。\n\n## アプリの紹介\n本線から脱線しますが、イントラでの使用を想定したQiitaのようなブログアプリです。デモ環境もあるのでよければ触ってみてください(モバイルには未対応ですが。。。)\n\n* [Github](https://github.com/Takumon/mean-blog)\n* [Dockerhub](https://hub.docker.com/r/takumon/mean-blog_auto/)\n* [デモ環境](https://material-blog-demo.herokuapp.com/) (ユーザID/パスは DemoUser / DemoUser1234# です)\n\nアプリキャプチャ その１ (記事詳細)\n![appdemo_detail.png](https://qiita-image-store.s3.amazonaws.com/0/49915/b8133317-fac2-bb9b-8f2d-13db896becf5.png)\n\nアプリキャプチャ その２ (記事一覧)\n![アプリ_スクリーンキャプチャ_記事一覧.png](https://qiita-image-store.s3.amazonaws.com/0/49915/950d1062-1ba4-63f6-fe53-cfe6d46430a4.png)\n\nアプリキャプチャ その３ (プロフィール)\n![アプリ_スクリーンキャプチャ_ ユーザ画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/325c7948-ce16-9c08-0b66-d3892e046aed.png)\n\n# 1. フロント側Angularまわり\n## Angularについて調べる時に古い情報を除外したい\n1系は`AngularJS`、2系以降は`Angular`と呼ばれており、1系と2系以降では大きく仕様が異なります。\nそのため検索する時は`Angualr2`などバージョンを指定したり、1系を除外するため\u001e`--AngularJS`をつけたり\u001dすると検索しやすいです。\n\n## HTMLのDOM\b要素を、別のDOM要素またはComponentから扱いたい\n要素に`#xxxxx`\bのように`#`始まりの名前をつけると、別の\bDOM要素から参照できます\n\n```html:HTML\n<input #phone placeholder=\"電話番号\"/>\n<!--  他のDOM要素からphonという変数名でDOM要素を参照できるようになる -->\n<button >(click)=\"callPhone\b(phone.value)\">\n```\n\n\bComponentから参照する場合は`@ViewChild`を使います\n\n```typescript:Component\n  // \bViewChildの引数に\b\b名前を文字列で指定します\n  @ViewChild('phone') phoneElement: phoneElement;\n\n  showPhoneValue() {\n    console.log(this.phoneElement.value);\n    )\n  }\n```\n\n\b**参考サイト**\n\n* [Angular公式サイト](https://angular.io/guide/template-syntax#ref-vars)\n* [StackOverFlow](https://stackoverflow.com/questions/32693061/how-can-i-select-an-element-in-a-component-template)\n\n\n\n## Routing時の認証を非同期で行いたい\nURLごとの認証は`CanActivate`インターフェースを実装すればできますが、\nサーバから認証情報を取得して非同期で認証したい場合もあると思います。\nそのような時は、**`CanActivate#canActivate`で**booleanの代わりに**Observable<boolean>を戻り値に指定する**ことで実現できます。\n\n\n```typescript:SampleAuthGuard\nimport { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs/Rx';\n\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable()\nexport class SampleAuthGuard implements CanActivate {\n\n  constructor(\n    private auth: AuthenticationService,\n  ) { }\n\n  // booleanではなくObservable<boolean>を戻り値で返す\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.auth.checkState()\n      .map(res => true)\n      .catch(err => Observable.of(false))\n  }\n}\n\n```\n\n\b**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/38425461/angular2-canactivate-calling-async-function)\n\n## FormArrayの値を初期化したい\nFormControlはpatchValueで初期値を設定できますが、\nFormArrayの場合patch\bValueで配列の値を設定しようと\bしても設定できません。\n\bこういう場合は、**\b\b配列1つ１つの値をもとにFormControlを生成してFormArrayにpush**します。\n\n```typescript:ダメな例\nngOnInit() {\n  // Form生成\n  this.form = this.formBuilder.group({\n    schoolName: '',\n    students: this.formBuilder.array([])\n  });\n\n  // Formに初期値を設定\n  this.form.pathValue({\n    schooleName: 'SampleSchoolName' // FormControlの値の初期化はpatchValueで可能\n    students: ['taro', 'jiro', 'saburo']; // FormArrayに要素を追加する場合patchValueでは不可能\n  });\n}\n```\n\n```typescript:\b良い例\nngOnInit() {\n  // Formを生成\n  this.form = this.formBuilder.group({\n    schoolName: '',\n    students: this.formBuilder.array([])\n  });\n\n  // Formに初期値を設定\n  this.form.pathValue({\n    schooleName: 'SampleSchoolName'\n  });\n\n  // データからFormControlを生成し１件１件FormArrayにpushする\n  ['taro', 'jiro', 'saburo'].forEach(student -> {\n    this.form.controls['students'].push(new FormControll(student));\n  });\n}\n```\n\n\b**参考サイト**\n\n* [StackOvereFlow](https://stackoverflow.com/questions/40916084/angular2-patchvalue-push-value-into-array)\n\n## 「ERROR Error: No provider for TemplateRef!」というエラー\n最初このエラーが出た時は、何が原因なのかわからずに困りました。。。\n大抵の場合は、**`*ngIf`や`*ngForm`の`*`が抜けてることが原因**です(要するにただのタイポです。。。)\n`*`が抜けると、Angularは`ngIf`をディレクティブとして解釈しようとしますが、\n\bそんな\b\bディレクティブは存在しないので`No provider for TemplateRef!`と言われてしまうそうです。\n\n\b**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/35932074/angular2-no-provider-for-templateref-ngif-templateref)\n\n\n## textareaにおいてTabキーでインデントしたい\n文書を入力するようなテキストエリアの場合に、\u001dTabキーでのインデントしたい場合は、\n\bkyedownイベント発生時に\bテキストエリアの値とキャレットの位置を操作することで実現可能です。\n\n```html:HTML\n<textarea #sampletextarea\n  (keydown)=\"indent($event, sampletextarea)\" ></textarea>\n```\n\n```typescript:Component\n  indent($event, sampleTextAreaElement) {\n    // Tabキー押下時\n    if ($event.keyCode === 9) {\n      \b// 次の要素に\bフォーカスが移らないようにする\n      $event.preventDefault();\n\n      // 現在のキャレット位置を取得\n      \bconst caretStart = textareaElement.selectionStart;\n      const caretEnd = textareaElement.selectionEnd;\n\n      // テキストエリアの値を\b取得し、キャレット位置にTabを挿入\n      const TAB = '¥t';\n      sampleTextAreaElement.value = sampleTextAreaElement.value.substring(0, caretStart)\n                     + TAB + sampleTextAreaElement.value.substring(caretStart, value.length);\n\n      // キャレット位置をTab分ずらす\n      sampleTextAreaElement.focus();\n      sampleTextAreaElement.setSelectionRange(caretStart + TAB.length, caretEnd + TAB.length);\n\n      return;\n    }\n  }\n\n```\n\n\n\n## \bMarkdownプレビューを\b表示したい、ソースコードはシンタックスハイライトさせたい\n[marked](https://github.com/chjj/marked)と[highlight.js](https://github.com/isagalaev/highlight.js)を組み合わせて使います。\n[marked](https://github.com/chjj/marked)のReadmeを見ればなんとなくわかりますが、Angularの仕組みに乗せる必要があるのでPipeやらServiceやらを作ります。\n\n```typescript:markdown-parse.service.ts\nimport { Injectable } from '@angular/core';\nimport marked from 'marked';\nimport hljs from 'highlight.js';\n\n\n@Injectable()\nexport class MarkdownParseService {\n\n  constructor() {\n    marked.setOptions({\n      highlight: function (code) {\n        return hljs.highlightAuto(code).value;\n      }\n    });\n  }\n\n  parse(rawText: string) {\n    return marked(rawText);\n  }\n}\n```\n\n\n```typescript:markdown.pipe.ts\nimport marked from 'marked';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { MarkdownParseService } from './markdown-parse.service';\n\n@Pipe({ name: 'toMarkdown' })\nexport class MarkdownParsePipe implements PipeTransform {\n  constructor(markdownParseService: MarkdownParseService) {}\n\n  transform(value: string): any {\n    return this.markdownParseService.parse(value);\n  }\n}\n```\n\nHTMLで下記のように指定します。`{{}}`だと\bサニタイズされてしまうので\b`innerHTML`属性を指定します。\n\n```html\n<div [innerHTML]=\"md | toMarkdown\"></div>\n```\n\n\n\b**参考サイト**\n\n* [Qiita AngularでMarkdownをHTMLとして表示するカスタムpipeを作成する](https://qiita.com/daikiojm/items/e02e2aeb0231b3620a0b)\n* Github [chjj/marked](https://github.com/chjj/marked)\n\n\n\n\n## 絞り込み条件付きリストにおいて、リストの要素が\b変更、追加\b、削除された時に絞り込み結果をリフレッシュしたい\nリストの絞り込みはPipeで実現しますが、通常Pipeはリストの要素が変更されても再び絞り込みが実施されることはありません。\nこのような場合はPipeアノテーションにて**pureオプションをfalseに設定**ましょう。\n\n```html:HTML\n<input type=\"text\" #searchUserName>\n<ul>\n  <li *ngFor=\"let user of (userList | searchUserFilter: searchUserName.value);\" >{{user.name}}</li>\n<ul>\n```\n\n```typescript:search-user.pipe.ts\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { User } from './user';\n\n@Pipe({\n  name: 'searchUserFilter',\n  pure: false // pureをfalseにすることでユーザが変更、追加、削除された時にリフレッシュできる\n})\nexport class SearchFilterPipe implements PipeTransform {\n  transform(items: Array<User>, searchUserName: string): any[] {\n    if (!searchUserName) return items;\n\n    searchUserName = searchUserName.toLowerCase();\n    return items.filter( item => item.user.userId.toLowerCase().includes(searchUserName));\n  }\n}\n```\n\n\b**参考サイト**\n\n* [Angular公式サイト](https://angular.io/guide/pipes#pure-and-impure-pipes)\n\n\n\n\n## グローバル定数を定義したい\nいろんなクラスで使う定数を\b共通\b化する時は、単純に**クラスを作ってstaticなメンバとして定数を定義**します。\n\n```typescript:app-settings.ts\nexport class AppSettings {\n   public static API_ENDPOINT='http://127.0.0.1:6666/api/';\n}\n```\n\n```typescript:SampleService\nimport {Injectable} from 'angular2/core';\nimport {AppSettings} from './app-settings';\n\n@Injectable()\nexport class SampleService {\n    \bsampleMethod() {\n      console.log(AppSettings.API_ENDPOINT);\n    }\n}\n```\n\n**参考**\n\n* [StackOverFlow](https://stackoverflow.com/questions/34986922/define-global-constants-in-angular-2)\n\n\n## 画像が多い画面の初期表示を早くしたい\n[ng-lazyload-image](https://github.com/tjoskar/ng-lazyload-image)を使えば画像の遅延ロードを実現できます。\n使い方もとても簡単でimgタグにディレクティブを指定するだけです。\n\n```html:HTML\n <img\n  [defaultImage]=\"https://images.sample.com/photo/defaultimage\" \n  [lazyLoad]=\"https://images.sample.com/photo/sampleimage\"\n  [offset]=\"30\"\n >\n```\n\n*defaultImage*\n　即時ロードされる画像のURL、遅延ロードする画像を読み込む間、表示される\n*lazyLoad*\n　遅延ロードする画像のURL\n*offset*\n　スクロールが発生する場合に画面下部の何ピクセル下に来た時にロードを開始するか\n*errorImage*\n　遅延ロード失敗時に表示する画像URL\n\n**参考サイト**\n\n* [ng-lazyload-image](https://github.com/tjoskar/ng-lazyload-image)\n\n\n## Angular Cliの`ng serve`コマンドでdistフォルダを一旦削除したくない\n`ng serve`コマンドは`dist`フォルダを削除してからtsファイルをトランスコンパイルします。\nそれを防ぐためには、**delete-output-pathオプションをfalse**に指定します。\n\n```json:package.json　ビルドスクリプト\n\"script\": {\n  \"build\": \"cp ./resource/* dist && ng serve --delete-output-path=false\"\n}\n```\n\n\b**参考サイト**\n\n* [angular-cli github issue #4366](https://github.com/angular/angular-cli/issues/4366)\n\n\n## AOTコンパイルが遅いのでなんとかしたい\nなんとかできませんでした。。。(もしかしたら方法があるのかもしれません。誰か教えてください!!!)\nAOTコンパイルはJITコンパイルが検出してくれないHTMLのエラーを警告してくれますが、その反面遅いです。特に[Angular Material](https://material.angular.io/)を使う場合は顕著です。\nそのため、自分の場合は基本的にJITビルドを使い、issueのプルリクをする前など区切りのいいタイミングでAOTビルドしてエラーがないか確認するというように使い分けてました。\n\n\n# 2. フロント側Angularでのテスト周り\n## CI環境などでテストが終わらずにタイムアウトしてしまう\nCirleCiなどでテストを実行する場合`ng test`コマンドだとプロセスが終了しないためタイムアウトで失敗してしまいます。\nこのような場合は**watchオプションをfalseに設定**します。\n\n```\nng test --wtach=false\n```\n\n**参考サイト**\n[Github isssue](https://github.com/angular/angular-cli/issues/362)\n\n## テスト時に「Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.」や「Failed to execute 'send' on 'XMLHttpRequest'」のエラー\nこのような場合は、一時的に`ng test`コマンドのオプションに**`-sm=false`を追加**してテストし直すと根本原因エラーメッセージで出力されるようになります。\n大抵の場合は自作したモッククラスに必要なメソッドがないことが原因です。\n\n\b**参考サイト**\n\n* [stackOverFlow](https://stackoverflow.com/questions/45399079/angular-tests-failing-with-failed-to-execute-send-on-xmlhttprequest)\n\n\n## テスト用に子コンポーネントをモック化したい\n意外と簡単で、TestBed#configureTestingModuleで\ndeclarationsに自作したモックの子コンポーネントを追加するだけです。\ninput,outputがあれば必要に応じてメンバ定義します。\n\n\n```typescript\n// ※import文は省略\n\n// モックの子コンポーネントを定義\n@Component({\n  selector: 'app-child', // 子コンポーネントと同じものを定義\n  template: '<p>Mock Child Component</p>'\n})\nclass MockClildComponent {\n  @Input() childInput: string;\n  @Output() childOutput = new EventEmitter();\n}\n\n// ...\n\nbeforeEach(() => {\n  TestBed.configureTestingModule({\n    declarations: [\n      // テスト時のdeclarationsにモックの定義を追加\n      MockProductSettingsComponent,\n      // ...\n    ],\n    // ...\n  });\n  // ...\n});\n```\n\n\b**参考サイト**\n\n* [stackOverFlow](https://stackoverflow.com/questions/41240163/mocking-child-components-angular-2)\n\n\n## テスト結果にAngular Materilaのスタイルが反映されない\nUIフレームワークで[Angular Material](https://material.angular.io/)を使っている場合、\n`karma.config.js`でAngular Materilaのcssを直接読み込んであげる必要あります。\n\n```javascript:karma.conf.js\nfiles: [\n      ・・・\n      // Angular Materialのスタイルをテスト開始時に読み込んでおく\n      {pattern: './node_modules/@angular/material/prebuilt-themes/indigo-pink.css', included: true, watched: false},\n],\n```\n\n**参考サイト**\n\n* [stackoverflow](https://github.com/angular/material2/issues/4056)\n\n\n## テスト結果にstyles.scss(アプリ共通のスタイル定義)のスタイルが反映されない\nアプリ共通スタイルをSASS形式にしている場合\n開発用ライブライに`karma-scss-preprocessor`と`node-sass`を追加して`karma.conf.js`を下記のように設定します。\n\n```javascript:karma.conf.js\nplugins: [\n  ・・・\n　 // プラグインに`karma-scss-preprocessor`を追加\n  require('karma-scss-preprocessor')\n],\n\n\nfiles: [\n  ・・・\n  // filesにアプリ共通スタイルを追加\n  { pattern: './src/styles.scss', watched: false,  included: true, served: true }\n],\n\n// preprocessorsを追加\npreprocessors: {\n './src/test.ts': ['@angular/cli'],\n './src/styles.scss': ['scss']\n},\n```\n\n\b**参考サイト**:\n\n* [stackOverFlow](https://stackoverflow.com/questions/44460733/how-to-configure-karma-to-include-global-scss-files-for-an-angular-cli-project/44498689#44498689)\n* [Github karma/issue/2700](https://github.com/karma-runner/karma/issues/2700)\n\n\n\n\n# 3. バックエンド側 Express、MongoDB周り\n※MongDBをNode.jsで扱う場合は[mongoose](https://github.com/Automattic/mongoose)という便利なライブラリがあるのでそれを使う前提のお話です。\n\n## mongooseのvirtualメソッドを使う\n例えば`記事`,`コメント`,`リプライ`などのモデルを定義する場合、\n３つのモデルのライフサイクルは、記事追加 => 記事に対するコメント追加 => コメントに対するリプライ追加　のようになります。\nこのような場合は、コメントが記事の参照を持ち、リプライがコメントの参照を持つモデル構造が望ましいです。コメントやリプライ追加時に１つのモデルの更新だけですむからです。\n![db構造_良.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f93ac0e6-317e-1cdf-bfba-13531e2455ba.png)\n\nただ記事の検索は少し工夫が必要で、**mongooseのvirtualを使います**。これによって記事からコメントへの参照、コメントからリプライへの参照を擬似的に定義できるため、\n検索時に擬似要素をpopulateするだけで、記事に紐付くコメントとリプライを取得できるようになります。\n![mongoose virtualのイメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/4aab7f38-1f19-e00b-b35d-23babf36a75b.png)\n\n具体的なソースコードを示します。\n\n```typescript:article.model.ts\nimport * as mongoose from 'mongoose';\n\nconst ArticleSchema = new mongoose.Schema({\n  content: String\n}, { toJSON: { virtuals: true } });\n\n\n// 記事に紐付くコメントモデルの配列をcommentsという擬似要素で定義する\nArticleSchema.virtual('comments', {\n  ref: 'Comment',\n  localField: '_id',\n  foreignField: 'articleId',\n  justOne: false,\n});\n\nconst Article = mongoose.model('Article', ArticleSchema);\n\nexport { Article };\n```\n\n\n```typescript:comment.model.ts\nimport * as mongoose from 'mongoose';\n\nconst CommentSchema = new mongoose.Schema({\n  articleId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Article',\n  },\n  comment: String;\n}, { toJSON: { virtuals: true } });\n\n// コメントに紐付くリプライモデルの配列をrepliesという擬似要素で定義する\nCommentSchema.virtual('replies', {\n  ref: 'Reply',\n  localField: '_id',\n  foreignField: 'commentId',\n  justOne: false,\n});\n\nconst Comment = mongoose.model('Comment', CommentSchema);\n\nexport { Comment };\n```\n\n```typescript:reply.model.ts\nimport * as mongoose from 'mongoose';\n\nconst ReplySchema = new mongoose.Schema({\n  commentId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Comment'\n  },\n  reply: String;\n});\n\nconst Reply = mongoose.model('Reply', ReplySchema);\n\nexport { Reply };\n```\n\n```typescript:検索処理\nArticle.find()\n.populate({\n  path: 'comments', // Articleモデルで定義した擬似要素commentsをpopulateする\n  populate: [{\n    path: 'replies', // Commentモデルで定義した擬似要素repliesをpopulateする\n  }],\n});\n```\n\n\n## リクエスト、レスポンスのログ出力したい\nExpressのuseにて実現します。\nレスポンスオブジェクトのfinishイベントを監視することで、レスポンス時にログを出力しています。\n\n\n```javascript:リクエストとレスポンスのログ出力　※ここでは簡単のためコンソールに出力しています\nconst express = express();\nexpress.use(function accessLogHandler (req, res, next) {\n  const start = new Date();\n  // リクエスト時のログ　\n  console.log([\n    'start',\n    req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n    req.method,\n    req.url,\n    '-',\n    req.headers.referer || '-',\n    req.headers['user-agent'] || '-',\n    '--ms--'\n  ].join(',\\t'));\n\n  res.once('finish', function() {\n　　 // レスポンス時のログ\n    accessLogger.info([\n      'end',\n      req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n      req.method,\n      req.url,\n      res.statusCode,\n      req.headers.referer || '-',\n      req.headers['user-agent'] || '-',\n      '--' + (new Date().getMilliseconds() - start.getMilliseconds()) + 'ms--'\n    ].join(',\\t'));\n  });\n\n  next();\n});\n```\n\n実際のログはこんな感じで出力されます。\n\n```py3\nstart,  ::ffff:127.0.0.1, GET, /api/authenticate/check-state,   -, http://localhost:4200/, Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36, --ms--\nend,    ::ffff:127.0.0.1, GET, /check-state,                  403, http://localhost:4200/, Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36,  --47ms--\n```\n\n\n\n## ログ出力でオブジェクトの全プロパティを出力したい\nオブジェクトの中身をログで確認する時はNode.jsの`util.inspect()`を使います。\n\n\n```javascript\nconst util = require('util');\nconst myObject = {\n   \"a\":\"a\",\n   \"b\":{\n      \"c\":\"c\",\n      \"d\":{\n         \"e\":\"e\",\n         \"f\":{\n            \"g\":\"g\",\n            \"h\":{\n               \"i\":\"i\"\n            }\n         }\n      }\n   }\n}; \n\nconsole.log(util.inspect(myObject, false, null));\n```\n\nこのようなログが出力されます\n\n```\n{ a: 'a', b: { c: 'c', d: { e: 'e', f: [Object] } } }\n```\n\n**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/10729276/how-can-i-get-the-full-object-in-node-jss-console-log-rather-than-object)\n\n\n## 環境変数で上書きできる定数を定義したい\n例えばサーバのポートなど環境個別に設定したくなるようなものは\n環境変数で上書きできる定数にしておくと便利です。\nNode.jsではprocess.env.変数名で環境変数が参照できるので下記のようにします。\n\n```typescript:定数定義\nexport const SERVER_PORT: string = process.env.SERVER_PORT || '3000';　// 環境変数SERVER_PORTが未指定の場合は3000となる\nexport const SERVER_HOST: string = process.env.SERVER_HOST || 'localhost'; // 環境変数SERVER_HOSTが未指定の場合はlocalhostとなる\n```\n\n\n## DB初回アクセスに失敗した場合にリトライされない\nmongooseを使っていると、DB初回接続時にエラーが起きた時に、なぜか再接続処理してくれません。\nDockerでアプリを配布する場合、アプリとMongoDBをdocker-composeで同時に立ち上げることがあると思いますが、まだMongoDBが起動しきってない状態でアプリからDBに接続しようとすると、アプリが異常終了してしまいます。これを防ぐには自力で再接続処理を実装する必要があります。\n\n```javascript\nfunction createConnection (dbURL, options) {\n    var db = mongoose.createConnection(dbURL, options);\n\n    db.on('error', function (err) {\n        if (err.message && err.message.match(/failed to connect to server .* on first connect/)) {\n            console.log(new Date(), String(err));\n\n            setTimeout(function () {\n                console.log(\"Retrying first connect...\");\n                db.openUri(dbURL).catch(() => {});\n            // 20秒後に再接続する\n            }, 20 * 1000);\n        } else {\n            console.error(new Date(), String(err));\n        }\n    });\n\n    db.once('open', function () {\n        console.log(\"Connection to db established.\");\n    });\n\n    return db;\n}\n```\n\n**参考サイト**\n\n* [Github mongooseのissue5169](https://github.com/Automattic/mongoose/issues/5169)\n\n","comments_count":0,"created_at":"2017-12-12T03:19:11+09:00","likes_count":46,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/270e2fae-ed90-5539-8c90-a2ed93ebba83/","title":"Fessを使用して、Asciidoctorで簡単に全文検索できるようにする","date":"2017-06-26T00:21:37+09:00","excerpt":"Asciidoctorを使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。そこで今回は、Dockerで...","tags":["JavaScript","全文検索","ドキュメント","Fess","asciidoctor","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"270e2fae-ed90-5539-8c90-a2ed93ebba83","title":"Fessを使用して、Asciidoctorで簡単に全文検索できるようにする","rendered_body":"<p><a href=\"http://asciidoctor.org/\" rel=\"nofollow noopener\" target=\"_blank\">Asciidoctor</a>を使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。</p>\n\n<p>そこで今回は、Dockerで全文検索サーバの<a href=\"http://fess.codelibs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Fess</a>を立てて、<br>\nドキュメントからJavaScript経由でFessのJSON APIを呼び出すことで、<br>\n全文検索を簡単に導入する方法をご紹介します。</p>\n\n<p>導入するとドキュメントの右上に検索窓が出てきて全文検索できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/e020d2b6619c0b7ce4332c80ea15b89a6efb895e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31323365633737312d666237372d653464632d646637652d6134623430373739323735392e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e020d2b6619c0b7ce4332c80ea15b89a6efb895e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31323365633737312d666237372d653464632d646637652d6134623430373739323735392e676966\" alt=\"6月-24-2017 19-05-32.gif\" title=\"6月-24-2017 19-05-32.gif\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/123ec771-fb77-e4dc-df7e-a4b407792759.gif\"></a></p>\n\n<h2>\n<span id=\"fessとは\" class=\"fragment\"></span><a href=\"#fess%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Fessとは</h2>\n\n<p><a href=\"http://fess.codelibs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Fess</a>は<strong>「5 分で簡単に構築可能な全文検索サーバー」</strong>です。<br>\nJavaベースで構築されており、Apacheライセンスで提供されるオープンソース製品で、無料で使用できます。<br>\n自分でクローラを設定して、自分だけの検索エンジンがつくれるようなイメージです。<br>\nデフォルトで検索画面を提供していますが、JSON APIも提供しているので、様々なシステムと連携可能です。</p>\n\n<h2>\n<span id=\"全体像\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E4%BD%93%E5%83%8F\"><i class=\"fa fa-link\"></i></a>全体像</h2>\n\n<p>ドキュメント用Webサーバに全文検索用のJavaScriptファイルとCSSファイルを追加し、Dockerで全文検索用のFessサーバを立てます。<br>\nFessサーバはドキュメント用Webサーバをクロールし、その情報を保存しておきます。<br>\nドキュメントで全文検索を実施すると、JavaScript経由でFessサーバのJSON AIPを呼び出して、全文検索結果をドキュメントに表示します。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/6fe043176da6b6451722114a3d0418bc40ac8c99/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31306338616334362d323135352d386562372d613565642d3763313363653534346563322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/6fe043176da6b6451722114a3d0418bc40ac8c99/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31306338616334362d323135352d386562372d613565642d3763313363653534346563322e706e67\" alt=\"0_Fess_全体像_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/10c8ac46-2155-8eb7-a5ed-7c13ce544ec2.png\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/729e46c74903de7be597a6ac4adea0c03cd8559f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34306531643435362d323633352d326165642d333333642d3862316165633434373933312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/729e46c74903de7be597a6ac4adea0c03cd8559f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34306531643435362d323633352d326165642d333333642d3862316165633434373933312e706e67\" alt=\"0_Fess_全体像_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/40e1d456-2635-2aed-333d-8b1aec447931.png\"></a></p>\n\n<h2>\n<span id=\"導入手順\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>導入手順</h2>\n\n<p>この導入手順は、下記のような環境（ローカルPCのDocker上にドキュメント用WebサーバとFessサーバが立っている環境）を作った時のものです。<br>\nDockerを使わなくても、ローカルPC以外でも、導入可能です。導入手順は適宜読み替えてください。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/a94911642557c486b240ffa8c3c184c64bfabc2c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30626164623864322d316135382d323262362d343537632d3132626563663361383931312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a94911642557c486b240ffa8c3c184c64bfabc2c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30626164623864322d316135382d323262362d343537632d3132626563663361383931312e706e67\" alt=\"0_Fess_全体像_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/0badb8d2-1a58-22b6-457c-12becf3a8911.png\"></a></p>\n\n<h3>\n<span id=\"fessのインストール\" class=\"fragment\"></span><a href=\"#fess%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>Fessのインストール</h3>\n\n<p>Docker Hubの<a href=\"https://hub.docker.com/r/codelibs/fess/\" rel=\"nofollow noopener\" target=\"_blank\">codelibs/fess</a>を使用します。今回ポートは10084で公開します。<br>\nDockerを使わない場合は<a href=\"http://fess.codelibs.org/ja/11.2/install/index.html\" rel=\"nofollow noopener\" target=\"_blank\">Fess インストールガイド</a>を参考にしてください。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ docker run -d -p 10084:8080 --name fess codelibs/fess:latest\n</pre></div></div>\n\n<h3>\n<span id=\"fessの設定\" class=\"fragment\"></span><a href=\"#fess%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>Fessの設定</h3>\n\n<h4>\n<span id=\"クローラの設定\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>クローラの設定</h4>\n\n<p><code>http://[PCのローカルIPアドレス]:10084/login</code>にアクセスするとログイン画面が表示されます。<br>\nデフォルトのID/PASS　<code>admin/admin</code>でログインしましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/d173fd5ce7a76eb7b5a6ef053a670dd6551d720c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65373930656361392d353037332d393438652d336534332d6437353436643537666165352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d173fd5ce7a76eb7b5a6ef053a670dd6551d720c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65373930656361392d353037332d393438652d336534332d6437353436643537666165352e706e67\" alt=\"1_Fess管理者_ログイン画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/e790eca9-5073-948e-3e43-d7546d57fae5.png\"></a><br>\n<br></p>\n\n<p>ログインするとダッシュボードが表示されます。左ペインの<code>クローラ</code> &gt; <code>Web</code>　を選択しましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/cbfee37bd5d06381615f013da8587b1af91c35aa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61636662653935302d666137342d643063622d336365652d3565386462346465356237342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/cbfee37bd5d06381615f013da8587b1af91c35aa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61636662653935302d666137342d643063622d336365652d3565386462346465356237342e706e67\" alt=\"2_Fess管理者_ダッシュボード.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/acfbe950-fa74-d0cb-3cee-5e8db4de5b74.png\"></a><br>\n<br></p>\n\n<p>Webクローラにはまだ何も登録されていないので、左上の<code>+　新規作成</code>ボタンをクリックしましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/e60be4a90df24cb1275c165752de363b15859b87/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36333130333762342d616162322d386530642d663961612d3364323365633931376132392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e60be4a90df24cb1275c165752de363b15859b87/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36333130333762342d616162322d386530642d663961612d3364323365633931376132392e706e67\" alt=\"3_Fess管理者_Webクロール設定_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/631037b4-aab2-8e0d-f9aa-3d23ec917a29.png\"></a><br>\n<br></p>\n\n<p>Webクロール情報入力画面が表示されます。<br>\n<a href=\"https://camo.qiitausercontent.com/62cd6f97bb7dfebb163873f26b5fda4fabcf89c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653561303963392d376363652d336665632d373838342d3132353863333266613931612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/62cd6f97bb7dfebb163873f26b5fda4fabcf89c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653561303963392d376363652d336665632d373838342d3132353863333266613931612e706e67\" alt=\"3_Fess管理者_Webクロール設定_2.png\" title=\"3_Fess管理者_Webクロール設定_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/ee5a09c9-7cce-3fec-7884-1258c32fa91a.png\"></a></p>\n\n<p>設定項目は色々ありますが、とりあえず下記項目だけ設定しましょう。</p>\n\n<ul>\n<li>名前 \n\n<ul>\n<li>任意の名前を設定してください。</li>\n</ul>\n</li>\n<li>URL \n\n<ul>\n<li>ドキュメント用Webサーバにおいてドキュメントが格納されているルートフォルダのURLを指定してください。末尾に<code>/</code>を付けてください。</li>\n</ul>\n</li>\n<li>クロール対象とするURL \n\n<ul>\n<li>正規表現で値を設定します。上記<code>URL</code>で設定したルートフォルダ配下の全資産を対象とするために、<code>URLで設定した値</code> + <code>.*</code> を指定してください。</li>\n</ul>\n</li>\n<li>検索対象とするURL\n\n<ul>\n<li>正規表現で値を設定します。HTMLのみを検索対象にしたい（JS、CSSなどは除外したい）ので、<code>URLで設定した値</code> + <code>.+\\.html$</code> を指定してください。\n<br>\n<br>\n</li>\n</ul>\n</li>\n</ul>\n\n<p>値を設定したら、画面を下にスクロールして<code>+　作成</code>ボタンをクリックします。<br>\nすると下記のようにWebクロールのデータが１件登録されます。<br>\n<a href=\"https://camo.qiitausercontent.com/8302d25592df90b2bdf59fbf3b43e31ecf106b3e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33643030626635612d663133312d643336372d646535332d6166313062623336383339642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/8302d25592df90b2bdf59fbf3b43e31ecf106b3e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33643030626635612d663133312d643336372d646535332d6166313062623336383339642e706e67\" alt=\"3_Fess管理者_Webクロール設定_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/3d00bf5a-f131-d367-de53-af10bb36839d.png\"></a><br>\n<br></p>\n\n<h4>\n<span id=\"クローラの実行\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AE%E5%AE%9F%E8%A1%8C\"><i class=\"fa fa-link\"></i></a>クローラの実行</h4>\n\n<p>左ペインで　<code>システム</code> &gt; <code>スケジューラ</code> を選択してジョブスケジューラを開きます。<br>\nジョブスケジューラで <code>Default Crawler</code>を選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/52e6c84dc635dabd786a05e2dc2dbc01bbcd62b3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62306165636130642d363461342d343364612d373832622d3061316130636437306238332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/52e6c84dc635dabd786a05e2dc2dbc01bbcd62b3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62306165636130642d363461342d343364612d373832622d3061316130636437306238332e706e67\" alt=\"4_Fess管理者_スケジューラ_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/b0aeca0d-64a4-43da-782b-0a1a0cd70b83.png\"></a><br>\n<br></p>\n\n<p><code>今すぐ開始</code>をクリックします。<br>\n<a href=\"https://camo.qiitausercontent.com/15c56153ff7878a59bfda2bab0ac3b8b6182fa23/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30306537363932302d626661642d656562312d636239392d3732346533613933393261392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/15c56153ff7878a59bfda2bab0ac3b8b6182fa23/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30306537363932302d626661642d656562312d636239392d3732346533613933393261392e706e67\" alt=\"4_Fess管理者_スケジューラ_1.1.png\" title=\"4_Fess管理者_スケジューラ_1.1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/00e76920-bfad-eeb1-cb99-724e3a9392a9.png\"></a><br>\n<br></p>\n\n<p>するとクロールが実行されます。<br>\n<a href=\"https://camo.qiitausercontent.com/b34d527efb0b07d2b04cabccebe97f0e1e4b594c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323564333030662d303766352d373234642d636539332d3865316339373532653130652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b34d527efb0b07d2b04cabccebe97f0e1e4b594c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323564333030662d303766352d373234642d636539332d3865316339373532653130652e706e67\" alt=\"4_Fess管理者_スケジューラ_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/725d300f-07f5-724d-ce93-8e1c9752e10e.png\"></a><br>\n<br></p>\n\n<p>しばらくして<code>F5</code>キーを押してブラウザを更新してください。<br>\nクロールが終了すると、スケジューラの状態が<code>実行中</code>から<code>有効</code>になります。<br>\n<a href=\"https://camo.qiitausercontent.com/2d860e111077a3a0b63a44b45e14e0e18b02fcb1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653466353237372d616163332d616437652d636465622d3431643339623733336331662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2d860e111077a3a0b63a44b45e14e0e18b02fcb1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653466353237372d616163332d616437652d636465622d3431643339623733336331662e706e67\" alt=\"4_Fess管理者_スケジューラ_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/ee4f5277-aac3-ad7e-cdeb-41d39b733c1f.png\"></a><br>\n<br></p>\n\n<h4>\n<span id=\"クローラ実行結果の確認\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>クローラ実行結果の確認</h4>\n\n<p>左ペインの<code>システム情報</code>&gt;<code>クロール情報</code>を選択すると、先ほど実行したクロールの結果が表示されています。その行を選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/e35eccd76c8d85dcc368298adfebb71871f083a7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39326633313062352d383366362d646564612d343438642d6166613863356230663130342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e35eccd76c8d85dcc368298adfebb71871f083a7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39326633313062352d383366362d646564612d343438642d6166613863356230663130342e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_1.png\" title=\"5_Fess管理者_システム情報_クロール情報_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/92f310b5-83f6-deda-448d-afa8c5b0f104.png\"></a><br>\n<br></p>\n\n<p>セッションIDを選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/341936c3d088fb04a1029cc6c891a35253a079da/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34653830636431342d333633342d663636352d623434382d3862346234653761386432312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/341936c3d088fb04a1029cc6c891a35253a079da/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34653830636431342d333633342d663636352d623434382d3862346234653761386432312e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_2.png\" title=\"5_Fess管理者_システム情報_クロール情報_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/4e80cd14-3634-f665-b448-8b4b4e7a8d21.png\"></a><br>\n<br></p>\n\n<p>ここにドキュメント用Webサーバのドキュメントが全て表示されればOKです。<br>\n<a href=\"https://camo.qiitausercontent.com/767e79c91f7521caf880a890deee50513f520ea9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36306238366263342d663730662d343263382d613031372d3566313338623362383865332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/767e79c91f7521caf880a890deee50513f520ea9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36306238366263342d663730662d343263382d613031372d3566313338623362383865332e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_3.png\" title=\"5_Fess管理者_システム情報_クロール情報_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/60b86bc4-f70f-42c8-a017-5f138b3b88e3.png\"></a><br>\n<br></p>\n\n<h3>\n<span id=\"ドキュメント用webサーバに全文検索用資産を配置\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E7%94%A8web%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AB%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E7%94%A8%E8%B3%87%E7%94%A3%E3%82%92%E9%85%8D%E7%BD%AE\"><i class=\"fa fa-link\"></i></a>ドキュメント用Webサーバに全文検索用資産を配置</h3>\n\n<p>全文検索用の資産は<code>full-text-search.js</code>と<code>full-text-search.css</code>の２つです。<br>\n<code>full-text-search.js</code>の変数 FESS_JSON_ENDPOINT(FESSサーバのJSON APIのエンドポイント) は適時置き換えてください。<br>\nこれらの資産をドキュメント用Webサーバのドキュメントのルートフォルダ直下に配置してください。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">full-text-search.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'use strict'</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// FESSサーバのJSON APIのエンドポイント（FessサーバのIPアドレス + /json）</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">FESS_JSON_ENDPOINT</span> <span class=\"o\">=</span> <span class=\"s1\">'http://192.168.1.5:10084/json'</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// １ページあたりの検索結果表示件数</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">COUNT_PAR_PAGE</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n\n\n    <span class=\"c1\">// 目次の</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#toc'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 一番上に検索条件入力エリアを挿入</span>\n        <span class=\"p\">.</span><span class=\"nx\">prepend</span><span class=\"p\">(</span>\n            <span class=\"s1\">'&lt;div id=\"search-area\"&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;form id=\"search-form\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;div class=\"search-input-area\"&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;i class=\"fa fa-search left-icon\"&gt;&lt;/i&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;input id=\"search-query\" placeholder=\"全文検索\" /&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;i class=\"fa fa-close right-icon\"&gt;&lt;/i&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;/div&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;input id=\"search-start\" type=\"hidden\" value=\"0\"/&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;input id=\"search-num\" type=\"hidden\" value=\"'</span> <span class=\"o\">+</span> <span class=\"nx\">COUNT_PAR_PAGE</span> <span class=\"o\">+</span> <span class=\"s1\">'\"/&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;form&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// イベント登録</span>\n        <span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">$searchArea</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 入力項目の検索条件でEnterを押したら、検索処理を実行する</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-form'</span><span class=\"p\">).</span><span class=\"nx\">submit</span><span class=\"p\">({</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 虫眼鏡アイコン押下したら、検索処理を実行する</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".left-icon\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">({</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 検索条件入力したら、</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\"#search-query\"</span><span class=\"p\">).</span><span class=\"nx\">keyup</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n              <span class=\"kd\">var</span> <span class=\"nx\">$this</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n              <span class=\"kd\">var</span> <span class=\"nx\">$rightIcon</span> <span class=\"o\">=</span> <span class=\"nx\">$this</span><span class=\"p\">.</span><span class=\"nx\">parent</span><span class=\"p\">().</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".right-icon\"</span><span class=\"p\">);</span>\n\n              <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">$this</span><span class=\"p\">.</span><span class=\"nx\">val</span><span class=\"p\">().</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                 <span class=\"c1\">// 検索条件に値がある場合は×アイコンの色を濃くする</span>\n                 <span class=\"nx\">$rightIcon</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#555'</span><span class=\"p\">);</span>\n              <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                 <span class=\"c1\">// 検索条件に値がない場合は×アイコンの色を薄くする</span>\n                 <span class=\"nx\">$rightIcon</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#ccc'</span><span class=\"p\">);</span>\n              <span class=\"p\">}</span>\n            <span class=\"p\">});</span>\n\n            <span class=\"c1\">// ×アイコン押下したら、</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".right-icon\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n              <span class=\"c1\">// ×アイコンの色を薄くして</span>\n              <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">).</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#ccc'</span><span class=\"p\">)</span>\n                      <span class=\"c1\">// 検索条件をクリアする</span>\n                     <span class=\"p\">.</span><span class=\"nx\">parent</span><span class=\"p\">().</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\"input\"</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span>\n            <span class=\"p\">});</span>\n        <span class=\"p\">});</span>\n\n    <span class=\"c1\">// ドキュメントタイトルの</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#header&gt;h1'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 直下に検索結果エリアを挿入</span>\n        <span class=\"p\">.</span><span class=\"nx\">before</span><span class=\"p\">(</span>\n            <span class=\"s1\">'&lt;div id=\"search-result-area\"&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div id=\"search-result-subheader\"&gt;&lt;/div&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div id=\"search-result-content\"&gt;&lt;/div&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// イベント登録</span>\n        <span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span>\n                <span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-area'</span><span class=\"p\">)</span>\n                    <span class=\"c1\">// 検索結果エリアのバツアイコンをクリックしたら、</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s1\">'#remove-search-result'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                      <span class=\"kd\">var</span> <span class=\"nx\">$searchResultArea</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">delegateTarget</span><span class=\"p\">)</span>\n                      <span class=\"c1\">// 検索結果エリアを非表示モードにする</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">removeClass</span><span class=\"p\">(</span><span class=\"s1\">'show'</span><span class=\"p\">);</span>\n                      <span class=\"c1\">// 検索結果エリアの中身を削除する</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-subheader'</span><span class=\"p\">).</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-content'</span><span class=\"p\">).</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n                    <span class=\"p\">})</span>\n                    <span class=\"c1\">// 前ページリンクをクリックしたら、１ページ前を検索する</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#prevPageLink\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">)</span>\n                    <span class=\"c1\">// 次ページリンクをクリックしたら、１ページ後を検索する</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#nextPageLink\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n        <span class=\"p\">});</span>\n\n\n\n    <span class=\"cm\">/**\n     * 検索処理\n     *\n     * @param  {eventObject} event\n     * @return {boolean}  submit処理を中断させるために必ずfalseを返却する\n     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">doSearch</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">){</span>\n      <span class=\"c1\">// 検索フィールドの値をトリムして取得</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">searchQuery</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">trim</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-query'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">());</span>\n      <span class=\"c1\">// 空の場合は検索処理を実行しない</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">searchQuery</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// 表示開始位置、表示件数の取得</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-start'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">()),</span>\n          <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-num'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">());</span>\n      <span class=\"c1\">// 表示開始位置のチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">start</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">// 表示件数のチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">num</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"nx\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">// 表示ページ情報の取得</span>\n      <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">navi</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n          <span class=\"c1\">// 前のページの場合</span>\n          <span class=\"nx\">start</span> <span class=\"o\">-=</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n          <span class=\"c1\">// 次のページの場合</span>\n          <span class=\"nx\">start</span> <span class=\"o\">+=</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"nl\">default</span><span class=\"p\">:</span>\n        <span class=\"k\">case</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n          <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// URLを構築</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"nx\">FESS_JSON_ENDPOINT</span> <span class=\"o\">+</span> <span class=\"s1\">'?callback=?'</span> <span class=\"o\">+</span> <span class=\"c1\">// 別ドメインを想定してJSONP形式でリクエストを送信する</span>\n                                     <span class=\"s1\">'&amp;q='</span> <span class=\"o\">+</span> <span class=\"nb\">encodeURIComponent</span><span class=\"p\">(</span><span class=\"nx\">searchQuery</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n                                     <span class=\"s1\">'&amp;start='</span> <span class=\"o\">+</span> <span class=\"nx\">start</span> <span class=\"o\">+</span>\n                                     <span class=\"s1\">'&amp;num='</span> <span class=\"o\">+</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// 検索リクエスト送信</span>\n      <span class=\"c1\">// 別ドメインを想定してJSONP形式でリクエストを送信する</span>\n      <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span>\n          <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"nx\">url</span><span class=\"p\">,</span>\n          <span class=\"na\">dataType</span><span class=\"p\">:</span> <span class=\"s1\">'jsonp'</span><span class=\"p\">,</span>\n          <span class=\"na\">success</span><span class=\"p\">:</span> <span class=\"nx\">renderSearchResult</span>\n      <span class=\"p\">});</span>\n\n\n      <span class=\"c1\">// ページ情報の更新</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#searchNum'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// ページ表示を上部に移動</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">).</span><span class=\"nx\">scrollTop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// サブミットを抑止するためにfalseを返す</span>\n      <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n\n\n    <span class=\"cm\">/**\n     * 検索成功時に検索結果を描画する\n     *\n     * @param  {Anything} data レスポンスデータ\n     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">renderSearchResult</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 検索結果処理</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">dataResponse</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">;</span>\n      <span class=\"c1\">// ステータスチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s2\">\"検索中に問題が発生しました。\"</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// 検索結果領域を表示する</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-area'</span><span class=\"p\">).</span><span class=\"nx\">addClass</span><span class=\"p\">(</span><span class=\"s1\">'show'</span><span class=\"p\">);</span>\n\n      <span class=\"kd\">var</span> <span class=\"nx\">$searchResultSubheader</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-subheader'</span><span class=\"p\">),</span>\n          <span class=\"nx\">$searchResultContent</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-content'</span><span class=\"p\">),</span>\n          <span class=\"nx\">record_count</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">record_count</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// 検索結果がない場合</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">record_count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// サブヘッダーに出力</span>\n        <span class=\"nx\">$searchResultSubheader</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span>  <span class=\"s1\">'&lt;div id=\"remove-search-result\" style=\"float:right;\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/div&gt;'</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// 結果領域に出力</span>\n        <span class=\"nx\">$searchResultContent</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;b&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">q</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/b&gt;に一致する情報は見つかりませんでした。'</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// 検索にヒットした場合</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">page_number</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_number</span><span class=\"p\">,</span>\n          <span class=\"nx\">page_size</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_size</span><span class=\"p\">,</span>\n          <span class=\"nx\">page_count</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_count</span><span class=\"p\">,</span>\n          <span class=\"nx\">startRange</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nx\">page_size</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n          <span class=\"nx\">endRange</span> <span class=\"o\">=</span> <span class=\"nx\">page_number</span> <span class=\"o\">*</span> <span class=\"nx\">page_size</span><span class=\"p\">,</span>\n          <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n          <span class=\"nx\">max</span><span class=\"p\">,</span>\n          <span class=\"nx\">offset</span> <span class=\"o\">=</span> <span class=\"nx\">startRange</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-start'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"nx\">offset</span><span class=\"p\">);</span>\n\n\n      <span class=\"c1\">// サブヘッダーに出力</span>\n      <span class=\"nx\">$searchResultSubheader</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;b&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">q</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/b&gt; の検索結果 '</span> <span class=\"o\">+</span>\n                                <span class=\"nx\">record_count</span> <span class=\"o\">+</span> <span class=\"s2\">\" 件中 \"</span> <span class=\"o\">+</span>  <span class=\"nx\">startRange</span> <span class=\"o\">+</span> <span class=\"s1\">' - '</span> <span class=\"o\">+</span>\n                                <span class=\"nx\">endRange</span> <span class=\"o\">+</span> <span class=\"s1\">' 件目 ('</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">exec_time</span> <span class=\"o\">+</span> <span class=\"s1\">' 秒)'</span> <span class=\"o\">+</span>\n                               <span class=\"s1\">'&lt;div id=\"remove-search-result\" style=\"float:right;\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/div&gt;'</span>\n\n      <span class=\"c1\">// 検索結果領域のクリア</span>\n      <span class=\"nx\">$searchResultContent</span><span class=\"p\">.</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n\n\n      <span class=\"c1\">// 検索結果の出力</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">$resultBody</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;ol/&gt;\"</span><span class=\"p\">);</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">results</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">;</span>\n      <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">max</span> <span class=\"o\">=</span> <span class=\"nx\">results</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">max</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">element</span> <span class=\"o\">=</span>\n            <span class=\"s1\">'&lt;li&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;h4 class=\"title\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;a href=\"'</span> <span class=\"o\">+</span><span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">url_link</span> <span class=\"o\">+</span> <span class=\"s1\">'\"&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">title</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/a&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;/h4&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div class=\"body\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">content_description</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;br/&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;cite&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">site</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/cite&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;/div&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/li&gt;'</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">).</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$resultBody</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">$resultBody</span><span class=\"p\">.</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$searchResultContent</span><span class=\"p\">);</span>\n\n\n      <span class=\"c1\">// ページ番号情報の出力</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">pageArea</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n      <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;div id=\"pageInfo\"&gt;'</span><span class=\"p\">,</span> <span class=\"nx\">page_number</span><span class=\"p\">,</span> <span class=\"s1\">'ページ目&lt;br/&gt;'</span><span class=\"p\">);</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 前のページへのリンク</span>\n        <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;a id=\"prevPageLink\" href=\"#\"&gt;&amp;lt;&amp;lt;前ページへ&lt;/a&gt; '</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">&lt;</span> <span class=\"nx\">page_count</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 次のページへのリンク</span>\n        <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;a id=\"nextPageLink\" href=\"#\"&gt;次ページへ&amp;gt;&amp;gt;&lt;/a&gt;'</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">);</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"p\">)).</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$searchResultContent</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">full-text-search.css</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">@charset</span> <span class=\"s1\">\"UTF-8\"</span><span class=\"p\">;</span>\n\n<span class=\"nf\">#search-area</span> <span class=\"p\">{</span>\n    <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"p\">{</span>\n    <span class=\"nl\">position</span><span class=\"p\">:</span><span class=\"nb\">relative</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* 入力項目 */</span>\n<span class=\"nf\">#search-query</span> <span class=\"p\">{</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span> <span class=\"m\">2em</span><span class=\"p\">;</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">black</span><span class=\"p\">;</span>\n    <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"n\">arial</span><span class=\"p\">,</span><span class=\"nb\">sans-serif</span><span class=\"p\">;</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span>\n    <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">2em</span><span class=\"p\">;</span>\n    <span class=\"nl\">outline</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nt\">input</span><span class=\"nd\">:focus</span> <span class=\"p\">{</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"m\">#4d90fe</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* アイコンは入力項目の左と右に配置する */</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"o\">,</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span> <span class=\"p\">{</span>\n    <span class=\"c\">/* 縦方向の中央寄せ */</span>\n    <span class=\"nl\">position</span><span class=\"p\">:</span><span class=\"nb\">absolute</span><span class=\"p\">;</span>\n    <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">50%</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">-0.5em</span><span class=\"p\">;</span>\n    <span class=\"py\">font-sise</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 要素にマウスを合わせたら、マウスポインタのマークを変える */</span>\n    <span class=\"nl\">cursor</span><span class=\"p\">:</span><span class=\"nb\">pointer</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span> <span class=\"p\">{</span>\n    <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span><span class=\"p\">;</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span><span class=\"m\">#444</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span> <span class=\"p\">{</span>\n    <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 最初は、グレーアウトしておく */</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* アイコンにマウスを合わせたら、サイズを大きくする */</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"nd\">:hover</span><span class=\"o\">,</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1.4em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* 検索結果表示時に適用するスタイル */</span>\n<span class=\"nf\">#search-result-area</span><span class=\"nc\">.show</span> <span class=\"p\">{</span>\n    <span class=\"nl\">background</span><span class=\"p\">:</span> <span class=\"m\">#f8f8f7</span><span class=\"p\">;</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">0px</span> <span class=\"nb\">solid</span><span class=\"p\">;</span>\n    <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h3>\n<span id=\"ドキュメントに全文検索用資産の読み込み処理を追加\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AB%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E7%94%A8%E8%B3%87%E7%94%A3%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF%E5%87%A6%E7%90%86%E3%82%92%E8%BF%BD%E5%8A%A0\"><i class=\"fa fa-link\"></i></a>ドキュメントに全文検索用資産の読み込み処理を追加</h3>\n\n<p>前手順でドキュメント用Webサーバに配置した<code>full-text-search.js</code>と<code>full-text-search.css</code>を、<br>\n各ドキュメントから読み込むようにします。<br>\n<code>full-text-search.js</code>はjQueryに依存しているので、<br>\n既存のドキュメントで読み込んでいない場合はjQueryも読み込みも追加してください。</p>\n\n<p>ドキュメント用Webサーバがこのようなフォルダ構成だとしたら、</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ドキュメント用Webサーバのドキュメントルート\n├── full-text-search.css\n├── full-text-search.js\n└── asciidoctor-sample\n    └── asciidoctor-sample.html\n</pre></div></div>\n\n<p><code>asciidoctor-sample.adoc</code>には下記を追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>++++\n&lt;link rel=\"stylesheet\" href=\"../full-text-search.css\"&gt;&lt;/link&gt;\n&lt;script\n  src=\"https://code.jquery.com/jquery-3.2.1.min.js\"\n  integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\"\n  crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n&lt;script src=\"../full-text-search.js\"&gt;&lt;/script&gt;\n++++\n</pre></div></div>\n\n<h3>\n<span id=\"全文検索ができるかの確認\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%8B%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>全文検索ができるかの確認</h3>\n\n<p>以上の手順を実施すると、Asdciidoctorで全文検索ができるようになります。<br>\nドキュメントをブラウザで見ると、目次上部に検索窓が追加されています。<br>\n<a href=\"https://camo.qiitausercontent.com/daf3699de0e01b28ba4d3c2a8b8b535d3c54a2ab/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39393039336364362d353865382d376364652d613364382d3562656332613032303636382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/daf3699de0e01b28ba4d3c2a8b8b535d3c54a2ab/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39393039336364362d353865382d376364652d613364382d3562656332613032303636382e706e67\" alt=\"7_全文検索イメージ_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/99093cd6-58e8-7cde-a3d8-5bec2a020668.png\"></a><br>\n<br></p>\n\n<p>検索条件を入力し、虫眼鏡アイコンをクリックすると、検索結果が表示されます。<br>\n<a href=\"https://camo.qiitausercontent.com/5d8e0c5f2db223d5f021d484351b0c840010bb4f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63646533643865612d643838332d613636622d663838642d3961353934313032366263392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/5d8e0c5f2db223d5f021d484351b0c840010bb4f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63646533643865612d643838332d613636622d663838642d3961353934313032366263392e706e67\" alt=\"7_全文検索イメージ_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/cde3d8ea-d883-a66b-f88d-9a5941026bc9.png\"></a><br>\n<br></p>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>FessのREST APIを使用してAsciidoctorで全文検索できるようにする方法を紹介しました。<br>\nFessのREST APIを使えば、Asciidoctorに限らず、様々なシステムに全文検索機能を導入できそうです。</p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<ul>\n<li><a href=\"http://fess.codelibs.org/ja/articles/article-4.html#js\" rel=\"nofollow noopener\" target=\"_blank\">Fess で作るApache Solrベースの検索サーバー 〜 REST API 編</a></li>\n<li><a href=\"http://qiita.com/cookienote/items/1f2443be25630a78d946\" id=\"reference-69c989703115d994be84\">全文検索サーバー Fess を Docker で動かす</a></li>\n</ul>\n","body":"[Asciidoctor](http://asciidoctor.org/)を使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。\n\nそこで今回は、Dockerで全文検索サーバの[Fess](http://fess.codelibs.org/ja/)を立てて、\nドキュメントからJavaScript経由でFessのJSON APIを呼び出すことで、\n全文検索を簡単に導入する方法をご紹介します。\n\n導入するとドキュメントの右上に検索窓が出てきて全文検索できるようになります。\n![6月-24-2017 19-05-32.gif](https://qiita-image-store.s3.amazonaws.com/0/49915/123ec771-fb77-e4dc-df7e-a4b407792759.gif \"6月-24-2017 19-05-32.gif\")\n\n\n## Fessとは\n[Fess](http://fess.codelibs.org/ja/)は**「5 分で簡単に構築可能な全文検索サーバー」**です。\nJavaベースで構築されており、Apacheライセンスで提供されるオープンソース製品で、無料で使用できます。\n自分でクローラを設定して、自分だけの検索エンジンがつくれるようなイメージです。\nデフォルトで検索画面を提供していますが、JSON APIも提供しているので、様々なシステムと連携可能です。\n\n\n## 全体像\nドキュメント用Webサーバに全文検索用のJavaScriptファイルとCSSファイルを追加し、Dockerで全文検索用のFessサーバを立てます。\nFessサーバはドキュメント用Webサーバをクロールし、その情報を保存しておきます。\nドキュメントで全文検索を実施すると、JavaScript経由でFessサーバのJSON AIPを呼び出して、全文検索結果をドキュメントに表示します。\n\n![0_Fess_全体像_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/10c8ac46-2155-8eb7-a5ed-7c13ce544ec2.png)\n\n![0_Fess_全体像_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/40e1d456-2635-2aed-333d-8b1aec447931.png)\n\n## 導入手順\nこの導入手順は、下記のような環境\u001c（ローカルPCのDocker上にドキュメント用WebサーバとFessサーバが立っている環境）を作った時のものです。\nDockerを使わなくても、ローカルPC以外でも、導入可能です。導入手順は適宜読み替えてください。\n\n![0_Fess_全体像_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/0badb8d2-1a58-22b6-457c-12becf3a8911.png)\n\n\n### Fessのインストール\nDocker Hubの[codelibs/fess](https://hub.docker.com/r/codelibs/fess/)を使用します。今回ポートは10084で公開します。\nDockerを使わない場合は[Fess インストールガイド](http://fess.codelibs.org/ja/11.2/install/index.html)を参考にしてください。\n\n```\n$ docker run -d -p 10084:8080 --name fess codelibs/fess:latest\n```\n\n### Fessの設定\n#### クローラの設定\n`http://[PCのローカルIPアドレス]:10084/login`にアクセスするとログイン画面が表示されます。\nデフォルトのID/PASS　`admin/admin`でログインしましょう。\n![1_Fess管理者_ログイン画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/e790eca9-5073-948e-3e43-d7546d57fae5.png)\n<br/>\n\nログインするとダッシュボードが表示されます。左ペインの`クローラ` > `Web`　を選択しましょう。\n![2_Fess管理者_ダッシュボード.png](https://qiita-image-store.s3.amazonaws.com/0/49915/acfbe950-fa74-d0cb-3cee-5e8db4de5b74.png)\n<br/>\n\nWebクローラにはまだ何も登録されていないので、左上の`+　新規作成`ボタンをクリックしましょう。\n![3_Fess管理者_Webクロール設定_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/631037b4-aab2-8e0d-f9aa-3d23ec917a29.png)\n<br/>\n\nWebクロール情報入力画面が表示されます。\n![3_Fess管理者_Webクロール設定_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/ee5a09c9-7cce-3fec-7884-1258c32fa91a.png \"3_Fess管理者_Webクロール設定_2.png\")\n\n設定項目は色々ありますが、とりあえず下記項目だけ設定しましょう。\n\n* 名前 \n    * 任意の名前を設定してください。\n* URL \n    * ドキュメント用Webサーバにおいてドキュメントが格納されているルートフォルダのURLを指定してください。末尾に`/`を付けてください。\n* クロール対象とするURL \n    * 正規表現で値を設定します。上記`URL`で設定したルートフォルダ配下の全資産を対象とするために、`URLで設定した値` + `.*` を指定してください。\n* 検索対象とするURL\n   * 正規表現で値を設定します。HTMLのみを検索対象にしたい（JS、CSSなどは除外したい）ので、`URLで設定した値` + `.+\\.html$` を指定してください。\n<br/>\n<br/>\n\n\n値を設定したら、画面を下にスクロールして`+　作成`ボタンをクリックします。\nすると下記のようにWebクロールのデータが１件登録されます。\n![3_Fess管理者_Webクロール設定_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/3d00bf5a-f131-d367-de53-af10bb36839d.png)\n<br/>\n\n\n#### クローラの実行\n左ペインで　`システム` > `スケジューラ` を選択してジョブスケジューラを開きます。\nジョブスケジューラで `Default Crawler`を選択します。\n![4_Fess管理者_スケジューラ_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/b0aeca0d-64a4-43da-782b-0a1a0cd70b83.png)\n<br/>\n\n`今すぐ開始`をクリックします。\n![4_Fess管理者_スケジューラ_1.1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/00e76920-bfad-eeb1-cb99-724e3a9392a9.png \"4_Fess管理者_スケジューラ_1.1.png\")\n<br/>\n\nするとクロールが実行されます。\n![4_Fess管理者_スケジューラ_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/725d300f-07f5-724d-ce93-8e1c9752e10e.png)\n<br/>\n\nしばらくして`F5`キーを押してブラウザを更新してください。\nクロールが終了すると、スケジューラの状態が`実行中`から`有効`になります。\n![4_Fess管理者_スケジューラ_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/ee4f5277-aac3-ad7e-cdeb-41d39b733c1f.png)\n<br/>\n\n\n#### クローラ実行結果の確認\n左ペインの`システム情報`>`クロール情報`を選択すると、先ほど実行したクロールの結果が表示されています。その行を選択します。\n![5_Fess管理者_システム情報_クロール情報_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/92f310b5-83f6-deda-448d-afa8c5b0f104.png \"5_Fess管理者_システム情報_クロール情報_1.png\")\n<br/>\n\n\nセッションIDを選択します。\n![5_Fess管理者_システム情報_クロール情報_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/4e80cd14-3634-f665-b448-8b4b4e7a8d21.png \"5_Fess管理者_システム情報_クロール情報_2.png\")\n<br/>\n\nここにドキュメント用Webサーバのドキュメントが全て表示されればOKです。\n![5_Fess管理者_システム情報_クロール情報_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/60b86bc4-f70f-42c8-a017-5f138b3b88e3.png \"5_Fess管理者_システム情報_クロール情報_3.png\")\n<br/>\n\n### ドキュメント用Webサーバに全文検索用資産を配置\n全文検索用の資産は`full-text-search.js`と`full-text-search.css`の２つです。\n`full-text-search.js`の変数 FESS_JSON_ENDPOINT(FESSサーバのJSON APIのエンドポイント) は適時置き換えてください。\nこれらの資産をドキュメント用Webサーバのドキュメントのルートフォルダ直下に配置してください。\n\n```javascript:full-text-search.js\n$(function() {\n    'use strict';\n\n    // FESSサーバのJSON APIのエンドポイント（FessサーバのIPアドレス + /json）\n    var FESS_JSON_ENDPOINT = 'http://192.168.1.5:10084/json';\n\n    // １ページあたりの検索結果表示件数\n    var COUNT_PAR_PAGE = 10;\n\n\n    // 目次の\n    $('#toc')\n        // 一番上に検索条件入力エリアを挿入\n        .prepend(\n            '<div id=\"search-area\">' +\n                '<form id=\"search-form\">' +\n                    '<div class=\"search-input-area\">' +\n                        '<i class=\"fa fa-search left-icon\"></i>' +\n                        '<input id=\"search-query\" placeholder=\"全文検索\" />' +\n                        '<i class=\"fa fa-close right-icon\"></i>' +\n                    '</div>' +\n                    '<input id=\"search-start\" type=\"hidden\" value=\"0\"/>' +\n                    '<input id=\"search-num\" type=\"hidden\" value=\"' + COUNT_PAR_PAGE + '\"/>' +\n                '<form>' +\n            '</div>')\n        // イベント登録\n        .ready(function() {\n            var $searchArea = $(this);\n\n            // 入力項目の検索条件でEnterを押したら、検索処理を実行する\n            $searchArea.find('#search-form').submit({navi:0}, doSearch);\n\n            // 虫眼鏡アイコン押下したら、検索処理を実行する\n            $searchArea.find(\".left-icon\").click({navi:0}, doSearch);\n\n            // 検索条件入力したら、\n            $searchArea.find(\"#search-query\").keyup(function(){\n              var $this = $(this);\n              var $rightIcon = $this.parent().find(\".right-icon\");\n\n              if($this.val().length > 0) {\n                 // 検索条件に値がある場合は×アイコンの色を濃くする\n                 $rightIcon.css('color','#555');\n              } else {\n                 // 検索条件に値がない場合は×アイコンの色を薄くする\n                 $rightIcon.css('color','#ccc');\n              }\n            });\n\n            // ×アイコン押下したら、\n            $searchArea.find(\".right-icon\").click(function(){\n              // ×アイコンの色を薄くして\n              $(this).css('color','#ccc')\n                      // 検索条件をクリアする\n                     .parent().find(\"input\").val('');\n            });\n        });\n\n    // ドキュメントタイトルの\n    $('#header>h1')\n        // 直下に検索結果エリアを挿入\n        .before(\n            '<div id=\"search-result-area\">' +\n                '<div id=\"search-result-subheader\"></div>' +\n                '<div id=\"search-result-content\"></div>' +\n            '</div>')\n        // イベント登録\n        .ready(function() {\n            $(this)\n                .find('#search-result-area')\n                    // 検索結果エリアのバツアイコンをクリックしたら、\n                    .on(\"click\", '#remove-search-result', function(e) {\n                      var $searchResultArea = $(e.delegateTarget)\n                      // 検索結果エリアを非表示モードにする\n                      $searchResultArea.removeClass('show');\n                      // 検索結果エリアの中身を削除する\n                      $searchResultArea.find('#search-result-subheader').empty();\n                      $searchResultArea.find('#search-result-content').empty();\n                    })\n                    // 前ページリンクをクリックしたら、１ページ前を検索する\n                    .on(\"click\", \"#prevPageLink\", {navi:-1}, doSearch)\n                    // 次ページリンクをクリックしたら、１ページ後を検索する\n                    .on(\"click\", \"#nextPageLink\", {navi:1}, doSearch);\n        });\n\n\n\n    /**\n     * 検索処理\n     *\n     * @param  {eventObject} event\n     * @return {boolean}  submit処理を中断させるために必ずfalseを返却する\n     */\n    function doSearch(event){\n      // 検索フィールドの値をトリムして取得\n      var searchQuery = $.trim($('#search-query').val());\n      // 空の場合は検索処理を実行しない\n      if(searchQuery.length == 0) {\n        return false;\n      }\n\n\n      // 表示開始位置、表示件数の取得\n      var start = parseInt($('#search-start').val()),\n          num = parseInt($('#search-num').val());\n      // 表示開始位置のチェック\n      if(start < 0) {\n        start = 0;\n      }\n      // 表示件数のチェック\n      if(num < 1 || num > 100) {\n        num = 20;\n      }\n      // 表示ページ情報の取得\n      switch(event.data.navi) {\n        case -1:\n          // 前のページの場合\n          start -= num;\n          break;\n        case 1:\n          // 次のページの場合\n          start += num;\n          break;\n        default:\n        case 0:\n          start = 0;\n          break;\n      }\n\n\n      // URLを構築\n      var url = FESS_JSON_ENDPOINT + '?callback=?' + // 別ドメインを想定してJSONP形式でリクエストを送信する\n                                     '&q=' + encodeURIComponent(searchQuery) +\n                                     '&start=' + start +\n                                     '&num=' + num;\n\n      // 検索リクエスト送信\n      // 別ドメインを想定してJSONP形式でリクエストを送信する\n      $.ajax({\n          url: url,\n          dataType: 'jsonp',\n          success: renderSearchResult\n      });\n\n\n      // ページ情報の更新\n      $('#searchNum').val(num);\n\n      // ページ表示を上部に移動\n      $(document).scrollTop(0);\n\n      // サブミットを抑止するためにfalseを返す\n      return false;\n    };\n\n\n    /**\n     * 検索成功時に検索結果を描画する\n     *\n     * @param  {Anything} data レスポンスデータ\n     */\n    function renderSearchResult(data) {\n      // 検索結果処理\n      var dataResponse = data.response;\n      // ステータスチェック\n      if(dataResponse.status != 0) {\n        alert(\"検索中に問題が発生しました。\");\n        return;\n      }\n\n      // 検索結果領域を表示する\n      $('#search-result-area').addClass('show');\n\n      var $searchResultSubheader = $('#search-result-subheader'),\n          $searchResultContent = $('#search-result-content'),\n          record_count = dataResponse.record_count;\n\n      // 検索結果がない場合\n      if(record_count == 0) {\n        // サブヘッダーに出力\n        $searchResultSubheader[0].innerHTML =  '<div id=\"remove-search-result\" style=\"float:right;\"><i class=\"fa fa-times\"></i></div>';\n\n        // 結果領域に出力\n        $searchResultContent[0].innerHTML = '<b>' + dataResponse.q + '</b>に一致する情報は見つかりませんでした。';\n\n        return;\n      }\n\n\n      // 検索にヒットした場合\n      var page_number = dataResponse.page_number,\n          page_size = dataResponse.page_size,\n          page_count = dataResponse.page_count,\n          startRange = (page_number - 1) * page_size + 1,\n          endRange = page_number * page_size,\n          i = 0,\n          max,\n          offset = startRange - 1;\n\n      $('#search-start').val(offset);\n\n\n      // サブヘッダーに出力\n      $searchResultSubheader[0].innerHTML = '<b>' + dataResponse.q + '</b> の検索結果 ' +\n                                record_count + \" 件中 \" +  startRange + ' - ' +\n                                endRange + ' 件目 (' + dataResponse.exec_time + ' 秒)' +\n                               '<div id=\"remove-search-result\" style=\"float:right;\"><i class=\"fa fa-times\"></i></div>'\n\n      // 検索結果領域のクリア\n      $searchResultContent.empty();\n\n\n      // 検索結果の出力\n      var $resultBody = $(\"<ol/>\");\n      var results = dataResponse.result;\n      for(i = 0, max = results.length; i < max; i++) {\n        var element =\n            '<li>' +\n                '<h4 class=\"title\">' +\n                    '<a href=\"' +results[i].url_link + '\">' + results[i].title + '</a>' +\n                '</h4>' +\n                '<div class=\"body\">' +\n                    results[i].content_description +\n                    '<br/>' +\n                    '<cite>' + results[i].site + '</cite>' +\n                '</div>' +\n            '</li>';\n\n        $(element).appendTo($resultBody);\n      }\n      $resultBody.appendTo($searchResultContent);\n\n\n      // ページ番号情報の出力\n      var pageArea = [];\n      pageArea.push('<div id=\"pageInfo\">', page_number, 'ページ目<br/>');\n      if(page_number > 1) {\n        // 前のページへのリンク\n        pageArea.push('<a id=\"prevPageLink\" href=\"#\">&lt;&lt;前ページへ</a> ');\n      }\n      if(page_number < page_count) {\n        // 次のページへのリンク\n        pageArea.push('<a id=\"nextPageLink\" href=\"#\">次ページへ&gt;&gt;</a>');\n      }\n      pageArea.push('</div>');\n      $(pageArea.join(\"\")).appendTo($searchResultContent);\n    }\n});\n\n```\n\n\n```css:full-text-search.css\n@charset \"UTF-8\";\n\n#search-area {\n    margin-bottom: 1em;\n}\n\n.search-input-area {\n    position:relative;\n}\n\n/* 入力項目 */\n#search-query {\n    padding: 0.7em 2em;\n    width: 100%;\n    color: black;\n    font-family: arial,sans-serif;\n    font-size: 1em;\n    border: 1px solid #ccc;\n    border-radius: 2em;\n    outline: 0;\n}\n\n.search-input-area input:focus {\n    border: 1px solid #4d90fe;\n}\n\n/* アイコンは入力項目の左と右に配置する */\n.search-input-area .left-icon,\n.search-input-area .right-icon {\n    /* 縦方向の中央寄せ */\n    position:absolute;\n    top: 50%;\n    margin-top: -0.5em;\n    font-sise: 1em;\n    /* 要素にマウスを合わせたら、マウスポインタのマークを変える */\n    cursor:pointer;\n}\n\n.search-input-area .left-icon {\n    left: 0.7em;\n    color:#444;\n}\n\n.search-input-area .right-icon {\n    right: 0.7em;\n    /* 最初は、グレーアウトしておく */\n    color: #ccc;\n}\n\n/* アイコンにマウスを合わせたら、サイズを大きくする */\n.search-input-area .left-icon:hover,\n.search-input-area .right-icon:hover {\n    font-size: 1.4em;\n}\n\n\n.search-input-area .left-icon:hover {\n    left: 0.5em;\n}\n\n\n.search-input-area .right-icon:hover {\n    right: 0.5em;\n}\n\n/* 検索結果表示時に適用するスタイル */\n#search-result-area.show {\n    background: #f8f8f7;\n    border: 0px solid;\n    border-radius: 0.5em;\n    margin-top: 1em;\n    margin-bottom: 1em;\n    padding: 1em;\n}\n\n```\n\n### ドキュメントに全文検索用資産の読み込み処理を追加\n前手順でドキュメント用Webサーバに配置した`full-text-search.js`と`full-text-search.css`を、\n各ドキュメントから読み込むようにします。\n`full-text-search.js`はjQueryに依存しているので、\n既存のドキュメントで読み込んでいない場合はjQueryも読み込みも追加してください。\n\nドキュメント用Webサーバがこのようなフォルダ構成だとしたら、\n\n```\nドキュメント用Webサーバのドキュメントルート\n├── full-text-search.css\n├── full-text-search.js\n└── asciidoctor-sample\n    └── asciidoctor-sample.html\n```\n\n\n`asciidoctor-sample.adoc`には下記を追加します。\n\n```\n++++\n<link rel=\"stylesheet\" href=\"../full-text-search.css\"></link>\n<script\n  src=\"https://code.jquery.com/jquery-3.2.1.min.js\"\n  integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\"\n  crossorigin=\"anonymous\"></script>\n<script src=\"../full-text-search.js\"></script>\n++++\n```\n\n### 全文検索ができるかの確認\n以上の手順を実施すると、Asdciidoctorで全文検索ができるようになります。\nドキュメントをブラウザで見ると、目次上部に検索窓が追加されています。\n![7_全文検索イメージ_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/99093cd6-58e8-7cde-a3d8-5bec2a020668.png)\n<br/>\n\n検索条件を入力し、虫眼鏡アイコンをクリックすると、検索結果が表示されます。\n![7_全文検索イメージ_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/cde3d8ea-d883-a66b-f88d-9a5941026bc9.png)\n<br/>\n\n\n## まとめ\nFessのREST APIを使用してAsciidoctorで全文検索できるようにする方法を紹介しました。\nFessのREST APIを使えば、Asciidoctorに限らず、様々なシステムに全文検索機能を導入できそうです。\n\n\n## 参考\n* [Fess で作るApache Solrベースの検索サーバー 〜 REST API 編](http://fess.codelibs.org/ja/articles/article-4.html#js)\n* [全文検索サーバー Fess を Docker で動かす](http://qiita.com/cookienote/items/1f2443be25630a78d946)\n\n","comments_count":0,"created_at":"2017-06-26T00:21:37+09:00","likes_count":21,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true}]},{"node":{"fields":{"slug":"/e0ec0869-f368-5083-bdc2-cdba9d59427a/","title":"フロントエンド初心者がMEANスタック(MongoDB+Express+Angular+Node.js)でアプリを作ってみて躓いたこと","date":"2017-12-12T03:19:11+09:00","excerpt":"FUJITSU Advent Calendar 2017 12日目の記事です。リッチでイマドキなデザインのアプリが作りたくて、ここ４ヶ月ほどMEANスタック(MongoDB+Express+Angular+Node.js)でブログアプリを作...","tags":["JavaScript","Node.js","Express","mongoose","Angular","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"e0ec0869-f368-5083-bdc2-cdba9d59427a","title":"フロントエンド初心者がMEANスタック(MongoDB+Express+Angular+Node.js)でアプリを作ってみて躓いたこと","rendered_body":"<p><a href=\"https://qiita.com/advent-calendar/2017/fujitsu\">FUJITSU Advent Calendar 2017</a> 12日目の記事です。</p>\n\n<p>リッチでイマドキなデザインのアプリが作りたくて、<br>\nここ４ヶ月ほど<strong>MEAN</strong>スタック(<strong>M</strong>ongoDB+<strong>E</strong>xpress+<strong>A</strong>ngular+<strong>N</strong>ode.js)でブログアプリを作っています。<br>\n知識ゼロからのスタートでしたが、多くの方々がブログやStackOverFlowに情報を載せてくれているので、躓きながらもなんとかアプリ開発を進めることができました。</p>\n\n<p>この記事では、フロントエンド初心者の自分がMEANスタックでアプリを作る時に躓いたことや、こういう機能を実現するにはどうすればいいか?などをまとめています。<br>\nこれからをAngularを学ぼうとしている方、ExpressやMongoDBなどサーバーサイドJavaScriptを学ぼうとしている方の参考になればうれしいです。</p>\n\n<h2>\n<span id=\"アプリの紹介\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E7%B4%B9%E4%BB%8B\"><i class=\"fa fa-link\"></i></a>アプリの紹介</h2>\n\n<p>本線から脱線しますが、イントラでの使用を想定したQiitaのようなブログアプリです。デモ環境もあるのでよければ触ってみてください(モバイルには未対応ですが。。。)</p>\n\n<ul>\n<li><a href=\"https://github.com/Takumon/mean-blog\" rel=\"nofollow noopener\" target=\"_blank\">Github</a></li>\n<li><a href=\"https://hub.docker.com/r/takumon/mean-blog_auto/\" rel=\"nofollow noopener\" target=\"_blank\">Dockerhub</a></li>\n<li>\n<a href=\"https://material-blog-demo.herokuapp.com/\" rel=\"nofollow noopener\" target=\"_blank\">デモ環境</a> (ユーザID/パスは DemoUser / DemoUser1234# です)</li>\n</ul>\n\n<p>アプリキャプチャ その１ (記事詳細)<br>\n<a href=\"https://camo.qiitausercontent.com/4d64d8bd315bcf330d1ac6de1cfe8bb53f280992/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62383133333331372d666163322d626239622d386632642d3133646238393662656366352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/4d64d8bd315bcf330d1ac6de1cfe8bb53f280992/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62383133333331372d666163322d626239622d386632642d3133646238393662656366352e706e67\" alt=\"appdemo_detail.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/b8133317-fac2-bb9b-8f2d-13db896becf5.png\"></a></p>\n\n<p>アプリキャプチャ その２ (記事一覧)<br>\n<a href=\"https://camo.qiitausercontent.com/96927cda50e8df84b0c5415e996246c6d720b607/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39353064313036322d316261342d363366362d666535332d6366653664343634333061342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/96927cda50e8df84b0c5415e996246c6d720b607/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39353064313036322d316261342d363366362d666535332d6366653664343634333061342e706e67\" alt=\"アプリ_スクリーンキャプチャ_記事一覧.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/950d1062-1ba4-63f6-fe53-cfe6d46430a4.png\"></a></p>\n\n<p>アプリキャプチャ その３ (プロフィール)<br>\n<a href=\"https://camo.qiitausercontent.com/46aab6c2add74ca826b1dbe730d1a82eb481e295/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33323563373934382d636531362d396330382d306236362d6433383932653034366165642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/46aab6c2add74ca826b1dbe730d1a82eb481e295/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33323563373934382d636531362d396330382d306236362d6433383932653034366165642e706e67\" alt=\"アプリ_スクリーンキャプチャ_ ユーザ画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/325c7948-ce16-9c08-0b66-d3892e046aed.png\"></a></p>\n\n<h1>\n<span id=\"1-フロント側angularまわり\" class=\"fragment\"></span><a href=\"#1-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4angular%E3%81%BE%E3%82%8F%E3%82%8A\"><i class=\"fa fa-link\"></i></a>1. フロント側Angularまわり</h1>\n\n<h2>\n<span id=\"angularについて調べる時に古い情報を除外したい\" class=\"fragment\"></span><a href=\"#angular%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%BF%E3%81%B9%E3%82%8B%E6%99%82%E3%81%AB%E5%8F%A4%E3%81%84%E6%83%85%E5%A0%B1%E3%82%92%E9%99%A4%E5%A4%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Angularについて調べる時に古い情報を除外したい</h2>\n\n<p>1系は<code>AngularJS</code>、2系以降は<code>Angular</code>と呼ばれており、1系と2系以降では大きく仕様が異なります。<br>\nそのため検索する時は<code>Angualr2</code>などバージョンを指定したり、1系を除外するため<code>--AngularJS</code>をつけたりすると検索しやすいです。</p>\n\n<h2>\n<span id=\"htmlのdom要素を別のdom要素またはcomponentから扱いたい\" class=\"fragment\"></span><a href=\"#html%E3%81%AEdom%E8%A6%81%E7%B4%A0%E3%82%92%E5%88%A5%E3%81%AEdom%E8%A6%81%E7%B4%A0%E3%81%BE%E3%81%9F%E3%81%AFcomponent%E3%81%8B%E3%82%89%E6%89%B1%E3%81%84%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>HTMLのDOM要素を、別のDOM要素またはComponentから扱いたい</h2>\n\n<p>要素に<code>#xxxxx</code>のように<code>#</code>始まりの名前をつけると、別のDOM要素から参照できます</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;input</span> <span class=\"err\">#</span><span class=\"na\">phone</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"電話番号\"</span><span class=\"nt\">/&gt;</span>\n<span class=\"c\">&lt;!--  他のDOM要素からphonという変数名でDOM要素を参照できるようになる --&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"nt\">&gt;</span>(click)=\"callPhone(phone.value)\"&gt;\n</pre></div>\n</div>\n\n<p>Componentから参照する場合は<code>@ViewChild</code>を使います</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">Component</span></div>\n<div class=\"highlight\"><pre>  <span class=\"c1\">// ViewChildの引数に名前を文字列で指定します</span>\n  <span class=\"p\">@</span><span class=\"nd\">ViewChild</span><span class=\"p\">(</span><span class=\"s1\">'phone'</span><span class=\"p\">)</span> <span class=\"nx\">phoneElement</span><span class=\"p\">:</span> <span class=\"nx\">phoneElement</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">showPhoneValue</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">phoneElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://angular.io/guide/template-syntax#ref-vars\" rel=\"nofollow noopener\" target=\"_blank\">Angular公式サイト</a></li>\n<li><a href=\"https://stackoverflow.com/questions/32693061/how-can-i-select-an-element-in-a-component-template\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"routing時の認証を非同期で行いたい\" class=\"fragment\"></span><a href=\"#routing%E6%99%82%E3%81%AE%E8%AA%8D%E8%A8%BC%E3%82%92%E9%9D%9E%E5%90%8C%E6%9C%9F%E3%81%A7%E8%A1%8C%E3%81%84%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Routing時の認証を非同期で行いたい</h2>\n\n<p>URLごとの認証は<code>CanActivate</code>インターフェースを実装すればできますが、<br>\nサーバから認証情報を取得して非同期で認証したい場合もあると思います。<br>\nそのような時は、<strong><code>CanActivate#canActivate</code>で</strong>booleanの代わりに<strong>Observableを戻り値に指定する</strong>ことで実現できます。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">SampleAuthGuard</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Router</span><span class=\"p\">,</span> <span class=\"nx\">CanActivate</span><span class=\"p\">,</span> <span class=\"nx\">ActivatedRouteSnapshot</span><span class=\"p\">,</span> <span class=\"nx\">RouterStateSnapshot</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/router'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AuthenticationService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./authentication.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SampleAuthGuard</span> <span class=\"kr\">implements</span> <span class=\"nx\">CanActivate</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span>\n    <span class=\"kr\">private</span> <span class=\"nx\">auth</span><span class=\"p\">:</span> <span class=\"nx\">AuthenticationService</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n  <span class=\"c1\">// booleanではなくObservable&lt;boolean&gt;を戻り値で返す</span>\n  <span class=\"nx\">canActivate</span><span class=\"p\">(</span><span class=\"nx\">route</span><span class=\"p\">:</span> <span class=\"nx\">ActivatedRouteSnapshot</span><span class=\"p\">,</span> <span class=\"nx\">state</span><span class=\"p\">:</span> <span class=\"nx\">RouterStateSnapshot</span><span class=\"p\">):</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"kr\">boolean</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">auth</span><span class=\"p\">.</span><span class=\"nx\">checkState</span><span class=\"p\">()</span>\n      <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">err</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">of</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">))</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/38425461/angular2-canactivate-calling-async-function\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"formarrayの値を初期化したい\" class=\"fragment\"></span><a href=\"#formarray%E3%81%AE%E5%80%A4%E3%82%92%E5%88%9D%E6%9C%9F%E5%8C%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>FormArrayの値を初期化したい</h2>\n\n<p>FormControlはpatchValueで初期値を設定できますが、<br>\nFormArrayの場合patchValueで配列の値を設定しようとしても設定できません。<br>\nこういう場合は、<strong>配列1つ１つの値をもとにFormControlを生成してFormArrayにpush</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">ダメな例</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Form生成</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">group</span><span class=\"p\">({</span>\n    <span class=\"na\">schoolName</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">([])</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// Formに初期値を設定</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">pathValue</span><span class=\"p\">({</span>\n    <span class=\"na\">schooleName</span><span class=\"p\">:</span> <span class=\"s1\">'SampleSchoolName'</span> <span class=\"c1\">// FormControlの値の初期化はpatchValueで可能</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'taro'</span><span class=\"p\">,</span> <span class=\"s1\">'jiro'</span><span class=\"p\">,</span> <span class=\"s1\">'saburo'</span><span class=\"p\">];</span> <span class=\"c1\">// FormArrayに要素を追加する場合patchValueでは不可能</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">良い例</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Formを生成</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">group</span><span class=\"p\">({</span>\n    <span class=\"na\">schoolName</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">([])</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// Formに初期値を設定</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">pathValue</span><span class=\"p\">({</span>\n    <span class=\"na\">schooleName</span><span class=\"p\">:</span> <span class=\"s1\">'SampleSchoolName'</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// データからFormControlを生成し１件１件FormArrayにpushする</span>\n  <span class=\"p\">[</span><span class=\"s1\">'taro'</span><span class=\"p\">,</span> <span class=\"s1\">'jiro'</span><span class=\"p\">,</span> <span class=\"s1\">'saburo'</span><span class=\"p\">].</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">student</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">controls</span><span class=\"p\">[</span><span class=\"s1\">'students'</span><span class=\"p\">].</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">FormControll</span><span class=\"p\">(</span><span class=\"nx\">student</span><span class=\"p\">));</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/40916084/angular2-patchvalue-push-value-into-array\" rel=\"nofollow noopener\" target=\"_blank\">StackOvereFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"error-error-no-provider-for-templaterefというエラー\" class=\"fragment\"></span><a href=\"#error-error-no-provider-for-templateref%E3%81%A8%E3%81%84%E3%81%86%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>「ERROR Error: No provider for TemplateRef!」というエラー</h2>\n\n<p>最初このエラーが出た時は、何が原因なのかわからずに困りました。。。<br>\n大抵の場合は、<strong><code>*ngIf</code>や<code>*ngForm</code>の<code>*</code>が抜けてることが原因</strong>です(要するにただのタイポです。。。)<br>\n<code>*</code>が抜けると、Angularは<code>ngIf</code>をディレクティブとして解釈しようとしますが、<br>\nそんなディレクティブは存在しないので<code>No provider for TemplateRef!</code>と言われてしまうそうです。</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/35932074/angular2-no-provider-for-templateref-ngif-templateref\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"textareaにおいてtabキーでインデントしたい\" class=\"fragment\"></span><a href=\"#textarea%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6tab%E3%82%AD%E3%83%BC%E3%81%A7%E3%82%A4%E3%83%B3%E3%83%87%E3%83%B3%E3%83%88%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>textareaにおいてTabキーでインデントしたい</h2>\n\n<p>文書を入力するようなテキストエリアの場合に、Tabキーでのインデントしたい場合は、<br>\nkyedownイベント発生時にテキストエリアの値とキャレットの位置を操作することで実現可能です。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;textarea</span> <span class=\"err\">#</span><span class=\"na\">sampletextarea</span>\n  <span class=\"err\">(</span><span class=\"na\">keydown</span><span class=\"err\">)=\"</span><span class=\"na\">indent</span><span class=\"err\">($</span><span class=\"na\">event</span><span class=\"err\">,</span> <span class=\"na\">sampletextarea</span><span class=\"err\">)\"</span> <span class=\"nt\">&gt;&lt;/textarea&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">Component</span></div>\n<div class=\"highlight\"><pre>  <span class=\"nx\">indent</span><span class=\"p\">(</span><span class=\"nx\">$event</span><span class=\"p\">,</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Tabキー押下時</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">$event</span><span class=\"p\">.</span><span class=\"nx\">keyCode</span> <span class=\"o\">===</span> <span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 次の要素にフォーカスが移らないようにする</span>\n      <span class=\"nx\">$event</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n\n      <span class=\"c1\">// 現在のキャレット位置を取得</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">caretStart</span> <span class=\"o\">=</span> <span class=\"nx\">textareaElement</span><span class=\"p\">.</span><span class=\"nx\">selectionStart</span><span class=\"p\">;</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">caretEnd</span> <span class=\"o\">=</span> <span class=\"nx\">textareaElement</span><span class=\"p\">.</span><span class=\"nx\">selectionEnd</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// テキストエリアの値を取得し、キャレット位置にTabを挿入</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">TAB</span> <span class=\"o\">=</span> <span class=\"s1\">'¥t'</span><span class=\"p\">;</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">caretStart</span><span class=\"p\">)</span>\n                     <span class=\"o\">+</span> <span class=\"nx\">TAB</span> <span class=\"o\">+</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"nx\">caretStart</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// キャレット位置をTab分ずらす</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">focus</span><span class=\"p\">();</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">setSelectionRange</span><span class=\"p\">(</span><span class=\"nx\">caretStart</span> <span class=\"o\">+</span> <span class=\"nx\">TAB</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">,</span> <span class=\"nx\">caretEnd</span> <span class=\"o\">+</span> <span class=\"nx\">TAB</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h2>\n<span id=\"markdownプレビューを表示したいソースコードはシンタックスハイライトさせたい\" class=\"fragment\"></span><a href=\"#markdown%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%97%E3%81%9F%E3%81%84%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AF%E3%82%B7%E3%83%B3%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B9%E3%83%8F%E3%82%A4%E3%83%A9%E3%82%A4%E3%83%88%E3%81%95%E3%81%9B%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Markdownプレビューを表示したい、ソースコードはシンタックスハイライトさせたい</h2>\n\n<p><a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">marked</a>と<a href=\"https://github.com/isagalaev/highlight.js\" rel=\"nofollow noopener\" target=\"_blank\">highlight.js</a>を組み合わせて使います。<br>\n<a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">marked</a>のReadmeを見ればなんとなくわかりますが、Angularの仕組みに乗せる必要があるのでPipeやらServiceやらを作ります。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">markdown-parse.service.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">marked</span> <span class=\"k\">from</span> <span class=\"s1\">'marked'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">hljs</span> <span class=\"k\">from</span> <span class=\"s1\">'highlight.js'</span><span class=\"p\">;</span>\n\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MarkdownParseService</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">marked</span><span class=\"p\">.</span><span class=\"nx\">setOptions</span><span class=\"p\">({</span>\n      <span class=\"na\">highlight</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">hljs</span><span class=\"p\">.</span><span class=\"nx\">highlightAuto</span><span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">).</span><span class=\"nx\">value</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"na\">rawText</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">marked</span><span class=\"p\">(</span><span class=\"nx\">rawText</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">markdown.pipe.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nx\">marked</span> <span class=\"k\">from</span> <span class=\"s1\">'marked'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MarkdownParseService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./markdown-parse.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'toMarkdown'</span> <span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MarkdownParsePipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">markdownParseService</span><span class=\"p\">:</span> <span class=\"nx\">MarkdownParseService</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">any</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">markdownParseService</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>HTMLで下記のように指定します。<code>{{}}</code>だとサニタイズされてしまうので<code>innerHTML</code>属性を指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">innerHTML</span><span class=\"err\">]=\"</span><span class=\"na\">md</span> <span class=\"err\">|</span> <span class=\"na\">toMarkdown</span><span class=\"err\">\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://qiita.com/daikiojm/items/e02e2aeb0231b3620a0b\" id=\"reference-9001a931765f8f52acaf\">Qiita AngularでMarkdownをHTMLとして表示するカスタムpipeを作成する</a></li>\n<li>Github <a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">chjj/marked</a>\n</li>\n</ul>\n\n<h2>\n<span id=\"絞り込み条件付きリストにおいてリストの要素が変更追加削除された時に絞り込み結果をリフレッシュしたい\" class=\"fragment\"></span><a href=\"#%E7%B5%9E%E3%82%8A%E8%BE%BC%E3%81%BF%E6%9D%A1%E4%BB%B6%E4%BB%98%E3%81%8D%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%8C%E5%A4%89%E6%9B%B4%E8%BF%BD%E5%8A%A0%E5%89%8A%E9%99%A4%E3%81%95%E3%82%8C%E3%81%9F%E6%99%82%E3%81%AB%E7%B5%9E%E3%82%8A%E8%BE%BC%E3%81%BF%E7%B5%90%E6%9E%9C%E3%82%92%E3%83%AA%E3%83%95%E3%83%AC%E3%83%83%E3%82%B7%E3%83%A5%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>絞り込み条件付きリストにおいて、リストの要素が変更、追加、削除された時に絞り込み結果をリフレッシュしたい</h2>\n\n<p>リストの絞り込みはPipeで実現しますが、通常Pipeはリストの要素が変更されても再び絞り込みが実施されることはありません。<br>\nこのような場合はPipeアノテーションにて<strong>pureオプションをfalseに設定</strong>ましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"err\">#</span><span class=\"na\">searchUserName</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n  <span class=\"nt\">&lt;li</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let user of (userList | searchUserFilter: searchUserName.value);\"</span> <span class=\"nt\">&gt;</span>{{user.name}}<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">search-user.pipe.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">User</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./user'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'searchUserFilter'</span><span class=\"p\">,</span>\n  <span class=\"na\">pure</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"c1\">// pureをfalseにすることでユーザが変更、追加、削除された時にリフレッシュできる</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SearchFilterPipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">User</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">searchUserName</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">any</span><span class=\"p\">[]</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">searchUserName</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">items</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">searchUserName</span> <span class=\"o\">=</span> <span class=\"nx\">searchUserName</span><span class=\"p\">.</span><span class=\"nx\">toLowerCase</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span> <span class=\"nx\">item</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">userId</span><span class=\"p\">.</span><span class=\"nx\">toLowerCase</span><span class=\"p\">().</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"nx\">searchUserName</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://angular.io/guide/pipes#pure-and-impure-pipes\" rel=\"nofollow noopener\" target=\"_blank\">Angular公式サイト</a></li>\n</ul>\n\n<h2>\n<span id=\"グローバル定数を定義したい\" class=\"fragment\"></span><a href=\"#%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E5%AE%9A%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>グローバル定数を定義したい</h2>\n\n<p>いろんなクラスで使う定数を共通化する時は、単純に<strong>クラスを作ってstaticなメンバとして定数を定義</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">app-settings.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppSettings</span> <span class=\"p\">{</span>\n   <span class=\"kr\">public</span> <span class=\"kr\">static</span> <span class=\"nx\">API_ENDPOINT</span><span class=\"o\">=</span><span class=\"s1\">'http://127.0.0.1:6666/api/'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">SampleService</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">Injectable</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'angular2/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">AppSettings</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app-settings'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SampleService</span> <span class=\"p\">{</span>\n    <span class=\"nx\">sampleMethod</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">AppSettings</span><span class=\"p\">.</span><span class=\"nx\">API_ENDPOINT</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/34986922/define-global-constants-in-angular-2\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"画像が多い画面の初期表示を早くしたい\" class=\"fragment\"></span><a href=\"#%E7%94%BB%E5%83%8F%E3%81%8C%E5%A4%9A%E3%81%84%E7%94%BB%E9%9D%A2%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A1%A8%E7%A4%BA%E3%82%92%E6%97%A9%E3%81%8F%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>画像が多い画面の初期表示を早くしたい</h2>\n\n<p><a href=\"https://github.com/tjoskar/ng-lazyload-image\" rel=\"nofollow noopener\" target=\"_blank\">ng-lazyload-image</a>を使えば画像の遅延ロードを実現できます。<br>\n使い方もとても簡単でimgタグにディレクティブを指定するだけです。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre> <span class=\"nt\">&lt;img</span>\n  <span class=\"err\">[</span><span class=\"na\">defaultImage</span><span class=\"err\">]=\"</span><span class=\"na\">https:</span><span class=\"err\">//</span><span class=\"na\">images</span><span class=\"err\">.</span><span class=\"na\">sample</span><span class=\"err\">.</span><span class=\"na\">com</span><span class=\"err\">/</span><span class=\"na\">photo</span><span class=\"err\">/</span><span class=\"na\">defaultimage</span><span class=\"err\">\"</span> \n  <span class=\"err\">[</span><span class=\"na\">lazyLoad</span><span class=\"err\">]=\"</span><span class=\"na\">https:</span><span class=\"err\">//</span><span class=\"na\">images</span><span class=\"err\">.</span><span class=\"na\">sample</span><span class=\"err\">.</span><span class=\"na\">com</span><span class=\"err\">/</span><span class=\"na\">photo</span><span class=\"err\">/</span><span class=\"na\">sampleimage</span><span class=\"err\">\"</span>\n  <span class=\"err\">[</span><span class=\"na\">offset</span><span class=\"err\">]=\"</span><span class=\"na\">30</span><span class=\"err\">\"</span>\n <span class=\"nt\">&gt;</span>\n</pre></div>\n</div>\n\n<p><em>defaultImage</em><br>\n　即時ロードされる画像のURL、遅延ロードする画像を読み込む間、表示される<br>\n<em>lazyLoad</em><br>\n　遅延ロードする画像のURL<br>\n<em>offset</em><br>\n　スクロールが発生する場合に画面下部の何ピクセル下に来た時にロードを開始するか<br>\n<em>errorImage</em><br>\n　遅延ロード失敗時に表示する画像URL</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/tjoskar/ng-lazyload-image\" rel=\"nofollow noopener\" target=\"_blank\">ng-lazyload-image</a></li>\n</ul>\n\n<h2>\n<span id=\"angular-cliのng-serveコマンドでdistフォルダを一旦削除したくない\" class=\"fragment\"></span><a href=\"#angular-cli%E3%81%AEng-serve%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7dist%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E3%82%92%E4%B8%80%E6%97%A6%E5%89%8A%E9%99%A4%E3%81%97%E3%81%9F%E3%81%8F%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>Angular Cliの<code>ng serve</code>コマンドでdistフォルダを一旦削除したくない</h2>\n\n<p><code>ng serve</code>コマンドは<code>dist</code>フォルダを削除してからtsファイルをトランスコンパイルします。<br>\nそれを防ぐためには、<strong>delete-output-pathオプションをfalse</strong>に指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json　ビルドスクリプト</span></div>\n<div class=\"highlight\"><pre><span class=\"s2\">\"script\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"cp ./resource/* dist &amp;&amp; ng serve --delete-output-path=false\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/angular/angular-cli/issues/4366\" rel=\"nofollow noopener\" target=\"_blank\">angular-cli github issue #4366</a></li>\n</ul>\n\n<h2>\n<span id=\"aotコンパイルが遅いのでなんとかしたい\" class=\"fragment\"></span><a href=\"#aot%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%8C%E9%81%85%E3%81%84%E3%81%AE%E3%81%A7%E3%81%AA%E3%82%93%E3%81%A8%E3%81%8B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>AOTコンパイルが遅いのでなんとかしたい</h2>\n\n<p>なんとかできませんでした。。。(もしかしたら方法があるのかもしれません。誰か教えてください!!!)<br>\nAOTコンパイルはJITコンパイルが検出してくれないHTMLのエラーを警告してくれますが、その反面遅いです。特に<a href=\"https://material.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular Material</a>を使う場合は顕著です。<br>\nそのため、自分の場合は基本的にJITビルドを使い、issueのプルリクをする前など区切りのいいタイミングでAOTビルドしてエラーがないか確認するというように使い分けてました。</p>\n\n<h1>\n<span id=\"2-フロント側angularでのテスト周り\" class=\"fragment\"></span><a href=\"#2-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4angular%E3%81%A7%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A\"><i class=\"fa fa-link\"></i></a>2. フロント側Angularでのテスト周り</h1>\n\n<h2>\n<span id=\"ci環境などでテストが終わらずにタイムアウトしてしまう\" class=\"fragment\"></span><a href=\"#ci%E7%92%B0%E5%A2%83%E3%81%AA%E3%81%A9%E3%81%A7%E3%83%86%E3%82%B9%E3%83%88%E3%81%8C%E7%B5%82%E3%82%8F%E3%82%89%E3%81%9A%E3%81%AB%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%97%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86\"><i class=\"fa fa-link\"></i></a>CI環境などでテストが終わらずにタイムアウトしてしまう</h2>\n\n<p>CirleCiなどでテストを実行する場合<code>ng test</code>コマンドだとプロセスが終了しないためタイムアウトで失敗してしまいます。<br>\nこのような場合は<strong>watchオプションをfalseに設定</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ng test --wtach=false\n</pre></div></div>\n\n<p><strong>参考サイト</strong><br>\n<a href=\"https://github.com/angular/angular-cli/issues/362\" rel=\"nofollow noopener\" target=\"_blank\">Github isssue</a></p>\n\n<h2>\n<span id=\"テスト時にerror-timeout---async-callback-was-not-invoked-within-timeout-specified-by-jasminedefault_timeout_intervalやfailed-to-execute-send-on-xmlhttprequestのエラー\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E6%99%82%E3%81%ABerror-timeout---async-callback-was-not-invoked-within-timeout-specified-by-jasminedefault_timeout_interval%E3%82%84failed-to-execute-send-on-xmlhttprequest%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>テスト時に「Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.」や「Failed to execute 'send' on 'XMLHttpRequest'」のエラー</h2>\n\n<p>このような場合は、一時的に<code>ng test</code>コマンドのオプションに<strong><code>-sm=false</code>を追加</strong>してテストし直すと根本原因エラーメッセージで出力されるようになります。<br>\n大抵の場合は自作したモッククラスに必要なメソッドがないことが原因です。</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/45399079/angular-tests-failing-with-failed-to-execute-send-on-xmlhttprequest\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト用に子コンポーネントをモック化したい\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%94%A8%E3%81%AB%E5%AD%90%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E3%83%A2%E3%83%83%E3%82%AF%E5%8C%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト用に子コンポーネントをモック化したい</h2>\n\n<p>意外と簡単で、TestBed#configureTestingModuleで<br>\ndeclarationsに自作したモックの子コンポーネントを追加するだけです。<br>\ninput,outputがあれば必要に応じてメンバ定義します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\"><div class=\"highlight\"><pre><span class=\"c1\">// ※import文は省略</span>\n\n<span class=\"c1\">// モックの子コンポーネントを定義</span>\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-child'</span><span class=\"p\">,</span> <span class=\"c1\">// 子コンポーネントと同じものを定義</span>\n  <span class=\"na\">template</span><span class=\"p\">:</span> <span class=\"s1\">'&lt;p&gt;Mock Child Component&lt;/p&gt;'</span>\n<span class=\"p\">})</span>\n<span class=\"kd\">class</span> <span class=\"nx\">MockClildComponent</span> <span class=\"p\">{</span>\n  <span class=\"p\">@</span><span class=\"nd\">Input</span><span class=\"p\">()</span> <span class=\"nx\">childInput</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"p\">@</span><span class=\"nd\">Output</span><span class=\"p\">()</span> <span class=\"nx\">childOutput</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">EventEmitter</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// ...</span>\n\n<span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n    <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"c1\">// テスト時のdeclarationsにモックの定義を追加</span>\n      <span class=\"nx\">MockProductSettingsComponent</span><span class=\"p\">,</span>\n      <span class=\"c1\">// ...</span>\n    <span class=\"p\">],</span>\n    <span class=\"c1\">// ...</span>\n  <span class=\"p\">});</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">});</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/41240163/mocking-child-components-angular-2\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト結果にangular-materilaのスタイルが反映されない\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%B5%90%E6%9E%9C%E3%81%ABangular-materila%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%8C%E5%8F%8D%E6%98%A0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト結果にAngular Materilaのスタイルが反映されない</h2>\n\n<p>UIフレームワークで<a href=\"https://material.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular Material</a>を使っている場合、<br>\n<code>karma.config.js</code>でAngular Materilaのcssを直接読み込んであげる必要あります。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">karma.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"err\">・・・</span>\n      <span class=\"c1\">// Angular Materialのスタイルをテスト開始時に読み込んでおく</span>\n      <span class=\"p\">{</span><span class=\"nl\">pattern</span><span class=\"p\">:</span> <span class=\"s1\">'./node_modules/@angular/material/prebuilt-themes/indigo-pink.css'</span><span class=\"p\">,</span> <span class=\"nx\">included</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">watched</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">},</span>\n<span class=\"p\">],</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/angular/material2/issues/4056\" rel=\"nofollow noopener\" target=\"_blank\">stackoverflow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト結果にstylesscssアプリ共通のスタイル定義のスタイルが反映されない\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%B5%90%E6%9E%9C%E3%81%ABstylesscss%E3%82%A2%E3%83%97%E3%83%AA%E5%85%B1%E9%80%9A%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E5%AE%9A%E7%BE%A9%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%8C%E5%8F%8D%E6%98%A0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト結果にstyles.scss(アプリ共通のスタイル定義)のスタイルが反映されない</h2>\n\n<p>アプリ共通スタイルをSASS形式にしている場合<br>\n開発用ライブライに<code>karma-scss-preprocessor</code>と<code>node-sass</code>を追加して<code>karma.conf.js</code>を下記のように設定します。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">karma.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"err\">・・・</span>\n<span class=\"err\">　</span> <span class=\"c1\">// プラグインに`karma-scss-preprocessor`を追加</span>\n  <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'karma-scss-preprocessor'</span><span class=\"p\">)</span>\n<span class=\"p\">],</span>\n\n\n<span class=\"nx\">files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"err\">・・・</span>\n  <span class=\"c1\">// filesにアプリ共通スタイルを追加</span>\n  <span class=\"p\">{</span> <span class=\"nl\">pattern</span><span class=\"p\">:</span> <span class=\"s1\">'./src/styles.scss'</span><span class=\"p\">,</span> <span class=\"nx\">watched</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>  <span class=\"nx\">included</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">served</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n<span class=\"p\">],</span>\n\n<span class=\"c1\">// preprocessorsを追加</span>\n<span class=\"nx\">preprocessors</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n <span class=\"s1\">'./src/test.ts'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'@angular/cli'</span><span class=\"p\">],</span>\n <span class=\"s1\">'./src/styles.scss'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'scss'</span><span class=\"p\">]</span>\n<span class=\"p\">},</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong>:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/44460733/how-to-configure-karma-to-include-global-scss-files-for-an-angular-cli-project/44498689#44498689\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n<li><a href=\"https://github.com/karma-runner/karma/issues/2700\" rel=\"nofollow noopener\" target=\"_blank\">Github karma/issue/2700</a></li>\n</ul>\n\n<h1>\n<span id=\"3-バックエンド側-expressmongodb周り\" class=\"fragment\"></span><a href=\"#3-%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89%E5%81%B4-expressmongodb%E5%91%A8%E3%82%8A\"><i class=\"fa fa-link\"></i></a>3. バックエンド側 Express、MongoDB周り</h1>\n\n<p>※MongDBをNode.jsで扱う場合は<a href=\"https://github.com/Automattic/mongoose\" rel=\"nofollow noopener\" target=\"_blank\">mongoose</a>という便利なライブラリがあるのでそれを使う前提のお話です。</p>\n\n<h2>\n<span id=\"mongooseのvirtualメソッドを使う\" class=\"fragment\"></span><a href=\"#mongoose%E3%81%AEvirtual%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>mongooseのvirtualメソッドを使う</h2>\n\n<p>例えば<code>記事</code>,<code>コメント</code>,<code>リプライ</code>などのモデルを定義する場合、<br>\n３つのモデルのライフサイクルは、記事追加 =&gt; 記事に対するコメント追加 =&gt; コメントに対するリプライ追加　のようになります。<br>\nこのような場合は、コメントが記事の参照を持ち、リプライがコメントの参照を持つモデル構造が望ましいです。コメントやリプライ追加時に１つのモデルの更新だけですむからです。<br>\n<a href=\"https://camo.qiitausercontent.com/129a84bd908d87c7fcbda29704ad50ac10529129/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393361633065362d333137652d316364662d626662612d3133353331653234353562612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/129a84bd908d87c7fcbda29704ad50ac10529129/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393361633065362d333137652d316364662d626662612d3133353331653234353562612e706e67\" alt=\"db構造_良.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f93ac0e6-317e-1cdf-bfba-13531e2455ba.png\"></a></p>\n\n<p>ただ記事の検索は少し工夫が必要で、<strong>mongooseのvirtualを使います</strong>。これによって記事からコメントへの参照、コメントからリプライへの参照を擬似的に定義できるため、<br>\n検索時に擬似要素をpopulateするだけで、記事に紐付くコメントとリプライを取得できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/bd8d4eedcb08eeaca13290e8dc91b8b2e10c5dae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34616162376633382d316631392d653030622d623335642d3233626162663336613735622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/bd8d4eedcb08eeaca13290e8dc91b8b2e10c5dae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34616162376633382d316631392d653030622d623335642d3233626162663336613735622e706e67\" alt=\"mongoose virtualのイメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/4aab7f38-1f19-e00b-b35d-23babf36a75b.png\"></a></p>\n\n<p>具体的なソースコードを示します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">article.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">ArticleSchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">content</span><span class=\"p\">:</span> <span class=\"nb\">String</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">toJSON</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">virtuals</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"p\">});</span>\n\n\n<span class=\"c1\">// 記事に紐付くコメントモデルの配列をcommentsという擬似要素で定義する</span>\n<span class=\"nx\">ArticleSchema</span><span class=\"p\">.</span><span class=\"nx\">virtual</span><span class=\"p\">(</span><span class=\"s1\">'comments'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Comment'</span><span class=\"p\">,</span>\n  <span class=\"na\">localField</span><span class=\"p\">:</span> <span class=\"s1\">'_id'</span><span class=\"p\">,</span>\n  <span class=\"na\">foreignField</span><span class=\"p\">:</span> <span class=\"s1\">'articleId'</span><span class=\"p\">,</span>\n  <span class=\"na\">justOne</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Article</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Article'</span><span class=\"p\">,</span> <span class=\"nx\">ArticleSchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Article</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">comment.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">CommentSchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">articleId</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">.</span><span class=\"nx\">Types</span><span class=\"p\">.</span><span class=\"nx\">ObjectId</span><span class=\"p\">,</span>\n    <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Article'</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">comment</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">;</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">toJSON</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">virtuals</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"p\">});</span>\n\n<span class=\"c1\">// コメントに紐付くリプライモデルの配列をrepliesという擬似要素で定義する</span>\n<span class=\"nx\">CommentSchema</span><span class=\"p\">.</span><span class=\"nx\">virtual</span><span class=\"p\">(</span><span class=\"s1\">'replies'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Reply'</span><span class=\"p\">,</span>\n  <span class=\"na\">localField</span><span class=\"p\">:</span> <span class=\"s1\">'_id'</span><span class=\"p\">,</span>\n  <span class=\"na\">foreignField</span><span class=\"p\">:</span> <span class=\"s1\">'commentId'</span><span class=\"p\">,</span>\n  <span class=\"na\">justOne</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Comment</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Comment'</span><span class=\"p\">,</span> <span class=\"nx\">CommentSchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Comment</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">reply.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">ReplySchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">commentId</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">.</span><span class=\"nx\">Types</span><span class=\"p\">.</span><span class=\"nx\">ObjectId</span><span class=\"p\">,</span>\n    <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Comment'</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">reply</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Reply</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Reply'</span><span class=\"p\">,</span> <span class=\"nx\">ReplySchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Reply</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">検索処理</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">Article</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">()</span>\n<span class=\"p\">.</span><span class=\"nx\">populate</span><span class=\"p\">({</span>\n  <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"s1\">'comments'</span><span class=\"p\">,</span> <span class=\"c1\">// Articleモデルで定義した擬似要素commentsをpopulateする</span>\n  <span class=\"na\">populate</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"s1\">'replies'</span><span class=\"p\">,</span> <span class=\"c1\">// Commentモデルで定義した擬似要素repliesをpopulateする</span>\n  <span class=\"p\">}],</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"リクエストレスポンスのログ出力したい\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%81%AE%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>リクエスト、レスポンスのログ出力したい</h2>\n\n<p>Expressのuseにて実現します。<br>\nレスポンスオブジェクトのfinishイベントを監視することで、レスポンス時にログを出力しています。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">リクエストとレスポンスのログ出力　※ここでは簡単のためコンソールに出力しています</span></div>\n<div class=\"highlight\"><pre><span class=\"kd\">const</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n<span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"nx\">accessLogHandler</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n  <span class=\"c1\">// リクエスト時のログ　</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">([</span>\n    <span class=\"s1\">'start'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'x-forwarded-for'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span>\n    <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">referer</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'user-agent'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'--ms--'</span>\n  <span class=\"p\">].</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">',</span><span class=\"err\">\\</span><span class=\"s1\">t'</span><span class=\"p\">));</span>\n\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">once</span><span class=\"p\">(</span><span class=\"s1\">'finish'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"err\">　　</span> <span class=\"c1\">// レスポンス時のログ</span>\n    <span class=\"nx\">accessLogger</span><span class=\"p\">.</span><span class=\"nx\">info</span><span class=\"p\">([</span>\n      <span class=\"s1\">'end'</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'x-forwarded-for'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">referer</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'user-agent'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'--'</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">getMilliseconds</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"nx\">start</span><span class=\"p\">.</span><span class=\"nx\">getMilliseconds</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"s1\">'ms--'</span>\n    <span class=\"p\">].</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">',</span><span class=\"err\">\\</span><span class=\"s1\">t'</span><span class=\"p\">));</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">next</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<p>実際のログはこんな感じで出力されます。</p>\n\n<div class=\"code-frame\" data-lang=\"py3\"><div class=\"highlight\"><pre><span class=\"n\">start</span><span class=\"p\">,</span>  <span class=\"p\">::</span><span class=\"n\">ffff</span><span class=\"p\">:</span><span class=\"mf\">127.0</span><span class=\"o\">.</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">authenticate</span><span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"p\">,</span>   <span class=\"o\">-</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">4200</span><span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"n\">Mozilla</span><span class=\"o\">/</span><span class=\"mf\">5.0</span> <span class=\"p\">(</span><span class=\"n\">Macintosh</span><span class=\"p\">;</span> <span class=\"n\">Intel</span> <span class=\"n\">Mac</span> <span class=\"n\">OS</span> <span class=\"n\">X</span> <span class=\"mi\">10</span><span class=\"n\">_12_6</span><span class=\"p\">)</span> <span class=\"n\">AppleWebKit</span><span class=\"o\">/</span><span class=\"mf\">537.36</span> <span class=\"p\">(</span><span class=\"n\">KHTML</span><span class=\"p\">,</span> <span class=\"n\">like</span> <span class=\"n\">Gecko</span><span class=\"p\">)</span> <span class=\"n\">Chrome</span><span class=\"o\">/</span><span class=\"mf\">62.0</span><span class=\"o\">.</span><span class=\"mf\">3202.94</span> <span class=\"n\">Safari</span><span class=\"o\">/</span><span class=\"mf\">537.36</span><span class=\"p\">,</span> <span class=\"o\">--</span><span class=\"n\">ms</span><span class=\"o\">--</span>\n<span class=\"n\">end</span><span class=\"p\">,</span>    <span class=\"p\">::</span><span class=\"n\">ffff</span><span class=\"p\">:</span><span class=\"mf\">127.0</span><span class=\"o\">.</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"p\">,</span>                  <span class=\"mi\">403</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">4200</span><span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"n\">Mozilla</span><span class=\"o\">/</span><span class=\"mf\">5.0</span> <span class=\"p\">(</span><span class=\"n\">Macintosh</span><span class=\"p\">;</span> <span class=\"n\">Intel</span> <span class=\"n\">Mac</span> <span class=\"n\">OS</span> <span class=\"n\">X</span> <span class=\"mi\">10</span><span class=\"n\">_12_6</span><span class=\"p\">)</span> <span class=\"n\">AppleWebKit</span><span class=\"o\">/</span><span class=\"mf\">537.36</span> <span class=\"p\">(</span><span class=\"n\">KHTML</span><span class=\"p\">,</span> <span class=\"n\">like</span> <span class=\"n\">Gecko</span><span class=\"p\">)</span> <span class=\"n\">Chrome</span><span class=\"o\">/</span><span class=\"mf\">62.0</span><span class=\"o\">.</span><span class=\"mf\">3202.94</span> <span class=\"n\">Safari</span><span class=\"o\">/</span><span class=\"mf\">537.36</span><span class=\"p\">,</span>  <span class=\"o\">--</span><span class=\"mi\">47</span><span class=\"n\">ms</span><span class=\"o\">--</span>\n</pre></div></div>\n\n<h2>\n<span id=\"ログ出力でオブジェクトの全プロパティを出力したい\" class=\"fragment\"></span><a href=\"#%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E3%81%A7%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%85%A8%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%82%92%E5%87%BA%E5%8A%9B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>ログ出力でオブジェクトの全プロパティを出力したい</h2>\n\n<p>オブジェクトの中身をログで確認する時はNode.jsの<code>util.inspect()</code>を使います。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre><span class=\"kd\">const</span> <span class=\"nx\">util</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'util'</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">myObject</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"s2\">\"a\"</span><span class=\"p\">:</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span>\n   <span class=\"s2\">\"b\"</span><span class=\"p\">:{</span>\n      <span class=\"s2\">\"c\"</span><span class=\"p\">:</span><span class=\"s2\">\"c\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"d\"</span><span class=\"p\">:{</span>\n         <span class=\"s2\">\"e\"</span><span class=\"p\">:</span><span class=\"s2\">\"e\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"f\"</span><span class=\"p\">:{</span>\n            <span class=\"s2\">\"g\"</span><span class=\"p\">:</span><span class=\"s2\">\"g\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"h\"</span><span class=\"p\">:{</span>\n               <span class=\"s2\">\"i\"</span><span class=\"p\">:</span><span class=\"s2\">\"i\"</span>\n            <span class=\"p\">}</span>\n         <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">};</span> \n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">util</span><span class=\"p\">.</span><span class=\"nx\">inspect</span><span class=\"p\">(</span><span class=\"nx\">myObject</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">));</span>\n</pre></div></div>\n\n<p>このようなログが出力されます</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>{ a: 'a', b: { c: 'c', d: { e: 'e', f: [Object] } } }\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/10729276/how-can-i-get-the-full-object-in-node-jss-console-log-rather-than-object\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"環境変数で上書きできる定数を定義したい\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%81%A7%E4%B8%8A%E6%9B%B8%E3%81%8D%E3%81%A7%E3%81%8D%E3%82%8B%E5%AE%9A%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>環境変数で上書きできる定数を定義したい</h2>\n\n<p>例えばサーバのポートなど環境個別に設定したくなるようなものは<br>\n環境変数で上書きできる定数にしておくと便利です。<br>\nNode.jsではprocess.env.変数名で環境変数が参照できるので下記のようにします。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">定数定義</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_PORT</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">SERVER_PORT</span> <span class=\"o\">||</span> <span class=\"s1\">'3000'</span><span class=\"p\">;</span><span class=\"err\">　</span><span class=\"c1\">// 環境変数SERVER_PORTが未指定の場合は3000となる</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_HOST</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">SERVER_HOST</span> <span class=\"o\">||</span> <span class=\"s1\">'localhost'</span><span class=\"p\">;</span> <span class=\"c1\">// 環境変数SERVER_HOSTが未指定の場合はlocalhostとなる</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"db初回アクセスに失敗した場合にリトライされない\" class=\"fragment\"></span><a href=\"#db%E5%88%9D%E5%9B%9E%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%AB%E5%A4%B1%E6%95%97%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AB%E3%83%AA%E3%83%88%E3%83%A9%E3%82%A4%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>DB初回アクセスに失敗した場合にリトライされない</h2>\n\n<p>mongooseを使っていると、DB初回接続時にエラーが起きた時に、なぜか再接続処理してくれません。<br>\nDockerでアプリを配布する場合、アプリとMongoDBをdocker-composeで同時に立ち上げることがあると思いますが、まだMongoDBが起動しきってない状態でアプリからDBに接続しようとすると、アプリが異常終了してしまいます。これを防ぐには自力で再接続処理を実装する必要があります。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre><span class=\"kd\">function</span> <span class=\"nx\">createConnection</span> <span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">createConnection</span><span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">(</span><span class=\"sr\">/failed to connect to server .* on first connect/</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(),</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">));</span>\n\n            <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Retrying first connect...\"</span><span class=\"p\">);</span>\n                <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">openUri</span><span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">).</span><span class=\"k\">catch</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n            <span class=\"c1\">// 20秒後に再接続する</span>\n            <span class=\"p\">},</span> <span class=\"mi\">20</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(),</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">once</span><span class=\"p\">(</span><span class=\"s1\">'open'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Connection to db established.\"</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">db</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/Automattic/mongoose/issues/5169\" rel=\"nofollow noopener\" target=\"_blank\">Github mongooseのissue5169</a></li>\n</ul>\n","body":"[FUJITSU Advent Calendar 2017](https://qiita.com/advent-calendar/2017/fujitsu) 12日目の記事です。\n\nリッチでイマドキなデザインのアプリが作りたくて、\nここ４ヶ月ほど**MEAN**スタック(**M**ongoDB+**E**xpress+**A**ngular+**N**ode.js)でブログアプリを作っています。\n知識ゼロからのスタートでしたが、多くの方々がブログやStackOverFlowに情報を載せてくれているので、躓きながらもなんとかアプリ開発を進めることができました。\n\nこの記事では、フロントエンド初心者の自分がMEANスタックでアプリを作る時に躓いたことや、こういう機能を実現するにはどうすればいいか?などをまとめています。\nこれからをAngularを学ぼうとしている方、ExpressやMongoDBなどサーバーサイドJavaScriptを学ぼうとしている方の参考になればうれしいです。\n\n## アプリの紹介\n本線から脱線しますが、イントラでの使用を想定したQiitaのようなブログアプリです。デモ環境もあるのでよければ触ってみてください(モバイルには未対応ですが。。。)\n\n* [Github](https://github.com/Takumon/mean-blog)\n* [Dockerhub](https://hub.docker.com/r/takumon/mean-blog_auto/)\n* [デモ環境](https://material-blog-demo.herokuapp.com/) (ユーザID/パスは DemoUser / DemoUser1234# です)\n\nアプリキャプチャ その１ (記事詳細)\n![appdemo_detail.png](https://qiita-image-store.s3.amazonaws.com/0/49915/b8133317-fac2-bb9b-8f2d-13db896becf5.png)\n\nアプリキャプチャ その２ (記事一覧)\n![アプリ_スクリーンキャプチャ_記事一覧.png](https://qiita-image-store.s3.amazonaws.com/0/49915/950d1062-1ba4-63f6-fe53-cfe6d46430a4.png)\n\nアプリキャプチャ その３ (プロフィール)\n![アプリ_スクリーンキャプチャ_ ユーザ画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/325c7948-ce16-9c08-0b66-d3892e046aed.png)\n\n# 1. フロント側Angularまわり\n## Angularについて調べる時に古い情報を除外したい\n1系は`AngularJS`、2系以降は`Angular`と呼ばれており、1系と2系以降では大きく仕様が異なります。\nそのため検索する時は`Angualr2`などバージョンを指定したり、1系を除外するため\u001e`--AngularJS`をつけたり\u001dすると検索しやすいです。\n\n## HTMLのDOM\b要素を、別のDOM要素またはComponentから扱いたい\n要素に`#xxxxx`\bのように`#`始まりの名前をつけると、別の\bDOM要素から参照できます\n\n```html:HTML\n<input #phone placeholder=\"電話番号\"/>\n<!--  他のDOM要素からphonという変数名でDOM要素を参照できるようになる -->\n<button >(click)=\"callPhone\b(phone.value)\">\n```\n\n\bComponentから参照する場合は`@ViewChild`を使います\n\n```typescript:Component\n  // \bViewChildの引数に\b\b名前を文字列で指定します\n  @ViewChild('phone') phoneElement: phoneElement;\n\n  showPhoneValue() {\n    console.log(this.phoneElement.value);\n    )\n  }\n```\n\n\b**参考サイト**\n\n* [Angular公式サイト](https://angular.io/guide/template-syntax#ref-vars)\n* [StackOverFlow](https://stackoverflow.com/questions/32693061/how-can-i-select-an-element-in-a-component-template)\n\n\n\n## Routing時の認証を非同期で行いたい\nURLごとの認証は`CanActivate`インターフェースを実装すればできますが、\nサーバから認証情報を取得して非同期で認証したい場合もあると思います。\nそのような時は、**`CanActivate#canActivate`で**booleanの代わりに**Observable<boolean>を戻り値に指定する**ことで実現できます。\n\n\n```typescript:SampleAuthGuard\nimport { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs/Rx';\n\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable()\nexport class SampleAuthGuard implements CanActivate {\n\n  constructor(\n    private auth: AuthenticationService,\n  ) { }\n\n  // booleanではなくObservable<boolean>を戻り値で返す\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.auth.checkState()\n      .map(res => true)\n      .catch(err => Observable.of(false))\n  }\n}\n\n```\n\n\b**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/38425461/angular2-canactivate-calling-async-function)\n\n## FormArrayの値を初期化したい\nFormControlはpatchValueで初期値を設定できますが、\nFormArrayの場合patch\bValueで配列の値を設定しようと\bしても設定できません。\n\bこういう場合は、**\b\b配列1つ１つの値をもとにFormControlを生成してFormArrayにpush**します。\n\n```typescript:ダメな例\nngOnInit() {\n  // Form生成\n  this.form = this.formBuilder.group({\n    schoolName: '',\n    students: this.formBuilder.array([])\n  });\n\n  // Formに初期値を設定\n  this.form.pathValue({\n    schooleName: 'SampleSchoolName' // FormControlの値の初期化はpatchValueで可能\n    students: ['taro', 'jiro', 'saburo']; // FormArrayに要素を追加する場合patchValueでは不可能\n  });\n}\n```\n\n```typescript:\b良い例\nngOnInit() {\n  // Formを生成\n  this.form = this.formBuilder.group({\n    schoolName: '',\n    students: this.formBuilder.array([])\n  });\n\n  // Formに初期値を設定\n  this.form.pathValue({\n    schooleName: 'SampleSchoolName'\n  });\n\n  // データからFormControlを生成し１件１件FormArrayにpushする\n  ['taro', 'jiro', 'saburo'].forEach(student -> {\n    this.form.controls['students'].push(new FormControll(student));\n  });\n}\n```\n\n\b**参考サイト**\n\n* [StackOvereFlow](https://stackoverflow.com/questions/40916084/angular2-patchvalue-push-value-into-array)\n\n## 「ERROR Error: No provider for TemplateRef!」というエラー\n最初このエラーが出た時は、何が原因なのかわからずに困りました。。。\n大抵の場合は、**`*ngIf`や`*ngForm`の`*`が抜けてることが原因**です(要するにただのタイポです。。。)\n`*`が抜けると、Angularは`ngIf`をディレクティブとして解釈しようとしますが、\n\bそんな\b\bディレクティブは存在しないので`No provider for TemplateRef!`と言われてしまうそうです。\n\n\b**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/35932074/angular2-no-provider-for-templateref-ngif-templateref)\n\n\n## textareaにおいてTabキーでインデントしたい\n文書を入力するようなテキストエリアの場合に、\u001dTabキーでのインデントしたい場合は、\n\bkyedownイベント発生時に\bテキストエリアの値とキャレットの位置を操作することで実現可能です。\n\n```html:HTML\n<textarea #sampletextarea\n  (keydown)=\"indent($event, sampletextarea)\" ></textarea>\n```\n\n```typescript:Component\n  indent($event, sampleTextAreaElement) {\n    // Tabキー押下時\n    if ($event.keyCode === 9) {\n      \b// 次の要素に\bフォーカスが移らないようにする\n      $event.preventDefault();\n\n      // 現在のキャレット位置を取得\n      \bconst caretStart = textareaElement.selectionStart;\n      const caretEnd = textareaElement.selectionEnd;\n\n      // テキストエリアの値を\b取得し、キャレット位置にTabを挿入\n      const TAB = '¥t';\n      sampleTextAreaElement.value = sampleTextAreaElement.value.substring(0, caretStart)\n                     + TAB + sampleTextAreaElement.value.substring(caretStart, value.length);\n\n      // キャレット位置をTab分ずらす\n      sampleTextAreaElement.focus();\n      sampleTextAreaElement.setSelectionRange(caretStart + TAB.length, caretEnd + TAB.length);\n\n      return;\n    }\n  }\n\n```\n\n\n\n## \bMarkdownプレビューを\b表示したい、ソースコードはシンタックスハイライトさせたい\n[marked](https://github.com/chjj/marked)と[highlight.js](https://github.com/isagalaev/highlight.js)を組み合わせて使います。\n[marked](https://github.com/chjj/marked)のReadmeを見ればなんとなくわかりますが、Angularの仕組みに乗せる必要があるのでPipeやらServiceやらを作ります。\n\n```typescript:markdown-parse.service.ts\nimport { Injectable } from '@angular/core';\nimport marked from 'marked';\nimport hljs from 'highlight.js';\n\n\n@Injectable()\nexport class MarkdownParseService {\n\n  constructor() {\n    marked.setOptions({\n      highlight: function (code) {\n        return hljs.highlightAuto(code).value;\n      }\n    });\n  }\n\n  parse(rawText: string) {\n    return marked(rawText);\n  }\n}\n```\n\n\n```typescript:markdown.pipe.ts\nimport marked from 'marked';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { MarkdownParseService } from './markdown-parse.service';\n\n@Pipe({ name: 'toMarkdown' })\nexport class MarkdownParsePipe implements PipeTransform {\n  constructor(markdownParseService: MarkdownParseService) {}\n\n  transform(value: string): any {\n    return this.markdownParseService.parse(value);\n  }\n}\n```\n\nHTMLで下記のように指定します。`{{}}`だと\bサニタイズされてしまうので\b`innerHTML`属性を指定します。\n\n```html\n<div [innerHTML]=\"md | toMarkdown\"></div>\n```\n\n\n\b**参考サイト**\n\n* [Qiita AngularでMarkdownをHTMLとして表示するカスタムpipeを作成する](https://qiita.com/daikiojm/items/e02e2aeb0231b3620a0b)\n* Github [chjj/marked](https://github.com/chjj/marked)\n\n\n\n\n## 絞り込み条件付きリストにおいて、リストの要素が\b変更、追加\b、削除された時に絞り込み結果をリフレッシュしたい\nリストの絞り込みはPipeで実現しますが、通常Pipeはリストの要素が変更されても再び絞り込みが実施されることはありません。\nこのような場合はPipeアノテーションにて**pureオプションをfalseに設定**ましょう。\n\n```html:HTML\n<input type=\"text\" #searchUserName>\n<ul>\n  <li *ngFor=\"let user of (userList | searchUserFilter: searchUserName.value);\" >{{user.name}}</li>\n<ul>\n```\n\n```typescript:search-user.pipe.ts\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { User } from './user';\n\n@Pipe({\n  name: 'searchUserFilter',\n  pure: false // pureをfalseにすることでユーザが変更、追加、削除された時にリフレッシュできる\n})\nexport class SearchFilterPipe implements PipeTransform {\n  transform(items: Array<User>, searchUserName: string): any[] {\n    if (!searchUserName) return items;\n\n    searchUserName = searchUserName.toLowerCase();\n    return items.filter( item => item.user.userId.toLowerCase().includes(searchUserName));\n  }\n}\n```\n\n\b**参考サイト**\n\n* [Angular公式サイト](https://angular.io/guide/pipes#pure-and-impure-pipes)\n\n\n\n\n## グローバル定数を定義したい\nいろんなクラスで使う定数を\b共通\b化する時は、単純に**クラスを作ってstaticなメンバとして定数を定義**します。\n\n```typescript:app-settings.ts\nexport class AppSettings {\n   public static API_ENDPOINT='http://127.0.0.1:6666/api/';\n}\n```\n\n```typescript:SampleService\nimport {Injectable} from 'angular2/core';\nimport {AppSettings} from './app-settings';\n\n@Injectable()\nexport class SampleService {\n    \bsampleMethod() {\n      console.log(AppSettings.API_ENDPOINT);\n    }\n}\n```\n\n**参考**\n\n* [StackOverFlow](https://stackoverflow.com/questions/34986922/define-global-constants-in-angular-2)\n\n\n## 画像が多い画面の初期表示を早くしたい\n[ng-lazyload-image](https://github.com/tjoskar/ng-lazyload-image)を使えば画像の遅延ロードを実現できます。\n使い方もとても簡単でimgタグにディレクティブを指定するだけです。\n\n```html:HTML\n <img\n  [defaultImage]=\"https://images.sample.com/photo/defaultimage\" \n  [lazyLoad]=\"https://images.sample.com/photo/sampleimage\"\n  [offset]=\"30\"\n >\n```\n\n*defaultImage*\n　即時ロードされる画像のURL、遅延ロードする画像を読み込む間、表示される\n*lazyLoad*\n　遅延ロードする画像のURL\n*offset*\n　スクロールが発生する場合に画面下部の何ピクセル下に来た時にロードを開始するか\n*errorImage*\n　遅延ロード失敗時に表示する画像URL\n\n**参考サイト**\n\n* [ng-lazyload-image](https://github.com/tjoskar/ng-lazyload-image)\n\n\n## Angular Cliの`ng serve`コマンドでdistフォルダを一旦削除したくない\n`ng serve`コマンドは`dist`フォルダを削除してからtsファイルをトランスコンパイルします。\nそれを防ぐためには、**delete-output-pathオプションをfalse**に指定します。\n\n```json:package.json　ビルドスクリプト\n\"script\": {\n  \"build\": \"cp ./resource/* dist && ng serve --delete-output-path=false\"\n}\n```\n\n\b**参考サイト**\n\n* [angular-cli github issue #4366](https://github.com/angular/angular-cli/issues/4366)\n\n\n## AOTコンパイルが遅いのでなんとかしたい\nなんとかできませんでした。。。(もしかしたら方法があるのかもしれません。誰か教えてください!!!)\nAOTコンパイルはJITコンパイルが検出してくれないHTMLのエラーを警告してくれますが、その反面遅いです。特に[Angular Material](https://material.angular.io/)を使う場合は顕著です。\nそのため、自分の場合は基本的にJITビルドを使い、issueのプルリクをする前など区切りのいいタイミングでAOTビルドしてエラーがないか確認するというように使い分けてました。\n\n\n# 2. フロント側Angularでのテスト周り\n## CI環境などでテストが終わらずにタイムアウトしてしまう\nCirleCiなどでテストを実行する場合`ng test`コマンドだとプロセスが終了しないためタイムアウトで失敗してしまいます。\nこのような場合は**watchオプションをfalseに設定**します。\n\n```\nng test --wtach=false\n```\n\n**参考サイト**\n[Github isssue](https://github.com/angular/angular-cli/issues/362)\n\n## テスト時に「Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.」や「Failed to execute 'send' on 'XMLHttpRequest'」のエラー\nこのような場合は、一時的に`ng test`コマンドのオプションに**`-sm=false`を追加**してテストし直すと根本原因エラーメッセージで出力されるようになります。\n大抵の場合は自作したモッククラスに必要なメソッドがないことが原因です。\n\n\b**参考サイト**\n\n* [stackOverFlow](https://stackoverflow.com/questions/45399079/angular-tests-failing-with-failed-to-execute-send-on-xmlhttprequest)\n\n\n## テスト用に子コンポーネントをモック化したい\n意外と簡単で、TestBed#configureTestingModuleで\ndeclarationsに自作したモックの子コンポーネントを追加するだけです。\ninput,outputがあれば必要に応じてメンバ定義します。\n\n\n```typescript\n// ※import文は省略\n\n// モックの子コンポーネントを定義\n@Component({\n  selector: 'app-child', // 子コンポーネントと同じものを定義\n  template: '<p>Mock Child Component</p>'\n})\nclass MockClildComponent {\n  @Input() childInput: string;\n  @Output() childOutput = new EventEmitter();\n}\n\n// ...\n\nbeforeEach(() => {\n  TestBed.configureTestingModule({\n    declarations: [\n      // テスト時のdeclarationsにモックの定義を追加\n      MockProductSettingsComponent,\n      // ...\n    ],\n    // ...\n  });\n  // ...\n});\n```\n\n\b**参考サイト**\n\n* [stackOverFlow](https://stackoverflow.com/questions/41240163/mocking-child-components-angular-2)\n\n\n## テスト結果にAngular Materilaのスタイルが反映されない\nUIフレームワークで[Angular Material](https://material.angular.io/)を使っている場合、\n`karma.config.js`でAngular Materilaのcssを直接読み込んであげる必要あります。\n\n```javascript:karma.conf.js\nfiles: [\n      ・・・\n      // Angular Materialのスタイルをテスト開始時に読み込んでおく\n      {pattern: './node_modules/@angular/material/prebuilt-themes/indigo-pink.css', included: true, watched: false},\n],\n```\n\n**参考サイト**\n\n* [stackoverflow](https://github.com/angular/material2/issues/4056)\n\n\n## テスト結果にstyles.scss(アプリ共通のスタイル定義)のスタイルが反映されない\nアプリ共通スタイルをSASS形式にしている場合\n開発用ライブライに`karma-scss-preprocessor`と`node-sass`を追加して`karma.conf.js`を下記のように設定します。\n\n```javascript:karma.conf.js\nplugins: [\n  ・・・\n　 // プラグインに`karma-scss-preprocessor`を追加\n  require('karma-scss-preprocessor')\n],\n\n\nfiles: [\n  ・・・\n  // filesにアプリ共通スタイルを追加\n  { pattern: './src/styles.scss', watched: false,  included: true, served: true }\n],\n\n// preprocessorsを追加\npreprocessors: {\n './src/test.ts': ['@angular/cli'],\n './src/styles.scss': ['scss']\n},\n```\n\n\b**参考サイト**:\n\n* [stackOverFlow](https://stackoverflow.com/questions/44460733/how-to-configure-karma-to-include-global-scss-files-for-an-angular-cli-project/44498689#44498689)\n* [Github karma/issue/2700](https://github.com/karma-runner/karma/issues/2700)\n\n\n\n\n# 3. バックエンド側 Express、MongoDB周り\n※MongDBをNode.jsで扱う場合は[mongoose](https://github.com/Automattic/mongoose)という便利なライブラリがあるのでそれを使う前提のお話です。\n\n## mongooseのvirtualメソッドを使う\n例えば`記事`,`コメント`,`リプライ`などのモデルを定義する場合、\n３つのモデルのライフサイクルは、記事追加 => 記事に対するコメント追加 => コメントに対するリプライ追加　のようになります。\nこのような場合は、コメントが記事の参照を持ち、リプライがコメントの参照を持つモデル構造が望ましいです。コメントやリプライ追加時に１つのモデルの更新だけですむからです。\n![db構造_良.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f93ac0e6-317e-1cdf-bfba-13531e2455ba.png)\n\nただ記事の検索は少し工夫が必要で、**mongooseのvirtualを使います**。これによって記事からコメントへの参照、コメントからリプライへの参照を擬似的に定義できるため、\n検索時に擬似要素をpopulateするだけで、記事に紐付くコメントとリプライを取得できるようになります。\n![mongoose virtualのイメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/4aab7f38-1f19-e00b-b35d-23babf36a75b.png)\n\n具体的なソースコードを示します。\n\n```typescript:article.model.ts\nimport * as mongoose from 'mongoose';\n\nconst ArticleSchema = new mongoose.Schema({\n  content: String\n}, { toJSON: { virtuals: true } });\n\n\n// 記事に紐付くコメントモデルの配列をcommentsという擬似要素で定義する\nArticleSchema.virtual('comments', {\n  ref: 'Comment',\n  localField: '_id',\n  foreignField: 'articleId',\n  justOne: false,\n});\n\nconst Article = mongoose.model('Article', ArticleSchema);\n\nexport { Article };\n```\n\n\n```typescript:comment.model.ts\nimport * as mongoose from 'mongoose';\n\nconst CommentSchema = new mongoose.Schema({\n  articleId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Article',\n  },\n  comment: String;\n}, { toJSON: { virtuals: true } });\n\n// コメントに紐付くリプライモデルの配列をrepliesという擬似要素で定義する\nCommentSchema.virtual('replies', {\n  ref: 'Reply',\n  localField: '_id',\n  foreignField: 'commentId',\n  justOne: false,\n});\n\nconst Comment = mongoose.model('Comment', CommentSchema);\n\nexport { Comment };\n```\n\n```typescript:reply.model.ts\nimport * as mongoose from 'mongoose';\n\nconst ReplySchema = new mongoose.Schema({\n  commentId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Comment'\n  },\n  reply: String;\n});\n\nconst Reply = mongoose.model('Reply', ReplySchema);\n\nexport { Reply };\n```\n\n```typescript:検索処理\nArticle.find()\n.populate({\n  path: 'comments', // Articleモデルで定義した擬似要素commentsをpopulateする\n  populate: [{\n    path: 'replies', // Commentモデルで定義した擬似要素repliesをpopulateする\n  }],\n});\n```\n\n\n## リクエスト、レスポンスのログ出力したい\nExpressのuseにて実現します。\nレスポンスオブジェクトのfinishイベントを監視することで、レスポンス時にログを出力しています。\n\n\n```javascript:リクエストとレスポンスのログ出力　※ここでは簡単のためコンソールに出力しています\nconst express = express();\nexpress.use(function accessLogHandler (req, res, next) {\n  const start = new Date();\n  // リクエスト時のログ　\n  console.log([\n    'start',\n    req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n    req.method,\n    req.url,\n    '-',\n    req.headers.referer || '-',\n    req.headers['user-agent'] || '-',\n    '--ms--'\n  ].join(',\\t'));\n\n  res.once('finish', function() {\n　　 // レスポンス時のログ\n    accessLogger.info([\n      'end',\n      req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n      req.method,\n      req.url,\n      res.statusCode,\n      req.headers.referer || '-',\n      req.headers['user-agent'] || '-',\n      '--' + (new Date().getMilliseconds() - start.getMilliseconds()) + 'ms--'\n    ].join(',\\t'));\n  });\n\n  next();\n});\n```\n\n実際のログはこんな感じで出力されます。\n\n```py3\nstart,  ::ffff:127.0.0.1, GET, /api/authenticate/check-state,   -, http://localhost:4200/, Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36, --ms--\nend,    ::ffff:127.0.0.1, GET, /check-state,                  403, http://localhost:4200/, Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36,  --47ms--\n```\n\n\n\n## ログ出力でオブジェクトの全プロパティを出力したい\nオブジェクトの中身をログで確認する時はNode.jsの`util.inspect()`を使います。\n\n\n```javascript\nconst util = require('util');\nconst myObject = {\n   \"a\":\"a\",\n   \"b\":{\n      \"c\":\"c\",\n      \"d\":{\n         \"e\":\"e\",\n         \"f\":{\n            \"g\":\"g\",\n            \"h\":{\n               \"i\":\"i\"\n            }\n         }\n      }\n   }\n}; \n\nconsole.log(util.inspect(myObject, false, null));\n```\n\nこのようなログが出力されます\n\n```\n{ a: 'a', b: { c: 'c', d: { e: 'e', f: [Object] } } }\n```\n\n**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/10729276/how-can-i-get-the-full-object-in-node-jss-console-log-rather-than-object)\n\n\n## 環境変数で上書きできる定数を定義したい\n例えばサーバのポートなど環境個別に設定したくなるようなものは\n環境変数で上書きできる定数にしておくと便利です。\nNode.jsではprocess.env.変数名で環境変数が参照できるので下記のようにします。\n\n```typescript:定数定義\nexport const SERVER_PORT: string = process.env.SERVER_PORT || '3000';　// 環境変数SERVER_PORTが未指定の場合は3000となる\nexport const SERVER_HOST: string = process.env.SERVER_HOST || 'localhost'; // 環境変数SERVER_HOSTが未指定の場合はlocalhostとなる\n```\n\n\n## DB初回アクセスに失敗した場合にリトライされない\nmongooseを使っていると、DB初回接続時にエラーが起きた時に、なぜか再接続処理してくれません。\nDockerでアプリを配布する場合、アプリとMongoDBをdocker-composeで同時に立ち上げることがあると思いますが、まだMongoDBが起動しきってない状態でアプリからDBに接続しようとすると、アプリが異常終了してしまいます。これを防ぐには自力で再接続処理を実装する必要があります。\n\n```javascript\nfunction createConnection (dbURL, options) {\n    var db = mongoose.createConnection(dbURL, options);\n\n    db.on('error', function (err) {\n        if (err.message && err.message.match(/failed to connect to server .* on first connect/)) {\n            console.log(new Date(), String(err));\n\n            setTimeout(function () {\n                console.log(\"Retrying first connect...\");\n                db.openUri(dbURL).catch(() => {});\n            // 20秒後に再接続する\n            }, 20 * 1000);\n        } else {\n            console.error(new Date(), String(err));\n        }\n    });\n\n    db.once('open', function () {\n        console.log(\"Connection to db established.\");\n    });\n\n    return db;\n}\n```\n\n**参考サイト**\n\n* [Github mongooseのissue5169](https://github.com/Automattic/mongoose/issues/5169)\n\n","comments_count":0,"created_at":"2017-12-12T03:19:11+09:00","likes_count":46,"reactions_count":0},"relations":[{"node":{"fields":{"slug":"/bb5bc899-9dfd-5e67-bc4c-bc422ba8d176/","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その１. ビルド編","date":"2017-07-19T02:06:59+09:00","excerpt":"やりたいことAngular CLI使って、MEANスタック(MongoDB + Express + Angular + NodeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。フロント側とサーバ側の両方をweb...","tags":["JavaScript","MongoDB","Express","TypeScript","AngularJS","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"bb5bc899-9dfd-5e67-bc4c-bc422ba8d176","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その１. ビルド編","rendered_body":"\n<h2>\n<span id=\"やりたいこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたいこと</h2>\n\n<ul>\n<li>Angular CLI使って、MEANスタック(<strong>M</strong>ongoDB + <strong>E</strong>xpress + <strong>A</strong>ngular + <strong>N</strong>odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。</li>\n<li>フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。</li>\n<li>Dockerを使ってアプリを簡単に配布したい。</li>\n</ul>\n\n<p>これらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。</p>\n\n<ul>\n<li>その１. ビルド編　⇦　今回はココ</li>\n<li><a href=\"http://qiita.com/Takumon/items/b4211fcabad740baa551\" id=\"reference-b35cd1a7f8ba1daaecd8\">その２. テスト編</a></li>\n<li>その３. Dockerビルド編</li>\n</ul>\n\n<h2>\n<span id=\"その１-ビルド編\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%81%AE%EF%BC%91-%E3%83%93%E3%83%AB%E3%83%89%E7%B7%A8\"><i class=\"fa fa-link\"></i></a>その１. ビルド編</h2>\n\n<p>Angular CLIで作成したプロジェクトをベースに、<br>\nMongoDBに登録したメッセージを画面に一覧で表示するアプリを作成していきます。<br>\nメッセージを登録すると一覧に追加されていくようなアプリです。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" alt=\"アプリ概要.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png\"></a></p>\n\n<h3>\n<span id=\"プロジェクト構成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクト構成</h3>\n\n<p>今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。<br>\n<a href=\"https://github.com/Takumon/angular4-express4-typescritp2/tree/build\" rel=\"nofollow noopener\" target=\"_blank\">リポジトリ</a>も用意しているので詳細はそちらを参照してください。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">プロジェクトの構成（完成イメージ）</span></div>\n<div class=\"highlight\"><pre>.\n├── dist                ・・・(1) コンパイル資産出力先\n│   └── server　　　　　　　　      ・・・(1-1)　コンパイルされたサーバ資産\n│       ├── app.js\n│       ├── app.js.map\n│       ├── bin\n│       │   ├── www.js\n│       │   └── www.js.map\n│       ├── config.js\n│       ├── config.js.map\n│       ├── models\n│       │   ├── message.js\n│       │   └── message.js.map\n│       ├── public      ・・・(1-2) コンパイルされたクライアント資産\n│       │   ├── favicon.ico\n│       │   ├── index.html\n│       │   ├── inline.bundle.js\n│       │   ├── inline.bundle.js.map\n│       │   ├── main.bundle.js\n│       │   ├── main.bundle.js.map\n│       │   ├── polyfills.bundle.js\n│       │   ├── polyfills.bundle.js.map\n│       │   ├── styles.bundle.js\n│       │   ├── styles.bundle.js.map\n│       │   ├── vendor.bundle.js\n│       │   └── vendor.bundle.js.map\n│       └── routes\n│           ├── message.js\n│           └── message.js.map\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── e2e\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── server               ・・・(2)　サーバ資産\n│   ├── app.ts\n│   ├── bin\n│   │   └── www.ts\n│   ├── config.ts\n│   ├── models\n│   │   └── message.ts\n│   ├── routes\n│   │   └── message.ts\n│   └── tsconfig.server.json\n├── src                   ・・・(3)　クライアント資産\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       └── message.service.ts\n│   ├── assets\n│   ├── environments\n│   │   ├── environment.prod.ts\n│   │   └── environment.ts\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── main.ts\n│   ├── polyfills.ts\n│   ├── styles.css\n│   ├── test.ts\n│   ├── tsconfig.app.json\n│   ├── tsconfig.spec.json\n│   └── typings.d.ts\n├── karma.conf.js\n├── package-lock.json\n├── package.json\n├── protractor.conf.js\n├── proxy.conf.json    ・・・(4) \n├── tsconfig.json\n├── tslint.json\n└── README.md\n</pre></div>\n</div>\n\n<h4>\n<span id=\"各資産について\" class=\"fragment\"></span><a href=\"#%E5%90%84%E8%B3%87%E7%94%A3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>各資産について</h4>\n\n<h5>\n<span id=\"1-dist\" class=\"fragment\"></span><a href=\"#1-dist\"><i class=\"fa fa-link\"></i></a>(1) dist</h5>\n\n<p>コンパイルした資産の出力先フォルダ</p>\n\n<h5>\n<span id=\"1-1-distserver\" class=\"fragment\"></span><a href=\"#1-1-distserver\"><i class=\"fa fa-link\"></i></a>(1-1) dist/server</h5>\n\n<p>ここにサーバ側のコンパイルされたjsファイルが出力されます。<br>\nserverフォルダを設けているのは本資産とテスト資産を分離したかったからです。<br>\nその２. テスト編で説明しますが、サーバ側テスト用jsファイルはdist配下のserver_testフォルダに出力されるようにしています。</p>\n\n<h5>\n<span id=\"1-2-distserverpublic\" class=\"fragment\"></span><a href=\"#1-2-distserverpublic\"><i class=\"fa fa-link\"></i></a>(1-2) dist/server/public</h5>\n\n<p>コンパイルされたクライアント資産。<br>\nサーバ側アプリの資産の一部としてコンパイルされるようにしています。<br>\nExpressのアプリでは静的資産をpublicフォルダに置くのが一般的なのでこうしました。</p>\n\n<h5>\n<span id=\"2-server\" class=\"fragment\"></span><a href=\"#2-server\"><i class=\"fa fa-link\"></i></a>(2) server</h5>\n\n<p>サーバ資産を格納するためのディレクトリ。<br>\nいろいろ悩みましたが、TypeScript資産をコンパイルすることとテストすることを考慮してこのような構成にしました。</p>\n\n<h5>\n<span id=\"3-src\" class=\"fragment\"></span><a href=\"#3-src\"><i class=\"fa fa-link\"></i></a>(3) src</h5>\n\n<p>フロントの実行資産とテスト資産を格納するためのディレクリ。<br>\nAngular CLIでプロジェクトを作成するとデフォルトで作成されます。<br>\nビルドやアプリ起動は<code>ng</code>コマンドで実施します。</p>\n\n<h5>\n<span id=\"4-proxyconfjson\" class=\"fragment\"></span><a href=\"#4-proxyconfjson\"><i class=\"fa fa-link\"></i></a>(4) proxy.conf.json</h5>\n\n<p><code>npm start</code>でフロント側とサーバ側を同時に起動した時に、クライアント側からサーバ側へのリクエストを送れるようにするためのプロキシ設定です。</p>\n\n<h2>\n<span id=\"構築手順\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E7%AF%89%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>構築手順</h2>\n\n<h3>\n<span id=\"1-プロジェクト作成\" class=\"fragment\"></span><a href=\"#1-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>1. プロジェクト作成</h3>\n\n<ul>\n<li>\n<p>Angular CLIをインストール</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install -g @angular/cli\n</pre></div></div>\n</li>\n<li>\n<p>プロジェクトを生成、Angular CLIであらかじめ定義している依存ライブラリをインストール</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ ng new sample\n$ cd sample\n$ npm install\n</pre></div></div>\n</li>\n<li>\n<p>Angular CLIであらかじめ定義している依存ライブラリの他に必要なものををインストール<br>\n</p>\n<dd>\n<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/express\" rel=\"nofollow noopener\" target=\"_blank\"><code>express</code></a><br>\n    </dt>\n<dd>Webアプリケーションフレームワーク<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/body-parser\" rel=\"nofollow noopener\" target=\"_blank\"><code>body-parser</code></a><br>\n    </dt>\n<dd>リクエストボディのパーサー<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/mongoose\" rel=\"nofollow noopener\" target=\"_blank\"><code>mongoose</code></a><br>\n    </dt>\n<dd>MongoDBへのアクセスを簡単にしてくれるAPI<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/nodemon\" rel=\"nofollow noopener\" target=\"_blank\"><code>nodemon</code></a><br>\n    </dt>\n<dd>node実行時にソースの変更を自動反映してくれるツール<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/npm-run-all\" rel=\"nofollow noopener\" target=\"_blank\"><code>npm-run-all</code></a><br>\n    </dt>\n<dd>npm-scripts の連結実行を管理するためのパッケージ<br>\n</dd>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install --save express body-parser mongoose\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n</pre></div></div>\n</li>\n</ul>\n\n<h3>\n<span id=\"2-サーバ側を作成\" class=\"fragment\"></span><a href=\"#2-%E3%82%B5%E3%83%BC%E3%83%90%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2. サーバ側を作成</h3>\n\n<p>Angular CLIで作ったプロジェクトの直下に<code>server</code>フォルダを作って、その中にサーバ側の処理を書いていきます。</p>\n\n<h4>\n<span id=\"servermodelsmessagets\" class=\"fragment\"></span><a href=\"#servermodelsmessagets\"><i class=\"fa fa-link\"></i></a>server/models/message.ts</h4>\n\n<p>MongoDBにアクセスするためのモデルを定義します。<br>\nDBアクセスにはmangoosを使います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Message</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'messages'</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">}</span>\n<span class=\"p\">}));</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverroutesmessagets\" class=\"fragment\"></span><a href=\"#serverroutesmessagets\"><i class=\"fa fa-link\"></i></a>server/routes/message.ts</h4>\n\n<p>エンドポイントごとの処理を記述するルータを定義します。<br>\nメッセージの取得と登録には<code>server/models/message.ts</code>を使います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">http</span> <span class=\"k\">from</span> <span class=\"s1\">'http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Router</span><span class=\"p\">,</span> <span class=\"nx\">Response</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'express'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../models/message'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">messageRouter</span><span class=\"p\">:</span> <span class=\"nx\">Router</span> <span class=\"o\">=</span> <span class=\"nx\">Router</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// 全てのメッセージを取得する</span>\n<span class=\"nx\">messageRouter</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">doc</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span><span class=\"na\">messages</span><span class=\"p\">:</span> <span class=\"nx\">doc</span><span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// メッセージを登録する</span>\n<span class=\"nx\">messageRouter</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Message</span><span class=\"p\">({</span>\n    <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">save</span><span class=\"p\">((</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n      <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'メッセージを登録しました。'</span><span class=\"p\">,</span>\n      <span class=\"na\">obj</span><span class=\"p\">:</span> <span class=\"nx\">result</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">messageRouter</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverappts\" class=\"fragment\"></span><a href=\"#serverappts\"><i class=\"fa fa-link\"></i></a>server/app.ts</h4>\n\n<p>Expressで使用するルータと依存モジュールを定義するためのファイルを作成します。<br>\nメッセージAPIのエンドポイントは<code>/api/messages</code>に設定し、<br>\nmongooseを使ってMongoDBへの接続設定をしています。<br>\nクライアント資産はビルドするとpublicフォルダ配下に出力されるようにしているので、<br>\n静的資産へのルーティングはpublicフォルダを指定しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">express</span> <span class=\"k\">from</span> <span class=\"s1\">'express'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">path</span> <span class=\"k\">from</span> <span class=\"s1\">'path'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">bodyParser</span> <span class=\"k\">from</span> <span class=\"s1\">'body-parser'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">messageRouter</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./routes/message'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MONGO_URL</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./config'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">App</span> <span class=\"p\">{</span>\n  <span class=\"kr\">public</span> <span class=\"nx\">express</span><span class=\"p\">:</span> <span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">Application</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">middleware</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">routes</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kr\">private</span> <span class=\"nx\">middleware</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">bodyParser</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">());</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">bodyParser</span><span class=\"p\">.</span><span class=\"nx\">urlencoded</span><span class=\"p\">({</span> <span class=\"na\">extended</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">}));</span>\n    <span class=\"c1\">// 接続する MongoDB の設定</span>\n    <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nb\">Promise</span> <span class=\"o\">=</span> <span class=\"nb\">global</span><span class=\"p\">.</span><span class=\"nb\">Promise</span><span class=\"p\">;</span>\n    <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">MONGO_URL</span> <span class=\"o\">||</span> <span class=\"nx\">MONGO_URL</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">useMongoClient</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"p\">});</span>\n    <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'SIGINT'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">disconnect</span><span class=\"p\">();</span> <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kr\">private</span> <span class=\"nx\">routes</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 静的資産へのルーティング</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"kr\">static</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'public'</span><span class=\"p\">)));</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"nx\">messageRouter</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// その他のリクエストはindexファイルにルーティング</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">sendFile</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'public/index.html'</span><span class=\"p\">));</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"k\">new</span> <span class=\"nx\">App</span><span class=\"p\">().</span><span class=\"nx\">express</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverbinwwwts\" class=\"fragment\"></span><a href=\"#serverbinwwwts\"><i class=\"fa fa-link\"></i></a>server/bin/www.ts</h4>\n\n<p>Node.js でサーバを起動するための設定ファイルを作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">www.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">http</span> <span class=\"k\">from</span> <span class=\"s1\">'http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">SERVER_PORT</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../config'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">app</span> <span class=\"k\">from</span> <span class=\"s1\">'../app'</span><span class=\"p\">;</span>\n\n\n\n<span class=\"c1\">// ポートの設定.</span>\n<span class=\"kd\">const</span> <span class=\"nx\">port</span> <span class=\"o\">=</span> <span class=\"nx\">normalizePort</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">PORT</span> <span class=\"o\">||</span> <span class=\"nx\">SERVER_PORT</span><span class=\"p\">);</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"kd\">set</span><span class=\"p\">(</span><span class=\"s1\">'port'</span><span class=\"p\">,</span> <span class=\"nx\">port</span><span class=\"p\">);</span>\n\n\n<span class=\"c1\">// HTTPサーバ生成.</span>\n<span class=\"kd\">const</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">);</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"nx\">port</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`API running on localhost:</span><span class=\"p\">${</span><span class=\"nx\">port</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">));</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"nx\">onError</span><span class=\"p\">);</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'listening'</span><span class=\"p\">,</span> <span class=\"nx\">onListening</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// ポートを正規化.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">normalizePort</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">):</span> <span class=\"nx\">number</span><span class=\"o\">|</span><span class=\"nx\">string</span><span class=\"o\">|</span><span class=\"kr\">boolean</span>  <span class=\"p\">{</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">normalizedPort</span><span class=\"p\">:</span> <span class=\"nx\">number</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">val</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span><span class=\"p\">)</span>\n    <span class=\"p\">?</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">:</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">isNaN</span><span class=\"p\">(</span><span class=\"nx\">normalizedPort</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">normalizedPort</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">normalizedPort</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// エラーハンドラー.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">onError</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">):</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">syscall</span> <span class=\"o\">!==</span> <span class=\"s1\">'listen'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">bind</span> <span class=\"o\">=</span> <span class=\"k\">typeof</span> <span class=\"nx\">port</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span>\n    <span class=\"p\">?</span> <span class=\"s1\">'Pipe '</span> <span class=\"o\">+</span> <span class=\"nx\">port</span>\n    <span class=\"p\">:</span> <span class=\"s1\">'Port '</span> <span class=\"o\">+</span> <span class=\"nx\">port</span><span class=\"p\">;</span>\n\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"s1\">'EACCES'</span><span class=\"p\">:</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">bind</span> <span class=\"o\">+</span> <span class=\"s1\">' requires elevated privileges'</span><span class=\"p\">);</span>\n      <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"s1\">'EADDRINUSE'</span><span class=\"p\">:</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">bind</span> <span class=\"o\">+</span> <span class=\"s1\">' is already in use'</span><span class=\"p\">);</span>\n      <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// サーバ起動時のリスナー.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">onListening</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">addr</span> <span class=\"o\">=</span> <span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">address</span><span class=\"p\">();</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">bind</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">addr</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span><span class=\"p\">)</span>\n    <span class=\"p\">?</span> <span class=\"s2\">`pipe </span><span class=\"p\">${</span><span class=\"nx\">addr</span><span class=\"p\">}</span><span class=\"s2\">`</span>\n    <span class=\"p\">:</span> <span class=\"s2\">`port </span><span class=\"p\">${</span><span class=\"nx\">addr</span><span class=\"p\">.</span><span class=\"nx\">port</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverconfigts\" class=\"fragment\"></span><a href=\"#serverconfigts\"><i class=\"fa fa-link\"></i></a>server/config.ts</h4>\n\n<p>サーバ側の設定ファイルを作成します。<br>\nポートとMongoDBのURLを定義しています。<br>\n今回MongoDBはローカルにポート27017で立てる想定です。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">config.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_PORT</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">MONGO_URL</span> <span class=\"o\">=</span> <span class=\"s1\">'mongodb://localhost:27017/test'</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"3-クライアント側を作成\" class=\"fragment\"></span><a href=\"#3-%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>3. クライアント側を作成</h3>\n\n<p>Angular CLIでプロジェクトを作成すると最低限のクライアント資産が生成されるので、<br>\nここでは修正が必要なファイル、新規作成するファイルのみ紹介します。</p>\n\n<h4>\n<span id=\"srcappmessagemessageservicets\" class=\"fragment\"></span><a href=\"#srcappmessagemessageservicets\"><i class=\"fa fa-link\"></i></a>src/app/message/message.service.ts</h4>\n\n<p>サーバ側からメッセージを取得するためのサービスを新規作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.service.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Http</span><span class=\"p\">,</span> <span class=\"nx\">Response</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MessageService</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">private</span> <span class=\"nx\">http</span><span class=\"p\">:</span> <span class=\"nx\">Http</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"nx\">getAll</span><span class=\"p\">():</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">http</span>\n        <span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"na\">response</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n            <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n        <span class=\"p\">})</span>\n        <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">throw</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()));</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">regist</span><span class=\"p\">(</span><span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">http</span>\n      <span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">message</span><span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"na\">response</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n            <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n      <span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">throw</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappcomponentts\" class=\"fragment\"></span><a href=\"#srcappappcomponentts\"><i class=\"fa fa-link\"></i></a>src/app/app.component.ts</h4>\n\n<p>既存のファイルを修正して、messagesを保持するようにします。<br>\nMessageServiceを使ってメッセージを取得します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span><span class=\"p\">,</span> <span class=\"nx\">OnInit</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-root'</span><span class=\"p\">,</span>\n  <span class=\"na\">templateUrl</span><span class=\"p\">:</span> <span class=\"s1\">'./app.component.html'</span><span class=\"p\">,</span>\n  <span class=\"na\">styleUrls</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'./app.component.css'</span><span class=\"p\">],</span>\n  <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"nx\">MessageService</span> <span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">{</span>\n  <span class=\"nl\">messages</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n  <span class=\"nl\">message</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">private</span> <span class=\"nx\">messageService</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getMessages</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">getMessages</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messageService</span>\n      <span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">()</span>\n      <span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">res</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">;</span>\n      <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">registerMessage</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messageService</span>\n      <span class=\"p\">.</span><span class=\"nx\">register</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">res</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getMessages</span><span class=\"p\">();</span>\n      <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappcomponenthtml\" class=\"fragment\"></span><a href=\"#srcappappcomponenthtml\"><i class=\"fa fa-link\"></i></a>src/app/app.component.html</h4>\n\n<p>既存のファイルの修正して、メッセージ一覧と登録のUIに書き換えます。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.html</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>メッセージ一覧<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;button</span> <span class=\"na\">id=</span><span class=\"s\">\"getMessagesButton\"</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">getMessages</span><span class=\"err\">()\"</span><span class=\"nt\">&gt;</span>メッセージ一覧を最新化<span class=\"nt\">&lt;/button&gt;</span>\n    <span class=\"nt\">&lt;ul</span> <span class=\"na\">id=</span><span class=\"s\">\"messageList\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;li</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let item of messages\"</span><span class=\"nt\">&gt;</span>\n        {{item.message}}\n      <span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;/ul&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>メッセージ登録<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"na\">id=</span><span class=\"s\">\"registerMessage\"</span> <span class=\"err\">[(</span><span class=\"na\">ngModel</span><span class=\"err\">)]=\"</span><span class=\"na\">message</span><span class=\"err\">\"</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"登録するメッセージを入力してください。\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span> <span class=\"na\">id=</span><span class=\"s\">\"registerMessageButton\"</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)='</span><span class=\"na\">registerMessage</span><span class=\"err\">()'</span><span class=\"nt\">&gt;</span>登録<span class=\"nt\">&lt;/button&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappmodulets\" class=\"fragment\"></span><a href=\"#srcappappmodulets\"><i class=\"fa fa-link\"></i></a>src/app/app.module.ts</h4>\n\n<p>HttpModule、FormsModule、MessageServiceを追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.module.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">BrowserModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/platform-browser'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">NgModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">HttpModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/forms'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.component'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"nx\">AppComponent</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"nx\">BrowserModule</span><span class=\"p\">,</span>\n    <span class=\"nx\">HttpModule</span><span class=\"p\">,</span>\n    <span class=\"nx\">FormsModule</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MessageService</span><span class=\"p\">],</span>\n  <span class=\"na\">bootstrap</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">AppComponent</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppModule</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n\n</pre></div>\n</div>\n\n<h3>\n<span id=\"4-ビルドまわり環境を整備\" class=\"fragment\"></span><a href=\"#4-%E3%83%93%E3%83%AB%E3%83%89%E3%81%BE%E3%82%8F%E3%82%8A%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>4. ビルドまわり環境を整備</h3>\n\n<h4>\n<span id=\"pakcagejson\" class=\"fragment\"></span><a href=\"#pakcagejson\"><i class=\"fa fa-link\"></i></a>pakcage.json</h4>\n\n<p>スクリプトを下記のように修正します。<br>\n(npm scriptsは便利ですが、コメントが記述できないのが残念だなーと思いました。)</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\">\n  </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"start\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s build:server -p start:*\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"start:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng serve --aot=true --progress=false --proxy-config proxy.conf.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"start:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-p watch:server boot:server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"watch:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -w -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"boot:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"nodemon ./dist/server/bin/www.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-s build:server build:client\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng build --output-path=./dist/server/public\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"buildRun\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-s build boot:server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>start</strong>でクライアント資産とサーバ資産の両方を起動します。</li>\n<li>\n<strong>start:client</strong>でクライアント資産をコンパイルして起動します。Angular CLIのngコマンドにお任せしています。なおstartではクライアント資産とサーバ資産で二つのサーバを起動するので、クライアントからサーバへ（リクエストを送れるようにプロキシ設定を行っています。プロキシ設定ファイルについては下で触れます。</li>\n<li>\n<strong>start:server</strong>でサーバ資産をコンパイルしてExpressを起動します。</li>\n<li>\n<strong>watch:server</strong>でサーバ側のTypeScriptをウォッチして変更があればコンパイルするようにします。</li>\n<li>\n<strong>boot:server</strong>でコンパイルしたサーバ側資産を起動します。nodeではなくnodemonを使うことでコンパイルしたサーバ資産に更新があった場合でも即座に更新を反映するようにしています。</li>\n<li>\n<strong>build</strong>クライアント資産とサーバ資産の両方をコンパイルします。</li>\n<li>\n<strong>build:server</strong>でサーバ資産をコンパイルしています。コンパイル時の設定は下で触れる<code>/server/tsconfig.server.json</code>を使います。</li>\n<li>\n<strong>build:client</strong>でクライアント資産をコンパイルしています。出力先はサーバ側資産の静的ファイル格納フォルダ（<code>dist/server/public</code>）を指定しています。</li>\n<li>\n<strong>buildRun</strong>でクライアント資産とサーバ資産の両方をコンパイルしサーバ資産を起動します。とりあえずデプロイするアプリを起動したい時の便利コマンドです。</li>\n</ul>\n\n<h4>\n<span id=\"servertsconfigserverjson\" class=\"fragment\"></span><a href=\"#servertsconfigserverjson\"><i class=\"fa fa-link\"></i></a>server/tsconfig.server.json</h4>\n\n<p>サーバ資産コンパイルときの設定ファイルを作成します。<br>\n<code>outDir</code>で出力先をdist/serverに指定しています。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">tsconfig.server.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"extends\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../tsconfig.json\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"preserveConstEnums\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"outDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist/server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"mapRoot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist/server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"module\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"commonjs\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<h4>\n<span id=\"proxyconfjson\" class=\"fragment\"></span><a href=\"#proxyconfjson\"><i class=\"fa fa-link\"></i></a>proxy.conf.json</h4>\n\n<p><code>start</code>でクライアントとサーバの２つを起動した時に、クラ<br>\nイアントからサーバへのリクエストを送れるようにするためのプロキシ設定ファイルを作成します。<br>\n<code>/api</code>始まるリクエストをサーバへのリクエストとみなしてプロキシ設定を行います。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">proxy.conf.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"/api\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"target\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"http://localhost:3000\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"secure\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<h4>\n<span id=\"mongodbをローカルで立ち上げる\" class=\"fragment\"></span><a href=\"#mongodb%E3%82%92%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7%E7%AB%8B%E3%81%A1%E4%B8%8A%E3%81%92%E3%82%8B\"><i class=\"fa fa-link\"></i></a>MongoDBをローカルで立ち上げる</h4>\n\n<p>具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。</p>\n\n<h3>\n<span id=\"5-試してみる\" class=\"fragment\"></span><a href=\"#5-%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>5. 試してみる</h3>\n\n<h4>\n<span id=\"アプリを起動してみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリを起動してみる</h4>\n\n<ul>\n<li>\n<p>プロジェクト直下で下記コマンドを実行するとアプリが起動します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm start \n</pre></div></div>\n</li>\n<li><p>起動したら<code>http://localhost:4200</code>にアクセスしてみます。すると下記のようにメッセージ一覧画面が表示され、メッセージを登録すると適宜一覧に追加されていきます。</p></li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" alt=\"アプリ概要.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png\"></a></p>\n\n<ul>\n<li>試しにクライアント資産かサーバ資産を修正してみると、コンンパイルされてアプリに変更がリアルタイムに反映されることがわかります。</li>\n</ul>\n\n<h4>\n<span id=\"アプリをビルドしてみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリをビルドしてみる</h4>\n\n<ul>\n<li>\n<p>プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力されます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run build\n</pre></div></div>\n</li>\n</ul>\n\n<h4>\n<span id=\"アプリをビルドして起動してみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリをビルドして起動してみる</h4>\n\n<ul>\n<li>プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力された後に起動されます。\nビルドしたアプリは<code>http://localhost:3000</code>でアクセスできます。\n<code>\n$ npm run buildRun\n</code>\n</li>\n</ul>\n\n<h2>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h2>\n\n<p>今回はAngular CLIベースのプロジェクトをベースにしてMEANスタックの最小構成プロジェクトを構築する方法を紹介しました。プロジェクトを起動、ビルドすることはできるようになったので、次回「<a href=\"http://qiita.com/Takumon/items/b4211fcabad740baa551\">その２. テスト編</a>」ではテストコードの作成とテスト実施環境の構築について紹介しようと思います。</p>\n","body":"## やりたいこと\n* Angular CLI使って、MEANスタック(**M**ongoDB + **E**xpress + **A**ngular + **N**odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。\n* フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。\n* Dockerを使ってアプリを簡単に配布したい。\n\nこれらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。\n\n* その１. ビルド編　⇦　今回はココ\n* [その２. テスト編](http://qiita.com/Takumon/items/b4211fcabad740baa551)\n* その３. Dockerビルド編\n\n\n\n## その１. ビルド編\nAngular CLIで作成したプロジェクトをベースに、\nMongoDBに登録したメッセージを画面に一覧で表示するアプリを作成していきます。\nメッセージを登録すると一覧に追加されていくようなアプリです。\n\n![アプリ概要.png](https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png)\n\n\n\n\n### プロジェクト構成\n今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。\n[リポジトリ](https://github.com/Takumon/angular4-express4-typescritp2/tree/build)も用意しているので詳細はそちらを参照してください。\n\n```:プロジェクトの構成（完成イメージ）\n.\n├── dist                ・・・(1) コンパイル資産出力先\n│   └── server　　　　　　　　      ・・・\u001c(1-1)　コンパイルされたサーバ資産\n│       ├── app.js\n│       ├── app.js.map\n│       ├── bin\n│       │   ├── www.js\n│       │   └── www.js.map\n│       ├── config.js\n│       ├── config.js.map\n│       ├── models\n│       │   ├── message.js\n│       │   └── message.js.map\n│       ├── public      ・・・(1-2) コンパイルされたクライアント資産\n│       │   ├── favicon.ico\n│       │   ├── index.html\n│       │   ├── inline.bundle.js\n│       │   ├── inline.bundle.js.map\n│       │   ├── main.bundle.js\n│       │   ├── main.bundle.js.map\n│       │   ├── polyfills.bundle.js\n│       │   ├── polyfills.bundle.js.map\n│       │   ├── styles.bundle.js\n│       │   ├── styles.bundle.js.map\n│       │   ├── vendor.bundle.js\n│       │   └── vendor.bundle.js.map\n│       └── routes\n│           ├── message.js\n│           └── message.js.map\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── e2e\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── server               ・・・(2)　サーバ資産\n│   ├── app.ts\n│   ├── bin\n│   │   └── www.ts\n│   ├── config.ts\n│   ├── models\n│   │   └── message.ts\n│   ├── routes\n│   │   └── message.ts\n│   └── tsconfig.server.json\n├── src                   ・・・(3)　クライアント資産\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       └── message.service.ts\n│   ├── assets\n│   ├── environments\n│   │   ├── environment.prod.ts\n│   │   └── environment.ts\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── main.ts\n│   ├── polyfills.ts\n│   ├── styles.css\n│   ├── test.ts\n│   ├── tsconfig.app.json\n│   ├── tsconfig.spec.json\n│   └── typings.d.ts\n├── karma.conf.js\n├── package-lock.json\n├── package.json\n├── protractor.conf.js\n├── proxy.conf.json    ・・・(4) \n├── tsconfig.json\n├── tslint.json\n└── README.md\n```\n#### 各資産について\n##### (1) dist\nコンパイルした資産の出力先フォルダ\n\n##### (1-1) dist/server\nここにサーバ側のコンパイルされたjsファイルが出力されます。\nserverフォルダを設けているのは本資産とテスト資産を分離したかったからです。\nその２. テスト編で説明しますが、サーバ側テスト用jsファイルはdist配下のserver_testフォルダに出力されるようにしています。\n\n##### (1-2) dist/server/public\nコンパイルされたクライアント資産。\nサーバ側アプリの資産の一部としてコンパイルされるようにしています。\nExpressのアプリでは静的資産をpublicフォルダに置くのが一般的なのでこうしました。\n\n##### (2) server\nサーバ資産を格納するためのディレクトリ。\nいろいろ悩みましたが、TypeScript資産をコンパイルすることとテストすることを考慮してこのような構成にしました。\n\n##### (3) src\nフロントの実行資産とテスト資産を格納するためのディレクリ。\nAngular CLIでプロジェクトを作成するとデフォルトで作成されます。\nビルドやアプリ起動は`ng`コマンドで実施します。\n\n##### (4) proxy.conf.json\n`npm start`でフロント側とサーバ側を同時に起動した時に、クライアント側からサーバ側へのリクエストを送れるようにするためのプロキシ設定です。\n\n\n\n\n## 構築手順\n\n### 1. プロジェクト作成\n* Angular CLIをインストール\n\n\t```\n\t$ npm install -g @angular/cli\n\t```\n\n* プロジェクトを生成、Angular CLIであらかじめ定義している依存ライブラリをインストール\n\n\t```\n\t$ ng new sample\n\t$ cd sample\n\t$ npm install\n\t```\n\n* Angular CLIであらかじめ定義している依存ライブラリの他に必要なものををインストール\n<dd>\n    <dt>[`express`](https://www.npmjs.com/package/express)\n        <dd>Webアプリケーションフレームワーク\n    <dt>[`body-parser`](https://www.npmjs.com/package/body-parser)\n        <dd>リクエストボディのパーサー\n    <dt>[`mongoose`](https://www.npmjs.com/package/mongoose)\n        <dd>MongoDBへのアクセスを簡単にしてくれるAPI\n    <dt>[`nodemon`](https://www.npmjs.com/package/nodemon)\n        <dd>node実行時にソースの変更を自動反映してくれるツール\n    <dt>[`npm-run-all`](https://www.npmjs.com/package/npm-run-all)\n        <dd>npm-scripts の連結実行を管理するためのパッケージ\n</dd>\n\n\t```\n\t$ npm install --save express body-parser mongoose\n\t$ npm install --save-dev @types/mongoose nodemon npm-run-all\n\t```\n\n\n\n### 2. サーバ側を作成\nAngular CLIで作ったプロジェクトの直下に`server`フォルダを作って、その中にサーバ側の処理を書いていきます。\n#### server/models/message.ts\nMongoDBにアクセスするためのモデルを定義します。\nDBアクセスにはmangoosを使います。\n\n```js:message.ts\nimport * as mongoose from 'mongoose';\n\nconst Message = mongoose.model('messages', new mongoose.Schema({\n  message: {type: String}\n}));\n\nexport { Message };\n```\n\n\n\n#### server/routes/message.ts\nエンドポイントごとの処理を記述するルータを定義します。\nメッセージの取得と登録には`server/models/message.ts`を使います。\n\n```js:message.ts\nimport * as http from 'http';\nimport { Router, Response } from 'express';\nimport { Message } from '../models/message';\n\nconst messageRouter: Router = Router();\n\n// 全てのメッセージを取得する\nmessageRouter.get('/', (req, res, next) => {\n  Message.find(function(err, doc) {\n    if (err) {\n      return res.status(500).json({\n          title: 'エラーが発生しました。',\n          error: err.message\n      });\n    }\n\n    return res.status(200).json({messages: doc});\n  });\n});\n\n// メッセージを登録する\nmessageRouter.post('/', (req, res, next) => {\n  const message = new Message({\n    message: req.body.message\n  });\n\n  message.save((err, result) => {\n    if (err) {\n      return res.status(500).json({\n          title: 'エラーが発生しました。',\n          error: err.message\n      });\n    }\n\n    return res.status(200).json({\n      message: 'メッセージを登録しました。',\n      obj: result\n    });\n  });\n});\n\nexport { messageRouter };\n```\n\n\n#### server/app.ts\nExpressで使用するルータと依存モジュールを定義するためのファイルを作成します。\nメッセージAPIのエンドポイントは`/api/messages`に設定し、\nmongooseを使ってMongoDBへの接続設定をしています。\nクライアント資産はビルドするとpublicフォルダ配下に出力されるようにしているので、\n静的資産へのルーティングはpublicフォルダを指定しています。\n\n```js:app.ts\nimport * as express from 'express';\nimport * as path from 'path';\nimport * as bodyParser from 'body-parser';\nimport * as mongoose from 'mongoose';\n\nimport { messageRouter } from './routes/message';\nimport { MONGO_URL } from './config';\n\nclass App {\n  public express: express.Application;\n\n  constructor() {\n    this.express = express();\n    this.middleware();\n    this.routes();\n  }\n\n  private middleware(): void {\n    this.express.use(bodyParser.json());\n    this.express.use(bodyParser.urlencoded({ extended: false }));\n    // 接続する MongoDB の設定\n    mongoose.Promise = global.Promise;\n    mongoose.connect(process.env.MONGO_URL || MONGO_URL, {\n      useMongoClient: true,\n    });\n    process.on('SIGINT', function() { mongoose.disconnect(); });\n  }\n\n  private routes(): void {\n    // 静的資産へのルーティング\n    this.express.use(express.static(path.join(__dirname, 'public')));\n\n    this.express.use('/api/messages', messageRouter);\n\n    // その他のリクエストはindexファイルにルーティング\n    this.express.get('*', (req, res) => {\n      res.sendFile(path.join(__dirname, 'public/index.html'));\n    });\n  }\n}\n\nexport default new App().express;\n```\n\n\n#### server/bin/www\\.ts\nNode.js でサーバを起動するための設定ファイルを作成します。\n\n```js:www.ts\nimport * as http from 'http';\nimport { SERVER_PORT } from '../config';\nimport app from '../app';\n\n\n\n// ポートの設定.\nconst port = normalizePort(process.env.PORT || SERVER_PORT);\napp.set('port', port);\n\n\n// HTTPサーバ生成.\nconst server = http.createServer(app);\nserver.listen(port, () => console.log(`API running on localhost:${port}`));\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n// ポートを正規化.\nfunction normalizePort(val): number|string|boolean  {\n\n  const normalizedPort: number = (typeof val === 'string')\n    ? parseInt(val, 10)\n    : val;\n\n  if (isNaN(normalizedPort)) {\n    return val;\n  }\n\n  if (normalizedPort >= 0) {\n    return normalizedPort;\n  }\n\n  return false;\n}\n\n// エラーハンドラー.\nfunction onError(error): void {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  const bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n// サーバ起動時のリスナー.\nfunction onListening(): void {\n  const addr = server.address();\n  const bind = (typeof addr === 'string')\n    ? `pipe ${addr}`\n    : `port ${addr.port}`;\n}\n```\n\n#### server/config.ts\nサーバ側の設定ファイルを作成します。\nポートとMongoDBのURLを定義しています。\n今回MongoDBはローカルにポート27017で立てる想定です。\n\n```js:config.ts\nexport const SERVER_PORT = 3000;\nexport const MONGO_URL = 'mongodb://localhost:27017/test';\n```\n\n\n\n### 3. クライアント側を作成\nAngular CLIでプロジェクトを作成すると最低限のクライアント資産が生成されるので、\nここでは修正が必要なファイル、新規作成するファイルのみ紹介します。\n\n\n#### src/app/message/message.service.ts\nサーバ側からメッセージを取得するためのサービスを新規作成します。\n\n```js:message.service.ts\nimport { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/Rx';\n\n@Injectable()\nexport class MessageService {\n\n  constructor(private http: Http) {}\n\n  getAll(): Observable<any> {\n    return this.http\n        .get('/api/messages')\n        .map((response: Response) => {\n            const result = response.json();\n            return result;\n        })\n        .catch((error: Response) => Observable.throw(error.json()));\n  }\n\n  regist(message: string): Observable<any> {\n    return this.http\n      .post('/api/messages', {message: message})\n      .map((response: Response) => {\n            const result = response.json();\n            return result;\n      })\n      .catch((error: Response) => Observable.throw(error.json()));\n  }\n}\n```\n\n\n\n\n\n#### src/app/app.component.ts\n既存のファイルを修正して、messagesを保持するようにします。\nMessageServiceを使ってメッセージを取得します。\n\n```js:app.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { MessageService } from './message/message.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  providers: [ MessageService ]\n})\nexport class AppComponent {\n  messages: Array<any>;\n  message: string;\n\n  constructor(private messageService: MessageService) {\n    this.getMessages();\n  }\n\n  getMessages(): void {\n    this.messageService\n      .getAll()\n      .subscribe((res: any) => {\n        this.messages = res.messages;\n      });\n  }\n\n  registerMessage(): void {\n    if (!this.message) {\n      return;\n    }\n\n    this.messageService\n      .register(this.message)\n      .subscribe((res: any) => {\n        this.message = '';\n        this.getMessages();\n      });\n  }\n}\n```\n\n\n#### src/app/app.component.html\n既存のファイルの修正して、メッセージ一覧と登録のUIに書き換えます。\n\n```html:app.component.html\n<div>\n  <div>\n    <h1>メッセージ一覧</h1>\n    <button id=\"getMessagesButton\" (click)=\"getMessages()\">メッセージ一覧を最新化</button>\n    <ul id=\"messageList\">\n      <li *ngFor=\"let item of messages\">\n        {{item.message}}\n      </li>\n    </ul>\n  </div>\n  <div>\n    <h1>メッセージ登録</h1>\n    <input type=\"text\" id=\"registerMessage\" [(ngModel)]=\"message\" placeholder=\"登録するメッセージを入力してください。\">\n    <button type=\"submit\" id=\"registerMessageButton\" (click)='registerMessage()'>登録</button>\n  </div>\n</div>\n```\n#### src/app/app.module.ts\nHttpModule、FormsModule、MessageServiceを追加します。\n\n\n```js:app.module.ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpModule } from '@angular/http';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { MessageService } from './message/message.service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpModule,\n    FormsModule\n  ],\n  providers: [MessageService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n```\n\n\n### 4. ビルドまわり環境を整備\n\n#### pakcage.json\nスクリプトを下記のように修正します。\n(npm scriptsは便利ですが、コメントが記述できないのが残念だなーと思いました。)\n\n```json:package.json\n\n  \"scripts\": {\n    ...\n    \"start\": \"npm-run-all -s build:server -p start:*\",\n    \"start:client\": \"ng serve --aot=true --progress=false --proxy-config proxy.conf.json\",\n    \"start:server\": \"run-p watch:server boot:server\",\n    \"watch:server\": \"tsc -w -p ./server/tsconfig.server.json\",\n    \"boot:server\": \"nodemon ./dist/server/bin/www.js\",\n    \"build\": \"run-s build:server build:client\",\n    \"build:client\": \"ng build --output-path=./dist/server/public\",\n    \"build:server\": \"tsc -p ./server/tsconfig.server.json\",\n    \"buildRun\": \"run-s build boot:server\",\n    ...\n  },\n```\n\n* **start**でクライアント資産とサーバ資産の両方を起動します。\n* **start:client**でクライアント資産をコンパイルして起動します。Angular CLIのngコマンドにお任せしています。なおstartではクライアント資産とサーバ資産で二つのサーバを起動するので、クライアントからサーバへ（リクエストを送れるようにプロキシ設定を行っています。プロキシ設定ファイルについては下で触れます。\n* **start:server**でサーバ資産をコンパイルしてExpressを起動します。\n* **watch:server**でサーバ側のTypeScriptをウォッチして変更があればコンパイルするようにします。\n* **boot:server**でコンパイルしたサーバ側資産を起動します。nodeではなくnodemonを使うことでコンパイルしたサーバ資産に更新があった場合でも即座に更新を反映するようにしています。\n* **build**クライアント資産とサーバ資産の両方をコンパイルします。\n* **build:server**でサーバ資産をコンパイルしています。コンパイル時の設定は下で触れる`/server/tsconfig.server.json`を使います。\n* **build:client**でクライアント資産をコンパイルしています。出力先はサーバ側資産の静的ファイル格納フォルダ（`dist/server/public`）を指定しています。\n* **buildRun**でクライアント資産とサーバ資産の両方をコンパイルしサーバ資産を起動します。とりあえずデプロイするアプリを起動したい時の便利コマンドです。\n\n\n\n#### server/tsconfig.server.json\nサーバ資産コンパイルときの設定ファイルを作成します。\n`outDir`で出力先をdist/serverに指定しています。\n\n```json:tsconfig.server.json\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"preserveConstEnums\": true,\n    \"outDir\": \"../dist/server\",\n    \"mapRoot\": \"../dist/server\",\n    \"module\": \"commonjs\"\n  }\n}\n```\n\n#### proxy.conf.json\n`start`でクライアントとサーバの２つを起動した時に、クラ\nイアントからサーバへのリクエストを送れるようにするためのプロキシ設定ファイルを作成します。\n`/api`始まるリクエストをサーバへのリクエストとみなしてプロキシ設定を行います。\n\n```json:proxy.conf.json\n{\n  \"/api\": {\n    \"target\": \"http://localhost:3000\",\n    \"secure\": false\n  }\n}\n```\n\n#### MongoDBをローカルで立ち上げる\n具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。\n\n\n\n### 5. 試してみる\n#### アプリを起動してみる\n* プロジェクト直下で下記コマンドを実行するとアプリが起動します。\n\n\t```\n\t$ npm start \n\t```\n\n* 起動したら`http://localhost:4200`にアクセスしてみます。すると下記のようにメッセージ一覧画面が表示され、メッセージを登録すると適宜一覧に追加されていきます。\n\n![アプリ概要.png](https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png)\n\n* 試しにクライアント資産かサーバ資産を修正してみると、コンンパイルされてアプリに変更がリアルタイムに反映されることがわかります。\n\n#### アプリをビルドしてみる\n* プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力されます。\n\n\t```\n\t$ npm run build\n\t```\n\n#### アプリをビルドして起動してみる\n* プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力された後に起動されます。\nビルドしたアプリは`http://localhost:3000`でアクセスできます。\n\t```\n\t$ npm run buildRun\n\t```\n\n## 終わりに\n今回はAngular CLIベースのプロジェクトをベースにしてMEANスタックの最小構成プロジェクトを構築する方法を紹介しました。プロジェクトを起動、ビルドすることはできるようになったので、次回「[その２. テスト編](http://qiita.com/Takumon/items/b4211fcabad740baa551)」ではテストコードの作成とテスト実施環境の構築について紹介しようと思います。\n\n\n","comments_count":0,"created_at":"2017-07-19T02:06:59+09:00","likes_count":27,"reactions_count":0},"matches":4,"weight":250,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Express"},{"weight":50,"keyword":"Qiita"}],"avgWeight":62.5,"totalWeight":58,"threshold":12.5,"isRelated":true},{"node":{"fields":{"slug":"/7780e313-8bda-5534-99aa-37bf47e9deb3/","title":"GitBucketのissueで作業量を設定できるプラグイン","date":"2017-12-31T23:49:04+09:00","excerpt":"== 2018/4/7 追記 ==========================================本記事ではChrome拡張とDockerによって実現していましたが、その後GitBucket Plugin化しました。gitb...","tags":["JavaScript","chrome-extension","Docker","GitBucket","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"7780e313-8bda-5534-99aa-37bf47e9deb3","title":"GitBucketのissueで作業量を設定できるプラグイン","rendered_body":"<p>== 2018/4/7 追記 ==========================================<br>\n本記事ではChrome拡張とDockerによって実現していましたが、<br>\nその後GitBucket Plugin化しました。</p>\n\n<p><a href=\"https://github.com/Takumon/gitbucket-issue-estimation-plugin\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-plugin</a></p>\n\n<p><a href=\"https://github.com/Takumon/gitbucket-issue-estimation-plugin/releases/tag/0.1\" rel=\"nofollow noopener\" target=\"_blank\">リリースページ</a>からjarファイルをダウンロードして<code>&lt;GITBUCKET_HOME&gt;/plugins/</code>に置くだけで導入可能です。<br>\n== =======================================================</p>\n\n<p>Git Advent Calendarが埋まっていなかったので、大晦日ですが代わりに投稿させていただきました。</p>\n\n<h2>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h2>\n\n<p><a href=\"https://gitbucket.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">GitBucket</a>のマイルストーンの進捗率はissueの件数ベースなので、issueごとに作業量のバラつきがあったりすると現実的な進捗率と乖離してしまいます。</p>\n\n<p>そこで今回はChrome拡張とDockerイメージを作成して、<br>\nissueに作業量を設定できるようにして、マイルストーンで作業量ベースの進捗率を確認できるようにしました。</p>\n\n<p>Chrome拡張とDockerイメージはどちらも公開しているので簡単に導入できます。是非試してみてください。</p>\n\n<ul>\n<li>\n<em>Chrome拡張</em>\n\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-client</a></li>\n</ul>\n</li>\n<li>\n<em>Dockerイメージ</em>\n\n<ul>\n<li><a href=\"https://hub.docker.com/r/takumon/gitbucket-issue-estimation-server/\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-server</a></li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"導入すると\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B%E3%81%A8\"><i class=\"fa fa-link\"></i></a>導入すると</h2>\n\n<p><a href=\"https://gitbucket.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">GitBucket</a>のissueで作業量が設定できるようになり、<br>\n<a href=\"https://camo.qiitausercontent.com/f13706aedeb42c177c1f4f57975596b5ff002407/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36313030366263392d326438322d663062302d363461322d3037393233633737333963372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/f13706aedeb42c177c1f4f57975596b5ff002407/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36313030366263392d326438322d663062302d363461322d3037393233633737333963372e706e67\" alt=\"導入後_イシュー画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/61006bc9-2d82-f0b0-64a2-07923c7739c7.png\"></a></p>\n\n<p>マイルストーンで作業量ベースの進捗率が見れるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/b86e2b23bc0f4b9fae45b07bfd568b11bc005121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36613462383664382d323937332d656338342d383662632d3632383965343262643636362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b86e2b23bc0f4b9fae45b07bfd568b11bc005121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36613462383664382d323937332d656338342d383662632d3632383965343262643636362e706e67\" alt=\"導入後_マイルストーン画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/6a4b86d8-2973-ec84-86bc-6289e42bd666.png\"></a></p>\n\n<p>またissue一覧画面でも作業量を設定できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/7c2ee31427698b7fe01b30f25b8e31b7e3115e2d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39633835386533622d356463312d313432342d663334662d3562323661633665323066642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7c2ee31427698b7fe01b30f25b8e31b7e3115e2d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39633835386533622d356463312d313432342d663334662d3562323661633665323066642e706e67\" alt=\"導入後_イシュー一覧画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/9c858e3b-5dc1-1424-f34f-5b26ac6e20fd.png\"></a></p>\n\n<h2>\n<span id=\"導入手順\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>導入手順</h2>\n\n<h3>\n<span id=\"1-docker側\" class=\"fragment\"></span><a href=\"#1-docker%E5%81%B4\"><i class=\"fa fa-link\"></i></a>1. Docker側</h3>\n\n<p>GitBucketと同じネットワーク環境に作業量保存用のサーバを立てます。Dockerが導入されていることが前提です。</p>\n\n<ul>\n<li>docker-compose.ymlを作成（MongoDBのボリューム用にdocker-compose.ymlファイルと同階層にdbフォルダを作成してください）</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"docker\">\n<div class=\"code-lang\"><span class=\"bold\">docker-compose.yml</span></div>\n<div class=\"highlight\"><pre>version: \"3.3\"\nservices:\n  server:\n    image: takumon/gitbucket-issue-estimation-server\n    ports:\n      - 3000:3000\n    depends_on:\n      - mongo\n    links:\n      - mongo\n    environment:\n      MONGO_URL: mongodb://mongo:27017/test\n  mongo:\n    image: mongo:3.5.12\n    ports:\n      - 27017:27017\n    volumes:\n      - ./db:/data/db\n</pre></div>\n</div>\n\n<ul>\n<li>docker-conpose.ymlがあるフォルダで下記を実行</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span>docker-compose up <span class=\"nt\">-d</span>\n</pre></div></div>\n\n<h3>\n<span id=\"2-gitbucket側\" class=\"fragment\"></span><a href=\"#2-gitbucket%E5%81%B4\"><i class=\"fa fa-link\"></i></a>2. GitBucket側</h3>\n\n<p>Chrome拡張をインストールする前に、GitBucketのトークンを発行してメモしておきます。</p>\n\n<ul>\n<li><p>GitBucketヘッダー右上アイコン &gt; Account Setting を選択<br>\n<a href=\"https://camo.qiitausercontent.com/b06f383ce5768cc2c9b84b7bcd92537cbd0f94ef/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34323637363166372d633139392d653139652d633631392d6131383264643035623065612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b06f383ce5768cc2c9b84b7bcd92537cbd0f94ef/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34323637363166372d633139392d653139652d633631392d6131383264643035623065612e706e67\" alt=\"導入手順_GitBucketトークン発行_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/426761f7-c199-e19e-c619-a182dd05b0ea.png\"></a><br>\n<br></p></li>\n<li><p>左メニュー Applicationsを選択し、Generate new tokenのToken descriptionにトークンの概要を記載、その後<code>Generate token</code>ボタンをクリック<br>\n<a href=\"https://camo.qiitausercontent.com/e21ff3f5214f3833cc66ed4d9cf2037b31c6d02f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64313836663730322d663764622d353231652d366436642d6564636133313836643931352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e21ff3f5214f3833cc66ed4d9cf2037b31c6d02f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64313836663730322d663764622d353231652d366436642d6564636133313836643931352e706e67\" alt=\"導入手順_GitBucketトークン発行_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/d186f702-f7db-521e-6d6d-edca3186d915.png\"></a><br>\n<br></p></li>\n<li><p>発行されたトークンをコピー（後の手順で使います）<br>\n<a href=\"https://camo.qiitausercontent.com/d46de4cb3222a8304001bbc2f89abc1e14b2cba8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30633830346661662d666431332d383064322d386365392d6535303439323262623534612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d46de4cb3222a8304001bbc2f89abc1e14b2cba8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30633830346661662d666431332d383064322d386365392d6535303439323262623534612e706e67\" alt=\"導入手順_GitBucketトークン発行_３.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/0c804faf-fd13-80d2-8ce9-e504922bb54a.png\"></a></p></li>\n</ul>\n\n<h3>\n<span id=\"3-chrome-extension側\" class=\"fragment\"></span><a href=\"#3-chrome-extension%E5%81%B4\"><i class=\"fa fa-link\"></i></a>3. Chrome Extension側</h3>\n\n<ul>\n<li><p>Chromeを開きChromeウェブストアで<a href=\"https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-client</a>をインストール<br>\n<a href=\"https://camo.qiitausercontent.com/b7b7e21c6391cd1436ad73eb356bdec6f93bb3b4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63336365666639382d313731372d626566302d306465392d3836313736303638613635632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b7b7e21c6391cd1436ad73eb356bdec6f93bb3b4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63336365666639382d313731372d626566302d306465392d3836313736303638613635632e706e67\" alt=\"導入手順_GitBucket_拡張インストール_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/c3ceff98-1717-bef0-0de9-86176068a65c.png\"></a><br>\n<br></p></li>\n<li>\n<p>右上の「E」アイコンをクリック、下記情報を入力し<code>Save</code>ボタンクリック</p>\n\n<ul>\n<li>\n<strong>gitbucket-issue-estimation-server URL</strong>\n\n<ul>\n<li>サーバ側の手順で立てたサーバのURL 例： <code>http://127.0.0.1:3000</code> </li>\n</ul>\n</li>\n<li>\n<strong>GitBucket Token</strong>\n\n<ul>\n<li>GitBucket側の手順でメモしたトークン\n<a href=\"https://camo.qiitausercontent.com/be5ab7568b1a4eee506be3546cae994189e34d15/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66366162333739622d613835322d366562342d663634382d6131346437353139663365622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/be5ab7568b1a4eee506be3546cae994189e34d15/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66366162333739622d613835322d366562342d663634382d6131346437353139663365622e706e67\" alt=\"導入手順_GitBucketトークン発行_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f6ab379b-a852-6eb4-f648-a14d7519f3eb.png\"></a>\n<br>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"具体的な仕組み\" class=\"fragment\"></span><a href=\"#%E5%85%B7%E4%BD%93%E7%9A%84%E3%81%AA%E4%BB%95%E7%B5%84%E3%81%BF\"><i class=\"fa fa-link\"></i></a>具体的な仕組み</h2>\n\n<p>Docker側はMongoDBとNode.jsを使っていて、issueの作業量の検索登録・更新・削除APIを提供しているだけです。<br>\nChrome拡張側で下記のように全体をコントロールしています。</p>\n\n<p><strong>(1)</strong> ・・・　GitBucketの画面からissueとマイルストーンの情報を取得、issueの作業量、作業量ベースの進捗率を画面に挿入<br>\n<strong>(2)</strong> ・・・　画面から取得したissueの情報をもとに詳細情報を取得<br>\n<strong>(3)</strong> ・・・　issueの作業量を検索・登録・更新・削除</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/d5736e48c469204a17566c6cfb4003420add2c8e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63616435323063332d376439632d666134372d326262302d3732633534663638383233362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d5736e48c469204a17566c6cfb4003420add2c8e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63616435323063332d376439632d666134372d326262302d3732633534663638383233362e706e67\" alt=\"全体像.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/cad520c3-7d9c-fa47-2bb0-72c54f688236.png\"></a></p>\n\n<h2>\n<span id=\"chrome拡張作成時にgitbucket-apiまわりで躓いたこと\" class=\"fragment\"></span><a href=\"#chrome%E6%8B%A1%E5%BC%B5%E4%BD%9C%E6%88%90%E6%99%82%E3%81%ABgitbucket-api%E3%81%BE%E3%82%8F%E3%82%8A%E3%81%A7%E8%BA%93%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>Chrome拡張作成時にGitBucket APIまわりで躓いたこと</h2>\n\n<p><a href=\"https://github.com/gitbucket/gitbucket/wiki/API-WebHook\" rel=\"nofollow noopener\" target=\"_blank\">GitBucketのAPI</a>は<a href=\"https://developer.github.com/v3/\" rel=\"nofollow noopener\" target=\"_blank\">GithubのREST API v3</a>に準拠していますが、一部実装されていない部分があったので、Chrome拡張作成時に躓きました。</p>\n\n<h3>\n<span id=\"stateallが効かない\" class=\"fragment\"></span><a href=\"#stateall%E3%81%8C%E5%8A%B9%E3%81%8B%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a><code>state=all</code>が効かない</h3>\n\n<p>未解決issueと解決済issue両方をいっぺんに取得したかったのですが、GitBucketのAPIでは<code>state=all</code>が効きません。そのため<code>state=open</code>と<code>state=closed</code>を指定して２回に分けて取得する実装にしました。</p>\n\n<h4>\n<span id=\"per_pageが効かない1度に25件が最大\" class=\"fragment\"></span><a href=\"#per_page%E3%81%8C%E5%8A%B9%E3%81%8B%E3%81%AA%E3%81%841%E5%BA%A6%E3%81%AB25%E4%BB%B6%E3%81%8C%E6%9C%80%E5%A4%A7\"><i class=\"fa fa-link\"></i></a><code>per_page</code>が効かない（1度に25件が最大）</h4>\n\n<p>GitBucketのAPIでは<code>per_page</code>（検索時の１ページあたりの件数）が実装されていません。<br>\nそのためマイルストーンに紐づくissue取得時は、１ページ目を検索して取得結果が25件の場合は次のページも検索するような実装にしました。</p>\n\n<h4>\n<span id=\"closed_atクローズ日が取得できない\" class=\"fragment\"></span><a href=\"#closed_at%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%BA%E6%97%A5%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a><code>closed_at</code>（クローズ日）が取得できない</h4>\n\n<p>Chrome拡張作成当初は、バーンダウンチャートを表示しようと思っていたのですが、issueのクローズ日が取得出来ないので断念しました。</p>\n\n<h4>\n<span id=\"-参考にさせていただいたサイト\" class=\"fragment\"></span><a href=\"#-%E5%8F%82%E8%80%83%E3%81%AB%E3%81%95%E3%81%9B%E3%81%A6%E3%81%84%E3%81%9F%E3%81%A0%E3%81%84%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88\"><i class=\"fa fa-link\"></i></a>※ 参考にさせていただいたサイト</h4>\n\n<ul>\n<li><a href=\"https://qiita.com/5zm/items/b0b620cdeb9596108418#1%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8C%E6%9C%80%E5%A4%A725%E4%BB%B6%E3%81%A7%E5%85%A8issue%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\" id=\"reference-1c197ca99a2ee070efac\">PythonでGitBucketのIssueをExcel出力する（その後）</a></li>\n<li><a href=\"https://qiita.com/5zm/items/57d7abca8e0d447e326d#2-gitbucket%E3%81%AEapi%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6issues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0\" id=\"reference-7d56ea50a58cb24addc5\">PythonでGitBucketのIssueをExcel出力する（API呼び出し編）</a></li>\n</ul>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>本来こういう追加機能はGitBucketプラグインで作るべきなのかもしれませんが、今回はChrome拡張とDockerイメージで実現してみました。<br>\nChrome拡張は任意の画面にJavaScriptやCSSを差し込めるので、既存のWebサービスををちょっと便利にするのにはうってつけですね。</p>\n","body":"== 2018/4/7 追記 ==========================================\n本記事ではChrome拡張とDockerによって実現していましたが、\nその後GitBucket Plugin化しました。\n\n[gitbucket-issue-estimation-plugin](https://github.com/Takumon/gitbucket-issue-estimation-plugin)\n\n[リリースページ](https://github.com/Takumon/gitbucket-issue-estimation-plugin/releases/tag/0.1)からjarファイルをダウンロードして`<GITBUCKET_HOME>/plugins/`に置くだけで導入可能です。\n== =======================================================\n\n\nGit Advent Calendarが埋まっていなかったので、大晦日ですが代わりに投稿させていただきました。\n\n## はじめに\n[GitBucket](https://gitbucket.github.io/)のマイルストーンの進捗率はissueの件数ベースなので、issueごとに作業量のバラつきがあったりすると現実的な進捗率と乖離してしまいます。\n\nそこで今回は\bChrome拡張とDockerイメージを作成して、\nissueに作業量を設定できるようにして、マイルストーンで作業量ベースの進捗率を確認できるようにしました。\n\nChrome拡張とDockerイメージはどちらも公開しているので簡単に導入できます。是非試してみてください。\n\n\n* *Chrome拡張*\n    * [gitbucket-issue-estimation-client](https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja)\n* *Dockerイメージ*\n    * [gitbucket-issue-estimation-server](https://hub.docker.com/r/takumon/gitbucket-issue-estimation-server/)\n\n## 導入すると\n[GitBucket](https://gitbucket.github.io/)のissueで作業量が設定できるようになり、\n![導入後_イシュー画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/61006bc9-2d82-f0b0-64a2-07923c7739c7.png)\n\n\bマイルストーンで作業量ベースの進捗率が見れるようになります。\n![導入後_マイルストーン画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/6a4b86d8-2973-ec84-86bc-6289e42bd666.png)\n\nまた\bissue\b一覧画面でも作業量を設定できるようになります。\n![導入後_イシュー一覧画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/9c858e3b-5dc1-1424-f34f-5b26ac6e20fd.png)\n\n\n\n\n## 導入手順\n### 1. Docker側\nGitBucketと同じネットワーク環境に作業量\b保存用のサーバを立てます。Dockerが導入されていることが前提です。\n\n* \u001edocker-compose\b.ymlを作成（MongoDBのボリューム用にdocker-compose.ymlファイルと同階層にdbフォルダを作成してください）\n\n```docker:docker-compose.yml\nversion: \"3.3\"\nservices:\n  server:\n    image: takumon/gitbucket-issue-estimation-server\n    ports:\n      - 3000:3000\n    depends_on:\n      - mongo\n    links:\n      - mongo\n    environment:\n      MONGO_URL: mongodb://mongo:27017/test\n  mongo:\n    image: mongo:3.5.12\n    ports:\n      - 27017:27017\n    volumes:\n      - ./db:/data/db\n```\n\n* docker-conpose.ymlがあるフォルダで下記を実行\n\n```bash:\n$ docker-compose up -d\n```\n\n\n### 2. GitBucket側\nChrome拡張をインストールする前に、GitBucketの\bトークンを発行してメモしておきます。\n\n* GitBucketヘッダー右上アイコン > Account Setting\b を選択\n![導入手順_GitBucketトークン発行_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/426761f7-c199-e19e-c619-a182dd05b0ea.png)\n<br>\n\n* 左メニュー Applicationsを選択し、Generate new tokenのToken descriptionにトークンの概要を記載、その後`Generate token`ボタンをクリック\n![導入手順_GitBucketトークン発行_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/d186f702-f7db-521e-6d6d-edca3186d915.png)\n<br>\n\n* 発行されたトークンをコピー（後の手順で使います）\n![導入手順_GitBucketトークン発行_３.png](https://qiita-image-store.s3.amazonaws.com/0/49915/0c804faf-fd13-80d2-8ce9-e504922bb54a.png)\n\n\n### 3. Chrome Extension側\n* Chromeを開きChromeウェブストアで[gitbucket-issue-estimation-client](https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja)をインストール\n![導入手順_GitBucket_拡張インストール_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/c3ceff98-1717-bef0-0de9-86176068a65c.png)\n<br>\n\n* \b右上の「E」アイコンをクリック、下記情報を入力し`Save`ボタンクリック\n    * **gitbucket-issue-estimation-server URL**\n        * サーバ側の手順で立てたサーバのURL 例： `http://127.0.0.1:3000` \n    * **GitBucket Token**\n        * GitBucket側の手順でメモしたトークン\n![導入手順_GitBucketトークン発行_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f6ab379b-a852-6eb4-f648-a14d7519f3eb.png)\n<br>\n\n## 具体的な仕組み\nDocker側はMongoDBとNode.jsを使っていて、issueの作業量の検索登録・更新・削除APIを提供しているだけです。\nChrome拡張側で下記のように全体をコントロールしています。\n\n**(1)** ・・・　GitBucketの画面からissueとマイルストーンの情報を取得、issueの作業量、作業量ベースの進捗率を画面に挿入\n**(2)** ・・・　画面から取得したissueの情報をもとに詳細情報を取得\n**(3)** ・・・　issueの作業量を検索・登録・更新・削除\n\n![全体像.png](https://qiita-image-store.s3.amazonaws.com/0/49915/cad520c3-7d9c-fa47-2bb0-72c54f688236.png)\n\n\n\n## Chrome拡張作成時にGitBucket APIまわりで躓いたこと\n[GitBucketのAPI](https://github.com/gitbucket/gitbucket/wiki/API-WebHook)は[GithubのREST API v3](https://developer.github.com/v3/)に準拠していますが、一部実装されていない部分があったので、Chrome拡張作成時に躓きました。\n\n### `state=all`が効かない\n未解決issueと解決済issue両方をいっぺんに取得したかったのですが、GitBucketのAPIでは`state=all`が効きません。そのため`state=open`と`state=closed`を指定して２回に分けて取得する実装にしました。\n\n#### `per_page`が効かない（\b1度に25件が最大）\nGitBucketのAPIでは`per_page`（検索時の１ページあたりの件数）が実装されていません。\nそのためマイルストーンに紐づくissue取得時は、１ページ目を検索して取得結果が25件の場合は次のページも検索するような実装にしました。\n\n#### `closed_at`（クローズ日）が取得できない\nChrome拡張作成当初は、バーンダウンチャートを表示しようと思っていたのですが、issueのクローズ日が取得出来ないので断念しました。\n\n#### ※ 参考にさせていただいたサイト\n* [PythonでGitBucketのIssueをExcel出力する（その後）](https://qiita.com/5zm/items/b0b620cdeb9596108418#1%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8C%E6%9C%80%E5%A4%A725%E4%BB%B6%E3%81%A7%E5%85%A8issue%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84)\n* [PythonでGitBucketのIssueをExcel出力する（API呼び出し編）](https://qiita.com/5zm/items/57d7abca8e0d447e326d#2-gitbucket%E3%81%AEapi%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6issues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0)\n\n\n## まとめ\n本来こういう追加機能はGitBucketプラグインで作るべきなのかもしれませんが、今回はChrome拡張とDockerイメージで実現してみました。\nChrome拡張は任意の画面にJavaScriptやCSSを差し込めるので、既存のWebサービスををちょっと便利にするのにはうってつけですね。\n\n","comments_count":0,"created_at":"2017-12-31T23:49:04+09:00","likes_count":6,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/b4c7d1b9-428f-569a-af40-527d89794a77/","title":"TypeScriptで簡単にChrome Extensionを作る方法","date":"2017-12-20T02:36:27+09:00","excerpt":"Githubで草を生やす活動は楽しいですね!増えてきて芝みたいになると達成感があって、モチベーションも上がります。ところで、この前の10/30に草がハロウィン仕様になっていたのを見て、草を自分の好みの色を変更できればもっと楽しくなるのでは?...","tags":["JavaScript","GitHub","TypeScript","chrome-extension","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"b4c7d1b9-428f-569a-af40-527d89794a77","title":"TypeScriptで簡単にChrome Extensionを作る方法","rendered_body":"<p>Githubで草を生やす活動は楽しいですね!<br>\n増えてきて芝みたいになると達成感があって、モチベーションも上がります。<br>\nところで、この前の10/30に草がハロウィン仕様になっていたのを見て、<br>\n草を自分の好みの色を変更できればもっと楽しくなるのでは?と思い<br>\n<a href=\"https://chrome.google.com/webstore/detail/github-contributions-pain/bdibnecenojddgmjplnfehpjdmkiddok?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">草の色が変更できる（ついでにお絵描きもできる）Chrome Extension</a>を作りました。<br>\n<strong>その時に<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使って、TypeScriptで簡単にChrome Extensionが作れたので、アプリ作成から公開までの手順をまとめます。</strong></p>\n\n<h2>\n<span id=\"1-プロジェクトの雛形を生成する\" class=\"fragment\"></span><a href=\"#1-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E9%9B%9B%E5%BD%A2%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>1. プロジェクトの雛形を生成する</h2>\n\n<p>yomanと<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>で簡単に雛形が作れるのでコレらを使っていきます。</p>\n\n<ul>\n<li>\n<code>yoman</code>と<code>generator-chrome-extension-kickstart-typescript</code>をグローバルインストールします</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install -g yo generator-chrome-extension-kickstart-typescript \n</pre></div></div>\n\n<ul>\n<li>プロジェクトのルートフォルダを作成後、ルートフォルダに移動して<code>yo</code>コマンドで雛形を生成します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ mkdir project\n$ cd project\n$ yo chrome-extension-kickstart-typescript \n</pre></div></div>\n\n<ul>\n<li>いくつか質問されるので適当に答えます\n\n<ul>\n<li>\n<strong>What would you like to call this extension?</strong>\n\n<ul>\n<li>プロジェクト名を入力します。デフォルトはプロジェクトのフォルダ名</li>\n</ul>\n</li>\n<li>\n<strong>And how would you call it if you only had 12 characters (short_name)?</strong>\n\n<ul>\n<li>プロジェクトの略称を12文字以内で入力します</li>\n</ul>\n</li>\n<li>\n<strong>How would you like to describe this extension?</strong>\n\n<ul>\n<li>プロジェクト概要を入力します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to use UI Action?</strong>\n\n<ul>\n<li>作りたいUI Actionに応じて、<code>No</code>,<code>Browser</code>,<code>Page</code>のいずれかを選択します\n\n<ul>\n<li>\n<code>No</code> ・・・ UI Actionを使わない場合</li>\n<li>\n<code>Browser</code> ・・・ ツールバーの右にアイコンが常駐するタイプのChrome拡張を作成する場合</li>\n<li>\n<code>Page</code> ・・・ 特定のWebサイト観覧時のみにアドレスバー右にアイコンが表示されるタイプのChrome拡張を作成する場合</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to override a chrome page?</strong>\n\n<ul>\n<li>Chromeの内部ページを書き換えるかどうかで、<code>No</code>,<code>Bookmarks Page</code>,<code>History Page</code>,<code>Newtab Page</code>のいずれかを選択します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like more UI Features?</strong>\n\n<ul>\n<li>作りたいUIを複数選択します\n\n<ul>\n<li>\n<code>Options Page</code> ・・・ オプション画面を作りたい場合</li>\n<li>\n<code>Devtools Page</code> ・・・ 開発者ツールを拡張したい場合</li>\n<li>\n<code>Content Scripts</code> ・・・ Webで表示している画面にJavaScriptを差し込んで何か処理をしたい場合</li>\n<li>\n<code>Omnibox</code> ・・・ アドレスバーを拡張したい時に選択</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to use permissions?</strong>\n\n<ul>\n<li>使用するパーミッションを複数選択します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to install promo images for the Chrome Web Store?</strong>\n\n<ul>\n<li>Chromeストアで使う宣伝用画像を自動で生成するかを選択します</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<p>※自分は下記のように答えました<br>\n<strong>What would you like to call this extension?</strong> =&gt; github-contributions-paint<br>\n<strong>And how would you call it if you only had 12 characters (short_name)?</strong> =&gt;  github-paint<br>\n<strong>How would you like to describe this extension?</strong> =&gt;  You can paint github contributions!<br>\n<strong>Would you like to use UI Action?</strong> =&gt; Browser<br>\n<strong>Would you like to override a chrome page?</strong> =&gt;  No<br>\n<strong>Would you like more UI Features?</strong> =&gt;  Content Scripts<br>\n<strong>Would you like to use permissions?</strong> =&gt;  Tabs<br>\n<strong>Would you like to install promo images for the Chrome Web Store?</strong> =&gt;  Yes</p>\n\n<ul>\n<li>すると雛形が生成されます</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">生成された雛形のフォルダ構成</span></div>\n<div class=\"highlight\"><pre>github-contributions-paint\n├── README.md\n├── app\n│   ├── images       　　　    　・・・Chromeウェブストア公開時に必要なアイコン格納フォルダ\n│   │   ├── icon-128.png\n│   │   ├── icon-16.png\n│   │   ├── icon-19.png\n│   │   └── icon-38.png\n│   ├── manifest.json          ・・・Chrome拡張の設定を定義するファイル\n│   ├── pages                  ・・・HTMLファイル格納フォルダ\n│   │   └── popup.html         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── scripts                ・・・TSファイル格納フォルダ\n│   │   ├── background.ts      ・・・バックグランド処理を記述するファイル\n│   │   └── popup.ts           ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── styles                 ・・・CSSファイル格納フォルダ\n│   │   └── popup.scss         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── _locales\n│   │   └── en\n│   │       └── messages.json ・・・アプリの設定ファイル\n│   └── fonts\n├── promo                     ・・・Chromeウェブストア公開時に必要な宣伝用画像の格納フォルダ\n│   ├── Chrome-Webstore-Icon_128x128.png\n│   ├── Promo-Image-Large_920x680.png\n│   ├── Promo-Image-Marquee_1400x560.png\n│   ├── Promo-Image-Small_440x280.png\n│   ├── Screenshot_1280x800.png\n│   └── Screenshot_640x400.png\n├── dist\n├── gulpfile.babel.js\n├── node_modules\n├── package-lock.json\n├── package.json\n├── tasks\n├── tsconfig.json\n└── tslint.json\n\n</pre></div>\n</div>\n\n<ul>\n<li>最後にTypeScriptをグローバルインストールしていない場合は、グローバルインストールまたはプロジェクトにインストールします</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install typescript --save-dev\n</pre></div></div>\n\n<p>==2018/11/24 追記(ここから)==</p>\n\n<ul>\n<li>このまま次手順にいくと警告がでるのでそれを防ぐためにgulpのバージョンを下げます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install gulp@3.9.0 --save-dev\n</pre></div></div>\n\n<p>※関連する<a href=\"https://github.com/gulpjs/gulp/issues/1631\" rel=\"nofollow noopener\" target=\"_blank\">issue</a>、<a href=\"https://stackoverflow.com/questions/48568942/failed-to-load-external-module-babel-register-while-gulp\" rel=\"nofollow noopener\" target=\"_blank\">stackoverflow</a></p>\n\n<p>==2018/11/24 追記(ここまで)==</p>\n\n<h2>\n<span id=\"2-作ったchrome-extensionを動かしてみる\" class=\"fragment\"></span><a href=\"#2-%E4%BD%9C%E3%81%A3%E3%81%9Fchrome-extension%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>2. 作ったChrome Extensionを動かしてみる</h2>\n\n<p>雛形を作成したら早速動かすことができます</p>\n\n<ul>\n<li>ビルドコマンドを実行します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run dev:chrome\n</pre></div></div>\n\n<ul>\n<li><p>Chromeで<code>chrome://extensions</code>を開いて<code>パッケージ化されていない拡張機能を読み込む</code>ボタンをクリック<br>\n<a href=\"https://camo.qiitausercontent.com/88e144ea0fc880ccec17978afc9ec782fb0d62c1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35613534396134352d386563342d383935352d623733332d3837353534396638616433312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/88e144ea0fc880ccec17978afc9ec782fb0d62c1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35613534396134352d386563342d383935352d623733332d3837353534396638616433312e706e67\" alt=\"手順_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5a549a45-8ec4-8955-b733-875549f8ad31.png\"></a></p></li>\n<li><p>プロジェクトルート/dist配下の<code>chrome</code>フォルダを選択<br>\n<a href=\"https://camo.qiitausercontent.com/53813821851801eddbed514961987f9070733381/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393161313636652d366532652d336633372d373130652d6565373532306339336563322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/53813821851801eddbed514961987f9070733381/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393161313636652d366532652d336633372d373130652d6565373532306339336563322e706e67\" alt=\"操作_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f91a166e-6e2e-3f37-710e-ee7520c93ec2.png\"></a></p></li>\n<li><p>するとプロジェクトが<a>Chrome Extension管理画面</a>に追加されて、ブラウザ右上にアイコンが表示されます<br>\n<a href=\"https://camo.qiitausercontent.com/e2e0fba31b666b0fea44ded1ded106236dd280e8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36316232653131332d653532302d376566382d633437652d3432366265393361613834622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e2e0fba31b666b0fea44ded1ded106236dd280e8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36316232653131332d653532302d376566382d633437652d3432366265393361613834622e706e67\" alt=\"動作確認1_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/61b2e113-e520-7ef8-c47e-426be93aa84b.png\"></a></p></li>\n<li><p>アイコンをクリックして動作検証ができます<br>\n<a href=\"https://camo.qiitausercontent.com/909be0f655c64c11846b9b3ca31630357ddd7121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33666631316537332d383162332d636435612d386537302d3961373534613661393936352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/909be0f655c64c11846b9b3ca31630357ddd7121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33666631316537332d383162332d636435612d386537302d3961373534613661393936352e706e67\" alt=\"動作確認_11.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/3ff11e73-81b3-cd5a-8e70-9a754a6a9965.png\"></a></p></li>\n</ul>\n\n<h2>\n<span id=\"3-開発中にchrome-extensionの動作確認する\" class=\"fragment\"></span><a href=\"#3-%E9%96%8B%E7%99%BA%E4%B8%AD%E3%81%ABchrome-extension%E3%81%AE%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>3. 開発中にChrome Extensionの動作確認する</h2>\n\n<p>雛形の動作検証ができたらTypeScriptファイルを編集して処理を追加していきます。<br>\n<code>npm run dev:chrome</code>を実行した後、下記手順繰り返すことで、ソースコードを修正しながら随時動作検証ができます。</p>\n\n<ul>\n<li>資産（TypeScriptやHTML,CSS）を修正する（勝手にビルドが走ります）</li>\n<li>最新のビルド資産を取り込むため<a>Chrome Extension管理画面</a>でリロードをクリックします\n<a href=\"https://camo.qiitausercontent.com/090a13aa3e617e29329421ec4c5fba4a56e1fb9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35663936353163362d373337662d643664622d383062662d3434613731363662323030352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/090a13aa3e617e29329421ec4c5fba4a56e1fb9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35663936353163362d373337662d643664622d383062662d3434613731363662323030352e706e67\" alt=\"開発手順_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5f9651c6-737f-d6db-80bf-44a7166b2005.png\"></a>\n</li>\n<li>Chrome Extensionの動作確認をする</li>\n</ul>\n\n<h2>\n<span id=\"4-アイコンと宣伝用画像を作る\" class=\"fragment\"></span><a href=\"#4-%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%81%A8%E5%AE%A3%E4%BC%9D%E7%94%A8%E7%94%BB%E5%83%8F%E3%82%92%E4%BD%9C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>4. アイコンと宣伝用画像を作る</h2>\n\n<p>アプリを公開する前に、アイコンと宣伝用画像を作成し、雛形生成時のデフォルト資産と差し替えます。<br>\nデザイナーさんなら苦労しないでしょうが、自分はこれが一番大変でした。<br>\n3つのアイコンと3つの宣伝用画像が必要です。</p>\n\n<h3>\n<span id=\"アイコン\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3\"><i class=\"fa fa-link\"></i></a>アイコン</h3>\n\n<ul>\n<li>128x128\n\n<ul>\n<li>必須。インストール時やChromeウェブストアで表示する用</li>\n</ul>\n</li>\n<li>48x48\n\n<ul>\n<li>拡張機能の管理ページで表示する用</li>\n</ul>\n</li>\n<li>16x16\n\n<ul>\n<li>ブラウザ右上に表示する用</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"宣伝用画像\" class=\"fragment\"></span><a href=\"#%E5%AE%A3%E4%BC%9D%E7%94%A8%E7%94%BB%E5%83%8F\"><i class=\"fa fa-link\"></i></a>宣伝用画像</h3>\n\n<ul>\n<li>440x280\n\n<ul>\n<li>必須</li>\n</ul>\n</li>\n<li>920x680\n\n<ul>\n<li>大きめの画像</li>\n</ul>\n</li>\n<li>1400x560\n\n<ul>\n<li>ChromeExtensionをChrome Storeで選択した時に表示される画像</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"5-chromeウェブストアに公開する\" class=\"fragment\"></span><a href=\"#5-chrome%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B9%E3%83%88%E3%82%A2%E3%81%AB%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>5. Chromeウェブストアに公開する</h2>\n\n<ul>\n<li>雛形生成時バージョンが0.0.0になっており、バージョンが低すぎて公開できない状態なので、<code>manifest.json</code>と<code>package.json</code>のバージョン指定を0.0.1にあげます</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">manifest.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n  </span><span class=\"s2\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0.0.1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">&lt;-</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">0</span><span class=\"err\">から</span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">1</span><span class=\"err\">にあげる</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n  </span><span class=\"s2\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0.0.1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">&lt;-</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">0</span><span class=\"err\">から</span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">1</span><span class=\"err\">にあげる</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>下記コマンドで公開用のzipファイルを作成します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run build:chrome\n</pre></div></div>\n\n<ul>\n<li><p><a href=\"https://chrome.google.com/webstore/category/extensions\" rel=\"nofollow noopener\" target=\"_blank\">Chromeウェブストア</a>のデベロッパーダッシュボードを開きます。Chromeアカウントでログインします<br>\n<a href=\"https://camo.qiitausercontent.com/d0db218423075317e350940d46d6510353fc81bd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65646234386163392d303138312d316437382d633761642d6130383237313261663031632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d0db218423075317e350940d46d6510353fc81bd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65646234386163392d303138312d316437382d633761642d6130383237313261663031632e706e67\" alt=\"アプリ登録_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/edb48ac9-0181-1d78-c7ad-a082712af01c.png\"></a></p></li>\n<li><p>ダッシュボードで<code>新しいアイテムを追加する</code>を選択します<br>\n<a href=\"https://camo.qiitausercontent.com/70b8f467a4819f7fd2251cf96abf3749b7626eeb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37383761336132352d326539332d363138362d313765642d3662313962626233626162352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/70b8f467a4819f7fd2251cf96abf3749b7626eeb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37383761336132352d326539332d363138362d313765642d3662313962626233626162352e706e67\" alt=\"アプリ登録_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/787a3a25-2e93-6186-17ed-6b19bbb3bab5.png\"></a></p></li>\n<li><p><code>ファイルを追加</code>で作成したzipファイル(プロジェクトルート/packages配下にあります)を選択後、<code>アップロード</code>を選択します<br>\n<a href=\"https://camo.qiitausercontent.com/2bc72004e70eb79c898506904f452d396754f39f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32323362343632342d643839322d336562382d356561382d3733633461616632623562382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2bc72004e70eb79c898506904f452d396754f39f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32323362343632342d643839322d336562382d356561382d3733633461616632623562382e706e67\" alt=\"アプリ登録_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/223b4624-d892-3eb8-5ea8-73c4aaf2b5b8.png\"></a></p></li>\n<li><p>説明、アイコン、宣伝用画像、カテゴリを入力して<code>変更を公開</code>をクリックします<br>\n<a href=\"https://camo.qiitausercontent.com/efa7c9ab0ced7326af8c7cb2d03fe9c2282e7f11/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323466303335352d666537622d373931382d326437352d3039633333636365356530302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/efa7c9ab0ced7326af8c7cb2d03fe9c2282e7f11/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323466303335352d666537622d373931382d326437352d3039633333636365356530302e706e67\" alt=\"登録_5.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/724f0355-fe7b-7918-2d75-09c33cce5e00.png\"></a></p></li>\n<li><p>これで公開作業は完了です。しばらくするとChromeウェブストアに公開されます</p></li>\n</ul>\n\n<h2>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h2>\n\n<p>今回は<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使って、TypeScriptでChrome Extensionを作成、公開する手順をまとめました。<br>\n最初はTypeScriptでChrome Extensionを作るのは、ビルドの設定など色々めんどくさそうだぁと思っていましたが、<br>\n<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使うことで、簡単に作成から公開まで実現できました。<br>\nブラウザでのちょっとした作業を効率化するのにChrome Extentionは非常に強力なツールなので、今後なにかアイディアがあればまた作ってみたいと思います。</p>\n","body":"Githubで草を生やす活動は楽しいですね!\n増えてきて芝みたいになると達成感があって、モチベーションも上がります。\nところで、この前の10/30に草がハロウィン仕様になっていたのを見て、\n草を自分の好みの色を変更できればもっと楽しくなるのでは?と思い\n[草の色が変更できる（ついでにお絵描きもできる）Chrome Extension](https://chrome.google.com/webstore/detail/github-contributions-pain/bdibnecenojddgmjplnfehpjdmkiddok?hl=ja)を作りました。\n**その時に[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使って、TypeScriptで簡単にChrome Extensionが作れたので、アプリ作成から公開までの手順をまとめます。**\n\n## 1. プロジェクトの雛形を生成する\nyomanと[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)で簡単に雛形が作れるのでコレらを使っていきます。\n\n* `yoman`と`generator-chrome-extension-kickstart-typescript`をグローバルインストールします\n\n```\n$ npm install -g yo generator-chrome-extension-kickstart-typescript \n```\n* プロジェクトのルートフォルダを作成後、ルートフォルダに移動して`yo`コマンドで雛形を生成します\n\n```\n$ mkdir project\n$ cd project\n$ yo chrome-extension-kickstart-typescript \n```\n\n* いくつか質問されるので適当に答えます\n    * **What would you like to call this extension?**\n        * プロジェクト名を入力します。デフォルトはプロジェクトのフォルダ名\n    * **And how would you call it if you only had 12 characters (short_name)?**\n        * プロジェクトの略称を12文字以内で入力します\n    * **How would you like to describe this extension?**\n        * プロジェクト概要を入力します\n    * **Would you like to use UI Action?**\n        * 作りたいUI Actionに応じて、`No`,`Browser`,`Page`のいずれかを選択します\n            * `No` ・・・ UI Actionを使わない場合\n            * `Browser` ・・・ ツールバーの右にアイコンが常駐するタイプのChrome拡張を作成する場合\n            * `Page` ・・・ 特定のWebサイト観覧時のみにアドレスバー右にアイコンが表示されるタイプのChrome拡張を作成する場合\n    * **Would you like to override a chrome page?**\n        * Chromeの内部ページを書き換えるかどうかで、`No`,`Bookmarks Page`,`History Page`,`Newtab Page`のいずれかを選択します\n    * **Would you like more UI Features?**\n        * 作りたいUIを複数選択します\n            * `Options Page` ・・・ オプション画面を作りたい場合\n            * `Devtools Page` ・・・ 開発者ツールを拡張したい場合\n            * `Content Scripts` ・・・ Webで表示している画面にJavaScriptを差し込んで何か処理をしたい場合\n            * `Omnibox` ・・・ アドレスバーを拡張したい時に選択\n    * **Would you like to use permissions?**\n        * 使用するパーミッションを複数選択します\n    * **Would you like to install promo images for the Chrome Web Store?**\n        * Chromeストアで使う宣伝用画像を自動で生成するかを選択します\n\n\n※自分は下記のように答えました\n**What would you like to call this extension?** => github-contributions-paint\n**And how would you call it if you only had 12 characters (short_name)?** =>  github-paint\n**How would you like to describe this extension?** =>  You can paint github contributions!\n**Would you like to use UI Action?** => Browser\n**Would you like to override a chrome page?** =>  No\n**Would you like more UI Features?** =>  Content Scripts\n**Would you like to use permissions?** =>  Tabs\n**Would you like to install promo images for the Chrome Web Store?** =>  Yes\n\n* すると雛形が生成されます\n\n```:生成された雛形のフォルダ構成\ngithub-contributions-paint\n├── README.md\n├── app\n│   ├── images       　　　    　・・・Chromeウェブストア公開時に必要なアイコン格納フォルダ\n│   │   ├── icon-128.png\n│   │   ├── icon-16.png\n│   │   ├── icon-19.png\n│   │   └── icon-38.png\n│   ├── manifest.json          ・・・Chrome拡張の設定を定義するファイル\n│   ├── pages                  ・・・HTMLファイル格納フォルダ\n│   │   └── popup.html         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── scripts                ・・・TSファイル格納フォルダ\n│   │   ├── background.ts      ・・・バックグランド処理を記述するファイル\n│   │   └── popup.ts           ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── styles                 ・・・CSSファイル格納フォルダ\n│   │   └── popup.scss         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── _locales\n│   │   └── en\n│   │       └── messages.json ・・・アプリの設定ファイル\n│   └── fonts\n├── promo                     ・・・Chromeウェブストア公開時に必要な宣伝用画像の格納フォルダ\n│   ├── Chrome-Webstore-Icon_128x128.png\n│   ├── Promo-Image-Large_920x680.png\n│   ├── Promo-Image-Marquee_1400x560.png\n│   ├── Promo-Image-Small_440x280.png\n│   ├── Screenshot_1280x800.png\n│   └── Screenshot_640x400.png\n├── dist\n├── gulpfile.babel.js\n├── node_modules\n├── package-lock.json\n├── package.json\n├── tasks\n├── tsconfig.json\n└── tslint.json\n\n```\n\n* 最後にTypeScriptをグローバルインストールしていない場合は、グローバルインストールまたはプロジェクトにインストールします\n\n```\n$ npm install typescript --save-dev\n```\n\n==2018/11/24 追記(ここから)==\n\n* このまま次手順にいくと警告がでるのでそれを防ぐためにgulpのバージョンを下げます。\n\n```\n$ npm install gulp@3.9.0 --save-dev\n```\n\n<small>※関連する[issue](https://github.com/gulpjs/gulp/issues/1631)、[stackoverflow](https://stackoverflow.com/questions/48568942/failed-to-load-external-module-babel-register-while-gulp)</small>\n\n==2018/11/24 追記(ここまで)==\n## 2. 作ったChrome Extensionを動かしてみる\n雛形を作成したら早速動かすことができます\n\n* ビルドコマンドを実行します\n\n```\n$ npm run dev:chrome\n```\n\n* Chromeで`chrome://extensions`を開いて`パッケージ化されていない拡張機能を読み込む`ボタンをクリック\n![手順_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5a549a45-8ec4-8955-b733-875549f8ad31.png)\n\n* プロジェクトルート/dist配下の`chrome`フォルダを選択\n![操作_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f91a166e-6e2e-3f37-710e-ee7520c93ec2.png)\n\n* するとプロジェクトが[Chrome Extension管理画面](chrome://extensions/)に追加されて、ブラウザ右上にアイコンが表示されます\n![動作確認1_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/61b2e113-e520-7ef8-c47e-426be93aa84b.png)\n\n\n* アイコンをクリックして動作検証ができます\n![動作確認_11.png](https://qiita-image-store.s3.amazonaws.com/0/49915/3ff11e73-81b3-cd5a-8e70-9a754a6a9965.png)\n\n\n## 3. 開発中にChrome Extensionの動作確認する\n雛形の動作検証ができたらTypeScriptファイルを編集して処理を追加していきます。\n`npm run dev:chrome`を実行した後、下記手順繰り返すことで、ソースコードを修正しながら随時動作検証ができます。\n\n* 資産（TypeScriptやHTML,CSS）を修正する（勝手にビルドが走ります）\n* 最新のビルド資産を取り込むため[Chrome Extension管理画面](chrome://extensions/)でリロードをクリックします\n![開発手順_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5f9651c6-737f-d6db-80bf-44a7166b2005.png)\n* Chrome Extensionの動作確認をする\n\n## 4. アイコンと宣伝用画像を作る\nアプリを公開する前に、アイコンと宣伝用画像を作成し、雛形生成時のデフォルト資産と差し替えます。\nデザイナーさんなら苦労しないでしょうが、自分はこれが一番大変でした。\n3つのアイコンと3つの宣伝用画像が必要です。\n\n### アイコン\n* 128x128\n    * 必須。インストール時やChromeウェブストアで表示する用\n* 48x48\n    * 拡張機能の管理ページで表示する用\n* 16x16\n    * ブラウザ右上に表示する用\n  \n### 宣伝用画像\n* 440x280\n    * 必須\n* 920x680\n    * 大きめの画像\n* 1400x560\n    * ChromeExtensionをChrome Storeで選択した時に表示される画像\n\n## 5. Chromeウェブストアに公開する\n* 雛形生成時バージョンが0.0.0になっており、バージョンが低すぎて公開できない状態なので、`manifest.json`と`package.json`のバージョン指定を0.0.1にあげます\n\n```json:manifest.json\n{\n  ・・・\n  \"version\": \"0.0.1\", <- 0.0.0から0.0.1にあげる\n  ・・・\n}\n```\n\n```json:package.json\n{\n  ・・・\n  \"version\": \"0.0.1\", <- 0.0.0から0.0.1にあげる\n  ・・・\n}\n```\n\n* 下記コマンドで公開用のzipファイルを作成します\n\n```\n$ npm run build:chrome\n```\n\n* [Chromeウェブストア](https://chrome.google.com/webstore/category/extensions)のデベロッパーダッシュボードを開きます。Chromeアカウントでログインします\n![アプリ登録_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/edb48ac9-0181-1d78-c7ad-a082712af01c.png)\n\n* ダッシュボードで`新しいアイテムを追加する`を選択します\n![アプリ登録_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/787a3a25-2e93-6186-17ed-6b19bbb3bab5.png)\n\n* `ファイルを追加`で作成したzipファイル(プロジェクトルート/packages配下にあります)を選択後、`アップロード`を選択します\n![アプリ登録_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/223b4624-d892-3eb8-5ea8-73c4aaf2b5b8.png)\n\n* 説明、アイコン、宣伝用画像、カテゴリを入力して`変更を公開`をクリックします\n![登録_5.png](https://qiita-image-store.s3.amazonaws.com/0/49915/724f0355-fe7b-7918-2d75-09c33cce5e00.png)\n\n* これで公開作業は完了です。しばらくするとChromeウェブストアに公開されます\n\n\n## 最後に\n今回は[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使って、TypeScriptでChrome Extensionを作成、公開する手順をまとめました。\n最初はTypeScriptでChrome Extensionを作るのは、ビルドの設定など色々めんどくさそうだぁと思っていましたが、\n[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使うことで、簡単に作成から公開まで実現できました。\nブラウザでのちょっとした作業を効率化するのにChrome Extentionは非常に強力なツールなので、今後なにかアイディアがあればまた作ってみたいと思います。\n\n","comments_count":5,"created_at":"2017-12-20T02:36:27+09:00","likes_count":48,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/5644c24e-eade-50ca-aa11-83a4eaeba122/","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その２. テスト編","date":"2017-07-24T07:12:10+09:00","excerpt":"やりたいことAngular CLI使って、MEANスタック(MongoDB + Express + Angular + NodeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。フロント側とサーバ側の両方をweb...","tags":["JavaScript","jasmine","TypeScript","AngularJS","Protractor","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"5644c24e-eade-50ca-aa11-83a4eaeba122","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その２. テスト編","rendered_body":"\n<h2>\n<span id=\"やりたいこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたいこと</h2>\n\n<ul>\n<li>Angular CLI使って、MEANスタック(<strong>M</strong>ongoDB + <strong>E</strong>xpress + <strong>A</strong>ngular + <strong>N</strong>odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。</li>\n<li>フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。</li>\n<li>Dockerを使ってアプリを簡単に配布したい。</li>\n</ul>\n\n<p>これらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。</p>\n\n<ul>\n<li><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\" id=\"reference-fc6741a6eda3b7ffd9f1\">その１. ビルド編</a></li>\n<li>その２. テスト編　⇦　今回はココ</li>\n<li>その３. Dockerビルド編</li>\n</ul>\n\n<h2>\n<span id=\"その２-テスト編\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%81%AE%EF%BC%92-%E3%83%86%E3%82%B9%E3%83%88%E7%B7%A8\"><i class=\"fa fa-link\"></i></a>その２. テスト編</h2>\n\n<p><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\">その１. ビルド編</a>では、Angular CLIで作成したプロジェクトをベースに、<br>\nMongoDBに登録しているメッセージを画面に一覧で表示するアプリを作成しました。<br>\n今回は、クライアント側とサーバ側の<a href=\"https://jasmine.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">Jasmine</a>を使った単体テスト、<a href=\"http://www.protractortest.org/#/\" rel=\"nofollow noopener\" target=\"_blank\">Protractor</a>を使ったE2Eテスト、それらを実行するnpm scriptsを作成します。<br>\n最終的には下記のように<code>npm test</code>コマンドで単体テストが実行できるようになります。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" alt=\"10_単体テスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png\"></a></p>\n\n<p>またE2Eテストは<code>npm run e2e</code>コマンドで実施できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" alt=\"20_E2Eテスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png\"></a></p>\n\n<h3>\n<span id=\"プロジェクト構成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクト構成</h3>\n\n<p>今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。<br>\n<a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\">その１. ビルド編</a>で作成したものをベースにテスト用の資産を追加します。詳細は<a href=\"https://github.com/Takumon/angular4-express4-typescritp2/tree/test\" rel=\"nofollow noopener\" target=\"_blank\">リポジトリ</a>を参照してください。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">プロジェクト構成（完成イメージ）</span></div>\n<div class=\"highlight\"><pre>.\n├── dist                              ・・・(1) コンパイル資産出力先\n│   ├── server\n│   │   ├── ...\n│   │   ...\n│   │ \n│   └── server_test                      ・・・(1-1)　コンパイルされたサーバ側テスト資産\n│       ├── app.spec.js\n│       ├── app.spec.js.map\n│       ├── test.server.conf.js\n│       ├── test.server.conf.js.map\n│       ├── test.server.js\n│       └── test.server.js.map\n├── e2e                                ・・・(2)　E2Eテスト資産\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── server\n│   ├── ...\n│   ...\n│\n├── server_test                         ・・・(3)　サーバ側テスト資産\n│   ├── app.spec.ts\n│   ├── test.server.conf.ts\n│   ├── test.server.ts\n│   └── tsconfig.server_test.json\n├── src\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts      ・・・(4)　クライアント側テスト資産\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       ├── message.service.spec.ts ・・・(4)　クライアント側テスト資産\n│   │       └── message.service.ts\n│   ...\n│\n├── package-lock.json\n├── package.json\n├── protractor.conf.js                   ・・・(5)　E2Eテスト設定ファイル\n├── proxy.conf.json\n├── karma.conf.js\n├── tsconfig.json\n├── tslint.json\n└── README.md\n</pre></div>\n</div>\n\n<h4>\n<span id=\"各資産について\" class=\"fragment\"></span><a href=\"#%E5%90%84%E8%B3%87%E7%94%A3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>各資産について</h4>\n\n<h5>\n<span id=\"1-dist\" class=\"fragment\"></span><a href=\"#1-dist\"><i class=\"fa fa-link\"></i></a>(1) dist</h5>\n\n<p>コンパイル資産出力先。</p>\n\n<h5>\n<span id=\"1-1-distserver_test\" class=\"fragment\"></span><a href=\"#1-1-distserver_test\"><i class=\"fa fa-link\"></i></a>(1-1) dist/server_test</h5>\n\n<p>コンパイルされたサーバ側テスト資産(JSファイル)の出力先。<br>\nデプロイを考慮して本資産(dist/server)とは別ディレクトリにしています。</p>\n\n<h5>\n<span id=\"2-server_test\" class=\"fragment\"></span><a href=\"#2-server_test\"><i class=\"fa fa-link\"></i></a>(2) server_test</h5>\n\n<p>サーバ側テスト資産のディレクトリ。<br>\nコンパイル用の設定ファイルとテスト用の設定ファイルもココに格納します。</p>\n\n<h5>\n<span id=\"3-e2e\" class=\"fragment\"></span><a href=\"#3-e2e\"><i class=\"fa fa-link\"></i></a>(3) e2e</h5>\n\n<p>E2Eテスト用資産のディレクトリ。</p>\n\n<h5>\n<span id=\"4-srcapp配下のspectsファイル\" class=\"fragment\"></span><a href=\"#4-srcapp%E9%85%8D%E4%B8%8B%E3%81%AEspects%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\"><i class=\"fa fa-link\"></i></a>(4) src/app配下のspec.tsファイル</h5>\n\n<p>フロント側テスト資産。<br>\nコンパイルやテストは<code>ng</code>コマンドで実施します。</p>\n\n<h5>\n<span id=\"5-protractorconfjs\" class=\"fragment\"></span><a href=\"#5-protractorconfjs\"><i class=\"fa fa-link\"></i></a>(5) protractor.conf.js</h5>\n\n<p>E2Eテスト設定ファイル。<br>\n今回はAngular CLIでプロジェクトが作成するデフォルトから少しだけ修正します。</p>\n\n<h2>\n<span id=\"構築手順\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E7%AF%89%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>構築手順</h2>\n\n<h3>\n<span id=\"1-テストに必要なライブラリをインストール\" class=\"fragment\"></span><a href=\"#1-%E3%83%86%E3%82%B9%E3%83%88%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>1. テストに必要なライブラリをインストール</h3>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install --save zone.js@0.8.12\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n</pre></div></div>\n\n<ul>\n<li>\n<a href=\"https://www.npmjs.com/package/zone.js\" rel=\"nofollow noopener\" target=\"_blank\"><code>zone.js@0.8.12</code></a>\n\n<ul>\n<li>クライアント側のテストで使用します。Angular CLIでプロジェクトを作成した時点でインストールされていますが、テスト実行時に<code>Failed: Cannot create property '__creationTrace__' on string '__zone_symbol__optimizedZoneEventTask'</code>のようなエラーが出ます。<a href=\"https://github.com/angular/zone.js/issues/832\" rel=\"nofollow noopener\" target=\"_blank\">GitHubのissues</a>によるとv0.8.12はエラーが出ないそうなので、v0.8.12を再インストールします。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://www.npmjs.com/package/supertest\" rel=\"nofollow noopener\" target=\"_blank\"><code>supertest</code></a>\n\n<ul>\n<li>サーバ側のテストで使用します。APIテストを簡単にしてくれます。</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"2-クライアント側を作成\" class=\"fragment\"></span><a href=\"#2-%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2. クライアント側を作成</h3>\n\n<p>コンポーネント(app.component.ts)とサービス(message.service.ts)に対するテストコードを作成します。<br>\nクライアント側のテスト実行には<code>ng test</code>コマンドを使うので、ビルド周りの設定は不要です。</p>\n\n<h4>\n<span id=\"srcappappcomponentspects\" class=\"fragment\"></span><a href=\"#srcappappcomponentspects\"><i class=\"fa fa-link\"></i></a>src/app/app.component.spec.ts</h4>\n\n<p>コンポーネントは画面描画についてテストします。<br>\nコンポーネントで使うサービスは、<code>TestBed</code>の<code>overrideComponent</code>メソッドを使ってモック化します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.spec.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"k\">async</span><span class=\"p\">,</span> <span class=\"nx\">ComponentFixture</span><span class=\"p\">,</span> <span class=\"nx\">TestBed</span><span class=\"p\">,</span> <span class=\"nx\">inject</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/forms'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.component'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'AppComponent'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// テスト対象のComponent</span>\n  <span class=\"kd\">let</span> <span class=\"na\">component</span><span class=\"p\">:</span> <span class=\"nx\">AppComponent</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// テスト対象のFixture</span>\n  <span class=\"kd\">let</span> <span class=\"na\">fixture</span><span class=\"p\">:</span> <span class=\"nx\">ComponentFixture</span><span class=\"o\">&lt;</span><span class=\"nx\">AppComponent</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// MessageServiceのモック</span>\n  <span class=\"kd\">class</span> <span class=\"nx\">MessageServiceMock</span> <span class=\"p\">{</span>\n    <span class=\"nx\">getAll</span><span class=\"p\">():</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span>  <span class=\"p\">{</span> <span class=\"na\">messages</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n      <span class=\"p\">]};</span>\n\n      <span class=\"k\">return</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">([</span><span class=\"nx\">response</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n      <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">],</span>\n      <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"nx\">AppComponent</span>\n      <span class=\"p\">],</span>\n    <span class=\"p\">})</span>\n<span class=\"err\">　　　　　　　　　</span><span class=\"c1\">// MessageServiceのモックを設定</span>\n    <span class=\"p\">.</span><span class=\"nx\">overrideComponent</span><span class=\"p\">(</span><span class=\"nx\">AppComponent</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">set</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span> <span class=\"na\">provide</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">,</span> <span class=\"na\">useClass</span><span class=\"p\">:</span> <span class=\"nx\">MessageServiceMock</span> <span class=\"p\">},</span>\n        <span class=\"p\">]</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n    <span class=\"p\">.</span><span class=\"nx\">compileComponents</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">fixture</span> <span class=\"o\">=</span> <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">createComponent</span><span class=\"p\">(</span><span class=\"nx\">AppComponent</span><span class=\"p\">);</span>\n    <span class=\"nx\">component</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">componentInstance</span><span class=\"p\">;</span>\n    <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">detectChanges</span><span class=\"p\">();</span>\n  <span class=\"p\">}));</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'オブジェクトが生成されるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">debugElement</span><span class=\"p\">.</span><span class=\"nx\">componentInstance</span><span class=\"p\">;</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">).</span><span class=\"nx\">toBeTruthy</span><span class=\"p\">();</span>\n  <span class=\"p\">}));</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージを３件保持しているか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">component</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">([</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n    <span class=\"p\">]);</span>\n  <span class=\"p\">}));</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'画面にメッセージが３件表示されているか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">el</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">debugElement</span><span class=\"p\">.</span><span class=\"nx\">nativeElement</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ1'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ2'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ3'</span><span class=\"p\">);</span>\n  <span class=\"p\">}));</span>\n<span class=\"p\">});</span>\n\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappmessagemessageservicespects一部抜粋\" class=\"fragment\"></span><a href=\"#srcappmessagemessageservicespects%E4%B8%80%E9%83%A8%E6%8A%9C%E7%B2%8B\"><i class=\"fa fa-link\"></i></a>src/app/message/message.service.spec.ts(一部抜粋)</h4>\n\n<p>サービスのテストです。<br>\nサーバとのやりとり(HTTP通信)については<code>MockBackend</code>を使ってモック化しています。<br>\nなお<code>Error</code>は別途モックを作らなければなりません。<br>\n全て載せると冗長なので<code>register</code>メソッドのテストは割愛しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.service.spec.ts(一部抜粋)</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">TestBed</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">,</span> <span class=\"nx\">inject</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">HttpModule</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">,</span> <span class=\"nx\">Http</span><span class=\"p\">,</span> <span class=\"nx\">Response</span><span class=\"p\">,</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MockConnection</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">RequestMethod</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message.service'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'MessageService'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　</span><span class=\"c1\">// HTTP通信エラー用のモック</span>\n  <span class=\"kd\">class</span> <span class=\"nx\">MockError</span> <span class=\"kd\">extends</span> <span class=\"nx\">Response</span> <span class=\"kr\">implements</span> <span class=\"nb\">Error</span> <span class=\"p\">{</span>\n    <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">;</span>\n    <span class=\"nl\">message</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n<span class=\"err\">　　　　</span><span class=\"c1\">// HTTP通信はMockBackendでモック化</span>\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n      <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">HttpModule</span><span class=\"p\">],</span>\n      <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MessageService</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"na\">provide</span><span class=\"p\">:</span> <span class=\"nx\">Http</span><span class=\"p\">,</span>\n        <span class=\"na\">useFactory</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nx\">backend</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nx\">Http</span><span class=\"p\">(</span><span class=\"nx\">backend</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">),</span>\n        <span class=\"na\">deps</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">]</span>\n      <span class=\"p\">},</span> <span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">]</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'オブジェクトが生成されるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">service</span><span class=\"p\">).</span><span class=\"nx\">toBeTruthy</span><span class=\"p\">();</span>\n  <span class=\"p\">})));</span>\n\n\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'getAll'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージが取得できるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// HTTP通信のモックで返す具体的な値の設定</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">body</span> <span class=\"o\">=</span>  <span class=\"p\">{</span> <span class=\"na\">messages</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n        <span class=\"p\">]};</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">ops</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">({</span>\n          <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n          <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">mockRespond</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">Response</span><span class=\"p\">(</span><span class=\"nx\">ops</span><span class=\"p\">));</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストの内容を検証</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">RequestMethod</span><span class=\"p\">.</span><span class=\"nx\">Get</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// レスポンスの内容を検証</span>\n      <span class=\"nx\">service</span><span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">().</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">([</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n        <span class=\"p\">]);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">})));</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'異常時にエラーハンドリングされるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// HTTP通信のモックで返す具体的な値の設定</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">body</span> <span class=\"o\">=</span>  <span class=\"p\">{</span>\n          <span class=\"na\">title</span> <span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"s1\">'エラー'</span>\n        <span class=\"p\">};</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">ops</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">({</span>\n          <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span>\n          <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">mockError</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">MockError</span><span class=\"p\">(</span><span class=\"nx\">ops</span><span class=\"p\">));</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストの内容を検証</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">RequestMethod</span><span class=\"p\">.</span><span class=\"nx\">Get</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// レスポンスの内容を検証</span>\n      <span class=\"nx\">service</span><span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">().</span><span class=\"nx\">subscribe</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">fail</span><span class=\"p\">(</span><span class=\"s1\">'エラーハンドリングされなかった。'</span><span class=\"p\">);</span>\n      <span class=\"p\">},</span> <span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span> <span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"s1\">'エラー'</span>\n        <span class=\"p\">});</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">})));</span>\n\n  <span class=\"p\">});</span>\n\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"3-サーバ側を作成\" class=\"fragment\"></span><a href=\"#3-%E3%82%B5%E3%83%BC%E3%83%90%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>3. サーバ側を作成</h3>\n\n<p>プロジェクトの直下にserver_testディレクトリを作ってテストコードを書いていきます。<br>\nどちらかというと結合テストよりで、１つ１つの資産に対してではなくapp.tsに対して、実際にDBに接続しながらAPIテストを行います。規模が小さい場合はコレで充分だと思います。<br>\nまたExpressのテストフレームワークは<a href=\"https://mochajs.org/\" rel=\"nofollow noopener\" target=\"_blank\">Mocha</a>が一般的ですが、クライアント側と統一したいので、今回は<a href=\"https://jasmine.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">Jasmine</a>を使うことにします。</p>\n\n<h4>\n<span id=\"server_testappspects一部抜粋\" class=\"fragment\"></span><a href=\"#server_testappspects%E4%B8%80%E9%83%A8%E6%8A%9C%E7%B2%8B\"><i class=\"fa fa-link\"></i></a>server_test/app.spec.ts(一部抜粋)</h4>\n\n<p>ポイントとしてはテスト実行前にMessageモデルを使ってDBを初期化していることです。<br>\nそれによりテストデータがテストメソッドごとに想定する形になるようにしています。<br>\n異常時のテストは、Messsageのfindメソッドでエラーが発生するようにJasmineの<code>spyOn</code>メソッドで処理を置き換えます。<br>\n全て載せると冗長なのでメッセージ登録のテストは割愛しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.spec.ts(一部抜粋)</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">supertest</span> <span class=\"k\">from</span> <span class=\"s1\">'supertest'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"nx\">app</span> <span class=\"k\">from</span> <span class=\"s1\">'../server/app'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../server/models/message'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">request</span> <span class=\"o\">=</span> <span class=\"nx\">supertest</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">endpoint</span> <span class=\"o\">=</span> <span class=\"s1\">'/api/messages'</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">messageAscending</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">,</span> <span class=\"nx\">m2</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&gt;</span> <span class=\"nx\">m2</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&lt;</span> <span class=\"nx\">m2</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"c1\">// テスト前にDBのmessagesを初期化する</span>\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">({},</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n  <span class=\"p\">});</span>\n\n\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'Get'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'レスポンスがjson形式でステータスコードが200か'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n      <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// 検証</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'application/json'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">);</span>\n        <span class=\"p\">}).</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージ一覧が取得できるか'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n      <span class=\"kd\">const</span> <span class=\"nx\">testData</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ１'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ２'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ３'</span> <span class=\"p\">},</span>\n      <span class=\"p\">];</span>\n<span class=\"err\">　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// 事前準備（テストデータを作成）</span>\n      <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">testData</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">erro</span> <span class=\"p\">,</span> <span class=\"nx\">doc</span> <span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n        <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n          <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// 検証</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">sortedMessages</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">sort</span><span class=\"p\">(</span><span class=\"nx\">messageAscending</span><span class=\"p\">);</span>\n\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ１'</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ２'</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ３'</span><span class=\"p\">);</span>\n          <span class=\"p\">})</span>\n          <span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">});</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'異常時にエラーハンドリングされるか'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n      <span class=\"c1\">// エラーとなるようにMessageのfindメソッドを置き換える</span>\n      <span class=\"nx\">spyOn</span><span class=\"p\">(</span><span class=\"nx\">Message</span><span class=\"p\">,</span> <span class=\"s1\">'find'</span><span class=\"p\">).</span><span class=\"nx\">and</span><span class=\"p\">.</span><span class=\"nx\">callFake</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">callback</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">'エラー'</span><span class=\"p\">),</span> <span class=\"kc\">null</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n<span class=\"err\">　　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n      <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n          <span class=\"c1\">// 検証</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'application/json'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">);</span>\n\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'エラー'</span><span class=\"p\">);</span>\n        <span class=\"p\">})</span>\n        <span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"4-単体テスト周りの環境を整備\" class=\"fragment\"></span><a href=\"#4-%E5%8D%98%E4%BD%93%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>4. 単体テスト周りの環境を整備</h3>\n\n<p>E2Eの説明に入る前に、いったん単体テスト周りの環境を整備します。</p>\n\n<h4>\n<span id=\"packagejson\" class=\"fragment\"></span><a href=\"#packagejson\"><i class=\"fa fa-link\"></i></a>package.json</h4>\n\n<p><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792#pakcagejson\" id=\"reference-fc6741a6eda3b7ffd9f1\">前回</a>作成したものをベースに単体テストのスクリプトを追加してください。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\"> </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-p test:*\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"test:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng test\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"test:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s build:server_test -p watch:server_test  boot:server_test\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"watch:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -w -p ./server_test/tsconfig.server_test.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"boot:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"nodemon ./dist/server_test/test.server.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>test</strong>でクライアント側とサーバ側のテストを実行します。</li>\n<li>\n<strong>test:client</strong>でクライアント側のテストを実行します。Angular CLIのngコマンドにお任せしています。</li>\n<li>\n<strong>watch:server_test</strong>でサーバ側テスト資産をウォッチして変更があればコンパイルするようにします。</li>\n<li>\n<strong>boot:server_test</strong>でコンパイルしたサーバ側テスト資産を起動します。nodeではなくnodemonを使うことで資産に更新があった場合でも即座に反映するようにしています。</li>\n<li>\n<strong>build:server_test</strong>でサーバ側テスト資産をコンパイルします。コンパイル時の設定は下で触れるserver_test/test.server.conf.tsを使います。</li>\n</ul>\n\n<h4>\n<span id=\"server_testtestserverts\" class=\"fragment\"></span><a href=\"#server_testtestserverts\"><i class=\"fa fa-link\"></i></a>server_test/test.server.ts</h4>\n\n<p>サーバ側テストの起動処理を書きます。<br>\nレポーターには<a href=\"https://www.npmjs.com/package/jasmine-spec-reporter\" rel=\"nofollow noopener\" target=\"_blank\">jasmine-spec-reporter</a>を使いましょう。このライブラリはAngular CLIで作ったプロジェクトにはデフォルトでインストール済みです。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">test.server.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">SpecReporter</span><span class=\"p\">,</span> <span class=\"nx\">DisplayProcessor</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'jasmine-spec-reporter'</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">Jasmine</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'jasmine'</span><span class=\"p\">);</span>\n<span class=\"k\">import</span> <span class=\"nx\">SuiteInfo</span> <span class=\"o\">=</span> <span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">SuiteInfo</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">config</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./test.server.conf'</span><span class=\"p\">;</span>\n\n\n<span class=\"kd\">class</span> <span class=\"nx\">CustomProcessor</span> <span class=\"kd\">extends</span> <span class=\"nx\">DisplayProcessor</span> <span class=\"p\">{</span>\n    <span class=\"kr\">public</span> <span class=\"nx\">displayJasmineStarted</span><span class=\"p\">(</span><span class=\"nx\">info</span><span class=\"p\">:</span> <span class=\"nx\">SuiteInfo</span><span class=\"p\">,</span> <span class=\"nx\">log</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">string</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s2\">`TypeScript </span><span class=\"p\">${</span><span class=\"nx\">log</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">runner</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Jasmine</span><span class=\"p\">();</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">loadConfig</span><span class=\"p\">(</span><span class=\"nx\">config</span><span class=\"p\">);</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">addReporter</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">SpecReporter</span><span class=\"p\">({</span>\n    <span class=\"na\">customProcessors</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">CustomProcessor</span><span class=\"p\">],</span>\n<span class=\"p\">}));</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">onComplete</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">passed</span><span class=\"p\">){</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nx\">passed</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Success'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"s1\">'Failed'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">execute</span><span class=\"p\">();</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"server_testtestserverconfts\" class=\"fragment\"></span><a href=\"#server_testtestserverconfts\"><i class=\"fa fa-link\"></i></a>server_test/test.server.conf.ts</h4>\n\n<p>サーバ側テスト起動時の設定です。<br>\n注意点として<code>spec_files</code>に指定する相対パスはプロジェクト直下が起点になります。そのため<code>__dirname</code>を使って指定してください。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">test.server.conf.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">spec_dir</span><span class=\"p\">:</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span>\n  <span class=\"na\">spec_files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">__dirname</span><span class=\"p\">}</span><span class=\"s2\">/*spec.js`</span>\n  <span class=\"p\">],</span>\n  <span class=\"s1\">'stopSpecOnExpectationFailure'</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"s1\">'random'</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n<span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"server_testtsconfigserver_testjson\" class=\"fragment\"></span><a href=\"#server_testtsconfigserver_testjson\"><i class=\"fa fa-link\"></i></a>server_test/tsconfig.server_test.json</h4>\n\n<p>サーバ側テスト資産をコンパイルする時の設定ファイルです。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">tsconfig.server_test.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"extends\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../tsconfig.json\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"preserveConstEnums\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"outDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"mapRoot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"module\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"commonjs\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"include\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"s2\">\"**/*.spec.ts\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"./test.server.ts\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"./test.server.conf.ts\"</span><span class=\"w\">\n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<p><code>outDir</code>が<code>../dist/server_test</code>ではなく<code>../dist</code>であることに注意してください。<br>\nテスト資産は<code>server</code>ディレクトリ配下の資産に依存しているため、<code>../dist/server_test</code>を指定するとコンパイルした時に下記のように出力されてしまいます。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">（悪い例）outDirに\"../dist/server_test\"を指定したときのコンパイル結果</span></div>\n<div class=\"highlight\"><pre>.\n└── dist\n    └── server_test\n        ├── server\n        └── server_test \n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">（良い例）outDirに\"../dist\"を指定したときのコンパイル結果</span></div>\n<div class=\"highlight\"><pre>.\n└── dist\n    ├── server\n    └── server_test \n</pre></div>\n</div>\n\n<h3>\n<span id=\"5-e2eテストを作成\" class=\"fragment\"></span><a href=\"#5-e2e%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>5. E2Eテストを作成</h3>\n\n<p>単体テストを作成したので次はE2Eテストを作りましょう。<br>\nAngular CLIで作成したプロジェクトにデフォルトで用意されている<a href=\"http://www.protractortest.org/#/\" rel=\"nofollow noopener\" target=\"_blank\">Protractor</a>を使ったテストコードを作成します。</p>\n\n<h4>\n<span id=\"e2eappe2e-spects\" class=\"fragment\"></span><a href=\"#e2eappe2e-spects\"><i class=\"fa fa-link\"></i></a>e2e/app.e2e-spec.ts</h4>\n\n<p>基本的にelementメソッドで要素を取得して、sendKeysメソッドやclickメソッドで操作を行います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.e2e-spec.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.po'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">browser</span><span class=\"p\">,</span> <span class=\"nx\">element</span><span class=\"p\">,</span> <span class=\"nx\">by</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'protractor'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'E2Eテスト'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"na\">page</span><span class=\"p\">:</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'画面タイトルが正しいか'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">navigateTo</span><span class=\"p\">();</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">getParagraphText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'メッセージ一覧'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージが登録できるか'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">navigateTo</span><span class=\"p\">();</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">newMessage</span> <span class=\"o\">=</span> <span class=\"s2\">`サンプルメッセージ </span><span class=\"p\">${</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">toString</span><span class=\"p\">()}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n    <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessage'</span><span class=\"p\">)).</span><span class=\"nx\">sendKeys</span><span class=\"p\">(</span><span class=\"nx\">newMessage</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessageButton'</span><span class=\"p\">)).</span><span class=\"nx\">click</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// 登録後メッセージ入力項目が初期化されているか</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessage'</span><span class=\"p\">)).</span><span class=\"nx\">getText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 登録後一覧に登録したメッセージが含まれているか</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'messageList'</span><span class=\"p\">)).</span><span class=\"nx\">all</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">tagName</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">));</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">last</span><span class=\"p\">().</span><span class=\"nx\">getText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">newMessage</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"6-e2eテスト周りの環境を整備\" class=\"fragment\"></span><a href=\"#6-e2e%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>6. E2Eテスト周りの環境を整備</h3>\n\n<h4>\n<span id=\"packagejson-1\" class=\"fragment\"></span><a href=\"#packagejson-1\"><i class=\"fa fa-link\"></i></a>package.json</h4>\n\n<p>Angular CILプロジェクトデフォルトの\"e2e\"コマンドは削除して、スクリプトに下記を追加してください。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\"> </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"e2e\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s  webdriver:update -p webdriver:start protractor\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"webdriver:update\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"webdriver-manager update\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"webdriver:start\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"webdriver-manager start\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"protractor\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"protractor protractor.conf.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>e2e</strong>でE2Eテストを実行します。Angular CILプロジェクトデフォルトの<code>e2e</code>コマンド(= <code>ng e2e</code>コマンド)は使いません。<code>ng　e2e</code>はクライアント資産だけコンパイルして起動する処理が入っているからです。今回はビルドしたアプリ(クライアントとサーバが１つにまとまったアプリ)に対してテストします。</li>\n<li>\n<strong>webdriver:update</strong>でE2Eテストに必要なWebDriverをインストールまたは更新します。</li>\n<li>\n<strong>webdriver:start</strong>でWebDriverを起動します。Protractorのテストは事前にWebDriverを起動しておく必要があります。</li>\n<li>\n<strong>protractor</strong>でE2Eテストを実行します。起動時の設定は下で触れるprotractor.conf.jsを使います。</li>\n</ul>\n\n<h4>\n<span id=\"protractorconfjs\" class=\"fragment\"></span><a href=\"#protractorconfjs\"><i class=\"fa fa-link\"></i></a>protractor.conf.js</h4>\n\n<p>デフォルトでbaseUrlのポートは4200になっていますが、今回はビルドしたアプリに対してテストするので3000を指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">protractor.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"p\">...</span>\n  <span class=\"na\">baseUrl</span><span class=\"p\">:</span> <span class=\"s1\">'http://localhost:3000/'</span><span class=\"p\">,</span>\n  <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"7-試してみる\" class=\"fragment\"></span><a href=\"#7-%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>7. 試してみる</h3>\n\n<h4>\n<span id=\"単体テストを実行してみる\" class=\"fragment\"></span><a href=\"#%E5%8D%98%E4%BD%93%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>単体テストを実行してみる</h4>\n\n<ul>\n<li>\n<p>MongoDBをローカルで立ち上げる</p>\n\n<ul>\n<li>具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。</li>\n</ul>\n</li>\n<li><p>プロジェクト直下で<code>npm test</code>コマンドを実行するとテストが実行されます。クライアント側のテスト結果はブラウザに、サーバ側はターミナル（またはコンソール）に表示されます。資産はウォッチしているので、テストコードを修正すると、コンパイルされ再度テストが実行されるでしょう。</p></li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" alt=\"10_単体テスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png\"></a></p>\n\n<h4>\n<span id=\"e2eテストを実行してみる\" class=\"fragment\"></span><a href=\"#e2e%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>E2Eテストを実行してみる</h4>\n\n<ul>\n<li>\n<p>MongoDBをローカルで立ち上げる</p>\n\n<ul>\n<li>これも単体テストと同じでDBを事前に起動しておいてください。</li>\n</ul>\n</li>\n<li>\n<p>ビルドしたアプリを起動する</p>\n\n<ul>\n<li>プロジェクト直下で<code>npm run buildRun</code>を実行し、ビルド資産を起動します。</li>\n</ul>\n</li>\n<li>\n<p><code>npm run e2e</code>する</p>\n\n<ul>\n<li>別ターミナル（またはコマンドプロンプト）を開き、プロジェクト直下で<code>npm run e2e</code>コマンドを実行します。するとブラウザが立ち上がりテストが実行されます。\n<a href=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" alt=\"20_E2Eテスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png\"></a>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h2>\n\n<p>今回はMEANスタックアプリの単体テスト、E2Eテストについて紹介しました。<br>\nこれでビルドとテストができるようになったので、次回「その3. Dockerデプロイ編」では、Dockerでアプリを起動する方法とDockerでアプリのイメージを作ってデプロイする方法ついて紹介します。</p>\n","body":"## やりたいこと\n* Angular CLI使って、MEANスタック(**M**ongoDB + **E**xpress + **A**ngular + **N**odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。\n* フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。\n* Dockerを使ってアプリを簡単に配布したい。\n\nこれらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。\n\n* [その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)\n* その２. テスト編　⇦　今回はココ\n* その３. Dockerビルド編\n\n\n## その２. テスト編\n[その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)では、Angular CLIで作成したプロジェクトをベースに、\nMongoDBに登録しているメッセージを画面に一覧で表示するアプリを作成しました。\n今回は、クライアント側とサーバ側の[Jasmine](https://jasmine.github.io/)を使った単体テスト、[Protractor](http://www.protractortest.org/#/)を使ったE2Eテスト、それらを実行するnpm scriptsを作成します。\n最終的には下記のように`npm test`コマンドで単体テストが実行できるようになります。\n\n![10_単体テスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png)\n\nまたE2Eテストは`npm run e2e`コマンドで実施できるようになります。\n![20_E2Eテスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png)\n\n\n### プロジェクト構成\n今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。\n[その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)で作成したものをベースにテスト用の資産を追加します。詳細は[リポジトリ](https://github.com/Takumon/angular4-express4-typescritp2/tree/test)を参照してください。\n\n```:プロジェクト構成（完成イメージ）\n.\n├── dist                              ・・・(1) コンパイル資産出力先\n│   ├── server\n│   │   ├── ...\n│   │   ...\n│   │ \n│   └── server_test                      ・・・\u001c(1-1)　コンパイルされたサーバ側テスト資産\n│       ├── app.spec.js\n│       ├── app.spec.js.map\n│       ├── test.server.conf.js\n│       ├── test.server.conf.js.map\n│       ├── test.server.js\n│       └── test.server.js.map\n├── e2e                                ・・・\u001c(2)　E2Eテスト資産\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── server\n│   ├── ...\n│   ...\n│\n├── server_test                         ・・・\u001c(3)　サーバ側テスト資産\n│   ├── app.spec.ts\n│   ├── test.server.conf.ts\n│   ├── test.server.ts\n│   └── tsconfig.server_test.json\n├── src\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts      ・・・\u001c(4)　クライアント側テスト資産\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       ├── message.service.spec.ts ・・・\u001c(4)　クライアント側テスト資産\n│   │       └── message.service.ts\n│   ...\n│\n├── package-lock.json\n├── package.json\n├── protractor.conf.js                   ・・・\u001c(5)　E2Eテスト設定ファイル\n├── proxy.conf.json\n├── karma.conf.js\n├── tsconfig.json\n├── tslint.json\n└── README.md\n```\n#### 各資産について\n##### (1) dist\nコンパイル資産出力先。\n\n##### (1-1) dist/server_test\nコンパイルされたサーバ側テスト資産(JSファイル)の出力先。\nデプロイを考慮して本資産(dist/server)とは別ディレクトリにしています。\n\n##### (2) server_test\nサーバ側テスト資産のディレクトリ。\nコンパイル用の設定ファイルとテスト用の設定ファイルもココに格納します。\n\n##### (3) e2e\nE2Eテスト用資産のディレクトリ。\n\n##### (4) src/app配下のspec.tsファイル\nフロント側テスト資産。\nコンパイルやテストは`ng`コマンドで実施します。\n\n##### (5) protractor.conf.js\nE2Eテスト設定ファイル。\n今回はAngular CLIでプロジェクトが作成するデフォルトから少しだけ修正します。\n\n\n\n## 構築手順\n\n### 1. テストに必要なライブラリをインストール\n\n```\n$ npm install --save zone.js@0.8.12\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n```\n\n* [`zone.js@0.8.12`](https://www.npmjs.com/package/zone.js)\n    * クライアント側のテストで使用します。Angular CLIでプロジェクトを作成した時点でインストールされていますが、テスト実行時に`Failed: Cannot create property '__creationTrace__' on string '__zone_symbol__optimizedZoneEventTask'`のようなエラーが出ます。[GitHubのissues](https://github.com/angular/zone.js/issues/832)によるとv0.8.12はエラーが出ないそうなので、v0.8.12を再インストールします。\n* [`supertest`](https://www.npmjs.com/package/supertest)\n    * サーバ側のテストで使用します。APIテストを簡単にしてくれます。\n\n### 2. クライアント側を作成\nコンポーネント(app.component.ts)とサービス(message.service.ts)に対するテストコードを作成します。\nクライアント側のテスト実行には`ng test`コマンドを使うので、ビルド周りの設定は不要です。\n\n#### src/app/app.component.spec.ts\nコンポーネントは画面描画についてテストします。\nコンポーネントで使うサービスは、`TestBed`の`overrideComponent`メソッドを使ってモック化します。\n\n\n```js:app.component.spec.ts\nimport { async, ComponentFixture, TestBed, inject } from '@angular/core/testing';\nimport { FormsModule } from '@angular/forms';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/Rx';\n\nimport { AppComponent } from './app.component';\nimport { MessageService } from './message/message.service';\n\ndescribe('AppComponent', () => {\n  // テスト対象のComponent\n  let component: AppComponent;\n\n  // テスト対象のFixture\n  let fixture: ComponentFixture<AppComponent>;\n\n  // MessageServiceのモック\n  class MessageServiceMock {\n    getAll(): Observable<any> {\n      const response =  { messages : [\n        { message : 'テスト用メッセージ1' },\n        { message : 'テスト用メッセージ2' },\n        { message : 'テスト用メッセージ3' }\n      ]};\n\n      return Observable.from([response]);\n    }\n  }\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [ FormsModule ],\n      declarations: [\n        AppComponent\n      ],\n    })\n　　　　　　　　　// MessageServiceのモックを設定\n    .overrideComponent(AppComponent, {\n      set: {\n        providers: [\n          { provide: MessageService, useClass: MessageServiceMock },\n        ]\n      }\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(AppComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  }));\n\n  it('オブジェクトが生成されるか', async(() => {\n    const app = fixture.debugElement.componentInstance;\n    expect(app).toBeTruthy();\n  }));\n\n\n  it('メッセージを３件保持しているか', async(() => {\n    expect(component.messages).toEqual([\n        { message : 'テスト用メッセージ1' },\n        { message : 'テスト用メッセージ2' },\n        { message : 'テスト用メッセージ3' }\n    ]);\n  }));\n\n\n  it('画面にメッセージが３件表示されているか', async(() => {\n\n    const el = fixture.debugElement.nativeElement;\n\n    expect(el.querySelectorAll('li').length).toEqual(3);\n    expect(el.querySelectorAll('li')[0].textContent).toContain('テスト用メッセージ1');\n    expect(el.querySelectorAll('li')[1].textContent).toContain('テスト用メッセージ2');\n    expect(el.querySelectorAll('li')[2].textContent).toContain('テスト用メッセージ3');\n  }));\n});\n\n```\n\n\n#### src/app/message/message.service.spec.ts(一部抜粋)\nサービスのテストです。\nサーバとのやりとり(HTTP通信)については`MockBackend`を使ってモック化しています。\nなお`Error`は別途モックを作らなければなりません。\n全て載せると冗長なので`register`メソッドのテストは割愛しています。\n\n```js:message.service.spec.ts(一部抜粋)\nimport { TestBed, async, inject } from '@angular/core/testing';\nimport {HttpModule, BaseRequestOptions, Http, Response, ResponseOptions} from '@angular/http';\nimport {MockBackend, MockConnection} from '@angular/http/testing';\nimport { RequestMethod } from '@angular/http';\n\nimport { MessageService } from './message.service';\n\n\ndescribe('MessageService', () => {\n　　　　// HTTP通信エラー用のモック\n  class MockError extends Response implements Error {\n    name: any;\n    message: any;\n  }\n\n　　　　// HTTP通信はMockBackendでモック化\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpModule],\n      providers: [MessageService, {\n        provide: Http,\n        useFactory: (backend, options) => new Http(backend, options),\n        deps: [MockBackend, BaseRequestOptions]\n      }, MockBackend, BaseRequestOptions]\n    });\n  });\n\n  it('オブジェクトが生成されるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n    expect(service).toBeTruthy();\n  })));\n\n\n  describe('getAll', () => {\n\n    it('メッセージが取得できるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n　　　　　　　　　　　　// HTTP通信のモックで返す具体的な値の設定\n      backend.connections.subscribe((conn: MockConnection) => {\n        const body =  { messages : [\n          { message : 'テスト用メッセージ1' },\n          { message : 'テスト用メッセージ2' },\n          { message : 'テスト用メッセージ3' }\n        ]};\n\n        const ops = new ResponseOptions({\n          status: 200,\n          body: JSON.stringify(body)\n        });\n\n        conn.mockRespond(new Response(ops));\n      });\n\n　　　　　　　　　　　　// リクエストの内容を検証\n      backend.connections.subscribe((conn: MockConnection) => {\n        expect(conn.request.url).toEqual('/api/messages');\n        expect(conn.request.method).toEqual(RequestMethod.Get);\n      });\n\n　　　　　　　　　　　　// レスポンスの内容を検証\n      service.getAll().subscribe((res) => {\n        expect(res.messages.length).toEqual(3);\n        expect(res.messages).toEqual([\n          { message : 'テスト用メッセージ1' },\n          { message : 'テスト用メッセージ2' },\n          { message : 'テスト用メッセージ3' }\n        ]);\n      });\n    })));\n\n\n    it('異常時にエラーハンドリングされるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n　　　　　　　　　　　　// HTTP通信のモックで返す具体的な値の設定\n      backend.connections.subscribe((conn: MockConnection) => {\n        const body =  {\n          title : 'エラーが発生しました。',\n          error: 'エラー'\n        };\n\n        const ops = new ResponseOptions({\n          status: 500,\n          body: JSON.stringify(body)\n        });\n\n        conn.mockError(new MockError(ops));\n      });\n\n　　　　　　　　　　　　// リクエストの内容を検証\n      backend.connections.subscribe((conn: MockConnection) => {\n        expect(conn.request.url).toEqual('/api/messages');\n        expect(conn.request.method).toEqual(RequestMethod.Get);\n      });\n\n　　　　　　　　　　　　// レスポンスの内容を検証\n      service.getAll().subscribe(() => {\n        fail('エラーハンドリングされなかった。');\n      }, res => {\n        expect(res).toEqual({\n          title : 'エラーが発生しました。',\n          error: 'エラー'\n        });\n      });\n    })));\n\n  });\n\n\n});\n```\n\n\n\n### 3. サーバ側を作成\nプロジェクトの直下にserver_testディレクトリを作ってテストコードを書いていきます。\nどちらかというと結合テストよりで、１つ１つの資産に対してではなくapp.tsに対して、実際にDBに接続しながらAPIテストを行います。規模が小さい場合はコレで充分だと思います。\nまたExpressのテストフレームワークは[Mocha](https://mochajs.org/)が一般的ですが、クライアント側と統一したいので、今回は[Jasmine](https://jasmine.github.io/)を使うことにします。\n\n#### server_test/app.spec.ts(一部抜粋)\nポイントとしてはテスト実行前にMessageモデルを使ってDBを初期化していることです。\nそれによりテストデータがテストメソッドごとに想定する形になるようにしています。\n異常時のテストは、Messsageのfindメソッドでエラーが発生するようにJasmineの`spyOn`メソッドで処理を置き換えます。\n全て載せると冗長なのでメッセージ登録のテストは割愛しています。\n\n```js:app.spec.ts(一部抜粋)\nimport * as supertest from 'supertest';\n\nimport app from '../server/app';\nimport { Message } from '../server/models/message';\n\n\ndescribe('/api/messages', () => {\n  const request = supertest(app);\n  const endpoint = '/api/messages';\n\n  const messageAscending = (m1, m2) => {\n    if (m1.message > m2.message) {\n      return 1;\n    }\n\n    if (m1.message < m2.message) {\n      return -1;\n    }\n\n    return 0;\n  };\n\n  // テスト前にDBのmessagesを初期化する\n  beforeEach(() => {\n    Message.remove({}, () => {});\n  });\n\n\n  describe('Get', () => {\n\n    it('レスポンスがjson形式でステータスコードが200か', (done) => {\n\n　　　　　　　　　　　　　// リクエストを投げる\n      request.get(endpoint)\n        .expect((res) => {\n\n　　　　　　　　　　　　　　　　　　　　// 検証\n          expect(res.type).toEqual('application/json');\n          expect(res.statusCode).toEqual(200);\n        }).end(done);\n    });\n\n\n    it('メッセージ一覧が取得できるか', (done) => {\n\n      const testData = [\n        { message: 'テスト用メッセージ１' },\n        { message: 'テスト用メッセージ２' },\n        { message: 'テスト用メッセージ３' },\n      ];\n　　　　　　　　　　　　\n　　　　　　　　　　　　// 事前準備（テストデータを作成）\n      Message.create(testData, (erro , doc ) => {\n\n　　　　　　　　　　　　　　　　　// リクエストを投げる\n        request.get(endpoint)\n          .expect((res) => {\n　　　　　　　　　　　　　　　　　　　　　　　　\n　　　　　　　　　　　　　　　　　　　　　　　　// 検証\n            const sortedMessages = res.body.messages.sort(messageAscending);\n\n            expect(sortedMessages.length).toEqual(3);\n            expect(sortedMessages[0].message).toEqual('テスト用メッセージ１');\n            expect(sortedMessages[1].message).toEqual('テスト用メッセージ２');\n            expect(sortedMessages[2].message).toEqual('テスト用メッセージ３');\n          })\n          .end(done);\n      });\n    });\n\n\n    it('異常時にエラーハンドリングされるか', (done) => {\n\n      // エラーとなるようにMessageのfindメソッドを置き換える\n      spyOn(Message, 'find').and.callFake(function(callback) {\n        callback(new Error('エラー'), null);\n      });\n　　　　　　　　　　　　　\n　　　　　　　　　　　　// リクエストを投げる\n      request.get(endpoint)\n        .expect((res) => {\n\n          // 検証\n          expect(res.type).toEqual('application/json');\n          expect(res.statusCode).toEqual(500);\n\n          expect(res.body.title).toEqual('エラーが発生しました。');\n          expect(res.body.error).toEqual('エラー');\n        })\n        .end(done);\n    });\n\n  });\n});\n```\n\n\n\n### 4. 単体テスト周りの環境を整備\nE2Eの説明に入る前に、いったん単体テスト周りの環境を整備します。\n\n\n#### package.json\n[前回](http://qiita.com/Takumon/items/572438809384e2e11792#pakcagejson)作成したものをベースに単体テストのスクリプトを追加してください。\n\n```json:package.json\n \"scripts\": {\n    ...\n    \"test\": \"run-p test:*\",\n    \"test:client\": \"ng test\",\n    \"test:server\": \"npm-run-all -s build:server_test -p watch:server_test  boot:server_test\",\n    \"watch:server_test\": \"tsc -w -p ./server_test/tsconfig.server_test.json\",\n    \"boot:server_test\": \"nodemon ./dist/server_test/test.server.js\",\n    \"build:server_test\": \"tsc -p ./server/tsconfig.server.json\",\n    ...\n  },\n```\n\n\n* **test**でクライアント側とサーバ側のテストを実行します。\n* **test:client**でクライアント側のテストを実行します。Angular CLIのngコマンドにお任せしています。\n* **watch:server_test**でサーバ側テスト資産をウォッチして変更があればコンパイルするようにします。\n* **boot:server_test**でコンパイルしたサーバ側テスト資産を起動します。nodeではなくnodemonを使うことで資産に更新があった場合でも即座に反映するようにしています。\n* **build:server_test**でサーバ側テスト資産をコンパイルします。コンパイル時の設定は下で触れるserver_test/test.server.conf.tsを使います。\n\n#### server_test/test.server.ts\nサーバ側テストの起動処理を書きます。\nレポーターには[jasmine-spec-reporter](https://www.npmjs.com/package/jasmine-spec-reporter)を使いましょう。このライブラリはAngular CLIで作ったプロジェクトにはデフォルトでインストール済みです。\n\n```js:test.server.ts\nimport { SpecReporter, DisplayProcessor } from 'jasmine-spec-reporter';\nconst Jasmine = require('jasmine');\nimport SuiteInfo = jasmine.SuiteInfo;\n\nimport { config } from './test.server.conf';\n\n\nclass CustomProcessor extends DisplayProcessor {\n    public displayJasmineStarted(info: SuiteInfo, log: string): string {\n        return `TypeScript ${log}`;\n    }\n}\n\nconst runner = new Jasmine();\nrunner.loadConfig(config);\nrunner.addReporter(new SpecReporter({\n    customProcessors: [CustomProcessor],\n}));\nrunner.onComplete(function(passed){\n  if ( passed ) {\n    console.log('Success');\n  } else {\n    console.error('Failed');\n  }\n});\n\nrunner.execute();\n```\n\n\n#### server_test/test.server.conf.ts\nサーバ側テスト起動時の設定です。\n注意点として`spec_files`に指定する相対パスはプロジェクト直下が起点になります。そのため`__dirname`を使って指定してください。\n\n```js:test.server.conf.ts\nexport const config = {\n  spec_dir: '.',\n  spec_files: [\n    `${__dirname}/*spec.js`\n  ],\n  'stopSpecOnExpectationFailure': false,\n  'random': false\n};\n```\n\n\n\n#### server_test/tsconfig.server_test.json\n\nサーバ側テスト資産をコンパイルする時の設定ファイルです。\n\n```json:tsconfig.server_test.json\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"preserveConstEnums\": true,\n    \"outDir\": \"../dist\",\n    \"mapRoot\": \"../dist\",\n    \"module\": \"commonjs\"\n  } ,\n  \"include\": [\n    \"**/*.spec.ts\",\n    \"./test.server.ts\",\n    \"./test.server.conf.ts\"\n  ]\n}\n```\n\n`outDir`が`../dist/server_test`ではなく`../dist`であることに注意してください。\nテスト資産は`server`ディレクトリ配下の資産に依存しているため、`../dist/server_test`を指定するとコンパイルした時に下記のように出力されてしまいます。\n\n```:\u001c（悪い例）outDirに\"../dist/server_test\"を指定したときのコンパイル結果\n.\n└── dist\n    └── server_test\n        ├── server\n        └── server_test \n```\n```:\u001c（良い例）outDirに\"../dist\"を指定したときのコンパイル結果\n.\n└── dist\n    ├── server\n    └── server_test \n```\n\n\n### 5. E2Eテストを作成\n単体テストを作成したので次はE2Eテストを作りましょう。\nAngular CLIで作成したプロジェクトにデフォルトで用意されている[Protractor](http://www.protractortest.org/#/)を使ったテストコードを作成します。\n\n#### e2e/app.e2e-spec.ts\n基本的にelementメソッドで要素を取得して、sendKeysメソッドやclickメソッドで操作を行います。\n\n```js:app.e2e-spec.ts\nimport { Angular4Express4Typescritp2Page } from './app.po';\nimport { browser, element, by } from 'protractor';\n\n\ndescribe('E2Eテスト', () => {\n  let page: Angular4Express4Typescritp2Page;\n\n  beforeEach(() => {\n    page = new Angular4Express4Typescritp2Page();\n  });\n\n  it('画面タイトルが正しいか', () => {\n    page.navigateTo();\n    expect(page.getParagraphText()).toEqual('メッセージ一覧');\n  });\n\n\n  it('メッセージが登録できるか', () => {\n    page.navigateTo();\n    const newMessage = `サンプルメッセージ ${new Date().toString()}`;\n    element(by.id('registerMessage')).sendKeys(newMessage);\n\n    element(by.id('registerMessageButton')).click();\n\n    // 登録後メッセージ入力項目が初期化されているか\n    expect(element(by.id('registerMessage')).getText()).toEqual('');\n\n    // 登録後一覧に登録したメッセージが含まれているか\n    const messages = element(by.id('messageList')).all(by.tagName('li'));\n    expect(messages.last().getText()).toEqual(newMessage);\n  });\n\n});\n```\n\n### 6. E2Eテスト周りの環境を整備\n\n#### package.json\nAngular CILプロジェクトデフォルトの\"e2e\"コマンドは削除して、スクリプトに下記を追加してください。\n\n```json:package.json\n \"scripts\": {\n    ...\n    \"e2e\": \"npm-run-all -s  webdriver:update -p webdriver:start protractor\",\n    \"webdriver:update\": \"webdriver-manager update\",\n    \"webdriver:start\": \"webdriver-manager start\",\n    \"protractor\": \"protractor protractor.conf.js\",\n    ...\n  },\n```\n\n* **e2e**でE2Eテストを実行します。Angular CILプロジェクトデフォルトの`e2e`コマンド(= `ng e2e`コマンド)は使いません。`ng　e2e`はクライアント資産だけコンパイルして起動する処理が入っているからです。今回はビルドしたアプリ(クライアントとサーバが１つにまとまったアプリ)に対してテストします。\n* **webdriver:update**でE2Eテストに必要なWebDriverをインストールまたは更新します。\n* **webdriver:start**でWebDriverを起動します。Protractorのテストは事前にWebDriverを起動しておく必要があります。\n* **protractor**でE2Eテストを実行します。起動時の設定は下で触れるprotractor.conf.jsを使います。\n\n#### protractor.conf.js\nデフォルトでbaseUrlのポートは4200になっていますが、今回はビルドしたアプリに対してテストするので3000を指定します。\n\n```js:protractor.conf.js\nexports.config = {\n  ...\n  baseUrl: 'http://localhost:3000/',\n  ...\n}\n```\n\n### 7. 試してみる\n#### 単体テストを実行してみる\n* MongoDBをローカルで立ち上げる\n    * 具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。\n\n* プロジェクト直下で`npm test`コマンドを実行するとテストが実行されます。クライアント側のテスト結果はブラウザに、サーバ側はターミナル（またはコンソール）に表示されます。資産はウォッチしているので、テストコードを修正すると、コンパイルされ再度テストが実行されるでしょう。\n\n![10_単体テスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png)\n\n\n\n#### E2Eテストを実行してみる\n* MongoDBをローカルで立ち上げる\n    * これも単体テストと同じでDBを事前に起動しておいてください。\n \n* ビルドしたアプリを起動する\n    * プロジェクト直下で`npm run buildRun`を実行し、ビルド資産を起動します。\n\n* `npm run e2e`する\n    * 別ターミナル（またはコマンドプロンプト）を開き、プロジェクト直下で`npm run e2e`コマンドを実行します。するとブラウザが立ち上がりテストが実行されます。\n![20_E2Eテスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png)\n\n\n## 終わりに\n今回はMEANスタックアプリの単体テスト、E2Eテストについて紹介しました。\nこれでビルドとテストができるようになったので、次回「その3. Dockerデプロイ編」では、Dockerでアプリを起動する方法とDockerでアプリのイメージを作ってデプロイする方法ついて紹介します。\n\n","comments_count":0,"created_at":"2017-07-24T07:12:10+09:00","likes_count":9,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/270e2fae-ed90-5539-8c90-a2ed93ebba83/","title":"Fessを使用して、Asciidoctorで簡単に全文検索できるようにする","date":"2017-06-26T00:21:37+09:00","excerpt":"Asciidoctorを使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。そこで今回は、Dockerで...","tags":["JavaScript","全文検索","ドキュメント","Fess","asciidoctor","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"270e2fae-ed90-5539-8c90-a2ed93ebba83","title":"Fessを使用して、Asciidoctorで簡単に全文検索できるようにする","rendered_body":"<p><a href=\"http://asciidoctor.org/\" rel=\"nofollow noopener\" target=\"_blank\">Asciidoctor</a>を使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。</p>\n\n<p>そこで今回は、Dockerで全文検索サーバの<a href=\"http://fess.codelibs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Fess</a>を立てて、<br>\nドキュメントからJavaScript経由でFessのJSON APIを呼び出すことで、<br>\n全文検索を簡単に導入する方法をご紹介します。</p>\n\n<p>導入するとドキュメントの右上に検索窓が出てきて全文検索できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/e020d2b6619c0b7ce4332c80ea15b89a6efb895e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31323365633737312d666237372d653464632d646637652d6134623430373739323735392e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e020d2b6619c0b7ce4332c80ea15b89a6efb895e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31323365633737312d666237372d653464632d646637652d6134623430373739323735392e676966\" alt=\"6月-24-2017 19-05-32.gif\" title=\"6月-24-2017 19-05-32.gif\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/123ec771-fb77-e4dc-df7e-a4b407792759.gif\"></a></p>\n\n<h2>\n<span id=\"fessとは\" class=\"fragment\"></span><a href=\"#fess%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Fessとは</h2>\n\n<p><a href=\"http://fess.codelibs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Fess</a>は<strong>「5 分で簡単に構築可能な全文検索サーバー」</strong>です。<br>\nJavaベースで構築されており、Apacheライセンスで提供されるオープンソース製品で、無料で使用できます。<br>\n自分でクローラを設定して、自分だけの検索エンジンがつくれるようなイメージです。<br>\nデフォルトで検索画面を提供していますが、JSON APIも提供しているので、様々なシステムと連携可能です。</p>\n\n<h2>\n<span id=\"全体像\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E4%BD%93%E5%83%8F\"><i class=\"fa fa-link\"></i></a>全体像</h2>\n\n<p>ドキュメント用Webサーバに全文検索用のJavaScriptファイルとCSSファイルを追加し、Dockerで全文検索用のFessサーバを立てます。<br>\nFessサーバはドキュメント用Webサーバをクロールし、その情報を保存しておきます。<br>\nドキュメントで全文検索を実施すると、JavaScript経由でFessサーバのJSON AIPを呼び出して、全文検索結果をドキュメントに表示します。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/6fe043176da6b6451722114a3d0418bc40ac8c99/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31306338616334362d323135352d386562372d613565642d3763313363653534346563322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/6fe043176da6b6451722114a3d0418bc40ac8c99/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31306338616334362d323135352d386562372d613565642d3763313363653534346563322e706e67\" alt=\"0_Fess_全体像_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/10c8ac46-2155-8eb7-a5ed-7c13ce544ec2.png\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/729e46c74903de7be597a6ac4adea0c03cd8559f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34306531643435362d323633352d326165642d333333642d3862316165633434373933312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/729e46c74903de7be597a6ac4adea0c03cd8559f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34306531643435362d323633352d326165642d333333642d3862316165633434373933312e706e67\" alt=\"0_Fess_全体像_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/40e1d456-2635-2aed-333d-8b1aec447931.png\"></a></p>\n\n<h2>\n<span id=\"導入手順\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>導入手順</h2>\n\n<p>この導入手順は、下記のような環境（ローカルPCのDocker上にドキュメント用WebサーバとFessサーバが立っている環境）を作った時のものです。<br>\nDockerを使わなくても、ローカルPC以外でも、導入可能です。導入手順は適宜読み替えてください。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/a94911642557c486b240ffa8c3c184c64bfabc2c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30626164623864322d316135382d323262362d343537632d3132626563663361383931312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a94911642557c486b240ffa8c3c184c64bfabc2c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30626164623864322d316135382d323262362d343537632d3132626563663361383931312e706e67\" alt=\"0_Fess_全体像_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/0badb8d2-1a58-22b6-457c-12becf3a8911.png\"></a></p>\n\n<h3>\n<span id=\"fessのインストール\" class=\"fragment\"></span><a href=\"#fess%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>Fessのインストール</h3>\n\n<p>Docker Hubの<a href=\"https://hub.docker.com/r/codelibs/fess/\" rel=\"nofollow noopener\" target=\"_blank\">codelibs/fess</a>を使用します。今回ポートは10084で公開します。<br>\nDockerを使わない場合は<a href=\"http://fess.codelibs.org/ja/11.2/install/index.html\" rel=\"nofollow noopener\" target=\"_blank\">Fess インストールガイド</a>を参考にしてください。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ docker run -d -p 10084:8080 --name fess codelibs/fess:latest\n</pre></div></div>\n\n<h3>\n<span id=\"fessの設定\" class=\"fragment\"></span><a href=\"#fess%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>Fessの設定</h3>\n\n<h4>\n<span id=\"クローラの設定\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>クローラの設定</h4>\n\n<p><code>http://[PCのローカルIPアドレス]:10084/login</code>にアクセスするとログイン画面が表示されます。<br>\nデフォルトのID/PASS　<code>admin/admin</code>でログインしましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/d173fd5ce7a76eb7b5a6ef053a670dd6551d720c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65373930656361392d353037332d393438652d336534332d6437353436643537666165352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d173fd5ce7a76eb7b5a6ef053a670dd6551d720c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65373930656361392d353037332d393438652d336534332d6437353436643537666165352e706e67\" alt=\"1_Fess管理者_ログイン画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/e790eca9-5073-948e-3e43-d7546d57fae5.png\"></a><br>\n<br></p>\n\n<p>ログインするとダッシュボードが表示されます。左ペインの<code>クローラ</code> &gt; <code>Web</code>　を選択しましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/cbfee37bd5d06381615f013da8587b1af91c35aa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61636662653935302d666137342d643063622d336365652d3565386462346465356237342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/cbfee37bd5d06381615f013da8587b1af91c35aa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61636662653935302d666137342d643063622d336365652d3565386462346465356237342e706e67\" alt=\"2_Fess管理者_ダッシュボード.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/acfbe950-fa74-d0cb-3cee-5e8db4de5b74.png\"></a><br>\n<br></p>\n\n<p>Webクローラにはまだ何も登録されていないので、左上の<code>+　新規作成</code>ボタンをクリックしましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/e60be4a90df24cb1275c165752de363b15859b87/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36333130333762342d616162322d386530642d663961612d3364323365633931376132392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e60be4a90df24cb1275c165752de363b15859b87/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36333130333762342d616162322d386530642d663961612d3364323365633931376132392e706e67\" alt=\"3_Fess管理者_Webクロール設定_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/631037b4-aab2-8e0d-f9aa-3d23ec917a29.png\"></a><br>\n<br></p>\n\n<p>Webクロール情報入力画面が表示されます。<br>\n<a href=\"https://camo.qiitausercontent.com/62cd6f97bb7dfebb163873f26b5fda4fabcf89c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653561303963392d376363652d336665632d373838342d3132353863333266613931612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/62cd6f97bb7dfebb163873f26b5fda4fabcf89c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653561303963392d376363652d336665632d373838342d3132353863333266613931612e706e67\" alt=\"3_Fess管理者_Webクロール設定_2.png\" title=\"3_Fess管理者_Webクロール設定_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/ee5a09c9-7cce-3fec-7884-1258c32fa91a.png\"></a></p>\n\n<p>設定項目は色々ありますが、とりあえず下記項目だけ設定しましょう。</p>\n\n<ul>\n<li>名前 \n\n<ul>\n<li>任意の名前を設定してください。</li>\n</ul>\n</li>\n<li>URL \n\n<ul>\n<li>ドキュメント用Webサーバにおいてドキュメントが格納されているルートフォルダのURLを指定してください。末尾に<code>/</code>を付けてください。</li>\n</ul>\n</li>\n<li>クロール対象とするURL \n\n<ul>\n<li>正規表現で値を設定します。上記<code>URL</code>で設定したルートフォルダ配下の全資産を対象とするために、<code>URLで設定した値</code> + <code>.*</code> を指定してください。</li>\n</ul>\n</li>\n<li>検索対象とするURL\n\n<ul>\n<li>正規表現で値を設定します。HTMLのみを検索対象にしたい（JS、CSSなどは除外したい）ので、<code>URLで設定した値</code> + <code>.+\\.html$</code> を指定してください。\n<br>\n<br>\n</li>\n</ul>\n</li>\n</ul>\n\n<p>値を設定したら、画面を下にスクロールして<code>+　作成</code>ボタンをクリックします。<br>\nすると下記のようにWebクロールのデータが１件登録されます。<br>\n<a href=\"https://camo.qiitausercontent.com/8302d25592df90b2bdf59fbf3b43e31ecf106b3e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33643030626635612d663133312d643336372d646535332d6166313062623336383339642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/8302d25592df90b2bdf59fbf3b43e31ecf106b3e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33643030626635612d663133312d643336372d646535332d6166313062623336383339642e706e67\" alt=\"3_Fess管理者_Webクロール設定_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/3d00bf5a-f131-d367-de53-af10bb36839d.png\"></a><br>\n<br></p>\n\n<h4>\n<span id=\"クローラの実行\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AE%E5%AE%9F%E8%A1%8C\"><i class=\"fa fa-link\"></i></a>クローラの実行</h4>\n\n<p>左ペインで　<code>システム</code> &gt; <code>スケジューラ</code> を選択してジョブスケジューラを開きます。<br>\nジョブスケジューラで <code>Default Crawler</code>を選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/52e6c84dc635dabd786a05e2dc2dbc01bbcd62b3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62306165636130642d363461342d343364612d373832622d3061316130636437306238332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/52e6c84dc635dabd786a05e2dc2dbc01bbcd62b3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62306165636130642d363461342d343364612d373832622d3061316130636437306238332e706e67\" alt=\"4_Fess管理者_スケジューラ_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/b0aeca0d-64a4-43da-782b-0a1a0cd70b83.png\"></a><br>\n<br></p>\n\n<p><code>今すぐ開始</code>をクリックします。<br>\n<a href=\"https://camo.qiitausercontent.com/15c56153ff7878a59bfda2bab0ac3b8b6182fa23/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30306537363932302d626661642d656562312d636239392d3732346533613933393261392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/15c56153ff7878a59bfda2bab0ac3b8b6182fa23/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30306537363932302d626661642d656562312d636239392d3732346533613933393261392e706e67\" alt=\"4_Fess管理者_スケジューラ_1.1.png\" title=\"4_Fess管理者_スケジューラ_1.1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/00e76920-bfad-eeb1-cb99-724e3a9392a9.png\"></a><br>\n<br></p>\n\n<p>するとクロールが実行されます。<br>\n<a href=\"https://camo.qiitausercontent.com/b34d527efb0b07d2b04cabccebe97f0e1e4b594c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323564333030662d303766352d373234642d636539332d3865316339373532653130652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b34d527efb0b07d2b04cabccebe97f0e1e4b594c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323564333030662d303766352d373234642d636539332d3865316339373532653130652e706e67\" alt=\"4_Fess管理者_スケジューラ_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/725d300f-07f5-724d-ce93-8e1c9752e10e.png\"></a><br>\n<br></p>\n\n<p>しばらくして<code>F5</code>キーを押してブラウザを更新してください。<br>\nクロールが終了すると、スケジューラの状態が<code>実行中</code>から<code>有効</code>になります。<br>\n<a href=\"https://camo.qiitausercontent.com/2d860e111077a3a0b63a44b45e14e0e18b02fcb1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653466353237372d616163332d616437652d636465622d3431643339623733336331662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2d860e111077a3a0b63a44b45e14e0e18b02fcb1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653466353237372d616163332d616437652d636465622d3431643339623733336331662e706e67\" alt=\"4_Fess管理者_スケジューラ_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/ee4f5277-aac3-ad7e-cdeb-41d39b733c1f.png\"></a><br>\n<br></p>\n\n<h4>\n<span id=\"クローラ実行結果の確認\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>クローラ実行結果の確認</h4>\n\n<p>左ペインの<code>システム情報</code>&gt;<code>クロール情報</code>を選択すると、先ほど実行したクロールの結果が表示されています。その行を選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/e35eccd76c8d85dcc368298adfebb71871f083a7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39326633313062352d383366362d646564612d343438642d6166613863356230663130342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e35eccd76c8d85dcc368298adfebb71871f083a7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39326633313062352d383366362d646564612d343438642d6166613863356230663130342e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_1.png\" title=\"5_Fess管理者_システム情報_クロール情報_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/92f310b5-83f6-deda-448d-afa8c5b0f104.png\"></a><br>\n<br></p>\n\n<p>セッションIDを選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/341936c3d088fb04a1029cc6c891a35253a079da/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34653830636431342d333633342d663636352d623434382d3862346234653761386432312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/341936c3d088fb04a1029cc6c891a35253a079da/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34653830636431342d333633342d663636352d623434382d3862346234653761386432312e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_2.png\" title=\"5_Fess管理者_システム情報_クロール情報_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/4e80cd14-3634-f665-b448-8b4b4e7a8d21.png\"></a><br>\n<br></p>\n\n<p>ここにドキュメント用Webサーバのドキュメントが全て表示されればOKです。<br>\n<a href=\"https://camo.qiitausercontent.com/767e79c91f7521caf880a890deee50513f520ea9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36306238366263342d663730662d343263382d613031372d3566313338623362383865332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/767e79c91f7521caf880a890deee50513f520ea9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36306238366263342d663730662d343263382d613031372d3566313338623362383865332e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_3.png\" title=\"5_Fess管理者_システム情報_クロール情報_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/60b86bc4-f70f-42c8-a017-5f138b3b88e3.png\"></a><br>\n<br></p>\n\n<h3>\n<span id=\"ドキュメント用webサーバに全文検索用資産を配置\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E7%94%A8web%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AB%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E7%94%A8%E8%B3%87%E7%94%A3%E3%82%92%E9%85%8D%E7%BD%AE\"><i class=\"fa fa-link\"></i></a>ドキュメント用Webサーバに全文検索用資産を配置</h3>\n\n<p>全文検索用の資産は<code>full-text-search.js</code>と<code>full-text-search.css</code>の２つです。<br>\n<code>full-text-search.js</code>の変数 FESS_JSON_ENDPOINT(FESSサーバのJSON APIのエンドポイント) は適時置き換えてください。<br>\nこれらの資産をドキュメント用Webサーバのドキュメントのルートフォルダ直下に配置してください。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">full-text-search.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'use strict'</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// FESSサーバのJSON APIのエンドポイント（FessサーバのIPアドレス + /json）</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">FESS_JSON_ENDPOINT</span> <span class=\"o\">=</span> <span class=\"s1\">'http://192.168.1.5:10084/json'</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// １ページあたりの検索結果表示件数</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">COUNT_PAR_PAGE</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n\n\n    <span class=\"c1\">// 目次の</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#toc'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 一番上に検索条件入力エリアを挿入</span>\n        <span class=\"p\">.</span><span class=\"nx\">prepend</span><span class=\"p\">(</span>\n            <span class=\"s1\">'&lt;div id=\"search-area\"&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;form id=\"search-form\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;div class=\"search-input-area\"&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;i class=\"fa fa-search left-icon\"&gt;&lt;/i&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;input id=\"search-query\" placeholder=\"全文検索\" /&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;i class=\"fa fa-close right-icon\"&gt;&lt;/i&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;/div&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;input id=\"search-start\" type=\"hidden\" value=\"0\"/&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;input id=\"search-num\" type=\"hidden\" value=\"'</span> <span class=\"o\">+</span> <span class=\"nx\">COUNT_PAR_PAGE</span> <span class=\"o\">+</span> <span class=\"s1\">'\"/&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;form&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// イベント登録</span>\n        <span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">$searchArea</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 入力項目の検索条件でEnterを押したら、検索処理を実行する</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-form'</span><span class=\"p\">).</span><span class=\"nx\">submit</span><span class=\"p\">({</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 虫眼鏡アイコン押下したら、検索処理を実行する</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".left-icon\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">({</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 検索条件入力したら、</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\"#search-query\"</span><span class=\"p\">).</span><span class=\"nx\">keyup</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n              <span class=\"kd\">var</span> <span class=\"nx\">$this</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n              <span class=\"kd\">var</span> <span class=\"nx\">$rightIcon</span> <span class=\"o\">=</span> <span class=\"nx\">$this</span><span class=\"p\">.</span><span class=\"nx\">parent</span><span class=\"p\">().</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".right-icon\"</span><span class=\"p\">);</span>\n\n              <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">$this</span><span class=\"p\">.</span><span class=\"nx\">val</span><span class=\"p\">().</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                 <span class=\"c1\">// 検索条件に値がある場合は×アイコンの色を濃くする</span>\n                 <span class=\"nx\">$rightIcon</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#555'</span><span class=\"p\">);</span>\n              <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                 <span class=\"c1\">// 検索条件に値がない場合は×アイコンの色を薄くする</span>\n                 <span class=\"nx\">$rightIcon</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#ccc'</span><span class=\"p\">);</span>\n              <span class=\"p\">}</span>\n            <span class=\"p\">});</span>\n\n            <span class=\"c1\">// ×アイコン押下したら、</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".right-icon\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n              <span class=\"c1\">// ×アイコンの色を薄くして</span>\n              <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">).</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#ccc'</span><span class=\"p\">)</span>\n                      <span class=\"c1\">// 検索条件をクリアする</span>\n                     <span class=\"p\">.</span><span class=\"nx\">parent</span><span class=\"p\">().</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\"input\"</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span>\n            <span class=\"p\">});</span>\n        <span class=\"p\">});</span>\n\n    <span class=\"c1\">// ドキュメントタイトルの</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#header&gt;h1'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 直下に検索結果エリアを挿入</span>\n        <span class=\"p\">.</span><span class=\"nx\">before</span><span class=\"p\">(</span>\n            <span class=\"s1\">'&lt;div id=\"search-result-area\"&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div id=\"search-result-subheader\"&gt;&lt;/div&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div id=\"search-result-content\"&gt;&lt;/div&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// イベント登録</span>\n        <span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span>\n                <span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-area'</span><span class=\"p\">)</span>\n                    <span class=\"c1\">// 検索結果エリアのバツアイコンをクリックしたら、</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s1\">'#remove-search-result'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                      <span class=\"kd\">var</span> <span class=\"nx\">$searchResultArea</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">delegateTarget</span><span class=\"p\">)</span>\n                      <span class=\"c1\">// 検索結果エリアを非表示モードにする</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">removeClass</span><span class=\"p\">(</span><span class=\"s1\">'show'</span><span class=\"p\">);</span>\n                      <span class=\"c1\">// 検索結果エリアの中身を削除する</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-subheader'</span><span class=\"p\">).</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-content'</span><span class=\"p\">).</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n                    <span class=\"p\">})</span>\n                    <span class=\"c1\">// 前ページリンクをクリックしたら、１ページ前を検索する</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#prevPageLink\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">)</span>\n                    <span class=\"c1\">// 次ページリンクをクリックしたら、１ページ後を検索する</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#nextPageLink\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n        <span class=\"p\">});</span>\n\n\n\n    <span class=\"cm\">/**\n     * 検索処理\n     *\n     * @param  {eventObject} event\n     * @return {boolean}  submit処理を中断させるために必ずfalseを返却する\n     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">doSearch</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">){</span>\n      <span class=\"c1\">// 検索フィールドの値をトリムして取得</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">searchQuery</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">trim</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-query'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">());</span>\n      <span class=\"c1\">// 空の場合は検索処理を実行しない</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">searchQuery</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// 表示開始位置、表示件数の取得</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-start'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">()),</span>\n          <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-num'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">());</span>\n      <span class=\"c1\">// 表示開始位置のチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">start</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">// 表示件数のチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">num</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"nx\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">// 表示ページ情報の取得</span>\n      <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">navi</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n          <span class=\"c1\">// 前のページの場合</span>\n          <span class=\"nx\">start</span> <span class=\"o\">-=</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n          <span class=\"c1\">// 次のページの場合</span>\n          <span class=\"nx\">start</span> <span class=\"o\">+=</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"nl\">default</span><span class=\"p\">:</span>\n        <span class=\"k\">case</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n          <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// URLを構築</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"nx\">FESS_JSON_ENDPOINT</span> <span class=\"o\">+</span> <span class=\"s1\">'?callback=?'</span> <span class=\"o\">+</span> <span class=\"c1\">// 別ドメインを想定してJSONP形式でリクエストを送信する</span>\n                                     <span class=\"s1\">'&amp;q='</span> <span class=\"o\">+</span> <span class=\"nb\">encodeURIComponent</span><span class=\"p\">(</span><span class=\"nx\">searchQuery</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n                                     <span class=\"s1\">'&amp;start='</span> <span class=\"o\">+</span> <span class=\"nx\">start</span> <span class=\"o\">+</span>\n                                     <span class=\"s1\">'&amp;num='</span> <span class=\"o\">+</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// 検索リクエスト送信</span>\n      <span class=\"c1\">// 別ドメインを想定してJSONP形式でリクエストを送信する</span>\n      <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span>\n          <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"nx\">url</span><span class=\"p\">,</span>\n          <span class=\"na\">dataType</span><span class=\"p\">:</span> <span class=\"s1\">'jsonp'</span><span class=\"p\">,</span>\n          <span class=\"na\">success</span><span class=\"p\">:</span> <span class=\"nx\">renderSearchResult</span>\n      <span class=\"p\">});</span>\n\n\n      <span class=\"c1\">// ページ情報の更新</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#searchNum'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// ページ表示を上部に移動</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">).</span><span class=\"nx\">scrollTop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// サブミットを抑止するためにfalseを返す</span>\n      <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n\n\n    <span class=\"cm\">/**\n     * 検索成功時に検索結果を描画する\n     *\n     * @param  {Anything} data レスポンスデータ\n     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">renderSearchResult</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 検索結果処理</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">dataResponse</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">;</span>\n      <span class=\"c1\">// ステータスチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s2\">\"検索中に問題が発生しました。\"</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// 検索結果領域を表示する</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-area'</span><span class=\"p\">).</span><span class=\"nx\">addClass</span><span class=\"p\">(</span><span class=\"s1\">'show'</span><span class=\"p\">);</span>\n\n      <span class=\"kd\">var</span> <span class=\"nx\">$searchResultSubheader</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-subheader'</span><span class=\"p\">),</span>\n          <span class=\"nx\">$searchResultContent</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-content'</span><span class=\"p\">),</span>\n          <span class=\"nx\">record_count</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">record_count</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// 検索結果がない場合</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">record_count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// サブヘッダーに出力</span>\n        <span class=\"nx\">$searchResultSubheader</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span>  <span class=\"s1\">'&lt;div id=\"remove-search-result\" style=\"float:right;\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/div&gt;'</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// 結果領域に出力</span>\n        <span class=\"nx\">$searchResultContent</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;b&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">q</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/b&gt;に一致する情報は見つかりませんでした。'</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// 検索にヒットした場合</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">page_number</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_number</span><span class=\"p\">,</span>\n          <span class=\"nx\">page_size</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_size</span><span class=\"p\">,</span>\n          <span class=\"nx\">page_count</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_count</span><span class=\"p\">,</span>\n          <span class=\"nx\">startRange</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nx\">page_size</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n          <span class=\"nx\">endRange</span> <span class=\"o\">=</span> <span class=\"nx\">page_number</span> <span class=\"o\">*</span> <span class=\"nx\">page_size</span><span class=\"p\">,</span>\n          <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n          <span class=\"nx\">max</span><span class=\"p\">,</span>\n          <span class=\"nx\">offset</span> <span class=\"o\">=</span> <span class=\"nx\">startRange</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-start'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"nx\">offset</span><span class=\"p\">);</span>\n\n\n      <span class=\"c1\">// サブヘッダーに出力</span>\n      <span class=\"nx\">$searchResultSubheader</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;b&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">q</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/b&gt; の検索結果 '</span> <span class=\"o\">+</span>\n                                <span class=\"nx\">record_count</span> <span class=\"o\">+</span> <span class=\"s2\">\" 件中 \"</span> <span class=\"o\">+</span>  <span class=\"nx\">startRange</span> <span class=\"o\">+</span> <span class=\"s1\">' - '</span> <span class=\"o\">+</span>\n                                <span class=\"nx\">endRange</span> <span class=\"o\">+</span> <span class=\"s1\">' 件目 ('</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">exec_time</span> <span class=\"o\">+</span> <span class=\"s1\">' 秒)'</span> <span class=\"o\">+</span>\n                               <span class=\"s1\">'&lt;div id=\"remove-search-result\" style=\"float:right;\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/div&gt;'</span>\n\n      <span class=\"c1\">// 検索結果領域のクリア</span>\n      <span class=\"nx\">$searchResultContent</span><span class=\"p\">.</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n\n\n      <span class=\"c1\">// 検索結果の出力</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">$resultBody</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;ol/&gt;\"</span><span class=\"p\">);</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">results</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">;</span>\n      <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">max</span> <span class=\"o\">=</span> <span class=\"nx\">results</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">max</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">element</span> <span class=\"o\">=</span>\n            <span class=\"s1\">'&lt;li&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;h4 class=\"title\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;a href=\"'</span> <span class=\"o\">+</span><span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">url_link</span> <span class=\"o\">+</span> <span class=\"s1\">'\"&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">title</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/a&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;/h4&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div class=\"body\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">content_description</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;br/&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;cite&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">site</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/cite&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;/div&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/li&gt;'</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">).</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$resultBody</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">$resultBody</span><span class=\"p\">.</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$searchResultContent</span><span class=\"p\">);</span>\n\n\n      <span class=\"c1\">// ページ番号情報の出力</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">pageArea</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n      <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;div id=\"pageInfo\"&gt;'</span><span class=\"p\">,</span> <span class=\"nx\">page_number</span><span class=\"p\">,</span> <span class=\"s1\">'ページ目&lt;br/&gt;'</span><span class=\"p\">);</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 前のページへのリンク</span>\n        <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;a id=\"prevPageLink\" href=\"#\"&gt;&amp;lt;&amp;lt;前ページへ&lt;/a&gt; '</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">&lt;</span> <span class=\"nx\">page_count</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 次のページへのリンク</span>\n        <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;a id=\"nextPageLink\" href=\"#\"&gt;次ページへ&amp;gt;&amp;gt;&lt;/a&gt;'</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">);</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"p\">)).</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$searchResultContent</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">full-text-search.css</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">@charset</span> <span class=\"s1\">\"UTF-8\"</span><span class=\"p\">;</span>\n\n<span class=\"nf\">#search-area</span> <span class=\"p\">{</span>\n    <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"p\">{</span>\n    <span class=\"nl\">position</span><span class=\"p\">:</span><span class=\"nb\">relative</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* 入力項目 */</span>\n<span class=\"nf\">#search-query</span> <span class=\"p\">{</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span> <span class=\"m\">2em</span><span class=\"p\">;</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">black</span><span class=\"p\">;</span>\n    <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"n\">arial</span><span class=\"p\">,</span><span class=\"nb\">sans-serif</span><span class=\"p\">;</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span>\n    <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">2em</span><span class=\"p\">;</span>\n    <span class=\"nl\">outline</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nt\">input</span><span class=\"nd\">:focus</span> <span class=\"p\">{</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"m\">#4d90fe</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* アイコンは入力項目の左と右に配置する */</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"o\">,</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span> <span class=\"p\">{</span>\n    <span class=\"c\">/* 縦方向の中央寄せ */</span>\n    <span class=\"nl\">position</span><span class=\"p\">:</span><span class=\"nb\">absolute</span><span class=\"p\">;</span>\n    <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">50%</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">-0.5em</span><span class=\"p\">;</span>\n    <span class=\"py\">font-sise</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 要素にマウスを合わせたら、マウスポインタのマークを変える */</span>\n    <span class=\"nl\">cursor</span><span class=\"p\">:</span><span class=\"nb\">pointer</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span> <span class=\"p\">{</span>\n    <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span><span class=\"p\">;</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span><span class=\"m\">#444</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span> <span class=\"p\">{</span>\n    <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 最初は、グレーアウトしておく */</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* アイコンにマウスを合わせたら、サイズを大きくする */</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"nd\">:hover</span><span class=\"o\">,</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1.4em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* 検索結果表示時に適用するスタイル */</span>\n<span class=\"nf\">#search-result-area</span><span class=\"nc\">.show</span> <span class=\"p\">{</span>\n    <span class=\"nl\">background</span><span class=\"p\">:</span> <span class=\"m\">#f8f8f7</span><span class=\"p\">;</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">0px</span> <span class=\"nb\">solid</span><span class=\"p\">;</span>\n    <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h3>\n<span id=\"ドキュメントに全文検索用資産の読み込み処理を追加\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AB%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E7%94%A8%E8%B3%87%E7%94%A3%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF%E5%87%A6%E7%90%86%E3%82%92%E8%BF%BD%E5%8A%A0\"><i class=\"fa fa-link\"></i></a>ドキュメントに全文検索用資産の読み込み処理を追加</h3>\n\n<p>前手順でドキュメント用Webサーバに配置した<code>full-text-search.js</code>と<code>full-text-search.css</code>を、<br>\n各ドキュメントから読み込むようにします。<br>\n<code>full-text-search.js</code>はjQueryに依存しているので、<br>\n既存のドキュメントで読み込んでいない場合はjQueryも読み込みも追加してください。</p>\n\n<p>ドキュメント用Webサーバがこのようなフォルダ構成だとしたら、</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ドキュメント用Webサーバのドキュメントルート\n├── full-text-search.css\n├── full-text-search.js\n└── asciidoctor-sample\n    └── asciidoctor-sample.html\n</pre></div></div>\n\n<p><code>asciidoctor-sample.adoc</code>には下記を追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>++++\n&lt;link rel=\"stylesheet\" href=\"../full-text-search.css\"&gt;&lt;/link&gt;\n&lt;script\n  src=\"https://code.jquery.com/jquery-3.2.1.min.js\"\n  integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\"\n  crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n&lt;script src=\"../full-text-search.js\"&gt;&lt;/script&gt;\n++++\n</pre></div></div>\n\n<h3>\n<span id=\"全文検索ができるかの確認\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%8B%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>全文検索ができるかの確認</h3>\n\n<p>以上の手順を実施すると、Asdciidoctorで全文検索ができるようになります。<br>\nドキュメントをブラウザで見ると、目次上部に検索窓が追加されています。<br>\n<a href=\"https://camo.qiitausercontent.com/daf3699de0e01b28ba4d3c2a8b8b535d3c54a2ab/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39393039336364362d353865382d376364652d613364382d3562656332613032303636382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/daf3699de0e01b28ba4d3c2a8b8b535d3c54a2ab/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39393039336364362d353865382d376364652d613364382d3562656332613032303636382e706e67\" alt=\"7_全文検索イメージ_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/99093cd6-58e8-7cde-a3d8-5bec2a020668.png\"></a><br>\n<br></p>\n\n<p>検索条件を入力し、虫眼鏡アイコンをクリックすると、検索結果が表示されます。<br>\n<a href=\"https://camo.qiitausercontent.com/5d8e0c5f2db223d5f021d484351b0c840010bb4f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63646533643865612d643838332d613636622d663838642d3961353934313032366263392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/5d8e0c5f2db223d5f021d484351b0c840010bb4f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63646533643865612d643838332d613636622d663838642d3961353934313032366263392e706e67\" alt=\"7_全文検索イメージ_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/cde3d8ea-d883-a66b-f88d-9a5941026bc9.png\"></a><br>\n<br></p>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>FessのREST APIを使用してAsciidoctorで全文検索できるようにする方法を紹介しました。<br>\nFessのREST APIを使えば、Asciidoctorに限らず、様々なシステムに全文検索機能を導入できそうです。</p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<ul>\n<li><a href=\"http://fess.codelibs.org/ja/articles/article-4.html#js\" rel=\"nofollow noopener\" target=\"_blank\">Fess で作るApache Solrベースの検索サーバー 〜 REST API 編</a></li>\n<li><a href=\"http://qiita.com/cookienote/items/1f2443be25630a78d946\" id=\"reference-69c989703115d994be84\">全文検索サーバー Fess を Docker で動かす</a></li>\n</ul>\n","body":"[Asciidoctor](http://asciidoctor.org/)を使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。\n\nそこで今回は、Dockerで全文検索サーバの[Fess](http://fess.codelibs.org/ja/)を立てて、\nドキュメントからJavaScript経由でFessのJSON APIを呼び出すことで、\n全文検索を簡単に導入する方法をご紹介します。\n\n導入するとドキュメントの右上に検索窓が出てきて全文検索できるようになります。\n![6月-24-2017 19-05-32.gif](https://qiita-image-store.s3.amazonaws.com/0/49915/123ec771-fb77-e4dc-df7e-a4b407792759.gif \"6月-24-2017 19-05-32.gif\")\n\n\n## Fessとは\n[Fess](http://fess.codelibs.org/ja/)は**「5 分で簡単に構築可能な全文検索サーバー」**です。\nJavaベースで構築されており、Apacheライセンスで提供されるオープンソース製品で、無料で使用できます。\n自分でクローラを設定して、自分だけの検索エンジンがつくれるようなイメージです。\nデフォルトで検索画面を提供していますが、JSON APIも提供しているので、様々なシステムと連携可能です。\n\n\n## 全体像\nドキュメント用Webサーバに全文検索用のJavaScriptファイルとCSSファイルを追加し、Dockerで全文検索用のFessサーバを立てます。\nFessサーバはドキュメント用Webサーバをクロールし、その情報を保存しておきます。\nドキュメントで全文検索を実施すると、JavaScript経由でFessサーバのJSON AIPを呼び出して、全文検索結果をドキュメントに表示します。\n\n![0_Fess_全体像_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/10c8ac46-2155-8eb7-a5ed-7c13ce544ec2.png)\n\n![0_Fess_全体像_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/40e1d456-2635-2aed-333d-8b1aec447931.png)\n\n## 導入手順\nこの導入手順は、下記のような環境\u001c（ローカルPCのDocker上にドキュメント用WebサーバとFessサーバが立っている環境）を作った時のものです。\nDockerを使わなくても、ローカルPC以外でも、導入可能です。導入手順は適宜読み替えてください。\n\n![0_Fess_全体像_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/0badb8d2-1a58-22b6-457c-12becf3a8911.png)\n\n\n### Fessのインストール\nDocker Hubの[codelibs/fess](https://hub.docker.com/r/codelibs/fess/)を使用します。今回ポートは10084で公開します。\nDockerを使わない場合は[Fess インストールガイド](http://fess.codelibs.org/ja/11.2/install/index.html)を参考にしてください。\n\n```\n$ docker run -d -p 10084:8080 --name fess codelibs/fess:latest\n```\n\n### Fessの設定\n#### クローラの設定\n`http://[PCのローカルIPアドレス]:10084/login`にアクセスするとログイン画面が表示されます。\nデフォルトのID/PASS　`admin/admin`でログインしましょう。\n![1_Fess管理者_ログイン画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/e790eca9-5073-948e-3e43-d7546d57fae5.png)\n<br/>\n\nログインするとダッシュボードが表示されます。左ペインの`クローラ` > `Web`　を選択しましょう。\n![2_Fess管理者_ダッシュボード.png](https://qiita-image-store.s3.amazonaws.com/0/49915/acfbe950-fa74-d0cb-3cee-5e8db4de5b74.png)\n<br/>\n\nWebクローラにはまだ何も登録されていないので、左上の`+　新規作成`ボタンをクリックしましょう。\n![3_Fess管理者_Webクロール設定_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/631037b4-aab2-8e0d-f9aa-3d23ec917a29.png)\n<br/>\n\nWebクロール情報入力画面が表示されます。\n![3_Fess管理者_Webクロール設定_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/ee5a09c9-7cce-3fec-7884-1258c32fa91a.png \"3_Fess管理者_Webクロール設定_2.png\")\n\n設定項目は色々ありますが、とりあえず下記項目だけ設定しましょう。\n\n* 名前 \n    * 任意の名前を設定してください。\n* URL \n    * ドキュメント用Webサーバにおいてドキュメントが格納されているルートフォルダのURLを指定してください。末尾に`/`を付けてください。\n* クロール対象とするURL \n    * 正規表現で値を設定します。上記`URL`で設定したルートフォルダ配下の全資産を対象とするために、`URLで設定した値` + `.*` を指定してください。\n* 検索対象とするURL\n   * 正規表現で値を設定します。HTMLのみを検索対象にしたい（JS、CSSなどは除外したい）ので、`URLで設定した値` + `.+\\.html$` を指定してください。\n<br/>\n<br/>\n\n\n値を設定したら、画面を下にスクロールして`+　作成`ボタンをクリックします。\nすると下記のようにWebクロールのデータが１件登録されます。\n![3_Fess管理者_Webクロール設定_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/3d00bf5a-f131-d367-de53-af10bb36839d.png)\n<br/>\n\n\n#### クローラの実行\n左ペインで　`システム` > `スケジューラ` を選択してジョブスケジューラを開きます。\nジョブスケジューラで `Default Crawler`を選択します。\n![4_Fess管理者_スケジューラ_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/b0aeca0d-64a4-43da-782b-0a1a0cd70b83.png)\n<br/>\n\n`今すぐ開始`をクリックします。\n![4_Fess管理者_スケジューラ_1.1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/00e76920-bfad-eeb1-cb99-724e3a9392a9.png \"4_Fess管理者_スケジューラ_1.1.png\")\n<br/>\n\nするとクロールが実行されます。\n![4_Fess管理者_スケジューラ_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/725d300f-07f5-724d-ce93-8e1c9752e10e.png)\n<br/>\n\nしばらくして`F5`キーを押してブラウザを更新してください。\nクロールが終了すると、スケジューラの状態が`実行中`から`有効`になります。\n![4_Fess管理者_スケジューラ_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/ee4f5277-aac3-ad7e-cdeb-41d39b733c1f.png)\n<br/>\n\n\n#### クローラ実行結果の確認\n左ペインの`システム情報`>`クロール情報`を選択すると、先ほど実行したクロールの結果が表示されています。その行を選択します。\n![5_Fess管理者_システム情報_クロール情報_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/92f310b5-83f6-deda-448d-afa8c5b0f104.png \"5_Fess管理者_システム情報_クロール情報_1.png\")\n<br/>\n\n\nセッションIDを選択します。\n![5_Fess管理者_システム情報_クロール情報_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/4e80cd14-3634-f665-b448-8b4b4e7a8d21.png \"5_Fess管理者_システム情報_クロール情報_2.png\")\n<br/>\n\nここにドキュメント用Webサーバのドキュメントが全て表示されればOKです。\n![5_Fess管理者_システム情報_クロール情報_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/60b86bc4-f70f-42c8-a017-5f138b3b88e3.png \"5_Fess管理者_システム情報_クロール情報_3.png\")\n<br/>\n\n### ドキュメント用Webサーバに全文検索用資産を配置\n全文検索用の資産は`full-text-search.js`と`full-text-search.css`の２つです。\n`full-text-search.js`の変数 FESS_JSON_ENDPOINT(FESSサーバのJSON APIのエンドポイント) は適時置き換えてください。\nこれらの資産をドキュメント用Webサーバのドキュメントのルートフォルダ直下に配置してください。\n\n```javascript:full-text-search.js\n$(function() {\n    'use strict';\n\n    // FESSサーバのJSON APIのエンドポイント（FessサーバのIPアドレス + /json）\n    var FESS_JSON_ENDPOINT = 'http://192.168.1.5:10084/json';\n\n    // １ページあたりの検索結果表示件数\n    var COUNT_PAR_PAGE = 10;\n\n\n    // 目次の\n    $('#toc')\n        // 一番上に検索条件入力エリアを挿入\n        .prepend(\n            '<div id=\"search-area\">' +\n                '<form id=\"search-form\">' +\n                    '<div class=\"search-input-area\">' +\n                        '<i class=\"fa fa-search left-icon\"></i>' +\n                        '<input id=\"search-query\" placeholder=\"全文検索\" />' +\n                        '<i class=\"fa fa-close right-icon\"></i>' +\n                    '</div>' +\n                    '<input id=\"search-start\" type=\"hidden\" value=\"0\"/>' +\n                    '<input id=\"search-num\" type=\"hidden\" value=\"' + COUNT_PAR_PAGE + '\"/>' +\n                '<form>' +\n            '</div>')\n        // イベント登録\n        .ready(function() {\n            var $searchArea = $(this);\n\n            // 入力項目の検索条件でEnterを押したら、検索処理を実行する\n            $searchArea.find('#search-form').submit({navi:0}, doSearch);\n\n            // 虫眼鏡アイコン押下したら、検索処理を実行する\n            $searchArea.find(\".left-icon\").click({navi:0}, doSearch);\n\n            // 検索条件入力したら、\n            $searchArea.find(\"#search-query\").keyup(function(){\n              var $this = $(this);\n              var $rightIcon = $this.parent().find(\".right-icon\");\n\n              if($this.val().length > 0) {\n                 // 検索条件に値がある場合は×アイコンの色を濃くする\n                 $rightIcon.css('color','#555');\n              } else {\n                 // 検索条件に値がない場合は×アイコンの色を薄くする\n                 $rightIcon.css('color','#ccc');\n              }\n            });\n\n            // ×アイコン押下したら、\n            $searchArea.find(\".right-icon\").click(function(){\n              // ×アイコンの色を薄くして\n              $(this).css('color','#ccc')\n                      // 検索条件をクリアする\n                     .parent().find(\"input\").val('');\n            });\n        });\n\n    // ドキュメントタイトルの\n    $('#header>h1')\n        // 直下に検索結果エリアを挿入\n        .before(\n            '<div id=\"search-result-area\">' +\n                '<div id=\"search-result-subheader\"></div>' +\n                '<div id=\"search-result-content\"></div>' +\n            '</div>')\n        // イベント登録\n        .ready(function() {\n            $(this)\n                .find('#search-result-area')\n                    // 検索結果エリアのバツアイコンをクリックしたら、\n                    .on(\"click\", '#remove-search-result', function(e) {\n                      var $searchResultArea = $(e.delegateTarget)\n                      // 検索結果エリアを非表示モードにする\n                      $searchResultArea.removeClass('show');\n                      // 検索結果エリアの中身を削除する\n                      $searchResultArea.find('#search-result-subheader').empty();\n                      $searchResultArea.find('#search-result-content').empty();\n                    })\n                    // 前ページリンクをクリックしたら、１ページ前を検索する\n                    .on(\"click\", \"#prevPageLink\", {navi:-1}, doSearch)\n                    // 次ページリンクをクリックしたら、１ページ後を検索する\n                    .on(\"click\", \"#nextPageLink\", {navi:1}, doSearch);\n        });\n\n\n\n    /**\n     * 検索処理\n     *\n     * @param  {eventObject} event\n     * @return {boolean}  submit処理を中断させるために必ずfalseを返却する\n     */\n    function doSearch(event){\n      // 検索フィールドの値をトリムして取得\n      var searchQuery = $.trim($('#search-query').val());\n      // 空の場合は検索処理を実行しない\n      if(searchQuery.length == 0) {\n        return false;\n      }\n\n\n      // 表示開始位置、表示件数の取得\n      var start = parseInt($('#search-start').val()),\n          num = parseInt($('#search-num').val());\n      // 表示開始位置のチェック\n      if(start < 0) {\n        start = 0;\n      }\n      // 表示件数のチェック\n      if(num < 1 || num > 100) {\n        num = 20;\n      }\n      // 表示ページ情報の取得\n      switch(event.data.navi) {\n        case -1:\n          // 前のページの場合\n          start -= num;\n          break;\n        case 1:\n          // 次のページの場合\n          start += num;\n          break;\n        default:\n        case 0:\n          start = 0;\n          break;\n      }\n\n\n      // URLを構築\n      var url = FESS_JSON_ENDPOINT + '?callback=?' + // 別ドメインを想定してJSONP形式でリクエストを送信する\n                                     '&q=' + encodeURIComponent(searchQuery) +\n                                     '&start=' + start +\n                                     '&num=' + num;\n\n      // 検索リクエスト送信\n      // 別ドメインを想定してJSONP形式でリクエストを送信する\n      $.ajax({\n          url: url,\n          dataType: 'jsonp',\n          success: renderSearchResult\n      });\n\n\n      // ページ情報の更新\n      $('#searchNum').val(num);\n\n      // ページ表示を上部に移動\n      $(document).scrollTop(0);\n\n      // サブミットを抑止するためにfalseを返す\n      return false;\n    };\n\n\n    /**\n     * 検索成功時に検索結果を描画する\n     *\n     * @param  {Anything} data レスポンスデータ\n     */\n    function renderSearchResult(data) {\n      // 検索結果処理\n      var dataResponse = data.response;\n      // ステータスチェック\n      if(dataResponse.status != 0) {\n        alert(\"検索中に問題が発生しました。\");\n        return;\n      }\n\n      // 検索結果領域を表示する\n      $('#search-result-area').addClass('show');\n\n      var $searchResultSubheader = $('#search-result-subheader'),\n          $searchResultContent = $('#search-result-content'),\n          record_count = dataResponse.record_count;\n\n      // 検索結果がない場合\n      if(record_count == 0) {\n        // サブヘッダーに出力\n        $searchResultSubheader[0].innerHTML =  '<div id=\"remove-search-result\" style=\"float:right;\"><i class=\"fa fa-times\"></i></div>';\n\n        // 結果領域に出力\n        $searchResultContent[0].innerHTML = '<b>' + dataResponse.q + '</b>に一致する情報は見つかりませんでした。';\n\n        return;\n      }\n\n\n      // 検索にヒットした場合\n      var page_number = dataResponse.page_number,\n          page_size = dataResponse.page_size,\n          page_count = dataResponse.page_count,\n          startRange = (page_number - 1) * page_size + 1,\n          endRange = page_number * page_size,\n          i = 0,\n          max,\n          offset = startRange - 1;\n\n      $('#search-start').val(offset);\n\n\n      // サブヘッダーに出力\n      $searchResultSubheader[0].innerHTML = '<b>' + dataResponse.q + '</b> の検索結果 ' +\n                                record_count + \" 件中 \" +  startRange + ' - ' +\n                                endRange + ' 件目 (' + dataResponse.exec_time + ' 秒)' +\n                               '<div id=\"remove-search-result\" style=\"float:right;\"><i class=\"fa fa-times\"></i></div>'\n\n      // 検索結果領域のクリア\n      $searchResultContent.empty();\n\n\n      // 検索結果の出力\n      var $resultBody = $(\"<ol/>\");\n      var results = dataResponse.result;\n      for(i = 0, max = results.length; i < max; i++) {\n        var element =\n            '<li>' +\n                '<h4 class=\"title\">' +\n                    '<a href=\"' +results[i].url_link + '\">' + results[i].title + '</a>' +\n                '</h4>' +\n                '<div class=\"body\">' +\n                    results[i].content_description +\n                    '<br/>' +\n                    '<cite>' + results[i].site + '</cite>' +\n                '</div>' +\n            '</li>';\n\n        $(element).appendTo($resultBody);\n      }\n      $resultBody.appendTo($searchResultContent);\n\n\n      // ページ番号情報の出力\n      var pageArea = [];\n      pageArea.push('<div id=\"pageInfo\">', page_number, 'ページ目<br/>');\n      if(page_number > 1) {\n        // 前のページへのリンク\n        pageArea.push('<a id=\"prevPageLink\" href=\"#\">&lt;&lt;前ページへ</a> ');\n      }\n      if(page_number < page_count) {\n        // 次のページへのリンク\n        pageArea.push('<a id=\"nextPageLink\" href=\"#\">次ページへ&gt;&gt;</a>');\n      }\n      pageArea.push('</div>');\n      $(pageArea.join(\"\")).appendTo($searchResultContent);\n    }\n});\n\n```\n\n\n```css:full-text-search.css\n@charset \"UTF-8\";\n\n#search-area {\n    margin-bottom: 1em;\n}\n\n.search-input-area {\n    position:relative;\n}\n\n/* 入力項目 */\n#search-query {\n    padding: 0.7em 2em;\n    width: 100%;\n    color: black;\n    font-family: arial,sans-serif;\n    font-size: 1em;\n    border: 1px solid #ccc;\n    border-radius: 2em;\n    outline: 0;\n}\n\n.search-input-area input:focus {\n    border: 1px solid #4d90fe;\n}\n\n/* アイコンは入力項目の左と右に配置する */\n.search-input-area .left-icon,\n.search-input-area .right-icon {\n    /* 縦方向の中央寄せ */\n    position:absolute;\n    top: 50%;\n    margin-top: -0.5em;\n    font-sise: 1em;\n    /* 要素にマウスを合わせたら、マウスポインタのマークを変える */\n    cursor:pointer;\n}\n\n.search-input-area .left-icon {\n    left: 0.7em;\n    color:#444;\n}\n\n.search-input-area .right-icon {\n    right: 0.7em;\n    /* 最初は、グレーアウトしておく */\n    color: #ccc;\n}\n\n/* アイコンにマウスを合わせたら、サイズを大きくする */\n.search-input-area .left-icon:hover,\n.search-input-area .right-icon:hover {\n    font-size: 1.4em;\n}\n\n\n.search-input-area .left-icon:hover {\n    left: 0.5em;\n}\n\n\n.search-input-area .right-icon:hover {\n    right: 0.5em;\n}\n\n/* 検索結果表示時に適用するスタイル */\n#search-result-area.show {\n    background: #f8f8f7;\n    border: 0px solid;\n    border-radius: 0.5em;\n    margin-top: 1em;\n    margin-bottom: 1em;\n    padding: 1em;\n}\n\n```\n\n### ドキュメントに全文検索用資産の読み込み処理を追加\n前手順でドキュメント用Webサーバに配置した`full-text-search.js`と`full-text-search.css`を、\n各ドキュメントから読み込むようにします。\n`full-text-search.js`はjQueryに依存しているので、\n既存のドキュメントで読み込んでいない場合はjQueryも読み込みも追加してください。\n\nドキュメント用Webサーバがこのようなフォルダ構成だとしたら、\n\n```\nドキュメント用Webサーバのドキュメントルート\n├── full-text-search.css\n├── full-text-search.js\n└── asciidoctor-sample\n    └── asciidoctor-sample.html\n```\n\n\n`asciidoctor-sample.adoc`には下記を追加します。\n\n```\n++++\n<link rel=\"stylesheet\" href=\"../full-text-search.css\"></link>\n<script\n  src=\"https://code.jquery.com/jquery-3.2.1.min.js\"\n  integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\"\n  crossorigin=\"anonymous\"></script>\n<script src=\"../full-text-search.js\"></script>\n++++\n```\n\n### 全文検索ができるかの確認\n以上の手順を実施すると、Asdciidoctorで全文検索ができるようになります。\nドキュメントをブラウザで見ると、目次上部に検索窓が追加されています。\n![7_全文検索イメージ_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/99093cd6-58e8-7cde-a3d8-5bec2a020668.png)\n<br/>\n\n検索条件を入力し、虫眼鏡アイコンをクリックすると、検索結果が表示されます。\n![7_全文検索イメージ_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/cde3d8ea-d883-a66b-f88d-9a5941026bc9.png)\n<br/>\n\n\n## まとめ\nFessのREST APIを使用してAsciidoctorで全文検索できるようにする方法を紹介しました。\nFessのREST APIを使えば、Asciidoctorに限らず、様々なシステムに全文検索機能を導入できそうです。\n\n\n## 参考\n* [Fess で作るApache Solrベースの検索サーバー 〜 REST API 編](http://fess.codelibs.org/ja/articles/article-4.html#js)\n* [全文検索サーバー Fess を Docker で動かす](http://qiita.com/cookienote/items/1f2443be25630a78d946)\n\n","comments_count":0,"created_at":"2017-06-26T00:21:37+09:00","likes_count":21,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/41febdc6-bf5d-50b8-a695-3c017b8f766a/","title":"10分でできる！ @ngrx/storeチュートリアル with @ngrx/schematics","date":"2018-07-30T18:01:02+09:00","excerpt":"なにこれAngularで状態管理する方法をざっくり把握するためのチュートリアルです。@ngrx/storeベースの簡単なアプリ（数をカウントするアプリ）を作成します。作るだけなら10分程度で出来上がるので、とりあえず手を動かしてngrxを最...","tags":["Angular","angular-cli","ngrx","Angular6","Qiita"],"keywords":["Angular"],"thumbnail":""},"id":"41febdc6-bf5d-50b8-a695-3c017b8f766a","title":"10分でできる！ @ngrx/storeチュートリアル with @ngrx/schematics","rendered_body":"\n<h2>\n<span id=\"なにこれ\" class=\"fragment\"></span><a href=\"#%E3%81%AA%E3%81%AB%E3%81%93%E3%82%8C\"><i class=\"fa fa-link\"></i></a>なにこれ</h2>\n\n<p>Angularで状態管理する方法をざっくり把握するためのチュートリアルです。<a href=\"http://ngrx.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/store</a>ベースの簡単なアプリ（数をカウントするアプリ）を作成します。作るだけなら10分程度で出来上がるので、とりあえず手を動かしてngrxを最低限を把握したい人向けです。ソースコードも<a href=\"https://github.com/Takumon/ngrx-tutorial/tree/with-ngrx\" rel=\"nofollow noopener\" target=\"_blank\">GitHub</a>に置いているので参考にしてください。<br>\nngrxを使うとボイラープレートが非常に多くなりますが、今回のチュートリアルでは<a href=\"https://github.com/ngrx/platform/tree/master/docs/schematics\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/schematics</a> を使い、ボイラープレートを自動生成することで極力手間を省いています。</p>\n\n<h2>\n<span id=\"アプリの完成イメージ\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E5%AE%8C%E6%88%90%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8\"><i class=\"fa fa-link\"></i></a>アプリの完成イメージ</h2>\n\n<ul>\n<li>\n<code>+</code>ボタンをクリックするとCountが+1される</li>\n<li>\n<code>-</code> ボタンをクリックするとCountが- 1される\n<a href=\"https://camo.qiitausercontent.com/b480b8a4f23b0ad498a61f36f69be9fae9cef250/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f38653666363435652d613733342d646238642d656336622d3134346330666465653162302e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b480b8a4f23b0ad498a61f36f69be9fae9cef250/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f38653666363435652d613733342d646238642d656336622d3134346330666465653162302e676966\" alt=\"counterapp.gif\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/8e6f645e-a734-db8d-ec6b-144c0fdee1b0.gif\"></a>\n</li>\n</ul>\n\n<h2>\n<span id=\"やることやらないこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8%E3%82%84%E3%82%89%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やること/やらないこと</h2>\n\n<ul>\n<li>やる\n\n<ul>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/store/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/store</a>の使い方\n\n<ul>\n<li>Storeの作り方</li>\n<li>Stateの作り方</li>\n<li>Reducerの作り方</li>\n<li>Actionsの作り方</li>\n</ul>\n</li>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/schematics/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/schematics</a>の使い方\n\n<ul>\n<li>オプションなどを使い極力手間を減らす方法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>やらない （下記を理解するには<a href=\"#%E5%8F%82%E8%80%83\">参考</a>のQiitaの記事を見てください。）\n\n<ul>\n<li>状態管理の説明</li>\n<li>Reduxの説明</li>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/router-store/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/router-store</a>の使い方</li>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/entity/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/entity</a>の使い方</li>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/effects/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/effect</a>の使い方<br>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"チュートリアル概要\" class=\"fragment\"></span><a href=\"#%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>チュートリアル概要</h2>\n\n<p>段階を踏んで、ステップごとに動作確認しながら作成していきます。<br>\n各ステップ終了時点のソースコードはGitHubに用意しています。参考にしてください。<br>\n大部分はSchematicsを使ってngコマンドでボイラープレートを自動生成し、メイン部分のみ実装という感じです。</p>\n\n<ol>\n<li>Angularアプリを生成（1分）  ※<a href=\"https://github.com/Takumon/ngrx-tutorial/tree/generated-with-angualr-cli\" rel=\"nofollow noopener\" target=\"_blank\">終了時点のソース</a>\n</li>\n<li>ngrxを使わずにカウント処理実装（2分）※<a href=\"https://github.com/Takumon/ngrx-tutorial/tree/no-ngrx\" rel=\"nofollow noopener\" target=\"_blank\">終了時点のソース</a>\n</li>\n<li>ngrxインストール、初期設定（2分） ※<a href=\"https://github.com/Takumon/ngrx-tutorial/tree/after-ngrx-setting\" rel=\"nofollow noopener\" target=\"_blank\">終了時点のソース</a>\n</li>\n<li>ngrxを使ってカウント処理実装（5分） ※<a href=\"https://github.com/Takumon/ngrx-tutorial/tree/with-ngrx\" rel=\"nofollow noopener\" target=\"_blank\">終了時点のソース</a>\n</li>\n</ol>\n\n<h2>\n<span id=\"前提条件\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6\"><i class=\"fa fa-link\"></i></a>前提条件</h2>\n\n<ul>\n<li>\n<a href=\"https://nodejs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Node.js</a>インストール済み</li>\n<li>\n<a href=\"https://cli.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular CLI</a>グローバルインストール済み</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> npm i <span class=\"nt\">-g</span> @angular/cli\n</pre></div></div>\n\n<ul>\n<li>\n<a href=\"https://cli.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/schematics</a>グローバルインストール済み</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> npm i <span class=\"nt\">-g</span> @ngrx/schematics\n</pre></div></div>\n\n<h2>\n<span id=\"1-angularアプリを生成1分\" class=\"fragment\"></span><a href=\"#1-angular%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E7%94%9F%E6%88%901%E5%88%86\"><i class=\"fa fa-link\"></i></a>1. Angularアプリを生成（1分）</h2>\n\n<ul>\n<li>ng newコマンドを実行します。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng new ngrx-tutorial\n</pre></div></div>\n\n<ul>\n<li>生成されたアプリ配下に移動し、一旦Webアプリを立ち上げてみます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> <span class=\"nb\">cd </span>ngrx-tutorial\n<span class=\"gp\">$</span> ng serve <span class=\"nt\">-o</span>\n</pre></div></div>\n\n<ul>\n<li>ブラウザが起動し下記のような画面が表示されたら成功です。\n<a href=\"https://camo.qiitausercontent.com/f46653279a0efbe1432919aa808f440fc6eb1ede/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35633139633366302d313034612d336566322d613333642d3331356330663061336639662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/f46653279a0efbe1432919aa808f440fc6eb1ede/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35633139633366302d313034612d336566322d613333642d3331356330663061336639662e706e67\" alt=\"スクリーンショット 2018-07-30 1.03.59.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5c19c3f0-104a-3ef2-a33d-315c0f0a3f9f.png\"></a>\n</li>\n</ul>\n\n<h2>\n<span id=\"2-ngrxを使わずにカウント処理実装2分\" class=\"fragment\"></span><a href=\"#2-ngrx%E3%82%92%E4%BD%BF%E3%82%8F%E3%81%9A%E3%81%AB%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E5%87%A6%E7%90%86%E5%AE%9F%E8%A3%852%E5%88%86\"><i class=\"fa fa-link\"></i></a>2. ngrxを使わずにカウント処理実装（2分）</h2>\n\n<p>カウント処理の資産は全て<code>src/app/counter</code>フォルダ配下に作成します。<br>\nまずはコマンドラインからボイラープレートを作成し、その後カウント処理を実装します。</p>\n\n<h3>\n<span id=\"ボイラープレート作成\" class=\"fragment\"></span><a href=\"#%E3%83%9C%E3%82%A4%E3%83%A9%E3%83%BC%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>ボイラープレート作成</h3>\n\n<ul>\n<li>カウント処理関連資産をまとめるモジュールを作成します。\n\n<ul>\n<li>このモジュールをアプリ全体のモジュールに登録するため<code>--module</code>オプションを指定します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g module counter <span class=\"nt\">--module</span><span class=\"o\">=</span>app.module.ts\n</pre></div></div>\n\n<ul>\n<li>カウント処理用のコンポーネントを作成します。\n\n<ul>\n<li>上記で作成したモジュールにコンポーネントを登録するため<code>--module</code>オプションを指定します。</li>\n<li>最終的にアプリ全体のモジュールにコンポーネントを登録するため<code>--export</code>オプションを指定します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g component counter <span class=\"nt\">--module</span><span class=\"o\">=</span>counter/counter.module.ts <span class=\"nt\">--export</span>\n</pre></div></div>\n\n<ul>\n<li>\n<code>app.component.html</code>修正し、作成したカウント処理用のコンポーネントを呼び出すようにします。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.html</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;app-counter&gt;&lt;/app-counter&gt;</span>\n</pre></div>\n</div>\n\n<ul>\n<li>一旦ここまででWebアプリを立ち上げてみます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng serve <span class=\"nt\">-o</span>\n</pre></div></div>\n\n<ul>\n<li>ブラウザが起動し、下記画面が表示されます。開発者ツールでエラーがなければ成功です。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/6ed3cc13498f56621ca94113a6eacdc34949e17f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37373261373530312d333461372d336566312d363636362d6431336537393338326365362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/6ed3cc13498f56621ca94113a6eacdc34949e17f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37373261373530312d333461372d336566312d363636362d6431336537393338326365362e706e67\" alt=\"スクリーンショット 2018-07-30 1.06.30.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/772a7501-34a7-3ef1-6666-d13e79382ce6.png\"></a></p>\n\n<h3>\n<span id=\"処理実装\" class=\"fragment\"></span><a href=\"#%E5%87%A6%E7%90%86%E5%AE%9F%E8%A3%85\"><i class=\"fa fa-link\"></i></a>処理実装</h3>\n\n<ul>\n<li>カウント用コンポーネントで実際の処理を記述します。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/counter.component.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span><span class=\"p\">,</span> <span class=\"nx\">OnInit</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-counter'</span><span class=\"p\">,</span>\n  <span class=\"na\">templateUrl</span><span class=\"p\">:</span> <span class=\"s1\">'./counter.component.html'</span><span class=\"p\">,</span>\n  <span class=\"na\">styleUrls</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'./counter.component.css'</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">CounterComponent</span> <span class=\"kr\">implements</span> <span class=\"nx\">OnInit</span> <span class=\"p\">{</span>\n  <span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n  <span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">increment</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">decrement</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">count</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">count</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/counter.component.html</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;button</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">increment</span><span class=\"err\">()\"</span><span class=\"nt\">&gt;</span>+<span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">decrement</span><span class=\"err\">()\"</span><span class=\"nt\">&gt;</span>-<span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"nt\">&lt;div&gt;</span>Count: {{count}}<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n</div>\n\n<ul>\n<li>ここまででWebアプリを立ち上げてみます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng serve <span class=\"nt\">-o</span>\n</pre></div></div>\n\n<ul>\n<li>ブラウザが起動し下記画面が表示されます。<code>+</code>,<code>-</code>ボタンをクリックすると数字が増えたり減ったりした、開発者ツールでもエラーがなければ成功です。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" alt=\"スクリーンショット 2018-07-30 0.59.12.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png\"></a></p>\n\n<h2>\n<span id=\"3-ngrxインストール初期設定2分\" class=\"fragment\"></span><a href=\"#3-ngrx%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E5%88%9D%E6%9C%9F%E8%A8%AD%E5%AE%9A2%E5%88%86\"><i class=\"fa fa-link\"></i></a>3. ngrxインストール、初期設定（2分）</h2>\n\n<p>@ngrx/storeをアプリに導入し、初期設定をします。</p>\n\n<ul>\n<li>下記ライブラリをインストールします。\n\n<ul>\n<li>\n<code>@ngrx/schematics</code>\n\n<ul>\n<li>Angualr CLIでngrxの雛形を作るためのライブラリ</li>\n</ul>\n</li>\n<li>\n<code>@ngrx/store</code>\n\n<ul>\n<li>ngrxでStore,Reducer,Actionを使うためのライブラリ</li>\n</ul>\n</li>\n<li>\n<code>@ngrx/store-devtools</code>\n\n<ul>\n<li>強力なデバッカを使えるようにするためのライブラリ</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> npm i <span class=\"nt\">-D</span> @ngrx/schematics\n<span class=\"gp\">$</span> npm i <span class=\"nt\">-s</span> @ngrx/store\n<span class=\"gp\">$</span> npm i <span class=\"nt\">-s</span> @ngrx/store-devtools\n</pre></div></div>\n\n<p>*<code>@ngrx/schematics</code>をデフォルトのSchematicsに追加します（コマンドラインでngrxのボイラープレート生成時に<code>@ngrx/schematics</code>の指定を省略できるようにするためです。）</p>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng config cli.defaultCollection @ngrx/schematics\n</pre></div></div>\n\n<ul>\n<li>上記を実行すると、<code>angular.json</code>にこのような設定が追加されます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">angular.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\">  </span><span class=\"s2\">\"defaultProject\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ngrx-tutorial\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"cli\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"defaultCollection\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"@ngrx/schematics\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>ルートのStoreを作成します。\n\n<ul>\n<li>\n<code>src/app/state</code>配下に生成したいので<code>--statePath</code>オプションを指定します。</li>\n<li>アプリ全体のモジュールに登録したいので<code>--module</code>オプションを指定します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g store state <span class=\"nt\">--statePath</span> state <span class=\"nt\">--root</span> <span class=\"nt\">--module</span> app.module.ts\n</pre></div></div>\n\n<ul>\n<li>上記コマンドで更新した<code>src/app/app.module.ts</code>で<code>environment</code>のimport文のパスでエラーが出ている場合は修正してください。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">app/src/app.module.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"gd\">- import { environment } from '../../environments/environment';\n</span><span class=\"gi\">+ import { environment } from '../environments/environment';\n</span></pre></div>\n</div>\n\n<ul>\n<li>ここまででWebアプリを立ち上げてみます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng serve <span class=\"nt\">-o</span>\n</pre></div></div>\n\n<ul>\n<li>手順2の動作確認時と同様の挙動になります、開発者ツールでもエラーがなければ成功です。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" alt=\"スクリーンショット 2018-07-30 0.59.12.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png\"></a></p>\n\n<h2>\n<span id=\"4-ngrxを使ってカウント処理実装5分\" class=\"fragment\"></span><a href=\"#4-ngrx%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E5%87%A6%E7%90%86%E5%AE%9F%E8%A3%855%E5%88%86\"><i class=\"fa fa-link\"></i></a>4. ngrxを使ってカウント処理実装（5分）</h2>\n\n<p>ここからは実際にStore、Reducer、Actionを作成し、カウント処理の値をStoreに移行します。<br>\nここで作成する資産はカウンター処理に閉じたものなので、<code>src/app/counter/state</code>配下に作成します。<br>\nまた<code>@ngrx/schemetics</code>のデフォルトではReducer、Actionなどの資産が、役割ごとにフォルダ分けされてしまいますが、１フォルダに集約したほうがソースが修正しやすいので、今回は全て<code>src/app/counter/state</code>の直下に作成します。</p>\n\n<h3>\n<span id=\"ボイラープレート生成\" class=\"fragment\"></span><a href=\"#%E3%83%9C%E3%82%A4%E3%83%A9%E3%83%BC%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E7%94%9F%E6%88%90\"><i class=\"fa fa-link\"></i></a>ボイラープレート生成</h3>\n\n<ul>\n<li>Store\n\n<ul>\n<li>\n<code>src/app/counter/state</code>直下に作成するため<code>--statePath</code>オプションを指定します。</li>\n<li>カウント処理関連モジュールに登録したいので<code>--module</code>オプションを指定します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g store counter/counter <span class=\"nt\">--statePath</span> state <span class=\"nt\">--module</span> counter.module.ts\n</pre></div></div>\n\n<ul>\n<li>Reducer\n\n<ul>\n<li>上記で作成したStoreに本Reducerを登録したいため<code>--reducers</code>オプションを指定します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g reducer counter/state/counter <span class=\"nt\">--reducers</span> index.ts\n</pre></div></div>\n\n<ul>\n<li>Action\n\n<ul>\n<li>\n<code>src/app/counter/state</code>直下に作成するため<code>--flat</code>オプションを登録します。</li>\n</ul>\n</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng g action counter/state/counter <span class=\"nt\">--flat</span>\n</pre></div></div>\n\n<p>※この時点ではコンパイルエラーがでますので、動作確認はできません。そのまま次に進みます。</p>\n\n<h2>\n<span id=\"処理実装-1\" class=\"fragment\"></span><a href=\"#%E5%87%A6%E7%90%86%E5%AE%9F%E8%A3%85-1\"><i class=\"fa fa-link\"></i></a>処理実装</h2>\n\n<p>依存関係の都合でボイラープレートとは逆順で実装していきます。</p>\n\n<h3>\n<span id=\"action\" class=\"fragment\"></span><a href=\"#action\"><i class=\"fa fa-link\"></i></a>Action</h3>\n\n<p>ボイラープレート生成時から下記のように修正します。<br>\n※コメントはコードの説明なので無視して実装してください。</p>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/state/counter.actions.ts</span></div>\n<div class=\"highlight\"><pre>import { Action } from '@ngrx/store';\n\nexport enum CounterActionTypes {\n// Actionごとに型を定義します。\n<span class=\"gd\">-  LoadCounters = '[Counter] Load Counters'\n</span><span class=\"gi\">+  CountIncrement = '[Counter] Increment Count',\n+  CountDecrement = '[Counter] Decrement Count'\n</span>}\n\n// Actionごとに@ngrx.storeのActionをインプリしたクラスを作成します。\n// 複雑な処理をする場合はコンストラクタ引数をとりますが、\n// 本チュートリアルでは簡単のため引数なしにしています。\n<span class=\"gd\">- export class Counter implements Action {\n-   readonly type = CounterActionTypes.LoadCounters;\n- }\n</span><span class=\"gi\">+ export class CountIncrement implements Action {\n+   readonly type = CounterActionTypes.CountIncrement;\n+   public constructor() {}\n+ }\n+ \n+ export class CountDecrement implements Action {\n+   readonly type = CounterActionTypes.CountDecrement;\n+   public constructor() {}\n+ }\n</span>\n\n// 上記で定義したActionクラスを集約した型を定義します。Reducerで使うためです。\n<span class=\"gd\">- export type CounterActions = LoadCounters;\n</span><span class=\"gi\">+ export type CounterActions = CountIncrement | CountDecrement;\n</span></pre></div>\n</div>\n\n<h2>\n<span id=\"reducer作成\" class=\"fragment\"></span><a href=\"#reducer%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>Reducer作成</h2>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/state/counter.reducer.ts</span></div>\n<div class=\"highlight\"><pre>import { Action } from '@ngrx/store';\n<span class=\"gi\">+ import { CounterActionTypes } from './counter.actions';\n</span>\n\nexport interface State {\n// カウンター処理に置けるStateを定義します。\n<span class=\"gi\">+   count: number;\n</span>}\n\nexport const initialState: State = {\n// カウンター処理に置けるStateの初期値を定義します。\n<span class=\"gi\">+   count: 0\n</span>};\n\n\nexport function reducer(state = initialState, action: Action): State {\n  switch (action.type) {\n// 引数として受け取ったActionの型に応じて処理を振り分けます\n// ここではカウンター処理に関連するアクションのみ拾って、他はStateをそのまま返します。\n<span class=\"gi\">+     case CounterActionTypes.CountIncrement:\n</span>// Stateを変更する場合は、Stateがイミュータブルになるように元のStateには変更を加えず\n// Object.assingで新規オブジェクトを作るようにします。\n<span class=\"gi\">+       return Object.assign({}, { ...state, count : state.count + 1 });\n+     case CounterActionTypes.CountDecrement:\n+       return Object.assign({}, { ...state, count : state.count - 1 });\n</span>    default:\n      return state;\n  }\n}\n\n// コンポーネントでStateのCountを取得するための関数を定義します。\n// Storeの方にも定義しますが、ここでは本ファイルで定義している\n// Stateのプロパティに関連する処理のみ定義します。\n<span class=\"gi\">+ export const getCount = (state: State) =&gt; state.count;\n</span></pre></div>\n</div>\n\n<ul>\n<li>Store</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/state/index.ts</span></div>\n<div class=\"highlight\"><pre>import {\n  ActionReducerMap,\n  createFeatureSelector,\n  createSelector,\n  MetaReducer\n} from '@ngrx/store';\n// ng gコマンド生成時は相対パスがずれている可能性があるため\n// その場合は修正する\n<span class=\"gd\">- import { environment } from '../../environments/environment';\n</span><span class=\"gi\">+ import { environment } from '../../../environments/environment';\n</span>import * as fromCounter from './counter.reducer';\n\nexport interface State {\n\n  counter: fromCounter.State;\n}\n\nexport const reducers: ActionReducerMap&lt;State&gt; = {\n\n  counter: fromCounter.reducer,\n};\n\n\nexport const metaReducers: MetaReducer&lt;State&gt;[] = !environment.production ? [] : [];\n\n// コンポーネントでStateのプロパティを取得するための関数を定義します。\n// 複数コンポーネントで使う度に定義するのは冗長なのでココで共通的に定義します。\n<span class=\"gi\">+ export const getCounterFeatureState = createFeatureSelector&lt;State&gt;('counter');\n+ export const getCounter = createSelector(getCounterFeatureState, s =&gt; s.counter);\n+ export const getCount = createSelector(getCounter, fromCounter.getCount);\n</span></pre></div>\n</div>\n\n<ul>\n<li>Component</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/counter.component.ts</span></div>\n<div class=\"highlight\"><pre>import { Component, OnInit } from '@angular/core';\n<span class=\"gi\">+ import { Observable } from 'rxjs';\n+ import { Store } from '@ngrx/store';\n</span>\n<span class=\"gi\">+ import * as CounterReducer from './state/counter.reducer';\n+ import * as CounterActions from './state/counter.actions';\n+ import { getCount } from './state';\n</span>\n<span class=\"gu\">@Component({\n</span>  selector: 'app-counter',\n  templateUrl: './counter.component.html',\n  styleUrls: ['./counter.component.css']\n})\nexport class CounterComponent implements OnInit {\n// Storeでの値変更を順次受け付けれるように型をObservableに変更します\n<span class=\"gd\">-   count = 0;\n</span><span class=\"gi\">+   count$: Observable&lt;number&gt;;\n</span>\n// Storeをインジェクションします\n<span class=\"gd\">-   constructor() { }\n</span><span class=\"gi\">+   constructor(private store: Store&lt;CounterReducer.State&gt;) {\n</span>// Storeからカウンタを取得します\n<span class=\"gi\">+     this.count$ = store.select(getCount);\n+  }\n</span>\n  ngOnInit() {\n  }\n\n  increment() {\n// インクリメントの実処理はカウンタのReducerに任せるので\n// ここではActionをdispatchするだけです。\n<span class=\"gd\">-     this.count = this.count + 1;\n</span><span class=\"gi\">+     this.store.dispatch(new CounterActions.CountIncrement());\n</span>  }\n\n  decrement() {\n<span class=\"gd\">-     this.count = this.count - 1;\n</span><span class=\"gi\">+     this.store.dispatch(new CounterActions.CountDecrement());\n</span>  }\n\n}\n</pre></div>\n</div>\n\n<ul>\n<li>ConponentのHTML</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/counter.component.html</span></div>\n<div class=\"highlight\"><pre>&lt;button (click)=\"increment()\"&gt;+&lt;/button&gt;\n&lt;button (click)=\"decrement()\"&gt;-&lt;/button&gt;\n&lt;!-- 変数名と型が変わったのでHTMLも若干修正します --&gt;\n<span class=\"gd\">- &lt;div&gt;Count: {{count }}&lt;/div&gt;\n</span><span class=\"gi\">+ &lt;div&gt;Count: {{count$ | async }}&lt;/div&gt;\n</span></pre></div>\n</div>\n\n<ul>\n<li>Webアプリを立ち上げてみます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ng serve <span class=\"nt\">-o</span>\n</pre></div></div>\n\n<ul>\n<li>開発者ツールなどで全くエラーが出ていなければ成功です。見た目は変わっていませんが、Countは<code>@ngrx/store</code>で管理されるようになっています。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e4f3b6b6888e2f7e618fc6587c88775f7b161624/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64353036626336652d636463652d346430302d313130392d3261663966343738303636332e706e67\" alt=\"スクリーンショット 2018-07-30 0.59.12.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png\"></a></p>\n\n<h2>\n<span id=\"補足ストアとストア登録方法\" class=\"fragment\"></span><a href=\"#%E8%A3%9C%E8%B6%B3%E3%82%B9%E3%83%88%E3%82%A2%E3%81%A8%E3%82%B9%E3%83%88%E3%82%A2%E7%99%BB%E9%8C%B2%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>補足：ストアとストア登録方法</h2>\n\n<p>ストアとストア登録処理はボイラープレートで生成するのでココで改めて説明します。</p>\n\n<p><strong>まずはルートのストアです。</strong><br>\nストアは<code>src/app/state/index.ts</code>に作成されます。<br>\n中身を見るとわかりますが、実態はReducerを集約したActionReducerMapです。<br>\nReducerを新しく作成した時は、このマップにどんどん追加していきます。</p>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/state/index.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span>\n  <span class=\"nx\">ActionReducer</span><span class=\"p\">,</span>\n  <span class=\"nx\">ActionReducerMap</span><span class=\"p\">,</span>\n  <span class=\"nx\">createFeatureSelector</span><span class=\"p\">,</span>\n  <span class=\"nx\">createSelector</span><span class=\"p\">,</span>\n  <span class=\"nx\">MetaReducer</span>\n<span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@ngrx/store'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">environment</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../../environments/environment'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"kr\">interface</span> <span class=\"nx\">State</span> <span class=\"p\">{</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">reducers</span><span class=\"p\">:</span> <span class=\"nx\">ActionReducerMap</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ココにReducerが追加されていきます。</span>\n  <span class=\"c1\">// 今回のチュートリアルではルートのストアに１つもReducerを定義していないので空っぽです。</span>\n<span class=\"p\">};</span>\n\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">metaReducers</span><span class=\"p\">:</span> <span class=\"nx\">MetaReducer</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"o\">&gt;</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"o\">!</span><span class=\"nx\">environment</span><span class=\"p\">.</span><span class=\"nx\">production</span> <span class=\"p\">?</span> <span class=\"p\">[]</span> <span class=\"p\">:</span> <span class=\"p\">[];</span>\n\n</pre></div>\n</div>\n\n<p>ストアをモジュールに登録するには下記のように<code>StoreModule.forRoot</code>を使います(ボイラープレートでやってくれます)</p>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/app.module.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"c1\">// ・・・</span>\n  <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"c1\">// ・・・</span>\n    <span class=\"nx\">StoreModule</span><span class=\"p\">.</span><span class=\"nx\">forRoot</span><span class=\"p\">(</span><span class=\"nx\">reducers</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">metaReducers</span> <span class=\"p\">}),</span>\n    <span class=\"o\">!</span><span class=\"nx\">environment</span><span class=\"p\">.</span><span class=\"nx\">production</span> <span class=\"p\">?</span> <span class=\"nx\">StoreDevtoolsModule</span><span class=\"p\">.</span><span class=\"nx\">instrument</span><span class=\"p\">()</span> <span class=\"p\">:</span> <span class=\"p\">[]</span>\n    <span class=\"c1\">// ・・・</span>\n  <span class=\"p\">],</span>\n  <span class=\"c1\">// ・・・</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppModule</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<p><strong>次にカウンタのストアに関してです。</strong><br>\nこちらもルートの場合とほぼ同じです。</p>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/state/index.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"c1\">// ・・・</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">reducers</span><span class=\"p\">:</span> <span class=\"nx\">ActionReducerMap</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// カウンタのReducerをマップに登録しています。</span>\n  <span class=\"na\">counter</span><span class=\"p\">:</span> <span class=\"nx\">fromCounter</span><span class=\"p\">.</span><span class=\"nx\">reducer</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">metaReducers</span><span class=\"p\">:</span> <span class=\"nx\">MetaReducer</span><span class=\"o\">&lt;</span><span class=\"nx\">State</span><span class=\"o\">&gt;</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"o\">!</span><span class=\"nx\">environment</span><span class=\"p\">.</span><span class=\"nx\">production</span> <span class=\"p\">?</span> <span class=\"p\">[]</span> <span class=\"p\">:</span> <span class=\"p\">[];</span>\n<span class=\"c1\">// ・・・</span>\n</pre></div>\n</div>\n\n<p>ただ登録は<code>StoreModule.forFeature</code>を使います。<br>\nこのメソッドは、機能毎に状態管理する時に使うもので、ルートのストアに指定した名前で登録されます。使う時になったら遅延ロードしてくれる機能を持っています。</p>\n\n<div class=\"code-frame\" data-lang=\"ts\">\n<div class=\"code-lang\"><span class=\"bold\">src/app/counter/counter.module.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"c1\">// ・・・</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">fromCounter</span> <span class=\"k\">from</span> <span class=\"s1\">'./state'</span><span class=\"p\">;</span>\n<span class=\"c1\">// ・・・</span>\n<span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"c1\">// ・・・</span>\n    <span class=\"c1\">// アプリ全体のストアにcounterという名前で登録します</span>\n    <span class=\"nx\">StoreModule</span><span class=\"p\">.</span><span class=\"nx\">forFeature</span><span class=\"p\">(</span><span class=\"s1\">'counter'</span><span class=\"p\">,</span> <span class=\"nx\">fromCounter</span><span class=\"p\">.</span><span class=\"nx\">reducers</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">metaReducers</span><span class=\"p\">:</span> <span class=\"nx\">fromCounter</span><span class=\"p\">.</span><span class=\"nx\">metaReducers</span> <span class=\"p\">})</span>\n    <span class=\"c1\">// ・・・</span>\n  <span class=\"p\">],</span>\n  <span class=\"c1\">// ・・・</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">CounterModule</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>以上で<code>@ngrx/schematics</code>を使った<code>@ngrx/store</code>のチュートリアルは終了です。<br>\n<code>ngrx</code>ライブラリは他にも<code>@ngrx/router-store</code>、<code>@ngrx/entity</code>、<code>@ngrx/effect</code>があるので、<br>\n今回のアプリをベースに拡張し、理解を深めてみるのも良いかもしれません。</p>\n\n<p>AngularはVue.jsなどと比較するとボイラープレートが多くなってしまいます。<br>\nしかし、ソースコード自動生成機能が充実しているので、けっこう便利なフレームワークです！<br>\nあまり周りでAngular使ってる人がいなくて寂しいのですが、、、、皆さん是非Angular使いましょう！</p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<ul>\n<li>GitHub\n\n<ul>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/store/README.md#ngrxstore\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/store</a>\n\n<ul>\n<li>公式ページ。サンプルは少し古いですが、ドキュメントは充実しています。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://github.com/ngrx/platform/blob/master/docs/schematics/README.md\" rel=\"nofollow noopener\" target=\"_blank\">@ngrx/schematics</a>\n\n<ul>\n<li>各リンクに行くと、コマンドのオプションの説明などが記載されています。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Medium\n\n<ul>\n<li>\n<a href=\"https://blog.nrwl.io/managing-state-in-angular-applications-22b75ef5625f\" rel=\"nofollow noopener\" target=\"_blank\">Managing State in Angular Applications</a>\n\n<ul>\n<li>Angularで状態管理する時のベストプラクティスを検討し、最終的に@ngrx/storeを紹介している記事です。ソースコードもGitHubにあり、大変参考になります。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Qiita\n\n<ul>\n<li>\n<a href=\"https://qiita.com/puku0x/items/0a8e7224761dc549bd06\" id=\"reference-55d4d1f3588dbe22005a\">@ngrx/storeと@ngrx/effectsの使い方</a>\n\n<ul>\n<li>GitHubに<a href=\"https://github.com/puku0x/ngrx-todo\" rel=\"nofollow noopener\" target=\"_blank\">サンプル</a>もありコード例が多く大変参考になりました。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://qiita.com/musou1500/items/8003c4a3f2b2e80d919f\" id=\"reference-0b88f55e95af744439cc\">@ngrx/schematicsを触ってみる</a>\n\n<ul>\n<li>\n<code>@ngrx/schematics</code>の使い方が網羅されており参考になりました。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://qiita.com/gen2-gk/items/5e5c5b81243def8edc2c#ngrx-%E9%96%A2%E9%80%A3%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AF1%E3%81%A4%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AB%E3%81%BE%E3%81%A8%E3%82%81%E3%82%8B\" id=\"reference-00af0c3c5f2c814f6e6e\">ngrxでハマったポイント</a>\n\n<ul>\n<li>ngrx関連資産をstoreフォルダ配下に集約するという知見はココを参考にさせていただきました。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://qiita.com/kouMatsumoto/items/c8297466c1824953632f\" id=\"reference-2bdc06375583d7c16351\">ngrx紹介</a>\n\n<ul>\n<li>ngrxを知るきっかけになった記事です。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","body":"## なにこれ\nAngularで状態管理する方法をざっくり把握するためのチュートリアルです。[@ngrx/store](http://ngrx.github.io/)ベースの簡単なアプリ（数をカウントするアプリ）を作成します。作るだけなら10分程度で出来上がるので、とりあえず手を動かしてngrxを最低限を把握したい人向けです。ソースコードも[GitHub](https://github.com/Takumon/ngrx-tutorial/tree/with-ngrx)に置いているので参考にしてください。\nngrxを使うとボイラープレートが非常に多くなりますが、今回のチュートリアルでは[@ngrx/schematics](https://github.com/ngrx/platform/tree/master/docs/schematics) を使い、ボイラープレートを自動生成することで極力手間を省いています。\n\n\n## アプリの完成イメージ\n* `+`ボタンをクリックするとCountが+1される\n* `-` ボタンをクリックするとCountが- 1される\n![counterapp.gif](https://qiita-image-store.s3.amazonaws.com/0/49915/8e6f645e-a734-db8d-ec6b-144c0fdee1b0.gif)\n\n## やること/やらないこと\n* やる\n    * [@ngrx/store](https://github.com/ngrx/platform/blob/master/docs/store/README.md)の使い方\n        * Storeの作り方\n        * Stateの作り方\n        * Reducerの作り方\n        * Actionsの作り方\n    * [@ngrx/schematics](https://github.com/ngrx/platform/blob/master/docs/schematics/README.md)の使い方\n        * オプションなどを使い極力手間を減らす方法\n* やらない （下記を理解するには[参考](#参考)のQiitaの記事を見てください。）\n    * 状態管理の説明\n    * Reduxの説明\n    * [@ngrx/router-store](https://github.com/ngrx/platform/blob/master/docs/router-store/README.md)の使い方\n    * [@ngrx/entity](https://github.com/ngrx/platform/blob/master/docs/entity/README.md)の使い方\n    * [@ngrx/effect](https://github.com/ngrx/platform/blob/master/docs/effects/README.md)の使い方  \n    \n\n\n## チュートリアル概要\n段階を踏んで、ステップごとに動作確認しながら作成していきます。\n各ステップ終了時点のソースコードはGitHubに用意しています。参考にしてください。\n大部分はSchematicsを使ってngコマンドでボイラープレートを自動生成し、メイン部分のみ実装という感じです。\n\n1. Angularアプリを生成（1分）  ※[終了時点のソース](https://github.com/Takumon/ngrx-tutorial/tree/generated-with-angualr-cli)\n1. ngrxを使わずにカウント処理実装（2分）※[終了時点のソース](https://github.com/Takumon/ngrx-tutorial/tree/no-ngrx)\n1. ngrxインストール、初期設定（2分） ※[終了時点のソース](https://github.com/Takumon/ngrx-tutorial/tree/after-ngrx-setting)\n1. ngrxを使ってカウント処理実装（5分） ※[終了時点のソース](https://github.com/Takumon/ngrx-tutorial/tree/with-ngrx)\n\n\n\n\n## 前提条件\n* [Node.js](https://nodejs.org/ja/)インストール済み\n* [Angular CLI](https://cli.angular.io/)グローバルインストール済み\n\n```terminal\n$ npm i -g @angular/cli\n```\n\n* [@ngrx/schematics](https://cli.angular.io/)グローバルインストール済み\n\n```terminal\n$ npm i -g @ngrx/schematics\n```\n\n\n## 1. Angularアプリを生成（1分）\n\n* ng newコマンドを実行します。\n\n```terminal\n$ ng new ngrx-tutorial\n```\n\n* 生成されたアプリ配下に移動し、一旦Webアプリを立ち上げてみます。\n\n```terminal\n$ cd ngrx-tutorial\n$ ng serve -o\n```\n\n* ブラウザが起動し下記のような画面が表示されたら成功です。\n![スクリーンショット 2018-07-30 1.03.59.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5c19c3f0-104a-3ef2-a33d-315c0f0a3f9f.png)\n\n\n\n## 2. ngrxを使わずにカウント処理実装（2分）\nカウント処理の資産は全て`src/app/counter`フォルダ配下に作成します。\nまずはコマンドラインからボイラープレートを作成し、その後カウント処理を実装します。\n### ボイラープレート作成\n\n\n* カウント処理関連資産をまとめるモジュールを作成します。\n    * このモジュールをアプリ全体のモジュールに登録するため`--module`オプションを指定します。\n\n```terminal\n$ ng g module counter --module=app.module.ts\n```\n\n\n* カウント処理用のコンポーネントを作成します。\n    * 上記で作成したモジュールにコンポーネントを登録するため`--module`オプションを指定します。\n    * 最終的にアプリ全体のモジュールにコンポーネントを登録するため`--export`オプションを指定します。\n\n```terminal\n$ ng g component counter --module=counter/counter.module.ts --export\n```\n\n\n* `app.component.html`修正し、作成したカウント処理用のコンポーネントを呼び出すようにします。\n\n```html:app.component.html\n<app-counter></app-counter>\n```\n\n* 一旦ここまででWebアプリを立ち上げてみます。\n\n```terminal\n$ ng serve -o\n```\n\n* ブラウザが起動し、下記画面が表示されます。開発者ツールでエラーがなければ成功です。\n\n![スクリーンショット 2018-07-30 1.06.30.png](https://qiita-image-store.s3.amazonaws.com/0/49915/772a7501-34a7-3ef1-6666-d13e79382ce6.png)\n\n\n### 処理実装\n\n* カウント用コンポーネントで実際の処理を記述します。\n\n```ts:src/app/counter/counter.component.ts\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-counter',\n  templateUrl: './counter.component.html',\n  styleUrls: ['./counter.component.css']\n})\nexport class CounterComponent implements OnInit {\n  count = 0;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  increment() {\n    this.count = this.count + 1;\n  }\n\n  decrement() {\n    this.count = this.count - 1;\n  }\n\n}\n\n```\n\n\n```html:src/app/counter/counter.component.html\n<button (click)=\"increment()\">+</button>\n<button (click)=\"decrement()\">-</button>\n<div>Count: {{count}}</div>\n```\n\n\n* ここまででWebアプリを立ち上げてみます。\n\n```terminal\n$ ng serve -o\n```\n\n* ブラウザが起動し下記画面が表示されます。`+`,`-`ボタンをクリックすると数字が増えたり減ったりした、開発者ツールでもエラーがなければ成功です。\n\n![スクリーンショット 2018-07-30 0.59.12.png](https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png)\n\n\n## 3. ngrxインストール、初期設定（2分）\n@ngrx/storeをアプリに導入し、初期設定をします。\n\n\n* 下記ライブラリをインストールします。\n    * `@ngrx/schematics`\n        * Angualr CLIでngrxの雛形を作るためのライブラリ\n    * `@ngrx/store`\n        * ngrxでStore,Reducer,Actionを使うためのライブラリ\n    * `@ngrx/store-devtools`\n        * 強力なデバッカを使えるようにするためのライブラリ\n\n```terminal\n$ npm i -D @ngrx/schematics\n$ npm i -s @ngrx/store\n$ npm i -s @ngrx/store-devtools\n```\n\n\n*`@ngrx/schematics`をデフォルトのSchematicsに追加します（コマンドラインでngrxのボイラープレート生成時に`@ngrx/schematics`の指定を省略できるようにするためです。）\n\n```terminal\n$ ng config cli.defaultCollection @ngrx/schematics\n```\n\n* 上記を実行すると、`angular.json`にこのような設定が追加されます。\n\n```json:angular.json\n  \"defaultProject\": \"ngrx-tutorial\",\n  \"cli\": {\n    \"defaultCollection\": \"@ngrx/schematics\"\n  }\n```\n\n* ルートのStoreを作成します。\n    * `src/app/state`配下に生成したいので`--statePath`オプションを指定します。\n    * アプリ全体のモジュールに登録したいので`--module`オプションを指定します。\n\n```terminal\n$ ng g store state --statePath state --root --module app.module.ts\n```\n\n* 上記コマンドで更新した`src/app/app.module.ts`で`environment`のimport文のパスでエラーが出ている場合は修正してください。\n\n```diff:app/src/app.module.ts\n- import { environment } from '../../environments/environment';\n+ import { environment } from '../environments/environment';\n```\n\n* ここまででWebアプリを立ち上げてみます。\n\n```terminal\n$ ng serve -o\n```\n\n* 手順2の動作確認時と同様の挙動になります、開発者ツールでもエラーがなければ成功です。\n\n![スクリーンショット 2018-07-30 0.59.12.png](https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png)\n\n\n## 4. ngrxを使ってカウント処理実装（5分）\nここからは実際にStore、Reducer、Actionを作成し、カウント処理の値をStoreに移行します。\nここで作成する資産はカウンター処理に閉じたものなので、`src/app/counter/state`配下に作成します。\nまた`@ngrx/schemetics`のデフォルトではReducer、Actionなどの資産が、役割ごとにフォルダ分けされてしまいますが、１フォルダに集約したほうがソースが修正しやすいので、今回は全て`src/app/counter/state`の直下に作成します。\n\n\n### ボイラープレート生成\n\n\n* Store\n    * `src/app/counter/state`直下に作成するため`--statePath`オプションを指定します。\n    * カウント処理関連モジュールに登録したいので`--module`オプションを指定します。\n\n```terminal\n$ ng g store counter/counter --statePath state --module counter.module.ts\n```\n\n* Reducer\n    * 上記で作成したStoreに本Reducerを登録したいため`--reducers`オプションを指定します。\n\n```terminal\n$ ng g reducer counter/state/counter --reducers index.ts\n```\n\n* Action\n    * `src/app/counter/state`直下に作成するため`--flat`オプションを登録します。\n\n```terminal\n$ ng g action counter/state/counter --flat\n``` \n\n※この時点ではコンパイルエラーがでますので、動作確認はできません。そのまま次に進みます。\n\n\n## 処理実装\n依存関係の都合でボイラープレートとは逆順で実装していきます。\n\n### Action\nボイラープレート生成時から下記のように修正します。\n※コメントはコードの説明なので無視して実装してください。\n\n```diff:src/app/counter/state/counter.actions.ts\nimport { Action } from '@ngrx/store';\n\nexport enum CounterActionTypes {\n// Actionごとに型を定義します。\n-  LoadCounters = '[Counter] Load Counters'\n+  CountIncrement = '[Counter] Increment Count',\n+  CountDecrement = '[Counter] Decrement Count'\n}\n\n// Actionごとに@ngrx.storeのActionをインプリしたクラスを作成します。\n// 複雑な処理をする場合はコンストラクタ引数をとりますが、\n// 本チュートリアルでは簡単のため引数なしにしています。\n- export class Counter implements Action {\n-   readonly type = CounterActionTypes.LoadCounters;\n- }\n+ export class CountIncrement implements Action {\n+   readonly type = CounterActionTypes.CountIncrement;\n+   public constructor() {}\n+ }\n+ \n+ export class CountDecrement implements Action {\n+   readonly type = CounterActionTypes.CountDecrement;\n+   public constructor() {}\n+ }\n\n\n// 上記で定義したActionクラスを集約した型を定義します。Reducerで使うためです。\n- export type CounterActions = LoadCounters;\n+ export type CounterActions = CountIncrement | CountDecrement;\n```\n\n\n## Reducer作成\n\n```diff:src/app/counter/state/counter.reducer.ts\nimport { Action } from '@ngrx/store';\n+ import { CounterActionTypes } from './counter.actions';\n\n\nexport interface State {\n// カウンター処理に置けるStateを定義します。\n+   count: number;\n}\n\nexport const initialState: State = {\n// カウンター処理に置けるStateの初期値を定義します。\n+   count: 0\n};\n\n\nexport function reducer(state = initialState, action: Action): State {\n  switch (action.type) {\n// 引数として受け取ったActionの型に応じて処理を振り分けます\n// ここではカウンター処理に関連するアクションのみ拾って、他はStateをそのまま返します。\n+     case CounterActionTypes.CountIncrement:\n// Stateを変更する場合は、Stateがイミュータブルになるように元のStateには変更を加えず\n// Object.assingで新規オブジェクトを作るようにします。\n+       return Object.assign({}, { ...state, count : state.count + 1 });\n+     case CounterActionTypes.CountDecrement:\n+       return Object.assign({}, { ...state, count : state.count - 1 });\n    default:\n      return state;\n  }\n}\n\n// コンポーネントでStateのCountを取得するための関数を定義します。\n// Storeの方にも定義しますが、ここでは本ファイルで定義している\n// Stateのプロパティに関連する処理のみ定義します。\n+ export const getCount = (state: State) => state.count;\n```\n\n* Store\n\n```diff:src/app/counter/state/index.ts\nimport {\n  ActionReducerMap,\n  createFeatureSelector,\n  createSelector,\n  MetaReducer\n} from '@ngrx/store';\n// ng gコマンド生成時は相対パスがずれている可能性があるため\n// その場合は修正する\n- import { environment } from '../../environments/environment';\n+ import { environment } from '../../../environments/environment';\nimport * as fromCounter from './counter.reducer';\n\nexport interface State {\n\n  counter: fromCounter.State;\n}\n\nexport const reducers: ActionReducerMap<State> = {\n\n  counter: fromCounter.reducer,\n};\n\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\n\n// コンポーネントでStateのプロパティを取得するための関数を定義します。\n// 複数コンポーネントで使う度に定義するのは冗長なのでココで共通的に定義します。\n+ export const getCounterFeatureState = createFeatureSelector<State>('counter');\n+ export const getCounter = createSelector(getCounterFeatureState, s => s.counter);\n+ export const getCount = createSelector(getCounter, fromCounter.getCount);\n```\n\n\n\n* Component\n\n```diff:src/app/counter/counter.component.ts\nimport { Component, OnInit } from '@angular/core';\n+ import { Observable } from 'rxjs';\n+ import { Store } from '@ngrx/store';\n\n+ import * as CounterReducer from './state/counter.reducer';\n+ import * as CounterActions from './state/counter.actions';\n+ import { getCount } from './state';\n\n@Component({\n  selector: 'app-counter',\n  templateUrl: './counter.component.html',\n  styleUrls: ['./counter.component.css']\n})\nexport class CounterComponent implements OnInit {\n// Storeでの値変更を順次受け付けれるように型をObservableに変更します\n-   count = 0;\n+   count$: Observable<number>;\n\n// Storeをインジェクションします\n-   constructor() { }\n+   constructor(private store: Store<CounterReducer.State>) {\n// Storeからカウンタを取得します\n+     this.count$ = store.select(getCount);\n+  }\n\n  ngOnInit() {\n  }\n\n  increment() {\n// インクリメントの実処理はカウンタのReducerに任せるので\n// ここではActionをdispatchするだけです。\n-     this.count = this.count + 1;\n+     this.store.dispatch(new CounterActions.CountIncrement());\n  }\n\n  decrement() {\n-     this.count = this.count - 1;\n+     this.store.dispatch(new CounterActions.CountDecrement());\n  }\n\n}\n```\n\n* ConponentのHTML\n\n```diff:src/app/counter/counter.component.html\n<button (click)=\"increment()\">+</button>\n<button (click)=\"decrement()\">-</button>\n<!-- 変数名と型が変わったのでHTMLも若干修正します -->\n- <div>Count: {{count }}</div>\n+ <div>Count: {{count$ | async }}</div>\n```\n\n* Webアプリを立ち上げてみます。\n\n```terminal\n$ ng serve -o\n```\n\n* 開発者ツールなどで全くエラーが出ていなければ成功です。見た目は変わっていませんが、Countは`@ngrx/store`で管理されるようになっています。\n\n![スクリーンショット 2018-07-30 0.59.12.png](https://qiita-image-store.s3.amazonaws.com/0/49915/d506bc6e-cdce-4d00-1109-2af9f4780663.png)\n\n## 補足：ストアとストア登録方法\nストアとストア登録処理はボイラープレートで生成するのでココで改めて説明します。\n\n**まずはルートのストアです。**\nストアは`src/app/state/index.ts`に作成されます。\n中身を見るとわかりますが、実態はReducerを集約したActionReducerMapです。\nReducerを新しく作成した時は、このマップにどんどん追加していきます。\n\n```ts:src/app/state/index.ts\nimport {\n  ActionReducer,\n  ActionReducerMap,\n  createFeatureSelector,\n  createSelector,\n  MetaReducer\n} from '@ngrx/store';\nimport { environment } from '../../environments/environment';\n\nexport interface State {\n\n}\n\nexport const reducers: ActionReducerMap<State> = {\n  // ココにReducerが追加されていきます。\n  // 今回のチュートリアルではルートのストアに１つもReducerを定義していないので空っぽです。\n};\n\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\n\n```\n\nストアをモジュールに登録するには下記のように`StoreModule.forRoot`を使います(ボイラープレートでやってくれます)\n\n```ts:src/app/app.module.ts\n@NgModule({\n  // ・・・\n  imports: [\n    // ・・・\n    StoreModule.forRoot(reducers, { metaReducers }),\n    !environment.production ? StoreDevtoolsModule.instrument() : []\n    // ・・・\n  ],\n  // ・・・\n})\nexport class AppModule { }\n\n```\n\n**次にカウンタのストアに関してです。**\nこちらもルートの場合とほぼ同じです。\n\n```ts:src/app/counter/state/index.ts\n// ・・・\nexport const reducers: ActionReducerMap<State> = {\n  // カウンタのReducerをマップに登録しています。\n  counter: fromCounter.reducer,\n};\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\n// ・・・\n```\n\nただ登録は`StoreModule.forFeature`を使います。\nこのメソッドは、機能毎に状態管理する時に使うもので、ルートのストアに指定した名前で登録されます。使う時になったら遅延ロードしてくれる機能を持っています。\n\n```ts:src/app/counter/counter.module.ts\n// ・・・\nimport * as fromCounter from './state';\n// ・・・\n@NgModule({\n  imports: [\n    // ・・・\n    // アプリ全体のストアにcounterという名前で登録します\n    StoreModule.forFeature('counter', fromCounter.reducers, { metaReducers: fromCounter.metaReducers })\n    // ・・・\n  ],\n  // ・・・\n})\nexport class CounterModule { }\n\n```\n\n\n## まとめ\n以上で`@ngrx/schematics`を使った`@ngrx/store`のチュートリアルは終了です。\n`ngrx`ライブラリは他にも`@ngrx/router-store`、`@ngrx/entity`、`@ngrx/effect`があるので、\n今回のアプリをベースに拡張し、理解を深めてみるのも良いかもしれません。\n\nAngularはVue.jsなどと比較するとボイラープレートが多くなってしまいます。\nしかし、ソースコード自動生成機能が充実しているので、けっこう便利なフレームワークです！\nあまり周りでAngular使ってる人がいなくて寂しいのですが、、、、皆さん是非Angular使いましょう！\n\n## 参考\n* GitHub\n    * [@ngrx/store](https://github.com/ngrx/platform/blob/master/docs/store/README.md#ngrxstore)\n        * 公式ページ。サンプルは少し古いですが、ドキュメントは充実しています。\n    * [@ngrx/schematics](https://github.com/ngrx/platform/blob/master/docs/schematics/README.md)\n        * 各リンクに行くと、コマンドのオプションの説明などが記載されています。\n* Medium\n    * [Managing State in Angular Applications](https://blog.nrwl.io/managing-state-in-angular-applications-22b75ef5625f)\n        * Angularで状態管理する時のベストプラクティスを検討し、最終的に@ngrx/storeを紹介している記事です。ソースコードもGitHubにあり、大変参考になります。\n* Qiita\n    * [@ngrx/storeと@ngrx/effectsの使い方](https://qiita.com/puku0x/items/0a8e7224761dc549bd06)\n        * GitHubに[サンプル](https://github.com/puku0x/ngrx-todo)もありコード例が多く大変参考になりました。\n    * [@ngrx/schematicsを触ってみる](https://qiita.com/musou1500/items/8003c4a3f2b2e80d919f)\n        * `@ngrx/schematics`の使い方が網羅されており参考になりました。\n    * [ngrxでハマったポイント](https://qiita.com/gen2-gk/items/5e5c5b81243def8edc2c#ngrx-%E9%96%A2%E9%80%A3%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AF1%E3%81%A4%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AB%E3%81%BE%E3%81%A8%E3%82%81%E3%82%8B)\n        * ngrx関連資産をstoreフォルダ配下に集約するという知見はココを参考にさせていただきました。\n    * [ngrx紹介](https://qiita.com/kouMatsumoto/items/c8297466c1824953632f)\n        * ngrxを知るきっかけになった記事です。\n\n\n\n","comments_count":0,"created_at":"2018-07-30T18:01:02+09:00","likes_count":22,"reactions_count":0},"matches":2,"weight":100,"details":[{"weight":50,"keyword":"Angular"},{"weight":50,"keyword":"Qiita"}],"avgWeight":50,"totalWeight":44,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/5644c24e-eade-50ca-aa11-83a4eaeba122/","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その２. テスト編","date":"2017-07-24T07:12:10+09:00","excerpt":"やりたいことAngular CLI使って、MEANスタック(MongoDB + Express + Angular + NodeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。フロント側とサーバ側の両方をweb...","tags":["JavaScript","jasmine","TypeScript","AngularJS","Protractor","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"5644c24e-eade-50ca-aa11-83a4eaeba122","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その２. テスト編","rendered_body":"\n<h2>\n<span id=\"やりたいこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたいこと</h2>\n\n<ul>\n<li>Angular CLI使って、MEANスタック(<strong>M</strong>ongoDB + <strong>E</strong>xpress + <strong>A</strong>ngular + <strong>N</strong>odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。</li>\n<li>フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。</li>\n<li>Dockerを使ってアプリを簡単に配布したい。</li>\n</ul>\n\n<p>これらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。</p>\n\n<ul>\n<li><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\" id=\"reference-fc6741a6eda3b7ffd9f1\">その１. ビルド編</a></li>\n<li>その２. テスト編　⇦　今回はココ</li>\n<li>その３. Dockerビルド編</li>\n</ul>\n\n<h2>\n<span id=\"その２-テスト編\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%81%AE%EF%BC%92-%E3%83%86%E3%82%B9%E3%83%88%E7%B7%A8\"><i class=\"fa fa-link\"></i></a>その２. テスト編</h2>\n\n<p><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\">その１. ビルド編</a>では、Angular CLIで作成したプロジェクトをベースに、<br>\nMongoDBに登録しているメッセージを画面に一覧で表示するアプリを作成しました。<br>\n今回は、クライアント側とサーバ側の<a href=\"https://jasmine.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">Jasmine</a>を使った単体テスト、<a href=\"http://www.protractortest.org/#/\" rel=\"nofollow noopener\" target=\"_blank\">Protractor</a>を使ったE2Eテスト、それらを実行するnpm scriptsを作成します。<br>\n最終的には下記のように<code>npm test</code>コマンドで単体テストが実行できるようになります。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" alt=\"10_単体テスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png\"></a></p>\n\n<p>またE2Eテストは<code>npm run e2e</code>コマンドで実施できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" alt=\"20_E2Eテスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png\"></a></p>\n\n<h3>\n<span id=\"プロジェクト構成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクト構成</h3>\n\n<p>今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。<br>\n<a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\">その１. ビルド編</a>で作成したものをベースにテスト用の資産を追加します。詳細は<a href=\"https://github.com/Takumon/angular4-express4-typescritp2/tree/test\" rel=\"nofollow noopener\" target=\"_blank\">リポジトリ</a>を参照してください。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">プロジェクト構成（完成イメージ）</span></div>\n<div class=\"highlight\"><pre>.\n├── dist                              ・・・(1) コンパイル資産出力先\n│   ├── server\n│   │   ├── ...\n│   │   ...\n│   │ \n│   └── server_test                      ・・・(1-1)　コンパイルされたサーバ側テスト資産\n│       ├── app.spec.js\n│       ├── app.spec.js.map\n│       ├── test.server.conf.js\n│       ├── test.server.conf.js.map\n│       ├── test.server.js\n│       └── test.server.js.map\n├── e2e                                ・・・(2)　E2Eテスト資産\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── server\n│   ├── ...\n│   ...\n│\n├── server_test                         ・・・(3)　サーバ側テスト資産\n│   ├── app.spec.ts\n│   ├── test.server.conf.ts\n│   ├── test.server.ts\n│   └── tsconfig.server_test.json\n├── src\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts      ・・・(4)　クライアント側テスト資産\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       ├── message.service.spec.ts ・・・(4)　クライアント側テスト資産\n│   │       └── message.service.ts\n│   ...\n│\n├── package-lock.json\n├── package.json\n├── protractor.conf.js                   ・・・(5)　E2Eテスト設定ファイル\n├── proxy.conf.json\n├── karma.conf.js\n├── tsconfig.json\n├── tslint.json\n└── README.md\n</pre></div>\n</div>\n\n<h4>\n<span id=\"各資産について\" class=\"fragment\"></span><a href=\"#%E5%90%84%E8%B3%87%E7%94%A3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>各資産について</h4>\n\n<h5>\n<span id=\"1-dist\" class=\"fragment\"></span><a href=\"#1-dist\"><i class=\"fa fa-link\"></i></a>(1) dist</h5>\n\n<p>コンパイル資産出力先。</p>\n\n<h5>\n<span id=\"1-1-distserver_test\" class=\"fragment\"></span><a href=\"#1-1-distserver_test\"><i class=\"fa fa-link\"></i></a>(1-1) dist/server_test</h5>\n\n<p>コンパイルされたサーバ側テスト資産(JSファイル)の出力先。<br>\nデプロイを考慮して本資産(dist/server)とは別ディレクトリにしています。</p>\n\n<h5>\n<span id=\"2-server_test\" class=\"fragment\"></span><a href=\"#2-server_test\"><i class=\"fa fa-link\"></i></a>(2) server_test</h5>\n\n<p>サーバ側テスト資産のディレクトリ。<br>\nコンパイル用の設定ファイルとテスト用の設定ファイルもココに格納します。</p>\n\n<h5>\n<span id=\"3-e2e\" class=\"fragment\"></span><a href=\"#3-e2e\"><i class=\"fa fa-link\"></i></a>(3) e2e</h5>\n\n<p>E2Eテスト用資産のディレクトリ。</p>\n\n<h5>\n<span id=\"4-srcapp配下のspectsファイル\" class=\"fragment\"></span><a href=\"#4-srcapp%E9%85%8D%E4%B8%8B%E3%81%AEspects%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\"><i class=\"fa fa-link\"></i></a>(4) src/app配下のspec.tsファイル</h5>\n\n<p>フロント側テスト資産。<br>\nコンパイルやテストは<code>ng</code>コマンドで実施します。</p>\n\n<h5>\n<span id=\"5-protractorconfjs\" class=\"fragment\"></span><a href=\"#5-protractorconfjs\"><i class=\"fa fa-link\"></i></a>(5) protractor.conf.js</h5>\n\n<p>E2Eテスト設定ファイル。<br>\n今回はAngular CLIでプロジェクトが作成するデフォルトから少しだけ修正します。</p>\n\n<h2>\n<span id=\"構築手順\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E7%AF%89%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>構築手順</h2>\n\n<h3>\n<span id=\"1-テストに必要なライブラリをインストール\" class=\"fragment\"></span><a href=\"#1-%E3%83%86%E3%82%B9%E3%83%88%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>1. テストに必要なライブラリをインストール</h3>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install --save zone.js@0.8.12\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n</pre></div></div>\n\n<ul>\n<li>\n<a href=\"https://www.npmjs.com/package/zone.js\" rel=\"nofollow noopener\" target=\"_blank\"><code>zone.js@0.8.12</code></a>\n\n<ul>\n<li>クライアント側のテストで使用します。Angular CLIでプロジェクトを作成した時点でインストールされていますが、テスト実行時に<code>Failed: Cannot create property '__creationTrace__' on string '__zone_symbol__optimizedZoneEventTask'</code>のようなエラーが出ます。<a href=\"https://github.com/angular/zone.js/issues/832\" rel=\"nofollow noopener\" target=\"_blank\">GitHubのissues</a>によるとv0.8.12はエラーが出ないそうなので、v0.8.12を再インストールします。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://www.npmjs.com/package/supertest\" rel=\"nofollow noopener\" target=\"_blank\"><code>supertest</code></a>\n\n<ul>\n<li>サーバ側のテストで使用します。APIテストを簡単にしてくれます。</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"2-クライアント側を作成\" class=\"fragment\"></span><a href=\"#2-%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2. クライアント側を作成</h3>\n\n<p>コンポーネント(app.component.ts)とサービス(message.service.ts)に対するテストコードを作成します。<br>\nクライアント側のテスト実行には<code>ng test</code>コマンドを使うので、ビルド周りの設定は不要です。</p>\n\n<h4>\n<span id=\"srcappappcomponentspects\" class=\"fragment\"></span><a href=\"#srcappappcomponentspects\"><i class=\"fa fa-link\"></i></a>src/app/app.component.spec.ts</h4>\n\n<p>コンポーネントは画面描画についてテストします。<br>\nコンポーネントで使うサービスは、<code>TestBed</code>の<code>overrideComponent</code>メソッドを使ってモック化します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.spec.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"k\">async</span><span class=\"p\">,</span> <span class=\"nx\">ComponentFixture</span><span class=\"p\">,</span> <span class=\"nx\">TestBed</span><span class=\"p\">,</span> <span class=\"nx\">inject</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/forms'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.component'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'AppComponent'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// テスト対象のComponent</span>\n  <span class=\"kd\">let</span> <span class=\"na\">component</span><span class=\"p\">:</span> <span class=\"nx\">AppComponent</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// テスト対象のFixture</span>\n  <span class=\"kd\">let</span> <span class=\"na\">fixture</span><span class=\"p\">:</span> <span class=\"nx\">ComponentFixture</span><span class=\"o\">&lt;</span><span class=\"nx\">AppComponent</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// MessageServiceのモック</span>\n  <span class=\"kd\">class</span> <span class=\"nx\">MessageServiceMock</span> <span class=\"p\">{</span>\n    <span class=\"nx\">getAll</span><span class=\"p\">():</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span>  <span class=\"p\">{</span> <span class=\"na\">messages</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n      <span class=\"p\">]};</span>\n\n      <span class=\"k\">return</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">([</span><span class=\"nx\">response</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n      <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">],</span>\n      <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"nx\">AppComponent</span>\n      <span class=\"p\">],</span>\n    <span class=\"p\">})</span>\n<span class=\"err\">　　　　　　　　　</span><span class=\"c1\">// MessageServiceのモックを設定</span>\n    <span class=\"p\">.</span><span class=\"nx\">overrideComponent</span><span class=\"p\">(</span><span class=\"nx\">AppComponent</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">set</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span> <span class=\"na\">provide</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">,</span> <span class=\"na\">useClass</span><span class=\"p\">:</span> <span class=\"nx\">MessageServiceMock</span> <span class=\"p\">},</span>\n        <span class=\"p\">]</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n    <span class=\"p\">.</span><span class=\"nx\">compileComponents</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">fixture</span> <span class=\"o\">=</span> <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">createComponent</span><span class=\"p\">(</span><span class=\"nx\">AppComponent</span><span class=\"p\">);</span>\n    <span class=\"nx\">component</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">componentInstance</span><span class=\"p\">;</span>\n    <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">detectChanges</span><span class=\"p\">();</span>\n  <span class=\"p\">}));</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'オブジェクトが生成されるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">debugElement</span><span class=\"p\">.</span><span class=\"nx\">componentInstance</span><span class=\"p\">;</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">).</span><span class=\"nx\">toBeTruthy</span><span class=\"p\">();</span>\n  <span class=\"p\">}));</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージを３件保持しているか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">component</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">([</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n    <span class=\"p\">]);</span>\n  <span class=\"p\">}));</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'画面にメッセージが３件表示されているか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">el</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">debugElement</span><span class=\"p\">.</span><span class=\"nx\">nativeElement</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ1'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ2'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ3'</span><span class=\"p\">);</span>\n  <span class=\"p\">}));</span>\n<span class=\"p\">});</span>\n\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappmessagemessageservicespects一部抜粋\" class=\"fragment\"></span><a href=\"#srcappmessagemessageservicespects%E4%B8%80%E9%83%A8%E6%8A%9C%E7%B2%8B\"><i class=\"fa fa-link\"></i></a>src/app/message/message.service.spec.ts(一部抜粋)</h4>\n\n<p>サービスのテストです。<br>\nサーバとのやりとり(HTTP通信)については<code>MockBackend</code>を使ってモック化しています。<br>\nなお<code>Error</code>は別途モックを作らなければなりません。<br>\n全て載せると冗長なので<code>register</code>メソッドのテストは割愛しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.service.spec.ts(一部抜粋)</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">TestBed</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">,</span> <span class=\"nx\">inject</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">HttpModule</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">,</span> <span class=\"nx\">Http</span><span class=\"p\">,</span> <span class=\"nx\">Response</span><span class=\"p\">,</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MockConnection</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">RequestMethod</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message.service'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'MessageService'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　</span><span class=\"c1\">// HTTP通信エラー用のモック</span>\n  <span class=\"kd\">class</span> <span class=\"nx\">MockError</span> <span class=\"kd\">extends</span> <span class=\"nx\">Response</span> <span class=\"kr\">implements</span> <span class=\"nb\">Error</span> <span class=\"p\">{</span>\n    <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">;</span>\n    <span class=\"nl\">message</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n<span class=\"err\">　　　　</span><span class=\"c1\">// HTTP通信はMockBackendでモック化</span>\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n      <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">HttpModule</span><span class=\"p\">],</span>\n      <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MessageService</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"na\">provide</span><span class=\"p\">:</span> <span class=\"nx\">Http</span><span class=\"p\">,</span>\n        <span class=\"na\">useFactory</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nx\">backend</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nx\">Http</span><span class=\"p\">(</span><span class=\"nx\">backend</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">),</span>\n        <span class=\"na\">deps</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">]</span>\n      <span class=\"p\">},</span> <span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">]</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'オブジェクトが生成されるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">service</span><span class=\"p\">).</span><span class=\"nx\">toBeTruthy</span><span class=\"p\">();</span>\n  <span class=\"p\">})));</span>\n\n\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'getAll'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージが取得できるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// HTTP通信のモックで返す具体的な値の設定</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">body</span> <span class=\"o\">=</span>  <span class=\"p\">{</span> <span class=\"na\">messages</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n        <span class=\"p\">]};</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">ops</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">({</span>\n          <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n          <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">mockRespond</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">Response</span><span class=\"p\">(</span><span class=\"nx\">ops</span><span class=\"p\">));</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストの内容を検証</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">RequestMethod</span><span class=\"p\">.</span><span class=\"nx\">Get</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// レスポンスの内容を検証</span>\n      <span class=\"nx\">service</span><span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">().</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">([</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n        <span class=\"p\">]);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">})));</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'異常時にエラーハンドリングされるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// HTTP通信のモックで返す具体的な値の設定</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">body</span> <span class=\"o\">=</span>  <span class=\"p\">{</span>\n          <span class=\"na\">title</span> <span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"s1\">'エラー'</span>\n        <span class=\"p\">};</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">ops</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">({</span>\n          <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span>\n          <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">mockError</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">MockError</span><span class=\"p\">(</span><span class=\"nx\">ops</span><span class=\"p\">));</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストの内容を検証</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">RequestMethod</span><span class=\"p\">.</span><span class=\"nx\">Get</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// レスポンスの内容を検証</span>\n      <span class=\"nx\">service</span><span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">().</span><span class=\"nx\">subscribe</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">fail</span><span class=\"p\">(</span><span class=\"s1\">'エラーハンドリングされなかった。'</span><span class=\"p\">);</span>\n      <span class=\"p\">},</span> <span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span> <span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"s1\">'エラー'</span>\n        <span class=\"p\">});</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">})));</span>\n\n  <span class=\"p\">});</span>\n\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"3-サーバ側を作成\" class=\"fragment\"></span><a href=\"#3-%E3%82%B5%E3%83%BC%E3%83%90%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>3. サーバ側を作成</h3>\n\n<p>プロジェクトの直下にserver_testディレクトリを作ってテストコードを書いていきます。<br>\nどちらかというと結合テストよりで、１つ１つの資産に対してではなくapp.tsに対して、実際にDBに接続しながらAPIテストを行います。規模が小さい場合はコレで充分だと思います。<br>\nまたExpressのテストフレームワークは<a href=\"https://mochajs.org/\" rel=\"nofollow noopener\" target=\"_blank\">Mocha</a>が一般的ですが、クライアント側と統一したいので、今回は<a href=\"https://jasmine.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">Jasmine</a>を使うことにします。</p>\n\n<h4>\n<span id=\"server_testappspects一部抜粋\" class=\"fragment\"></span><a href=\"#server_testappspects%E4%B8%80%E9%83%A8%E6%8A%9C%E7%B2%8B\"><i class=\"fa fa-link\"></i></a>server_test/app.spec.ts(一部抜粋)</h4>\n\n<p>ポイントとしてはテスト実行前にMessageモデルを使ってDBを初期化していることです。<br>\nそれによりテストデータがテストメソッドごとに想定する形になるようにしています。<br>\n異常時のテストは、Messsageのfindメソッドでエラーが発生するようにJasmineの<code>spyOn</code>メソッドで処理を置き換えます。<br>\n全て載せると冗長なのでメッセージ登録のテストは割愛しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.spec.ts(一部抜粋)</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">supertest</span> <span class=\"k\">from</span> <span class=\"s1\">'supertest'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"nx\">app</span> <span class=\"k\">from</span> <span class=\"s1\">'../server/app'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../server/models/message'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">request</span> <span class=\"o\">=</span> <span class=\"nx\">supertest</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">endpoint</span> <span class=\"o\">=</span> <span class=\"s1\">'/api/messages'</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">messageAscending</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">,</span> <span class=\"nx\">m2</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&gt;</span> <span class=\"nx\">m2</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&lt;</span> <span class=\"nx\">m2</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"c1\">// テスト前にDBのmessagesを初期化する</span>\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">({},</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n  <span class=\"p\">});</span>\n\n\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'Get'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'レスポンスがjson形式でステータスコードが200か'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n      <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// 検証</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'application/json'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">);</span>\n        <span class=\"p\">}).</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージ一覧が取得できるか'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n      <span class=\"kd\">const</span> <span class=\"nx\">testData</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ１'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ２'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ３'</span> <span class=\"p\">},</span>\n      <span class=\"p\">];</span>\n<span class=\"err\">　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// 事前準備（テストデータを作成）</span>\n      <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">testData</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">erro</span> <span class=\"p\">,</span> <span class=\"nx\">doc</span> <span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n        <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n          <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// 検証</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">sortedMessages</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">sort</span><span class=\"p\">(</span><span class=\"nx\">messageAscending</span><span class=\"p\">);</span>\n\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ１'</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ２'</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ３'</span><span class=\"p\">);</span>\n          <span class=\"p\">})</span>\n          <span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">});</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'異常時にエラーハンドリングされるか'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n      <span class=\"c1\">// エラーとなるようにMessageのfindメソッドを置き換える</span>\n      <span class=\"nx\">spyOn</span><span class=\"p\">(</span><span class=\"nx\">Message</span><span class=\"p\">,</span> <span class=\"s1\">'find'</span><span class=\"p\">).</span><span class=\"nx\">and</span><span class=\"p\">.</span><span class=\"nx\">callFake</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">callback</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">'エラー'</span><span class=\"p\">),</span> <span class=\"kc\">null</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n<span class=\"err\">　　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n      <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n          <span class=\"c1\">// 検証</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'application/json'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">);</span>\n\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'エラー'</span><span class=\"p\">);</span>\n        <span class=\"p\">})</span>\n        <span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"4-単体テスト周りの環境を整備\" class=\"fragment\"></span><a href=\"#4-%E5%8D%98%E4%BD%93%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>4. 単体テスト周りの環境を整備</h3>\n\n<p>E2Eの説明に入る前に、いったん単体テスト周りの環境を整備します。</p>\n\n<h4>\n<span id=\"packagejson\" class=\"fragment\"></span><a href=\"#packagejson\"><i class=\"fa fa-link\"></i></a>package.json</h4>\n\n<p><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792#pakcagejson\" id=\"reference-fc6741a6eda3b7ffd9f1\">前回</a>作成したものをベースに単体テストのスクリプトを追加してください。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\"> </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-p test:*\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"test:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng test\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"test:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s build:server_test -p watch:server_test  boot:server_test\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"watch:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -w -p ./server_test/tsconfig.server_test.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"boot:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"nodemon ./dist/server_test/test.server.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>test</strong>でクライアント側とサーバ側のテストを実行します。</li>\n<li>\n<strong>test:client</strong>でクライアント側のテストを実行します。Angular CLIのngコマンドにお任せしています。</li>\n<li>\n<strong>watch:server_test</strong>でサーバ側テスト資産をウォッチして変更があればコンパイルするようにします。</li>\n<li>\n<strong>boot:server_test</strong>でコンパイルしたサーバ側テスト資産を起動します。nodeではなくnodemonを使うことで資産に更新があった場合でも即座に反映するようにしています。</li>\n<li>\n<strong>build:server_test</strong>でサーバ側テスト資産をコンパイルします。コンパイル時の設定は下で触れるserver_test/test.server.conf.tsを使います。</li>\n</ul>\n\n<h4>\n<span id=\"server_testtestserverts\" class=\"fragment\"></span><a href=\"#server_testtestserverts\"><i class=\"fa fa-link\"></i></a>server_test/test.server.ts</h4>\n\n<p>サーバ側テストの起動処理を書きます。<br>\nレポーターには<a href=\"https://www.npmjs.com/package/jasmine-spec-reporter\" rel=\"nofollow noopener\" target=\"_blank\">jasmine-spec-reporter</a>を使いましょう。このライブラリはAngular CLIで作ったプロジェクトにはデフォルトでインストール済みです。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">test.server.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">SpecReporter</span><span class=\"p\">,</span> <span class=\"nx\">DisplayProcessor</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'jasmine-spec-reporter'</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">Jasmine</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'jasmine'</span><span class=\"p\">);</span>\n<span class=\"k\">import</span> <span class=\"nx\">SuiteInfo</span> <span class=\"o\">=</span> <span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">SuiteInfo</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">config</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./test.server.conf'</span><span class=\"p\">;</span>\n\n\n<span class=\"kd\">class</span> <span class=\"nx\">CustomProcessor</span> <span class=\"kd\">extends</span> <span class=\"nx\">DisplayProcessor</span> <span class=\"p\">{</span>\n    <span class=\"kr\">public</span> <span class=\"nx\">displayJasmineStarted</span><span class=\"p\">(</span><span class=\"nx\">info</span><span class=\"p\">:</span> <span class=\"nx\">SuiteInfo</span><span class=\"p\">,</span> <span class=\"nx\">log</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">string</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s2\">`TypeScript </span><span class=\"p\">${</span><span class=\"nx\">log</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">runner</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Jasmine</span><span class=\"p\">();</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">loadConfig</span><span class=\"p\">(</span><span class=\"nx\">config</span><span class=\"p\">);</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">addReporter</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">SpecReporter</span><span class=\"p\">({</span>\n    <span class=\"na\">customProcessors</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">CustomProcessor</span><span class=\"p\">],</span>\n<span class=\"p\">}));</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">onComplete</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">passed</span><span class=\"p\">){</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nx\">passed</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Success'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"s1\">'Failed'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">execute</span><span class=\"p\">();</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"server_testtestserverconfts\" class=\"fragment\"></span><a href=\"#server_testtestserverconfts\"><i class=\"fa fa-link\"></i></a>server_test/test.server.conf.ts</h4>\n\n<p>サーバ側テスト起動時の設定です。<br>\n注意点として<code>spec_files</code>に指定する相対パスはプロジェクト直下が起点になります。そのため<code>__dirname</code>を使って指定してください。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">test.server.conf.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">spec_dir</span><span class=\"p\">:</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span>\n  <span class=\"na\">spec_files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">__dirname</span><span class=\"p\">}</span><span class=\"s2\">/*spec.js`</span>\n  <span class=\"p\">],</span>\n  <span class=\"s1\">'stopSpecOnExpectationFailure'</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"s1\">'random'</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n<span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"server_testtsconfigserver_testjson\" class=\"fragment\"></span><a href=\"#server_testtsconfigserver_testjson\"><i class=\"fa fa-link\"></i></a>server_test/tsconfig.server_test.json</h4>\n\n<p>サーバ側テスト資産をコンパイルする時の設定ファイルです。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">tsconfig.server_test.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"extends\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../tsconfig.json\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"preserveConstEnums\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"outDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"mapRoot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"module\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"commonjs\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"include\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"s2\">\"**/*.spec.ts\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"./test.server.ts\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"./test.server.conf.ts\"</span><span class=\"w\">\n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<p><code>outDir</code>が<code>../dist/server_test</code>ではなく<code>../dist</code>であることに注意してください。<br>\nテスト資産は<code>server</code>ディレクトリ配下の資産に依存しているため、<code>../dist/server_test</code>を指定するとコンパイルした時に下記のように出力されてしまいます。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">（悪い例）outDirに\"../dist/server_test\"を指定したときのコンパイル結果</span></div>\n<div class=\"highlight\"><pre>.\n└── dist\n    └── server_test\n        ├── server\n        └── server_test \n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">（良い例）outDirに\"../dist\"を指定したときのコンパイル結果</span></div>\n<div class=\"highlight\"><pre>.\n└── dist\n    ├── server\n    └── server_test \n</pre></div>\n</div>\n\n<h3>\n<span id=\"5-e2eテストを作成\" class=\"fragment\"></span><a href=\"#5-e2e%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>5. E2Eテストを作成</h3>\n\n<p>単体テストを作成したので次はE2Eテストを作りましょう。<br>\nAngular CLIで作成したプロジェクトにデフォルトで用意されている<a href=\"http://www.protractortest.org/#/\" rel=\"nofollow noopener\" target=\"_blank\">Protractor</a>を使ったテストコードを作成します。</p>\n\n<h4>\n<span id=\"e2eappe2e-spects\" class=\"fragment\"></span><a href=\"#e2eappe2e-spects\"><i class=\"fa fa-link\"></i></a>e2e/app.e2e-spec.ts</h4>\n\n<p>基本的にelementメソッドで要素を取得して、sendKeysメソッドやclickメソッドで操作を行います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.e2e-spec.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.po'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">browser</span><span class=\"p\">,</span> <span class=\"nx\">element</span><span class=\"p\">,</span> <span class=\"nx\">by</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'protractor'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'E2Eテスト'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"na\">page</span><span class=\"p\">:</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'画面タイトルが正しいか'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">navigateTo</span><span class=\"p\">();</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">getParagraphText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'メッセージ一覧'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージが登録できるか'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">navigateTo</span><span class=\"p\">();</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">newMessage</span> <span class=\"o\">=</span> <span class=\"s2\">`サンプルメッセージ </span><span class=\"p\">${</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">toString</span><span class=\"p\">()}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n    <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessage'</span><span class=\"p\">)).</span><span class=\"nx\">sendKeys</span><span class=\"p\">(</span><span class=\"nx\">newMessage</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessageButton'</span><span class=\"p\">)).</span><span class=\"nx\">click</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// 登録後メッセージ入力項目が初期化されているか</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessage'</span><span class=\"p\">)).</span><span class=\"nx\">getText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 登録後一覧に登録したメッセージが含まれているか</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'messageList'</span><span class=\"p\">)).</span><span class=\"nx\">all</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">tagName</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">));</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">last</span><span class=\"p\">().</span><span class=\"nx\">getText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">newMessage</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"6-e2eテスト周りの環境を整備\" class=\"fragment\"></span><a href=\"#6-e2e%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>6. E2Eテスト周りの環境を整備</h3>\n\n<h4>\n<span id=\"packagejson-1\" class=\"fragment\"></span><a href=\"#packagejson-1\"><i class=\"fa fa-link\"></i></a>package.json</h4>\n\n<p>Angular CILプロジェクトデフォルトの\"e2e\"コマンドは削除して、スクリプトに下記を追加してください。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\"> </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"e2e\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s  webdriver:update -p webdriver:start protractor\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"webdriver:update\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"webdriver-manager update\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"webdriver:start\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"webdriver-manager start\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"protractor\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"protractor protractor.conf.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>e2e</strong>でE2Eテストを実行します。Angular CILプロジェクトデフォルトの<code>e2e</code>コマンド(= <code>ng e2e</code>コマンド)は使いません。<code>ng　e2e</code>はクライアント資産だけコンパイルして起動する処理が入っているからです。今回はビルドしたアプリ(クライアントとサーバが１つにまとまったアプリ)に対してテストします。</li>\n<li>\n<strong>webdriver:update</strong>でE2Eテストに必要なWebDriverをインストールまたは更新します。</li>\n<li>\n<strong>webdriver:start</strong>でWebDriverを起動します。Protractorのテストは事前にWebDriverを起動しておく必要があります。</li>\n<li>\n<strong>protractor</strong>でE2Eテストを実行します。起動時の設定は下で触れるprotractor.conf.jsを使います。</li>\n</ul>\n\n<h4>\n<span id=\"protractorconfjs\" class=\"fragment\"></span><a href=\"#protractorconfjs\"><i class=\"fa fa-link\"></i></a>protractor.conf.js</h4>\n\n<p>デフォルトでbaseUrlのポートは4200になっていますが、今回はビルドしたアプリに対してテストするので3000を指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">protractor.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"p\">...</span>\n  <span class=\"na\">baseUrl</span><span class=\"p\">:</span> <span class=\"s1\">'http://localhost:3000/'</span><span class=\"p\">,</span>\n  <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"7-試してみる\" class=\"fragment\"></span><a href=\"#7-%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>7. 試してみる</h3>\n\n<h4>\n<span id=\"単体テストを実行してみる\" class=\"fragment\"></span><a href=\"#%E5%8D%98%E4%BD%93%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>単体テストを実行してみる</h4>\n\n<ul>\n<li>\n<p>MongoDBをローカルで立ち上げる</p>\n\n<ul>\n<li>具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。</li>\n</ul>\n</li>\n<li><p>プロジェクト直下で<code>npm test</code>コマンドを実行するとテストが実行されます。クライアント側のテスト結果はブラウザに、サーバ側はターミナル（またはコンソール）に表示されます。資産はウォッチしているので、テストコードを修正すると、コンパイルされ再度テストが実行されるでしょう。</p></li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" alt=\"10_単体テスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png\"></a></p>\n\n<h4>\n<span id=\"e2eテストを実行してみる\" class=\"fragment\"></span><a href=\"#e2e%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>E2Eテストを実行してみる</h4>\n\n<ul>\n<li>\n<p>MongoDBをローカルで立ち上げる</p>\n\n<ul>\n<li>これも単体テストと同じでDBを事前に起動しておいてください。</li>\n</ul>\n</li>\n<li>\n<p>ビルドしたアプリを起動する</p>\n\n<ul>\n<li>プロジェクト直下で<code>npm run buildRun</code>を実行し、ビルド資産を起動します。</li>\n</ul>\n</li>\n<li>\n<p><code>npm run e2e</code>する</p>\n\n<ul>\n<li>別ターミナル（またはコマンドプロンプト）を開き、プロジェクト直下で<code>npm run e2e</code>コマンドを実行します。するとブラウザが立ち上がりテストが実行されます。\n<a href=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" alt=\"20_E2Eテスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png\"></a>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h2>\n\n<p>今回はMEANスタックアプリの単体テスト、E2Eテストについて紹介しました。<br>\nこれでビルドとテストができるようになったので、次回「その3. Dockerデプロイ編」では、Dockerでアプリを起動する方法とDockerでアプリのイメージを作ってデプロイする方法ついて紹介します。</p>\n","body":"## やりたいこと\n* Angular CLI使って、MEANスタック(**M**ongoDB + **E**xpress + **A**ngular + **N**odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。\n* フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。\n* Dockerを使ってアプリを簡単に配布したい。\n\nこれらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。\n\n* [その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)\n* その２. テスト編　⇦　今回はココ\n* その３. Dockerビルド編\n\n\n## その２. テスト編\n[その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)では、Angular CLIで作成したプロジェクトをベースに、\nMongoDBに登録しているメッセージを画面に一覧で表示するアプリを作成しました。\n今回は、クライアント側とサーバ側の[Jasmine](https://jasmine.github.io/)を使った単体テスト、[Protractor](http://www.protractortest.org/#/)を使ったE2Eテスト、それらを実行するnpm scriptsを作成します。\n最終的には下記のように`npm test`コマンドで単体テストが実行できるようになります。\n\n![10_単体テスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png)\n\nまたE2Eテストは`npm run e2e`コマンドで実施できるようになります。\n![20_E2Eテスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png)\n\n\n### プロジェクト構成\n今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。\n[その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)で作成したものをベースにテスト用の資産を追加します。詳細は[リポジトリ](https://github.com/Takumon/angular4-express4-typescritp2/tree/test)を参照してください。\n\n```:プロジェクト構成（完成イメージ）\n.\n├── dist                              ・・・(1) コンパイル資産出力先\n│   ├── server\n│   │   ├── ...\n│   │   ...\n│   │ \n│   └── server_test                      ・・・\u001c(1-1)　コンパイルされたサーバ側テスト資産\n│       ├── app.spec.js\n│       ├── app.spec.js.map\n│       ├── test.server.conf.js\n│       ├── test.server.conf.js.map\n│       ├── test.server.js\n│       └── test.server.js.map\n├── e2e                                ・・・\u001c(2)　E2Eテスト資産\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── server\n│   ├── ...\n│   ...\n│\n├── server_test                         ・・・\u001c(3)　サーバ側テスト資産\n│   ├── app.spec.ts\n│   ├── test.server.conf.ts\n│   ├── test.server.ts\n│   └── tsconfig.server_test.json\n├── src\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts      ・・・\u001c(4)　クライアント側テスト資産\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       ├── message.service.spec.ts ・・・\u001c(4)　クライアント側テスト資産\n│   │       └── message.service.ts\n│   ...\n│\n├── package-lock.json\n├── package.json\n├── protractor.conf.js                   ・・・\u001c(5)　E2Eテスト設定ファイル\n├── proxy.conf.json\n├── karma.conf.js\n├── tsconfig.json\n├── tslint.json\n└── README.md\n```\n#### 各資産について\n##### (1) dist\nコンパイル資産出力先。\n\n##### (1-1) dist/server_test\nコンパイルされたサーバ側テスト資産(JSファイル)の出力先。\nデプロイを考慮して本資産(dist/server)とは別ディレクトリにしています。\n\n##### (2) server_test\nサーバ側テスト資産のディレクトリ。\nコンパイル用の設定ファイルとテスト用の設定ファイルもココに格納します。\n\n##### (3) e2e\nE2Eテスト用資産のディレクトリ。\n\n##### (4) src/app配下のspec.tsファイル\nフロント側テスト資産。\nコンパイルやテストは`ng`コマンドで実施します。\n\n##### (5) protractor.conf.js\nE2Eテスト設定ファイル。\n今回はAngular CLIでプロジェクトが作成するデフォルトから少しだけ修正します。\n\n\n\n## 構築手順\n\n### 1. テストに必要なライブラリをインストール\n\n```\n$ npm install --save zone.js@0.8.12\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n```\n\n* [`zone.js@0.8.12`](https://www.npmjs.com/package/zone.js)\n    * クライアント側のテストで使用します。Angular CLIでプロジェクトを作成した時点でインストールされていますが、テスト実行時に`Failed: Cannot create property '__creationTrace__' on string '__zone_symbol__optimizedZoneEventTask'`のようなエラーが出ます。[GitHubのissues](https://github.com/angular/zone.js/issues/832)によるとv0.8.12はエラーが出ないそうなので、v0.8.12を再インストールします。\n* [`supertest`](https://www.npmjs.com/package/supertest)\n    * サーバ側のテストで使用します。APIテストを簡単にしてくれます。\n\n### 2. クライアント側を作成\nコンポーネント(app.component.ts)とサービス(message.service.ts)に対するテストコードを作成します。\nクライアント側のテスト実行には`ng test`コマンドを使うので、ビルド周りの設定は不要です。\n\n#### src/app/app.component.spec.ts\nコンポーネントは画面描画についてテストします。\nコンポーネントで使うサービスは、`TestBed`の`overrideComponent`メソッドを使ってモック化します。\n\n\n```js:app.component.spec.ts\nimport { async, ComponentFixture, TestBed, inject } from '@angular/core/testing';\nimport { FormsModule } from '@angular/forms';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/Rx';\n\nimport { AppComponent } from './app.component';\nimport { MessageService } from './message/message.service';\n\ndescribe('AppComponent', () => {\n  // テスト対象のComponent\n  let component: AppComponent;\n\n  // テスト対象のFixture\n  let fixture: ComponentFixture<AppComponent>;\n\n  // MessageServiceのモック\n  class MessageServiceMock {\n    getAll(): Observable<any> {\n      const response =  { messages : [\n        { message : 'テスト用メッセージ1' },\n        { message : 'テスト用メッセージ2' },\n        { message : 'テスト用メッセージ3' }\n      ]};\n\n      return Observable.from([response]);\n    }\n  }\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [ FormsModule ],\n      declarations: [\n        AppComponent\n      ],\n    })\n　　　　　　　　　// MessageServiceのモックを設定\n    .overrideComponent(AppComponent, {\n      set: {\n        providers: [\n          { provide: MessageService, useClass: MessageServiceMock },\n        ]\n      }\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(AppComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  }));\n\n  it('オブジェクトが生成されるか', async(() => {\n    const app = fixture.debugElement.componentInstance;\n    expect(app).toBeTruthy();\n  }));\n\n\n  it('メッセージを３件保持しているか', async(() => {\n    expect(component.messages).toEqual([\n        { message : 'テスト用メッセージ1' },\n        { message : 'テスト用メッセージ2' },\n        { message : 'テスト用メッセージ3' }\n    ]);\n  }));\n\n\n  it('画面にメッセージが３件表示されているか', async(() => {\n\n    const el = fixture.debugElement.nativeElement;\n\n    expect(el.querySelectorAll('li').length).toEqual(3);\n    expect(el.querySelectorAll('li')[0].textContent).toContain('テスト用メッセージ1');\n    expect(el.querySelectorAll('li')[1].textContent).toContain('テスト用メッセージ2');\n    expect(el.querySelectorAll('li')[2].textContent).toContain('テスト用メッセージ3');\n  }));\n});\n\n```\n\n\n#### src/app/message/message.service.spec.ts(一部抜粋)\nサービスのテストです。\nサーバとのやりとり(HTTP通信)については`MockBackend`を使ってモック化しています。\nなお`Error`は別途モックを作らなければなりません。\n全て載せると冗長なので`register`メソッドのテストは割愛しています。\n\n```js:message.service.spec.ts(一部抜粋)\nimport { TestBed, async, inject } from '@angular/core/testing';\nimport {HttpModule, BaseRequestOptions, Http, Response, ResponseOptions} from '@angular/http';\nimport {MockBackend, MockConnection} from '@angular/http/testing';\nimport { RequestMethod } from '@angular/http';\n\nimport { MessageService } from './message.service';\n\n\ndescribe('MessageService', () => {\n　　　　// HTTP通信エラー用のモック\n  class MockError extends Response implements Error {\n    name: any;\n    message: any;\n  }\n\n　　　　// HTTP通信はMockBackendでモック化\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpModule],\n      providers: [MessageService, {\n        provide: Http,\n        useFactory: (backend, options) => new Http(backend, options),\n        deps: [MockBackend, BaseRequestOptions]\n      }, MockBackend, BaseRequestOptions]\n    });\n  });\n\n  it('オブジェクトが生成されるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n    expect(service).toBeTruthy();\n  })));\n\n\n  describe('getAll', () => {\n\n    it('メッセージが取得できるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n　　　　　　　　　　　　// HTTP通信のモックで返す具体的な値の設定\n      backend.connections.subscribe((conn: MockConnection) => {\n        const body =  { messages : [\n          { message : 'テスト用メッセージ1' },\n          { message : 'テスト用メッセージ2' },\n          { message : 'テスト用メッセージ3' }\n        ]};\n\n        const ops = new ResponseOptions({\n          status: 200,\n          body: JSON.stringify(body)\n        });\n\n        conn.mockRespond(new Response(ops));\n      });\n\n　　　　　　　　　　　　// リクエストの内容を検証\n      backend.connections.subscribe((conn: MockConnection) => {\n        expect(conn.request.url).toEqual('/api/messages');\n        expect(conn.request.method).toEqual(RequestMethod.Get);\n      });\n\n　　　　　　　　　　　　// レスポンスの内容を検証\n      service.getAll().subscribe((res) => {\n        expect(res.messages.length).toEqual(3);\n        expect(res.messages).toEqual([\n          { message : 'テスト用メッセージ1' },\n          { message : 'テスト用メッセージ2' },\n          { message : 'テスト用メッセージ3' }\n        ]);\n      });\n    })));\n\n\n    it('異常時にエラーハンドリングされるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n　　　　　　　　　　　　// HTTP通信のモックで返す具体的な値の設定\n      backend.connections.subscribe((conn: MockConnection) => {\n        const body =  {\n          title : 'エラーが発生しました。',\n          error: 'エラー'\n        };\n\n        const ops = new ResponseOptions({\n          status: 500,\n          body: JSON.stringify(body)\n        });\n\n        conn.mockError(new MockError(ops));\n      });\n\n　　　　　　　　　　　　// リクエストの内容を検証\n      backend.connections.subscribe((conn: MockConnection) => {\n        expect(conn.request.url).toEqual('/api/messages');\n        expect(conn.request.method).toEqual(RequestMethod.Get);\n      });\n\n　　　　　　　　　　　　// レスポンスの内容を検証\n      service.getAll().subscribe(() => {\n        fail('エラーハンドリングされなかった。');\n      }, res => {\n        expect(res).toEqual({\n          title : 'エラーが発生しました。',\n          error: 'エラー'\n        });\n      });\n    })));\n\n  });\n\n\n});\n```\n\n\n\n### 3. サーバ側を作成\nプロジェクトの直下にserver_testディレクトリを作ってテストコードを書いていきます。\nどちらかというと結合テストよりで、１つ１つの資産に対してではなくapp.tsに対して、実際にDBに接続しながらAPIテストを行います。規模が小さい場合はコレで充分だと思います。\nまたExpressのテストフレームワークは[Mocha](https://mochajs.org/)が一般的ですが、クライアント側と統一したいので、今回は[Jasmine](https://jasmine.github.io/)を使うことにします。\n\n#### server_test/app.spec.ts(一部抜粋)\nポイントとしてはテスト実行前にMessageモデルを使ってDBを初期化していることです。\nそれによりテストデータがテストメソッドごとに想定する形になるようにしています。\n異常時のテストは、Messsageのfindメソッドでエラーが発生するようにJasmineの`spyOn`メソッドで処理を置き換えます。\n全て載せると冗長なのでメッセージ登録のテストは割愛しています。\n\n```js:app.spec.ts(一部抜粋)\nimport * as supertest from 'supertest';\n\nimport app from '../server/app';\nimport { Message } from '../server/models/message';\n\n\ndescribe('/api/messages', () => {\n  const request = supertest(app);\n  const endpoint = '/api/messages';\n\n  const messageAscending = (m1, m2) => {\n    if (m1.message > m2.message) {\n      return 1;\n    }\n\n    if (m1.message < m2.message) {\n      return -1;\n    }\n\n    return 0;\n  };\n\n  // テスト前にDBのmessagesを初期化する\n  beforeEach(() => {\n    Message.remove({}, () => {});\n  });\n\n\n  describe('Get', () => {\n\n    it('レスポンスがjson形式でステータスコードが200か', (done) => {\n\n　　　　　　　　　　　　　// リクエストを投げる\n      request.get(endpoint)\n        .expect((res) => {\n\n　　　　　　　　　　　　　　　　　　　　// 検証\n          expect(res.type).toEqual('application/json');\n          expect(res.statusCode).toEqual(200);\n        }).end(done);\n    });\n\n\n    it('メッセージ一覧が取得できるか', (done) => {\n\n      const testData = [\n        { message: 'テスト用メッセージ１' },\n        { message: 'テスト用メッセージ２' },\n        { message: 'テスト用メッセージ３' },\n      ];\n　　　　　　　　　　　　\n　　　　　　　　　　　　// 事前準備（テストデータを作成）\n      Message.create(testData, (erro , doc ) => {\n\n　　　　　　　　　　　　　　　　　// リクエストを投げる\n        request.get(endpoint)\n          .expect((res) => {\n　　　　　　　　　　　　　　　　　　　　　　　　\n　　　　　　　　　　　　　　　　　　　　　　　　// 検証\n            const sortedMessages = res.body.messages.sort(messageAscending);\n\n            expect(sortedMessages.length).toEqual(3);\n            expect(sortedMessages[0].message).toEqual('テスト用メッセージ１');\n            expect(sortedMessages[1].message).toEqual('テスト用メッセージ２');\n            expect(sortedMessages[2].message).toEqual('テスト用メッセージ３');\n          })\n          .end(done);\n      });\n    });\n\n\n    it('異常時にエラーハンドリングされるか', (done) => {\n\n      // エラーとなるようにMessageのfindメソッドを置き換える\n      spyOn(Message, 'find').and.callFake(function(callback) {\n        callback(new Error('エラー'), null);\n      });\n　　　　　　　　　　　　　\n　　　　　　　　　　　　// リクエストを投げる\n      request.get(endpoint)\n        .expect((res) => {\n\n          // 検証\n          expect(res.type).toEqual('application/json');\n          expect(res.statusCode).toEqual(500);\n\n          expect(res.body.title).toEqual('エラーが発生しました。');\n          expect(res.body.error).toEqual('エラー');\n        })\n        .end(done);\n    });\n\n  });\n});\n```\n\n\n\n### 4. 単体テスト周りの環境を整備\nE2Eの説明に入る前に、いったん単体テスト周りの環境を整備します。\n\n\n#### package.json\n[前回](http://qiita.com/Takumon/items/572438809384e2e11792#pakcagejson)作成したものをベースに単体テストのスクリプトを追加してください。\n\n```json:package.json\n \"scripts\": {\n    ...\n    \"test\": \"run-p test:*\",\n    \"test:client\": \"ng test\",\n    \"test:server\": \"npm-run-all -s build:server_test -p watch:server_test  boot:server_test\",\n    \"watch:server_test\": \"tsc -w -p ./server_test/tsconfig.server_test.json\",\n    \"boot:server_test\": \"nodemon ./dist/server_test/test.server.js\",\n    \"build:server_test\": \"tsc -p ./server/tsconfig.server.json\",\n    ...\n  },\n```\n\n\n* **test**でクライアント側とサーバ側のテストを実行します。\n* **test:client**でクライアント側のテストを実行します。Angular CLIのngコマンドにお任せしています。\n* **watch:server_test**でサーバ側テスト資産をウォッチして変更があればコンパイルするようにします。\n* **boot:server_test**でコンパイルしたサーバ側テスト資産を起動します。nodeではなくnodemonを使うことで資産に更新があった場合でも即座に反映するようにしています。\n* **build:server_test**でサーバ側テスト資産をコンパイルします。コンパイル時の設定は下で触れるserver_test/test.server.conf.tsを使います。\n\n#### server_test/test.server.ts\nサーバ側テストの起動処理を書きます。\nレポーターには[jasmine-spec-reporter](https://www.npmjs.com/package/jasmine-spec-reporter)を使いましょう。このライブラリはAngular CLIで作ったプロジェクトにはデフォルトでインストール済みです。\n\n```js:test.server.ts\nimport { SpecReporter, DisplayProcessor } from 'jasmine-spec-reporter';\nconst Jasmine = require('jasmine');\nimport SuiteInfo = jasmine.SuiteInfo;\n\nimport { config } from './test.server.conf';\n\n\nclass CustomProcessor extends DisplayProcessor {\n    public displayJasmineStarted(info: SuiteInfo, log: string): string {\n        return `TypeScript ${log}`;\n    }\n}\n\nconst runner = new Jasmine();\nrunner.loadConfig(config);\nrunner.addReporter(new SpecReporter({\n    customProcessors: [CustomProcessor],\n}));\nrunner.onComplete(function(passed){\n  if ( passed ) {\n    console.log('Success');\n  } else {\n    console.error('Failed');\n  }\n});\n\nrunner.execute();\n```\n\n\n#### server_test/test.server.conf.ts\nサーバ側テスト起動時の設定です。\n注意点として`spec_files`に指定する相対パスはプロジェクト直下が起点になります。そのため`__dirname`を使って指定してください。\n\n```js:test.server.conf.ts\nexport const config = {\n  spec_dir: '.',\n  spec_files: [\n    `${__dirname}/*spec.js`\n  ],\n  'stopSpecOnExpectationFailure': false,\n  'random': false\n};\n```\n\n\n\n#### server_test/tsconfig.server_test.json\n\nサーバ側テスト資産をコンパイルする時の設定ファイルです。\n\n```json:tsconfig.server_test.json\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"preserveConstEnums\": true,\n    \"outDir\": \"../dist\",\n    \"mapRoot\": \"../dist\",\n    \"module\": \"commonjs\"\n  } ,\n  \"include\": [\n    \"**/*.spec.ts\",\n    \"./test.server.ts\",\n    \"./test.server.conf.ts\"\n  ]\n}\n```\n\n`outDir`が`../dist/server_test`ではなく`../dist`であることに注意してください。\nテスト資産は`server`ディレクトリ配下の資産に依存しているため、`../dist/server_test`を指定するとコンパイルした時に下記のように出力されてしまいます。\n\n```:\u001c（悪い例）outDirに\"../dist/server_test\"を指定したときのコンパイル結果\n.\n└── dist\n    └── server_test\n        ├── server\n        └── server_test \n```\n```:\u001c（良い例）outDirに\"../dist\"を指定したときのコンパイル結果\n.\n└── dist\n    ├── server\n    └── server_test \n```\n\n\n### 5. E2Eテストを作成\n単体テストを作成したので次はE2Eテストを作りましょう。\nAngular CLIで作成したプロジェクトにデフォルトで用意されている[Protractor](http://www.protractortest.org/#/)を使ったテストコードを作成します。\n\n#### e2e/app.e2e-spec.ts\n基本的にelementメソッドで要素を取得して、sendKeysメソッドやclickメソッドで操作を行います。\n\n```js:app.e2e-spec.ts\nimport { Angular4Express4Typescritp2Page } from './app.po';\nimport { browser, element, by } from 'protractor';\n\n\ndescribe('E2Eテスト', () => {\n  let page: Angular4Express4Typescritp2Page;\n\n  beforeEach(() => {\n    page = new Angular4Express4Typescritp2Page();\n  });\n\n  it('画面タイトルが正しいか', () => {\n    page.navigateTo();\n    expect(page.getParagraphText()).toEqual('メッセージ一覧');\n  });\n\n\n  it('メッセージが登録できるか', () => {\n    page.navigateTo();\n    const newMessage = `サンプルメッセージ ${new Date().toString()}`;\n    element(by.id('registerMessage')).sendKeys(newMessage);\n\n    element(by.id('registerMessageButton')).click();\n\n    // 登録後メッセージ入力項目が初期化されているか\n    expect(element(by.id('registerMessage')).getText()).toEqual('');\n\n    // 登録後一覧に登録したメッセージが含まれているか\n    const messages = element(by.id('messageList')).all(by.tagName('li'));\n    expect(messages.last().getText()).toEqual(newMessage);\n  });\n\n});\n```\n\n### 6. E2Eテスト周りの環境を整備\n\n#### package.json\nAngular CILプロジェクトデフォルトの\"e2e\"コマンドは削除して、スクリプトに下記を追加してください。\n\n```json:package.json\n \"scripts\": {\n    ...\n    \"e2e\": \"npm-run-all -s  webdriver:update -p webdriver:start protractor\",\n    \"webdriver:update\": \"webdriver-manager update\",\n    \"webdriver:start\": \"webdriver-manager start\",\n    \"protractor\": \"protractor protractor.conf.js\",\n    ...\n  },\n```\n\n* **e2e**でE2Eテストを実行します。Angular CILプロジェクトデフォルトの`e2e`コマンド(= `ng e2e`コマンド)は使いません。`ng　e2e`はクライアント資産だけコンパイルして起動する処理が入っているからです。今回はビルドしたアプリ(クライアントとサーバが１つにまとまったアプリ)に対してテストします。\n* **webdriver:update**でE2Eテストに必要なWebDriverをインストールまたは更新します。\n* **webdriver:start**でWebDriverを起動します。Protractorのテストは事前にWebDriverを起動しておく必要があります。\n* **protractor**でE2Eテストを実行します。起動時の設定は下で触れるprotractor.conf.jsを使います。\n\n#### protractor.conf.js\nデフォルトでbaseUrlのポートは4200になっていますが、今回はビルドしたアプリに対してテストするので3000を指定します。\n\n```js:protractor.conf.js\nexports.config = {\n  ...\n  baseUrl: 'http://localhost:3000/',\n  ...\n}\n```\n\n### 7. 試してみる\n#### 単体テストを実行してみる\n* MongoDBをローカルで立ち上げる\n    * 具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。\n\n* プロジェクト直下で`npm test`コマンドを実行するとテストが実行されます。クライアント側のテスト結果はブラウザに、サーバ側はターミナル（またはコンソール）に表示されます。資産はウォッチしているので、テストコードを修正すると、コンパイルされ再度テストが実行されるでしょう。\n\n![10_単体テスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png)\n\n\n\n#### E2Eテストを実行してみる\n* MongoDBをローカルで立ち上げる\n    * これも単体テストと同じでDBを事前に起動しておいてください。\n \n* ビルドしたアプリを起動する\n    * プロジェクト直下で`npm run buildRun`を実行し、ビルド資産を起動します。\n\n* `npm run e2e`する\n    * 別ターミナル（またはコマンドプロンプト）を開き、プロジェクト直下で`npm run e2e`コマンドを実行します。するとブラウザが立ち上がりテストが実行されます。\n![20_E2Eテスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png)\n\n\n## 終わりに\n今回はMEANスタックアプリの単体テスト、E2Eテストについて紹介しました。\nこれでビルドとテストができるようになったので、次回「その3. Dockerデプロイ編」では、Dockerでアプリを起動する方法とDockerでアプリのイメージを作ってデプロイする方法ついて紹介します。\n\n","comments_count":0,"created_at":"2017-07-24T07:12:10+09:00","likes_count":9,"reactions_count":0},"relations":[{"node":{"fields":{"slug":"/bb5bc899-9dfd-5e67-bc4c-bc422ba8d176/","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その１. ビルド編","date":"2017-07-19T02:06:59+09:00","excerpt":"やりたいことAngular CLI使って、MEANスタック(MongoDB + Express + Angular + NodeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。フロント側とサーバ側の両方をweb...","tags":["JavaScript","MongoDB","Express","TypeScript","AngularJS","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"bb5bc899-9dfd-5e67-bc4c-bc422ba8d176","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その１. ビルド編","rendered_body":"\n<h2>\n<span id=\"やりたいこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたいこと</h2>\n\n<ul>\n<li>Angular CLI使って、MEANスタック(<strong>M</strong>ongoDB + <strong>E</strong>xpress + <strong>A</strong>ngular + <strong>N</strong>odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。</li>\n<li>フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。</li>\n<li>Dockerを使ってアプリを簡単に配布したい。</li>\n</ul>\n\n<p>これらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。</p>\n\n<ul>\n<li>その１. ビルド編　⇦　今回はココ</li>\n<li><a href=\"http://qiita.com/Takumon/items/b4211fcabad740baa551\" id=\"reference-b35cd1a7f8ba1daaecd8\">その２. テスト編</a></li>\n<li>その３. Dockerビルド編</li>\n</ul>\n\n<h2>\n<span id=\"その１-ビルド編\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%81%AE%EF%BC%91-%E3%83%93%E3%83%AB%E3%83%89%E7%B7%A8\"><i class=\"fa fa-link\"></i></a>その１. ビルド編</h2>\n\n<p>Angular CLIで作成したプロジェクトをベースに、<br>\nMongoDBに登録したメッセージを画面に一覧で表示するアプリを作成していきます。<br>\nメッセージを登録すると一覧に追加されていくようなアプリです。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" alt=\"アプリ概要.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png\"></a></p>\n\n<h3>\n<span id=\"プロジェクト構成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクト構成</h3>\n\n<p>今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。<br>\n<a href=\"https://github.com/Takumon/angular4-express4-typescritp2/tree/build\" rel=\"nofollow noopener\" target=\"_blank\">リポジトリ</a>も用意しているので詳細はそちらを参照してください。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">プロジェクトの構成（完成イメージ）</span></div>\n<div class=\"highlight\"><pre>.\n├── dist                ・・・(1) コンパイル資産出力先\n│   └── server　　　　　　　　      ・・・(1-1)　コンパイルされたサーバ資産\n│       ├── app.js\n│       ├── app.js.map\n│       ├── bin\n│       │   ├── www.js\n│       │   └── www.js.map\n│       ├── config.js\n│       ├── config.js.map\n│       ├── models\n│       │   ├── message.js\n│       │   └── message.js.map\n│       ├── public      ・・・(1-2) コンパイルされたクライアント資産\n│       │   ├── favicon.ico\n│       │   ├── index.html\n│       │   ├── inline.bundle.js\n│       │   ├── inline.bundle.js.map\n│       │   ├── main.bundle.js\n│       │   ├── main.bundle.js.map\n│       │   ├── polyfills.bundle.js\n│       │   ├── polyfills.bundle.js.map\n│       │   ├── styles.bundle.js\n│       │   ├── styles.bundle.js.map\n│       │   ├── vendor.bundle.js\n│       │   └── vendor.bundle.js.map\n│       └── routes\n│           ├── message.js\n│           └── message.js.map\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── e2e\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── server               ・・・(2)　サーバ資産\n│   ├── app.ts\n│   ├── bin\n│   │   └── www.ts\n│   ├── config.ts\n│   ├── models\n│   │   └── message.ts\n│   ├── routes\n│   │   └── message.ts\n│   └── tsconfig.server.json\n├── src                   ・・・(3)　クライアント資産\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       └── message.service.ts\n│   ├── assets\n│   ├── environments\n│   │   ├── environment.prod.ts\n│   │   └── environment.ts\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── main.ts\n│   ├── polyfills.ts\n│   ├── styles.css\n│   ├── test.ts\n│   ├── tsconfig.app.json\n│   ├── tsconfig.spec.json\n│   └── typings.d.ts\n├── karma.conf.js\n├── package-lock.json\n├── package.json\n├── protractor.conf.js\n├── proxy.conf.json    ・・・(4) \n├── tsconfig.json\n├── tslint.json\n└── README.md\n</pre></div>\n</div>\n\n<h4>\n<span id=\"各資産について\" class=\"fragment\"></span><a href=\"#%E5%90%84%E8%B3%87%E7%94%A3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>各資産について</h4>\n\n<h5>\n<span id=\"1-dist\" class=\"fragment\"></span><a href=\"#1-dist\"><i class=\"fa fa-link\"></i></a>(1) dist</h5>\n\n<p>コンパイルした資産の出力先フォルダ</p>\n\n<h5>\n<span id=\"1-1-distserver\" class=\"fragment\"></span><a href=\"#1-1-distserver\"><i class=\"fa fa-link\"></i></a>(1-1) dist/server</h5>\n\n<p>ここにサーバ側のコンパイルされたjsファイルが出力されます。<br>\nserverフォルダを設けているのは本資産とテスト資産を分離したかったからです。<br>\nその２. テスト編で説明しますが、サーバ側テスト用jsファイルはdist配下のserver_testフォルダに出力されるようにしています。</p>\n\n<h5>\n<span id=\"1-2-distserverpublic\" class=\"fragment\"></span><a href=\"#1-2-distserverpublic\"><i class=\"fa fa-link\"></i></a>(1-2) dist/server/public</h5>\n\n<p>コンパイルされたクライアント資産。<br>\nサーバ側アプリの資産の一部としてコンパイルされるようにしています。<br>\nExpressのアプリでは静的資産をpublicフォルダに置くのが一般的なのでこうしました。</p>\n\n<h5>\n<span id=\"2-server\" class=\"fragment\"></span><a href=\"#2-server\"><i class=\"fa fa-link\"></i></a>(2) server</h5>\n\n<p>サーバ資産を格納するためのディレクトリ。<br>\nいろいろ悩みましたが、TypeScript資産をコンパイルすることとテストすることを考慮してこのような構成にしました。</p>\n\n<h5>\n<span id=\"3-src\" class=\"fragment\"></span><a href=\"#3-src\"><i class=\"fa fa-link\"></i></a>(3) src</h5>\n\n<p>フロントの実行資産とテスト資産を格納するためのディレクリ。<br>\nAngular CLIでプロジェクトを作成するとデフォルトで作成されます。<br>\nビルドやアプリ起動は<code>ng</code>コマンドで実施します。</p>\n\n<h5>\n<span id=\"4-proxyconfjson\" class=\"fragment\"></span><a href=\"#4-proxyconfjson\"><i class=\"fa fa-link\"></i></a>(4) proxy.conf.json</h5>\n\n<p><code>npm start</code>でフロント側とサーバ側を同時に起動した時に、クライアント側からサーバ側へのリクエストを送れるようにするためのプロキシ設定です。</p>\n\n<h2>\n<span id=\"構築手順\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E7%AF%89%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>構築手順</h2>\n\n<h3>\n<span id=\"1-プロジェクト作成\" class=\"fragment\"></span><a href=\"#1-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>1. プロジェクト作成</h3>\n\n<ul>\n<li>\n<p>Angular CLIをインストール</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install -g @angular/cli\n</pre></div></div>\n</li>\n<li>\n<p>プロジェクトを生成、Angular CLIであらかじめ定義している依存ライブラリをインストール</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ ng new sample\n$ cd sample\n$ npm install\n</pre></div></div>\n</li>\n<li>\n<p>Angular CLIであらかじめ定義している依存ライブラリの他に必要なものををインストール<br>\n</p>\n<dd>\n<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/express\" rel=\"nofollow noopener\" target=\"_blank\"><code>express</code></a><br>\n    </dt>\n<dd>Webアプリケーションフレームワーク<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/body-parser\" rel=\"nofollow noopener\" target=\"_blank\"><code>body-parser</code></a><br>\n    </dt>\n<dd>リクエストボディのパーサー<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/mongoose\" rel=\"nofollow noopener\" target=\"_blank\"><code>mongoose</code></a><br>\n    </dt>\n<dd>MongoDBへのアクセスを簡単にしてくれるAPI<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/nodemon\" rel=\"nofollow noopener\" target=\"_blank\"><code>nodemon</code></a><br>\n    </dt>\n<dd>node実行時にソースの変更を自動反映してくれるツール<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/npm-run-all\" rel=\"nofollow noopener\" target=\"_blank\"><code>npm-run-all</code></a><br>\n    </dt>\n<dd>npm-scripts の連結実行を管理するためのパッケージ<br>\n</dd>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install --save express body-parser mongoose\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n</pre></div></div>\n</li>\n</ul>\n\n<h3>\n<span id=\"2-サーバ側を作成\" class=\"fragment\"></span><a href=\"#2-%E3%82%B5%E3%83%BC%E3%83%90%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2. サーバ側を作成</h3>\n\n<p>Angular CLIで作ったプロジェクトの直下に<code>server</code>フォルダを作って、その中にサーバ側の処理を書いていきます。</p>\n\n<h4>\n<span id=\"servermodelsmessagets\" class=\"fragment\"></span><a href=\"#servermodelsmessagets\"><i class=\"fa fa-link\"></i></a>server/models/message.ts</h4>\n\n<p>MongoDBにアクセスするためのモデルを定義します。<br>\nDBアクセスにはmangoosを使います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Message</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'messages'</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">}</span>\n<span class=\"p\">}));</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverroutesmessagets\" class=\"fragment\"></span><a href=\"#serverroutesmessagets\"><i class=\"fa fa-link\"></i></a>server/routes/message.ts</h4>\n\n<p>エンドポイントごとの処理を記述するルータを定義します。<br>\nメッセージの取得と登録には<code>server/models/message.ts</code>を使います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">http</span> <span class=\"k\">from</span> <span class=\"s1\">'http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Router</span><span class=\"p\">,</span> <span class=\"nx\">Response</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'express'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../models/message'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">messageRouter</span><span class=\"p\">:</span> <span class=\"nx\">Router</span> <span class=\"o\">=</span> <span class=\"nx\">Router</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// 全てのメッセージを取得する</span>\n<span class=\"nx\">messageRouter</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">doc</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span><span class=\"na\">messages</span><span class=\"p\">:</span> <span class=\"nx\">doc</span><span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// メッセージを登録する</span>\n<span class=\"nx\">messageRouter</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Message</span><span class=\"p\">({</span>\n    <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">save</span><span class=\"p\">((</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n      <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'メッセージを登録しました。'</span><span class=\"p\">,</span>\n      <span class=\"na\">obj</span><span class=\"p\">:</span> <span class=\"nx\">result</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">messageRouter</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverappts\" class=\"fragment\"></span><a href=\"#serverappts\"><i class=\"fa fa-link\"></i></a>server/app.ts</h4>\n\n<p>Expressで使用するルータと依存モジュールを定義するためのファイルを作成します。<br>\nメッセージAPIのエンドポイントは<code>/api/messages</code>に設定し、<br>\nmongooseを使ってMongoDBへの接続設定をしています。<br>\nクライアント資産はビルドするとpublicフォルダ配下に出力されるようにしているので、<br>\n静的資産へのルーティングはpublicフォルダを指定しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">express</span> <span class=\"k\">from</span> <span class=\"s1\">'express'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">path</span> <span class=\"k\">from</span> <span class=\"s1\">'path'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">bodyParser</span> <span class=\"k\">from</span> <span class=\"s1\">'body-parser'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">messageRouter</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./routes/message'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MONGO_URL</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./config'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">App</span> <span class=\"p\">{</span>\n  <span class=\"kr\">public</span> <span class=\"nx\">express</span><span class=\"p\">:</span> <span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">Application</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">middleware</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">routes</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kr\">private</span> <span class=\"nx\">middleware</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">bodyParser</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">());</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">bodyParser</span><span class=\"p\">.</span><span class=\"nx\">urlencoded</span><span class=\"p\">({</span> <span class=\"na\">extended</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">}));</span>\n    <span class=\"c1\">// 接続する MongoDB の設定</span>\n    <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nb\">Promise</span> <span class=\"o\">=</span> <span class=\"nb\">global</span><span class=\"p\">.</span><span class=\"nb\">Promise</span><span class=\"p\">;</span>\n    <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">MONGO_URL</span> <span class=\"o\">||</span> <span class=\"nx\">MONGO_URL</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">useMongoClient</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"p\">});</span>\n    <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'SIGINT'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">disconnect</span><span class=\"p\">();</span> <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kr\">private</span> <span class=\"nx\">routes</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 静的資産へのルーティング</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"kr\">static</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'public'</span><span class=\"p\">)));</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"nx\">messageRouter</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// その他のリクエストはindexファイルにルーティング</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">sendFile</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'public/index.html'</span><span class=\"p\">));</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"k\">new</span> <span class=\"nx\">App</span><span class=\"p\">().</span><span class=\"nx\">express</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverbinwwwts\" class=\"fragment\"></span><a href=\"#serverbinwwwts\"><i class=\"fa fa-link\"></i></a>server/bin/www.ts</h4>\n\n<p>Node.js でサーバを起動するための設定ファイルを作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">www.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">http</span> <span class=\"k\">from</span> <span class=\"s1\">'http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">SERVER_PORT</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../config'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">app</span> <span class=\"k\">from</span> <span class=\"s1\">'../app'</span><span class=\"p\">;</span>\n\n\n\n<span class=\"c1\">// ポートの設定.</span>\n<span class=\"kd\">const</span> <span class=\"nx\">port</span> <span class=\"o\">=</span> <span class=\"nx\">normalizePort</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">PORT</span> <span class=\"o\">||</span> <span class=\"nx\">SERVER_PORT</span><span class=\"p\">);</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"kd\">set</span><span class=\"p\">(</span><span class=\"s1\">'port'</span><span class=\"p\">,</span> <span class=\"nx\">port</span><span class=\"p\">);</span>\n\n\n<span class=\"c1\">// HTTPサーバ生成.</span>\n<span class=\"kd\">const</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">);</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"nx\">port</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`API running on localhost:</span><span class=\"p\">${</span><span class=\"nx\">port</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">));</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"nx\">onError</span><span class=\"p\">);</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'listening'</span><span class=\"p\">,</span> <span class=\"nx\">onListening</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// ポートを正規化.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">normalizePort</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">):</span> <span class=\"nx\">number</span><span class=\"o\">|</span><span class=\"nx\">string</span><span class=\"o\">|</span><span class=\"kr\">boolean</span>  <span class=\"p\">{</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">normalizedPort</span><span class=\"p\">:</span> <span class=\"nx\">number</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">val</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span><span class=\"p\">)</span>\n    <span class=\"p\">?</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">:</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">isNaN</span><span class=\"p\">(</span><span class=\"nx\">normalizedPort</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">normalizedPort</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">normalizedPort</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// エラーハンドラー.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">onError</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">):</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">syscall</span> <span class=\"o\">!==</span> <span class=\"s1\">'listen'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">bind</span> <span class=\"o\">=</span> <span class=\"k\">typeof</span> <span class=\"nx\">port</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span>\n    <span class=\"p\">?</span> <span class=\"s1\">'Pipe '</span> <span class=\"o\">+</span> <span class=\"nx\">port</span>\n    <span class=\"p\">:</span> <span class=\"s1\">'Port '</span> <span class=\"o\">+</span> <span class=\"nx\">port</span><span class=\"p\">;</span>\n\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"s1\">'EACCES'</span><span class=\"p\">:</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">bind</span> <span class=\"o\">+</span> <span class=\"s1\">' requires elevated privileges'</span><span class=\"p\">);</span>\n      <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"s1\">'EADDRINUSE'</span><span class=\"p\">:</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">bind</span> <span class=\"o\">+</span> <span class=\"s1\">' is already in use'</span><span class=\"p\">);</span>\n      <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// サーバ起動時のリスナー.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">onListening</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">addr</span> <span class=\"o\">=</span> <span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">address</span><span class=\"p\">();</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">bind</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">addr</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span><span class=\"p\">)</span>\n    <span class=\"p\">?</span> <span class=\"s2\">`pipe </span><span class=\"p\">${</span><span class=\"nx\">addr</span><span class=\"p\">}</span><span class=\"s2\">`</span>\n    <span class=\"p\">:</span> <span class=\"s2\">`port </span><span class=\"p\">${</span><span class=\"nx\">addr</span><span class=\"p\">.</span><span class=\"nx\">port</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverconfigts\" class=\"fragment\"></span><a href=\"#serverconfigts\"><i class=\"fa fa-link\"></i></a>server/config.ts</h4>\n\n<p>サーバ側の設定ファイルを作成します。<br>\nポートとMongoDBのURLを定義しています。<br>\n今回MongoDBはローカルにポート27017で立てる想定です。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">config.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_PORT</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">MONGO_URL</span> <span class=\"o\">=</span> <span class=\"s1\">'mongodb://localhost:27017/test'</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"3-クライアント側を作成\" class=\"fragment\"></span><a href=\"#3-%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>3. クライアント側を作成</h3>\n\n<p>Angular CLIでプロジェクトを作成すると最低限のクライアント資産が生成されるので、<br>\nここでは修正が必要なファイル、新規作成するファイルのみ紹介します。</p>\n\n<h4>\n<span id=\"srcappmessagemessageservicets\" class=\"fragment\"></span><a href=\"#srcappmessagemessageservicets\"><i class=\"fa fa-link\"></i></a>src/app/message/message.service.ts</h4>\n\n<p>サーバ側からメッセージを取得するためのサービスを新規作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.service.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Http</span><span class=\"p\">,</span> <span class=\"nx\">Response</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MessageService</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">private</span> <span class=\"nx\">http</span><span class=\"p\">:</span> <span class=\"nx\">Http</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"nx\">getAll</span><span class=\"p\">():</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">http</span>\n        <span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"na\">response</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n            <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n        <span class=\"p\">})</span>\n        <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">throw</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()));</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">regist</span><span class=\"p\">(</span><span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">http</span>\n      <span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">message</span><span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"na\">response</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n            <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n      <span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">throw</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappcomponentts\" class=\"fragment\"></span><a href=\"#srcappappcomponentts\"><i class=\"fa fa-link\"></i></a>src/app/app.component.ts</h4>\n\n<p>既存のファイルを修正して、messagesを保持するようにします。<br>\nMessageServiceを使ってメッセージを取得します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span><span class=\"p\">,</span> <span class=\"nx\">OnInit</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-root'</span><span class=\"p\">,</span>\n  <span class=\"na\">templateUrl</span><span class=\"p\">:</span> <span class=\"s1\">'./app.component.html'</span><span class=\"p\">,</span>\n  <span class=\"na\">styleUrls</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'./app.component.css'</span><span class=\"p\">],</span>\n  <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"nx\">MessageService</span> <span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">{</span>\n  <span class=\"nl\">messages</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n  <span class=\"nl\">message</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">private</span> <span class=\"nx\">messageService</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getMessages</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">getMessages</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messageService</span>\n      <span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">()</span>\n      <span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">res</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">;</span>\n      <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">registerMessage</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messageService</span>\n      <span class=\"p\">.</span><span class=\"nx\">register</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">res</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getMessages</span><span class=\"p\">();</span>\n      <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappcomponenthtml\" class=\"fragment\"></span><a href=\"#srcappappcomponenthtml\"><i class=\"fa fa-link\"></i></a>src/app/app.component.html</h4>\n\n<p>既存のファイルの修正して、メッセージ一覧と登録のUIに書き換えます。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.html</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>メッセージ一覧<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;button</span> <span class=\"na\">id=</span><span class=\"s\">\"getMessagesButton\"</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">getMessages</span><span class=\"err\">()\"</span><span class=\"nt\">&gt;</span>メッセージ一覧を最新化<span class=\"nt\">&lt;/button&gt;</span>\n    <span class=\"nt\">&lt;ul</span> <span class=\"na\">id=</span><span class=\"s\">\"messageList\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;li</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let item of messages\"</span><span class=\"nt\">&gt;</span>\n        {{item.message}}\n      <span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;/ul&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>メッセージ登録<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"na\">id=</span><span class=\"s\">\"registerMessage\"</span> <span class=\"err\">[(</span><span class=\"na\">ngModel</span><span class=\"err\">)]=\"</span><span class=\"na\">message</span><span class=\"err\">\"</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"登録するメッセージを入力してください。\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span> <span class=\"na\">id=</span><span class=\"s\">\"registerMessageButton\"</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)='</span><span class=\"na\">registerMessage</span><span class=\"err\">()'</span><span class=\"nt\">&gt;</span>登録<span class=\"nt\">&lt;/button&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappmodulets\" class=\"fragment\"></span><a href=\"#srcappappmodulets\"><i class=\"fa fa-link\"></i></a>src/app/app.module.ts</h4>\n\n<p>HttpModule、FormsModule、MessageServiceを追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.module.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">BrowserModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/platform-browser'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">NgModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">HttpModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/forms'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.component'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"nx\">AppComponent</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"nx\">BrowserModule</span><span class=\"p\">,</span>\n    <span class=\"nx\">HttpModule</span><span class=\"p\">,</span>\n    <span class=\"nx\">FormsModule</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MessageService</span><span class=\"p\">],</span>\n  <span class=\"na\">bootstrap</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">AppComponent</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppModule</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n\n</pre></div>\n</div>\n\n<h3>\n<span id=\"4-ビルドまわり環境を整備\" class=\"fragment\"></span><a href=\"#4-%E3%83%93%E3%83%AB%E3%83%89%E3%81%BE%E3%82%8F%E3%82%8A%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>4. ビルドまわり環境を整備</h3>\n\n<h4>\n<span id=\"pakcagejson\" class=\"fragment\"></span><a href=\"#pakcagejson\"><i class=\"fa fa-link\"></i></a>pakcage.json</h4>\n\n<p>スクリプトを下記のように修正します。<br>\n(npm scriptsは便利ですが、コメントが記述できないのが残念だなーと思いました。)</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\">\n  </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"start\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s build:server -p start:*\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"start:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng serve --aot=true --progress=false --proxy-config proxy.conf.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"start:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-p watch:server boot:server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"watch:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -w -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"boot:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"nodemon ./dist/server/bin/www.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-s build:server build:client\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng build --output-path=./dist/server/public\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"buildRun\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-s build boot:server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>start</strong>でクライアント資産とサーバ資産の両方を起動します。</li>\n<li>\n<strong>start:client</strong>でクライアント資産をコンパイルして起動します。Angular CLIのngコマンドにお任せしています。なおstartではクライアント資産とサーバ資産で二つのサーバを起動するので、クライアントからサーバへ（リクエストを送れるようにプロキシ設定を行っています。プロキシ設定ファイルについては下で触れます。</li>\n<li>\n<strong>start:server</strong>でサーバ資産をコンパイルしてExpressを起動します。</li>\n<li>\n<strong>watch:server</strong>でサーバ側のTypeScriptをウォッチして変更があればコンパイルするようにします。</li>\n<li>\n<strong>boot:server</strong>でコンパイルしたサーバ側資産を起動します。nodeではなくnodemonを使うことでコンパイルしたサーバ資産に更新があった場合でも即座に更新を反映するようにしています。</li>\n<li>\n<strong>build</strong>クライアント資産とサーバ資産の両方をコンパイルします。</li>\n<li>\n<strong>build:server</strong>でサーバ資産をコンパイルしています。コンパイル時の設定は下で触れる<code>/server/tsconfig.server.json</code>を使います。</li>\n<li>\n<strong>build:client</strong>でクライアント資産をコンパイルしています。出力先はサーバ側資産の静的ファイル格納フォルダ（<code>dist/server/public</code>）を指定しています。</li>\n<li>\n<strong>buildRun</strong>でクライアント資産とサーバ資産の両方をコンパイルしサーバ資産を起動します。とりあえずデプロイするアプリを起動したい時の便利コマンドです。</li>\n</ul>\n\n<h4>\n<span id=\"servertsconfigserverjson\" class=\"fragment\"></span><a href=\"#servertsconfigserverjson\"><i class=\"fa fa-link\"></i></a>server/tsconfig.server.json</h4>\n\n<p>サーバ資産コンパイルときの設定ファイルを作成します。<br>\n<code>outDir</code>で出力先をdist/serverに指定しています。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">tsconfig.server.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"extends\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../tsconfig.json\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"preserveConstEnums\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"outDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist/server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"mapRoot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist/server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"module\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"commonjs\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<h4>\n<span id=\"proxyconfjson\" class=\"fragment\"></span><a href=\"#proxyconfjson\"><i class=\"fa fa-link\"></i></a>proxy.conf.json</h4>\n\n<p><code>start</code>でクライアントとサーバの２つを起動した時に、クラ<br>\nイアントからサーバへのリクエストを送れるようにするためのプロキシ設定ファイルを作成します。<br>\n<code>/api</code>始まるリクエストをサーバへのリクエストとみなしてプロキシ設定を行います。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">proxy.conf.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"/api\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"target\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"http://localhost:3000\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"secure\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<h4>\n<span id=\"mongodbをローカルで立ち上げる\" class=\"fragment\"></span><a href=\"#mongodb%E3%82%92%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7%E7%AB%8B%E3%81%A1%E4%B8%8A%E3%81%92%E3%82%8B\"><i class=\"fa fa-link\"></i></a>MongoDBをローカルで立ち上げる</h4>\n\n<p>具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。</p>\n\n<h3>\n<span id=\"5-試してみる\" class=\"fragment\"></span><a href=\"#5-%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>5. 試してみる</h3>\n\n<h4>\n<span id=\"アプリを起動してみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリを起動してみる</h4>\n\n<ul>\n<li>\n<p>プロジェクト直下で下記コマンドを実行するとアプリが起動します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm start \n</pre></div></div>\n</li>\n<li><p>起動したら<code>http://localhost:4200</code>にアクセスしてみます。すると下記のようにメッセージ一覧画面が表示され、メッセージを登録すると適宜一覧に追加されていきます。</p></li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" alt=\"アプリ概要.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png\"></a></p>\n\n<ul>\n<li>試しにクライアント資産かサーバ資産を修正してみると、コンンパイルされてアプリに変更がリアルタイムに反映されることがわかります。</li>\n</ul>\n\n<h4>\n<span id=\"アプリをビルドしてみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリをビルドしてみる</h4>\n\n<ul>\n<li>\n<p>プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力されます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run build\n</pre></div></div>\n</li>\n</ul>\n\n<h4>\n<span id=\"アプリをビルドして起動してみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリをビルドして起動してみる</h4>\n\n<ul>\n<li>プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力された後に起動されます。\nビルドしたアプリは<code>http://localhost:3000</code>でアクセスできます。\n<code>\n$ npm run buildRun\n</code>\n</li>\n</ul>\n\n<h2>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h2>\n\n<p>今回はAngular CLIベースのプロジェクトをベースにしてMEANスタックの最小構成プロジェクトを構築する方法を紹介しました。プロジェクトを起動、ビルドすることはできるようになったので、次回「<a href=\"http://qiita.com/Takumon/items/b4211fcabad740baa551\">その２. テスト編</a>」ではテストコードの作成とテスト実施環境の構築について紹介しようと思います。</p>\n","body":"## やりたいこと\n* Angular CLI使って、MEANスタック(**M**ongoDB + **E**xpress + **A**ngular + **N**odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。\n* フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。\n* Dockerを使ってアプリを簡単に配布したい。\n\nこれらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。\n\n* その１. ビルド編　⇦　今回はココ\n* [その２. テスト編](http://qiita.com/Takumon/items/b4211fcabad740baa551)\n* その３. Dockerビルド編\n\n\n\n## その１. ビルド編\nAngular CLIで作成したプロジェクトをベースに、\nMongoDBに登録したメッセージを画面に一覧で表示するアプリを作成していきます。\nメッセージを登録すると一覧に追加されていくようなアプリです。\n\n![アプリ概要.png](https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png)\n\n\n\n\n### プロジェクト構成\n今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。\n[リポジトリ](https://github.com/Takumon/angular4-express4-typescritp2/tree/build)も用意しているので詳細はそちらを参照してください。\n\n```:プロジェクトの構成（完成イメージ）\n.\n├── dist                ・・・(1) コンパイル資産出力先\n│   └── server　　　　　　　　      ・・・\u001c(1-1)　コンパイルされたサーバ資産\n│       ├── app.js\n│       ├── app.js.map\n│       ├── bin\n│       │   ├── www.js\n│       │   └── www.js.map\n│       ├── config.js\n│       ├── config.js.map\n│       ├── models\n│       │   ├── message.js\n│       │   └── message.js.map\n│       ├── public      ・・・(1-2) コンパイルされたクライアント資産\n│       │   ├── favicon.ico\n│       │   ├── index.html\n│       │   ├── inline.bundle.js\n│       │   ├── inline.bundle.js.map\n│       │   ├── main.bundle.js\n│       │   ├── main.bundle.js.map\n│       │   ├── polyfills.bundle.js\n│       │   ├── polyfills.bundle.js.map\n│       │   ├── styles.bundle.js\n│       │   ├── styles.bundle.js.map\n│       │   ├── vendor.bundle.js\n│       │   └── vendor.bundle.js.map\n│       └── routes\n│           ├── message.js\n│           └── message.js.map\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── e2e\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── server               ・・・(2)　サーバ資産\n│   ├── app.ts\n│   ├── bin\n│   │   └── www.ts\n│   ├── config.ts\n│   ├── models\n│   │   └── message.ts\n│   ├── routes\n│   │   └── message.ts\n│   └── tsconfig.server.json\n├── src                   ・・・(3)　クライアント資産\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       └── message.service.ts\n│   ├── assets\n│   ├── environments\n│   │   ├── environment.prod.ts\n│   │   └── environment.ts\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── main.ts\n│   ├── polyfills.ts\n│   ├── styles.css\n│   ├── test.ts\n│   ├── tsconfig.app.json\n│   ├── tsconfig.spec.json\n│   └── typings.d.ts\n├── karma.conf.js\n├── package-lock.json\n├── package.json\n├── protractor.conf.js\n├── proxy.conf.json    ・・・(4) \n├── tsconfig.json\n├── tslint.json\n└── README.md\n```\n#### 各資産について\n##### (1) dist\nコンパイルした資産の出力先フォルダ\n\n##### (1-1) dist/server\nここにサーバ側のコンパイルされたjsファイルが出力されます。\nserverフォルダを設けているのは本資産とテスト資産を分離したかったからです。\nその２. テスト編で説明しますが、サーバ側テスト用jsファイルはdist配下のserver_testフォルダに出力されるようにしています。\n\n##### (1-2) dist/server/public\nコンパイルされたクライアント資産。\nサーバ側アプリの資産の一部としてコンパイルされるようにしています。\nExpressのアプリでは静的資産をpublicフォルダに置くのが一般的なのでこうしました。\n\n##### (2) server\nサーバ資産を格納するためのディレクトリ。\nいろいろ悩みましたが、TypeScript資産をコンパイルすることとテストすることを考慮してこのような構成にしました。\n\n##### (3) src\nフロントの実行資産とテスト資産を格納するためのディレクリ。\nAngular CLIでプロジェクトを作成するとデフォルトで作成されます。\nビルドやアプリ起動は`ng`コマンドで実施します。\n\n##### (4) proxy.conf.json\n`npm start`でフロント側とサーバ側を同時に起動した時に、クライアント側からサーバ側へのリクエストを送れるようにするためのプロキシ設定です。\n\n\n\n\n## 構築手順\n\n### 1. プロジェクト作成\n* Angular CLIをインストール\n\n\t```\n\t$ npm install -g @angular/cli\n\t```\n\n* プロジェクトを生成、Angular CLIであらかじめ定義している依存ライブラリをインストール\n\n\t```\n\t$ ng new sample\n\t$ cd sample\n\t$ npm install\n\t```\n\n* Angular CLIであらかじめ定義している依存ライブラリの他に必要なものををインストール\n<dd>\n    <dt>[`express`](https://www.npmjs.com/package/express)\n        <dd>Webアプリケーションフレームワーク\n    <dt>[`body-parser`](https://www.npmjs.com/package/body-parser)\n        <dd>リクエストボディのパーサー\n    <dt>[`mongoose`](https://www.npmjs.com/package/mongoose)\n        <dd>MongoDBへのアクセスを簡単にしてくれるAPI\n    <dt>[`nodemon`](https://www.npmjs.com/package/nodemon)\n        <dd>node実行時にソースの変更を自動反映してくれるツール\n    <dt>[`npm-run-all`](https://www.npmjs.com/package/npm-run-all)\n        <dd>npm-scripts の連結実行を管理するためのパッケージ\n</dd>\n\n\t```\n\t$ npm install --save express body-parser mongoose\n\t$ npm install --save-dev @types/mongoose nodemon npm-run-all\n\t```\n\n\n\n### 2. サーバ側を作成\nAngular CLIで作ったプロジェクトの直下に`server`フォルダを作って、その中にサーバ側の処理を書いていきます。\n#### server/models/message.ts\nMongoDBにアクセスするためのモデルを定義します。\nDBアクセスにはmangoosを使います。\n\n```js:message.ts\nimport * as mongoose from 'mongoose';\n\nconst Message = mongoose.model('messages', new mongoose.Schema({\n  message: {type: String}\n}));\n\nexport { Message };\n```\n\n\n\n#### server/routes/message.ts\nエンドポイントごとの処理を記述するルータを定義します。\nメッセージの取得と登録には`server/models/message.ts`を使います。\n\n```js:message.ts\nimport * as http from 'http';\nimport { Router, Response } from 'express';\nimport { Message } from '../models/message';\n\nconst messageRouter: Router = Router();\n\n// 全てのメッセージを取得する\nmessageRouter.get('/', (req, res, next) => {\n  Message.find(function(err, doc) {\n    if (err) {\n      return res.status(500).json({\n          title: 'エラーが発生しました。',\n          error: err.message\n      });\n    }\n\n    return res.status(200).json({messages: doc});\n  });\n});\n\n// メッセージを登録する\nmessageRouter.post('/', (req, res, next) => {\n  const message = new Message({\n    message: req.body.message\n  });\n\n  message.save((err, result) => {\n    if (err) {\n      return res.status(500).json({\n          title: 'エラーが発生しました。',\n          error: err.message\n      });\n    }\n\n    return res.status(200).json({\n      message: 'メッセージを登録しました。',\n      obj: result\n    });\n  });\n});\n\nexport { messageRouter };\n```\n\n\n#### server/app.ts\nExpressで使用するルータと依存モジュールを定義するためのファイルを作成します。\nメッセージAPIのエンドポイントは`/api/messages`に設定し、\nmongooseを使ってMongoDBへの接続設定をしています。\nクライアント資産はビルドするとpublicフォルダ配下に出力されるようにしているので、\n静的資産へのルーティングはpublicフォルダを指定しています。\n\n```js:app.ts\nimport * as express from 'express';\nimport * as path from 'path';\nimport * as bodyParser from 'body-parser';\nimport * as mongoose from 'mongoose';\n\nimport { messageRouter } from './routes/message';\nimport { MONGO_URL } from './config';\n\nclass App {\n  public express: express.Application;\n\n  constructor() {\n    this.express = express();\n    this.middleware();\n    this.routes();\n  }\n\n  private middleware(): void {\n    this.express.use(bodyParser.json());\n    this.express.use(bodyParser.urlencoded({ extended: false }));\n    // 接続する MongoDB の設定\n    mongoose.Promise = global.Promise;\n    mongoose.connect(process.env.MONGO_URL || MONGO_URL, {\n      useMongoClient: true,\n    });\n    process.on('SIGINT', function() { mongoose.disconnect(); });\n  }\n\n  private routes(): void {\n    // 静的資産へのルーティング\n    this.express.use(express.static(path.join(__dirname, 'public')));\n\n    this.express.use('/api/messages', messageRouter);\n\n    // その他のリクエストはindexファイルにルーティング\n    this.express.get('*', (req, res) => {\n      res.sendFile(path.join(__dirname, 'public/index.html'));\n    });\n  }\n}\n\nexport default new App().express;\n```\n\n\n#### server/bin/www\\.ts\nNode.js でサーバを起動するための設定ファイルを作成します。\n\n```js:www.ts\nimport * as http from 'http';\nimport { SERVER_PORT } from '../config';\nimport app from '../app';\n\n\n\n// ポートの設定.\nconst port = normalizePort(process.env.PORT || SERVER_PORT);\napp.set('port', port);\n\n\n// HTTPサーバ生成.\nconst server = http.createServer(app);\nserver.listen(port, () => console.log(`API running on localhost:${port}`));\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n// ポートを正規化.\nfunction normalizePort(val): number|string|boolean  {\n\n  const normalizedPort: number = (typeof val === 'string')\n    ? parseInt(val, 10)\n    : val;\n\n  if (isNaN(normalizedPort)) {\n    return val;\n  }\n\n  if (normalizedPort >= 0) {\n    return normalizedPort;\n  }\n\n  return false;\n}\n\n// エラーハンドラー.\nfunction onError(error): void {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  const bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n// サーバ起動時のリスナー.\nfunction onListening(): void {\n  const addr = server.address();\n  const bind = (typeof addr === 'string')\n    ? `pipe ${addr}`\n    : `port ${addr.port}`;\n}\n```\n\n#### server/config.ts\nサーバ側の設定ファイルを作成します。\nポートとMongoDBのURLを定義しています。\n今回MongoDBはローカルにポート27017で立てる想定です。\n\n```js:config.ts\nexport const SERVER_PORT = 3000;\nexport const MONGO_URL = 'mongodb://localhost:27017/test';\n```\n\n\n\n### 3. クライアント側を作成\nAngular CLIでプロジェクトを作成すると最低限のクライアント資産が生成されるので、\nここでは修正が必要なファイル、新規作成するファイルのみ紹介します。\n\n\n#### src/app/message/message.service.ts\nサーバ側からメッセージを取得するためのサービスを新規作成します。\n\n```js:message.service.ts\nimport { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/Rx';\n\n@Injectable()\nexport class MessageService {\n\n  constructor(private http: Http) {}\n\n  getAll(): Observable<any> {\n    return this.http\n        .get('/api/messages')\n        .map((response: Response) => {\n            const result = response.json();\n            return result;\n        })\n        .catch((error: Response) => Observable.throw(error.json()));\n  }\n\n  regist(message: string): Observable<any> {\n    return this.http\n      .post('/api/messages', {message: message})\n      .map((response: Response) => {\n            const result = response.json();\n            return result;\n      })\n      .catch((error: Response) => Observable.throw(error.json()));\n  }\n}\n```\n\n\n\n\n\n#### src/app/app.component.ts\n既存のファイルを修正して、messagesを保持するようにします。\nMessageServiceを使ってメッセージを取得します。\n\n```js:app.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { MessageService } from './message/message.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  providers: [ MessageService ]\n})\nexport class AppComponent {\n  messages: Array<any>;\n  message: string;\n\n  constructor(private messageService: MessageService) {\n    this.getMessages();\n  }\n\n  getMessages(): void {\n    this.messageService\n      .getAll()\n      .subscribe((res: any) => {\n        this.messages = res.messages;\n      });\n  }\n\n  registerMessage(): void {\n    if (!this.message) {\n      return;\n    }\n\n    this.messageService\n      .register(this.message)\n      .subscribe((res: any) => {\n        this.message = '';\n        this.getMessages();\n      });\n  }\n}\n```\n\n\n#### src/app/app.component.html\n既存のファイルの修正して、メッセージ一覧と登録のUIに書き換えます。\n\n```html:app.component.html\n<div>\n  <div>\n    <h1>メッセージ一覧</h1>\n    <button id=\"getMessagesButton\" (click)=\"getMessages()\">メッセージ一覧を最新化</button>\n    <ul id=\"messageList\">\n      <li *ngFor=\"let item of messages\">\n        {{item.message}}\n      </li>\n    </ul>\n  </div>\n  <div>\n    <h1>メッセージ登録</h1>\n    <input type=\"text\" id=\"registerMessage\" [(ngModel)]=\"message\" placeholder=\"登録するメッセージを入力してください。\">\n    <button type=\"submit\" id=\"registerMessageButton\" (click)='registerMessage()'>登録</button>\n  </div>\n</div>\n```\n#### src/app/app.module.ts\nHttpModule、FormsModule、MessageServiceを追加します。\n\n\n```js:app.module.ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpModule } from '@angular/http';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { MessageService } from './message/message.service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpModule,\n    FormsModule\n  ],\n  providers: [MessageService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n```\n\n\n### 4. ビルドまわり環境を整備\n\n#### pakcage.json\nスクリプトを下記のように修正します。\n(npm scriptsは便利ですが、コメントが記述できないのが残念だなーと思いました。)\n\n```json:package.json\n\n  \"scripts\": {\n    ...\n    \"start\": \"npm-run-all -s build:server -p start:*\",\n    \"start:client\": \"ng serve --aot=true --progress=false --proxy-config proxy.conf.json\",\n    \"start:server\": \"run-p watch:server boot:server\",\n    \"watch:server\": \"tsc -w -p ./server/tsconfig.server.json\",\n    \"boot:server\": \"nodemon ./dist/server/bin/www.js\",\n    \"build\": \"run-s build:server build:client\",\n    \"build:client\": \"ng build --output-path=./dist/server/public\",\n    \"build:server\": \"tsc -p ./server/tsconfig.server.json\",\n    \"buildRun\": \"run-s build boot:server\",\n    ...\n  },\n```\n\n* **start**でクライアント資産とサーバ資産の両方を起動します。\n* **start:client**でクライアント資産をコンパイルして起動します。Angular CLIのngコマンドにお任せしています。なおstartではクライアント資産とサーバ資産で二つのサーバを起動するので、クライアントからサーバへ（リクエストを送れるようにプロキシ設定を行っています。プロキシ設定ファイルについては下で触れます。\n* **start:server**でサーバ資産をコンパイルしてExpressを起動します。\n* **watch:server**でサーバ側のTypeScriptをウォッチして変更があればコンパイルするようにします。\n* **boot:server**でコンパイルしたサーバ側資産を起動します。nodeではなくnodemonを使うことでコンパイルしたサーバ資産に更新があった場合でも即座に更新を反映するようにしています。\n* **build**クライアント資産とサーバ資産の両方をコンパイルします。\n* **build:server**でサーバ資産をコンパイルしています。コンパイル時の設定は下で触れる`/server/tsconfig.server.json`を使います。\n* **build:client**でクライアント資産をコンパイルしています。出力先はサーバ側資産の静的ファイル格納フォルダ（`dist/server/public`）を指定しています。\n* **buildRun**でクライアント資産とサーバ資産の両方をコンパイルしサーバ資産を起動します。とりあえずデプロイするアプリを起動したい時の便利コマンドです。\n\n\n\n#### server/tsconfig.server.json\nサーバ資産コンパイルときの設定ファイルを作成します。\n`outDir`で出力先をdist/serverに指定しています。\n\n```json:tsconfig.server.json\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"preserveConstEnums\": true,\n    \"outDir\": \"../dist/server\",\n    \"mapRoot\": \"../dist/server\",\n    \"module\": \"commonjs\"\n  }\n}\n```\n\n#### proxy.conf.json\n`start`でクライアントとサーバの２つを起動した時に、クラ\nイアントからサーバへのリクエストを送れるようにするためのプロキシ設定ファイルを作成します。\n`/api`始まるリクエストをサーバへのリクエストとみなしてプロキシ設定を行います。\n\n```json:proxy.conf.json\n{\n  \"/api\": {\n    \"target\": \"http://localhost:3000\",\n    \"secure\": false\n  }\n}\n```\n\n#### MongoDBをローカルで立ち上げる\n具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。\n\n\n\n### 5. 試してみる\n#### アプリを起動してみる\n* プロジェクト直下で下記コマンドを実行するとアプリが起動します。\n\n\t```\n\t$ npm start \n\t```\n\n* 起動したら`http://localhost:4200`にアクセスしてみます。すると下記のようにメッセージ一覧画面が表示され、メッセージを登録すると適宜一覧に追加されていきます。\n\n![アプリ概要.png](https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png)\n\n* 試しにクライアント資産かサーバ資産を修正してみると、コンンパイルされてアプリに変更がリアルタイムに反映されることがわかります。\n\n#### アプリをビルドしてみる\n* プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力されます。\n\n\t```\n\t$ npm run build\n\t```\n\n#### アプリをビルドして起動してみる\n* プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力された後に起動されます。\nビルドしたアプリは`http://localhost:3000`でアクセスできます。\n\t```\n\t$ npm run buildRun\n\t```\n\n## 終わりに\n今回はAngular CLIベースのプロジェクトをベースにしてMEANスタックの最小構成プロジェクトを構築する方法を紹介しました。プロジェクトを起動、ビルドすることはできるようになったので、次回「[その２. テスト編](http://qiita.com/Takumon/items/b4211fcabad740baa551)」ではテストコードの作成とテスト実施環境の構築について紹介しようと思います。\n\n\n","comments_count":0,"created_at":"2017-07-19T02:06:59+09:00","likes_count":27,"reactions_count":0},"matches":5,"weight":300,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"TypeScript"},{"weight":50,"keyword":"AngularJS"},{"weight":50,"keyword":"Qiita"}],"avgWeight":60,"totalWeight":56,"threshold":10,"isRelated":true},{"node":{"fields":{"slug":"/b4c7d1b9-428f-569a-af40-527d89794a77/","title":"TypeScriptで簡単にChrome Extensionを作る方法","date":"2017-12-20T02:36:27+09:00","excerpt":"Githubで草を生やす活動は楽しいですね!増えてきて芝みたいになると達成感があって、モチベーションも上がります。ところで、この前の10/30に草がハロウィン仕様になっていたのを見て、草を自分の好みの色を変更できればもっと楽しくなるのでは?...","tags":["JavaScript","GitHub","TypeScript","chrome-extension","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"b4c7d1b9-428f-569a-af40-527d89794a77","title":"TypeScriptで簡単にChrome Extensionを作る方法","rendered_body":"<p>Githubで草を生やす活動は楽しいですね!<br>\n増えてきて芝みたいになると達成感があって、モチベーションも上がります。<br>\nところで、この前の10/30に草がハロウィン仕様になっていたのを見て、<br>\n草を自分の好みの色を変更できればもっと楽しくなるのでは?と思い<br>\n<a href=\"https://chrome.google.com/webstore/detail/github-contributions-pain/bdibnecenojddgmjplnfehpjdmkiddok?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">草の色が変更できる（ついでにお絵描きもできる）Chrome Extension</a>を作りました。<br>\n<strong>その時に<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使って、TypeScriptで簡単にChrome Extensionが作れたので、アプリ作成から公開までの手順をまとめます。</strong></p>\n\n<h2>\n<span id=\"1-プロジェクトの雛形を生成する\" class=\"fragment\"></span><a href=\"#1-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E9%9B%9B%E5%BD%A2%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>1. プロジェクトの雛形を生成する</h2>\n\n<p>yomanと<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>で簡単に雛形が作れるのでコレらを使っていきます。</p>\n\n<ul>\n<li>\n<code>yoman</code>と<code>generator-chrome-extension-kickstart-typescript</code>をグローバルインストールします</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install -g yo generator-chrome-extension-kickstart-typescript \n</pre></div></div>\n\n<ul>\n<li>プロジェクトのルートフォルダを作成後、ルートフォルダに移動して<code>yo</code>コマンドで雛形を生成します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ mkdir project\n$ cd project\n$ yo chrome-extension-kickstart-typescript \n</pre></div></div>\n\n<ul>\n<li>いくつか質問されるので適当に答えます\n\n<ul>\n<li>\n<strong>What would you like to call this extension?</strong>\n\n<ul>\n<li>プロジェクト名を入力します。デフォルトはプロジェクトのフォルダ名</li>\n</ul>\n</li>\n<li>\n<strong>And how would you call it if you only had 12 characters (short_name)?</strong>\n\n<ul>\n<li>プロジェクトの略称を12文字以内で入力します</li>\n</ul>\n</li>\n<li>\n<strong>How would you like to describe this extension?</strong>\n\n<ul>\n<li>プロジェクト概要を入力します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to use UI Action?</strong>\n\n<ul>\n<li>作りたいUI Actionに応じて、<code>No</code>,<code>Browser</code>,<code>Page</code>のいずれかを選択します\n\n<ul>\n<li>\n<code>No</code> ・・・ UI Actionを使わない場合</li>\n<li>\n<code>Browser</code> ・・・ ツールバーの右にアイコンが常駐するタイプのChrome拡張を作成する場合</li>\n<li>\n<code>Page</code> ・・・ 特定のWebサイト観覧時のみにアドレスバー右にアイコンが表示されるタイプのChrome拡張を作成する場合</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to override a chrome page?</strong>\n\n<ul>\n<li>Chromeの内部ページを書き換えるかどうかで、<code>No</code>,<code>Bookmarks Page</code>,<code>History Page</code>,<code>Newtab Page</code>のいずれかを選択します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like more UI Features?</strong>\n\n<ul>\n<li>作りたいUIを複数選択します\n\n<ul>\n<li>\n<code>Options Page</code> ・・・ オプション画面を作りたい場合</li>\n<li>\n<code>Devtools Page</code> ・・・ 開発者ツールを拡張したい場合</li>\n<li>\n<code>Content Scripts</code> ・・・ Webで表示している画面にJavaScriptを差し込んで何か処理をしたい場合</li>\n<li>\n<code>Omnibox</code> ・・・ アドレスバーを拡張したい時に選択</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to use permissions?</strong>\n\n<ul>\n<li>使用するパーミッションを複数選択します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to install promo images for the Chrome Web Store?</strong>\n\n<ul>\n<li>Chromeストアで使う宣伝用画像を自動で生成するかを選択します</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<p>※自分は下記のように答えました<br>\n<strong>What would you like to call this extension?</strong> =&gt; github-contributions-paint<br>\n<strong>And how would you call it if you only had 12 characters (short_name)?</strong> =&gt;  github-paint<br>\n<strong>How would you like to describe this extension?</strong> =&gt;  You can paint github contributions!<br>\n<strong>Would you like to use UI Action?</strong> =&gt; Browser<br>\n<strong>Would you like to override a chrome page?</strong> =&gt;  No<br>\n<strong>Would you like more UI Features?</strong> =&gt;  Content Scripts<br>\n<strong>Would you like to use permissions?</strong> =&gt;  Tabs<br>\n<strong>Would you like to install promo images for the Chrome Web Store?</strong> =&gt;  Yes</p>\n\n<ul>\n<li>すると雛形が生成されます</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">生成された雛形のフォルダ構成</span></div>\n<div class=\"highlight\"><pre>github-contributions-paint\n├── README.md\n├── app\n│   ├── images       　　　    　・・・Chromeウェブストア公開時に必要なアイコン格納フォルダ\n│   │   ├── icon-128.png\n│   │   ├── icon-16.png\n│   │   ├── icon-19.png\n│   │   └── icon-38.png\n│   ├── manifest.json          ・・・Chrome拡張の設定を定義するファイル\n│   ├── pages                  ・・・HTMLファイル格納フォルダ\n│   │   └── popup.html         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── scripts                ・・・TSファイル格納フォルダ\n│   │   ├── background.ts      ・・・バックグランド処理を記述するファイル\n│   │   └── popup.ts           ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── styles                 ・・・CSSファイル格納フォルダ\n│   │   └── popup.scss         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── _locales\n│   │   └── en\n│   │       └── messages.json ・・・アプリの設定ファイル\n│   └── fonts\n├── promo                     ・・・Chromeウェブストア公開時に必要な宣伝用画像の格納フォルダ\n│   ├── Chrome-Webstore-Icon_128x128.png\n│   ├── Promo-Image-Large_920x680.png\n│   ├── Promo-Image-Marquee_1400x560.png\n│   ├── Promo-Image-Small_440x280.png\n│   ├── Screenshot_1280x800.png\n│   └── Screenshot_640x400.png\n├── dist\n├── gulpfile.babel.js\n├── node_modules\n├── package-lock.json\n├── package.json\n├── tasks\n├── tsconfig.json\n└── tslint.json\n\n</pre></div>\n</div>\n\n<ul>\n<li>最後にTypeScriptをグローバルインストールしていない場合は、グローバルインストールまたはプロジェクトにインストールします</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install typescript --save-dev\n</pre></div></div>\n\n<p>==2018/11/24 追記(ここから)==</p>\n\n<ul>\n<li>このまま次手順にいくと警告がでるのでそれを防ぐためにgulpのバージョンを下げます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install gulp@3.9.0 --save-dev\n</pre></div></div>\n\n<p>※関連する<a href=\"https://github.com/gulpjs/gulp/issues/1631\" rel=\"nofollow noopener\" target=\"_blank\">issue</a>、<a href=\"https://stackoverflow.com/questions/48568942/failed-to-load-external-module-babel-register-while-gulp\" rel=\"nofollow noopener\" target=\"_blank\">stackoverflow</a></p>\n\n<p>==2018/11/24 追記(ここまで)==</p>\n\n<h2>\n<span id=\"2-作ったchrome-extensionを動かしてみる\" class=\"fragment\"></span><a href=\"#2-%E4%BD%9C%E3%81%A3%E3%81%9Fchrome-extension%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>2. 作ったChrome Extensionを動かしてみる</h2>\n\n<p>雛形を作成したら早速動かすことができます</p>\n\n<ul>\n<li>ビルドコマンドを実行します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run dev:chrome\n</pre></div></div>\n\n<ul>\n<li><p>Chromeで<code>chrome://extensions</code>を開いて<code>パッケージ化されていない拡張機能を読み込む</code>ボタンをクリック<br>\n<a href=\"https://camo.qiitausercontent.com/88e144ea0fc880ccec17978afc9ec782fb0d62c1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35613534396134352d386563342d383935352d623733332d3837353534396638616433312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/88e144ea0fc880ccec17978afc9ec782fb0d62c1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35613534396134352d386563342d383935352d623733332d3837353534396638616433312e706e67\" alt=\"手順_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5a549a45-8ec4-8955-b733-875549f8ad31.png\"></a></p></li>\n<li><p>プロジェクトルート/dist配下の<code>chrome</code>フォルダを選択<br>\n<a href=\"https://camo.qiitausercontent.com/53813821851801eddbed514961987f9070733381/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393161313636652d366532652d336633372d373130652d6565373532306339336563322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/53813821851801eddbed514961987f9070733381/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393161313636652d366532652d336633372d373130652d6565373532306339336563322e706e67\" alt=\"操作_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f91a166e-6e2e-3f37-710e-ee7520c93ec2.png\"></a></p></li>\n<li><p>するとプロジェクトが<a>Chrome Extension管理画面</a>に追加されて、ブラウザ右上にアイコンが表示されます<br>\n<a href=\"https://camo.qiitausercontent.com/e2e0fba31b666b0fea44ded1ded106236dd280e8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36316232653131332d653532302d376566382d633437652d3432366265393361613834622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e2e0fba31b666b0fea44ded1ded106236dd280e8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36316232653131332d653532302d376566382d633437652d3432366265393361613834622e706e67\" alt=\"動作確認1_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/61b2e113-e520-7ef8-c47e-426be93aa84b.png\"></a></p></li>\n<li><p>アイコンをクリックして動作検証ができます<br>\n<a href=\"https://camo.qiitausercontent.com/909be0f655c64c11846b9b3ca31630357ddd7121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33666631316537332d383162332d636435612d386537302d3961373534613661393936352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/909be0f655c64c11846b9b3ca31630357ddd7121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33666631316537332d383162332d636435612d386537302d3961373534613661393936352e706e67\" alt=\"動作確認_11.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/3ff11e73-81b3-cd5a-8e70-9a754a6a9965.png\"></a></p></li>\n</ul>\n\n<h2>\n<span id=\"3-開発中にchrome-extensionの動作確認する\" class=\"fragment\"></span><a href=\"#3-%E9%96%8B%E7%99%BA%E4%B8%AD%E3%81%ABchrome-extension%E3%81%AE%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>3. 開発中にChrome Extensionの動作確認する</h2>\n\n<p>雛形の動作検証ができたらTypeScriptファイルを編集して処理を追加していきます。<br>\n<code>npm run dev:chrome</code>を実行した後、下記手順繰り返すことで、ソースコードを修正しながら随時動作検証ができます。</p>\n\n<ul>\n<li>資産（TypeScriptやHTML,CSS）を修正する（勝手にビルドが走ります）</li>\n<li>最新のビルド資産を取り込むため<a>Chrome Extension管理画面</a>でリロードをクリックします\n<a href=\"https://camo.qiitausercontent.com/090a13aa3e617e29329421ec4c5fba4a56e1fb9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35663936353163362d373337662d643664622d383062662d3434613731363662323030352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/090a13aa3e617e29329421ec4c5fba4a56e1fb9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35663936353163362d373337662d643664622d383062662d3434613731363662323030352e706e67\" alt=\"開発手順_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5f9651c6-737f-d6db-80bf-44a7166b2005.png\"></a>\n</li>\n<li>Chrome Extensionの動作確認をする</li>\n</ul>\n\n<h2>\n<span id=\"4-アイコンと宣伝用画像を作る\" class=\"fragment\"></span><a href=\"#4-%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%81%A8%E5%AE%A3%E4%BC%9D%E7%94%A8%E7%94%BB%E5%83%8F%E3%82%92%E4%BD%9C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>4. アイコンと宣伝用画像を作る</h2>\n\n<p>アプリを公開する前に、アイコンと宣伝用画像を作成し、雛形生成時のデフォルト資産と差し替えます。<br>\nデザイナーさんなら苦労しないでしょうが、自分はこれが一番大変でした。<br>\n3つのアイコンと3つの宣伝用画像が必要です。</p>\n\n<h3>\n<span id=\"アイコン\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3\"><i class=\"fa fa-link\"></i></a>アイコン</h3>\n\n<ul>\n<li>128x128\n\n<ul>\n<li>必須。インストール時やChromeウェブストアで表示する用</li>\n</ul>\n</li>\n<li>48x48\n\n<ul>\n<li>拡張機能の管理ページで表示する用</li>\n</ul>\n</li>\n<li>16x16\n\n<ul>\n<li>ブラウザ右上に表示する用</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"宣伝用画像\" class=\"fragment\"></span><a href=\"#%E5%AE%A3%E4%BC%9D%E7%94%A8%E7%94%BB%E5%83%8F\"><i class=\"fa fa-link\"></i></a>宣伝用画像</h3>\n\n<ul>\n<li>440x280\n\n<ul>\n<li>必須</li>\n</ul>\n</li>\n<li>920x680\n\n<ul>\n<li>大きめの画像</li>\n</ul>\n</li>\n<li>1400x560\n\n<ul>\n<li>ChromeExtensionをChrome Storeで選択した時に表示される画像</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"5-chromeウェブストアに公開する\" class=\"fragment\"></span><a href=\"#5-chrome%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B9%E3%83%88%E3%82%A2%E3%81%AB%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>5. Chromeウェブストアに公開する</h2>\n\n<ul>\n<li>雛形生成時バージョンが0.0.0になっており、バージョンが低すぎて公開できない状態なので、<code>manifest.json</code>と<code>package.json</code>のバージョン指定を0.0.1にあげます</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">manifest.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n  </span><span class=\"s2\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0.0.1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">&lt;-</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">0</span><span class=\"err\">から</span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">1</span><span class=\"err\">にあげる</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n  </span><span class=\"s2\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0.0.1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">&lt;-</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">0</span><span class=\"err\">から</span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">1</span><span class=\"err\">にあげる</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>下記コマンドで公開用のzipファイルを作成します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run build:chrome\n</pre></div></div>\n\n<ul>\n<li><p><a href=\"https://chrome.google.com/webstore/category/extensions\" rel=\"nofollow noopener\" target=\"_blank\">Chromeウェブストア</a>のデベロッパーダッシュボードを開きます。Chromeアカウントでログインします<br>\n<a href=\"https://camo.qiitausercontent.com/d0db218423075317e350940d46d6510353fc81bd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65646234386163392d303138312d316437382d633761642d6130383237313261663031632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d0db218423075317e350940d46d6510353fc81bd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65646234386163392d303138312d316437382d633761642d6130383237313261663031632e706e67\" alt=\"アプリ登録_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/edb48ac9-0181-1d78-c7ad-a082712af01c.png\"></a></p></li>\n<li><p>ダッシュボードで<code>新しいアイテムを追加する</code>を選択します<br>\n<a href=\"https://camo.qiitausercontent.com/70b8f467a4819f7fd2251cf96abf3749b7626eeb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37383761336132352d326539332d363138362d313765642d3662313962626233626162352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/70b8f467a4819f7fd2251cf96abf3749b7626eeb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37383761336132352d326539332d363138362d313765642d3662313962626233626162352e706e67\" alt=\"アプリ登録_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/787a3a25-2e93-6186-17ed-6b19bbb3bab5.png\"></a></p></li>\n<li><p><code>ファイルを追加</code>で作成したzipファイル(プロジェクトルート/packages配下にあります)を選択後、<code>アップロード</code>を選択します<br>\n<a href=\"https://camo.qiitausercontent.com/2bc72004e70eb79c898506904f452d396754f39f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32323362343632342d643839322d336562382d356561382d3733633461616632623562382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2bc72004e70eb79c898506904f452d396754f39f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32323362343632342d643839322d336562382d356561382d3733633461616632623562382e706e67\" alt=\"アプリ登録_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/223b4624-d892-3eb8-5ea8-73c4aaf2b5b8.png\"></a></p></li>\n<li><p>説明、アイコン、宣伝用画像、カテゴリを入力して<code>変更を公開</code>をクリックします<br>\n<a href=\"https://camo.qiitausercontent.com/efa7c9ab0ced7326af8c7cb2d03fe9c2282e7f11/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323466303335352d666537622d373931382d326437352d3039633333636365356530302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/efa7c9ab0ced7326af8c7cb2d03fe9c2282e7f11/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323466303335352d666537622d373931382d326437352d3039633333636365356530302e706e67\" alt=\"登録_5.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/724f0355-fe7b-7918-2d75-09c33cce5e00.png\"></a></p></li>\n<li><p>これで公開作業は完了です。しばらくするとChromeウェブストアに公開されます</p></li>\n</ul>\n\n<h2>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h2>\n\n<p>今回は<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使って、TypeScriptでChrome Extensionを作成、公開する手順をまとめました。<br>\n最初はTypeScriptでChrome Extensionを作るのは、ビルドの設定など色々めんどくさそうだぁと思っていましたが、<br>\n<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使うことで、簡単に作成から公開まで実現できました。<br>\nブラウザでのちょっとした作業を効率化するのにChrome Extentionは非常に強力なツールなので、今後なにかアイディアがあればまた作ってみたいと思います。</p>\n","body":"Githubで草を生やす活動は楽しいですね!\n増えてきて芝みたいになると達成感があって、モチベーションも上がります。\nところで、この前の10/30に草がハロウィン仕様になっていたのを見て、\n草を自分の好みの色を変更できればもっと楽しくなるのでは?と思い\n[草の色が変更できる（ついでにお絵描きもできる）Chrome Extension](https://chrome.google.com/webstore/detail/github-contributions-pain/bdibnecenojddgmjplnfehpjdmkiddok?hl=ja)を作りました。\n**その時に[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使って、TypeScriptで簡単にChrome Extensionが作れたので、アプリ作成から公開までの手順をまとめます。**\n\n## 1. プロジェクトの雛形を生成する\nyomanと[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)で簡単に雛形が作れるのでコレらを使っていきます。\n\n* `yoman`と`generator-chrome-extension-kickstart-typescript`をグローバルインストールします\n\n```\n$ npm install -g yo generator-chrome-extension-kickstart-typescript \n```\n* プロジェクトのルートフォルダを作成後、ルートフォルダに移動して`yo`コマンドで雛形を生成します\n\n```\n$ mkdir project\n$ cd project\n$ yo chrome-extension-kickstart-typescript \n```\n\n* いくつか質問されるので適当に答えます\n    * **What would you like to call this extension?**\n        * プロジェクト名を入力します。デフォルトはプロジェクトのフォルダ名\n    * **And how would you call it if you only had 12 characters (short_name)?**\n        * プロジェクトの略称を12文字以内で入力します\n    * **How would you like to describe this extension?**\n        * プロジェクト概要を入力します\n    * **Would you like to use UI Action?**\n        * 作りたいUI Actionに応じて、`No`,`Browser`,`Page`のいずれかを選択します\n            * `No` ・・・ UI Actionを使わない場合\n            * `Browser` ・・・ ツールバーの右にアイコンが常駐するタイプのChrome拡張を作成する場合\n            * `Page` ・・・ 特定のWebサイト観覧時のみにアドレスバー右にアイコンが表示されるタイプのChrome拡張を作成する場合\n    * **Would you like to override a chrome page?**\n        * Chromeの内部ページを書き換えるかどうかで、`No`,`Bookmarks Page`,`History Page`,`Newtab Page`のいずれかを選択します\n    * **Would you like more UI Features?**\n        * 作りたいUIを複数選択します\n            * `Options Page` ・・・ オプション画面を作りたい場合\n            * `Devtools Page` ・・・ 開発者ツールを拡張したい場合\n            * `Content Scripts` ・・・ Webで表示している画面にJavaScriptを差し込んで何か処理をしたい場合\n            * `Omnibox` ・・・ アドレスバーを拡張したい時に選択\n    * **Would you like to use permissions?**\n        * 使用するパーミッションを複数選択します\n    * **Would you like to install promo images for the Chrome Web Store?**\n        * Chromeストアで使う宣伝用画像を自動で生成するかを選択します\n\n\n※自分は下記のように答えました\n**What would you like to call this extension?** => github-contributions-paint\n**And how would you call it if you only had 12 characters (short_name)?** =>  github-paint\n**How would you like to describe this extension?** =>  You can paint github contributions!\n**Would you like to use UI Action?** => Browser\n**Would you like to override a chrome page?** =>  No\n**Would you like more UI Features?** =>  Content Scripts\n**Would you like to use permissions?** =>  Tabs\n**Would you like to install promo images for the Chrome Web Store?** =>  Yes\n\n* すると雛形が生成されます\n\n```:生成された雛形のフォルダ構成\ngithub-contributions-paint\n├── README.md\n├── app\n│   ├── images       　　　    　・・・Chromeウェブストア公開時に必要なアイコン格納フォルダ\n│   │   ├── icon-128.png\n│   │   ├── icon-16.png\n│   │   ├── icon-19.png\n│   │   └── icon-38.png\n│   ├── manifest.json          ・・・Chrome拡張の設定を定義するファイル\n│   ├── pages                  ・・・HTMLファイル格納フォルダ\n│   │   └── popup.html         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── scripts                ・・・TSファイル格納フォルダ\n│   │   ├── background.ts      ・・・バックグランド処理を記述するファイル\n│   │   └── popup.ts           ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── styles                 ・・・CSSファイル格納フォルダ\n│   │   └── popup.scss         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── _locales\n│   │   └── en\n│   │       └── messages.json ・・・アプリの設定ファイル\n│   └── fonts\n├── promo                     ・・・Chromeウェブストア公開時に必要な宣伝用画像の格納フォルダ\n│   ├── Chrome-Webstore-Icon_128x128.png\n│   ├── Promo-Image-Large_920x680.png\n│   ├── Promo-Image-Marquee_1400x560.png\n│   ├── Promo-Image-Small_440x280.png\n│   ├── Screenshot_1280x800.png\n│   └── Screenshot_640x400.png\n├── dist\n├── gulpfile.babel.js\n├── node_modules\n├── package-lock.json\n├── package.json\n├── tasks\n├── tsconfig.json\n└── tslint.json\n\n```\n\n* 最後にTypeScriptをグローバルインストールしていない場合は、グローバルインストールまたはプロジェクトにインストールします\n\n```\n$ npm install typescript --save-dev\n```\n\n==2018/11/24 追記(ここから)==\n\n* このまま次手順にいくと警告がでるのでそれを防ぐためにgulpのバージョンを下げます。\n\n```\n$ npm install gulp@3.9.0 --save-dev\n```\n\n<small>※関連する[issue](https://github.com/gulpjs/gulp/issues/1631)、[stackoverflow](https://stackoverflow.com/questions/48568942/failed-to-load-external-module-babel-register-while-gulp)</small>\n\n==2018/11/24 追記(ここまで)==\n## 2. 作ったChrome Extensionを動かしてみる\n雛形を作成したら早速動かすことができます\n\n* ビルドコマンドを実行します\n\n```\n$ npm run dev:chrome\n```\n\n* Chromeで`chrome://extensions`を開いて`パッケージ化されていない拡張機能を読み込む`ボタンをクリック\n![手順_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5a549a45-8ec4-8955-b733-875549f8ad31.png)\n\n* プロジェクトルート/dist配下の`chrome`フォルダを選択\n![操作_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f91a166e-6e2e-3f37-710e-ee7520c93ec2.png)\n\n* するとプロジェクトが[Chrome Extension管理画面](chrome://extensions/)に追加されて、ブラウザ右上にアイコンが表示されます\n![動作確認1_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/61b2e113-e520-7ef8-c47e-426be93aa84b.png)\n\n\n* アイコンをクリックして動作検証ができます\n![動作確認_11.png](https://qiita-image-store.s3.amazonaws.com/0/49915/3ff11e73-81b3-cd5a-8e70-9a754a6a9965.png)\n\n\n## 3. 開発中にChrome Extensionの動作確認する\n雛形の動作検証ができたらTypeScriptファイルを編集して処理を追加していきます。\n`npm run dev:chrome`を実行した後、下記手順繰り返すことで、ソースコードを修正しながら随時動作検証ができます。\n\n* 資産（TypeScriptやHTML,CSS）を修正する（勝手にビルドが走ります）\n* 最新のビルド資産を取り込むため[Chrome Extension管理画面](chrome://extensions/)でリロードをクリックします\n![開発手順_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5f9651c6-737f-d6db-80bf-44a7166b2005.png)\n* Chrome Extensionの動作確認をする\n\n## 4. アイコンと宣伝用画像を作る\nアプリを公開する前に、アイコンと宣伝用画像を作成し、雛形生成時のデフォルト資産と差し替えます。\nデザイナーさんなら苦労しないでしょうが、自分はこれが一番大変でした。\n3つのアイコンと3つの宣伝用画像が必要です。\n\n### アイコン\n* 128x128\n    * 必須。インストール時やChromeウェブストアで表示する用\n* 48x48\n    * 拡張機能の管理ページで表示する用\n* 16x16\n    * ブラウザ右上に表示する用\n  \n### 宣伝用画像\n* 440x280\n    * 必須\n* 920x680\n    * 大きめの画像\n* 1400x560\n    * ChromeExtensionをChrome Storeで選択した時に表示される画像\n\n## 5. Chromeウェブストアに公開する\n* 雛形生成時バージョンが0.0.0になっており、バージョンが低すぎて公開できない状態なので、`manifest.json`と`package.json`のバージョン指定を0.0.1にあげます\n\n```json:manifest.json\n{\n  ・・・\n  \"version\": \"0.0.1\", <- 0.0.0から0.0.1にあげる\n  ・・・\n}\n```\n\n```json:package.json\n{\n  ・・・\n  \"version\": \"0.0.1\", <- 0.0.0から0.0.1にあげる\n  ・・・\n}\n```\n\n* 下記コマンドで公開用のzipファイルを作成します\n\n```\n$ npm run build:chrome\n```\n\n* [Chromeウェブストア](https://chrome.google.com/webstore/category/extensions)のデベロッパーダッシュボードを開きます。Chromeアカウントでログインします\n![アプリ登録_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/edb48ac9-0181-1d78-c7ad-a082712af01c.png)\n\n* ダッシュボードで`新しいアイテムを追加する`を選択します\n![アプリ登録_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/787a3a25-2e93-6186-17ed-6b19bbb3bab5.png)\n\n* `ファイルを追加`で作成したzipファイル(プロジェクトルート/packages配下にあります)を選択後、`アップロード`を選択します\n![アプリ登録_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/223b4624-d892-3eb8-5ea8-73c4aaf2b5b8.png)\n\n* 説明、アイコン、宣伝用画像、カテゴリを入力して`変更を公開`をクリックします\n![登録_5.png](https://qiita-image-store.s3.amazonaws.com/0/49915/724f0355-fe7b-7918-2d75-09c33cce5e00.png)\n\n* これで公開作業は完了です。しばらくするとChromeウェブストアに公開されます\n\n\n## 最後に\n今回は[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使って、TypeScriptでChrome Extensionを作成、公開する手順をまとめました。\n最初はTypeScriptでChrome Extensionを作るのは、ビルドの設定など色々めんどくさそうだぁと思っていましたが、\n[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使うことで、簡単に作成から公開まで実現できました。\nブラウザでのちょっとした作業を効率化するのにChrome Extentionは非常に強力なツールなので、今後なにかアイディアがあればまた作ってみたいと思います。\n\n","comments_count":5,"created_at":"2017-12-20T02:36:27+09:00","likes_count":48,"reactions_count":0},"matches":4,"weight":250,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"TypeScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":62.5,"totalWeight":58,"threshold":12.5,"isRelated":true},{"node":{"fields":{"slug":"/7780e313-8bda-5534-99aa-37bf47e9deb3/","title":"GitBucketのissueで作業量を設定できるプラグイン","date":"2017-12-31T23:49:04+09:00","excerpt":"== 2018/4/7 追記 ==========================================本記事ではChrome拡張とDockerによって実現していましたが、その後GitBucket Plugin化しました。gitb...","tags":["JavaScript","chrome-extension","Docker","GitBucket","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"7780e313-8bda-5534-99aa-37bf47e9deb3","title":"GitBucketのissueで作業量を設定できるプラグイン","rendered_body":"<p>== 2018/4/7 追記 ==========================================<br>\n本記事ではChrome拡張とDockerによって実現していましたが、<br>\nその後GitBucket Plugin化しました。</p>\n\n<p><a href=\"https://github.com/Takumon/gitbucket-issue-estimation-plugin\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-plugin</a></p>\n\n<p><a href=\"https://github.com/Takumon/gitbucket-issue-estimation-plugin/releases/tag/0.1\" rel=\"nofollow noopener\" target=\"_blank\">リリースページ</a>からjarファイルをダウンロードして<code>&lt;GITBUCKET_HOME&gt;/plugins/</code>に置くだけで導入可能です。<br>\n== =======================================================</p>\n\n<p>Git Advent Calendarが埋まっていなかったので、大晦日ですが代わりに投稿させていただきました。</p>\n\n<h2>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h2>\n\n<p><a href=\"https://gitbucket.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">GitBucket</a>のマイルストーンの進捗率はissueの件数ベースなので、issueごとに作業量のバラつきがあったりすると現実的な進捗率と乖離してしまいます。</p>\n\n<p>そこで今回はChrome拡張とDockerイメージを作成して、<br>\nissueに作業量を設定できるようにして、マイルストーンで作業量ベースの進捗率を確認できるようにしました。</p>\n\n<p>Chrome拡張とDockerイメージはどちらも公開しているので簡単に導入できます。是非試してみてください。</p>\n\n<ul>\n<li>\n<em>Chrome拡張</em>\n\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-client</a></li>\n</ul>\n</li>\n<li>\n<em>Dockerイメージ</em>\n\n<ul>\n<li><a href=\"https://hub.docker.com/r/takumon/gitbucket-issue-estimation-server/\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-server</a></li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"導入すると\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B%E3%81%A8\"><i class=\"fa fa-link\"></i></a>導入すると</h2>\n\n<p><a href=\"https://gitbucket.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">GitBucket</a>のissueで作業量が設定できるようになり、<br>\n<a href=\"https://camo.qiitausercontent.com/f13706aedeb42c177c1f4f57975596b5ff002407/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36313030366263392d326438322d663062302d363461322d3037393233633737333963372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/f13706aedeb42c177c1f4f57975596b5ff002407/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36313030366263392d326438322d663062302d363461322d3037393233633737333963372e706e67\" alt=\"導入後_イシュー画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/61006bc9-2d82-f0b0-64a2-07923c7739c7.png\"></a></p>\n\n<p>マイルストーンで作業量ベースの進捗率が見れるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/b86e2b23bc0f4b9fae45b07bfd568b11bc005121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36613462383664382d323937332d656338342d383662632d3632383965343262643636362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b86e2b23bc0f4b9fae45b07bfd568b11bc005121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36613462383664382d323937332d656338342d383662632d3632383965343262643636362e706e67\" alt=\"導入後_マイルストーン画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/6a4b86d8-2973-ec84-86bc-6289e42bd666.png\"></a></p>\n\n<p>またissue一覧画面でも作業量を設定できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/7c2ee31427698b7fe01b30f25b8e31b7e3115e2d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39633835386533622d356463312d313432342d663334662d3562323661633665323066642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7c2ee31427698b7fe01b30f25b8e31b7e3115e2d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39633835386533622d356463312d313432342d663334662d3562323661633665323066642e706e67\" alt=\"導入後_イシュー一覧画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/9c858e3b-5dc1-1424-f34f-5b26ac6e20fd.png\"></a></p>\n\n<h2>\n<span id=\"導入手順\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>導入手順</h2>\n\n<h3>\n<span id=\"1-docker側\" class=\"fragment\"></span><a href=\"#1-docker%E5%81%B4\"><i class=\"fa fa-link\"></i></a>1. Docker側</h3>\n\n<p>GitBucketと同じネットワーク環境に作業量保存用のサーバを立てます。Dockerが導入されていることが前提です。</p>\n\n<ul>\n<li>docker-compose.ymlを作成（MongoDBのボリューム用にdocker-compose.ymlファイルと同階層にdbフォルダを作成してください）</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"docker\">\n<div class=\"code-lang\"><span class=\"bold\">docker-compose.yml</span></div>\n<div class=\"highlight\"><pre>version: \"3.3\"\nservices:\n  server:\n    image: takumon/gitbucket-issue-estimation-server\n    ports:\n      - 3000:3000\n    depends_on:\n      - mongo\n    links:\n      - mongo\n    environment:\n      MONGO_URL: mongodb://mongo:27017/test\n  mongo:\n    image: mongo:3.5.12\n    ports:\n      - 27017:27017\n    volumes:\n      - ./db:/data/db\n</pre></div>\n</div>\n\n<ul>\n<li>docker-conpose.ymlがあるフォルダで下記を実行</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span>docker-compose up <span class=\"nt\">-d</span>\n</pre></div></div>\n\n<h3>\n<span id=\"2-gitbucket側\" class=\"fragment\"></span><a href=\"#2-gitbucket%E5%81%B4\"><i class=\"fa fa-link\"></i></a>2. GitBucket側</h3>\n\n<p>Chrome拡張をインストールする前に、GitBucketのトークンを発行してメモしておきます。</p>\n\n<ul>\n<li><p>GitBucketヘッダー右上アイコン &gt; Account Setting を選択<br>\n<a href=\"https://camo.qiitausercontent.com/b06f383ce5768cc2c9b84b7bcd92537cbd0f94ef/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34323637363166372d633139392d653139652d633631392d6131383264643035623065612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b06f383ce5768cc2c9b84b7bcd92537cbd0f94ef/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34323637363166372d633139392d653139652d633631392d6131383264643035623065612e706e67\" alt=\"導入手順_GitBucketトークン発行_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/426761f7-c199-e19e-c619-a182dd05b0ea.png\"></a><br>\n<br></p></li>\n<li><p>左メニュー Applicationsを選択し、Generate new tokenのToken descriptionにトークンの概要を記載、その後<code>Generate token</code>ボタンをクリック<br>\n<a href=\"https://camo.qiitausercontent.com/e21ff3f5214f3833cc66ed4d9cf2037b31c6d02f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64313836663730322d663764622d353231652d366436642d6564636133313836643931352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e21ff3f5214f3833cc66ed4d9cf2037b31c6d02f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64313836663730322d663764622d353231652d366436642d6564636133313836643931352e706e67\" alt=\"導入手順_GitBucketトークン発行_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/d186f702-f7db-521e-6d6d-edca3186d915.png\"></a><br>\n<br></p></li>\n<li><p>発行されたトークンをコピー（後の手順で使います）<br>\n<a href=\"https://camo.qiitausercontent.com/d46de4cb3222a8304001bbc2f89abc1e14b2cba8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30633830346661662d666431332d383064322d386365392d6535303439323262623534612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d46de4cb3222a8304001bbc2f89abc1e14b2cba8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30633830346661662d666431332d383064322d386365392d6535303439323262623534612e706e67\" alt=\"導入手順_GitBucketトークン発行_３.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/0c804faf-fd13-80d2-8ce9-e504922bb54a.png\"></a></p></li>\n</ul>\n\n<h3>\n<span id=\"3-chrome-extension側\" class=\"fragment\"></span><a href=\"#3-chrome-extension%E5%81%B4\"><i class=\"fa fa-link\"></i></a>3. Chrome Extension側</h3>\n\n<ul>\n<li><p>Chromeを開きChromeウェブストアで<a href=\"https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-client</a>をインストール<br>\n<a href=\"https://camo.qiitausercontent.com/b7b7e21c6391cd1436ad73eb356bdec6f93bb3b4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63336365666639382d313731372d626566302d306465392d3836313736303638613635632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b7b7e21c6391cd1436ad73eb356bdec6f93bb3b4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63336365666639382d313731372d626566302d306465392d3836313736303638613635632e706e67\" alt=\"導入手順_GitBucket_拡張インストール_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/c3ceff98-1717-bef0-0de9-86176068a65c.png\"></a><br>\n<br></p></li>\n<li>\n<p>右上の「E」アイコンをクリック、下記情報を入力し<code>Save</code>ボタンクリック</p>\n\n<ul>\n<li>\n<strong>gitbucket-issue-estimation-server URL</strong>\n\n<ul>\n<li>サーバ側の手順で立てたサーバのURL 例： <code>http://127.0.0.1:3000</code> </li>\n</ul>\n</li>\n<li>\n<strong>GitBucket Token</strong>\n\n<ul>\n<li>GitBucket側の手順でメモしたトークン\n<a href=\"https://camo.qiitausercontent.com/be5ab7568b1a4eee506be3546cae994189e34d15/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66366162333739622d613835322d366562342d663634382d6131346437353139663365622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/be5ab7568b1a4eee506be3546cae994189e34d15/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66366162333739622d613835322d366562342d663634382d6131346437353139663365622e706e67\" alt=\"導入手順_GitBucketトークン発行_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f6ab379b-a852-6eb4-f648-a14d7519f3eb.png\"></a>\n<br>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"具体的な仕組み\" class=\"fragment\"></span><a href=\"#%E5%85%B7%E4%BD%93%E7%9A%84%E3%81%AA%E4%BB%95%E7%B5%84%E3%81%BF\"><i class=\"fa fa-link\"></i></a>具体的な仕組み</h2>\n\n<p>Docker側はMongoDBとNode.jsを使っていて、issueの作業量の検索登録・更新・削除APIを提供しているだけです。<br>\nChrome拡張側で下記のように全体をコントロールしています。</p>\n\n<p><strong>(1)</strong> ・・・　GitBucketの画面からissueとマイルストーンの情報を取得、issueの作業量、作業量ベースの進捗率を画面に挿入<br>\n<strong>(2)</strong> ・・・　画面から取得したissueの情報をもとに詳細情報を取得<br>\n<strong>(3)</strong> ・・・　issueの作業量を検索・登録・更新・削除</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/d5736e48c469204a17566c6cfb4003420add2c8e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63616435323063332d376439632d666134372d326262302d3732633534663638383233362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d5736e48c469204a17566c6cfb4003420add2c8e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63616435323063332d376439632d666134372d326262302d3732633534663638383233362e706e67\" alt=\"全体像.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/cad520c3-7d9c-fa47-2bb0-72c54f688236.png\"></a></p>\n\n<h2>\n<span id=\"chrome拡張作成時にgitbucket-apiまわりで躓いたこと\" class=\"fragment\"></span><a href=\"#chrome%E6%8B%A1%E5%BC%B5%E4%BD%9C%E6%88%90%E6%99%82%E3%81%ABgitbucket-api%E3%81%BE%E3%82%8F%E3%82%8A%E3%81%A7%E8%BA%93%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>Chrome拡張作成時にGitBucket APIまわりで躓いたこと</h2>\n\n<p><a href=\"https://github.com/gitbucket/gitbucket/wiki/API-WebHook\" rel=\"nofollow noopener\" target=\"_blank\">GitBucketのAPI</a>は<a href=\"https://developer.github.com/v3/\" rel=\"nofollow noopener\" target=\"_blank\">GithubのREST API v3</a>に準拠していますが、一部実装されていない部分があったので、Chrome拡張作成時に躓きました。</p>\n\n<h3>\n<span id=\"stateallが効かない\" class=\"fragment\"></span><a href=\"#stateall%E3%81%8C%E5%8A%B9%E3%81%8B%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a><code>state=all</code>が効かない</h3>\n\n<p>未解決issueと解決済issue両方をいっぺんに取得したかったのですが、GitBucketのAPIでは<code>state=all</code>が効きません。そのため<code>state=open</code>と<code>state=closed</code>を指定して２回に分けて取得する実装にしました。</p>\n\n<h4>\n<span id=\"per_pageが効かない1度に25件が最大\" class=\"fragment\"></span><a href=\"#per_page%E3%81%8C%E5%8A%B9%E3%81%8B%E3%81%AA%E3%81%841%E5%BA%A6%E3%81%AB25%E4%BB%B6%E3%81%8C%E6%9C%80%E5%A4%A7\"><i class=\"fa fa-link\"></i></a><code>per_page</code>が効かない（1度に25件が最大）</h4>\n\n<p>GitBucketのAPIでは<code>per_page</code>（検索時の１ページあたりの件数）が実装されていません。<br>\nそのためマイルストーンに紐づくissue取得時は、１ページ目を検索して取得結果が25件の場合は次のページも検索するような実装にしました。</p>\n\n<h4>\n<span id=\"closed_atクローズ日が取得できない\" class=\"fragment\"></span><a href=\"#closed_at%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%BA%E6%97%A5%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a><code>closed_at</code>（クローズ日）が取得できない</h4>\n\n<p>Chrome拡張作成当初は、バーンダウンチャートを表示しようと思っていたのですが、issueのクローズ日が取得出来ないので断念しました。</p>\n\n<h4>\n<span id=\"-参考にさせていただいたサイト\" class=\"fragment\"></span><a href=\"#-%E5%8F%82%E8%80%83%E3%81%AB%E3%81%95%E3%81%9B%E3%81%A6%E3%81%84%E3%81%9F%E3%81%A0%E3%81%84%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88\"><i class=\"fa fa-link\"></i></a>※ 参考にさせていただいたサイト</h4>\n\n<ul>\n<li><a href=\"https://qiita.com/5zm/items/b0b620cdeb9596108418#1%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8C%E6%9C%80%E5%A4%A725%E4%BB%B6%E3%81%A7%E5%85%A8issue%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\" id=\"reference-1c197ca99a2ee070efac\">PythonでGitBucketのIssueをExcel出力する（その後）</a></li>\n<li><a href=\"https://qiita.com/5zm/items/57d7abca8e0d447e326d#2-gitbucket%E3%81%AEapi%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6issues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0\" id=\"reference-7d56ea50a58cb24addc5\">PythonでGitBucketのIssueをExcel出力する（API呼び出し編）</a></li>\n</ul>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>本来こういう追加機能はGitBucketプラグインで作るべきなのかもしれませんが、今回はChrome拡張とDockerイメージで実現してみました。<br>\nChrome拡張は任意の画面にJavaScriptやCSSを差し込めるので、既存のWebサービスををちょっと便利にするのにはうってつけですね。</p>\n","body":"== 2018/4/7 追記 ==========================================\n本記事ではChrome拡張とDockerによって実現していましたが、\nその後GitBucket Plugin化しました。\n\n[gitbucket-issue-estimation-plugin](https://github.com/Takumon/gitbucket-issue-estimation-plugin)\n\n[リリースページ](https://github.com/Takumon/gitbucket-issue-estimation-plugin/releases/tag/0.1)からjarファイルをダウンロードして`<GITBUCKET_HOME>/plugins/`に置くだけで導入可能です。\n== =======================================================\n\n\nGit Advent Calendarが埋まっていなかったので、大晦日ですが代わりに投稿させていただきました。\n\n## はじめに\n[GitBucket](https://gitbucket.github.io/)のマイルストーンの進捗率はissueの件数ベースなので、issueごとに作業量のバラつきがあったりすると現実的な進捗率と乖離してしまいます。\n\nそこで今回は\bChrome拡張とDockerイメージを作成して、\nissueに作業量を設定できるようにして、マイルストーンで作業量ベースの進捗率を確認できるようにしました。\n\nChrome拡張とDockerイメージはどちらも公開しているので簡単に導入できます。是非試してみてください。\n\n\n* *Chrome拡張*\n    * [gitbucket-issue-estimation-client](https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja)\n* *Dockerイメージ*\n    * [gitbucket-issue-estimation-server](https://hub.docker.com/r/takumon/gitbucket-issue-estimation-server/)\n\n## 導入すると\n[GitBucket](https://gitbucket.github.io/)のissueで作業量が設定できるようになり、\n![導入後_イシュー画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/61006bc9-2d82-f0b0-64a2-07923c7739c7.png)\n\n\bマイルストーンで作業量ベースの進捗率が見れるようになります。\n![導入後_マイルストーン画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/6a4b86d8-2973-ec84-86bc-6289e42bd666.png)\n\nまた\bissue\b一覧画面でも作業量を設定できるようになります。\n![導入後_イシュー一覧画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/9c858e3b-5dc1-1424-f34f-5b26ac6e20fd.png)\n\n\n\n\n## 導入手順\n### 1. Docker側\nGitBucketと同じネットワーク環境に作業量\b保存用のサーバを立てます。Dockerが導入されていることが前提です。\n\n* \u001edocker-compose\b.ymlを作成（MongoDBのボリューム用にdocker-compose.ymlファイルと同階層にdbフォルダを作成してください）\n\n```docker:docker-compose.yml\nversion: \"3.3\"\nservices:\n  server:\n    image: takumon/gitbucket-issue-estimation-server\n    ports:\n      - 3000:3000\n    depends_on:\n      - mongo\n    links:\n      - mongo\n    environment:\n      MONGO_URL: mongodb://mongo:27017/test\n  mongo:\n    image: mongo:3.5.12\n    ports:\n      - 27017:27017\n    volumes:\n      - ./db:/data/db\n```\n\n* docker-conpose.ymlがあるフォルダで下記を実行\n\n```bash:\n$ docker-compose up -d\n```\n\n\n### 2. GitBucket側\nChrome拡張をインストールする前に、GitBucketの\bトークンを発行してメモしておきます。\n\n* GitBucketヘッダー右上アイコン > Account Setting\b を選択\n![導入手順_GitBucketトークン発行_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/426761f7-c199-e19e-c619-a182dd05b0ea.png)\n<br>\n\n* 左メニュー Applicationsを選択し、Generate new tokenのToken descriptionにトークンの概要を記載、その後`Generate token`ボタンをクリック\n![導入手順_GitBucketトークン発行_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/d186f702-f7db-521e-6d6d-edca3186d915.png)\n<br>\n\n* 発行されたトークンをコピー（後の手順で使います）\n![導入手順_GitBucketトークン発行_３.png](https://qiita-image-store.s3.amazonaws.com/0/49915/0c804faf-fd13-80d2-8ce9-e504922bb54a.png)\n\n\n### 3. Chrome Extension側\n* Chromeを開きChromeウェブストアで[gitbucket-issue-estimation-client](https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja)をインストール\n![導入手順_GitBucket_拡張インストール_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/c3ceff98-1717-bef0-0de9-86176068a65c.png)\n<br>\n\n* \b右上の「E」アイコンをクリック、下記情報を入力し`Save`ボタンクリック\n    * **gitbucket-issue-estimation-server URL**\n        * サーバ側の手順で立てたサーバのURL 例： `http://127.0.0.1:3000` \n    * **GitBucket Token**\n        * GitBucket側の手順でメモしたトークン\n![導入手順_GitBucketトークン発行_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f6ab379b-a852-6eb4-f648-a14d7519f3eb.png)\n<br>\n\n## 具体的な仕組み\nDocker側はMongoDBとNode.jsを使っていて、issueの作業量の検索登録・更新・削除APIを提供しているだけです。\nChrome拡張側で下記のように全体をコントロールしています。\n\n**(1)** ・・・　GitBucketの画面からissueとマイルストーンの情報を取得、issueの作業量、作業量ベースの進捗率を画面に挿入\n**(2)** ・・・　画面から取得したissueの情報をもとに詳細情報を取得\n**(3)** ・・・　issueの作業量を検索・登録・更新・削除\n\n![全体像.png](https://qiita-image-store.s3.amazonaws.com/0/49915/cad520c3-7d9c-fa47-2bb0-72c54f688236.png)\n\n\n\n## Chrome拡張作成時にGitBucket APIまわりで躓いたこと\n[GitBucketのAPI](https://github.com/gitbucket/gitbucket/wiki/API-WebHook)は[GithubのREST API v3](https://developer.github.com/v3/)に準拠していますが、一部実装されていない部分があったので、Chrome拡張作成時に躓きました。\n\n### `state=all`が効かない\n未解決issueと解決済issue両方をいっぺんに取得したかったのですが、GitBucketのAPIでは`state=all`が効きません。そのため`state=open`と`state=closed`を指定して２回に分けて取得する実装にしました。\n\n#### `per_page`が効かない（\b1度に25件が最大）\nGitBucketのAPIでは`per_page`（検索時の１ページあたりの件数）が実装されていません。\nそのためマイルストーンに紐づくissue取得時は、１ページ目を検索して取得結果が25件の場合は次のページも検索するような実装にしました。\n\n#### `closed_at`（クローズ日）が取得できない\nChrome拡張作成当初は、バーンダウンチャートを表示しようと思っていたのですが、issueのクローズ日が取得出来ないので断念しました。\n\n#### ※ 参考にさせていただいたサイト\n* [PythonでGitBucketのIssueをExcel出力する（その後）](https://qiita.com/5zm/items/b0b620cdeb9596108418#1%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8C%E6%9C%80%E5%A4%A725%E4%BB%B6%E3%81%A7%E5%85%A8issue%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84)\n* [PythonでGitBucketのIssueをExcel出力する（API呼び出し編）](https://qiita.com/5zm/items/57d7abca8e0d447e326d#2-gitbucket%E3%81%AEapi%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6issues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0)\n\n\n## まとめ\n本来こういう追加機能はGitBucketプラグインで作るべきなのかもしれませんが、今回はChrome拡張とDockerイメージで実現してみました。\nChrome拡張は任意の画面にJavaScriptやCSSを差し込めるので、既存のWebサービスををちょっと便利にするのにはうってつけですね。\n\n","comments_count":0,"created_at":"2017-12-31T23:49:04+09:00","likes_count":6,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/e0ec0869-f368-5083-bdc2-cdba9d59427a/","title":"フロントエンド初心者がMEANスタック(MongoDB+Express+Angular+Node.js)でアプリを作ってみて躓いたこと","date":"2017-12-12T03:19:11+09:00","excerpt":"FUJITSU Advent Calendar 2017 12日目の記事です。リッチでイマドキなデザインのアプリが作りたくて、ここ４ヶ月ほどMEANスタック(MongoDB+Express+Angular+Node.js)でブログアプリを作...","tags":["JavaScript","Node.js","Express","mongoose","Angular","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"e0ec0869-f368-5083-bdc2-cdba9d59427a","title":"フロントエンド初心者がMEANスタック(MongoDB+Express+Angular+Node.js)でアプリを作ってみて躓いたこと","rendered_body":"<p><a href=\"https://qiita.com/advent-calendar/2017/fujitsu\">FUJITSU Advent Calendar 2017</a> 12日目の記事です。</p>\n\n<p>リッチでイマドキなデザインのアプリが作りたくて、<br>\nここ４ヶ月ほど<strong>MEAN</strong>スタック(<strong>M</strong>ongoDB+<strong>E</strong>xpress+<strong>A</strong>ngular+<strong>N</strong>ode.js)でブログアプリを作っています。<br>\n知識ゼロからのスタートでしたが、多くの方々がブログやStackOverFlowに情報を載せてくれているので、躓きながらもなんとかアプリ開発を進めることができました。</p>\n\n<p>この記事では、フロントエンド初心者の自分がMEANスタックでアプリを作る時に躓いたことや、こういう機能を実現するにはどうすればいいか?などをまとめています。<br>\nこれからをAngularを学ぼうとしている方、ExpressやMongoDBなどサーバーサイドJavaScriptを学ぼうとしている方の参考になればうれしいです。</p>\n\n<h2>\n<span id=\"アプリの紹介\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E7%B4%B9%E4%BB%8B\"><i class=\"fa fa-link\"></i></a>アプリの紹介</h2>\n\n<p>本線から脱線しますが、イントラでの使用を想定したQiitaのようなブログアプリです。デモ環境もあるのでよければ触ってみてください(モバイルには未対応ですが。。。)</p>\n\n<ul>\n<li><a href=\"https://github.com/Takumon/mean-blog\" rel=\"nofollow noopener\" target=\"_blank\">Github</a></li>\n<li><a href=\"https://hub.docker.com/r/takumon/mean-blog_auto/\" rel=\"nofollow noopener\" target=\"_blank\">Dockerhub</a></li>\n<li>\n<a href=\"https://material-blog-demo.herokuapp.com/\" rel=\"nofollow noopener\" target=\"_blank\">デモ環境</a> (ユーザID/パスは DemoUser / DemoUser1234# です)</li>\n</ul>\n\n<p>アプリキャプチャ その１ (記事詳細)<br>\n<a href=\"https://camo.qiitausercontent.com/4d64d8bd315bcf330d1ac6de1cfe8bb53f280992/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62383133333331372d666163322d626239622d386632642d3133646238393662656366352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/4d64d8bd315bcf330d1ac6de1cfe8bb53f280992/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62383133333331372d666163322d626239622d386632642d3133646238393662656366352e706e67\" alt=\"appdemo_detail.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/b8133317-fac2-bb9b-8f2d-13db896becf5.png\"></a></p>\n\n<p>アプリキャプチャ その２ (記事一覧)<br>\n<a href=\"https://camo.qiitausercontent.com/96927cda50e8df84b0c5415e996246c6d720b607/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39353064313036322d316261342d363366362d666535332d6366653664343634333061342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/96927cda50e8df84b0c5415e996246c6d720b607/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39353064313036322d316261342d363366362d666535332d6366653664343634333061342e706e67\" alt=\"アプリ_スクリーンキャプチャ_記事一覧.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/950d1062-1ba4-63f6-fe53-cfe6d46430a4.png\"></a></p>\n\n<p>アプリキャプチャ その３ (プロフィール)<br>\n<a href=\"https://camo.qiitausercontent.com/46aab6c2add74ca826b1dbe730d1a82eb481e295/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33323563373934382d636531362d396330382d306236362d6433383932653034366165642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/46aab6c2add74ca826b1dbe730d1a82eb481e295/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33323563373934382d636531362d396330382d306236362d6433383932653034366165642e706e67\" alt=\"アプリ_スクリーンキャプチャ_ ユーザ画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/325c7948-ce16-9c08-0b66-d3892e046aed.png\"></a></p>\n\n<h1>\n<span id=\"1-フロント側angularまわり\" class=\"fragment\"></span><a href=\"#1-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4angular%E3%81%BE%E3%82%8F%E3%82%8A\"><i class=\"fa fa-link\"></i></a>1. フロント側Angularまわり</h1>\n\n<h2>\n<span id=\"angularについて調べる時に古い情報を除外したい\" class=\"fragment\"></span><a href=\"#angular%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%BF%E3%81%B9%E3%82%8B%E6%99%82%E3%81%AB%E5%8F%A4%E3%81%84%E6%83%85%E5%A0%B1%E3%82%92%E9%99%A4%E5%A4%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Angularについて調べる時に古い情報を除外したい</h2>\n\n<p>1系は<code>AngularJS</code>、2系以降は<code>Angular</code>と呼ばれており、1系と2系以降では大きく仕様が異なります。<br>\nそのため検索する時は<code>Angualr2</code>などバージョンを指定したり、1系を除外するため<code>--AngularJS</code>をつけたりすると検索しやすいです。</p>\n\n<h2>\n<span id=\"htmlのdom要素を別のdom要素またはcomponentから扱いたい\" class=\"fragment\"></span><a href=\"#html%E3%81%AEdom%E8%A6%81%E7%B4%A0%E3%82%92%E5%88%A5%E3%81%AEdom%E8%A6%81%E7%B4%A0%E3%81%BE%E3%81%9F%E3%81%AFcomponent%E3%81%8B%E3%82%89%E6%89%B1%E3%81%84%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>HTMLのDOM要素を、別のDOM要素またはComponentから扱いたい</h2>\n\n<p>要素に<code>#xxxxx</code>のように<code>#</code>始まりの名前をつけると、別のDOM要素から参照できます</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;input</span> <span class=\"err\">#</span><span class=\"na\">phone</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"電話番号\"</span><span class=\"nt\">/&gt;</span>\n<span class=\"c\">&lt;!--  他のDOM要素からphonという変数名でDOM要素を参照できるようになる --&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"nt\">&gt;</span>(click)=\"callPhone(phone.value)\"&gt;\n</pre></div>\n</div>\n\n<p>Componentから参照する場合は<code>@ViewChild</code>を使います</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">Component</span></div>\n<div class=\"highlight\"><pre>  <span class=\"c1\">// ViewChildの引数に名前を文字列で指定します</span>\n  <span class=\"p\">@</span><span class=\"nd\">ViewChild</span><span class=\"p\">(</span><span class=\"s1\">'phone'</span><span class=\"p\">)</span> <span class=\"nx\">phoneElement</span><span class=\"p\">:</span> <span class=\"nx\">phoneElement</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">showPhoneValue</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">phoneElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://angular.io/guide/template-syntax#ref-vars\" rel=\"nofollow noopener\" target=\"_blank\">Angular公式サイト</a></li>\n<li><a href=\"https://stackoverflow.com/questions/32693061/how-can-i-select-an-element-in-a-component-template\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"routing時の認証を非同期で行いたい\" class=\"fragment\"></span><a href=\"#routing%E6%99%82%E3%81%AE%E8%AA%8D%E8%A8%BC%E3%82%92%E9%9D%9E%E5%90%8C%E6%9C%9F%E3%81%A7%E8%A1%8C%E3%81%84%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Routing時の認証を非同期で行いたい</h2>\n\n<p>URLごとの認証は<code>CanActivate</code>インターフェースを実装すればできますが、<br>\nサーバから認証情報を取得して非同期で認証したい場合もあると思います。<br>\nそのような時は、<strong><code>CanActivate#canActivate</code>で</strong>booleanの代わりに<strong>Observableを戻り値に指定する</strong>ことで実現できます。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">SampleAuthGuard</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Router</span><span class=\"p\">,</span> <span class=\"nx\">CanActivate</span><span class=\"p\">,</span> <span class=\"nx\">ActivatedRouteSnapshot</span><span class=\"p\">,</span> <span class=\"nx\">RouterStateSnapshot</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/router'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AuthenticationService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./authentication.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SampleAuthGuard</span> <span class=\"kr\">implements</span> <span class=\"nx\">CanActivate</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span>\n    <span class=\"kr\">private</span> <span class=\"nx\">auth</span><span class=\"p\">:</span> <span class=\"nx\">AuthenticationService</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n  <span class=\"c1\">// booleanではなくObservable&lt;boolean&gt;を戻り値で返す</span>\n  <span class=\"nx\">canActivate</span><span class=\"p\">(</span><span class=\"nx\">route</span><span class=\"p\">:</span> <span class=\"nx\">ActivatedRouteSnapshot</span><span class=\"p\">,</span> <span class=\"nx\">state</span><span class=\"p\">:</span> <span class=\"nx\">RouterStateSnapshot</span><span class=\"p\">):</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"kr\">boolean</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">auth</span><span class=\"p\">.</span><span class=\"nx\">checkState</span><span class=\"p\">()</span>\n      <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">err</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">of</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">))</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/38425461/angular2-canactivate-calling-async-function\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"formarrayの値を初期化したい\" class=\"fragment\"></span><a href=\"#formarray%E3%81%AE%E5%80%A4%E3%82%92%E5%88%9D%E6%9C%9F%E5%8C%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>FormArrayの値を初期化したい</h2>\n\n<p>FormControlはpatchValueで初期値を設定できますが、<br>\nFormArrayの場合patchValueで配列の値を設定しようとしても設定できません。<br>\nこういう場合は、<strong>配列1つ１つの値をもとにFormControlを生成してFormArrayにpush</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">ダメな例</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Form生成</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">group</span><span class=\"p\">({</span>\n    <span class=\"na\">schoolName</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">([])</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// Formに初期値を設定</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">pathValue</span><span class=\"p\">({</span>\n    <span class=\"na\">schooleName</span><span class=\"p\">:</span> <span class=\"s1\">'SampleSchoolName'</span> <span class=\"c1\">// FormControlの値の初期化はpatchValueで可能</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'taro'</span><span class=\"p\">,</span> <span class=\"s1\">'jiro'</span><span class=\"p\">,</span> <span class=\"s1\">'saburo'</span><span class=\"p\">];</span> <span class=\"c1\">// FormArrayに要素を追加する場合patchValueでは不可能</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">良い例</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Formを生成</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">group</span><span class=\"p\">({</span>\n    <span class=\"na\">schoolName</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">([])</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// Formに初期値を設定</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">pathValue</span><span class=\"p\">({</span>\n    <span class=\"na\">schooleName</span><span class=\"p\">:</span> <span class=\"s1\">'SampleSchoolName'</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// データからFormControlを生成し１件１件FormArrayにpushする</span>\n  <span class=\"p\">[</span><span class=\"s1\">'taro'</span><span class=\"p\">,</span> <span class=\"s1\">'jiro'</span><span class=\"p\">,</span> <span class=\"s1\">'saburo'</span><span class=\"p\">].</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">student</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">controls</span><span class=\"p\">[</span><span class=\"s1\">'students'</span><span class=\"p\">].</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">FormControll</span><span class=\"p\">(</span><span class=\"nx\">student</span><span class=\"p\">));</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/40916084/angular2-patchvalue-push-value-into-array\" rel=\"nofollow noopener\" target=\"_blank\">StackOvereFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"error-error-no-provider-for-templaterefというエラー\" class=\"fragment\"></span><a href=\"#error-error-no-provider-for-templateref%E3%81%A8%E3%81%84%E3%81%86%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>「ERROR Error: No provider for TemplateRef!」というエラー</h2>\n\n<p>最初このエラーが出た時は、何が原因なのかわからずに困りました。。。<br>\n大抵の場合は、<strong><code>*ngIf</code>や<code>*ngForm</code>の<code>*</code>が抜けてることが原因</strong>です(要するにただのタイポです。。。)<br>\n<code>*</code>が抜けると、Angularは<code>ngIf</code>をディレクティブとして解釈しようとしますが、<br>\nそんなディレクティブは存在しないので<code>No provider for TemplateRef!</code>と言われてしまうそうです。</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/35932074/angular2-no-provider-for-templateref-ngif-templateref\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"textareaにおいてtabキーでインデントしたい\" class=\"fragment\"></span><a href=\"#textarea%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6tab%E3%82%AD%E3%83%BC%E3%81%A7%E3%82%A4%E3%83%B3%E3%83%87%E3%83%B3%E3%83%88%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>textareaにおいてTabキーでインデントしたい</h2>\n\n<p>文書を入力するようなテキストエリアの場合に、Tabキーでのインデントしたい場合は、<br>\nkyedownイベント発生時にテキストエリアの値とキャレットの位置を操作することで実現可能です。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;textarea</span> <span class=\"err\">#</span><span class=\"na\">sampletextarea</span>\n  <span class=\"err\">(</span><span class=\"na\">keydown</span><span class=\"err\">)=\"</span><span class=\"na\">indent</span><span class=\"err\">($</span><span class=\"na\">event</span><span class=\"err\">,</span> <span class=\"na\">sampletextarea</span><span class=\"err\">)\"</span> <span class=\"nt\">&gt;&lt;/textarea&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">Component</span></div>\n<div class=\"highlight\"><pre>  <span class=\"nx\">indent</span><span class=\"p\">(</span><span class=\"nx\">$event</span><span class=\"p\">,</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Tabキー押下時</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">$event</span><span class=\"p\">.</span><span class=\"nx\">keyCode</span> <span class=\"o\">===</span> <span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 次の要素にフォーカスが移らないようにする</span>\n      <span class=\"nx\">$event</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n\n      <span class=\"c1\">// 現在のキャレット位置を取得</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">caretStart</span> <span class=\"o\">=</span> <span class=\"nx\">textareaElement</span><span class=\"p\">.</span><span class=\"nx\">selectionStart</span><span class=\"p\">;</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">caretEnd</span> <span class=\"o\">=</span> <span class=\"nx\">textareaElement</span><span class=\"p\">.</span><span class=\"nx\">selectionEnd</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// テキストエリアの値を取得し、キャレット位置にTabを挿入</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">TAB</span> <span class=\"o\">=</span> <span class=\"s1\">'¥t'</span><span class=\"p\">;</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">caretStart</span><span class=\"p\">)</span>\n                     <span class=\"o\">+</span> <span class=\"nx\">TAB</span> <span class=\"o\">+</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"nx\">caretStart</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// キャレット位置をTab分ずらす</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">focus</span><span class=\"p\">();</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">setSelectionRange</span><span class=\"p\">(</span><span class=\"nx\">caretStart</span> <span class=\"o\">+</span> <span class=\"nx\">TAB</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">,</span> <span class=\"nx\">caretEnd</span> <span class=\"o\">+</span> <span class=\"nx\">TAB</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h2>\n<span id=\"markdownプレビューを表示したいソースコードはシンタックスハイライトさせたい\" class=\"fragment\"></span><a href=\"#markdown%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%97%E3%81%9F%E3%81%84%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AF%E3%82%B7%E3%83%B3%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B9%E3%83%8F%E3%82%A4%E3%83%A9%E3%82%A4%E3%83%88%E3%81%95%E3%81%9B%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Markdownプレビューを表示したい、ソースコードはシンタックスハイライトさせたい</h2>\n\n<p><a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">marked</a>と<a href=\"https://github.com/isagalaev/highlight.js\" rel=\"nofollow noopener\" target=\"_blank\">highlight.js</a>を組み合わせて使います。<br>\n<a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">marked</a>のReadmeを見ればなんとなくわかりますが、Angularの仕組みに乗せる必要があるのでPipeやらServiceやらを作ります。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">markdown-parse.service.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">marked</span> <span class=\"k\">from</span> <span class=\"s1\">'marked'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">hljs</span> <span class=\"k\">from</span> <span class=\"s1\">'highlight.js'</span><span class=\"p\">;</span>\n\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MarkdownParseService</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">marked</span><span class=\"p\">.</span><span class=\"nx\">setOptions</span><span class=\"p\">({</span>\n      <span class=\"na\">highlight</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">hljs</span><span class=\"p\">.</span><span class=\"nx\">highlightAuto</span><span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">).</span><span class=\"nx\">value</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"na\">rawText</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">marked</span><span class=\"p\">(</span><span class=\"nx\">rawText</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">markdown.pipe.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nx\">marked</span> <span class=\"k\">from</span> <span class=\"s1\">'marked'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MarkdownParseService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./markdown-parse.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'toMarkdown'</span> <span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MarkdownParsePipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">markdownParseService</span><span class=\"p\">:</span> <span class=\"nx\">MarkdownParseService</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">any</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">markdownParseService</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>HTMLで下記のように指定します。<code>{{}}</code>だとサニタイズされてしまうので<code>innerHTML</code>属性を指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">innerHTML</span><span class=\"err\">]=\"</span><span class=\"na\">md</span> <span class=\"err\">|</span> <span class=\"na\">toMarkdown</span><span class=\"err\">\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://qiita.com/daikiojm/items/e02e2aeb0231b3620a0b\" id=\"reference-9001a931765f8f52acaf\">Qiita AngularでMarkdownをHTMLとして表示するカスタムpipeを作成する</a></li>\n<li>Github <a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">chjj/marked</a>\n</li>\n</ul>\n\n<h2>\n<span id=\"絞り込み条件付きリストにおいてリストの要素が変更追加削除された時に絞り込み結果をリフレッシュしたい\" class=\"fragment\"></span><a href=\"#%E7%B5%9E%E3%82%8A%E8%BE%BC%E3%81%BF%E6%9D%A1%E4%BB%B6%E4%BB%98%E3%81%8D%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%8C%E5%A4%89%E6%9B%B4%E8%BF%BD%E5%8A%A0%E5%89%8A%E9%99%A4%E3%81%95%E3%82%8C%E3%81%9F%E6%99%82%E3%81%AB%E7%B5%9E%E3%82%8A%E8%BE%BC%E3%81%BF%E7%B5%90%E6%9E%9C%E3%82%92%E3%83%AA%E3%83%95%E3%83%AC%E3%83%83%E3%82%B7%E3%83%A5%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>絞り込み条件付きリストにおいて、リストの要素が変更、追加、削除された時に絞り込み結果をリフレッシュしたい</h2>\n\n<p>リストの絞り込みはPipeで実現しますが、通常Pipeはリストの要素が変更されても再び絞り込みが実施されることはありません。<br>\nこのような場合はPipeアノテーションにて<strong>pureオプションをfalseに設定</strong>ましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"err\">#</span><span class=\"na\">searchUserName</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n  <span class=\"nt\">&lt;li</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let user of (userList | searchUserFilter: searchUserName.value);\"</span> <span class=\"nt\">&gt;</span>{{user.name}}<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">search-user.pipe.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">User</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./user'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'searchUserFilter'</span><span class=\"p\">,</span>\n  <span class=\"na\">pure</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"c1\">// pureをfalseにすることでユーザが変更、追加、削除された時にリフレッシュできる</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SearchFilterPipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">User</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">searchUserName</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">any</span><span class=\"p\">[]</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">searchUserName</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">items</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">searchUserName</span> <span class=\"o\">=</span> <span class=\"nx\">searchUserName</span><span class=\"p\">.</span><span class=\"nx\">toLowerCase</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span> <span class=\"nx\">item</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">userId</span><span class=\"p\">.</span><span class=\"nx\">toLowerCase</span><span class=\"p\">().</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"nx\">searchUserName</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://angular.io/guide/pipes#pure-and-impure-pipes\" rel=\"nofollow noopener\" target=\"_blank\">Angular公式サイト</a></li>\n</ul>\n\n<h2>\n<span id=\"グローバル定数を定義したい\" class=\"fragment\"></span><a href=\"#%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E5%AE%9A%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>グローバル定数を定義したい</h2>\n\n<p>いろんなクラスで使う定数を共通化する時は、単純に<strong>クラスを作ってstaticなメンバとして定数を定義</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">app-settings.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppSettings</span> <span class=\"p\">{</span>\n   <span class=\"kr\">public</span> <span class=\"kr\">static</span> <span class=\"nx\">API_ENDPOINT</span><span class=\"o\">=</span><span class=\"s1\">'http://127.0.0.1:6666/api/'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">SampleService</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">Injectable</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'angular2/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">AppSettings</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app-settings'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SampleService</span> <span class=\"p\">{</span>\n    <span class=\"nx\">sampleMethod</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">AppSettings</span><span class=\"p\">.</span><span class=\"nx\">API_ENDPOINT</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/34986922/define-global-constants-in-angular-2\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"画像が多い画面の初期表示を早くしたい\" class=\"fragment\"></span><a href=\"#%E7%94%BB%E5%83%8F%E3%81%8C%E5%A4%9A%E3%81%84%E7%94%BB%E9%9D%A2%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A1%A8%E7%A4%BA%E3%82%92%E6%97%A9%E3%81%8F%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>画像が多い画面の初期表示を早くしたい</h2>\n\n<p><a href=\"https://github.com/tjoskar/ng-lazyload-image\" rel=\"nofollow noopener\" target=\"_blank\">ng-lazyload-image</a>を使えば画像の遅延ロードを実現できます。<br>\n使い方もとても簡単でimgタグにディレクティブを指定するだけです。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre> <span class=\"nt\">&lt;img</span>\n  <span class=\"err\">[</span><span class=\"na\">defaultImage</span><span class=\"err\">]=\"</span><span class=\"na\">https:</span><span class=\"err\">//</span><span class=\"na\">images</span><span class=\"err\">.</span><span class=\"na\">sample</span><span class=\"err\">.</span><span class=\"na\">com</span><span class=\"err\">/</span><span class=\"na\">photo</span><span class=\"err\">/</span><span class=\"na\">defaultimage</span><span class=\"err\">\"</span> \n  <span class=\"err\">[</span><span class=\"na\">lazyLoad</span><span class=\"err\">]=\"</span><span class=\"na\">https:</span><span class=\"err\">//</span><span class=\"na\">images</span><span class=\"err\">.</span><span class=\"na\">sample</span><span class=\"err\">.</span><span class=\"na\">com</span><span class=\"err\">/</span><span class=\"na\">photo</span><span class=\"err\">/</span><span class=\"na\">sampleimage</span><span class=\"err\">\"</span>\n  <span class=\"err\">[</span><span class=\"na\">offset</span><span class=\"err\">]=\"</span><span class=\"na\">30</span><span class=\"err\">\"</span>\n <span class=\"nt\">&gt;</span>\n</pre></div>\n</div>\n\n<p><em>defaultImage</em><br>\n　即時ロードされる画像のURL、遅延ロードする画像を読み込む間、表示される<br>\n<em>lazyLoad</em><br>\n　遅延ロードする画像のURL<br>\n<em>offset</em><br>\n　スクロールが発生する場合に画面下部の何ピクセル下に来た時にロードを開始するか<br>\n<em>errorImage</em><br>\n　遅延ロード失敗時に表示する画像URL</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/tjoskar/ng-lazyload-image\" rel=\"nofollow noopener\" target=\"_blank\">ng-lazyload-image</a></li>\n</ul>\n\n<h2>\n<span id=\"angular-cliのng-serveコマンドでdistフォルダを一旦削除したくない\" class=\"fragment\"></span><a href=\"#angular-cli%E3%81%AEng-serve%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7dist%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E3%82%92%E4%B8%80%E6%97%A6%E5%89%8A%E9%99%A4%E3%81%97%E3%81%9F%E3%81%8F%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>Angular Cliの<code>ng serve</code>コマンドでdistフォルダを一旦削除したくない</h2>\n\n<p><code>ng serve</code>コマンドは<code>dist</code>フォルダを削除してからtsファイルをトランスコンパイルします。<br>\nそれを防ぐためには、<strong>delete-output-pathオプションをfalse</strong>に指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json　ビルドスクリプト</span></div>\n<div class=\"highlight\"><pre><span class=\"s2\">\"script\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"cp ./resource/* dist &amp;&amp; ng serve --delete-output-path=false\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/angular/angular-cli/issues/4366\" rel=\"nofollow noopener\" target=\"_blank\">angular-cli github issue #4366</a></li>\n</ul>\n\n<h2>\n<span id=\"aotコンパイルが遅いのでなんとかしたい\" class=\"fragment\"></span><a href=\"#aot%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%8C%E9%81%85%E3%81%84%E3%81%AE%E3%81%A7%E3%81%AA%E3%82%93%E3%81%A8%E3%81%8B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>AOTコンパイルが遅いのでなんとかしたい</h2>\n\n<p>なんとかできませんでした。。。(もしかしたら方法があるのかもしれません。誰か教えてください!!!)<br>\nAOTコンパイルはJITコンパイルが検出してくれないHTMLのエラーを警告してくれますが、その反面遅いです。特に<a href=\"https://material.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular Material</a>を使う場合は顕著です。<br>\nそのため、自分の場合は基本的にJITビルドを使い、issueのプルリクをする前など区切りのいいタイミングでAOTビルドしてエラーがないか確認するというように使い分けてました。</p>\n\n<h1>\n<span id=\"2-フロント側angularでのテスト周り\" class=\"fragment\"></span><a href=\"#2-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4angular%E3%81%A7%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A\"><i class=\"fa fa-link\"></i></a>2. フロント側Angularでのテスト周り</h1>\n\n<h2>\n<span id=\"ci環境などでテストが終わらずにタイムアウトしてしまう\" class=\"fragment\"></span><a href=\"#ci%E7%92%B0%E5%A2%83%E3%81%AA%E3%81%A9%E3%81%A7%E3%83%86%E3%82%B9%E3%83%88%E3%81%8C%E7%B5%82%E3%82%8F%E3%82%89%E3%81%9A%E3%81%AB%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%97%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86\"><i class=\"fa fa-link\"></i></a>CI環境などでテストが終わらずにタイムアウトしてしまう</h2>\n\n<p>CirleCiなどでテストを実行する場合<code>ng test</code>コマンドだとプロセスが終了しないためタイムアウトで失敗してしまいます。<br>\nこのような場合は<strong>watchオプションをfalseに設定</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ng test --wtach=false\n</pre></div></div>\n\n<p><strong>参考サイト</strong><br>\n<a href=\"https://github.com/angular/angular-cli/issues/362\" rel=\"nofollow noopener\" target=\"_blank\">Github isssue</a></p>\n\n<h2>\n<span id=\"テスト時にerror-timeout---async-callback-was-not-invoked-within-timeout-specified-by-jasminedefault_timeout_intervalやfailed-to-execute-send-on-xmlhttprequestのエラー\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E6%99%82%E3%81%ABerror-timeout---async-callback-was-not-invoked-within-timeout-specified-by-jasminedefault_timeout_interval%E3%82%84failed-to-execute-send-on-xmlhttprequest%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>テスト時に「Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.」や「Failed to execute 'send' on 'XMLHttpRequest'」のエラー</h2>\n\n<p>このような場合は、一時的に<code>ng test</code>コマンドのオプションに<strong><code>-sm=false</code>を追加</strong>してテストし直すと根本原因エラーメッセージで出力されるようになります。<br>\n大抵の場合は自作したモッククラスに必要なメソッドがないことが原因です。</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/45399079/angular-tests-failing-with-failed-to-execute-send-on-xmlhttprequest\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト用に子コンポーネントをモック化したい\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%94%A8%E3%81%AB%E5%AD%90%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E3%83%A2%E3%83%83%E3%82%AF%E5%8C%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト用に子コンポーネントをモック化したい</h2>\n\n<p>意外と簡単で、TestBed#configureTestingModuleで<br>\ndeclarationsに自作したモックの子コンポーネントを追加するだけです。<br>\ninput,outputがあれば必要に応じてメンバ定義します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\"><div class=\"highlight\"><pre><span class=\"c1\">// ※import文は省略</span>\n\n<span class=\"c1\">// モックの子コンポーネントを定義</span>\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-child'</span><span class=\"p\">,</span> <span class=\"c1\">// 子コンポーネントと同じものを定義</span>\n  <span class=\"na\">template</span><span class=\"p\">:</span> <span class=\"s1\">'&lt;p&gt;Mock Child Component&lt;/p&gt;'</span>\n<span class=\"p\">})</span>\n<span class=\"kd\">class</span> <span class=\"nx\">MockClildComponent</span> <span class=\"p\">{</span>\n  <span class=\"p\">@</span><span class=\"nd\">Input</span><span class=\"p\">()</span> <span class=\"nx\">childInput</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"p\">@</span><span class=\"nd\">Output</span><span class=\"p\">()</span> <span class=\"nx\">childOutput</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">EventEmitter</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// ...</span>\n\n<span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n    <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"c1\">// テスト時のdeclarationsにモックの定義を追加</span>\n      <span class=\"nx\">MockProductSettingsComponent</span><span class=\"p\">,</span>\n      <span class=\"c1\">// ...</span>\n    <span class=\"p\">],</span>\n    <span class=\"c1\">// ...</span>\n  <span class=\"p\">});</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">});</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/41240163/mocking-child-components-angular-2\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト結果にangular-materilaのスタイルが反映されない\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%B5%90%E6%9E%9C%E3%81%ABangular-materila%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%8C%E5%8F%8D%E6%98%A0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト結果にAngular Materilaのスタイルが反映されない</h2>\n\n<p>UIフレームワークで<a href=\"https://material.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular Material</a>を使っている場合、<br>\n<code>karma.config.js</code>でAngular Materilaのcssを直接読み込んであげる必要あります。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">karma.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"err\">・・・</span>\n      <span class=\"c1\">// Angular Materialのスタイルをテスト開始時に読み込んでおく</span>\n      <span class=\"p\">{</span><span class=\"nl\">pattern</span><span class=\"p\">:</span> <span class=\"s1\">'./node_modules/@angular/material/prebuilt-themes/indigo-pink.css'</span><span class=\"p\">,</span> <span class=\"nx\">included</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">watched</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">},</span>\n<span class=\"p\">],</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/angular/material2/issues/4056\" rel=\"nofollow noopener\" target=\"_blank\">stackoverflow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト結果にstylesscssアプリ共通のスタイル定義のスタイルが反映されない\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%B5%90%E6%9E%9C%E3%81%ABstylesscss%E3%82%A2%E3%83%97%E3%83%AA%E5%85%B1%E9%80%9A%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E5%AE%9A%E7%BE%A9%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%8C%E5%8F%8D%E6%98%A0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト結果にstyles.scss(アプリ共通のスタイル定義)のスタイルが反映されない</h2>\n\n<p>アプリ共通スタイルをSASS形式にしている場合<br>\n開発用ライブライに<code>karma-scss-preprocessor</code>と<code>node-sass</code>を追加して<code>karma.conf.js</code>を下記のように設定します。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">karma.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"err\">・・・</span>\n<span class=\"err\">　</span> <span class=\"c1\">// プラグインに`karma-scss-preprocessor`を追加</span>\n  <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'karma-scss-preprocessor'</span><span class=\"p\">)</span>\n<span class=\"p\">],</span>\n\n\n<span class=\"nx\">files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"err\">・・・</span>\n  <span class=\"c1\">// filesにアプリ共通スタイルを追加</span>\n  <span class=\"p\">{</span> <span class=\"nl\">pattern</span><span class=\"p\">:</span> <span class=\"s1\">'./src/styles.scss'</span><span class=\"p\">,</span> <span class=\"nx\">watched</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>  <span class=\"nx\">included</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">served</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n<span class=\"p\">],</span>\n\n<span class=\"c1\">// preprocessorsを追加</span>\n<span class=\"nx\">preprocessors</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n <span class=\"s1\">'./src/test.ts'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'@angular/cli'</span><span class=\"p\">],</span>\n <span class=\"s1\">'./src/styles.scss'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'scss'</span><span class=\"p\">]</span>\n<span class=\"p\">},</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong>:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/44460733/how-to-configure-karma-to-include-global-scss-files-for-an-angular-cli-project/44498689#44498689\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n<li><a href=\"https://github.com/karma-runner/karma/issues/2700\" rel=\"nofollow noopener\" target=\"_blank\">Github karma/issue/2700</a></li>\n</ul>\n\n<h1>\n<span id=\"3-バックエンド側-expressmongodb周り\" class=\"fragment\"></span><a href=\"#3-%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89%E5%81%B4-expressmongodb%E5%91%A8%E3%82%8A\"><i class=\"fa fa-link\"></i></a>3. バックエンド側 Express、MongoDB周り</h1>\n\n<p>※MongDBをNode.jsで扱う場合は<a href=\"https://github.com/Automattic/mongoose\" rel=\"nofollow noopener\" target=\"_blank\">mongoose</a>という便利なライブラリがあるのでそれを使う前提のお話です。</p>\n\n<h2>\n<span id=\"mongooseのvirtualメソッドを使う\" class=\"fragment\"></span><a href=\"#mongoose%E3%81%AEvirtual%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>mongooseのvirtualメソッドを使う</h2>\n\n<p>例えば<code>記事</code>,<code>コメント</code>,<code>リプライ</code>などのモデルを定義する場合、<br>\n３つのモデルのライフサイクルは、記事追加 =&gt; 記事に対するコメント追加 =&gt; コメントに対するリプライ追加　のようになります。<br>\nこのような場合は、コメントが記事の参照を持ち、リプライがコメントの参照を持つモデル構造が望ましいです。コメントやリプライ追加時に１つのモデルの更新だけですむからです。<br>\n<a href=\"https://camo.qiitausercontent.com/129a84bd908d87c7fcbda29704ad50ac10529129/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393361633065362d333137652d316364662d626662612d3133353331653234353562612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/129a84bd908d87c7fcbda29704ad50ac10529129/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393361633065362d333137652d316364662d626662612d3133353331653234353562612e706e67\" alt=\"db構造_良.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f93ac0e6-317e-1cdf-bfba-13531e2455ba.png\"></a></p>\n\n<p>ただ記事の検索は少し工夫が必要で、<strong>mongooseのvirtualを使います</strong>。これによって記事からコメントへの参照、コメントからリプライへの参照を擬似的に定義できるため、<br>\n検索時に擬似要素をpopulateするだけで、記事に紐付くコメントとリプライを取得できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/bd8d4eedcb08eeaca13290e8dc91b8b2e10c5dae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34616162376633382d316631392d653030622d623335642d3233626162663336613735622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/bd8d4eedcb08eeaca13290e8dc91b8b2e10c5dae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34616162376633382d316631392d653030622d623335642d3233626162663336613735622e706e67\" alt=\"mongoose virtualのイメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/4aab7f38-1f19-e00b-b35d-23babf36a75b.png\"></a></p>\n\n<p>具体的なソースコードを示します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">article.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">ArticleSchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">content</span><span class=\"p\">:</span> <span class=\"nb\">String</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">toJSON</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">virtuals</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"p\">});</span>\n\n\n<span class=\"c1\">// 記事に紐付くコメントモデルの配列をcommentsという擬似要素で定義する</span>\n<span class=\"nx\">ArticleSchema</span><span class=\"p\">.</span><span class=\"nx\">virtual</span><span class=\"p\">(</span><span class=\"s1\">'comments'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Comment'</span><span class=\"p\">,</span>\n  <span class=\"na\">localField</span><span class=\"p\">:</span> <span class=\"s1\">'_id'</span><span class=\"p\">,</span>\n  <span class=\"na\">foreignField</span><span class=\"p\">:</span> <span class=\"s1\">'articleId'</span><span class=\"p\">,</span>\n  <span class=\"na\">justOne</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Article</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Article'</span><span class=\"p\">,</span> <span class=\"nx\">ArticleSchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Article</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">comment.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">CommentSchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">articleId</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">.</span><span class=\"nx\">Types</span><span class=\"p\">.</span><span class=\"nx\">ObjectId</span><span class=\"p\">,</span>\n    <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Article'</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">comment</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">;</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">toJSON</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">virtuals</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"p\">});</span>\n\n<span class=\"c1\">// コメントに紐付くリプライモデルの配列をrepliesという擬似要素で定義する</span>\n<span class=\"nx\">CommentSchema</span><span class=\"p\">.</span><span class=\"nx\">virtual</span><span class=\"p\">(</span><span class=\"s1\">'replies'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Reply'</span><span class=\"p\">,</span>\n  <span class=\"na\">localField</span><span class=\"p\">:</span> <span class=\"s1\">'_id'</span><span class=\"p\">,</span>\n  <span class=\"na\">foreignField</span><span class=\"p\">:</span> <span class=\"s1\">'commentId'</span><span class=\"p\">,</span>\n  <span class=\"na\">justOne</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Comment</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Comment'</span><span class=\"p\">,</span> <span class=\"nx\">CommentSchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Comment</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">reply.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">ReplySchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">commentId</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">.</span><span class=\"nx\">Types</span><span class=\"p\">.</span><span class=\"nx\">ObjectId</span><span class=\"p\">,</span>\n    <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Comment'</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">reply</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Reply</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Reply'</span><span class=\"p\">,</span> <span class=\"nx\">ReplySchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Reply</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">検索処理</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">Article</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">()</span>\n<span class=\"p\">.</span><span class=\"nx\">populate</span><span class=\"p\">({</span>\n  <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"s1\">'comments'</span><span class=\"p\">,</span> <span class=\"c1\">// Articleモデルで定義した擬似要素commentsをpopulateする</span>\n  <span class=\"na\">populate</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"s1\">'replies'</span><span class=\"p\">,</span> <span class=\"c1\">// Commentモデルで定義した擬似要素repliesをpopulateする</span>\n  <span class=\"p\">}],</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"リクエストレスポンスのログ出力したい\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%81%AE%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>リクエスト、レスポンスのログ出力したい</h2>\n\n<p>Expressのuseにて実現します。<br>\nレスポンスオブジェクトのfinishイベントを監視することで、レスポンス時にログを出力しています。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">リクエストとレスポンスのログ出力　※ここでは簡単のためコンソールに出力しています</span></div>\n<div class=\"highlight\"><pre><span class=\"kd\">const</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n<span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"nx\">accessLogHandler</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n  <span class=\"c1\">// リクエスト時のログ　</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">([</span>\n    <span class=\"s1\">'start'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'x-forwarded-for'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span>\n    <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">referer</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'user-agent'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'--ms--'</span>\n  <span class=\"p\">].</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">',</span><span class=\"err\">\\</span><span class=\"s1\">t'</span><span class=\"p\">));</span>\n\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">once</span><span class=\"p\">(</span><span class=\"s1\">'finish'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"err\">　　</span> <span class=\"c1\">// レスポンス時のログ</span>\n    <span class=\"nx\">accessLogger</span><span class=\"p\">.</span><span class=\"nx\">info</span><span class=\"p\">([</span>\n      <span class=\"s1\">'end'</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'x-forwarded-for'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">referer</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'user-agent'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'--'</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">getMilliseconds</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"nx\">start</span><span class=\"p\">.</span><span class=\"nx\">getMilliseconds</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"s1\">'ms--'</span>\n    <span class=\"p\">].</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">',</span><span class=\"err\">\\</span><span class=\"s1\">t'</span><span class=\"p\">));</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">next</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<p>実際のログはこんな感じで出力されます。</p>\n\n<div class=\"code-frame\" data-lang=\"py3\"><div class=\"highlight\"><pre><span class=\"n\">start</span><span class=\"p\">,</span>  <span class=\"p\">::</span><span class=\"n\">ffff</span><span class=\"p\">:</span><span class=\"mf\">127.0</span><span class=\"o\">.</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">authenticate</span><span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"p\">,</span>   <span class=\"o\">-</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">4200</span><span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"n\">Mozilla</span><span class=\"o\">/</span><span class=\"mf\">5.0</span> <span class=\"p\">(</span><span class=\"n\">Macintosh</span><span class=\"p\">;</span> <span class=\"n\">Intel</span> <span class=\"n\">Mac</span> <span class=\"n\">OS</span> <span class=\"n\">X</span> <span class=\"mi\">10</span><span class=\"n\">_12_6</span><span class=\"p\">)</span> <span class=\"n\">AppleWebKit</span><span class=\"o\">/</span><span class=\"mf\">537.36</span> <span class=\"p\">(</span><span class=\"n\">KHTML</span><span class=\"p\">,</span> <span class=\"n\">like</span> <span class=\"n\">Gecko</span><span class=\"p\">)</span> <span class=\"n\">Chrome</span><span class=\"o\">/</span><span class=\"mf\">62.0</span><span class=\"o\">.</span><span class=\"mf\">3202.94</span> <span class=\"n\">Safari</span><span class=\"o\">/</span><span class=\"mf\">537.36</span><span class=\"p\">,</span> <span class=\"o\">--</span><span class=\"n\">ms</span><span class=\"o\">--</span>\n<span class=\"n\">end</span><span class=\"p\">,</span>    <span class=\"p\">::</span><span class=\"n\">ffff</span><span class=\"p\">:</span><span class=\"mf\">127.0</span><span class=\"o\">.</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"p\">,</span>                  <span class=\"mi\">403</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">4200</span><span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"n\">Mozilla</span><span class=\"o\">/</span><span class=\"mf\">5.0</span> <span class=\"p\">(</span><span class=\"n\">Macintosh</span><span class=\"p\">;</span> <span class=\"n\">Intel</span> <span class=\"n\">Mac</span> <span class=\"n\">OS</span> <span class=\"n\">X</span> <span class=\"mi\">10</span><span class=\"n\">_12_6</span><span class=\"p\">)</span> <span class=\"n\">AppleWebKit</span><span class=\"o\">/</span><span class=\"mf\">537.36</span> <span class=\"p\">(</span><span class=\"n\">KHTML</span><span class=\"p\">,</span> <span class=\"n\">like</span> <span class=\"n\">Gecko</span><span class=\"p\">)</span> <span class=\"n\">Chrome</span><span class=\"o\">/</span><span class=\"mf\">62.0</span><span class=\"o\">.</span><span class=\"mf\">3202.94</span> <span class=\"n\">Safari</span><span class=\"o\">/</span><span class=\"mf\">537.36</span><span class=\"p\">,</span>  <span class=\"o\">--</span><span class=\"mi\">47</span><span class=\"n\">ms</span><span class=\"o\">--</span>\n</pre></div></div>\n\n<h2>\n<span id=\"ログ出力でオブジェクトの全プロパティを出力したい\" class=\"fragment\"></span><a href=\"#%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E3%81%A7%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%85%A8%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%82%92%E5%87%BA%E5%8A%9B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>ログ出力でオブジェクトの全プロパティを出力したい</h2>\n\n<p>オブジェクトの中身をログで確認する時はNode.jsの<code>util.inspect()</code>を使います。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre><span class=\"kd\">const</span> <span class=\"nx\">util</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'util'</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">myObject</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"s2\">\"a\"</span><span class=\"p\">:</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span>\n   <span class=\"s2\">\"b\"</span><span class=\"p\">:{</span>\n      <span class=\"s2\">\"c\"</span><span class=\"p\">:</span><span class=\"s2\">\"c\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"d\"</span><span class=\"p\">:{</span>\n         <span class=\"s2\">\"e\"</span><span class=\"p\">:</span><span class=\"s2\">\"e\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"f\"</span><span class=\"p\">:{</span>\n            <span class=\"s2\">\"g\"</span><span class=\"p\">:</span><span class=\"s2\">\"g\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"h\"</span><span class=\"p\">:{</span>\n               <span class=\"s2\">\"i\"</span><span class=\"p\">:</span><span class=\"s2\">\"i\"</span>\n            <span class=\"p\">}</span>\n         <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">};</span> \n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">util</span><span class=\"p\">.</span><span class=\"nx\">inspect</span><span class=\"p\">(</span><span class=\"nx\">myObject</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">));</span>\n</pre></div></div>\n\n<p>このようなログが出力されます</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>{ a: 'a', b: { c: 'c', d: { e: 'e', f: [Object] } } }\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/10729276/how-can-i-get-the-full-object-in-node-jss-console-log-rather-than-object\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"環境変数で上書きできる定数を定義したい\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%81%A7%E4%B8%8A%E6%9B%B8%E3%81%8D%E3%81%A7%E3%81%8D%E3%82%8B%E5%AE%9A%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>環境変数で上書きできる定数を定義したい</h2>\n\n<p>例えばサーバのポートなど環境個別に設定したくなるようなものは<br>\n環境変数で上書きできる定数にしておくと便利です。<br>\nNode.jsではprocess.env.変数名で環境変数が参照できるので下記のようにします。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">定数定義</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_PORT</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">SERVER_PORT</span> <span class=\"o\">||</span> <span class=\"s1\">'3000'</span><span class=\"p\">;</span><span class=\"err\">　</span><span class=\"c1\">// 環境変数SERVER_PORTが未指定の場合は3000となる</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_HOST</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">SERVER_HOST</span> <span class=\"o\">||</span> <span class=\"s1\">'localhost'</span><span class=\"p\">;</span> <span class=\"c1\">// 環境変数SERVER_HOSTが未指定の場合はlocalhostとなる</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"db初回アクセスに失敗した場合にリトライされない\" class=\"fragment\"></span><a href=\"#db%E5%88%9D%E5%9B%9E%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%AB%E5%A4%B1%E6%95%97%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AB%E3%83%AA%E3%83%88%E3%83%A9%E3%82%A4%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>DB初回アクセスに失敗した場合にリトライされない</h2>\n\n<p>mongooseを使っていると、DB初回接続時にエラーが起きた時に、なぜか再接続処理してくれません。<br>\nDockerでアプリを配布する場合、アプリとMongoDBをdocker-composeで同時に立ち上げることがあると思いますが、まだMongoDBが起動しきってない状態でアプリからDBに接続しようとすると、アプリが異常終了してしまいます。これを防ぐには自力で再接続処理を実装する必要があります。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre><span class=\"kd\">function</span> <span class=\"nx\">createConnection</span> <span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">createConnection</span><span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">(</span><span class=\"sr\">/failed to connect to server .* on first connect/</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(),</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">));</span>\n\n            <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Retrying first connect...\"</span><span class=\"p\">);</span>\n                <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">openUri</span><span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">).</span><span class=\"k\">catch</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n            <span class=\"c1\">// 20秒後に再接続する</span>\n            <span class=\"p\">},</span> <span class=\"mi\">20</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(),</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">once</span><span class=\"p\">(</span><span class=\"s1\">'open'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Connection to db established.\"</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">db</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/Automattic/mongoose/issues/5169\" rel=\"nofollow noopener\" target=\"_blank\">Github mongooseのissue5169</a></li>\n</ul>\n","body":"[FUJITSU Advent Calendar 2017](https://qiita.com/advent-calendar/2017/fujitsu) 12日目の記事です。\n\nリッチでイマドキなデザインのアプリが作りたくて、\nここ４ヶ月ほど**MEAN**スタック(**M**ongoDB+**E**xpress+**A**ngular+**N**ode.js)でブログアプリを作っています。\n知識ゼロからのスタートでしたが、多くの方々がブログやStackOverFlowに情報を載せてくれているので、躓きながらもなんとかアプリ開発を進めることができました。\n\nこの記事では、フロントエンド初心者の自分がMEANスタックでアプリを作る時に躓いたことや、こういう機能を実現するにはどうすればいいか?などをまとめています。\nこれからをAngularを学ぼうとしている方、ExpressやMongoDBなどサーバーサイドJavaScriptを学ぼうとしている方の参考になればうれしいです。\n\n## アプリの紹介\n本線から脱線しますが、イントラでの使用を想定したQiitaのようなブログアプリです。デモ環境もあるのでよければ触ってみてください(モバイルには未対応ですが。。。)\n\n* [Github](https://github.com/Takumon/mean-blog)\n* [Dockerhub](https://hub.docker.com/r/takumon/mean-blog_auto/)\n* [デモ環境](https://material-blog-demo.herokuapp.com/) (ユーザID/パスは DemoUser / DemoUser1234# です)\n\nアプリキャプチャ その１ (記事詳細)\n![appdemo_detail.png](https://qiita-image-store.s3.amazonaws.com/0/49915/b8133317-fac2-bb9b-8f2d-13db896becf5.png)\n\nアプリキャプチャ その２ (記事一覧)\n![アプリ_スクリーンキャプチャ_記事一覧.png](https://qiita-image-store.s3.amazonaws.com/0/49915/950d1062-1ba4-63f6-fe53-cfe6d46430a4.png)\n\nアプリキャプチャ その３ (プロフィール)\n![アプリ_スクリーンキャプチャ_ ユーザ画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/325c7948-ce16-9c08-0b66-d3892e046aed.png)\n\n# 1. フロント側Angularまわり\n## Angularについて調べる時に古い情報を除外したい\n1系は`AngularJS`、2系以降は`Angular`と呼ばれており、1系と2系以降では大きく仕様が異なります。\nそのため検索する時は`Angualr2`などバージョンを指定したり、1系を除外するため\u001e`--AngularJS`をつけたり\u001dすると検索しやすいです。\n\n## HTMLのDOM\b要素を、別のDOM要素またはComponentから扱いたい\n要素に`#xxxxx`\bのように`#`始まりの名前をつけると、別の\bDOM要素から参照できます\n\n```html:HTML\n<input #phone placeholder=\"電話番号\"/>\n<!--  他のDOM要素からphonという変数名でDOM要素を参照できるようになる -->\n<button >(click)=\"callPhone\b(phone.value)\">\n```\n\n\bComponentから参照する場合は`@ViewChild`を使います\n\n```typescript:Component\n  // \bViewChildの引数に\b\b名前を文字列で指定します\n  @ViewChild('phone') phoneElement: phoneElement;\n\n  showPhoneValue() {\n    console.log(this.phoneElement.value);\n    )\n  }\n```\n\n\b**参考サイト**\n\n* [Angular公式サイト](https://angular.io/guide/template-syntax#ref-vars)\n* [StackOverFlow](https://stackoverflow.com/questions/32693061/how-can-i-select-an-element-in-a-component-template)\n\n\n\n## Routing時の認証を非同期で行いたい\nURLごとの認証は`CanActivate`インターフェースを実装すればできますが、\nサーバから認証情報を取得して非同期で認証したい場合もあると思います。\nそのような時は、**`CanActivate#canActivate`で**booleanの代わりに**Observable<boolean>を戻り値に指定する**ことで実現できます。\n\n\n```typescript:SampleAuthGuard\nimport { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs/Rx';\n\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable()\nexport class SampleAuthGuard implements CanActivate {\n\n  constructor(\n    private auth: AuthenticationService,\n  ) { }\n\n  // booleanではなくObservable<boolean>を戻り値で返す\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.auth.checkState()\n      .map(res => true)\n      .catch(err => Observable.of(false))\n  }\n}\n\n```\n\n\b**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/38425461/angular2-canactivate-calling-async-function)\n\n## FormArrayの値を初期化したい\nFormControlはpatchValueで初期値を設定できますが、\nFormArrayの場合patch\bValueで配列の値を設定しようと\bしても設定できません。\n\bこういう場合は、**\b\b配列1つ１つの値をもとにFormControlを生成してFormArrayにpush**します。\n\n```typescript:ダメな例\nngOnInit() {\n  // Form生成\n  this.form = this.formBuilder.group({\n    schoolName: '',\n    students: this.formBuilder.array([])\n  });\n\n  // Formに初期値を設定\n  this.form.pathValue({\n    schooleName: 'SampleSchoolName' // FormControlの値の初期化はpatchValueで可能\n    students: ['taro', 'jiro', 'saburo']; // FormArrayに要素を追加する場合patchValueでは不可能\n  });\n}\n```\n\n```typescript:\b良い例\nngOnInit() {\n  // Formを生成\n  this.form = this.formBuilder.group({\n    schoolName: '',\n    students: this.formBuilder.array([])\n  });\n\n  // Formに初期値を設定\n  this.form.pathValue({\n    schooleName: 'SampleSchoolName'\n  });\n\n  // データからFormControlを生成し１件１件FormArrayにpushする\n  ['taro', 'jiro', 'saburo'].forEach(student -> {\n    this.form.controls['students'].push(new FormControll(student));\n  });\n}\n```\n\n\b**参考サイト**\n\n* [StackOvereFlow](https://stackoverflow.com/questions/40916084/angular2-patchvalue-push-value-into-array)\n\n## 「ERROR Error: No provider for TemplateRef!」というエラー\n最初このエラーが出た時は、何が原因なのかわからずに困りました。。。\n大抵の場合は、**`*ngIf`や`*ngForm`の`*`が抜けてることが原因**です(要するにただのタイポです。。。)\n`*`が抜けると、Angularは`ngIf`をディレクティブとして解釈しようとしますが、\n\bそんな\b\bディレクティブは存在しないので`No provider for TemplateRef!`と言われてしまうそうです。\n\n\b**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/35932074/angular2-no-provider-for-templateref-ngif-templateref)\n\n\n## textareaにおいてTabキーでインデントしたい\n文書を入力するようなテキストエリアの場合に、\u001dTabキーでのインデントしたい場合は、\n\bkyedownイベント発生時に\bテキストエリアの値とキャレットの位置を操作することで実現可能です。\n\n```html:HTML\n<textarea #sampletextarea\n  (keydown)=\"indent($event, sampletextarea)\" ></textarea>\n```\n\n```typescript:Component\n  indent($event, sampleTextAreaElement) {\n    // Tabキー押下時\n    if ($event.keyCode === 9) {\n      \b// 次の要素に\bフォーカスが移らないようにする\n      $event.preventDefault();\n\n      // 現在のキャレット位置を取得\n      \bconst caretStart = textareaElement.selectionStart;\n      const caretEnd = textareaElement.selectionEnd;\n\n      // テキストエリアの値を\b取得し、キャレット位置にTabを挿入\n      const TAB = '¥t';\n      sampleTextAreaElement.value = sampleTextAreaElement.value.substring(0, caretStart)\n                     + TAB + sampleTextAreaElement.value.substring(caretStart, value.length);\n\n      // キャレット位置をTab分ずらす\n      sampleTextAreaElement.focus();\n      sampleTextAreaElement.setSelectionRange(caretStart + TAB.length, caretEnd + TAB.length);\n\n      return;\n    }\n  }\n\n```\n\n\n\n## \bMarkdownプレビューを\b表示したい、ソースコードはシンタックスハイライトさせたい\n[marked](https://github.com/chjj/marked)と[highlight.js](https://github.com/isagalaev/highlight.js)を組み合わせて使います。\n[marked](https://github.com/chjj/marked)のReadmeを見ればなんとなくわかりますが、Angularの仕組みに乗せる必要があるのでPipeやらServiceやらを作ります。\n\n```typescript:markdown-parse.service.ts\nimport { Injectable } from '@angular/core';\nimport marked from 'marked';\nimport hljs from 'highlight.js';\n\n\n@Injectable()\nexport class MarkdownParseService {\n\n  constructor() {\n    marked.setOptions({\n      highlight: function (code) {\n        return hljs.highlightAuto(code).value;\n      }\n    });\n  }\n\n  parse(rawText: string) {\n    return marked(rawText);\n  }\n}\n```\n\n\n```typescript:markdown.pipe.ts\nimport marked from 'marked';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { MarkdownParseService } from './markdown-parse.service';\n\n@Pipe({ name: 'toMarkdown' })\nexport class MarkdownParsePipe implements PipeTransform {\n  constructor(markdownParseService: MarkdownParseService) {}\n\n  transform(value: string): any {\n    return this.markdownParseService.parse(value);\n  }\n}\n```\n\nHTMLで下記のように指定します。`{{}}`だと\bサニタイズされてしまうので\b`innerHTML`属性を指定します。\n\n```html\n<div [innerHTML]=\"md | toMarkdown\"></div>\n```\n\n\n\b**参考サイト**\n\n* [Qiita AngularでMarkdownをHTMLとして表示するカスタムpipeを作成する](https://qiita.com/daikiojm/items/e02e2aeb0231b3620a0b)\n* Github [chjj/marked](https://github.com/chjj/marked)\n\n\n\n\n## 絞り込み条件付きリストにおいて、リストの要素が\b変更、追加\b、削除された時に絞り込み結果をリフレッシュしたい\nリストの絞り込みはPipeで実現しますが、通常Pipeはリストの要素が変更されても再び絞り込みが実施されることはありません。\nこのような場合はPipeアノテーションにて**pureオプションをfalseに設定**ましょう。\n\n```html:HTML\n<input type=\"text\" #searchUserName>\n<ul>\n  <li *ngFor=\"let user of (userList | searchUserFilter: searchUserName.value);\" >{{user.name}}</li>\n<ul>\n```\n\n```typescript:search-user.pipe.ts\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { User } from './user';\n\n@Pipe({\n  name: 'searchUserFilter',\n  pure: false // pureをfalseにすることでユーザが変更、追加、削除された時にリフレッシュできる\n})\nexport class SearchFilterPipe implements PipeTransform {\n  transform(items: Array<User>, searchUserName: string): any[] {\n    if (!searchUserName) return items;\n\n    searchUserName = searchUserName.toLowerCase();\n    return items.filter( item => item.user.userId.toLowerCase().includes(searchUserName));\n  }\n}\n```\n\n\b**参考サイト**\n\n* [Angular公式サイト](https://angular.io/guide/pipes#pure-and-impure-pipes)\n\n\n\n\n## グローバル定数を定義したい\nいろんなクラスで使う定数を\b共通\b化する時は、単純に**クラスを作ってstaticなメンバとして定数を定義**します。\n\n```typescript:app-settings.ts\nexport class AppSettings {\n   public static API_ENDPOINT='http://127.0.0.1:6666/api/';\n}\n```\n\n```typescript:SampleService\nimport {Injectable} from 'angular2/core';\nimport {AppSettings} from './app-settings';\n\n@Injectable()\nexport class SampleService {\n    \bsampleMethod() {\n      console.log(AppSettings.API_ENDPOINT);\n    }\n}\n```\n\n**参考**\n\n* [StackOverFlow](https://stackoverflow.com/questions/34986922/define-global-constants-in-angular-2)\n\n\n## 画像が多い画面の初期表示を早くしたい\n[ng-lazyload-image](https://github.com/tjoskar/ng-lazyload-image)を使えば画像の遅延ロードを実現できます。\n使い方もとても簡単でimgタグにディレクティブを指定するだけです。\n\n```html:HTML\n <img\n  [defaultImage]=\"https://images.sample.com/photo/defaultimage\" \n  [lazyLoad]=\"https://images.sample.com/photo/sampleimage\"\n  [offset]=\"30\"\n >\n```\n\n*defaultImage*\n　即時ロードされる画像のURL、遅延ロードする画像を読み込む間、表示される\n*lazyLoad*\n　遅延ロードする画像のURL\n*offset*\n　スクロールが発生する場合に画面下部の何ピクセル下に来た時にロードを開始するか\n*errorImage*\n　遅延ロード失敗時に表示する画像URL\n\n**参考サイト**\n\n* [ng-lazyload-image](https://github.com/tjoskar/ng-lazyload-image)\n\n\n## Angular Cliの`ng serve`コマンドでdistフォルダを一旦削除したくない\n`ng serve`コマンドは`dist`フォルダを削除してからtsファイルをトランスコンパイルします。\nそれを防ぐためには、**delete-output-pathオプションをfalse**に指定します。\n\n```json:package.json　ビルドスクリプト\n\"script\": {\n  \"build\": \"cp ./resource/* dist && ng serve --delete-output-path=false\"\n}\n```\n\n\b**参考サイト**\n\n* [angular-cli github issue #4366](https://github.com/angular/angular-cli/issues/4366)\n\n\n## AOTコンパイルが遅いのでなんとかしたい\nなんとかできませんでした。。。(もしかしたら方法があるのかもしれません。誰か教えてください!!!)\nAOTコンパイルはJITコンパイルが検出してくれないHTMLのエラーを警告してくれますが、その反面遅いです。特に[Angular Material](https://material.angular.io/)を使う場合は顕著です。\nそのため、自分の場合は基本的にJITビルドを使い、issueのプルリクをする前など区切りのいいタイミングでAOTビルドしてエラーがないか確認するというように使い分けてました。\n\n\n# 2. フロント側Angularでのテスト周り\n## CI環境などでテストが終わらずにタイムアウトしてしまう\nCirleCiなどでテストを実行する場合`ng test`コマンドだとプロセスが終了しないためタイムアウトで失敗してしまいます。\nこのような場合は**watchオプションをfalseに設定**します。\n\n```\nng test --wtach=false\n```\n\n**参考サイト**\n[Github isssue](https://github.com/angular/angular-cli/issues/362)\n\n## テスト時に「Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.」や「Failed to execute 'send' on 'XMLHttpRequest'」のエラー\nこのような場合は、一時的に`ng test`コマンドのオプションに**`-sm=false`を追加**してテストし直すと根本原因エラーメッセージで出力されるようになります。\n大抵の場合は自作したモッククラスに必要なメソッドがないことが原因です。\n\n\b**参考サイト**\n\n* [stackOverFlow](https://stackoverflow.com/questions/45399079/angular-tests-failing-with-failed-to-execute-send-on-xmlhttprequest)\n\n\n## テスト用に子コンポーネントをモック化したい\n意外と簡単で、TestBed#configureTestingModuleで\ndeclarationsに自作したモックの子コンポーネントを追加するだけです。\ninput,outputがあれば必要に応じてメンバ定義します。\n\n\n```typescript\n// ※import文は省略\n\n// モックの子コンポーネントを定義\n@Component({\n  selector: 'app-child', // 子コンポーネントと同じものを定義\n  template: '<p>Mock Child Component</p>'\n})\nclass MockClildComponent {\n  @Input() childInput: string;\n  @Output() childOutput = new EventEmitter();\n}\n\n// ...\n\nbeforeEach(() => {\n  TestBed.configureTestingModule({\n    declarations: [\n      // テスト時のdeclarationsにモックの定義を追加\n      MockProductSettingsComponent,\n      // ...\n    ],\n    // ...\n  });\n  // ...\n});\n```\n\n\b**参考サイト**\n\n* [stackOverFlow](https://stackoverflow.com/questions/41240163/mocking-child-components-angular-2)\n\n\n## テスト結果にAngular Materilaのスタイルが反映されない\nUIフレームワークで[Angular Material](https://material.angular.io/)を使っている場合、\n`karma.config.js`でAngular Materilaのcssを直接読み込んであげる必要あります。\n\n```javascript:karma.conf.js\nfiles: [\n      ・・・\n      // Angular Materialのスタイルをテスト開始時に読み込んでおく\n      {pattern: './node_modules/@angular/material/prebuilt-themes/indigo-pink.css', included: true, watched: false},\n],\n```\n\n**参考サイト**\n\n* [stackoverflow](https://github.com/angular/material2/issues/4056)\n\n\n## テスト結果にstyles.scss(アプリ共通のスタイル定義)のスタイルが反映されない\nアプリ共通スタイルをSASS形式にしている場合\n開発用ライブライに`karma-scss-preprocessor`と`node-sass`を追加して`karma.conf.js`を下記のように設定します。\n\n```javascript:karma.conf.js\nplugins: [\n  ・・・\n　 // プラグインに`karma-scss-preprocessor`を追加\n  require('karma-scss-preprocessor')\n],\n\n\nfiles: [\n  ・・・\n  // filesにアプリ共通スタイルを追加\n  { pattern: './src/styles.scss', watched: false,  included: true, served: true }\n],\n\n// preprocessorsを追加\npreprocessors: {\n './src/test.ts': ['@angular/cli'],\n './src/styles.scss': ['scss']\n},\n```\n\n\b**参考サイト**:\n\n* [stackOverFlow](https://stackoverflow.com/questions/44460733/how-to-configure-karma-to-include-global-scss-files-for-an-angular-cli-project/44498689#44498689)\n* [Github karma/issue/2700](https://github.com/karma-runner/karma/issues/2700)\n\n\n\n\n# 3. バックエンド側 Express、MongoDB周り\n※MongDBをNode.jsで扱う場合は[mongoose](https://github.com/Automattic/mongoose)という便利なライブラリがあるのでそれを使う前提のお話です。\n\n## mongooseのvirtualメソッドを使う\n例えば`記事`,`コメント`,`リプライ`などのモデルを定義する場合、\n３つのモデルのライフサイクルは、記事追加 => 記事に対するコメント追加 => コメントに対するリプライ追加　のようになります。\nこのような場合は、コメントが記事の参照を持ち、リプライがコメントの参照を持つモデル構造が望ましいです。コメントやリプライ追加時に１つのモデルの更新だけですむからです。\n![db構造_良.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f93ac0e6-317e-1cdf-bfba-13531e2455ba.png)\n\nただ記事の検索は少し工夫が必要で、**mongooseのvirtualを使います**。これによって記事からコメントへの参照、コメントからリプライへの参照を擬似的に定義できるため、\n検索時に擬似要素をpopulateするだけで、記事に紐付くコメントとリプライを取得できるようになります。\n![mongoose virtualのイメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/4aab7f38-1f19-e00b-b35d-23babf36a75b.png)\n\n具体的なソースコードを示します。\n\n```typescript:article.model.ts\nimport * as mongoose from 'mongoose';\n\nconst ArticleSchema = new mongoose.Schema({\n  content: String\n}, { toJSON: { virtuals: true } });\n\n\n// 記事に紐付くコメントモデルの配列をcommentsという擬似要素で定義する\nArticleSchema.virtual('comments', {\n  ref: 'Comment',\n  localField: '_id',\n  foreignField: 'articleId',\n  justOne: false,\n});\n\nconst Article = mongoose.model('Article', ArticleSchema);\n\nexport { Article };\n```\n\n\n```typescript:comment.model.ts\nimport * as mongoose from 'mongoose';\n\nconst CommentSchema = new mongoose.Schema({\n  articleId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Article',\n  },\n  comment: String;\n}, { toJSON: { virtuals: true } });\n\n// コメントに紐付くリプライモデルの配列をrepliesという擬似要素で定義する\nCommentSchema.virtual('replies', {\n  ref: 'Reply',\n  localField: '_id',\n  foreignField: 'commentId',\n  justOne: false,\n});\n\nconst Comment = mongoose.model('Comment', CommentSchema);\n\nexport { Comment };\n```\n\n```typescript:reply.model.ts\nimport * as mongoose from 'mongoose';\n\nconst ReplySchema = new mongoose.Schema({\n  commentId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Comment'\n  },\n  reply: String;\n});\n\nconst Reply = mongoose.model('Reply', ReplySchema);\n\nexport { Reply };\n```\n\n```typescript:検索処理\nArticle.find()\n.populate({\n  path: 'comments', // Articleモデルで定義した擬似要素commentsをpopulateする\n  populate: [{\n    path: 'replies', // Commentモデルで定義した擬似要素repliesをpopulateする\n  }],\n});\n```\n\n\n## リクエスト、レスポンスのログ出力したい\nExpressのuseにて実現します。\nレスポンスオブジェクトのfinishイベントを監視することで、レスポンス時にログを出力しています。\n\n\n```javascript:リクエストとレスポンスのログ出力　※ここでは簡単のためコンソールに出力しています\nconst express = express();\nexpress.use(function accessLogHandler (req, res, next) {\n  const start = new Date();\n  // リクエスト時のログ　\n  console.log([\n    'start',\n    req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n    req.method,\n    req.url,\n    '-',\n    req.headers.referer || '-',\n    req.headers['user-agent'] || '-',\n    '--ms--'\n  ].join(',\\t'));\n\n  res.once('finish', function() {\n　　 // レスポンス時のログ\n    accessLogger.info([\n      'end',\n      req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n      req.method,\n      req.url,\n      res.statusCode,\n      req.headers.referer || '-',\n      req.headers['user-agent'] || '-',\n      '--' + (new Date().getMilliseconds() - start.getMilliseconds()) + 'ms--'\n    ].join(',\\t'));\n  });\n\n  next();\n});\n```\n\n実際のログはこんな感じで出力されます。\n\n```py3\nstart,  ::ffff:127.0.0.1, GET, /api/authenticate/check-state,   -, http://localhost:4200/, Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36, --ms--\nend,    ::ffff:127.0.0.1, GET, /check-state,                  403, http://localhost:4200/, Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36,  --47ms--\n```\n\n\n\n## ログ出力でオブジェクトの全プロパティを出力したい\nオブジェクトの中身をログで確認する時はNode.jsの`util.inspect()`を使います。\n\n\n```javascript\nconst util = require('util');\nconst myObject = {\n   \"a\":\"a\",\n   \"b\":{\n      \"c\":\"c\",\n      \"d\":{\n         \"e\":\"e\",\n         \"f\":{\n            \"g\":\"g\",\n            \"h\":{\n               \"i\":\"i\"\n            }\n         }\n      }\n   }\n}; \n\nconsole.log(util.inspect(myObject, false, null));\n```\n\nこのようなログが出力されます\n\n```\n{ a: 'a', b: { c: 'c', d: { e: 'e', f: [Object] } } }\n```\n\n**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/10729276/how-can-i-get-the-full-object-in-node-jss-console-log-rather-than-object)\n\n\n## 環境変数で上書きできる定数を定義したい\n例えばサーバのポートなど環境個別に設定したくなるようなものは\n環境変数で上書きできる定数にしておくと便利です。\nNode.jsではprocess.env.変数名で環境変数が参照できるので下記のようにします。\n\n```typescript:定数定義\nexport const SERVER_PORT: string = process.env.SERVER_PORT || '3000';　// 環境変数SERVER_PORTが未指定の場合は3000となる\nexport const SERVER_HOST: string = process.env.SERVER_HOST || 'localhost'; // 環境変数SERVER_HOSTが未指定の場合はlocalhostとなる\n```\n\n\n## DB初回アクセスに失敗した場合にリトライされない\nmongooseを使っていると、DB初回接続時にエラーが起きた時に、なぜか再接続処理してくれません。\nDockerでアプリを配布する場合、アプリとMongoDBをdocker-composeで同時に立ち上げることがあると思いますが、まだMongoDBが起動しきってない状態でアプリからDBに接続しようとすると、アプリが異常終了してしまいます。これを防ぐには自力で再接続処理を実装する必要があります。\n\n```javascript\nfunction createConnection (dbURL, options) {\n    var db = mongoose.createConnection(dbURL, options);\n\n    db.on('error', function (err) {\n        if (err.message && err.message.match(/failed to connect to server .* on first connect/)) {\n            console.log(new Date(), String(err));\n\n            setTimeout(function () {\n                console.log(\"Retrying first connect...\");\n                db.openUri(dbURL).catch(() => {});\n            // 20秒後に再接続する\n            }, 20 * 1000);\n        } else {\n            console.error(new Date(), String(err));\n        }\n    });\n\n    db.once('open', function () {\n        console.log(\"Connection to db established.\");\n    });\n\n    return db;\n}\n```\n\n**参考サイト**\n\n* [Github mongooseのissue5169](https://github.com/Automattic/mongoose/issues/5169)\n\n","comments_count":0,"created_at":"2017-12-12T03:19:11+09:00","likes_count":46,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/270e2fae-ed90-5539-8c90-a2ed93ebba83/","title":"Fessを使用して、Asciidoctorで簡単に全文検索できるようにする","date":"2017-06-26T00:21:37+09:00","excerpt":"Asciidoctorを使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。そこで今回は、Dockerで...","tags":["JavaScript","全文検索","ドキュメント","Fess","asciidoctor","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"270e2fae-ed90-5539-8c90-a2ed93ebba83","title":"Fessを使用して、Asciidoctorで簡単に全文検索できるようにする","rendered_body":"<p><a href=\"http://asciidoctor.org/\" rel=\"nofollow noopener\" target=\"_blank\">Asciidoctor</a>を使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。</p>\n\n<p>そこで今回は、Dockerで全文検索サーバの<a href=\"http://fess.codelibs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Fess</a>を立てて、<br>\nドキュメントからJavaScript経由でFessのJSON APIを呼び出すことで、<br>\n全文検索を簡単に導入する方法をご紹介します。</p>\n\n<p>導入するとドキュメントの右上に検索窓が出てきて全文検索できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/e020d2b6619c0b7ce4332c80ea15b89a6efb895e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31323365633737312d666237372d653464632d646637652d6134623430373739323735392e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e020d2b6619c0b7ce4332c80ea15b89a6efb895e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31323365633737312d666237372d653464632d646637652d6134623430373739323735392e676966\" alt=\"6月-24-2017 19-05-32.gif\" title=\"6月-24-2017 19-05-32.gif\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/123ec771-fb77-e4dc-df7e-a4b407792759.gif\"></a></p>\n\n<h2>\n<span id=\"fessとは\" class=\"fragment\"></span><a href=\"#fess%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Fessとは</h2>\n\n<p><a href=\"http://fess.codelibs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Fess</a>は<strong>「5 分で簡単に構築可能な全文検索サーバー」</strong>です。<br>\nJavaベースで構築されており、Apacheライセンスで提供されるオープンソース製品で、無料で使用できます。<br>\n自分でクローラを設定して、自分だけの検索エンジンがつくれるようなイメージです。<br>\nデフォルトで検索画面を提供していますが、JSON APIも提供しているので、様々なシステムと連携可能です。</p>\n\n<h2>\n<span id=\"全体像\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E4%BD%93%E5%83%8F\"><i class=\"fa fa-link\"></i></a>全体像</h2>\n\n<p>ドキュメント用Webサーバに全文検索用のJavaScriptファイルとCSSファイルを追加し、Dockerで全文検索用のFessサーバを立てます。<br>\nFessサーバはドキュメント用Webサーバをクロールし、その情報を保存しておきます。<br>\nドキュメントで全文検索を実施すると、JavaScript経由でFessサーバのJSON AIPを呼び出して、全文検索結果をドキュメントに表示します。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/6fe043176da6b6451722114a3d0418bc40ac8c99/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31306338616334362d323135352d386562372d613565642d3763313363653534346563322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/6fe043176da6b6451722114a3d0418bc40ac8c99/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31306338616334362d323135352d386562372d613565642d3763313363653534346563322e706e67\" alt=\"0_Fess_全体像_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/10c8ac46-2155-8eb7-a5ed-7c13ce544ec2.png\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/729e46c74903de7be597a6ac4adea0c03cd8559f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34306531643435362d323633352d326165642d333333642d3862316165633434373933312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/729e46c74903de7be597a6ac4adea0c03cd8559f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34306531643435362d323633352d326165642d333333642d3862316165633434373933312e706e67\" alt=\"0_Fess_全体像_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/40e1d456-2635-2aed-333d-8b1aec447931.png\"></a></p>\n\n<h2>\n<span id=\"導入手順\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>導入手順</h2>\n\n<p>この導入手順は、下記のような環境（ローカルPCのDocker上にドキュメント用WebサーバとFessサーバが立っている環境）を作った時のものです。<br>\nDockerを使わなくても、ローカルPC以外でも、導入可能です。導入手順は適宜読み替えてください。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/a94911642557c486b240ffa8c3c184c64bfabc2c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30626164623864322d316135382d323262362d343537632d3132626563663361383931312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a94911642557c486b240ffa8c3c184c64bfabc2c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30626164623864322d316135382d323262362d343537632d3132626563663361383931312e706e67\" alt=\"0_Fess_全体像_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/0badb8d2-1a58-22b6-457c-12becf3a8911.png\"></a></p>\n\n<h3>\n<span id=\"fessのインストール\" class=\"fragment\"></span><a href=\"#fess%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>Fessのインストール</h3>\n\n<p>Docker Hubの<a href=\"https://hub.docker.com/r/codelibs/fess/\" rel=\"nofollow noopener\" target=\"_blank\">codelibs/fess</a>を使用します。今回ポートは10084で公開します。<br>\nDockerを使わない場合は<a href=\"http://fess.codelibs.org/ja/11.2/install/index.html\" rel=\"nofollow noopener\" target=\"_blank\">Fess インストールガイド</a>を参考にしてください。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ docker run -d -p 10084:8080 --name fess codelibs/fess:latest\n</pre></div></div>\n\n<h3>\n<span id=\"fessの設定\" class=\"fragment\"></span><a href=\"#fess%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>Fessの設定</h3>\n\n<h4>\n<span id=\"クローラの設定\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>クローラの設定</h4>\n\n<p><code>http://[PCのローカルIPアドレス]:10084/login</code>にアクセスするとログイン画面が表示されます。<br>\nデフォルトのID/PASS　<code>admin/admin</code>でログインしましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/d173fd5ce7a76eb7b5a6ef053a670dd6551d720c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65373930656361392d353037332d393438652d336534332d6437353436643537666165352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d173fd5ce7a76eb7b5a6ef053a670dd6551d720c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65373930656361392d353037332d393438652d336534332d6437353436643537666165352e706e67\" alt=\"1_Fess管理者_ログイン画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/e790eca9-5073-948e-3e43-d7546d57fae5.png\"></a><br>\n<br></p>\n\n<p>ログインするとダッシュボードが表示されます。左ペインの<code>クローラ</code> &gt; <code>Web</code>　を選択しましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/cbfee37bd5d06381615f013da8587b1af91c35aa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61636662653935302d666137342d643063622d336365652d3565386462346465356237342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/cbfee37bd5d06381615f013da8587b1af91c35aa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61636662653935302d666137342d643063622d336365652d3565386462346465356237342e706e67\" alt=\"2_Fess管理者_ダッシュボード.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/acfbe950-fa74-d0cb-3cee-5e8db4de5b74.png\"></a><br>\n<br></p>\n\n<p>Webクローラにはまだ何も登録されていないので、左上の<code>+　新規作成</code>ボタンをクリックしましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/e60be4a90df24cb1275c165752de363b15859b87/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36333130333762342d616162322d386530642d663961612d3364323365633931376132392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e60be4a90df24cb1275c165752de363b15859b87/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36333130333762342d616162322d386530642d663961612d3364323365633931376132392e706e67\" alt=\"3_Fess管理者_Webクロール設定_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/631037b4-aab2-8e0d-f9aa-3d23ec917a29.png\"></a><br>\n<br></p>\n\n<p>Webクロール情報入力画面が表示されます。<br>\n<a href=\"https://camo.qiitausercontent.com/62cd6f97bb7dfebb163873f26b5fda4fabcf89c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653561303963392d376363652d336665632d373838342d3132353863333266613931612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/62cd6f97bb7dfebb163873f26b5fda4fabcf89c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653561303963392d376363652d336665632d373838342d3132353863333266613931612e706e67\" alt=\"3_Fess管理者_Webクロール設定_2.png\" title=\"3_Fess管理者_Webクロール設定_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/ee5a09c9-7cce-3fec-7884-1258c32fa91a.png\"></a></p>\n\n<p>設定項目は色々ありますが、とりあえず下記項目だけ設定しましょう。</p>\n\n<ul>\n<li>名前 \n\n<ul>\n<li>任意の名前を設定してください。</li>\n</ul>\n</li>\n<li>URL \n\n<ul>\n<li>ドキュメント用Webサーバにおいてドキュメントが格納されているルートフォルダのURLを指定してください。末尾に<code>/</code>を付けてください。</li>\n</ul>\n</li>\n<li>クロール対象とするURL \n\n<ul>\n<li>正規表現で値を設定します。上記<code>URL</code>で設定したルートフォルダ配下の全資産を対象とするために、<code>URLで設定した値</code> + <code>.*</code> を指定してください。</li>\n</ul>\n</li>\n<li>検索対象とするURL\n\n<ul>\n<li>正規表現で値を設定します。HTMLのみを検索対象にしたい（JS、CSSなどは除外したい）ので、<code>URLで設定した値</code> + <code>.+\\.html$</code> を指定してください。\n<br>\n<br>\n</li>\n</ul>\n</li>\n</ul>\n\n<p>値を設定したら、画面を下にスクロールして<code>+　作成</code>ボタンをクリックします。<br>\nすると下記のようにWebクロールのデータが１件登録されます。<br>\n<a href=\"https://camo.qiitausercontent.com/8302d25592df90b2bdf59fbf3b43e31ecf106b3e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33643030626635612d663133312d643336372d646535332d6166313062623336383339642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/8302d25592df90b2bdf59fbf3b43e31ecf106b3e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33643030626635612d663133312d643336372d646535332d6166313062623336383339642e706e67\" alt=\"3_Fess管理者_Webクロール設定_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/3d00bf5a-f131-d367-de53-af10bb36839d.png\"></a><br>\n<br></p>\n\n<h4>\n<span id=\"クローラの実行\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AE%E5%AE%9F%E8%A1%8C\"><i class=\"fa fa-link\"></i></a>クローラの実行</h4>\n\n<p>左ペインで　<code>システム</code> &gt; <code>スケジューラ</code> を選択してジョブスケジューラを開きます。<br>\nジョブスケジューラで <code>Default Crawler</code>を選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/52e6c84dc635dabd786a05e2dc2dbc01bbcd62b3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62306165636130642d363461342d343364612d373832622d3061316130636437306238332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/52e6c84dc635dabd786a05e2dc2dbc01bbcd62b3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62306165636130642d363461342d343364612d373832622d3061316130636437306238332e706e67\" alt=\"4_Fess管理者_スケジューラ_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/b0aeca0d-64a4-43da-782b-0a1a0cd70b83.png\"></a><br>\n<br></p>\n\n<p><code>今すぐ開始</code>をクリックします。<br>\n<a href=\"https://camo.qiitausercontent.com/15c56153ff7878a59bfda2bab0ac3b8b6182fa23/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30306537363932302d626661642d656562312d636239392d3732346533613933393261392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/15c56153ff7878a59bfda2bab0ac3b8b6182fa23/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30306537363932302d626661642d656562312d636239392d3732346533613933393261392e706e67\" alt=\"4_Fess管理者_スケジューラ_1.1.png\" title=\"4_Fess管理者_スケジューラ_1.1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/00e76920-bfad-eeb1-cb99-724e3a9392a9.png\"></a><br>\n<br></p>\n\n<p>するとクロールが実行されます。<br>\n<a href=\"https://camo.qiitausercontent.com/b34d527efb0b07d2b04cabccebe97f0e1e4b594c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323564333030662d303766352d373234642d636539332d3865316339373532653130652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b34d527efb0b07d2b04cabccebe97f0e1e4b594c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323564333030662d303766352d373234642d636539332d3865316339373532653130652e706e67\" alt=\"4_Fess管理者_スケジューラ_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/725d300f-07f5-724d-ce93-8e1c9752e10e.png\"></a><br>\n<br></p>\n\n<p>しばらくして<code>F5</code>キーを押してブラウザを更新してください。<br>\nクロールが終了すると、スケジューラの状態が<code>実行中</code>から<code>有効</code>になります。<br>\n<a href=\"https://camo.qiitausercontent.com/2d860e111077a3a0b63a44b45e14e0e18b02fcb1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653466353237372d616163332d616437652d636465622d3431643339623733336331662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2d860e111077a3a0b63a44b45e14e0e18b02fcb1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653466353237372d616163332d616437652d636465622d3431643339623733336331662e706e67\" alt=\"4_Fess管理者_スケジューラ_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/ee4f5277-aac3-ad7e-cdeb-41d39b733c1f.png\"></a><br>\n<br></p>\n\n<h4>\n<span id=\"クローラ実行結果の確認\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>クローラ実行結果の確認</h4>\n\n<p>左ペインの<code>システム情報</code>&gt;<code>クロール情報</code>を選択すると、先ほど実行したクロールの結果が表示されています。その行を選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/e35eccd76c8d85dcc368298adfebb71871f083a7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39326633313062352d383366362d646564612d343438642d6166613863356230663130342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e35eccd76c8d85dcc368298adfebb71871f083a7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39326633313062352d383366362d646564612d343438642d6166613863356230663130342e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_1.png\" title=\"5_Fess管理者_システム情報_クロール情報_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/92f310b5-83f6-deda-448d-afa8c5b0f104.png\"></a><br>\n<br></p>\n\n<p>セッションIDを選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/341936c3d088fb04a1029cc6c891a35253a079da/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34653830636431342d333633342d663636352d623434382d3862346234653761386432312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/341936c3d088fb04a1029cc6c891a35253a079da/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34653830636431342d333633342d663636352d623434382d3862346234653761386432312e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_2.png\" title=\"5_Fess管理者_システム情報_クロール情報_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/4e80cd14-3634-f665-b448-8b4b4e7a8d21.png\"></a><br>\n<br></p>\n\n<p>ここにドキュメント用Webサーバのドキュメントが全て表示されればOKです。<br>\n<a href=\"https://camo.qiitausercontent.com/767e79c91f7521caf880a890deee50513f520ea9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36306238366263342d663730662d343263382d613031372d3566313338623362383865332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/767e79c91f7521caf880a890deee50513f520ea9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36306238366263342d663730662d343263382d613031372d3566313338623362383865332e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_3.png\" title=\"5_Fess管理者_システム情報_クロール情報_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/60b86bc4-f70f-42c8-a017-5f138b3b88e3.png\"></a><br>\n<br></p>\n\n<h3>\n<span id=\"ドキュメント用webサーバに全文検索用資産を配置\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E7%94%A8web%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AB%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E7%94%A8%E8%B3%87%E7%94%A3%E3%82%92%E9%85%8D%E7%BD%AE\"><i class=\"fa fa-link\"></i></a>ドキュメント用Webサーバに全文検索用資産を配置</h3>\n\n<p>全文検索用の資産は<code>full-text-search.js</code>と<code>full-text-search.css</code>の２つです。<br>\n<code>full-text-search.js</code>の変数 FESS_JSON_ENDPOINT(FESSサーバのJSON APIのエンドポイント) は適時置き換えてください。<br>\nこれらの資産をドキュメント用Webサーバのドキュメントのルートフォルダ直下に配置してください。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">full-text-search.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'use strict'</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// FESSサーバのJSON APIのエンドポイント（FessサーバのIPアドレス + /json）</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">FESS_JSON_ENDPOINT</span> <span class=\"o\">=</span> <span class=\"s1\">'http://192.168.1.5:10084/json'</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// １ページあたりの検索結果表示件数</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">COUNT_PAR_PAGE</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n\n\n    <span class=\"c1\">// 目次の</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#toc'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 一番上に検索条件入力エリアを挿入</span>\n        <span class=\"p\">.</span><span class=\"nx\">prepend</span><span class=\"p\">(</span>\n            <span class=\"s1\">'&lt;div id=\"search-area\"&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;form id=\"search-form\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;div class=\"search-input-area\"&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;i class=\"fa fa-search left-icon\"&gt;&lt;/i&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;input id=\"search-query\" placeholder=\"全文検索\" /&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;i class=\"fa fa-close right-icon\"&gt;&lt;/i&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;/div&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;input id=\"search-start\" type=\"hidden\" value=\"0\"/&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;input id=\"search-num\" type=\"hidden\" value=\"'</span> <span class=\"o\">+</span> <span class=\"nx\">COUNT_PAR_PAGE</span> <span class=\"o\">+</span> <span class=\"s1\">'\"/&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;form&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// イベント登録</span>\n        <span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">$searchArea</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 入力項目の検索条件でEnterを押したら、検索処理を実行する</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-form'</span><span class=\"p\">).</span><span class=\"nx\">submit</span><span class=\"p\">({</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 虫眼鏡アイコン押下したら、検索処理を実行する</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".left-icon\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">({</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 検索条件入力したら、</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\"#search-query\"</span><span class=\"p\">).</span><span class=\"nx\">keyup</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n              <span class=\"kd\">var</span> <span class=\"nx\">$this</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n              <span class=\"kd\">var</span> <span class=\"nx\">$rightIcon</span> <span class=\"o\">=</span> <span class=\"nx\">$this</span><span class=\"p\">.</span><span class=\"nx\">parent</span><span class=\"p\">().</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".right-icon\"</span><span class=\"p\">);</span>\n\n              <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">$this</span><span class=\"p\">.</span><span class=\"nx\">val</span><span class=\"p\">().</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                 <span class=\"c1\">// 検索条件に値がある場合は×アイコンの色を濃くする</span>\n                 <span class=\"nx\">$rightIcon</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#555'</span><span class=\"p\">);</span>\n              <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                 <span class=\"c1\">// 検索条件に値がない場合は×アイコンの色を薄くする</span>\n                 <span class=\"nx\">$rightIcon</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#ccc'</span><span class=\"p\">);</span>\n              <span class=\"p\">}</span>\n            <span class=\"p\">});</span>\n\n            <span class=\"c1\">// ×アイコン押下したら、</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".right-icon\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n              <span class=\"c1\">// ×アイコンの色を薄くして</span>\n              <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">).</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#ccc'</span><span class=\"p\">)</span>\n                      <span class=\"c1\">// 検索条件をクリアする</span>\n                     <span class=\"p\">.</span><span class=\"nx\">parent</span><span class=\"p\">().</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\"input\"</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span>\n            <span class=\"p\">});</span>\n        <span class=\"p\">});</span>\n\n    <span class=\"c1\">// ドキュメントタイトルの</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#header&gt;h1'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 直下に検索結果エリアを挿入</span>\n        <span class=\"p\">.</span><span class=\"nx\">before</span><span class=\"p\">(</span>\n            <span class=\"s1\">'&lt;div id=\"search-result-area\"&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div id=\"search-result-subheader\"&gt;&lt;/div&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div id=\"search-result-content\"&gt;&lt;/div&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// イベント登録</span>\n        <span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span>\n                <span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-area'</span><span class=\"p\">)</span>\n                    <span class=\"c1\">// 検索結果エリアのバツアイコンをクリックしたら、</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s1\">'#remove-search-result'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                      <span class=\"kd\">var</span> <span class=\"nx\">$searchResultArea</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">delegateTarget</span><span class=\"p\">)</span>\n                      <span class=\"c1\">// 検索結果エリアを非表示モードにする</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">removeClass</span><span class=\"p\">(</span><span class=\"s1\">'show'</span><span class=\"p\">);</span>\n                      <span class=\"c1\">// 検索結果エリアの中身を削除する</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-subheader'</span><span class=\"p\">).</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-content'</span><span class=\"p\">).</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n                    <span class=\"p\">})</span>\n                    <span class=\"c1\">// 前ページリンクをクリックしたら、１ページ前を検索する</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#prevPageLink\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">)</span>\n                    <span class=\"c1\">// 次ページリンクをクリックしたら、１ページ後を検索する</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#nextPageLink\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n        <span class=\"p\">});</span>\n\n\n\n    <span class=\"cm\">/**\n     * 検索処理\n     *\n     * @param  {eventObject} event\n     * @return {boolean}  submit処理を中断させるために必ずfalseを返却する\n     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">doSearch</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">){</span>\n      <span class=\"c1\">// 検索フィールドの値をトリムして取得</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">searchQuery</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">trim</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-query'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">());</span>\n      <span class=\"c1\">// 空の場合は検索処理を実行しない</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">searchQuery</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// 表示開始位置、表示件数の取得</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-start'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">()),</span>\n          <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-num'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">());</span>\n      <span class=\"c1\">// 表示開始位置のチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">start</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">// 表示件数のチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">num</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"nx\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">// 表示ページ情報の取得</span>\n      <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">navi</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n          <span class=\"c1\">// 前のページの場合</span>\n          <span class=\"nx\">start</span> <span class=\"o\">-=</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n          <span class=\"c1\">// 次のページの場合</span>\n          <span class=\"nx\">start</span> <span class=\"o\">+=</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"nl\">default</span><span class=\"p\">:</span>\n        <span class=\"k\">case</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n          <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// URLを構築</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"nx\">FESS_JSON_ENDPOINT</span> <span class=\"o\">+</span> <span class=\"s1\">'?callback=?'</span> <span class=\"o\">+</span> <span class=\"c1\">// 別ドメインを想定してJSONP形式でリクエストを送信する</span>\n                                     <span class=\"s1\">'&amp;q='</span> <span class=\"o\">+</span> <span class=\"nb\">encodeURIComponent</span><span class=\"p\">(</span><span class=\"nx\">searchQuery</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n                                     <span class=\"s1\">'&amp;start='</span> <span class=\"o\">+</span> <span class=\"nx\">start</span> <span class=\"o\">+</span>\n                                     <span class=\"s1\">'&amp;num='</span> <span class=\"o\">+</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// 検索リクエスト送信</span>\n      <span class=\"c1\">// 別ドメインを想定してJSONP形式でリクエストを送信する</span>\n      <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span>\n          <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"nx\">url</span><span class=\"p\">,</span>\n          <span class=\"na\">dataType</span><span class=\"p\">:</span> <span class=\"s1\">'jsonp'</span><span class=\"p\">,</span>\n          <span class=\"na\">success</span><span class=\"p\">:</span> <span class=\"nx\">renderSearchResult</span>\n      <span class=\"p\">});</span>\n\n\n      <span class=\"c1\">// ページ情報の更新</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#searchNum'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// ページ表示を上部に移動</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">).</span><span class=\"nx\">scrollTop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// サブミットを抑止するためにfalseを返す</span>\n      <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n\n\n    <span class=\"cm\">/**\n     * 検索成功時に検索結果を描画する\n     *\n     * @param  {Anything} data レスポンスデータ\n     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">renderSearchResult</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 検索結果処理</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">dataResponse</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">;</span>\n      <span class=\"c1\">// ステータスチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s2\">\"検索中に問題が発生しました。\"</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// 検索結果領域を表示する</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-area'</span><span class=\"p\">).</span><span class=\"nx\">addClass</span><span class=\"p\">(</span><span class=\"s1\">'show'</span><span class=\"p\">);</span>\n\n      <span class=\"kd\">var</span> <span class=\"nx\">$searchResultSubheader</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-subheader'</span><span class=\"p\">),</span>\n          <span class=\"nx\">$searchResultContent</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-content'</span><span class=\"p\">),</span>\n          <span class=\"nx\">record_count</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">record_count</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// 検索結果がない場合</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">record_count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// サブヘッダーに出力</span>\n        <span class=\"nx\">$searchResultSubheader</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span>  <span class=\"s1\">'&lt;div id=\"remove-search-result\" style=\"float:right;\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/div&gt;'</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// 結果領域に出力</span>\n        <span class=\"nx\">$searchResultContent</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;b&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">q</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/b&gt;に一致する情報は見つかりませんでした。'</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// 検索にヒットした場合</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">page_number</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_number</span><span class=\"p\">,</span>\n          <span class=\"nx\">page_size</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_size</span><span class=\"p\">,</span>\n          <span class=\"nx\">page_count</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_count</span><span class=\"p\">,</span>\n          <span class=\"nx\">startRange</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nx\">page_size</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n          <span class=\"nx\">endRange</span> <span class=\"o\">=</span> <span class=\"nx\">page_number</span> <span class=\"o\">*</span> <span class=\"nx\">page_size</span><span class=\"p\">,</span>\n          <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n          <span class=\"nx\">max</span><span class=\"p\">,</span>\n          <span class=\"nx\">offset</span> <span class=\"o\">=</span> <span class=\"nx\">startRange</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-start'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"nx\">offset</span><span class=\"p\">);</span>\n\n\n      <span class=\"c1\">// サブヘッダーに出力</span>\n      <span class=\"nx\">$searchResultSubheader</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;b&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">q</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/b&gt; の検索結果 '</span> <span class=\"o\">+</span>\n                                <span class=\"nx\">record_count</span> <span class=\"o\">+</span> <span class=\"s2\">\" 件中 \"</span> <span class=\"o\">+</span>  <span class=\"nx\">startRange</span> <span class=\"o\">+</span> <span class=\"s1\">' - '</span> <span class=\"o\">+</span>\n                                <span class=\"nx\">endRange</span> <span class=\"o\">+</span> <span class=\"s1\">' 件目 ('</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">exec_time</span> <span class=\"o\">+</span> <span class=\"s1\">' 秒)'</span> <span class=\"o\">+</span>\n                               <span class=\"s1\">'&lt;div id=\"remove-search-result\" style=\"float:right;\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/div&gt;'</span>\n\n      <span class=\"c1\">// 検索結果領域のクリア</span>\n      <span class=\"nx\">$searchResultContent</span><span class=\"p\">.</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n\n\n      <span class=\"c1\">// 検索結果の出力</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">$resultBody</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;ol/&gt;\"</span><span class=\"p\">);</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">results</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">;</span>\n      <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">max</span> <span class=\"o\">=</span> <span class=\"nx\">results</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">max</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">element</span> <span class=\"o\">=</span>\n            <span class=\"s1\">'&lt;li&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;h4 class=\"title\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;a href=\"'</span> <span class=\"o\">+</span><span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">url_link</span> <span class=\"o\">+</span> <span class=\"s1\">'\"&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">title</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/a&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;/h4&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div class=\"body\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">content_description</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;br/&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;cite&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">site</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/cite&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;/div&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/li&gt;'</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">).</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$resultBody</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">$resultBody</span><span class=\"p\">.</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$searchResultContent</span><span class=\"p\">);</span>\n\n\n      <span class=\"c1\">// ページ番号情報の出力</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">pageArea</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n      <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;div id=\"pageInfo\"&gt;'</span><span class=\"p\">,</span> <span class=\"nx\">page_number</span><span class=\"p\">,</span> <span class=\"s1\">'ページ目&lt;br/&gt;'</span><span class=\"p\">);</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 前のページへのリンク</span>\n        <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;a id=\"prevPageLink\" href=\"#\"&gt;&amp;lt;&amp;lt;前ページへ&lt;/a&gt; '</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">&lt;</span> <span class=\"nx\">page_count</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 次のページへのリンク</span>\n        <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;a id=\"nextPageLink\" href=\"#\"&gt;次ページへ&amp;gt;&amp;gt;&lt;/a&gt;'</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">);</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"p\">)).</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$searchResultContent</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">full-text-search.css</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">@charset</span> <span class=\"s1\">\"UTF-8\"</span><span class=\"p\">;</span>\n\n<span class=\"nf\">#search-area</span> <span class=\"p\">{</span>\n    <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"p\">{</span>\n    <span class=\"nl\">position</span><span class=\"p\">:</span><span class=\"nb\">relative</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* 入力項目 */</span>\n<span class=\"nf\">#search-query</span> <span class=\"p\">{</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span> <span class=\"m\">2em</span><span class=\"p\">;</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">black</span><span class=\"p\">;</span>\n    <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"n\">arial</span><span class=\"p\">,</span><span class=\"nb\">sans-serif</span><span class=\"p\">;</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span>\n    <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">2em</span><span class=\"p\">;</span>\n    <span class=\"nl\">outline</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nt\">input</span><span class=\"nd\">:focus</span> <span class=\"p\">{</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"m\">#4d90fe</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* アイコンは入力項目の左と右に配置する */</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"o\">,</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span> <span class=\"p\">{</span>\n    <span class=\"c\">/* 縦方向の中央寄せ */</span>\n    <span class=\"nl\">position</span><span class=\"p\">:</span><span class=\"nb\">absolute</span><span class=\"p\">;</span>\n    <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">50%</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">-0.5em</span><span class=\"p\">;</span>\n    <span class=\"py\">font-sise</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 要素にマウスを合わせたら、マウスポインタのマークを変える */</span>\n    <span class=\"nl\">cursor</span><span class=\"p\">:</span><span class=\"nb\">pointer</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span> <span class=\"p\">{</span>\n    <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span><span class=\"p\">;</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span><span class=\"m\">#444</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span> <span class=\"p\">{</span>\n    <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 最初は、グレーアウトしておく */</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* アイコンにマウスを合わせたら、サイズを大きくする */</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"nd\">:hover</span><span class=\"o\">,</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1.4em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* 検索結果表示時に適用するスタイル */</span>\n<span class=\"nf\">#search-result-area</span><span class=\"nc\">.show</span> <span class=\"p\">{</span>\n    <span class=\"nl\">background</span><span class=\"p\">:</span> <span class=\"m\">#f8f8f7</span><span class=\"p\">;</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">0px</span> <span class=\"nb\">solid</span><span class=\"p\">;</span>\n    <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h3>\n<span id=\"ドキュメントに全文検索用資産の読み込み処理を追加\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AB%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E7%94%A8%E8%B3%87%E7%94%A3%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF%E5%87%A6%E7%90%86%E3%82%92%E8%BF%BD%E5%8A%A0\"><i class=\"fa fa-link\"></i></a>ドキュメントに全文検索用資産の読み込み処理を追加</h3>\n\n<p>前手順でドキュメント用Webサーバに配置した<code>full-text-search.js</code>と<code>full-text-search.css</code>を、<br>\n各ドキュメントから読み込むようにします。<br>\n<code>full-text-search.js</code>はjQueryに依存しているので、<br>\n既存のドキュメントで読み込んでいない場合はjQueryも読み込みも追加してください。</p>\n\n<p>ドキュメント用Webサーバがこのようなフォルダ構成だとしたら、</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ドキュメント用Webサーバのドキュメントルート\n├── full-text-search.css\n├── full-text-search.js\n└── asciidoctor-sample\n    └── asciidoctor-sample.html\n</pre></div></div>\n\n<p><code>asciidoctor-sample.adoc</code>には下記を追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>++++\n&lt;link rel=\"stylesheet\" href=\"../full-text-search.css\"&gt;&lt;/link&gt;\n&lt;script\n  src=\"https://code.jquery.com/jquery-3.2.1.min.js\"\n  integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\"\n  crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n&lt;script src=\"../full-text-search.js\"&gt;&lt;/script&gt;\n++++\n</pre></div></div>\n\n<h3>\n<span id=\"全文検索ができるかの確認\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%8B%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>全文検索ができるかの確認</h3>\n\n<p>以上の手順を実施すると、Asdciidoctorで全文検索ができるようになります。<br>\nドキュメントをブラウザで見ると、目次上部に検索窓が追加されています。<br>\n<a href=\"https://camo.qiitausercontent.com/daf3699de0e01b28ba4d3c2a8b8b535d3c54a2ab/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39393039336364362d353865382d376364652d613364382d3562656332613032303636382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/daf3699de0e01b28ba4d3c2a8b8b535d3c54a2ab/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39393039336364362d353865382d376364652d613364382d3562656332613032303636382e706e67\" alt=\"7_全文検索イメージ_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/99093cd6-58e8-7cde-a3d8-5bec2a020668.png\"></a><br>\n<br></p>\n\n<p>検索条件を入力し、虫眼鏡アイコンをクリックすると、検索結果が表示されます。<br>\n<a href=\"https://camo.qiitausercontent.com/5d8e0c5f2db223d5f021d484351b0c840010bb4f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63646533643865612d643838332d613636622d663838642d3961353934313032366263392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/5d8e0c5f2db223d5f021d484351b0c840010bb4f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63646533643865612d643838332d613636622d663838642d3961353934313032366263392e706e67\" alt=\"7_全文検索イメージ_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/cde3d8ea-d883-a66b-f88d-9a5941026bc9.png\"></a><br>\n<br></p>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>FessのREST APIを使用してAsciidoctorで全文検索できるようにする方法を紹介しました。<br>\nFessのREST APIを使えば、Asciidoctorに限らず、様々なシステムに全文検索機能を導入できそうです。</p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<ul>\n<li><a href=\"http://fess.codelibs.org/ja/articles/article-4.html#js\" rel=\"nofollow noopener\" target=\"_blank\">Fess で作るApache Solrベースの検索サーバー 〜 REST API 編</a></li>\n<li><a href=\"http://qiita.com/cookienote/items/1f2443be25630a78d946\" id=\"reference-69c989703115d994be84\">全文検索サーバー Fess を Docker で動かす</a></li>\n</ul>\n","body":"[Asciidoctor](http://asciidoctor.org/)を使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。\n\nそこで今回は、Dockerで全文検索サーバの[Fess](http://fess.codelibs.org/ja/)を立てて、\nドキュメントからJavaScript経由でFessのJSON APIを呼び出すことで、\n全文検索を簡単に導入する方法をご紹介します。\n\n導入するとドキュメントの右上に検索窓が出てきて全文検索できるようになります。\n![6月-24-2017 19-05-32.gif](https://qiita-image-store.s3.amazonaws.com/0/49915/123ec771-fb77-e4dc-df7e-a4b407792759.gif \"6月-24-2017 19-05-32.gif\")\n\n\n## Fessとは\n[Fess](http://fess.codelibs.org/ja/)は**「5 分で簡単に構築可能な全文検索サーバー」**です。\nJavaベースで構築されており、Apacheライセンスで提供されるオープンソース製品で、無料で使用できます。\n自分でクローラを設定して、自分だけの検索エンジンがつくれるようなイメージです。\nデフォルトで検索画面を提供していますが、JSON APIも提供しているので、様々なシステムと連携可能です。\n\n\n## 全体像\nドキュメント用Webサーバに全文検索用のJavaScriptファイルとCSSファイルを追加し、Dockerで全文検索用のFessサーバを立てます。\nFessサーバはドキュメント用Webサーバをクロールし、その情報を保存しておきます。\nドキュメントで全文検索を実施すると、JavaScript経由でFessサーバのJSON AIPを呼び出して、全文検索結果をドキュメントに表示します。\n\n![0_Fess_全体像_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/10c8ac46-2155-8eb7-a5ed-7c13ce544ec2.png)\n\n![0_Fess_全体像_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/40e1d456-2635-2aed-333d-8b1aec447931.png)\n\n## 導入手順\nこの導入手順は、下記のような環境\u001c（ローカルPCのDocker上にドキュメント用WebサーバとFessサーバが立っている環境）を作った時のものです。\nDockerを使わなくても、ローカルPC以外でも、導入可能です。導入手順は適宜読み替えてください。\n\n![0_Fess_全体像_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/0badb8d2-1a58-22b6-457c-12becf3a8911.png)\n\n\n### Fessのインストール\nDocker Hubの[codelibs/fess](https://hub.docker.com/r/codelibs/fess/)を使用します。今回ポートは10084で公開します。\nDockerを使わない場合は[Fess インストールガイド](http://fess.codelibs.org/ja/11.2/install/index.html)を参考にしてください。\n\n```\n$ docker run -d -p 10084:8080 --name fess codelibs/fess:latest\n```\n\n### Fessの設定\n#### クローラの設定\n`http://[PCのローカルIPアドレス]:10084/login`にアクセスするとログイン画面が表示されます。\nデフォルトのID/PASS　`admin/admin`でログインしましょう。\n![1_Fess管理者_ログイン画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/e790eca9-5073-948e-3e43-d7546d57fae5.png)\n<br/>\n\nログインするとダッシュボードが表示されます。左ペインの`クローラ` > `Web`　を選択しましょう。\n![2_Fess管理者_ダッシュボード.png](https://qiita-image-store.s3.amazonaws.com/0/49915/acfbe950-fa74-d0cb-3cee-5e8db4de5b74.png)\n<br/>\n\nWebクローラにはまだ何も登録されていないので、左上の`+　新規作成`ボタンをクリックしましょう。\n![3_Fess管理者_Webクロール設定_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/631037b4-aab2-8e0d-f9aa-3d23ec917a29.png)\n<br/>\n\nWebクロール情報入力画面が表示されます。\n![3_Fess管理者_Webクロール設定_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/ee5a09c9-7cce-3fec-7884-1258c32fa91a.png \"3_Fess管理者_Webクロール設定_2.png\")\n\n設定項目は色々ありますが、とりあえず下記項目だけ設定しましょう。\n\n* 名前 \n    * 任意の名前を設定してください。\n* URL \n    * ドキュメント用Webサーバにおいてドキュメントが格納されているルートフォルダのURLを指定してください。末尾に`/`を付けてください。\n* クロール対象とするURL \n    * 正規表現で値を設定します。上記`URL`で設定したルートフォルダ配下の全資産を対象とするために、`URLで設定した値` + `.*` を指定してください。\n* 検索対象とするURL\n   * 正規表現で値を設定します。HTMLのみを検索対象にしたい（JS、CSSなどは除外したい）ので、`URLで設定した値` + `.+\\.html$` を指定してください。\n<br/>\n<br/>\n\n\n値を設定したら、画面を下にスクロールして`+　作成`ボタンをクリックします。\nすると下記のようにWebクロールのデータが１件登録されます。\n![3_Fess管理者_Webクロール設定_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/3d00bf5a-f131-d367-de53-af10bb36839d.png)\n<br/>\n\n\n#### クローラの実行\n左ペインで　`システム` > `スケジューラ` を選択してジョブスケジューラを開きます。\nジョブスケジューラで `Default Crawler`を選択します。\n![4_Fess管理者_スケジューラ_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/b0aeca0d-64a4-43da-782b-0a1a0cd70b83.png)\n<br/>\n\n`今すぐ開始`をクリックします。\n![4_Fess管理者_スケジューラ_1.1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/00e76920-bfad-eeb1-cb99-724e3a9392a9.png \"4_Fess管理者_スケジューラ_1.1.png\")\n<br/>\n\nするとクロールが実行されます。\n![4_Fess管理者_スケジューラ_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/725d300f-07f5-724d-ce93-8e1c9752e10e.png)\n<br/>\n\nしばらくして`F5`キーを押してブラウザを更新してください。\nクロールが終了すると、スケジューラの状態が`実行中`から`有効`になります。\n![4_Fess管理者_スケジューラ_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/ee4f5277-aac3-ad7e-cdeb-41d39b733c1f.png)\n<br/>\n\n\n#### クローラ実行結果の確認\n左ペインの`システム情報`>`クロール情報`を選択すると、先ほど実行したクロールの結果が表示されています。その行を選択します。\n![5_Fess管理者_システム情報_クロール情報_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/92f310b5-83f6-deda-448d-afa8c5b0f104.png \"5_Fess管理者_システム情報_クロール情報_1.png\")\n<br/>\n\n\nセッションIDを選択します。\n![5_Fess管理者_システム情報_クロール情報_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/4e80cd14-3634-f665-b448-8b4b4e7a8d21.png \"5_Fess管理者_システム情報_クロール情報_2.png\")\n<br/>\n\nここにドキュメント用Webサーバのドキュメントが全て表示されればOKです。\n![5_Fess管理者_システム情報_クロール情報_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/60b86bc4-f70f-42c8-a017-5f138b3b88e3.png \"5_Fess管理者_システム情報_クロール情報_3.png\")\n<br/>\n\n### ドキュメント用Webサーバに全文検索用資産を配置\n全文検索用の資産は`full-text-search.js`と`full-text-search.css`の２つです。\n`full-text-search.js`の変数 FESS_JSON_ENDPOINT(FESSサーバのJSON APIのエンドポイント) は適時置き換えてください。\nこれらの資産をドキュメント用Webサーバのドキュメントのルートフォルダ直下に配置してください。\n\n```javascript:full-text-search.js\n$(function() {\n    'use strict';\n\n    // FESSサーバのJSON APIのエンドポイント（FessサーバのIPアドレス + /json）\n    var FESS_JSON_ENDPOINT = 'http://192.168.1.5:10084/json';\n\n    // １ページあたりの検索結果表示件数\n    var COUNT_PAR_PAGE = 10;\n\n\n    // 目次の\n    $('#toc')\n        // 一番上に検索条件入力エリアを挿入\n        .prepend(\n            '<div id=\"search-area\">' +\n                '<form id=\"search-form\">' +\n                    '<div class=\"search-input-area\">' +\n                        '<i class=\"fa fa-search left-icon\"></i>' +\n                        '<input id=\"search-query\" placeholder=\"全文検索\" />' +\n                        '<i class=\"fa fa-close right-icon\"></i>' +\n                    '</div>' +\n                    '<input id=\"search-start\" type=\"hidden\" value=\"0\"/>' +\n                    '<input id=\"search-num\" type=\"hidden\" value=\"' + COUNT_PAR_PAGE + '\"/>' +\n                '<form>' +\n            '</div>')\n        // イベント登録\n        .ready(function() {\n            var $searchArea = $(this);\n\n            // 入力項目の検索条件でEnterを押したら、検索処理を実行する\n            $searchArea.find('#search-form').submit({navi:0}, doSearch);\n\n            // 虫眼鏡アイコン押下したら、検索処理を実行する\n            $searchArea.find(\".left-icon\").click({navi:0}, doSearch);\n\n            // 検索条件入力したら、\n            $searchArea.find(\"#search-query\").keyup(function(){\n              var $this = $(this);\n              var $rightIcon = $this.parent().find(\".right-icon\");\n\n              if($this.val().length > 0) {\n                 // 検索条件に値がある場合は×アイコンの色を濃くする\n                 $rightIcon.css('color','#555');\n              } else {\n                 // 検索条件に値がない場合は×アイコンの色を薄くする\n                 $rightIcon.css('color','#ccc');\n              }\n            });\n\n            // ×アイコン押下したら、\n            $searchArea.find(\".right-icon\").click(function(){\n              // ×アイコンの色を薄くして\n              $(this).css('color','#ccc')\n                      // 検索条件をクリアする\n                     .parent().find(\"input\").val('');\n            });\n        });\n\n    // ドキュメントタイトルの\n    $('#header>h1')\n        // 直下に検索結果エリアを挿入\n        .before(\n            '<div id=\"search-result-area\">' +\n                '<div id=\"search-result-subheader\"></div>' +\n                '<div id=\"search-result-content\"></div>' +\n            '</div>')\n        // イベント登録\n        .ready(function() {\n            $(this)\n                .find('#search-result-area')\n                    // 検索結果エリアのバツアイコンをクリックしたら、\n                    .on(\"click\", '#remove-search-result', function(e) {\n                      var $searchResultArea = $(e.delegateTarget)\n                      // 検索結果エリアを非表示モードにする\n                      $searchResultArea.removeClass('show');\n                      // 検索結果エリアの中身を削除する\n                      $searchResultArea.find('#search-result-subheader').empty();\n                      $searchResultArea.find('#search-result-content').empty();\n                    })\n                    // 前ページリンクをクリックしたら、１ページ前を検索する\n                    .on(\"click\", \"#prevPageLink\", {navi:-1}, doSearch)\n                    // 次ページリンクをクリックしたら、１ページ後を検索する\n                    .on(\"click\", \"#nextPageLink\", {navi:1}, doSearch);\n        });\n\n\n\n    /**\n     * 検索処理\n     *\n     * @param  {eventObject} event\n     * @return {boolean}  submit処理を中断させるために必ずfalseを返却する\n     */\n    function doSearch(event){\n      // 検索フィールドの値をトリムして取得\n      var searchQuery = $.trim($('#search-query').val());\n      // 空の場合は検索処理を実行しない\n      if(searchQuery.length == 0) {\n        return false;\n      }\n\n\n      // 表示開始位置、表示件数の取得\n      var start = parseInt($('#search-start').val()),\n          num = parseInt($('#search-num').val());\n      // 表示開始位置のチェック\n      if(start < 0) {\n        start = 0;\n      }\n      // 表示件数のチェック\n      if(num < 1 || num > 100) {\n        num = 20;\n      }\n      // 表示ページ情報の取得\n      switch(event.data.navi) {\n        case -1:\n          // 前のページの場合\n          start -= num;\n          break;\n        case 1:\n          // 次のページの場合\n          start += num;\n          break;\n        default:\n        case 0:\n          start = 0;\n          break;\n      }\n\n\n      // URLを構築\n      var url = FESS_JSON_ENDPOINT + '?callback=?' + // 別ドメインを想定してJSONP形式でリクエストを送信する\n                                     '&q=' + encodeURIComponent(searchQuery) +\n                                     '&start=' + start +\n                                     '&num=' + num;\n\n      // 検索リクエスト送信\n      // 別ドメインを想定してJSONP形式でリクエストを送信する\n      $.ajax({\n          url: url,\n          dataType: 'jsonp',\n          success: renderSearchResult\n      });\n\n\n      // ページ情報の更新\n      $('#searchNum').val(num);\n\n      // ページ表示を上部に移動\n      $(document).scrollTop(0);\n\n      // サブミットを抑止するためにfalseを返す\n      return false;\n    };\n\n\n    /**\n     * 検索成功時に検索結果を描画する\n     *\n     * @param  {Anything} data レスポンスデータ\n     */\n    function renderSearchResult(data) {\n      // 検索結果処理\n      var dataResponse = data.response;\n      // ステータスチェック\n      if(dataResponse.status != 0) {\n        alert(\"検索中に問題が発生しました。\");\n        return;\n      }\n\n      // 検索結果領域を表示する\n      $('#search-result-area').addClass('show');\n\n      var $searchResultSubheader = $('#search-result-subheader'),\n          $searchResultContent = $('#search-result-content'),\n          record_count = dataResponse.record_count;\n\n      // 検索結果がない場合\n      if(record_count == 0) {\n        // サブヘッダーに出力\n        $searchResultSubheader[0].innerHTML =  '<div id=\"remove-search-result\" style=\"float:right;\"><i class=\"fa fa-times\"></i></div>';\n\n        // 結果領域に出力\n        $searchResultContent[0].innerHTML = '<b>' + dataResponse.q + '</b>に一致する情報は見つかりませんでした。';\n\n        return;\n      }\n\n\n      // 検索にヒットした場合\n      var page_number = dataResponse.page_number,\n          page_size = dataResponse.page_size,\n          page_count = dataResponse.page_count,\n          startRange = (page_number - 1) * page_size + 1,\n          endRange = page_number * page_size,\n          i = 0,\n          max,\n          offset = startRange - 1;\n\n      $('#search-start').val(offset);\n\n\n      // サブヘッダーに出力\n      $searchResultSubheader[0].innerHTML = '<b>' + dataResponse.q + '</b> の検索結果 ' +\n                                record_count + \" 件中 \" +  startRange + ' - ' +\n                                endRange + ' 件目 (' + dataResponse.exec_time + ' 秒)' +\n                               '<div id=\"remove-search-result\" style=\"float:right;\"><i class=\"fa fa-times\"></i></div>'\n\n      // 検索結果領域のクリア\n      $searchResultContent.empty();\n\n\n      // 検索結果の出力\n      var $resultBody = $(\"<ol/>\");\n      var results = dataResponse.result;\n      for(i = 0, max = results.length; i < max; i++) {\n        var element =\n            '<li>' +\n                '<h4 class=\"title\">' +\n                    '<a href=\"' +results[i].url_link + '\">' + results[i].title + '</a>' +\n                '</h4>' +\n                '<div class=\"body\">' +\n                    results[i].content_description +\n                    '<br/>' +\n                    '<cite>' + results[i].site + '</cite>' +\n                '</div>' +\n            '</li>';\n\n        $(element).appendTo($resultBody);\n      }\n      $resultBody.appendTo($searchResultContent);\n\n\n      // ページ番号情報の出力\n      var pageArea = [];\n      pageArea.push('<div id=\"pageInfo\">', page_number, 'ページ目<br/>');\n      if(page_number > 1) {\n        // 前のページへのリンク\n        pageArea.push('<a id=\"prevPageLink\" href=\"#\">&lt;&lt;前ページへ</a> ');\n      }\n      if(page_number < page_count) {\n        // 次のページへのリンク\n        pageArea.push('<a id=\"nextPageLink\" href=\"#\">次ページへ&gt;&gt;</a>');\n      }\n      pageArea.push('</div>');\n      $(pageArea.join(\"\")).appendTo($searchResultContent);\n    }\n});\n\n```\n\n\n```css:full-text-search.css\n@charset \"UTF-8\";\n\n#search-area {\n    margin-bottom: 1em;\n}\n\n.search-input-area {\n    position:relative;\n}\n\n/* 入力項目 */\n#search-query {\n    padding: 0.7em 2em;\n    width: 100%;\n    color: black;\n    font-family: arial,sans-serif;\n    font-size: 1em;\n    border: 1px solid #ccc;\n    border-radius: 2em;\n    outline: 0;\n}\n\n.search-input-area input:focus {\n    border: 1px solid #4d90fe;\n}\n\n/* アイコンは入力項目の左と右に配置する */\n.search-input-area .left-icon,\n.search-input-area .right-icon {\n    /* 縦方向の中央寄せ */\n    position:absolute;\n    top: 50%;\n    margin-top: -0.5em;\n    font-sise: 1em;\n    /* 要素にマウスを合わせたら、マウスポインタのマークを変える */\n    cursor:pointer;\n}\n\n.search-input-area .left-icon {\n    left: 0.7em;\n    color:#444;\n}\n\n.search-input-area .right-icon {\n    right: 0.7em;\n    /* 最初は、グレーアウトしておく */\n    color: #ccc;\n}\n\n/* アイコンにマウスを合わせたら、サイズを大きくする */\n.search-input-area .left-icon:hover,\n.search-input-area .right-icon:hover {\n    font-size: 1.4em;\n}\n\n\n.search-input-area .left-icon:hover {\n    left: 0.5em;\n}\n\n\n.search-input-area .right-icon:hover {\n    right: 0.5em;\n}\n\n/* 検索結果表示時に適用するスタイル */\n#search-result-area.show {\n    background: #f8f8f7;\n    border: 0px solid;\n    border-radius: 0.5em;\n    margin-top: 1em;\n    margin-bottom: 1em;\n    padding: 1em;\n}\n\n```\n\n### ドキュメントに全文検索用資産の読み込み処理を追加\n前手順でドキュメント用Webサーバに配置した`full-text-search.js`と`full-text-search.css`を、\n各ドキュメントから読み込むようにします。\n`full-text-search.js`はjQueryに依存しているので、\n既存のドキュメントで読み込んでいない場合はjQueryも読み込みも追加してください。\n\nドキュメント用Webサーバがこのようなフォルダ構成だとしたら、\n\n```\nドキュメント用Webサーバのドキュメントルート\n├── full-text-search.css\n├── full-text-search.js\n└── asciidoctor-sample\n    └── asciidoctor-sample.html\n```\n\n\n`asciidoctor-sample.adoc`には下記を追加します。\n\n```\n++++\n<link rel=\"stylesheet\" href=\"../full-text-search.css\"></link>\n<script\n  src=\"https://code.jquery.com/jquery-3.2.1.min.js\"\n  integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\"\n  crossorigin=\"anonymous\"></script>\n<script src=\"../full-text-search.js\"></script>\n++++\n```\n\n### 全文検索ができるかの確認\n以上の手順を実施すると、Asdciidoctorで全文検索ができるようになります。\nドキュメントをブラウザで見ると、目次上部に検索窓が追加されています。\n![7_全文検索イメージ_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/99093cd6-58e8-7cde-a3d8-5bec2a020668.png)\n<br/>\n\n検索条件を入力し、虫眼鏡アイコンをクリックすると、検索結果が表示されます。\n![7_全文検索イメージ_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/cde3d8ea-d883-a66b-f88d-9a5941026bc9.png)\n<br/>\n\n\n## まとめ\nFessのREST APIを使用してAsciidoctorで全文検索できるようにする方法を紹介しました。\nFessのREST APIを使えば、Asciidoctorに限らず、様々なシステムに全文検索機能を導入できそうです。\n\n\n## 参考\n* [Fess で作るApache Solrベースの検索サーバー 〜 REST API 編](http://fess.codelibs.org/ja/articles/article-4.html#js)\n* [全文検索サーバー Fess を Docker で動かす](http://qiita.com/cookienote/items/1f2443be25630a78d946)\n\n","comments_count":0,"created_at":"2017-06-26T00:21:37+09:00","likes_count":21,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true}]},{"node":{"fields":{"slug":"/bb5bc899-9dfd-5e67-bc4c-bc422ba8d176/","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その１. ビルド編","date":"2017-07-19T02:06:59+09:00","excerpt":"やりたいことAngular CLI使って、MEANスタック(MongoDB + Express + Angular + NodeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。フロント側とサーバ側の両方をweb...","tags":["JavaScript","MongoDB","Express","TypeScript","AngularJS","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"bb5bc899-9dfd-5e67-bc4c-bc422ba8d176","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その１. ビルド編","rendered_body":"\n<h2>\n<span id=\"やりたいこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたいこと</h2>\n\n<ul>\n<li>Angular CLI使って、MEANスタック(<strong>M</strong>ongoDB + <strong>E</strong>xpress + <strong>A</strong>ngular + <strong>N</strong>odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。</li>\n<li>フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。</li>\n<li>Dockerを使ってアプリを簡単に配布したい。</li>\n</ul>\n\n<p>これらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。</p>\n\n<ul>\n<li>その１. ビルド編　⇦　今回はココ</li>\n<li><a href=\"http://qiita.com/Takumon/items/b4211fcabad740baa551\" id=\"reference-b35cd1a7f8ba1daaecd8\">その２. テスト編</a></li>\n<li>その３. Dockerビルド編</li>\n</ul>\n\n<h2>\n<span id=\"その１-ビルド編\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%81%AE%EF%BC%91-%E3%83%93%E3%83%AB%E3%83%89%E7%B7%A8\"><i class=\"fa fa-link\"></i></a>その１. ビルド編</h2>\n\n<p>Angular CLIで作成したプロジェクトをベースに、<br>\nMongoDBに登録したメッセージを画面に一覧で表示するアプリを作成していきます。<br>\nメッセージを登録すると一覧に追加されていくようなアプリです。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" alt=\"アプリ概要.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png\"></a></p>\n\n<h3>\n<span id=\"プロジェクト構成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクト構成</h3>\n\n<p>今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。<br>\n<a href=\"https://github.com/Takumon/angular4-express4-typescritp2/tree/build\" rel=\"nofollow noopener\" target=\"_blank\">リポジトリ</a>も用意しているので詳細はそちらを参照してください。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">プロジェクトの構成（完成イメージ）</span></div>\n<div class=\"highlight\"><pre>.\n├── dist                ・・・(1) コンパイル資産出力先\n│   └── server　　　　　　　　      ・・・(1-1)　コンパイルされたサーバ資産\n│       ├── app.js\n│       ├── app.js.map\n│       ├── bin\n│       │   ├── www.js\n│       │   └── www.js.map\n│       ├── config.js\n│       ├── config.js.map\n│       ├── models\n│       │   ├── message.js\n│       │   └── message.js.map\n│       ├── public      ・・・(1-2) コンパイルされたクライアント資産\n│       │   ├── favicon.ico\n│       │   ├── index.html\n│       │   ├── inline.bundle.js\n│       │   ├── inline.bundle.js.map\n│       │   ├── main.bundle.js\n│       │   ├── main.bundle.js.map\n│       │   ├── polyfills.bundle.js\n│       │   ├── polyfills.bundle.js.map\n│       │   ├── styles.bundle.js\n│       │   ├── styles.bundle.js.map\n│       │   ├── vendor.bundle.js\n│       │   └── vendor.bundle.js.map\n│       └── routes\n│           ├── message.js\n│           └── message.js.map\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── e2e\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── server               ・・・(2)　サーバ資産\n│   ├── app.ts\n│   ├── bin\n│   │   └── www.ts\n│   ├── config.ts\n│   ├── models\n│   │   └── message.ts\n│   ├── routes\n│   │   └── message.ts\n│   └── tsconfig.server.json\n├── src                   ・・・(3)　クライアント資産\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       └── message.service.ts\n│   ├── assets\n│   ├── environments\n│   │   ├── environment.prod.ts\n│   │   └── environment.ts\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── main.ts\n│   ├── polyfills.ts\n│   ├── styles.css\n│   ├── test.ts\n│   ├── tsconfig.app.json\n│   ├── tsconfig.spec.json\n│   └── typings.d.ts\n├── karma.conf.js\n├── package-lock.json\n├── package.json\n├── protractor.conf.js\n├── proxy.conf.json    ・・・(4) \n├── tsconfig.json\n├── tslint.json\n└── README.md\n</pre></div>\n</div>\n\n<h4>\n<span id=\"各資産について\" class=\"fragment\"></span><a href=\"#%E5%90%84%E8%B3%87%E7%94%A3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>各資産について</h4>\n\n<h5>\n<span id=\"1-dist\" class=\"fragment\"></span><a href=\"#1-dist\"><i class=\"fa fa-link\"></i></a>(1) dist</h5>\n\n<p>コンパイルした資産の出力先フォルダ</p>\n\n<h5>\n<span id=\"1-1-distserver\" class=\"fragment\"></span><a href=\"#1-1-distserver\"><i class=\"fa fa-link\"></i></a>(1-1) dist/server</h5>\n\n<p>ここにサーバ側のコンパイルされたjsファイルが出力されます。<br>\nserverフォルダを設けているのは本資産とテスト資産を分離したかったからです。<br>\nその２. テスト編で説明しますが、サーバ側テスト用jsファイルはdist配下のserver_testフォルダに出力されるようにしています。</p>\n\n<h5>\n<span id=\"1-2-distserverpublic\" class=\"fragment\"></span><a href=\"#1-2-distserverpublic\"><i class=\"fa fa-link\"></i></a>(1-2) dist/server/public</h5>\n\n<p>コンパイルされたクライアント資産。<br>\nサーバ側アプリの資産の一部としてコンパイルされるようにしています。<br>\nExpressのアプリでは静的資産をpublicフォルダに置くのが一般的なのでこうしました。</p>\n\n<h5>\n<span id=\"2-server\" class=\"fragment\"></span><a href=\"#2-server\"><i class=\"fa fa-link\"></i></a>(2) server</h5>\n\n<p>サーバ資産を格納するためのディレクトリ。<br>\nいろいろ悩みましたが、TypeScript資産をコンパイルすることとテストすることを考慮してこのような構成にしました。</p>\n\n<h5>\n<span id=\"3-src\" class=\"fragment\"></span><a href=\"#3-src\"><i class=\"fa fa-link\"></i></a>(3) src</h5>\n\n<p>フロントの実行資産とテスト資産を格納するためのディレクリ。<br>\nAngular CLIでプロジェクトを作成するとデフォルトで作成されます。<br>\nビルドやアプリ起動は<code>ng</code>コマンドで実施します。</p>\n\n<h5>\n<span id=\"4-proxyconfjson\" class=\"fragment\"></span><a href=\"#4-proxyconfjson\"><i class=\"fa fa-link\"></i></a>(4) proxy.conf.json</h5>\n\n<p><code>npm start</code>でフロント側とサーバ側を同時に起動した時に、クライアント側からサーバ側へのリクエストを送れるようにするためのプロキシ設定です。</p>\n\n<h2>\n<span id=\"構築手順\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E7%AF%89%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>構築手順</h2>\n\n<h3>\n<span id=\"1-プロジェクト作成\" class=\"fragment\"></span><a href=\"#1-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>1. プロジェクト作成</h3>\n\n<ul>\n<li>\n<p>Angular CLIをインストール</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install -g @angular/cli\n</pre></div></div>\n</li>\n<li>\n<p>プロジェクトを生成、Angular CLIであらかじめ定義している依存ライブラリをインストール</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ ng new sample\n$ cd sample\n$ npm install\n</pre></div></div>\n</li>\n<li>\n<p>Angular CLIであらかじめ定義している依存ライブラリの他に必要なものををインストール<br>\n</p>\n<dd>\n<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/express\" rel=\"nofollow noopener\" target=\"_blank\"><code>express</code></a><br>\n    </dt>\n<dd>Webアプリケーションフレームワーク<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/body-parser\" rel=\"nofollow noopener\" target=\"_blank\"><code>body-parser</code></a><br>\n    </dt>\n<dd>リクエストボディのパーサー<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/mongoose\" rel=\"nofollow noopener\" target=\"_blank\"><code>mongoose</code></a><br>\n    </dt>\n<dd>MongoDBへのアクセスを簡単にしてくれるAPI<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/nodemon\" rel=\"nofollow noopener\" target=\"_blank\"><code>nodemon</code></a><br>\n    </dt>\n<dd>node実行時にソースの変更を自動反映してくれるツール<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/npm-run-all\" rel=\"nofollow noopener\" target=\"_blank\"><code>npm-run-all</code></a><br>\n    </dt>\n<dd>npm-scripts の連結実行を管理するためのパッケージ<br>\n</dd>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install --save express body-parser mongoose\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n</pre></div></div>\n</li>\n</ul>\n\n<h3>\n<span id=\"2-サーバ側を作成\" class=\"fragment\"></span><a href=\"#2-%E3%82%B5%E3%83%BC%E3%83%90%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2. サーバ側を作成</h3>\n\n<p>Angular CLIで作ったプロジェクトの直下に<code>server</code>フォルダを作って、その中にサーバ側の処理を書いていきます。</p>\n\n<h4>\n<span id=\"servermodelsmessagets\" class=\"fragment\"></span><a href=\"#servermodelsmessagets\"><i class=\"fa fa-link\"></i></a>server/models/message.ts</h4>\n\n<p>MongoDBにアクセスするためのモデルを定義します。<br>\nDBアクセスにはmangoosを使います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Message</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'messages'</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">}</span>\n<span class=\"p\">}));</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverroutesmessagets\" class=\"fragment\"></span><a href=\"#serverroutesmessagets\"><i class=\"fa fa-link\"></i></a>server/routes/message.ts</h4>\n\n<p>エンドポイントごとの処理を記述するルータを定義します。<br>\nメッセージの取得と登録には<code>server/models/message.ts</code>を使います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">http</span> <span class=\"k\">from</span> <span class=\"s1\">'http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Router</span><span class=\"p\">,</span> <span class=\"nx\">Response</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'express'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../models/message'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">messageRouter</span><span class=\"p\">:</span> <span class=\"nx\">Router</span> <span class=\"o\">=</span> <span class=\"nx\">Router</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// 全てのメッセージを取得する</span>\n<span class=\"nx\">messageRouter</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">doc</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span><span class=\"na\">messages</span><span class=\"p\">:</span> <span class=\"nx\">doc</span><span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// メッセージを登録する</span>\n<span class=\"nx\">messageRouter</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Message</span><span class=\"p\">({</span>\n    <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">save</span><span class=\"p\">((</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n      <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'メッセージを登録しました。'</span><span class=\"p\">,</span>\n      <span class=\"na\">obj</span><span class=\"p\">:</span> <span class=\"nx\">result</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">messageRouter</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverappts\" class=\"fragment\"></span><a href=\"#serverappts\"><i class=\"fa fa-link\"></i></a>server/app.ts</h4>\n\n<p>Expressで使用するルータと依存モジュールを定義するためのファイルを作成します。<br>\nメッセージAPIのエンドポイントは<code>/api/messages</code>に設定し、<br>\nmongooseを使ってMongoDBへの接続設定をしています。<br>\nクライアント資産はビルドするとpublicフォルダ配下に出力されるようにしているので、<br>\n静的資産へのルーティングはpublicフォルダを指定しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">express</span> <span class=\"k\">from</span> <span class=\"s1\">'express'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">path</span> <span class=\"k\">from</span> <span class=\"s1\">'path'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">bodyParser</span> <span class=\"k\">from</span> <span class=\"s1\">'body-parser'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">messageRouter</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./routes/message'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MONGO_URL</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./config'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">App</span> <span class=\"p\">{</span>\n  <span class=\"kr\">public</span> <span class=\"nx\">express</span><span class=\"p\">:</span> <span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">Application</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">middleware</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">routes</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kr\">private</span> <span class=\"nx\">middleware</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">bodyParser</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">());</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">bodyParser</span><span class=\"p\">.</span><span class=\"nx\">urlencoded</span><span class=\"p\">({</span> <span class=\"na\">extended</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">}));</span>\n    <span class=\"c1\">// 接続する MongoDB の設定</span>\n    <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nb\">Promise</span> <span class=\"o\">=</span> <span class=\"nb\">global</span><span class=\"p\">.</span><span class=\"nb\">Promise</span><span class=\"p\">;</span>\n    <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">MONGO_URL</span> <span class=\"o\">||</span> <span class=\"nx\">MONGO_URL</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">useMongoClient</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"p\">});</span>\n    <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'SIGINT'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">disconnect</span><span class=\"p\">();</span> <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kr\">private</span> <span class=\"nx\">routes</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 静的資産へのルーティング</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"kr\">static</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'public'</span><span class=\"p\">)));</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"nx\">messageRouter</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// その他のリクエストはindexファイルにルーティング</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">sendFile</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'public/index.html'</span><span class=\"p\">));</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"k\">new</span> <span class=\"nx\">App</span><span class=\"p\">().</span><span class=\"nx\">express</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverbinwwwts\" class=\"fragment\"></span><a href=\"#serverbinwwwts\"><i class=\"fa fa-link\"></i></a>server/bin/www.ts</h4>\n\n<p>Node.js でサーバを起動するための設定ファイルを作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">www.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">http</span> <span class=\"k\">from</span> <span class=\"s1\">'http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">SERVER_PORT</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../config'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">app</span> <span class=\"k\">from</span> <span class=\"s1\">'../app'</span><span class=\"p\">;</span>\n\n\n\n<span class=\"c1\">// ポートの設定.</span>\n<span class=\"kd\">const</span> <span class=\"nx\">port</span> <span class=\"o\">=</span> <span class=\"nx\">normalizePort</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">PORT</span> <span class=\"o\">||</span> <span class=\"nx\">SERVER_PORT</span><span class=\"p\">);</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"kd\">set</span><span class=\"p\">(</span><span class=\"s1\">'port'</span><span class=\"p\">,</span> <span class=\"nx\">port</span><span class=\"p\">);</span>\n\n\n<span class=\"c1\">// HTTPサーバ生成.</span>\n<span class=\"kd\">const</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">);</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"nx\">port</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`API running on localhost:</span><span class=\"p\">${</span><span class=\"nx\">port</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">));</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"nx\">onError</span><span class=\"p\">);</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'listening'</span><span class=\"p\">,</span> <span class=\"nx\">onListening</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// ポートを正規化.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">normalizePort</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">):</span> <span class=\"nx\">number</span><span class=\"o\">|</span><span class=\"nx\">string</span><span class=\"o\">|</span><span class=\"kr\">boolean</span>  <span class=\"p\">{</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">normalizedPort</span><span class=\"p\">:</span> <span class=\"nx\">number</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">val</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span><span class=\"p\">)</span>\n    <span class=\"p\">?</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">:</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">isNaN</span><span class=\"p\">(</span><span class=\"nx\">normalizedPort</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">normalizedPort</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">normalizedPort</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// エラーハンドラー.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">onError</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">):</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">syscall</span> <span class=\"o\">!==</span> <span class=\"s1\">'listen'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">bind</span> <span class=\"o\">=</span> <span class=\"k\">typeof</span> <span class=\"nx\">port</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span>\n    <span class=\"p\">?</span> <span class=\"s1\">'Pipe '</span> <span class=\"o\">+</span> <span class=\"nx\">port</span>\n    <span class=\"p\">:</span> <span class=\"s1\">'Port '</span> <span class=\"o\">+</span> <span class=\"nx\">port</span><span class=\"p\">;</span>\n\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"s1\">'EACCES'</span><span class=\"p\">:</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">bind</span> <span class=\"o\">+</span> <span class=\"s1\">' requires elevated privileges'</span><span class=\"p\">);</span>\n      <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"s1\">'EADDRINUSE'</span><span class=\"p\">:</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">bind</span> <span class=\"o\">+</span> <span class=\"s1\">' is already in use'</span><span class=\"p\">);</span>\n      <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// サーバ起動時のリスナー.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">onListening</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">addr</span> <span class=\"o\">=</span> <span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">address</span><span class=\"p\">();</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">bind</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">addr</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span><span class=\"p\">)</span>\n    <span class=\"p\">?</span> <span class=\"s2\">`pipe </span><span class=\"p\">${</span><span class=\"nx\">addr</span><span class=\"p\">}</span><span class=\"s2\">`</span>\n    <span class=\"p\">:</span> <span class=\"s2\">`port </span><span class=\"p\">${</span><span class=\"nx\">addr</span><span class=\"p\">.</span><span class=\"nx\">port</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverconfigts\" class=\"fragment\"></span><a href=\"#serverconfigts\"><i class=\"fa fa-link\"></i></a>server/config.ts</h4>\n\n<p>サーバ側の設定ファイルを作成します。<br>\nポートとMongoDBのURLを定義しています。<br>\n今回MongoDBはローカルにポート27017で立てる想定です。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">config.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_PORT</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">MONGO_URL</span> <span class=\"o\">=</span> <span class=\"s1\">'mongodb://localhost:27017/test'</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"3-クライアント側を作成\" class=\"fragment\"></span><a href=\"#3-%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>3. クライアント側を作成</h3>\n\n<p>Angular CLIでプロジェクトを作成すると最低限のクライアント資産が生成されるので、<br>\nここでは修正が必要なファイル、新規作成するファイルのみ紹介します。</p>\n\n<h4>\n<span id=\"srcappmessagemessageservicets\" class=\"fragment\"></span><a href=\"#srcappmessagemessageservicets\"><i class=\"fa fa-link\"></i></a>src/app/message/message.service.ts</h4>\n\n<p>サーバ側からメッセージを取得するためのサービスを新規作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.service.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Http</span><span class=\"p\">,</span> <span class=\"nx\">Response</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MessageService</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">private</span> <span class=\"nx\">http</span><span class=\"p\">:</span> <span class=\"nx\">Http</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"nx\">getAll</span><span class=\"p\">():</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">http</span>\n        <span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"na\">response</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n            <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n        <span class=\"p\">})</span>\n        <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">throw</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()));</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">regist</span><span class=\"p\">(</span><span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">http</span>\n      <span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">message</span><span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"na\">response</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n            <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n      <span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">throw</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappcomponentts\" class=\"fragment\"></span><a href=\"#srcappappcomponentts\"><i class=\"fa fa-link\"></i></a>src/app/app.component.ts</h4>\n\n<p>既存のファイルを修正して、messagesを保持するようにします。<br>\nMessageServiceを使ってメッセージを取得します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span><span class=\"p\">,</span> <span class=\"nx\">OnInit</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-root'</span><span class=\"p\">,</span>\n  <span class=\"na\">templateUrl</span><span class=\"p\">:</span> <span class=\"s1\">'./app.component.html'</span><span class=\"p\">,</span>\n  <span class=\"na\">styleUrls</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'./app.component.css'</span><span class=\"p\">],</span>\n  <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"nx\">MessageService</span> <span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">{</span>\n  <span class=\"nl\">messages</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n  <span class=\"nl\">message</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">private</span> <span class=\"nx\">messageService</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getMessages</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">getMessages</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messageService</span>\n      <span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">()</span>\n      <span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">res</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">;</span>\n      <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">registerMessage</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messageService</span>\n      <span class=\"p\">.</span><span class=\"nx\">register</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">res</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getMessages</span><span class=\"p\">();</span>\n      <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappcomponenthtml\" class=\"fragment\"></span><a href=\"#srcappappcomponenthtml\"><i class=\"fa fa-link\"></i></a>src/app/app.component.html</h4>\n\n<p>既存のファイルの修正して、メッセージ一覧と登録のUIに書き換えます。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.html</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>メッセージ一覧<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;button</span> <span class=\"na\">id=</span><span class=\"s\">\"getMessagesButton\"</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">getMessages</span><span class=\"err\">()\"</span><span class=\"nt\">&gt;</span>メッセージ一覧を最新化<span class=\"nt\">&lt;/button&gt;</span>\n    <span class=\"nt\">&lt;ul</span> <span class=\"na\">id=</span><span class=\"s\">\"messageList\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;li</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let item of messages\"</span><span class=\"nt\">&gt;</span>\n        {{item.message}}\n      <span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;/ul&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>メッセージ登録<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"na\">id=</span><span class=\"s\">\"registerMessage\"</span> <span class=\"err\">[(</span><span class=\"na\">ngModel</span><span class=\"err\">)]=\"</span><span class=\"na\">message</span><span class=\"err\">\"</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"登録するメッセージを入力してください。\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span> <span class=\"na\">id=</span><span class=\"s\">\"registerMessageButton\"</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)='</span><span class=\"na\">registerMessage</span><span class=\"err\">()'</span><span class=\"nt\">&gt;</span>登録<span class=\"nt\">&lt;/button&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappmodulets\" class=\"fragment\"></span><a href=\"#srcappappmodulets\"><i class=\"fa fa-link\"></i></a>src/app/app.module.ts</h4>\n\n<p>HttpModule、FormsModule、MessageServiceを追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.module.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">BrowserModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/platform-browser'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">NgModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">HttpModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/forms'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.component'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"nx\">AppComponent</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"nx\">BrowserModule</span><span class=\"p\">,</span>\n    <span class=\"nx\">HttpModule</span><span class=\"p\">,</span>\n    <span class=\"nx\">FormsModule</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MessageService</span><span class=\"p\">],</span>\n  <span class=\"na\">bootstrap</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">AppComponent</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppModule</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n\n</pre></div>\n</div>\n\n<h3>\n<span id=\"4-ビルドまわり環境を整備\" class=\"fragment\"></span><a href=\"#4-%E3%83%93%E3%83%AB%E3%83%89%E3%81%BE%E3%82%8F%E3%82%8A%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>4. ビルドまわり環境を整備</h3>\n\n<h4>\n<span id=\"pakcagejson\" class=\"fragment\"></span><a href=\"#pakcagejson\"><i class=\"fa fa-link\"></i></a>pakcage.json</h4>\n\n<p>スクリプトを下記のように修正します。<br>\n(npm scriptsは便利ですが、コメントが記述できないのが残念だなーと思いました。)</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\">\n  </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"start\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s build:server -p start:*\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"start:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng serve --aot=true --progress=false --proxy-config proxy.conf.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"start:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-p watch:server boot:server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"watch:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -w -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"boot:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"nodemon ./dist/server/bin/www.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-s build:server build:client\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng build --output-path=./dist/server/public\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"buildRun\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-s build boot:server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>start</strong>でクライアント資産とサーバ資産の両方を起動します。</li>\n<li>\n<strong>start:client</strong>でクライアント資産をコンパイルして起動します。Angular CLIのngコマンドにお任せしています。なおstartではクライアント資産とサーバ資産で二つのサーバを起動するので、クライアントからサーバへ（リクエストを送れるようにプロキシ設定を行っています。プロキシ設定ファイルについては下で触れます。</li>\n<li>\n<strong>start:server</strong>でサーバ資産をコンパイルしてExpressを起動します。</li>\n<li>\n<strong>watch:server</strong>でサーバ側のTypeScriptをウォッチして変更があればコンパイルするようにします。</li>\n<li>\n<strong>boot:server</strong>でコンパイルしたサーバ側資産を起動します。nodeではなくnodemonを使うことでコンパイルしたサーバ資産に更新があった場合でも即座に更新を反映するようにしています。</li>\n<li>\n<strong>build</strong>クライアント資産とサーバ資産の両方をコンパイルします。</li>\n<li>\n<strong>build:server</strong>でサーバ資産をコンパイルしています。コンパイル時の設定は下で触れる<code>/server/tsconfig.server.json</code>を使います。</li>\n<li>\n<strong>build:client</strong>でクライアント資産をコンパイルしています。出力先はサーバ側資産の静的ファイル格納フォルダ（<code>dist/server/public</code>）を指定しています。</li>\n<li>\n<strong>buildRun</strong>でクライアント資産とサーバ資産の両方をコンパイルしサーバ資産を起動します。とりあえずデプロイするアプリを起動したい時の便利コマンドです。</li>\n</ul>\n\n<h4>\n<span id=\"servertsconfigserverjson\" class=\"fragment\"></span><a href=\"#servertsconfigserverjson\"><i class=\"fa fa-link\"></i></a>server/tsconfig.server.json</h4>\n\n<p>サーバ資産コンパイルときの設定ファイルを作成します。<br>\n<code>outDir</code>で出力先をdist/serverに指定しています。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">tsconfig.server.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"extends\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../tsconfig.json\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"preserveConstEnums\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"outDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist/server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"mapRoot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist/server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"module\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"commonjs\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<h4>\n<span id=\"proxyconfjson\" class=\"fragment\"></span><a href=\"#proxyconfjson\"><i class=\"fa fa-link\"></i></a>proxy.conf.json</h4>\n\n<p><code>start</code>でクライアントとサーバの２つを起動した時に、クラ<br>\nイアントからサーバへのリクエストを送れるようにするためのプロキシ設定ファイルを作成します。<br>\n<code>/api</code>始まるリクエストをサーバへのリクエストとみなしてプロキシ設定を行います。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">proxy.conf.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"/api\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"target\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"http://localhost:3000\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"secure\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<h4>\n<span id=\"mongodbをローカルで立ち上げる\" class=\"fragment\"></span><a href=\"#mongodb%E3%82%92%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7%E7%AB%8B%E3%81%A1%E4%B8%8A%E3%81%92%E3%82%8B\"><i class=\"fa fa-link\"></i></a>MongoDBをローカルで立ち上げる</h4>\n\n<p>具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。</p>\n\n<h3>\n<span id=\"5-試してみる\" class=\"fragment\"></span><a href=\"#5-%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>5. 試してみる</h3>\n\n<h4>\n<span id=\"アプリを起動してみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリを起動してみる</h4>\n\n<ul>\n<li>\n<p>プロジェクト直下で下記コマンドを実行するとアプリが起動します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm start \n</pre></div></div>\n</li>\n<li><p>起動したら<code>http://localhost:4200</code>にアクセスしてみます。すると下記のようにメッセージ一覧画面が表示され、メッセージを登録すると適宜一覧に追加されていきます。</p></li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" alt=\"アプリ概要.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png\"></a></p>\n\n<ul>\n<li>試しにクライアント資産かサーバ資産を修正してみると、コンンパイルされてアプリに変更がリアルタイムに反映されることがわかります。</li>\n</ul>\n\n<h4>\n<span id=\"アプリをビルドしてみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリをビルドしてみる</h4>\n\n<ul>\n<li>\n<p>プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力されます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run build\n</pre></div></div>\n</li>\n</ul>\n\n<h4>\n<span id=\"アプリをビルドして起動してみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリをビルドして起動してみる</h4>\n\n<ul>\n<li>プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力された後に起動されます。\nビルドしたアプリは<code>http://localhost:3000</code>でアクセスできます。\n<code>\n$ npm run buildRun\n</code>\n</li>\n</ul>\n\n<h2>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h2>\n\n<p>今回はAngular CLIベースのプロジェクトをベースにしてMEANスタックの最小構成プロジェクトを構築する方法を紹介しました。プロジェクトを起動、ビルドすることはできるようになったので、次回「<a href=\"http://qiita.com/Takumon/items/b4211fcabad740baa551\">その２. テスト編</a>」ではテストコードの作成とテスト実施環境の構築について紹介しようと思います。</p>\n","body":"## やりたいこと\n* Angular CLI使って、MEANスタック(**M**ongoDB + **E**xpress + **A**ngular + **N**odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。\n* フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。\n* Dockerを使ってアプリを簡単に配布したい。\n\nこれらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。\n\n* その１. ビルド編　⇦　今回はココ\n* [その２. テスト編](http://qiita.com/Takumon/items/b4211fcabad740baa551)\n* その３. Dockerビルド編\n\n\n\n## その１. ビルド編\nAngular CLIで作成したプロジェクトをベースに、\nMongoDBに登録したメッセージを画面に一覧で表示するアプリを作成していきます。\nメッセージを登録すると一覧に追加されていくようなアプリです。\n\n![アプリ概要.png](https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png)\n\n\n\n\n### プロジェクト構成\n今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。\n[リポジトリ](https://github.com/Takumon/angular4-express4-typescritp2/tree/build)も用意しているので詳細はそちらを参照してください。\n\n```:プロジェクトの構成（完成イメージ）\n.\n├── dist                ・・・(1) コンパイル資産出力先\n│   └── server　　　　　　　　      ・・・\u001c(1-1)　コンパイルされたサーバ資産\n│       ├── app.js\n│       ├── app.js.map\n│       ├── bin\n│       │   ├── www.js\n│       │   └── www.js.map\n│       ├── config.js\n│       ├── config.js.map\n│       ├── models\n│       │   ├── message.js\n│       │   └── message.js.map\n│       ├── public      ・・・(1-2) コンパイルされたクライアント資産\n│       │   ├── favicon.ico\n│       │   ├── index.html\n│       │   ├── inline.bundle.js\n│       │   ├── inline.bundle.js.map\n│       │   ├── main.bundle.js\n│       │   ├── main.bundle.js.map\n│       │   ├── polyfills.bundle.js\n│       │   ├── polyfills.bundle.js.map\n│       │   ├── styles.bundle.js\n│       │   ├── styles.bundle.js.map\n│       │   ├── vendor.bundle.js\n│       │   └── vendor.bundle.js.map\n│       └── routes\n│           ├── message.js\n│           └── message.js.map\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── e2e\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── server               ・・・(2)　サーバ資産\n│   ├── app.ts\n│   ├── bin\n│   │   └── www.ts\n│   ├── config.ts\n│   ├── models\n│   │   └── message.ts\n│   ├── routes\n│   │   └── message.ts\n│   └── tsconfig.server.json\n├── src                   ・・・(3)　クライアント資産\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       └── message.service.ts\n│   ├── assets\n│   ├── environments\n│   │   ├── environment.prod.ts\n│   │   └── environment.ts\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── main.ts\n│   ├── polyfills.ts\n│   ├── styles.css\n│   ├── test.ts\n│   ├── tsconfig.app.json\n│   ├── tsconfig.spec.json\n│   └── typings.d.ts\n├── karma.conf.js\n├── package-lock.json\n├── package.json\n├── protractor.conf.js\n├── proxy.conf.json    ・・・(4) \n├── tsconfig.json\n├── tslint.json\n└── README.md\n```\n#### 各資産について\n##### (1) dist\nコンパイルした資産の出力先フォルダ\n\n##### (1-1) dist/server\nここにサーバ側のコンパイルされたjsファイルが出力されます。\nserverフォルダを設けているのは本資産とテスト資産を分離したかったからです。\nその２. テスト編で説明しますが、サーバ側テスト用jsファイルはdist配下のserver_testフォルダに出力されるようにしています。\n\n##### (1-2) dist/server/public\nコンパイルされたクライアント資産。\nサーバ側アプリの資産の一部としてコンパイルされるようにしています。\nExpressのアプリでは静的資産をpublicフォルダに置くのが一般的なのでこうしました。\n\n##### (2) server\nサーバ資産を格納するためのディレクトリ。\nいろいろ悩みましたが、TypeScript資産をコンパイルすることとテストすることを考慮してこのような構成にしました。\n\n##### (3) src\nフロントの実行資産とテスト資産を格納するためのディレクリ。\nAngular CLIでプロジェクトを作成するとデフォルトで作成されます。\nビルドやアプリ起動は`ng`コマンドで実施します。\n\n##### (4) proxy.conf.json\n`npm start`でフロント側とサーバ側を同時に起動した時に、クライアント側からサーバ側へのリクエストを送れるようにするためのプロキシ設定です。\n\n\n\n\n## 構築手順\n\n### 1. プロジェクト作成\n* Angular CLIをインストール\n\n\t```\n\t$ npm install -g @angular/cli\n\t```\n\n* プロジェクトを生成、Angular CLIであらかじめ定義している依存ライブラリをインストール\n\n\t```\n\t$ ng new sample\n\t$ cd sample\n\t$ npm install\n\t```\n\n* Angular CLIであらかじめ定義している依存ライブラリの他に必要なものををインストール\n<dd>\n    <dt>[`express`](https://www.npmjs.com/package/express)\n        <dd>Webアプリケーションフレームワーク\n    <dt>[`body-parser`](https://www.npmjs.com/package/body-parser)\n        <dd>リクエストボディのパーサー\n    <dt>[`mongoose`](https://www.npmjs.com/package/mongoose)\n        <dd>MongoDBへのアクセスを簡単にしてくれるAPI\n    <dt>[`nodemon`](https://www.npmjs.com/package/nodemon)\n        <dd>node実行時にソースの変更を自動反映してくれるツール\n    <dt>[`npm-run-all`](https://www.npmjs.com/package/npm-run-all)\n        <dd>npm-scripts の連結実行を管理するためのパッケージ\n</dd>\n\n\t```\n\t$ npm install --save express body-parser mongoose\n\t$ npm install --save-dev @types/mongoose nodemon npm-run-all\n\t```\n\n\n\n### 2. サーバ側を作成\nAngular CLIで作ったプロジェクトの直下に`server`フォルダを作って、その中にサーバ側の処理を書いていきます。\n#### server/models/message.ts\nMongoDBにアクセスするためのモデルを定義します。\nDBアクセスにはmangoosを使います。\n\n```js:message.ts\nimport * as mongoose from 'mongoose';\n\nconst Message = mongoose.model('messages', new mongoose.Schema({\n  message: {type: String}\n}));\n\nexport { Message };\n```\n\n\n\n#### server/routes/message.ts\nエンドポイントごとの処理を記述するルータを定義します。\nメッセージの取得と登録には`server/models/message.ts`を使います。\n\n```js:message.ts\nimport * as http from 'http';\nimport { Router, Response } from 'express';\nimport { Message } from '../models/message';\n\nconst messageRouter: Router = Router();\n\n// 全てのメッセージを取得する\nmessageRouter.get('/', (req, res, next) => {\n  Message.find(function(err, doc) {\n    if (err) {\n      return res.status(500).json({\n          title: 'エラーが発生しました。',\n          error: err.message\n      });\n    }\n\n    return res.status(200).json({messages: doc});\n  });\n});\n\n// メッセージを登録する\nmessageRouter.post('/', (req, res, next) => {\n  const message = new Message({\n    message: req.body.message\n  });\n\n  message.save((err, result) => {\n    if (err) {\n      return res.status(500).json({\n          title: 'エラーが発生しました。',\n          error: err.message\n      });\n    }\n\n    return res.status(200).json({\n      message: 'メッセージを登録しました。',\n      obj: result\n    });\n  });\n});\n\nexport { messageRouter };\n```\n\n\n#### server/app.ts\nExpressで使用するルータと依存モジュールを定義するためのファイルを作成します。\nメッセージAPIのエンドポイントは`/api/messages`に設定し、\nmongooseを使ってMongoDBへの接続設定をしています。\nクライアント資産はビルドするとpublicフォルダ配下に出力されるようにしているので、\n静的資産へのルーティングはpublicフォルダを指定しています。\n\n```js:app.ts\nimport * as express from 'express';\nimport * as path from 'path';\nimport * as bodyParser from 'body-parser';\nimport * as mongoose from 'mongoose';\n\nimport { messageRouter } from './routes/message';\nimport { MONGO_URL } from './config';\n\nclass App {\n  public express: express.Application;\n\n  constructor() {\n    this.express = express();\n    this.middleware();\n    this.routes();\n  }\n\n  private middleware(): void {\n    this.express.use(bodyParser.json());\n    this.express.use(bodyParser.urlencoded({ extended: false }));\n    // 接続する MongoDB の設定\n    mongoose.Promise = global.Promise;\n    mongoose.connect(process.env.MONGO_URL || MONGO_URL, {\n      useMongoClient: true,\n    });\n    process.on('SIGINT', function() { mongoose.disconnect(); });\n  }\n\n  private routes(): void {\n    // 静的資産へのルーティング\n    this.express.use(express.static(path.join(__dirname, 'public')));\n\n    this.express.use('/api/messages', messageRouter);\n\n    // その他のリクエストはindexファイルにルーティング\n    this.express.get('*', (req, res) => {\n      res.sendFile(path.join(__dirname, 'public/index.html'));\n    });\n  }\n}\n\nexport default new App().express;\n```\n\n\n#### server/bin/www\\.ts\nNode.js でサーバを起動するための設定ファイルを作成します。\n\n```js:www.ts\nimport * as http from 'http';\nimport { SERVER_PORT } from '../config';\nimport app from '../app';\n\n\n\n// ポートの設定.\nconst port = normalizePort(process.env.PORT || SERVER_PORT);\napp.set('port', port);\n\n\n// HTTPサーバ生成.\nconst server = http.createServer(app);\nserver.listen(port, () => console.log(`API running on localhost:${port}`));\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n// ポートを正規化.\nfunction normalizePort(val): number|string|boolean  {\n\n  const normalizedPort: number = (typeof val === 'string')\n    ? parseInt(val, 10)\n    : val;\n\n  if (isNaN(normalizedPort)) {\n    return val;\n  }\n\n  if (normalizedPort >= 0) {\n    return normalizedPort;\n  }\n\n  return false;\n}\n\n// エラーハンドラー.\nfunction onError(error): void {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  const bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n// サーバ起動時のリスナー.\nfunction onListening(): void {\n  const addr = server.address();\n  const bind = (typeof addr === 'string')\n    ? `pipe ${addr}`\n    : `port ${addr.port}`;\n}\n```\n\n#### server/config.ts\nサーバ側の設定ファイルを作成します。\nポートとMongoDBのURLを定義しています。\n今回MongoDBはローカルにポート27017で立てる想定です。\n\n```js:config.ts\nexport const SERVER_PORT = 3000;\nexport const MONGO_URL = 'mongodb://localhost:27017/test';\n```\n\n\n\n### 3. クライアント側を作成\nAngular CLIでプロジェクトを作成すると最低限のクライアント資産が生成されるので、\nここでは修正が必要なファイル、新規作成するファイルのみ紹介します。\n\n\n#### src/app/message/message.service.ts\nサーバ側からメッセージを取得するためのサービスを新規作成します。\n\n```js:message.service.ts\nimport { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/Rx';\n\n@Injectable()\nexport class MessageService {\n\n  constructor(private http: Http) {}\n\n  getAll(): Observable<any> {\n    return this.http\n        .get('/api/messages')\n        .map((response: Response) => {\n            const result = response.json();\n            return result;\n        })\n        .catch((error: Response) => Observable.throw(error.json()));\n  }\n\n  regist(message: string): Observable<any> {\n    return this.http\n      .post('/api/messages', {message: message})\n      .map((response: Response) => {\n            const result = response.json();\n            return result;\n      })\n      .catch((error: Response) => Observable.throw(error.json()));\n  }\n}\n```\n\n\n\n\n\n#### src/app/app.component.ts\n既存のファイルを修正して、messagesを保持するようにします。\nMessageServiceを使ってメッセージを取得します。\n\n```js:app.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { MessageService } from './message/message.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  providers: [ MessageService ]\n})\nexport class AppComponent {\n  messages: Array<any>;\n  message: string;\n\n  constructor(private messageService: MessageService) {\n    this.getMessages();\n  }\n\n  getMessages(): void {\n    this.messageService\n      .getAll()\n      .subscribe((res: any) => {\n        this.messages = res.messages;\n      });\n  }\n\n  registerMessage(): void {\n    if (!this.message) {\n      return;\n    }\n\n    this.messageService\n      .register(this.message)\n      .subscribe((res: any) => {\n        this.message = '';\n        this.getMessages();\n      });\n  }\n}\n```\n\n\n#### src/app/app.component.html\n既存のファイルの修正して、メッセージ一覧と登録のUIに書き換えます。\n\n```html:app.component.html\n<div>\n  <div>\n    <h1>メッセージ一覧</h1>\n    <button id=\"getMessagesButton\" (click)=\"getMessages()\">メッセージ一覧を最新化</button>\n    <ul id=\"messageList\">\n      <li *ngFor=\"let item of messages\">\n        {{item.message}}\n      </li>\n    </ul>\n  </div>\n  <div>\n    <h1>メッセージ登録</h1>\n    <input type=\"text\" id=\"registerMessage\" [(ngModel)]=\"message\" placeholder=\"登録するメッセージを入力してください。\">\n    <button type=\"submit\" id=\"registerMessageButton\" (click)='registerMessage()'>登録</button>\n  </div>\n</div>\n```\n#### src/app/app.module.ts\nHttpModule、FormsModule、MessageServiceを追加します。\n\n\n```js:app.module.ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpModule } from '@angular/http';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { MessageService } from './message/message.service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpModule,\n    FormsModule\n  ],\n  providers: [MessageService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n```\n\n\n### 4. ビルドまわり環境を整備\n\n#### pakcage.json\nスクリプトを下記のように修正します。\n(npm scriptsは便利ですが、コメントが記述できないのが残念だなーと思いました。)\n\n```json:package.json\n\n  \"scripts\": {\n    ...\n    \"start\": \"npm-run-all -s build:server -p start:*\",\n    \"start:client\": \"ng serve --aot=true --progress=false --proxy-config proxy.conf.json\",\n    \"start:server\": \"run-p watch:server boot:server\",\n    \"watch:server\": \"tsc -w -p ./server/tsconfig.server.json\",\n    \"boot:server\": \"nodemon ./dist/server/bin/www.js\",\n    \"build\": \"run-s build:server build:client\",\n    \"build:client\": \"ng build --output-path=./dist/server/public\",\n    \"build:server\": \"tsc -p ./server/tsconfig.server.json\",\n    \"buildRun\": \"run-s build boot:server\",\n    ...\n  },\n```\n\n* **start**でクライアント資産とサーバ資産の両方を起動します。\n* **start:client**でクライアント資産をコンパイルして起動します。Angular CLIのngコマンドにお任せしています。なおstartではクライアント資産とサーバ資産で二つのサーバを起動するので、クライアントからサーバへ（リクエストを送れるようにプロキシ設定を行っています。プロキシ設定ファイルについては下で触れます。\n* **start:server**でサーバ資産をコンパイルしてExpressを起動します。\n* **watch:server**でサーバ側のTypeScriptをウォッチして変更があればコンパイルするようにします。\n* **boot:server**でコンパイルしたサーバ側資産を起動します。nodeではなくnodemonを使うことでコンパイルしたサーバ資産に更新があった場合でも即座に更新を反映するようにしています。\n* **build**クライアント資産とサーバ資産の両方をコンパイルします。\n* **build:server**でサーバ資産をコンパイルしています。コンパイル時の設定は下で触れる`/server/tsconfig.server.json`を使います。\n* **build:client**でクライアント資産をコンパイルしています。出力先はサーバ側資産の静的ファイル格納フォルダ（`dist/server/public`）を指定しています。\n* **buildRun**でクライアント資産とサーバ資産の両方をコンパイルしサーバ資産を起動します。とりあえずデプロイするアプリを起動したい時の便利コマンドです。\n\n\n\n#### server/tsconfig.server.json\nサーバ資産コンパイルときの設定ファイルを作成します。\n`outDir`で出力先をdist/serverに指定しています。\n\n```json:tsconfig.server.json\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"preserveConstEnums\": true,\n    \"outDir\": \"../dist/server\",\n    \"mapRoot\": \"../dist/server\",\n    \"module\": \"commonjs\"\n  }\n}\n```\n\n#### proxy.conf.json\n`start`でクライアントとサーバの２つを起動した時に、クラ\nイアントからサーバへのリクエストを送れるようにするためのプロキシ設定ファイルを作成します。\n`/api`始まるリクエストをサーバへのリクエストとみなしてプロキシ設定を行います。\n\n```json:proxy.conf.json\n{\n  \"/api\": {\n    \"target\": \"http://localhost:3000\",\n    \"secure\": false\n  }\n}\n```\n\n#### MongoDBをローカルで立ち上げる\n具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。\n\n\n\n### 5. 試してみる\n#### アプリを起動してみる\n* プロジェクト直下で下記コマンドを実行するとアプリが起動します。\n\n\t```\n\t$ npm start \n\t```\n\n* 起動したら`http://localhost:4200`にアクセスしてみます。すると下記のようにメッセージ一覧画面が表示され、メッセージを登録すると適宜一覧に追加されていきます。\n\n![アプリ概要.png](https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png)\n\n* 試しにクライアント資産かサーバ資産を修正してみると、コンンパイルされてアプリに変更がリアルタイムに反映されることがわかります。\n\n#### アプリをビルドしてみる\n* プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力されます。\n\n\t```\n\t$ npm run build\n\t```\n\n#### アプリをビルドして起動してみる\n* プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力された後に起動されます。\nビルドしたアプリは`http://localhost:3000`でアクセスできます。\n\t```\n\t$ npm run buildRun\n\t```\n\n## 終わりに\n今回はAngular CLIベースのプロジェクトをベースにしてMEANスタックの最小構成プロジェクトを構築する方法を紹介しました。プロジェクトを起動、ビルドすることはできるようになったので、次回「[その２. テスト編](http://qiita.com/Takumon/items/b4211fcabad740baa551)」ではテストコードの作成とテスト実施環境の構築について紹介しようと思います。\n\n\n","comments_count":0,"created_at":"2017-07-19T02:06:59+09:00","likes_count":27,"reactions_count":0},"relations":[{"node":{"fields":{"slug":"/5644c24e-eade-50ca-aa11-83a4eaeba122/","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その２. テスト編","date":"2017-07-24T07:12:10+09:00","excerpt":"やりたいことAngular CLI使って、MEANスタック(MongoDB + Express + Angular + NodeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。フロント側とサーバ側の両方をweb...","tags":["JavaScript","jasmine","TypeScript","AngularJS","Protractor","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"5644c24e-eade-50ca-aa11-83a4eaeba122","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その２. テスト編","rendered_body":"\n<h2>\n<span id=\"やりたいこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたいこと</h2>\n\n<ul>\n<li>Angular CLI使って、MEANスタック(<strong>M</strong>ongoDB + <strong>E</strong>xpress + <strong>A</strong>ngular + <strong>N</strong>odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。</li>\n<li>フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。</li>\n<li>Dockerを使ってアプリを簡単に配布したい。</li>\n</ul>\n\n<p>これらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。</p>\n\n<ul>\n<li><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\" id=\"reference-fc6741a6eda3b7ffd9f1\">その１. ビルド編</a></li>\n<li>その２. テスト編　⇦　今回はココ</li>\n<li>その３. Dockerビルド編</li>\n</ul>\n\n<h2>\n<span id=\"その２-テスト編\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%81%AE%EF%BC%92-%E3%83%86%E3%82%B9%E3%83%88%E7%B7%A8\"><i class=\"fa fa-link\"></i></a>その２. テスト編</h2>\n\n<p><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\">その１. ビルド編</a>では、Angular CLIで作成したプロジェクトをベースに、<br>\nMongoDBに登録しているメッセージを画面に一覧で表示するアプリを作成しました。<br>\n今回は、クライアント側とサーバ側の<a href=\"https://jasmine.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">Jasmine</a>を使った単体テスト、<a href=\"http://www.protractortest.org/#/\" rel=\"nofollow noopener\" target=\"_blank\">Protractor</a>を使ったE2Eテスト、それらを実行するnpm scriptsを作成します。<br>\n最終的には下記のように<code>npm test</code>コマンドで単体テストが実行できるようになります。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" alt=\"10_単体テスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png\"></a></p>\n\n<p>またE2Eテストは<code>npm run e2e</code>コマンドで実施できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" alt=\"20_E2Eテスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png\"></a></p>\n\n<h3>\n<span id=\"プロジェクト構成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクト構成</h3>\n\n<p>今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。<br>\n<a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\">その１. ビルド編</a>で作成したものをベースにテスト用の資産を追加します。詳細は<a href=\"https://github.com/Takumon/angular4-express4-typescritp2/tree/test\" rel=\"nofollow noopener\" target=\"_blank\">リポジトリ</a>を参照してください。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">プロジェクト構成（完成イメージ）</span></div>\n<div class=\"highlight\"><pre>.\n├── dist                              ・・・(1) コンパイル資産出力先\n│   ├── server\n│   │   ├── ...\n│   │   ...\n│   │ \n│   └── server_test                      ・・・(1-1)　コンパイルされたサーバ側テスト資産\n│       ├── app.spec.js\n│       ├── app.spec.js.map\n│       ├── test.server.conf.js\n│       ├── test.server.conf.js.map\n│       ├── test.server.js\n│       └── test.server.js.map\n├── e2e                                ・・・(2)　E2Eテスト資産\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── server\n│   ├── ...\n│   ...\n│\n├── server_test                         ・・・(3)　サーバ側テスト資産\n│   ├── app.spec.ts\n│   ├── test.server.conf.ts\n│   ├── test.server.ts\n│   └── tsconfig.server_test.json\n├── src\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts      ・・・(4)　クライアント側テスト資産\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       ├── message.service.spec.ts ・・・(4)　クライアント側テスト資産\n│   │       └── message.service.ts\n│   ...\n│\n├── package-lock.json\n├── package.json\n├── protractor.conf.js                   ・・・(5)　E2Eテスト設定ファイル\n├── proxy.conf.json\n├── karma.conf.js\n├── tsconfig.json\n├── tslint.json\n└── README.md\n</pre></div>\n</div>\n\n<h4>\n<span id=\"各資産について\" class=\"fragment\"></span><a href=\"#%E5%90%84%E8%B3%87%E7%94%A3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>各資産について</h4>\n\n<h5>\n<span id=\"1-dist\" class=\"fragment\"></span><a href=\"#1-dist\"><i class=\"fa fa-link\"></i></a>(1) dist</h5>\n\n<p>コンパイル資産出力先。</p>\n\n<h5>\n<span id=\"1-1-distserver_test\" class=\"fragment\"></span><a href=\"#1-1-distserver_test\"><i class=\"fa fa-link\"></i></a>(1-1) dist/server_test</h5>\n\n<p>コンパイルされたサーバ側テスト資産(JSファイル)の出力先。<br>\nデプロイを考慮して本資産(dist/server)とは別ディレクトリにしています。</p>\n\n<h5>\n<span id=\"2-server_test\" class=\"fragment\"></span><a href=\"#2-server_test\"><i class=\"fa fa-link\"></i></a>(2) server_test</h5>\n\n<p>サーバ側テスト資産のディレクトリ。<br>\nコンパイル用の設定ファイルとテスト用の設定ファイルもココに格納します。</p>\n\n<h5>\n<span id=\"3-e2e\" class=\"fragment\"></span><a href=\"#3-e2e\"><i class=\"fa fa-link\"></i></a>(3) e2e</h5>\n\n<p>E2Eテスト用資産のディレクトリ。</p>\n\n<h5>\n<span id=\"4-srcapp配下のspectsファイル\" class=\"fragment\"></span><a href=\"#4-srcapp%E9%85%8D%E4%B8%8B%E3%81%AEspects%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\"><i class=\"fa fa-link\"></i></a>(4) src/app配下のspec.tsファイル</h5>\n\n<p>フロント側テスト資産。<br>\nコンパイルやテストは<code>ng</code>コマンドで実施します。</p>\n\n<h5>\n<span id=\"5-protractorconfjs\" class=\"fragment\"></span><a href=\"#5-protractorconfjs\"><i class=\"fa fa-link\"></i></a>(5) protractor.conf.js</h5>\n\n<p>E2Eテスト設定ファイル。<br>\n今回はAngular CLIでプロジェクトが作成するデフォルトから少しだけ修正します。</p>\n\n<h2>\n<span id=\"構築手順\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E7%AF%89%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>構築手順</h2>\n\n<h3>\n<span id=\"1-テストに必要なライブラリをインストール\" class=\"fragment\"></span><a href=\"#1-%E3%83%86%E3%82%B9%E3%83%88%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>1. テストに必要なライブラリをインストール</h3>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install --save zone.js@0.8.12\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n</pre></div></div>\n\n<ul>\n<li>\n<a href=\"https://www.npmjs.com/package/zone.js\" rel=\"nofollow noopener\" target=\"_blank\"><code>zone.js@0.8.12</code></a>\n\n<ul>\n<li>クライアント側のテストで使用します。Angular CLIでプロジェクトを作成した時点でインストールされていますが、テスト実行時に<code>Failed: Cannot create property '__creationTrace__' on string '__zone_symbol__optimizedZoneEventTask'</code>のようなエラーが出ます。<a href=\"https://github.com/angular/zone.js/issues/832\" rel=\"nofollow noopener\" target=\"_blank\">GitHubのissues</a>によるとv0.8.12はエラーが出ないそうなので、v0.8.12を再インストールします。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://www.npmjs.com/package/supertest\" rel=\"nofollow noopener\" target=\"_blank\"><code>supertest</code></a>\n\n<ul>\n<li>サーバ側のテストで使用します。APIテストを簡単にしてくれます。</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"2-クライアント側を作成\" class=\"fragment\"></span><a href=\"#2-%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2. クライアント側を作成</h3>\n\n<p>コンポーネント(app.component.ts)とサービス(message.service.ts)に対するテストコードを作成します。<br>\nクライアント側のテスト実行には<code>ng test</code>コマンドを使うので、ビルド周りの設定は不要です。</p>\n\n<h4>\n<span id=\"srcappappcomponentspects\" class=\"fragment\"></span><a href=\"#srcappappcomponentspects\"><i class=\"fa fa-link\"></i></a>src/app/app.component.spec.ts</h4>\n\n<p>コンポーネントは画面描画についてテストします。<br>\nコンポーネントで使うサービスは、<code>TestBed</code>の<code>overrideComponent</code>メソッドを使ってモック化します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.spec.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"k\">async</span><span class=\"p\">,</span> <span class=\"nx\">ComponentFixture</span><span class=\"p\">,</span> <span class=\"nx\">TestBed</span><span class=\"p\">,</span> <span class=\"nx\">inject</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/forms'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.component'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'AppComponent'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// テスト対象のComponent</span>\n  <span class=\"kd\">let</span> <span class=\"na\">component</span><span class=\"p\">:</span> <span class=\"nx\">AppComponent</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// テスト対象のFixture</span>\n  <span class=\"kd\">let</span> <span class=\"na\">fixture</span><span class=\"p\">:</span> <span class=\"nx\">ComponentFixture</span><span class=\"o\">&lt;</span><span class=\"nx\">AppComponent</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// MessageServiceのモック</span>\n  <span class=\"kd\">class</span> <span class=\"nx\">MessageServiceMock</span> <span class=\"p\">{</span>\n    <span class=\"nx\">getAll</span><span class=\"p\">():</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span>  <span class=\"p\">{</span> <span class=\"na\">messages</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n      <span class=\"p\">]};</span>\n\n      <span class=\"k\">return</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">([</span><span class=\"nx\">response</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n      <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">],</span>\n      <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"nx\">AppComponent</span>\n      <span class=\"p\">],</span>\n    <span class=\"p\">})</span>\n<span class=\"err\">　　　　　　　　　</span><span class=\"c1\">// MessageServiceのモックを設定</span>\n    <span class=\"p\">.</span><span class=\"nx\">overrideComponent</span><span class=\"p\">(</span><span class=\"nx\">AppComponent</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">set</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span> <span class=\"na\">provide</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">,</span> <span class=\"na\">useClass</span><span class=\"p\">:</span> <span class=\"nx\">MessageServiceMock</span> <span class=\"p\">},</span>\n        <span class=\"p\">]</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n    <span class=\"p\">.</span><span class=\"nx\">compileComponents</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">fixture</span> <span class=\"o\">=</span> <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">createComponent</span><span class=\"p\">(</span><span class=\"nx\">AppComponent</span><span class=\"p\">);</span>\n    <span class=\"nx\">component</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">componentInstance</span><span class=\"p\">;</span>\n    <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">detectChanges</span><span class=\"p\">();</span>\n  <span class=\"p\">}));</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'オブジェクトが生成されるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">debugElement</span><span class=\"p\">.</span><span class=\"nx\">componentInstance</span><span class=\"p\">;</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">).</span><span class=\"nx\">toBeTruthy</span><span class=\"p\">();</span>\n  <span class=\"p\">}));</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージを３件保持しているか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">component</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">([</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n    <span class=\"p\">]);</span>\n  <span class=\"p\">}));</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'画面にメッセージが３件表示されているか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">el</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">debugElement</span><span class=\"p\">.</span><span class=\"nx\">nativeElement</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ1'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ2'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ3'</span><span class=\"p\">);</span>\n  <span class=\"p\">}));</span>\n<span class=\"p\">});</span>\n\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappmessagemessageservicespects一部抜粋\" class=\"fragment\"></span><a href=\"#srcappmessagemessageservicespects%E4%B8%80%E9%83%A8%E6%8A%9C%E7%B2%8B\"><i class=\"fa fa-link\"></i></a>src/app/message/message.service.spec.ts(一部抜粋)</h4>\n\n<p>サービスのテストです。<br>\nサーバとのやりとり(HTTP通信)については<code>MockBackend</code>を使ってモック化しています。<br>\nなお<code>Error</code>は別途モックを作らなければなりません。<br>\n全て載せると冗長なので<code>register</code>メソッドのテストは割愛しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.service.spec.ts(一部抜粋)</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">TestBed</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">,</span> <span class=\"nx\">inject</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">HttpModule</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">,</span> <span class=\"nx\">Http</span><span class=\"p\">,</span> <span class=\"nx\">Response</span><span class=\"p\">,</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MockConnection</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">RequestMethod</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message.service'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'MessageService'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　</span><span class=\"c1\">// HTTP通信エラー用のモック</span>\n  <span class=\"kd\">class</span> <span class=\"nx\">MockError</span> <span class=\"kd\">extends</span> <span class=\"nx\">Response</span> <span class=\"kr\">implements</span> <span class=\"nb\">Error</span> <span class=\"p\">{</span>\n    <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">;</span>\n    <span class=\"nl\">message</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n<span class=\"err\">　　　　</span><span class=\"c1\">// HTTP通信はMockBackendでモック化</span>\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n      <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">HttpModule</span><span class=\"p\">],</span>\n      <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MessageService</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"na\">provide</span><span class=\"p\">:</span> <span class=\"nx\">Http</span><span class=\"p\">,</span>\n        <span class=\"na\">useFactory</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nx\">backend</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nx\">Http</span><span class=\"p\">(</span><span class=\"nx\">backend</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">),</span>\n        <span class=\"na\">deps</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">]</span>\n      <span class=\"p\">},</span> <span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">]</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'オブジェクトが生成されるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">service</span><span class=\"p\">).</span><span class=\"nx\">toBeTruthy</span><span class=\"p\">();</span>\n  <span class=\"p\">})));</span>\n\n\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'getAll'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージが取得できるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// HTTP通信のモックで返す具体的な値の設定</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">body</span> <span class=\"o\">=</span>  <span class=\"p\">{</span> <span class=\"na\">messages</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n        <span class=\"p\">]};</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">ops</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">({</span>\n          <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n          <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">mockRespond</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">Response</span><span class=\"p\">(</span><span class=\"nx\">ops</span><span class=\"p\">));</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストの内容を検証</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">RequestMethod</span><span class=\"p\">.</span><span class=\"nx\">Get</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// レスポンスの内容を検証</span>\n      <span class=\"nx\">service</span><span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">().</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">([</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n        <span class=\"p\">]);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">})));</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'異常時にエラーハンドリングされるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// HTTP通信のモックで返す具体的な値の設定</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">body</span> <span class=\"o\">=</span>  <span class=\"p\">{</span>\n          <span class=\"na\">title</span> <span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"s1\">'エラー'</span>\n        <span class=\"p\">};</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">ops</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">({</span>\n          <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span>\n          <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">mockError</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">MockError</span><span class=\"p\">(</span><span class=\"nx\">ops</span><span class=\"p\">));</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストの内容を検証</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">RequestMethod</span><span class=\"p\">.</span><span class=\"nx\">Get</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// レスポンスの内容を検証</span>\n      <span class=\"nx\">service</span><span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">().</span><span class=\"nx\">subscribe</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">fail</span><span class=\"p\">(</span><span class=\"s1\">'エラーハンドリングされなかった。'</span><span class=\"p\">);</span>\n      <span class=\"p\">},</span> <span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span> <span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"s1\">'エラー'</span>\n        <span class=\"p\">});</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">})));</span>\n\n  <span class=\"p\">});</span>\n\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"3-サーバ側を作成\" class=\"fragment\"></span><a href=\"#3-%E3%82%B5%E3%83%BC%E3%83%90%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>3. サーバ側を作成</h3>\n\n<p>プロジェクトの直下にserver_testディレクトリを作ってテストコードを書いていきます。<br>\nどちらかというと結合テストよりで、１つ１つの資産に対してではなくapp.tsに対して、実際にDBに接続しながらAPIテストを行います。規模が小さい場合はコレで充分だと思います。<br>\nまたExpressのテストフレームワークは<a href=\"https://mochajs.org/\" rel=\"nofollow noopener\" target=\"_blank\">Mocha</a>が一般的ですが、クライアント側と統一したいので、今回は<a href=\"https://jasmine.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">Jasmine</a>を使うことにします。</p>\n\n<h4>\n<span id=\"server_testappspects一部抜粋\" class=\"fragment\"></span><a href=\"#server_testappspects%E4%B8%80%E9%83%A8%E6%8A%9C%E7%B2%8B\"><i class=\"fa fa-link\"></i></a>server_test/app.spec.ts(一部抜粋)</h4>\n\n<p>ポイントとしてはテスト実行前にMessageモデルを使ってDBを初期化していることです。<br>\nそれによりテストデータがテストメソッドごとに想定する形になるようにしています。<br>\n異常時のテストは、Messsageのfindメソッドでエラーが発生するようにJasmineの<code>spyOn</code>メソッドで処理を置き換えます。<br>\n全て載せると冗長なのでメッセージ登録のテストは割愛しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.spec.ts(一部抜粋)</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">supertest</span> <span class=\"k\">from</span> <span class=\"s1\">'supertest'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"nx\">app</span> <span class=\"k\">from</span> <span class=\"s1\">'../server/app'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../server/models/message'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">request</span> <span class=\"o\">=</span> <span class=\"nx\">supertest</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">endpoint</span> <span class=\"o\">=</span> <span class=\"s1\">'/api/messages'</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">messageAscending</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">,</span> <span class=\"nx\">m2</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&gt;</span> <span class=\"nx\">m2</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&lt;</span> <span class=\"nx\">m2</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"c1\">// テスト前にDBのmessagesを初期化する</span>\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">({},</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n  <span class=\"p\">});</span>\n\n\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'Get'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'レスポンスがjson形式でステータスコードが200か'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n      <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// 検証</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'application/json'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">);</span>\n        <span class=\"p\">}).</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージ一覧が取得できるか'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n      <span class=\"kd\">const</span> <span class=\"nx\">testData</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ１'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ２'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ３'</span> <span class=\"p\">},</span>\n      <span class=\"p\">];</span>\n<span class=\"err\">　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// 事前準備（テストデータを作成）</span>\n      <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">testData</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">erro</span> <span class=\"p\">,</span> <span class=\"nx\">doc</span> <span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n        <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n          <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// 検証</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">sortedMessages</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">sort</span><span class=\"p\">(</span><span class=\"nx\">messageAscending</span><span class=\"p\">);</span>\n\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ１'</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ２'</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ３'</span><span class=\"p\">);</span>\n          <span class=\"p\">})</span>\n          <span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">});</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'異常時にエラーハンドリングされるか'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n      <span class=\"c1\">// エラーとなるようにMessageのfindメソッドを置き換える</span>\n      <span class=\"nx\">spyOn</span><span class=\"p\">(</span><span class=\"nx\">Message</span><span class=\"p\">,</span> <span class=\"s1\">'find'</span><span class=\"p\">).</span><span class=\"nx\">and</span><span class=\"p\">.</span><span class=\"nx\">callFake</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">callback</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">'エラー'</span><span class=\"p\">),</span> <span class=\"kc\">null</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n<span class=\"err\">　　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n      <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n          <span class=\"c1\">// 検証</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'application/json'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">);</span>\n\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'エラー'</span><span class=\"p\">);</span>\n        <span class=\"p\">})</span>\n        <span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"4-単体テスト周りの環境を整備\" class=\"fragment\"></span><a href=\"#4-%E5%8D%98%E4%BD%93%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>4. 単体テスト周りの環境を整備</h3>\n\n<p>E2Eの説明に入る前に、いったん単体テスト周りの環境を整備します。</p>\n\n<h4>\n<span id=\"packagejson\" class=\"fragment\"></span><a href=\"#packagejson\"><i class=\"fa fa-link\"></i></a>package.json</h4>\n\n<p><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792#pakcagejson\" id=\"reference-fc6741a6eda3b7ffd9f1\">前回</a>作成したものをベースに単体テストのスクリプトを追加してください。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\"> </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-p test:*\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"test:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng test\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"test:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s build:server_test -p watch:server_test  boot:server_test\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"watch:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -w -p ./server_test/tsconfig.server_test.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"boot:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"nodemon ./dist/server_test/test.server.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>test</strong>でクライアント側とサーバ側のテストを実行します。</li>\n<li>\n<strong>test:client</strong>でクライアント側のテストを実行します。Angular CLIのngコマンドにお任せしています。</li>\n<li>\n<strong>watch:server_test</strong>でサーバ側テスト資産をウォッチして変更があればコンパイルするようにします。</li>\n<li>\n<strong>boot:server_test</strong>でコンパイルしたサーバ側テスト資産を起動します。nodeではなくnodemonを使うことで資産に更新があった場合でも即座に反映するようにしています。</li>\n<li>\n<strong>build:server_test</strong>でサーバ側テスト資産をコンパイルします。コンパイル時の設定は下で触れるserver_test/test.server.conf.tsを使います。</li>\n</ul>\n\n<h4>\n<span id=\"server_testtestserverts\" class=\"fragment\"></span><a href=\"#server_testtestserverts\"><i class=\"fa fa-link\"></i></a>server_test/test.server.ts</h4>\n\n<p>サーバ側テストの起動処理を書きます。<br>\nレポーターには<a href=\"https://www.npmjs.com/package/jasmine-spec-reporter\" rel=\"nofollow noopener\" target=\"_blank\">jasmine-spec-reporter</a>を使いましょう。このライブラリはAngular CLIで作ったプロジェクトにはデフォルトでインストール済みです。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">test.server.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">SpecReporter</span><span class=\"p\">,</span> <span class=\"nx\">DisplayProcessor</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'jasmine-spec-reporter'</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">Jasmine</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'jasmine'</span><span class=\"p\">);</span>\n<span class=\"k\">import</span> <span class=\"nx\">SuiteInfo</span> <span class=\"o\">=</span> <span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">SuiteInfo</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">config</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./test.server.conf'</span><span class=\"p\">;</span>\n\n\n<span class=\"kd\">class</span> <span class=\"nx\">CustomProcessor</span> <span class=\"kd\">extends</span> <span class=\"nx\">DisplayProcessor</span> <span class=\"p\">{</span>\n    <span class=\"kr\">public</span> <span class=\"nx\">displayJasmineStarted</span><span class=\"p\">(</span><span class=\"nx\">info</span><span class=\"p\">:</span> <span class=\"nx\">SuiteInfo</span><span class=\"p\">,</span> <span class=\"nx\">log</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">string</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s2\">`TypeScript </span><span class=\"p\">${</span><span class=\"nx\">log</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">runner</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Jasmine</span><span class=\"p\">();</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">loadConfig</span><span class=\"p\">(</span><span class=\"nx\">config</span><span class=\"p\">);</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">addReporter</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">SpecReporter</span><span class=\"p\">({</span>\n    <span class=\"na\">customProcessors</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">CustomProcessor</span><span class=\"p\">],</span>\n<span class=\"p\">}));</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">onComplete</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">passed</span><span class=\"p\">){</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nx\">passed</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Success'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"s1\">'Failed'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">execute</span><span class=\"p\">();</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"server_testtestserverconfts\" class=\"fragment\"></span><a href=\"#server_testtestserverconfts\"><i class=\"fa fa-link\"></i></a>server_test/test.server.conf.ts</h4>\n\n<p>サーバ側テスト起動時の設定です。<br>\n注意点として<code>spec_files</code>に指定する相対パスはプロジェクト直下が起点になります。そのため<code>__dirname</code>を使って指定してください。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">test.server.conf.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">spec_dir</span><span class=\"p\">:</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span>\n  <span class=\"na\">spec_files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">__dirname</span><span class=\"p\">}</span><span class=\"s2\">/*spec.js`</span>\n  <span class=\"p\">],</span>\n  <span class=\"s1\">'stopSpecOnExpectationFailure'</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"s1\">'random'</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n<span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"server_testtsconfigserver_testjson\" class=\"fragment\"></span><a href=\"#server_testtsconfigserver_testjson\"><i class=\"fa fa-link\"></i></a>server_test/tsconfig.server_test.json</h4>\n\n<p>サーバ側テスト資産をコンパイルする時の設定ファイルです。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">tsconfig.server_test.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"extends\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../tsconfig.json\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"preserveConstEnums\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"outDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"mapRoot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"module\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"commonjs\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"include\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"s2\">\"**/*.spec.ts\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"./test.server.ts\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"./test.server.conf.ts\"</span><span class=\"w\">\n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<p><code>outDir</code>が<code>../dist/server_test</code>ではなく<code>../dist</code>であることに注意してください。<br>\nテスト資産は<code>server</code>ディレクトリ配下の資産に依存しているため、<code>../dist/server_test</code>を指定するとコンパイルした時に下記のように出力されてしまいます。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">（悪い例）outDirに\"../dist/server_test\"を指定したときのコンパイル結果</span></div>\n<div class=\"highlight\"><pre>.\n└── dist\n    └── server_test\n        ├── server\n        └── server_test \n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">（良い例）outDirに\"../dist\"を指定したときのコンパイル結果</span></div>\n<div class=\"highlight\"><pre>.\n└── dist\n    ├── server\n    └── server_test \n</pre></div>\n</div>\n\n<h3>\n<span id=\"5-e2eテストを作成\" class=\"fragment\"></span><a href=\"#5-e2e%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>5. E2Eテストを作成</h3>\n\n<p>単体テストを作成したので次はE2Eテストを作りましょう。<br>\nAngular CLIで作成したプロジェクトにデフォルトで用意されている<a href=\"http://www.protractortest.org/#/\" rel=\"nofollow noopener\" target=\"_blank\">Protractor</a>を使ったテストコードを作成します。</p>\n\n<h4>\n<span id=\"e2eappe2e-spects\" class=\"fragment\"></span><a href=\"#e2eappe2e-spects\"><i class=\"fa fa-link\"></i></a>e2e/app.e2e-spec.ts</h4>\n\n<p>基本的にelementメソッドで要素を取得して、sendKeysメソッドやclickメソッドで操作を行います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.e2e-spec.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.po'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">browser</span><span class=\"p\">,</span> <span class=\"nx\">element</span><span class=\"p\">,</span> <span class=\"nx\">by</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'protractor'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'E2Eテスト'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"na\">page</span><span class=\"p\">:</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'画面タイトルが正しいか'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">navigateTo</span><span class=\"p\">();</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">getParagraphText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'メッセージ一覧'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージが登録できるか'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">navigateTo</span><span class=\"p\">();</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">newMessage</span> <span class=\"o\">=</span> <span class=\"s2\">`サンプルメッセージ </span><span class=\"p\">${</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">toString</span><span class=\"p\">()}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n    <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessage'</span><span class=\"p\">)).</span><span class=\"nx\">sendKeys</span><span class=\"p\">(</span><span class=\"nx\">newMessage</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessageButton'</span><span class=\"p\">)).</span><span class=\"nx\">click</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// 登録後メッセージ入力項目が初期化されているか</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessage'</span><span class=\"p\">)).</span><span class=\"nx\">getText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 登録後一覧に登録したメッセージが含まれているか</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'messageList'</span><span class=\"p\">)).</span><span class=\"nx\">all</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">tagName</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">));</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">last</span><span class=\"p\">().</span><span class=\"nx\">getText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">newMessage</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"6-e2eテスト周りの環境を整備\" class=\"fragment\"></span><a href=\"#6-e2e%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>6. E2Eテスト周りの環境を整備</h3>\n\n<h4>\n<span id=\"packagejson-1\" class=\"fragment\"></span><a href=\"#packagejson-1\"><i class=\"fa fa-link\"></i></a>package.json</h4>\n\n<p>Angular CILプロジェクトデフォルトの\"e2e\"コマンドは削除して、スクリプトに下記を追加してください。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\"> </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"e2e\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s  webdriver:update -p webdriver:start protractor\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"webdriver:update\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"webdriver-manager update\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"webdriver:start\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"webdriver-manager start\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"protractor\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"protractor protractor.conf.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>e2e</strong>でE2Eテストを実行します。Angular CILプロジェクトデフォルトの<code>e2e</code>コマンド(= <code>ng e2e</code>コマンド)は使いません。<code>ng　e2e</code>はクライアント資産だけコンパイルして起動する処理が入っているからです。今回はビルドしたアプリ(クライアントとサーバが１つにまとまったアプリ)に対してテストします。</li>\n<li>\n<strong>webdriver:update</strong>でE2Eテストに必要なWebDriverをインストールまたは更新します。</li>\n<li>\n<strong>webdriver:start</strong>でWebDriverを起動します。Protractorのテストは事前にWebDriverを起動しておく必要があります。</li>\n<li>\n<strong>protractor</strong>でE2Eテストを実行します。起動時の設定は下で触れるprotractor.conf.jsを使います。</li>\n</ul>\n\n<h4>\n<span id=\"protractorconfjs\" class=\"fragment\"></span><a href=\"#protractorconfjs\"><i class=\"fa fa-link\"></i></a>protractor.conf.js</h4>\n\n<p>デフォルトでbaseUrlのポートは4200になっていますが、今回はビルドしたアプリに対してテストするので3000を指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">protractor.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"p\">...</span>\n  <span class=\"na\">baseUrl</span><span class=\"p\">:</span> <span class=\"s1\">'http://localhost:3000/'</span><span class=\"p\">,</span>\n  <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"7-試してみる\" class=\"fragment\"></span><a href=\"#7-%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>7. 試してみる</h3>\n\n<h4>\n<span id=\"単体テストを実行してみる\" class=\"fragment\"></span><a href=\"#%E5%8D%98%E4%BD%93%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>単体テストを実行してみる</h4>\n\n<ul>\n<li>\n<p>MongoDBをローカルで立ち上げる</p>\n\n<ul>\n<li>具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。</li>\n</ul>\n</li>\n<li><p>プロジェクト直下で<code>npm test</code>コマンドを実行するとテストが実行されます。クライアント側のテスト結果はブラウザに、サーバ側はターミナル（またはコンソール）に表示されます。資産はウォッチしているので、テストコードを修正すると、コンパイルされ再度テストが実行されるでしょう。</p></li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" alt=\"10_単体テスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png\"></a></p>\n\n<h4>\n<span id=\"e2eテストを実行してみる\" class=\"fragment\"></span><a href=\"#e2e%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>E2Eテストを実行してみる</h4>\n\n<ul>\n<li>\n<p>MongoDBをローカルで立ち上げる</p>\n\n<ul>\n<li>これも単体テストと同じでDBを事前に起動しておいてください。</li>\n</ul>\n</li>\n<li>\n<p>ビルドしたアプリを起動する</p>\n\n<ul>\n<li>プロジェクト直下で<code>npm run buildRun</code>を実行し、ビルド資産を起動します。</li>\n</ul>\n</li>\n<li>\n<p><code>npm run e2e</code>する</p>\n\n<ul>\n<li>別ターミナル（またはコマンドプロンプト）を開き、プロジェクト直下で<code>npm run e2e</code>コマンドを実行します。するとブラウザが立ち上がりテストが実行されます。\n<a href=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" alt=\"20_E2Eテスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png\"></a>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h2>\n\n<p>今回はMEANスタックアプリの単体テスト、E2Eテストについて紹介しました。<br>\nこれでビルドとテストができるようになったので、次回「その3. Dockerデプロイ編」では、Dockerでアプリを起動する方法とDockerでアプリのイメージを作ってデプロイする方法ついて紹介します。</p>\n","body":"## やりたいこと\n* Angular CLI使って、MEANスタック(**M**ongoDB + **E**xpress + **A**ngular + **N**odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。\n* フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。\n* Dockerを使ってアプリを簡単に配布したい。\n\nこれらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。\n\n* [その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)\n* その２. テスト編　⇦　今回はココ\n* その３. Dockerビルド編\n\n\n## その２. テスト編\n[その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)では、Angular CLIで作成したプロジェクトをベースに、\nMongoDBに登録しているメッセージを画面に一覧で表示するアプリを作成しました。\n今回は、クライアント側とサーバ側の[Jasmine](https://jasmine.github.io/)を使った単体テスト、[Protractor](http://www.protractortest.org/#/)を使ったE2Eテスト、それらを実行するnpm scriptsを作成します。\n最終的には下記のように`npm test`コマンドで単体テストが実行できるようになります。\n\n![10_単体テスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png)\n\nまたE2Eテストは`npm run e2e`コマンドで実施できるようになります。\n![20_E2Eテスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png)\n\n\n### プロジェクト構成\n今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。\n[その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)で作成したものをベースにテスト用の資産を追加します。詳細は[リポジトリ](https://github.com/Takumon/angular4-express4-typescritp2/tree/test)を参照してください。\n\n```:プロジェクト構成（完成イメージ）\n.\n├── dist                              ・・・(1) コンパイル資産出力先\n│   ├── server\n│   │   ├── ...\n│   │   ...\n│   │ \n│   └── server_test                      ・・・\u001c(1-1)　コンパイルされたサーバ側テスト資産\n│       ├── app.spec.js\n│       ├── app.spec.js.map\n│       ├── test.server.conf.js\n│       ├── test.server.conf.js.map\n│       ├── test.server.js\n│       └── test.server.js.map\n├── e2e                                ・・・\u001c(2)　E2Eテスト資産\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── server\n│   ├── ...\n│   ...\n│\n├── server_test                         ・・・\u001c(3)　サーバ側テスト資産\n│   ├── app.spec.ts\n│   ├── test.server.conf.ts\n│   ├── test.server.ts\n│   └── tsconfig.server_test.json\n├── src\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts      ・・・\u001c(4)　クライアント側テスト資産\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       ├── message.service.spec.ts ・・・\u001c(4)　クライアント側テスト資産\n│   │       └── message.service.ts\n│   ...\n│\n├── package-lock.json\n├── package.json\n├── protractor.conf.js                   ・・・\u001c(5)　E2Eテスト設定ファイル\n├── proxy.conf.json\n├── karma.conf.js\n├── tsconfig.json\n├── tslint.json\n└── README.md\n```\n#### 各資産について\n##### (1) dist\nコンパイル資産出力先。\n\n##### (1-1) dist/server_test\nコンパイルされたサーバ側テスト資産(JSファイル)の出力先。\nデプロイを考慮して本資産(dist/server)とは別ディレクトリにしています。\n\n##### (2) server_test\nサーバ側テスト資産のディレクトリ。\nコンパイル用の設定ファイルとテスト用の設定ファイルもココに格納します。\n\n##### (3) e2e\nE2Eテスト用資産のディレクトリ。\n\n##### (4) src/app配下のspec.tsファイル\nフロント側テスト資産。\nコンパイルやテストは`ng`コマンドで実施します。\n\n##### (5) protractor.conf.js\nE2Eテスト設定ファイル。\n今回はAngular CLIでプロジェクトが作成するデフォルトから少しだけ修正します。\n\n\n\n## 構築手順\n\n### 1. テストに必要なライブラリをインストール\n\n```\n$ npm install --save zone.js@0.8.12\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n```\n\n* [`zone.js@0.8.12`](https://www.npmjs.com/package/zone.js)\n    * クライアント側のテストで使用します。Angular CLIでプロジェクトを作成した時点でインストールされていますが、テスト実行時に`Failed: Cannot create property '__creationTrace__' on string '__zone_symbol__optimizedZoneEventTask'`のようなエラーが出ます。[GitHubのissues](https://github.com/angular/zone.js/issues/832)によるとv0.8.12はエラーが出ないそうなので、v0.8.12を再インストールします。\n* [`supertest`](https://www.npmjs.com/package/supertest)\n    * サーバ側のテストで使用します。APIテストを簡単にしてくれます。\n\n### 2. クライアント側を作成\nコンポーネント(app.component.ts)とサービス(message.service.ts)に対するテストコードを作成します。\nクライアント側のテスト実行には`ng test`コマンドを使うので、ビルド周りの設定は不要です。\n\n#### src/app/app.component.spec.ts\nコンポーネントは画面描画についてテストします。\nコンポーネントで使うサービスは、`TestBed`の`overrideComponent`メソッドを使ってモック化します。\n\n\n```js:app.component.spec.ts\nimport { async, ComponentFixture, TestBed, inject } from '@angular/core/testing';\nimport { FormsModule } from '@angular/forms';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/Rx';\n\nimport { AppComponent } from './app.component';\nimport { MessageService } from './message/message.service';\n\ndescribe('AppComponent', () => {\n  // テスト対象のComponent\n  let component: AppComponent;\n\n  // テスト対象のFixture\n  let fixture: ComponentFixture<AppComponent>;\n\n  // MessageServiceのモック\n  class MessageServiceMock {\n    getAll(): Observable<any> {\n      const response =  { messages : [\n        { message : 'テスト用メッセージ1' },\n        { message : 'テスト用メッセージ2' },\n        { message : 'テスト用メッセージ3' }\n      ]};\n\n      return Observable.from([response]);\n    }\n  }\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [ FormsModule ],\n      declarations: [\n        AppComponent\n      ],\n    })\n　　　　　　　　　// MessageServiceのモックを設定\n    .overrideComponent(AppComponent, {\n      set: {\n        providers: [\n          { provide: MessageService, useClass: MessageServiceMock },\n        ]\n      }\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(AppComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  }));\n\n  it('オブジェクトが生成されるか', async(() => {\n    const app = fixture.debugElement.componentInstance;\n    expect(app).toBeTruthy();\n  }));\n\n\n  it('メッセージを３件保持しているか', async(() => {\n    expect(component.messages).toEqual([\n        { message : 'テスト用メッセージ1' },\n        { message : 'テスト用メッセージ2' },\n        { message : 'テスト用メッセージ3' }\n    ]);\n  }));\n\n\n  it('画面にメッセージが３件表示されているか', async(() => {\n\n    const el = fixture.debugElement.nativeElement;\n\n    expect(el.querySelectorAll('li').length).toEqual(3);\n    expect(el.querySelectorAll('li')[0].textContent).toContain('テスト用メッセージ1');\n    expect(el.querySelectorAll('li')[1].textContent).toContain('テスト用メッセージ2');\n    expect(el.querySelectorAll('li')[2].textContent).toContain('テスト用メッセージ3');\n  }));\n});\n\n```\n\n\n#### src/app/message/message.service.spec.ts(一部抜粋)\nサービスのテストです。\nサーバとのやりとり(HTTP通信)については`MockBackend`を使ってモック化しています。\nなお`Error`は別途モックを作らなければなりません。\n全て載せると冗長なので`register`メソッドのテストは割愛しています。\n\n```js:message.service.spec.ts(一部抜粋)\nimport { TestBed, async, inject } from '@angular/core/testing';\nimport {HttpModule, BaseRequestOptions, Http, Response, ResponseOptions} from '@angular/http';\nimport {MockBackend, MockConnection} from '@angular/http/testing';\nimport { RequestMethod } from '@angular/http';\n\nimport { MessageService } from './message.service';\n\n\ndescribe('MessageService', () => {\n　　　　// HTTP通信エラー用のモック\n  class MockError extends Response implements Error {\n    name: any;\n    message: any;\n  }\n\n　　　　// HTTP通信はMockBackendでモック化\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpModule],\n      providers: [MessageService, {\n        provide: Http,\n        useFactory: (backend, options) => new Http(backend, options),\n        deps: [MockBackend, BaseRequestOptions]\n      }, MockBackend, BaseRequestOptions]\n    });\n  });\n\n  it('オブジェクトが生成されるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n    expect(service).toBeTruthy();\n  })));\n\n\n  describe('getAll', () => {\n\n    it('メッセージが取得できるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n　　　　　　　　　　　　// HTTP通信のモックで返す具体的な値の設定\n      backend.connections.subscribe((conn: MockConnection) => {\n        const body =  { messages : [\n          { message : 'テスト用メッセージ1' },\n          { message : 'テスト用メッセージ2' },\n          { message : 'テスト用メッセージ3' }\n        ]};\n\n        const ops = new ResponseOptions({\n          status: 200,\n          body: JSON.stringify(body)\n        });\n\n        conn.mockRespond(new Response(ops));\n      });\n\n　　　　　　　　　　　　// リクエストの内容を検証\n      backend.connections.subscribe((conn: MockConnection) => {\n        expect(conn.request.url).toEqual('/api/messages');\n        expect(conn.request.method).toEqual(RequestMethod.Get);\n      });\n\n　　　　　　　　　　　　// レスポンスの内容を検証\n      service.getAll().subscribe((res) => {\n        expect(res.messages.length).toEqual(3);\n        expect(res.messages).toEqual([\n          { message : 'テスト用メッセージ1' },\n          { message : 'テスト用メッセージ2' },\n          { message : 'テスト用メッセージ3' }\n        ]);\n      });\n    })));\n\n\n    it('異常時にエラーハンドリングされるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n　　　　　　　　　　　　// HTTP通信のモックで返す具体的な値の設定\n      backend.connections.subscribe((conn: MockConnection) => {\n        const body =  {\n          title : 'エラーが発生しました。',\n          error: 'エラー'\n        };\n\n        const ops = new ResponseOptions({\n          status: 500,\n          body: JSON.stringify(body)\n        });\n\n        conn.mockError(new MockError(ops));\n      });\n\n　　　　　　　　　　　　// リクエストの内容を検証\n      backend.connections.subscribe((conn: MockConnection) => {\n        expect(conn.request.url).toEqual('/api/messages');\n        expect(conn.request.method).toEqual(RequestMethod.Get);\n      });\n\n　　　　　　　　　　　　// レスポンスの内容を検証\n      service.getAll().subscribe(() => {\n        fail('エラーハンドリングされなかった。');\n      }, res => {\n        expect(res).toEqual({\n          title : 'エラーが発生しました。',\n          error: 'エラー'\n        });\n      });\n    })));\n\n  });\n\n\n});\n```\n\n\n\n### 3. サーバ側を作成\nプロジェクトの直下にserver_testディレクトリを作ってテストコードを書いていきます。\nどちらかというと結合テストよりで、１つ１つの資産に対してではなくapp.tsに対して、実際にDBに接続しながらAPIテストを行います。規模が小さい場合はコレで充分だと思います。\nまたExpressのテストフレームワークは[Mocha](https://mochajs.org/)が一般的ですが、クライアント側と統一したいので、今回は[Jasmine](https://jasmine.github.io/)を使うことにします。\n\n#### server_test/app.spec.ts(一部抜粋)\nポイントとしてはテスト実行前にMessageモデルを使ってDBを初期化していることです。\nそれによりテストデータがテストメソッドごとに想定する形になるようにしています。\n異常時のテストは、Messsageのfindメソッドでエラーが発生するようにJasmineの`spyOn`メソッドで処理を置き換えます。\n全て載せると冗長なのでメッセージ登録のテストは割愛しています。\n\n```js:app.spec.ts(一部抜粋)\nimport * as supertest from 'supertest';\n\nimport app from '../server/app';\nimport { Message } from '../server/models/message';\n\n\ndescribe('/api/messages', () => {\n  const request = supertest(app);\n  const endpoint = '/api/messages';\n\n  const messageAscending = (m1, m2) => {\n    if (m1.message > m2.message) {\n      return 1;\n    }\n\n    if (m1.message < m2.message) {\n      return -1;\n    }\n\n    return 0;\n  };\n\n  // テスト前にDBのmessagesを初期化する\n  beforeEach(() => {\n    Message.remove({}, () => {});\n  });\n\n\n  describe('Get', () => {\n\n    it('レスポンスがjson形式でステータスコードが200か', (done) => {\n\n　　　　　　　　　　　　　// リクエストを投げる\n      request.get(endpoint)\n        .expect((res) => {\n\n　　　　　　　　　　　　　　　　　　　　// 検証\n          expect(res.type).toEqual('application/json');\n          expect(res.statusCode).toEqual(200);\n        }).end(done);\n    });\n\n\n    it('メッセージ一覧が取得できるか', (done) => {\n\n      const testData = [\n        { message: 'テスト用メッセージ１' },\n        { message: 'テスト用メッセージ２' },\n        { message: 'テスト用メッセージ３' },\n      ];\n　　　　　　　　　　　　\n　　　　　　　　　　　　// 事前準備（テストデータを作成）\n      Message.create(testData, (erro , doc ) => {\n\n　　　　　　　　　　　　　　　　　// リクエストを投げる\n        request.get(endpoint)\n          .expect((res) => {\n　　　　　　　　　　　　　　　　　　　　　　　　\n　　　　　　　　　　　　　　　　　　　　　　　　// 検証\n            const sortedMessages = res.body.messages.sort(messageAscending);\n\n            expect(sortedMessages.length).toEqual(3);\n            expect(sortedMessages[0].message).toEqual('テスト用メッセージ１');\n            expect(sortedMessages[1].message).toEqual('テスト用メッセージ２');\n            expect(sortedMessages[2].message).toEqual('テスト用メッセージ３');\n          })\n          .end(done);\n      });\n    });\n\n\n    it('異常時にエラーハンドリングされるか', (done) => {\n\n      // エラーとなるようにMessageのfindメソッドを置き換える\n      spyOn(Message, 'find').and.callFake(function(callback) {\n        callback(new Error('エラー'), null);\n      });\n　　　　　　　　　　　　　\n　　　　　　　　　　　　// リクエストを投げる\n      request.get(endpoint)\n        .expect((res) => {\n\n          // 検証\n          expect(res.type).toEqual('application/json');\n          expect(res.statusCode).toEqual(500);\n\n          expect(res.body.title).toEqual('エラーが発生しました。');\n          expect(res.body.error).toEqual('エラー');\n        })\n        .end(done);\n    });\n\n  });\n});\n```\n\n\n\n### 4. 単体テスト周りの環境を整備\nE2Eの説明に入る前に、いったん単体テスト周りの環境を整備します。\n\n\n#### package.json\n[前回](http://qiita.com/Takumon/items/572438809384e2e11792#pakcagejson)作成したものをベースに単体テストのスクリプトを追加してください。\n\n```json:package.json\n \"scripts\": {\n    ...\n    \"test\": \"run-p test:*\",\n    \"test:client\": \"ng test\",\n    \"test:server\": \"npm-run-all -s build:server_test -p watch:server_test  boot:server_test\",\n    \"watch:server_test\": \"tsc -w -p ./server_test/tsconfig.server_test.json\",\n    \"boot:server_test\": \"nodemon ./dist/server_test/test.server.js\",\n    \"build:server_test\": \"tsc -p ./server/tsconfig.server.json\",\n    ...\n  },\n```\n\n\n* **test**でクライアント側とサーバ側のテストを実行します。\n* **test:client**でクライアント側のテストを実行します。Angular CLIのngコマンドにお任せしています。\n* **watch:server_test**でサーバ側テスト資産をウォッチして変更があればコンパイルするようにします。\n* **boot:server_test**でコンパイルしたサーバ側テスト資産を起動します。nodeではなくnodemonを使うことで資産に更新があった場合でも即座に反映するようにしています。\n* **build:server_test**でサーバ側テスト資産をコンパイルします。コンパイル時の設定は下で触れるserver_test/test.server.conf.tsを使います。\n\n#### server_test/test.server.ts\nサーバ側テストの起動処理を書きます。\nレポーターには[jasmine-spec-reporter](https://www.npmjs.com/package/jasmine-spec-reporter)を使いましょう。このライブラリはAngular CLIで作ったプロジェクトにはデフォルトでインストール済みです。\n\n```js:test.server.ts\nimport { SpecReporter, DisplayProcessor } from 'jasmine-spec-reporter';\nconst Jasmine = require('jasmine');\nimport SuiteInfo = jasmine.SuiteInfo;\n\nimport { config } from './test.server.conf';\n\n\nclass CustomProcessor extends DisplayProcessor {\n    public displayJasmineStarted(info: SuiteInfo, log: string): string {\n        return `TypeScript ${log}`;\n    }\n}\n\nconst runner = new Jasmine();\nrunner.loadConfig(config);\nrunner.addReporter(new SpecReporter({\n    customProcessors: [CustomProcessor],\n}));\nrunner.onComplete(function(passed){\n  if ( passed ) {\n    console.log('Success');\n  } else {\n    console.error('Failed');\n  }\n});\n\nrunner.execute();\n```\n\n\n#### server_test/test.server.conf.ts\nサーバ側テスト起動時の設定です。\n注意点として`spec_files`に指定する相対パスはプロジェクト直下が起点になります。そのため`__dirname`を使って指定してください。\n\n```js:test.server.conf.ts\nexport const config = {\n  spec_dir: '.',\n  spec_files: [\n    `${__dirname}/*spec.js`\n  ],\n  'stopSpecOnExpectationFailure': false,\n  'random': false\n};\n```\n\n\n\n#### server_test/tsconfig.server_test.json\n\nサーバ側テスト資産をコンパイルする時の設定ファイルです。\n\n```json:tsconfig.server_test.json\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"preserveConstEnums\": true,\n    \"outDir\": \"../dist\",\n    \"mapRoot\": \"../dist\",\n    \"module\": \"commonjs\"\n  } ,\n  \"include\": [\n    \"**/*.spec.ts\",\n    \"./test.server.ts\",\n    \"./test.server.conf.ts\"\n  ]\n}\n```\n\n`outDir`が`../dist/server_test`ではなく`../dist`であることに注意してください。\nテスト資産は`server`ディレクトリ配下の資産に依存しているため、`../dist/server_test`を指定するとコンパイルした時に下記のように出力されてしまいます。\n\n```:\u001c（悪い例）outDirに\"../dist/server_test\"を指定したときのコンパイル結果\n.\n└── dist\n    └── server_test\n        ├── server\n        └── server_test \n```\n```:\u001c（良い例）outDirに\"../dist\"を指定したときのコンパイル結果\n.\n└── dist\n    ├── server\n    └── server_test \n```\n\n\n### 5. E2Eテストを作成\n単体テストを作成したので次はE2Eテストを作りましょう。\nAngular CLIで作成したプロジェクトにデフォルトで用意されている[Protractor](http://www.protractortest.org/#/)を使ったテストコードを作成します。\n\n#### e2e/app.e2e-spec.ts\n基本的にelementメソッドで要素を取得して、sendKeysメソッドやclickメソッドで操作を行います。\n\n```js:app.e2e-spec.ts\nimport { Angular4Express4Typescritp2Page } from './app.po';\nimport { browser, element, by } from 'protractor';\n\n\ndescribe('E2Eテスト', () => {\n  let page: Angular4Express4Typescritp2Page;\n\n  beforeEach(() => {\n    page = new Angular4Express4Typescritp2Page();\n  });\n\n  it('画面タイトルが正しいか', () => {\n    page.navigateTo();\n    expect(page.getParagraphText()).toEqual('メッセージ一覧');\n  });\n\n\n  it('メッセージが登録できるか', () => {\n    page.navigateTo();\n    const newMessage = `サンプルメッセージ ${new Date().toString()}`;\n    element(by.id('registerMessage')).sendKeys(newMessage);\n\n    element(by.id('registerMessageButton')).click();\n\n    // 登録後メッセージ入力項目が初期化されているか\n    expect(element(by.id('registerMessage')).getText()).toEqual('');\n\n    // 登録後一覧に登録したメッセージが含まれているか\n    const messages = element(by.id('messageList')).all(by.tagName('li'));\n    expect(messages.last().getText()).toEqual(newMessage);\n  });\n\n});\n```\n\n### 6. E2Eテスト周りの環境を整備\n\n#### package.json\nAngular CILプロジェクトデフォルトの\"e2e\"コマンドは削除して、スクリプトに下記を追加してください。\n\n```json:package.json\n \"scripts\": {\n    ...\n    \"e2e\": \"npm-run-all -s  webdriver:update -p webdriver:start protractor\",\n    \"webdriver:update\": \"webdriver-manager update\",\n    \"webdriver:start\": \"webdriver-manager start\",\n    \"protractor\": \"protractor protractor.conf.js\",\n    ...\n  },\n```\n\n* **e2e**でE2Eテストを実行します。Angular CILプロジェクトデフォルトの`e2e`コマンド(= `ng e2e`コマンド)は使いません。`ng　e2e`はクライアント資産だけコンパイルして起動する処理が入っているからです。今回はビルドしたアプリ(クライアントとサーバが１つにまとまったアプリ)に対してテストします。\n* **webdriver:update**でE2Eテストに必要なWebDriverをインストールまたは更新します。\n* **webdriver:start**でWebDriverを起動します。Protractorのテストは事前にWebDriverを起動しておく必要があります。\n* **protractor**でE2Eテストを実行します。起動時の設定は下で触れるprotractor.conf.jsを使います。\n\n#### protractor.conf.js\nデフォルトでbaseUrlのポートは4200になっていますが、今回はビルドしたアプリに対してテストするので3000を指定します。\n\n```js:protractor.conf.js\nexports.config = {\n  ...\n  baseUrl: 'http://localhost:3000/',\n  ...\n}\n```\n\n### 7. 試してみる\n#### 単体テストを実行してみる\n* MongoDBをローカルで立ち上げる\n    * 具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。\n\n* プロジェクト直下で`npm test`コマンドを実行するとテストが実行されます。クライアント側のテスト結果はブラウザに、サーバ側はターミナル（またはコンソール）に表示されます。資産はウォッチしているので、テストコードを修正すると、コンパイルされ再度テストが実行されるでしょう。\n\n![10_単体テスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png)\n\n\n\n#### E2Eテストを実行してみる\n* MongoDBをローカルで立ち上げる\n    * これも単体テストと同じでDBを事前に起動しておいてください。\n \n* ビルドしたアプリを起動する\n    * プロジェクト直下で`npm run buildRun`を実行し、ビルド資産を起動します。\n\n* `npm run e2e`する\n    * 別ターミナル（またはコマンドプロンプト）を開き、プロジェクト直下で`npm run e2e`コマンドを実行します。するとブラウザが立ち上がりテストが実行されます。\n![20_E2Eテスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png)\n\n\n## 終わりに\n今回はMEANスタックアプリの単体テスト、E2Eテストについて紹介しました。\nこれでビルドとテストができるようになったので、次回「その3. Dockerデプロイ編」では、Dockerでアプリを起動する方法とDockerでアプリのイメージを作ってデプロイする方法ついて紹介します。\n\n","comments_count":0,"created_at":"2017-07-24T07:12:10+09:00","likes_count":9,"reactions_count":0},"matches":5,"weight":300,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"TypeScript"},{"weight":50,"keyword":"AngularJS"},{"weight":50,"keyword":"Qiita"}],"avgWeight":60,"totalWeight":56,"threshold":10,"isRelated":true},{"node":{"fields":{"slug":"/b4c7d1b9-428f-569a-af40-527d89794a77/","title":"TypeScriptで簡単にChrome Extensionを作る方法","date":"2017-12-20T02:36:27+09:00","excerpt":"Githubで草を生やす活動は楽しいですね!増えてきて芝みたいになると達成感があって、モチベーションも上がります。ところで、この前の10/30に草がハロウィン仕様になっていたのを見て、草を自分の好みの色を変更できればもっと楽しくなるのでは?...","tags":["JavaScript","GitHub","TypeScript","chrome-extension","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"b4c7d1b9-428f-569a-af40-527d89794a77","title":"TypeScriptで簡単にChrome Extensionを作る方法","rendered_body":"<p>Githubで草を生やす活動は楽しいですね!<br>\n増えてきて芝みたいになると達成感があって、モチベーションも上がります。<br>\nところで、この前の10/30に草がハロウィン仕様になっていたのを見て、<br>\n草を自分の好みの色を変更できればもっと楽しくなるのでは?と思い<br>\n<a href=\"https://chrome.google.com/webstore/detail/github-contributions-pain/bdibnecenojddgmjplnfehpjdmkiddok?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">草の色が変更できる（ついでにお絵描きもできる）Chrome Extension</a>を作りました。<br>\n<strong>その時に<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使って、TypeScriptで簡単にChrome Extensionが作れたので、アプリ作成から公開までの手順をまとめます。</strong></p>\n\n<h2>\n<span id=\"1-プロジェクトの雛形を生成する\" class=\"fragment\"></span><a href=\"#1-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E9%9B%9B%E5%BD%A2%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>1. プロジェクトの雛形を生成する</h2>\n\n<p>yomanと<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>で簡単に雛形が作れるのでコレらを使っていきます。</p>\n\n<ul>\n<li>\n<code>yoman</code>と<code>generator-chrome-extension-kickstart-typescript</code>をグローバルインストールします</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install -g yo generator-chrome-extension-kickstart-typescript \n</pre></div></div>\n\n<ul>\n<li>プロジェクトのルートフォルダを作成後、ルートフォルダに移動して<code>yo</code>コマンドで雛形を生成します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ mkdir project\n$ cd project\n$ yo chrome-extension-kickstart-typescript \n</pre></div></div>\n\n<ul>\n<li>いくつか質問されるので適当に答えます\n\n<ul>\n<li>\n<strong>What would you like to call this extension?</strong>\n\n<ul>\n<li>プロジェクト名を入力します。デフォルトはプロジェクトのフォルダ名</li>\n</ul>\n</li>\n<li>\n<strong>And how would you call it if you only had 12 characters (short_name)?</strong>\n\n<ul>\n<li>プロジェクトの略称を12文字以内で入力します</li>\n</ul>\n</li>\n<li>\n<strong>How would you like to describe this extension?</strong>\n\n<ul>\n<li>プロジェクト概要を入力します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to use UI Action?</strong>\n\n<ul>\n<li>作りたいUI Actionに応じて、<code>No</code>,<code>Browser</code>,<code>Page</code>のいずれかを選択します\n\n<ul>\n<li>\n<code>No</code> ・・・ UI Actionを使わない場合</li>\n<li>\n<code>Browser</code> ・・・ ツールバーの右にアイコンが常駐するタイプのChrome拡張を作成する場合</li>\n<li>\n<code>Page</code> ・・・ 特定のWebサイト観覧時のみにアドレスバー右にアイコンが表示されるタイプのChrome拡張を作成する場合</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to override a chrome page?</strong>\n\n<ul>\n<li>Chromeの内部ページを書き換えるかどうかで、<code>No</code>,<code>Bookmarks Page</code>,<code>History Page</code>,<code>Newtab Page</code>のいずれかを選択します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like more UI Features?</strong>\n\n<ul>\n<li>作りたいUIを複数選択します\n\n<ul>\n<li>\n<code>Options Page</code> ・・・ オプション画面を作りたい場合</li>\n<li>\n<code>Devtools Page</code> ・・・ 開発者ツールを拡張したい場合</li>\n<li>\n<code>Content Scripts</code> ・・・ Webで表示している画面にJavaScriptを差し込んで何か処理をしたい場合</li>\n<li>\n<code>Omnibox</code> ・・・ アドレスバーを拡張したい時に選択</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to use permissions?</strong>\n\n<ul>\n<li>使用するパーミッションを複数選択します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to install promo images for the Chrome Web Store?</strong>\n\n<ul>\n<li>Chromeストアで使う宣伝用画像を自動で生成するかを選択します</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<p>※自分は下記のように答えました<br>\n<strong>What would you like to call this extension?</strong> =&gt; github-contributions-paint<br>\n<strong>And how would you call it if you only had 12 characters (short_name)?</strong> =&gt;  github-paint<br>\n<strong>How would you like to describe this extension?</strong> =&gt;  You can paint github contributions!<br>\n<strong>Would you like to use UI Action?</strong> =&gt; Browser<br>\n<strong>Would you like to override a chrome page?</strong> =&gt;  No<br>\n<strong>Would you like more UI Features?</strong> =&gt;  Content Scripts<br>\n<strong>Would you like to use permissions?</strong> =&gt;  Tabs<br>\n<strong>Would you like to install promo images for the Chrome Web Store?</strong> =&gt;  Yes</p>\n\n<ul>\n<li>すると雛形が生成されます</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">生成された雛形のフォルダ構成</span></div>\n<div class=\"highlight\"><pre>github-contributions-paint\n├── README.md\n├── app\n│   ├── images       　　　    　・・・Chromeウェブストア公開時に必要なアイコン格納フォルダ\n│   │   ├── icon-128.png\n│   │   ├── icon-16.png\n│   │   ├── icon-19.png\n│   │   └── icon-38.png\n│   ├── manifest.json          ・・・Chrome拡張の設定を定義するファイル\n│   ├── pages                  ・・・HTMLファイル格納フォルダ\n│   │   └── popup.html         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── scripts                ・・・TSファイル格納フォルダ\n│   │   ├── background.ts      ・・・バックグランド処理を記述するファイル\n│   │   └── popup.ts           ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── styles                 ・・・CSSファイル格納フォルダ\n│   │   └── popup.scss         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── _locales\n│   │   └── en\n│   │       └── messages.json ・・・アプリの設定ファイル\n│   └── fonts\n├── promo                     ・・・Chromeウェブストア公開時に必要な宣伝用画像の格納フォルダ\n│   ├── Chrome-Webstore-Icon_128x128.png\n│   ├── Promo-Image-Large_920x680.png\n│   ├── Promo-Image-Marquee_1400x560.png\n│   ├── Promo-Image-Small_440x280.png\n│   ├── Screenshot_1280x800.png\n│   └── Screenshot_640x400.png\n├── dist\n├── gulpfile.babel.js\n├── node_modules\n├── package-lock.json\n├── package.json\n├── tasks\n├── tsconfig.json\n└── tslint.json\n\n</pre></div>\n</div>\n\n<ul>\n<li>最後にTypeScriptをグローバルインストールしていない場合は、グローバルインストールまたはプロジェクトにインストールします</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install typescript --save-dev\n</pre></div></div>\n\n<p>==2018/11/24 追記(ここから)==</p>\n\n<ul>\n<li>このまま次手順にいくと警告がでるのでそれを防ぐためにgulpのバージョンを下げます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install gulp@3.9.0 --save-dev\n</pre></div></div>\n\n<p>※関連する<a href=\"https://github.com/gulpjs/gulp/issues/1631\" rel=\"nofollow noopener\" target=\"_blank\">issue</a>、<a href=\"https://stackoverflow.com/questions/48568942/failed-to-load-external-module-babel-register-while-gulp\" rel=\"nofollow noopener\" target=\"_blank\">stackoverflow</a></p>\n\n<p>==2018/11/24 追記(ここまで)==</p>\n\n<h2>\n<span id=\"2-作ったchrome-extensionを動かしてみる\" class=\"fragment\"></span><a href=\"#2-%E4%BD%9C%E3%81%A3%E3%81%9Fchrome-extension%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>2. 作ったChrome Extensionを動かしてみる</h2>\n\n<p>雛形を作成したら早速動かすことができます</p>\n\n<ul>\n<li>ビルドコマンドを実行します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run dev:chrome\n</pre></div></div>\n\n<ul>\n<li><p>Chromeで<code>chrome://extensions</code>を開いて<code>パッケージ化されていない拡張機能を読み込む</code>ボタンをクリック<br>\n<a href=\"https://camo.qiitausercontent.com/88e144ea0fc880ccec17978afc9ec782fb0d62c1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35613534396134352d386563342d383935352d623733332d3837353534396638616433312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/88e144ea0fc880ccec17978afc9ec782fb0d62c1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35613534396134352d386563342d383935352d623733332d3837353534396638616433312e706e67\" alt=\"手順_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5a549a45-8ec4-8955-b733-875549f8ad31.png\"></a></p></li>\n<li><p>プロジェクトルート/dist配下の<code>chrome</code>フォルダを選択<br>\n<a href=\"https://camo.qiitausercontent.com/53813821851801eddbed514961987f9070733381/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393161313636652d366532652d336633372d373130652d6565373532306339336563322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/53813821851801eddbed514961987f9070733381/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393161313636652d366532652d336633372d373130652d6565373532306339336563322e706e67\" alt=\"操作_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f91a166e-6e2e-3f37-710e-ee7520c93ec2.png\"></a></p></li>\n<li><p>するとプロジェクトが<a>Chrome Extension管理画面</a>に追加されて、ブラウザ右上にアイコンが表示されます<br>\n<a href=\"https://camo.qiitausercontent.com/e2e0fba31b666b0fea44ded1ded106236dd280e8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36316232653131332d653532302d376566382d633437652d3432366265393361613834622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e2e0fba31b666b0fea44ded1ded106236dd280e8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36316232653131332d653532302d376566382d633437652d3432366265393361613834622e706e67\" alt=\"動作確認1_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/61b2e113-e520-7ef8-c47e-426be93aa84b.png\"></a></p></li>\n<li><p>アイコンをクリックして動作検証ができます<br>\n<a href=\"https://camo.qiitausercontent.com/909be0f655c64c11846b9b3ca31630357ddd7121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33666631316537332d383162332d636435612d386537302d3961373534613661393936352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/909be0f655c64c11846b9b3ca31630357ddd7121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33666631316537332d383162332d636435612d386537302d3961373534613661393936352e706e67\" alt=\"動作確認_11.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/3ff11e73-81b3-cd5a-8e70-9a754a6a9965.png\"></a></p></li>\n</ul>\n\n<h2>\n<span id=\"3-開発中にchrome-extensionの動作確認する\" class=\"fragment\"></span><a href=\"#3-%E9%96%8B%E7%99%BA%E4%B8%AD%E3%81%ABchrome-extension%E3%81%AE%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>3. 開発中にChrome Extensionの動作確認する</h2>\n\n<p>雛形の動作検証ができたらTypeScriptファイルを編集して処理を追加していきます。<br>\n<code>npm run dev:chrome</code>を実行した後、下記手順繰り返すことで、ソースコードを修正しながら随時動作検証ができます。</p>\n\n<ul>\n<li>資産（TypeScriptやHTML,CSS）を修正する（勝手にビルドが走ります）</li>\n<li>最新のビルド資産を取り込むため<a>Chrome Extension管理画面</a>でリロードをクリックします\n<a href=\"https://camo.qiitausercontent.com/090a13aa3e617e29329421ec4c5fba4a56e1fb9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35663936353163362d373337662d643664622d383062662d3434613731363662323030352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/090a13aa3e617e29329421ec4c5fba4a56e1fb9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35663936353163362d373337662d643664622d383062662d3434613731363662323030352e706e67\" alt=\"開発手順_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5f9651c6-737f-d6db-80bf-44a7166b2005.png\"></a>\n</li>\n<li>Chrome Extensionの動作確認をする</li>\n</ul>\n\n<h2>\n<span id=\"4-アイコンと宣伝用画像を作る\" class=\"fragment\"></span><a href=\"#4-%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%81%A8%E5%AE%A3%E4%BC%9D%E7%94%A8%E7%94%BB%E5%83%8F%E3%82%92%E4%BD%9C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>4. アイコンと宣伝用画像を作る</h2>\n\n<p>アプリを公開する前に、アイコンと宣伝用画像を作成し、雛形生成時のデフォルト資産と差し替えます。<br>\nデザイナーさんなら苦労しないでしょうが、自分はこれが一番大変でした。<br>\n3つのアイコンと3つの宣伝用画像が必要です。</p>\n\n<h3>\n<span id=\"アイコン\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3\"><i class=\"fa fa-link\"></i></a>アイコン</h3>\n\n<ul>\n<li>128x128\n\n<ul>\n<li>必須。インストール時やChromeウェブストアで表示する用</li>\n</ul>\n</li>\n<li>48x48\n\n<ul>\n<li>拡張機能の管理ページで表示する用</li>\n</ul>\n</li>\n<li>16x16\n\n<ul>\n<li>ブラウザ右上に表示する用</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"宣伝用画像\" class=\"fragment\"></span><a href=\"#%E5%AE%A3%E4%BC%9D%E7%94%A8%E7%94%BB%E5%83%8F\"><i class=\"fa fa-link\"></i></a>宣伝用画像</h3>\n\n<ul>\n<li>440x280\n\n<ul>\n<li>必須</li>\n</ul>\n</li>\n<li>920x680\n\n<ul>\n<li>大きめの画像</li>\n</ul>\n</li>\n<li>1400x560\n\n<ul>\n<li>ChromeExtensionをChrome Storeで選択した時に表示される画像</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"5-chromeウェブストアに公開する\" class=\"fragment\"></span><a href=\"#5-chrome%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B9%E3%83%88%E3%82%A2%E3%81%AB%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>5. Chromeウェブストアに公開する</h2>\n\n<ul>\n<li>雛形生成時バージョンが0.0.0になっており、バージョンが低すぎて公開できない状態なので、<code>manifest.json</code>と<code>package.json</code>のバージョン指定を0.0.1にあげます</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">manifest.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n  </span><span class=\"s2\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0.0.1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">&lt;-</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">0</span><span class=\"err\">から</span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">1</span><span class=\"err\">にあげる</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n  </span><span class=\"s2\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0.0.1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">&lt;-</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">0</span><span class=\"err\">から</span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">1</span><span class=\"err\">にあげる</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>下記コマンドで公開用のzipファイルを作成します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run build:chrome\n</pre></div></div>\n\n<ul>\n<li><p><a href=\"https://chrome.google.com/webstore/category/extensions\" rel=\"nofollow noopener\" target=\"_blank\">Chromeウェブストア</a>のデベロッパーダッシュボードを開きます。Chromeアカウントでログインします<br>\n<a href=\"https://camo.qiitausercontent.com/d0db218423075317e350940d46d6510353fc81bd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65646234386163392d303138312d316437382d633761642d6130383237313261663031632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d0db218423075317e350940d46d6510353fc81bd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65646234386163392d303138312d316437382d633761642d6130383237313261663031632e706e67\" alt=\"アプリ登録_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/edb48ac9-0181-1d78-c7ad-a082712af01c.png\"></a></p></li>\n<li><p>ダッシュボードで<code>新しいアイテムを追加する</code>を選択します<br>\n<a href=\"https://camo.qiitausercontent.com/70b8f467a4819f7fd2251cf96abf3749b7626eeb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37383761336132352d326539332d363138362d313765642d3662313962626233626162352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/70b8f467a4819f7fd2251cf96abf3749b7626eeb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37383761336132352d326539332d363138362d313765642d3662313962626233626162352e706e67\" alt=\"アプリ登録_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/787a3a25-2e93-6186-17ed-6b19bbb3bab5.png\"></a></p></li>\n<li><p><code>ファイルを追加</code>で作成したzipファイル(プロジェクトルート/packages配下にあります)を選択後、<code>アップロード</code>を選択します<br>\n<a href=\"https://camo.qiitausercontent.com/2bc72004e70eb79c898506904f452d396754f39f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32323362343632342d643839322d336562382d356561382d3733633461616632623562382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2bc72004e70eb79c898506904f452d396754f39f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32323362343632342d643839322d336562382d356561382d3733633461616632623562382e706e67\" alt=\"アプリ登録_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/223b4624-d892-3eb8-5ea8-73c4aaf2b5b8.png\"></a></p></li>\n<li><p>説明、アイコン、宣伝用画像、カテゴリを入力して<code>変更を公開</code>をクリックします<br>\n<a href=\"https://camo.qiitausercontent.com/efa7c9ab0ced7326af8c7cb2d03fe9c2282e7f11/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323466303335352d666537622d373931382d326437352d3039633333636365356530302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/efa7c9ab0ced7326af8c7cb2d03fe9c2282e7f11/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323466303335352d666537622d373931382d326437352d3039633333636365356530302e706e67\" alt=\"登録_5.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/724f0355-fe7b-7918-2d75-09c33cce5e00.png\"></a></p></li>\n<li><p>これで公開作業は完了です。しばらくするとChromeウェブストアに公開されます</p></li>\n</ul>\n\n<h2>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h2>\n\n<p>今回は<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使って、TypeScriptでChrome Extensionを作成、公開する手順をまとめました。<br>\n最初はTypeScriptでChrome Extensionを作るのは、ビルドの設定など色々めんどくさそうだぁと思っていましたが、<br>\n<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使うことで、簡単に作成から公開まで実現できました。<br>\nブラウザでのちょっとした作業を効率化するのにChrome Extentionは非常に強力なツールなので、今後なにかアイディアがあればまた作ってみたいと思います。</p>\n","body":"Githubで草を生やす活動は楽しいですね!\n増えてきて芝みたいになると達成感があって、モチベーションも上がります。\nところで、この前の10/30に草がハロウィン仕様になっていたのを見て、\n草を自分の好みの色を変更できればもっと楽しくなるのでは?と思い\n[草の色が変更できる（ついでにお絵描きもできる）Chrome Extension](https://chrome.google.com/webstore/detail/github-contributions-pain/bdibnecenojddgmjplnfehpjdmkiddok?hl=ja)を作りました。\n**その時に[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使って、TypeScriptで簡単にChrome Extensionが作れたので、アプリ作成から公開までの手順をまとめます。**\n\n## 1. プロジェクトの雛形を生成する\nyomanと[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)で簡単に雛形が作れるのでコレらを使っていきます。\n\n* `yoman`と`generator-chrome-extension-kickstart-typescript`をグローバルインストールします\n\n```\n$ npm install -g yo generator-chrome-extension-kickstart-typescript \n```\n* プロジェクトのルートフォルダを作成後、ルートフォルダに移動して`yo`コマンドで雛形を生成します\n\n```\n$ mkdir project\n$ cd project\n$ yo chrome-extension-kickstart-typescript \n```\n\n* いくつか質問されるので適当に答えます\n    * **What would you like to call this extension?**\n        * プロジェクト名を入力します。デフォルトはプロジェクトのフォルダ名\n    * **And how would you call it if you only had 12 characters (short_name)?**\n        * プロジェクトの略称を12文字以内で入力します\n    * **How would you like to describe this extension?**\n        * プロジェクト概要を入力します\n    * **Would you like to use UI Action?**\n        * 作りたいUI Actionに応じて、`No`,`Browser`,`Page`のいずれかを選択します\n            * `No` ・・・ UI Actionを使わない場合\n            * `Browser` ・・・ ツールバーの右にアイコンが常駐するタイプのChrome拡張を作成する場合\n            * `Page` ・・・ 特定のWebサイト観覧時のみにアドレスバー右にアイコンが表示されるタイプのChrome拡張を作成する場合\n    * **Would you like to override a chrome page?**\n        * Chromeの内部ページを書き換えるかどうかで、`No`,`Bookmarks Page`,`History Page`,`Newtab Page`のいずれかを選択します\n    * **Would you like more UI Features?**\n        * 作りたいUIを複数選択します\n            * `Options Page` ・・・ オプション画面を作りたい場合\n            * `Devtools Page` ・・・ 開発者ツールを拡張したい場合\n            * `Content Scripts` ・・・ Webで表示している画面にJavaScriptを差し込んで何か処理をしたい場合\n            * `Omnibox` ・・・ アドレスバーを拡張したい時に選択\n    * **Would you like to use permissions?**\n        * 使用するパーミッションを複数選択します\n    * **Would you like to install promo images for the Chrome Web Store?**\n        * Chromeストアで使う宣伝用画像を自動で生成するかを選択します\n\n\n※自分は下記のように答えました\n**What would you like to call this extension?** => github-contributions-paint\n**And how would you call it if you only had 12 characters (short_name)?** =>  github-paint\n**How would you like to describe this extension?** =>  You can paint github contributions!\n**Would you like to use UI Action?** => Browser\n**Would you like to override a chrome page?** =>  No\n**Would you like more UI Features?** =>  Content Scripts\n**Would you like to use permissions?** =>  Tabs\n**Would you like to install promo images for the Chrome Web Store?** =>  Yes\n\n* すると雛形が生成されます\n\n```:生成された雛形のフォルダ構成\ngithub-contributions-paint\n├── README.md\n├── app\n│   ├── images       　　　    　・・・Chromeウェブストア公開時に必要なアイコン格納フォルダ\n│   │   ├── icon-128.png\n│   │   ├── icon-16.png\n│   │   ├── icon-19.png\n│   │   └── icon-38.png\n│   ├── manifest.json          ・・・Chrome拡張の設定を定義するファイル\n│   ├── pages                  ・・・HTMLファイル格納フォルダ\n│   │   └── popup.html         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── scripts                ・・・TSファイル格納フォルダ\n│   │   ├── background.ts      ・・・バックグランド処理を記述するファイル\n│   │   └── popup.ts           ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── styles                 ・・・CSSファイル格納フォルダ\n│   │   └── popup.scss         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── _locales\n│   │   └── en\n│   │       └── messages.json ・・・アプリの設定ファイル\n│   └── fonts\n├── promo                     ・・・Chromeウェブストア公開時に必要な宣伝用画像の格納フォルダ\n│   ├── Chrome-Webstore-Icon_128x128.png\n│   ├── Promo-Image-Large_920x680.png\n│   ├── Promo-Image-Marquee_1400x560.png\n│   ├── Promo-Image-Small_440x280.png\n│   ├── Screenshot_1280x800.png\n│   └── Screenshot_640x400.png\n├── dist\n├── gulpfile.babel.js\n├── node_modules\n├── package-lock.json\n├── package.json\n├── tasks\n├── tsconfig.json\n└── tslint.json\n\n```\n\n* 最後にTypeScriptをグローバルインストールしていない場合は、グローバルインストールまたはプロジェクトにインストールします\n\n```\n$ npm install typescript --save-dev\n```\n\n==2018/11/24 追記(ここから)==\n\n* このまま次手順にいくと警告がでるのでそれを防ぐためにgulpのバージョンを下げます。\n\n```\n$ npm install gulp@3.9.0 --save-dev\n```\n\n<small>※関連する[issue](https://github.com/gulpjs/gulp/issues/1631)、[stackoverflow](https://stackoverflow.com/questions/48568942/failed-to-load-external-module-babel-register-while-gulp)</small>\n\n==2018/11/24 追記(ここまで)==\n## 2. 作ったChrome Extensionを動かしてみる\n雛形を作成したら早速動かすことができます\n\n* ビルドコマンドを実行します\n\n```\n$ npm run dev:chrome\n```\n\n* Chromeで`chrome://extensions`を開いて`パッケージ化されていない拡張機能を読み込む`ボタンをクリック\n![手順_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5a549a45-8ec4-8955-b733-875549f8ad31.png)\n\n* プロジェクトルート/dist配下の`chrome`フォルダを選択\n![操作_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f91a166e-6e2e-3f37-710e-ee7520c93ec2.png)\n\n* するとプロジェクトが[Chrome Extension管理画面](chrome://extensions/)に追加されて、ブラウザ右上にアイコンが表示されます\n![動作確認1_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/61b2e113-e520-7ef8-c47e-426be93aa84b.png)\n\n\n* アイコンをクリックして動作検証ができます\n![動作確認_11.png](https://qiita-image-store.s3.amazonaws.com/0/49915/3ff11e73-81b3-cd5a-8e70-9a754a6a9965.png)\n\n\n## 3. 開発中にChrome Extensionの動作確認する\n雛形の動作検証ができたらTypeScriptファイルを編集して処理を追加していきます。\n`npm run dev:chrome`を実行した後、下記手順繰り返すことで、ソースコードを修正しながら随時動作検証ができます。\n\n* 資産（TypeScriptやHTML,CSS）を修正する（勝手にビルドが走ります）\n* 最新のビルド資産を取り込むため[Chrome Extension管理画面](chrome://extensions/)でリロードをクリックします\n![開発手順_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5f9651c6-737f-d6db-80bf-44a7166b2005.png)\n* Chrome Extensionの動作確認をする\n\n## 4. アイコンと宣伝用画像を作る\nアプリを公開する前に、アイコンと宣伝用画像を作成し、雛形生成時のデフォルト資産と差し替えます。\nデザイナーさんなら苦労しないでしょうが、自分はこれが一番大変でした。\n3つのアイコンと3つの宣伝用画像が必要です。\n\n### アイコン\n* 128x128\n    * 必須。インストール時やChromeウェブストアで表示する用\n* 48x48\n    * 拡張機能の管理ページで表示する用\n* 16x16\n    * ブラウザ右上に表示する用\n  \n### 宣伝用画像\n* 440x280\n    * 必須\n* 920x680\n    * 大きめの画像\n* 1400x560\n    * ChromeExtensionをChrome Storeで選択した時に表示される画像\n\n## 5. Chromeウェブストアに公開する\n* 雛形生成時バージョンが0.0.0になっており、バージョンが低すぎて公開できない状態なので、`manifest.json`と`package.json`のバージョン指定を0.0.1にあげます\n\n```json:manifest.json\n{\n  ・・・\n  \"version\": \"0.0.1\", <- 0.0.0から0.0.1にあげる\n  ・・・\n}\n```\n\n```json:package.json\n{\n  ・・・\n  \"version\": \"0.0.1\", <- 0.0.0から0.0.1にあげる\n  ・・・\n}\n```\n\n* 下記コマンドで公開用のzipファイルを作成します\n\n```\n$ npm run build:chrome\n```\n\n* [Chromeウェブストア](https://chrome.google.com/webstore/category/extensions)のデベロッパーダッシュボードを開きます。Chromeアカウントでログインします\n![アプリ登録_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/edb48ac9-0181-1d78-c7ad-a082712af01c.png)\n\n* ダッシュボードで`新しいアイテムを追加する`を選択します\n![アプリ登録_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/787a3a25-2e93-6186-17ed-6b19bbb3bab5.png)\n\n* `ファイルを追加`で作成したzipファイル(プロジェクトルート/packages配下にあります)を選択後、`アップロード`を選択します\n![アプリ登録_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/223b4624-d892-3eb8-5ea8-73c4aaf2b5b8.png)\n\n* 説明、アイコン、宣伝用画像、カテゴリを入力して`変更を公開`をクリックします\n![登録_5.png](https://qiita-image-store.s3.amazonaws.com/0/49915/724f0355-fe7b-7918-2d75-09c33cce5e00.png)\n\n* これで公開作業は完了です。しばらくするとChromeウェブストアに公開されます\n\n\n## 最後に\n今回は[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使って、TypeScriptでChrome Extensionを作成、公開する手順をまとめました。\n最初はTypeScriptでChrome Extensionを作るのは、ビルドの設定など色々めんどくさそうだぁと思っていましたが、\n[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使うことで、簡単に作成から公開まで実現できました。\nブラウザでのちょっとした作業を効率化するのにChrome Extentionは非常に強力なツールなので、今後なにかアイディアがあればまた作ってみたいと思います。\n\n","comments_count":5,"created_at":"2017-12-20T02:36:27+09:00","likes_count":48,"reactions_count":0},"matches":4,"weight":250,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"TypeScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":62.5,"totalWeight":58,"threshold":12.5,"isRelated":true},{"node":{"fields":{"slug":"/e0ec0869-f368-5083-bdc2-cdba9d59427a/","title":"フロントエンド初心者がMEANスタック(MongoDB+Express+Angular+Node.js)でアプリを作ってみて躓いたこと","date":"2017-12-12T03:19:11+09:00","excerpt":"FUJITSU Advent Calendar 2017 12日目の記事です。リッチでイマドキなデザインのアプリが作りたくて、ここ４ヶ月ほどMEANスタック(MongoDB+Express+Angular+Node.js)でブログアプリを作...","tags":["JavaScript","Node.js","Express","mongoose","Angular","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"e0ec0869-f368-5083-bdc2-cdba9d59427a","title":"フロントエンド初心者がMEANスタック(MongoDB+Express+Angular+Node.js)でアプリを作ってみて躓いたこと","rendered_body":"<p><a href=\"https://qiita.com/advent-calendar/2017/fujitsu\">FUJITSU Advent Calendar 2017</a> 12日目の記事です。</p>\n\n<p>リッチでイマドキなデザインのアプリが作りたくて、<br>\nここ４ヶ月ほど<strong>MEAN</strong>スタック(<strong>M</strong>ongoDB+<strong>E</strong>xpress+<strong>A</strong>ngular+<strong>N</strong>ode.js)でブログアプリを作っています。<br>\n知識ゼロからのスタートでしたが、多くの方々がブログやStackOverFlowに情報を載せてくれているので、躓きながらもなんとかアプリ開発を進めることができました。</p>\n\n<p>この記事では、フロントエンド初心者の自分がMEANスタックでアプリを作る時に躓いたことや、こういう機能を実現するにはどうすればいいか?などをまとめています。<br>\nこれからをAngularを学ぼうとしている方、ExpressやMongoDBなどサーバーサイドJavaScriptを学ぼうとしている方の参考になればうれしいです。</p>\n\n<h2>\n<span id=\"アプリの紹介\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E7%B4%B9%E4%BB%8B\"><i class=\"fa fa-link\"></i></a>アプリの紹介</h2>\n\n<p>本線から脱線しますが、イントラでの使用を想定したQiitaのようなブログアプリです。デモ環境もあるのでよければ触ってみてください(モバイルには未対応ですが。。。)</p>\n\n<ul>\n<li><a href=\"https://github.com/Takumon/mean-blog\" rel=\"nofollow noopener\" target=\"_blank\">Github</a></li>\n<li><a href=\"https://hub.docker.com/r/takumon/mean-blog_auto/\" rel=\"nofollow noopener\" target=\"_blank\">Dockerhub</a></li>\n<li>\n<a href=\"https://material-blog-demo.herokuapp.com/\" rel=\"nofollow noopener\" target=\"_blank\">デモ環境</a> (ユーザID/パスは DemoUser / DemoUser1234# です)</li>\n</ul>\n\n<p>アプリキャプチャ その１ (記事詳細)<br>\n<a href=\"https://camo.qiitausercontent.com/4d64d8bd315bcf330d1ac6de1cfe8bb53f280992/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62383133333331372d666163322d626239622d386632642d3133646238393662656366352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/4d64d8bd315bcf330d1ac6de1cfe8bb53f280992/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62383133333331372d666163322d626239622d386632642d3133646238393662656366352e706e67\" alt=\"appdemo_detail.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/b8133317-fac2-bb9b-8f2d-13db896becf5.png\"></a></p>\n\n<p>アプリキャプチャ その２ (記事一覧)<br>\n<a href=\"https://camo.qiitausercontent.com/96927cda50e8df84b0c5415e996246c6d720b607/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39353064313036322d316261342d363366362d666535332d6366653664343634333061342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/96927cda50e8df84b0c5415e996246c6d720b607/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39353064313036322d316261342d363366362d666535332d6366653664343634333061342e706e67\" alt=\"アプリ_スクリーンキャプチャ_記事一覧.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/950d1062-1ba4-63f6-fe53-cfe6d46430a4.png\"></a></p>\n\n<p>アプリキャプチャ その３ (プロフィール)<br>\n<a href=\"https://camo.qiitausercontent.com/46aab6c2add74ca826b1dbe730d1a82eb481e295/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33323563373934382d636531362d396330382d306236362d6433383932653034366165642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/46aab6c2add74ca826b1dbe730d1a82eb481e295/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33323563373934382d636531362d396330382d306236362d6433383932653034366165642e706e67\" alt=\"アプリ_スクリーンキャプチャ_ ユーザ画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/325c7948-ce16-9c08-0b66-d3892e046aed.png\"></a></p>\n\n<h1>\n<span id=\"1-フロント側angularまわり\" class=\"fragment\"></span><a href=\"#1-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4angular%E3%81%BE%E3%82%8F%E3%82%8A\"><i class=\"fa fa-link\"></i></a>1. フロント側Angularまわり</h1>\n\n<h2>\n<span id=\"angularについて調べる時に古い情報を除外したい\" class=\"fragment\"></span><a href=\"#angular%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%BF%E3%81%B9%E3%82%8B%E6%99%82%E3%81%AB%E5%8F%A4%E3%81%84%E6%83%85%E5%A0%B1%E3%82%92%E9%99%A4%E5%A4%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Angularについて調べる時に古い情報を除外したい</h2>\n\n<p>1系は<code>AngularJS</code>、2系以降は<code>Angular</code>と呼ばれており、1系と2系以降では大きく仕様が異なります。<br>\nそのため検索する時は<code>Angualr2</code>などバージョンを指定したり、1系を除外するため<code>--AngularJS</code>をつけたりすると検索しやすいです。</p>\n\n<h2>\n<span id=\"htmlのdom要素を別のdom要素またはcomponentから扱いたい\" class=\"fragment\"></span><a href=\"#html%E3%81%AEdom%E8%A6%81%E7%B4%A0%E3%82%92%E5%88%A5%E3%81%AEdom%E8%A6%81%E7%B4%A0%E3%81%BE%E3%81%9F%E3%81%AFcomponent%E3%81%8B%E3%82%89%E6%89%B1%E3%81%84%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>HTMLのDOM要素を、別のDOM要素またはComponentから扱いたい</h2>\n\n<p>要素に<code>#xxxxx</code>のように<code>#</code>始まりの名前をつけると、別のDOM要素から参照できます</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;input</span> <span class=\"err\">#</span><span class=\"na\">phone</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"電話番号\"</span><span class=\"nt\">/&gt;</span>\n<span class=\"c\">&lt;!--  他のDOM要素からphonという変数名でDOM要素を参照できるようになる --&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"nt\">&gt;</span>(click)=\"callPhone(phone.value)\"&gt;\n</pre></div>\n</div>\n\n<p>Componentから参照する場合は<code>@ViewChild</code>を使います</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">Component</span></div>\n<div class=\"highlight\"><pre>  <span class=\"c1\">// ViewChildの引数に名前を文字列で指定します</span>\n  <span class=\"p\">@</span><span class=\"nd\">ViewChild</span><span class=\"p\">(</span><span class=\"s1\">'phone'</span><span class=\"p\">)</span> <span class=\"nx\">phoneElement</span><span class=\"p\">:</span> <span class=\"nx\">phoneElement</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">showPhoneValue</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">phoneElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://angular.io/guide/template-syntax#ref-vars\" rel=\"nofollow noopener\" target=\"_blank\">Angular公式サイト</a></li>\n<li><a href=\"https://stackoverflow.com/questions/32693061/how-can-i-select-an-element-in-a-component-template\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"routing時の認証を非同期で行いたい\" class=\"fragment\"></span><a href=\"#routing%E6%99%82%E3%81%AE%E8%AA%8D%E8%A8%BC%E3%82%92%E9%9D%9E%E5%90%8C%E6%9C%9F%E3%81%A7%E8%A1%8C%E3%81%84%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Routing時の認証を非同期で行いたい</h2>\n\n<p>URLごとの認証は<code>CanActivate</code>インターフェースを実装すればできますが、<br>\nサーバから認証情報を取得して非同期で認証したい場合もあると思います。<br>\nそのような時は、<strong><code>CanActivate#canActivate</code>で</strong>booleanの代わりに<strong>Observableを戻り値に指定する</strong>ことで実現できます。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">SampleAuthGuard</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Router</span><span class=\"p\">,</span> <span class=\"nx\">CanActivate</span><span class=\"p\">,</span> <span class=\"nx\">ActivatedRouteSnapshot</span><span class=\"p\">,</span> <span class=\"nx\">RouterStateSnapshot</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/router'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AuthenticationService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./authentication.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SampleAuthGuard</span> <span class=\"kr\">implements</span> <span class=\"nx\">CanActivate</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span>\n    <span class=\"kr\">private</span> <span class=\"nx\">auth</span><span class=\"p\">:</span> <span class=\"nx\">AuthenticationService</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n  <span class=\"c1\">// booleanではなくObservable&lt;boolean&gt;を戻り値で返す</span>\n  <span class=\"nx\">canActivate</span><span class=\"p\">(</span><span class=\"nx\">route</span><span class=\"p\">:</span> <span class=\"nx\">ActivatedRouteSnapshot</span><span class=\"p\">,</span> <span class=\"nx\">state</span><span class=\"p\">:</span> <span class=\"nx\">RouterStateSnapshot</span><span class=\"p\">):</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"kr\">boolean</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">auth</span><span class=\"p\">.</span><span class=\"nx\">checkState</span><span class=\"p\">()</span>\n      <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">err</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">of</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">))</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/38425461/angular2-canactivate-calling-async-function\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"formarrayの値を初期化したい\" class=\"fragment\"></span><a href=\"#formarray%E3%81%AE%E5%80%A4%E3%82%92%E5%88%9D%E6%9C%9F%E5%8C%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>FormArrayの値を初期化したい</h2>\n\n<p>FormControlはpatchValueで初期値を設定できますが、<br>\nFormArrayの場合patchValueで配列の値を設定しようとしても設定できません。<br>\nこういう場合は、<strong>配列1つ１つの値をもとにFormControlを生成してFormArrayにpush</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">ダメな例</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Form生成</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">group</span><span class=\"p\">({</span>\n    <span class=\"na\">schoolName</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">([])</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// Formに初期値を設定</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">pathValue</span><span class=\"p\">({</span>\n    <span class=\"na\">schooleName</span><span class=\"p\">:</span> <span class=\"s1\">'SampleSchoolName'</span> <span class=\"c1\">// FormControlの値の初期化はpatchValueで可能</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'taro'</span><span class=\"p\">,</span> <span class=\"s1\">'jiro'</span><span class=\"p\">,</span> <span class=\"s1\">'saburo'</span><span class=\"p\">];</span> <span class=\"c1\">// FormArrayに要素を追加する場合patchValueでは不可能</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">良い例</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Formを生成</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">group</span><span class=\"p\">({</span>\n    <span class=\"na\">schoolName</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">([])</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// Formに初期値を設定</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">pathValue</span><span class=\"p\">({</span>\n    <span class=\"na\">schooleName</span><span class=\"p\">:</span> <span class=\"s1\">'SampleSchoolName'</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// データからFormControlを生成し１件１件FormArrayにpushする</span>\n  <span class=\"p\">[</span><span class=\"s1\">'taro'</span><span class=\"p\">,</span> <span class=\"s1\">'jiro'</span><span class=\"p\">,</span> <span class=\"s1\">'saburo'</span><span class=\"p\">].</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">student</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">controls</span><span class=\"p\">[</span><span class=\"s1\">'students'</span><span class=\"p\">].</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">FormControll</span><span class=\"p\">(</span><span class=\"nx\">student</span><span class=\"p\">));</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/40916084/angular2-patchvalue-push-value-into-array\" rel=\"nofollow noopener\" target=\"_blank\">StackOvereFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"error-error-no-provider-for-templaterefというエラー\" class=\"fragment\"></span><a href=\"#error-error-no-provider-for-templateref%E3%81%A8%E3%81%84%E3%81%86%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>「ERROR Error: No provider for TemplateRef!」というエラー</h2>\n\n<p>最初このエラーが出た時は、何が原因なのかわからずに困りました。。。<br>\n大抵の場合は、<strong><code>*ngIf</code>や<code>*ngForm</code>の<code>*</code>が抜けてることが原因</strong>です(要するにただのタイポです。。。)<br>\n<code>*</code>が抜けると、Angularは<code>ngIf</code>をディレクティブとして解釈しようとしますが、<br>\nそんなディレクティブは存在しないので<code>No provider for TemplateRef!</code>と言われてしまうそうです。</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/35932074/angular2-no-provider-for-templateref-ngif-templateref\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"textareaにおいてtabキーでインデントしたい\" class=\"fragment\"></span><a href=\"#textarea%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6tab%E3%82%AD%E3%83%BC%E3%81%A7%E3%82%A4%E3%83%B3%E3%83%87%E3%83%B3%E3%83%88%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>textareaにおいてTabキーでインデントしたい</h2>\n\n<p>文書を入力するようなテキストエリアの場合に、Tabキーでのインデントしたい場合は、<br>\nkyedownイベント発生時にテキストエリアの値とキャレットの位置を操作することで実現可能です。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;textarea</span> <span class=\"err\">#</span><span class=\"na\">sampletextarea</span>\n  <span class=\"err\">(</span><span class=\"na\">keydown</span><span class=\"err\">)=\"</span><span class=\"na\">indent</span><span class=\"err\">($</span><span class=\"na\">event</span><span class=\"err\">,</span> <span class=\"na\">sampletextarea</span><span class=\"err\">)\"</span> <span class=\"nt\">&gt;&lt;/textarea&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">Component</span></div>\n<div class=\"highlight\"><pre>  <span class=\"nx\">indent</span><span class=\"p\">(</span><span class=\"nx\">$event</span><span class=\"p\">,</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Tabキー押下時</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">$event</span><span class=\"p\">.</span><span class=\"nx\">keyCode</span> <span class=\"o\">===</span> <span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 次の要素にフォーカスが移らないようにする</span>\n      <span class=\"nx\">$event</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n\n      <span class=\"c1\">// 現在のキャレット位置を取得</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">caretStart</span> <span class=\"o\">=</span> <span class=\"nx\">textareaElement</span><span class=\"p\">.</span><span class=\"nx\">selectionStart</span><span class=\"p\">;</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">caretEnd</span> <span class=\"o\">=</span> <span class=\"nx\">textareaElement</span><span class=\"p\">.</span><span class=\"nx\">selectionEnd</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// テキストエリアの値を取得し、キャレット位置にTabを挿入</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">TAB</span> <span class=\"o\">=</span> <span class=\"s1\">'¥t'</span><span class=\"p\">;</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">caretStart</span><span class=\"p\">)</span>\n                     <span class=\"o\">+</span> <span class=\"nx\">TAB</span> <span class=\"o\">+</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"nx\">caretStart</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// キャレット位置をTab分ずらす</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">focus</span><span class=\"p\">();</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">setSelectionRange</span><span class=\"p\">(</span><span class=\"nx\">caretStart</span> <span class=\"o\">+</span> <span class=\"nx\">TAB</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">,</span> <span class=\"nx\">caretEnd</span> <span class=\"o\">+</span> <span class=\"nx\">TAB</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h2>\n<span id=\"markdownプレビューを表示したいソースコードはシンタックスハイライトさせたい\" class=\"fragment\"></span><a href=\"#markdown%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%97%E3%81%9F%E3%81%84%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AF%E3%82%B7%E3%83%B3%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B9%E3%83%8F%E3%82%A4%E3%83%A9%E3%82%A4%E3%83%88%E3%81%95%E3%81%9B%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Markdownプレビューを表示したい、ソースコードはシンタックスハイライトさせたい</h2>\n\n<p><a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">marked</a>と<a href=\"https://github.com/isagalaev/highlight.js\" rel=\"nofollow noopener\" target=\"_blank\">highlight.js</a>を組み合わせて使います。<br>\n<a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">marked</a>のReadmeを見ればなんとなくわかりますが、Angularの仕組みに乗せる必要があるのでPipeやらServiceやらを作ります。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">markdown-parse.service.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">marked</span> <span class=\"k\">from</span> <span class=\"s1\">'marked'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">hljs</span> <span class=\"k\">from</span> <span class=\"s1\">'highlight.js'</span><span class=\"p\">;</span>\n\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MarkdownParseService</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">marked</span><span class=\"p\">.</span><span class=\"nx\">setOptions</span><span class=\"p\">({</span>\n      <span class=\"na\">highlight</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">hljs</span><span class=\"p\">.</span><span class=\"nx\">highlightAuto</span><span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">).</span><span class=\"nx\">value</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"na\">rawText</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">marked</span><span class=\"p\">(</span><span class=\"nx\">rawText</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">markdown.pipe.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nx\">marked</span> <span class=\"k\">from</span> <span class=\"s1\">'marked'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MarkdownParseService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./markdown-parse.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'toMarkdown'</span> <span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MarkdownParsePipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">markdownParseService</span><span class=\"p\">:</span> <span class=\"nx\">MarkdownParseService</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">any</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">markdownParseService</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>HTMLで下記のように指定します。<code>{{}}</code>だとサニタイズされてしまうので<code>innerHTML</code>属性を指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">innerHTML</span><span class=\"err\">]=\"</span><span class=\"na\">md</span> <span class=\"err\">|</span> <span class=\"na\">toMarkdown</span><span class=\"err\">\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://qiita.com/daikiojm/items/e02e2aeb0231b3620a0b\" id=\"reference-9001a931765f8f52acaf\">Qiita AngularでMarkdownをHTMLとして表示するカスタムpipeを作成する</a></li>\n<li>Github <a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">chjj/marked</a>\n</li>\n</ul>\n\n<h2>\n<span id=\"絞り込み条件付きリストにおいてリストの要素が変更追加削除された時に絞り込み結果をリフレッシュしたい\" class=\"fragment\"></span><a href=\"#%E7%B5%9E%E3%82%8A%E8%BE%BC%E3%81%BF%E6%9D%A1%E4%BB%B6%E4%BB%98%E3%81%8D%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%8C%E5%A4%89%E6%9B%B4%E8%BF%BD%E5%8A%A0%E5%89%8A%E9%99%A4%E3%81%95%E3%82%8C%E3%81%9F%E6%99%82%E3%81%AB%E7%B5%9E%E3%82%8A%E8%BE%BC%E3%81%BF%E7%B5%90%E6%9E%9C%E3%82%92%E3%83%AA%E3%83%95%E3%83%AC%E3%83%83%E3%82%B7%E3%83%A5%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>絞り込み条件付きリストにおいて、リストの要素が変更、追加、削除された時に絞り込み結果をリフレッシュしたい</h2>\n\n<p>リストの絞り込みはPipeで実現しますが、通常Pipeはリストの要素が変更されても再び絞り込みが実施されることはありません。<br>\nこのような場合はPipeアノテーションにて<strong>pureオプションをfalseに設定</strong>ましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"err\">#</span><span class=\"na\">searchUserName</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n  <span class=\"nt\">&lt;li</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let user of (userList | searchUserFilter: searchUserName.value);\"</span> <span class=\"nt\">&gt;</span>{{user.name}}<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">search-user.pipe.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">User</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./user'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'searchUserFilter'</span><span class=\"p\">,</span>\n  <span class=\"na\">pure</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"c1\">// pureをfalseにすることでユーザが変更、追加、削除された時にリフレッシュできる</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SearchFilterPipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">User</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">searchUserName</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">any</span><span class=\"p\">[]</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">searchUserName</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">items</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">searchUserName</span> <span class=\"o\">=</span> <span class=\"nx\">searchUserName</span><span class=\"p\">.</span><span class=\"nx\">toLowerCase</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span> <span class=\"nx\">item</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">userId</span><span class=\"p\">.</span><span class=\"nx\">toLowerCase</span><span class=\"p\">().</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"nx\">searchUserName</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://angular.io/guide/pipes#pure-and-impure-pipes\" rel=\"nofollow noopener\" target=\"_blank\">Angular公式サイト</a></li>\n</ul>\n\n<h2>\n<span id=\"グローバル定数を定義したい\" class=\"fragment\"></span><a href=\"#%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E5%AE%9A%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>グローバル定数を定義したい</h2>\n\n<p>いろんなクラスで使う定数を共通化する時は、単純に<strong>クラスを作ってstaticなメンバとして定数を定義</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">app-settings.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppSettings</span> <span class=\"p\">{</span>\n   <span class=\"kr\">public</span> <span class=\"kr\">static</span> <span class=\"nx\">API_ENDPOINT</span><span class=\"o\">=</span><span class=\"s1\">'http://127.0.0.1:6666/api/'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">SampleService</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">Injectable</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'angular2/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">AppSettings</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app-settings'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SampleService</span> <span class=\"p\">{</span>\n    <span class=\"nx\">sampleMethod</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">AppSettings</span><span class=\"p\">.</span><span class=\"nx\">API_ENDPOINT</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/34986922/define-global-constants-in-angular-2\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"画像が多い画面の初期表示を早くしたい\" class=\"fragment\"></span><a href=\"#%E7%94%BB%E5%83%8F%E3%81%8C%E5%A4%9A%E3%81%84%E7%94%BB%E9%9D%A2%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A1%A8%E7%A4%BA%E3%82%92%E6%97%A9%E3%81%8F%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>画像が多い画面の初期表示を早くしたい</h2>\n\n<p><a href=\"https://github.com/tjoskar/ng-lazyload-image\" rel=\"nofollow noopener\" target=\"_blank\">ng-lazyload-image</a>を使えば画像の遅延ロードを実現できます。<br>\n使い方もとても簡単でimgタグにディレクティブを指定するだけです。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre> <span class=\"nt\">&lt;img</span>\n  <span class=\"err\">[</span><span class=\"na\">defaultImage</span><span class=\"err\">]=\"</span><span class=\"na\">https:</span><span class=\"err\">//</span><span class=\"na\">images</span><span class=\"err\">.</span><span class=\"na\">sample</span><span class=\"err\">.</span><span class=\"na\">com</span><span class=\"err\">/</span><span class=\"na\">photo</span><span class=\"err\">/</span><span class=\"na\">defaultimage</span><span class=\"err\">\"</span> \n  <span class=\"err\">[</span><span class=\"na\">lazyLoad</span><span class=\"err\">]=\"</span><span class=\"na\">https:</span><span class=\"err\">//</span><span class=\"na\">images</span><span class=\"err\">.</span><span class=\"na\">sample</span><span class=\"err\">.</span><span class=\"na\">com</span><span class=\"err\">/</span><span class=\"na\">photo</span><span class=\"err\">/</span><span class=\"na\">sampleimage</span><span class=\"err\">\"</span>\n  <span class=\"err\">[</span><span class=\"na\">offset</span><span class=\"err\">]=\"</span><span class=\"na\">30</span><span class=\"err\">\"</span>\n <span class=\"nt\">&gt;</span>\n</pre></div>\n</div>\n\n<p><em>defaultImage</em><br>\n　即時ロードされる画像のURL、遅延ロードする画像を読み込む間、表示される<br>\n<em>lazyLoad</em><br>\n　遅延ロードする画像のURL<br>\n<em>offset</em><br>\n　スクロールが発生する場合に画面下部の何ピクセル下に来た時にロードを開始するか<br>\n<em>errorImage</em><br>\n　遅延ロード失敗時に表示する画像URL</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/tjoskar/ng-lazyload-image\" rel=\"nofollow noopener\" target=\"_blank\">ng-lazyload-image</a></li>\n</ul>\n\n<h2>\n<span id=\"angular-cliのng-serveコマンドでdistフォルダを一旦削除したくない\" class=\"fragment\"></span><a href=\"#angular-cli%E3%81%AEng-serve%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7dist%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E3%82%92%E4%B8%80%E6%97%A6%E5%89%8A%E9%99%A4%E3%81%97%E3%81%9F%E3%81%8F%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>Angular Cliの<code>ng serve</code>コマンドでdistフォルダを一旦削除したくない</h2>\n\n<p><code>ng serve</code>コマンドは<code>dist</code>フォルダを削除してからtsファイルをトランスコンパイルします。<br>\nそれを防ぐためには、<strong>delete-output-pathオプションをfalse</strong>に指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json　ビルドスクリプト</span></div>\n<div class=\"highlight\"><pre><span class=\"s2\">\"script\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"cp ./resource/* dist &amp;&amp; ng serve --delete-output-path=false\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/angular/angular-cli/issues/4366\" rel=\"nofollow noopener\" target=\"_blank\">angular-cli github issue #4366</a></li>\n</ul>\n\n<h2>\n<span id=\"aotコンパイルが遅いのでなんとかしたい\" class=\"fragment\"></span><a href=\"#aot%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%8C%E9%81%85%E3%81%84%E3%81%AE%E3%81%A7%E3%81%AA%E3%82%93%E3%81%A8%E3%81%8B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>AOTコンパイルが遅いのでなんとかしたい</h2>\n\n<p>なんとかできませんでした。。。(もしかしたら方法があるのかもしれません。誰か教えてください!!!)<br>\nAOTコンパイルはJITコンパイルが検出してくれないHTMLのエラーを警告してくれますが、その反面遅いです。特に<a href=\"https://material.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular Material</a>を使う場合は顕著です。<br>\nそのため、自分の場合は基本的にJITビルドを使い、issueのプルリクをする前など区切りのいいタイミングでAOTビルドしてエラーがないか確認するというように使い分けてました。</p>\n\n<h1>\n<span id=\"2-フロント側angularでのテスト周り\" class=\"fragment\"></span><a href=\"#2-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4angular%E3%81%A7%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A\"><i class=\"fa fa-link\"></i></a>2. フロント側Angularでのテスト周り</h1>\n\n<h2>\n<span id=\"ci環境などでテストが終わらずにタイムアウトしてしまう\" class=\"fragment\"></span><a href=\"#ci%E7%92%B0%E5%A2%83%E3%81%AA%E3%81%A9%E3%81%A7%E3%83%86%E3%82%B9%E3%83%88%E3%81%8C%E7%B5%82%E3%82%8F%E3%82%89%E3%81%9A%E3%81%AB%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%97%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86\"><i class=\"fa fa-link\"></i></a>CI環境などでテストが終わらずにタイムアウトしてしまう</h2>\n\n<p>CirleCiなどでテストを実行する場合<code>ng test</code>コマンドだとプロセスが終了しないためタイムアウトで失敗してしまいます。<br>\nこのような場合は<strong>watchオプションをfalseに設定</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ng test --wtach=false\n</pre></div></div>\n\n<p><strong>参考サイト</strong><br>\n<a href=\"https://github.com/angular/angular-cli/issues/362\" rel=\"nofollow noopener\" target=\"_blank\">Github isssue</a></p>\n\n<h2>\n<span id=\"テスト時にerror-timeout---async-callback-was-not-invoked-within-timeout-specified-by-jasminedefault_timeout_intervalやfailed-to-execute-send-on-xmlhttprequestのエラー\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E6%99%82%E3%81%ABerror-timeout---async-callback-was-not-invoked-within-timeout-specified-by-jasminedefault_timeout_interval%E3%82%84failed-to-execute-send-on-xmlhttprequest%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>テスト時に「Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.」や「Failed to execute 'send' on 'XMLHttpRequest'」のエラー</h2>\n\n<p>このような場合は、一時的に<code>ng test</code>コマンドのオプションに<strong><code>-sm=false</code>を追加</strong>してテストし直すと根本原因エラーメッセージで出力されるようになります。<br>\n大抵の場合は自作したモッククラスに必要なメソッドがないことが原因です。</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/45399079/angular-tests-failing-with-failed-to-execute-send-on-xmlhttprequest\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト用に子コンポーネントをモック化したい\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%94%A8%E3%81%AB%E5%AD%90%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E3%83%A2%E3%83%83%E3%82%AF%E5%8C%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト用に子コンポーネントをモック化したい</h2>\n\n<p>意外と簡単で、TestBed#configureTestingModuleで<br>\ndeclarationsに自作したモックの子コンポーネントを追加するだけです。<br>\ninput,outputがあれば必要に応じてメンバ定義します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\"><div class=\"highlight\"><pre><span class=\"c1\">// ※import文は省略</span>\n\n<span class=\"c1\">// モックの子コンポーネントを定義</span>\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-child'</span><span class=\"p\">,</span> <span class=\"c1\">// 子コンポーネントと同じものを定義</span>\n  <span class=\"na\">template</span><span class=\"p\">:</span> <span class=\"s1\">'&lt;p&gt;Mock Child Component&lt;/p&gt;'</span>\n<span class=\"p\">})</span>\n<span class=\"kd\">class</span> <span class=\"nx\">MockClildComponent</span> <span class=\"p\">{</span>\n  <span class=\"p\">@</span><span class=\"nd\">Input</span><span class=\"p\">()</span> <span class=\"nx\">childInput</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"p\">@</span><span class=\"nd\">Output</span><span class=\"p\">()</span> <span class=\"nx\">childOutput</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">EventEmitter</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// ...</span>\n\n<span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n    <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"c1\">// テスト時のdeclarationsにモックの定義を追加</span>\n      <span class=\"nx\">MockProductSettingsComponent</span><span class=\"p\">,</span>\n      <span class=\"c1\">// ...</span>\n    <span class=\"p\">],</span>\n    <span class=\"c1\">// ...</span>\n  <span class=\"p\">});</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">});</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/41240163/mocking-child-components-angular-2\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト結果にangular-materilaのスタイルが反映されない\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%B5%90%E6%9E%9C%E3%81%ABangular-materila%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%8C%E5%8F%8D%E6%98%A0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト結果にAngular Materilaのスタイルが反映されない</h2>\n\n<p>UIフレームワークで<a href=\"https://material.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular Material</a>を使っている場合、<br>\n<code>karma.config.js</code>でAngular Materilaのcssを直接読み込んであげる必要あります。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">karma.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"err\">・・・</span>\n      <span class=\"c1\">// Angular Materialのスタイルをテスト開始時に読み込んでおく</span>\n      <span class=\"p\">{</span><span class=\"nl\">pattern</span><span class=\"p\">:</span> <span class=\"s1\">'./node_modules/@angular/material/prebuilt-themes/indigo-pink.css'</span><span class=\"p\">,</span> <span class=\"nx\">included</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">watched</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">},</span>\n<span class=\"p\">],</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/angular/material2/issues/4056\" rel=\"nofollow noopener\" target=\"_blank\">stackoverflow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト結果にstylesscssアプリ共通のスタイル定義のスタイルが反映されない\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%B5%90%E6%9E%9C%E3%81%ABstylesscss%E3%82%A2%E3%83%97%E3%83%AA%E5%85%B1%E9%80%9A%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E5%AE%9A%E7%BE%A9%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%8C%E5%8F%8D%E6%98%A0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト結果にstyles.scss(アプリ共通のスタイル定義)のスタイルが反映されない</h2>\n\n<p>アプリ共通スタイルをSASS形式にしている場合<br>\n開発用ライブライに<code>karma-scss-preprocessor</code>と<code>node-sass</code>を追加して<code>karma.conf.js</code>を下記のように設定します。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">karma.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"err\">・・・</span>\n<span class=\"err\">　</span> <span class=\"c1\">// プラグインに`karma-scss-preprocessor`を追加</span>\n  <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'karma-scss-preprocessor'</span><span class=\"p\">)</span>\n<span class=\"p\">],</span>\n\n\n<span class=\"nx\">files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"err\">・・・</span>\n  <span class=\"c1\">// filesにアプリ共通スタイルを追加</span>\n  <span class=\"p\">{</span> <span class=\"nl\">pattern</span><span class=\"p\">:</span> <span class=\"s1\">'./src/styles.scss'</span><span class=\"p\">,</span> <span class=\"nx\">watched</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>  <span class=\"nx\">included</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">served</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n<span class=\"p\">],</span>\n\n<span class=\"c1\">// preprocessorsを追加</span>\n<span class=\"nx\">preprocessors</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n <span class=\"s1\">'./src/test.ts'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'@angular/cli'</span><span class=\"p\">],</span>\n <span class=\"s1\">'./src/styles.scss'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'scss'</span><span class=\"p\">]</span>\n<span class=\"p\">},</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong>:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/44460733/how-to-configure-karma-to-include-global-scss-files-for-an-angular-cli-project/44498689#44498689\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n<li><a href=\"https://github.com/karma-runner/karma/issues/2700\" rel=\"nofollow noopener\" target=\"_blank\">Github karma/issue/2700</a></li>\n</ul>\n\n<h1>\n<span id=\"3-バックエンド側-expressmongodb周り\" class=\"fragment\"></span><a href=\"#3-%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89%E5%81%B4-expressmongodb%E5%91%A8%E3%82%8A\"><i class=\"fa fa-link\"></i></a>3. バックエンド側 Express、MongoDB周り</h1>\n\n<p>※MongDBをNode.jsで扱う場合は<a href=\"https://github.com/Automattic/mongoose\" rel=\"nofollow noopener\" target=\"_blank\">mongoose</a>という便利なライブラリがあるのでそれを使う前提のお話です。</p>\n\n<h2>\n<span id=\"mongooseのvirtualメソッドを使う\" class=\"fragment\"></span><a href=\"#mongoose%E3%81%AEvirtual%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>mongooseのvirtualメソッドを使う</h2>\n\n<p>例えば<code>記事</code>,<code>コメント</code>,<code>リプライ</code>などのモデルを定義する場合、<br>\n３つのモデルのライフサイクルは、記事追加 =&gt; 記事に対するコメント追加 =&gt; コメントに対するリプライ追加　のようになります。<br>\nこのような場合は、コメントが記事の参照を持ち、リプライがコメントの参照を持つモデル構造が望ましいです。コメントやリプライ追加時に１つのモデルの更新だけですむからです。<br>\n<a href=\"https://camo.qiitausercontent.com/129a84bd908d87c7fcbda29704ad50ac10529129/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393361633065362d333137652d316364662d626662612d3133353331653234353562612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/129a84bd908d87c7fcbda29704ad50ac10529129/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393361633065362d333137652d316364662d626662612d3133353331653234353562612e706e67\" alt=\"db構造_良.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f93ac0e6-317e-1cdf-bfba-13531e2455ba.png\"></a></p>\n\n<p>ただ記事の検索は少し工夫が必要で、<strong>mongooseのvirtualを使います</strong>。これによって記事からコメントへの参照、コメントからリプライへの参照を擬似的に定義できるため、<br>\n検索時に擬似要素をpopulateするだけで、記事に紐付くコメントとリプライを取得できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/bd8d4eedcb08eeaca13290e8dc91b8b2e10c5dae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34616162376633382d316631392d653030622d623335642d3233626162663336613735622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/bd8d4eedcb08eeaca13290e8dc91b8b2e10c5dae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34616162376633382d316631392d653030622d623335642d3233626162663336613735622e706e67\" alt=\"mongoose virtualのイメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/4aab7f38-1f19-e00b-b35d-23babf36a75b.png\"></a></p>\n\n<p>具体的なソースコードを示します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">article.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">ArticleSchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">content</span><span class=\"p\">:</span> <span class=\"nb\">String</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">toJSON</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">virtuals</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"p\">});</span>\n\n\n<span class=\"c1\">// 記事に紐付くコメントモデルの配列をcommentsという擬似要素で定義する</span>\n<span class=\"nx\">ArticleSchema</span><span class=\"p\">.</span><span class=\"nx\">virtual</span><span class=\"p\">(</span><span class=\"s1\">'comments'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Comment'</span><span class=\"p\">,</span>\n  <span class=\"na\">localField</span><span class=\"p\">:</span> <span class=\"s1\">'_id'</span><span class=\"p\">,</span>\n  <span class=\"na\">foreignField</span><span class=\"p\">:</span> <span class=\"s1\">'articleId'</span><span class=\"p\">,</span>\n  <span class=\"na\">justOne</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Article</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Article'</span><span class=\"p\">,</span> <span class=\"nx\">ArticleSchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Article</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">comment.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">CommentSchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">articleId</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">.</span><span class=\"nx\">Types</span><span class=\"p\">.</span><span class=\"nx\">ObjectId</span><span class=\"p\">,</span>\n    <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Article'</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">comment</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">;</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">toJSON</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">virtuals</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"p\">});</span>\n\n<span class=\"c1\">// コメントに紐付くリプライモデルの配列をrepliesという擬似要素で定義する</span>\n<span class=\"nx\">CommentSchema</span><span class=\"p\">.</span><span class=\"nx\">virtual</span><span class=\"p\">(</span><span class=\"s1\">'replies'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Reply'</span><span class=\"p\">,</span>\n  <span class=\"na\">localField</span><span class=\"p\">:</span> <span class=\"s1\">'_id'</span><span class=\"p\">,</span>\n  <span class=\"na\">foreignField</span><span class=\"p\">:</span> <span class=\"s1\">'commentId'</span><span class=\"p\">,</span>\n  <span class=\"na\">justOne</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Comment</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Comment'</span><span class=\"p\">,</span> <span class=\"nx\">CommentSchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Comment</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">reply.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">ReplySchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">commentId</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">.</span><span class=\"nx\">Types</span><span class=\"p\">.</span><span class=\"nx\">ObjectId</span><span class=\"p\">,</span>\n    <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Comment'</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">reply</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Reply</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Reply'</span><span class=\"p\">,</span> <span class=\"nx\">ReplySchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Reply</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">検索処理</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">Article</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">()</span>\n<span class=\"p\">.</span><span class=\"nx\">populate</span><span class=\"p\">({</span>\n  <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"s1\">'comments'</span><span class=\"p\">,</span> <span class=\"c1\">// Articleモデルで定義した擬似要素commentsをpopulateする</span>\n  <span class=\"na\">populate</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"s1\">'replies'</span><span class=\"p\">,</span> <span class=\"c1\">// Commentモデルで定義した擬似要素repliesをpopulateする</span>\n  <span class=\"p\">}],</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"リクエストレスポンスのログ出力したい\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%81%AE%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>リクエスト、レスポンスのログ出力したい</h2>\n\n<p>Expressのuseにて実現します。<br>\nレスポンスオブジェクトのfinishイベントを監視することで、レスポンス時にログを出力しています。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">リクエストとレスポンスのログ出力　※ここでは簡単のためコンソールに出力しています</span></div>\n<div class=\"highlight\"><pre><span class=\"kd\">const</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n<span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"nx\">accessLogHandler</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n  <span class=\"c1\">// リクエスト時のログ　</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">([</span>\n    <span class=\"s1\">'start'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'x-forwarded-for'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span>\n    <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">referer</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'user-agent'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'--ms--'</span>\n  <span class=\"p\">].</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">',</span><span class=\"err\">\\</span><span class=\"s1\">t'</span><span class=\"p\">));</span>\n\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">once</span><span class=\"p\">(</span><span class=\"s1\">'finish'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"err\">　　</span> <span class=\"c1\">// レスポンス時のログ</span>\n    <span class=\"nx\">accessLogger</span><span class=\"p\">.</span><span class=\"nx\">info</span><span class=\"p\">([</span>\n      <span class=\"s1\">'end'</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'x-forwarded-for'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">referer</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'user-agent'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'--'</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">getMilliseconds</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"nx\">start</span><span class=\"p\">.</span><span class=\"nx\">getMilliseconds</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"s1\">'ms--'</span>\n    <span class=\"p\">].</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">',</span><span class=\"err\">\\</span><span class=\"s1\">t'</span><span class=\"p\">));</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">next</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<p>実際のログはこんな感じで出力されます。</p>\n\n<div class=\"code-frame\" data-lang=\"py3\"><div class=\"highlight\"><pre><span class=\"n\">start</span><span class=\"p\">,</span>  <span class=\"p\">::</span><span class=\"n\">ffff</span><span class=\"p\">:</span><span class=\"mf\">127.0</span><span class=\"o\">.</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">authenticate</span><span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"p\">,</span>   <span class=\"o\">-</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">4200</span><span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"n\">Mozilla</span><span class=\"o\">/</span><span class=\"mf\">5.0</span> <span class=\"p\">(</span><span class=\"n\">Macintosh</span><span class=\"p\">;</span> <span class=\"n\">Intel</span> <span class=\"n\">Mac</span> <span class=\"n\">OS</span> <span class=\"n\">X</span> <span class=\"mi\">10</span><span class=\"n\">_12_6</span><span class=\"p\">)</span> <span class=\"n\">AppleWebKit</span><span class=\"o\">/</span><span class=\"mf\">537.36</span> <span class=\"p\">(</span><span class=\"n\">KHTML</span><span class=\"p\">,</span> <span class=\"n\">like</span> <span class=\"n\">Gecko</span><span class=\"p\">)</span> <span class=\"n\">Chrome</span><span class=\"o\">/</span><span class=\"mf\">62.0</span><span class=\"o\">.</span><span class=\"mf\">3202.94</span> <span class=\"n\">Safari</span><span class=\"o\">/</span><span class=\"mf\">537.36</span><span class=\"p\">,</span> <span class=\"o\">--</span><span class=\"n\">ms</span><span class=\"o\">--</span>\n<span class=\"n\">end</span><span class=\"p\">,</span>    <span class=\"p\">::</span><span class=\"n\">ffff</span><span class=\"p\">:</span><span class=\"mf\">127.0</span><span class=\"o\">.</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"p\">,</span>                  <span class=\"mi\">403</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">4200</span><span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"n\">Mozilla</span><span class=\"o\">/</span><span class=\"mf\">5.0</span> <span class=\"p\">(</span><span class=\"n\">Macintosh</span><span class=\"p\">;</span> <span class=\"n\">Intel</span> <span class=\"n\">Mac</span> <span class=\"n\">OS</span> <span class=\"n\">X</span> <span class=\"mi\">10</span><span class=\"n\">_12_6</span><span class=\"p\">)</span> <span class=\"n\">AppleWebKit</span><span class=\"o\">/</span><span class=\"mf\">537.36</span> <span class=\"p\">(</span><span class=\"n\">KHTML</span><span class=\"p\">,</span> <span class=\"n\">like</span> <span class=\"n\">Gecko</span><span class=\"p\">)</span> <span class=\"n\">Chrome</span><span class=\"o\">/</span><span class=\"mf\">62.0</span><span class=\"o\">.</span><span class=\"mf\">3202.94</span> <span class=\"n\">Safari</span><span class=\"o\">/</span><span class=\"mf\">537.36</span><span class=\"p\">,</span>  <span class=\"o\">--</span><span class=\"mi\">47</span><span class=\"n\">ms</span><span class=\"o\">--</span>\n</pre></div></div>\n\n<h2>\n<span id=\"ログ出力でオブジェクトの全プロパティを出力したい\" class=\"fragment\"></span><a href=\"#%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E3%81%A7%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%85%A8%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%82%92%E5%87%BA%E5%8A%9B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>ログ出力でオブジェクトの全プロパティを出力したい</h2>\n\n<p>オブジェクトの中身をログで確認する時はNode.jsの<code>util.inspect()</code>を使います。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre><span class=\"kd\">const</span> <span class=\"nx\">util</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'util'</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">myObject</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"s2\">\"a\"</span><span class=\"p\">:</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span>\n   <span class=\"s2\">\"b\"</span><span class=\"p\">:{</span>\n      <span class=\"s2\">\"c\"</span><span class=\"p\">:</span><span class=\"s2\">\"c\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"d\"</span><span class=\"p\">:{</span>\n         <span class=\"s2\">\"e\"</span><span class=\"p\">:</span><span class=\"s2\">\"e\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"f\"</span><span class=\"p\">:{</span>\n            <span class=\"s2\">\"g\"</span><span class=\"p\">:</span><span class=\"s2\">\"g\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"h\"</span><span class=\"p\">:{</span>\n               <span class=\"s2\">\"i\"</span><span class=\"p\">:</span><span class=\"s2\">\"i\"</span>\n            <span class=\"p\">}</span>\n         <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">};</span> \n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">util</span><span class=\"p\">.</span><span class=\"nx\">inspect</span><span class=\"p\">(</span><span class=\"nx\">myObject</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">));</span>\n</pre></div></div>\n\n<p>このようなログが出力されます</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>{ a: 'a', b: { c: 'c', d: { e: 'e', f: [Object] } } }\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/10729276/how-can-i-get-the-full-object-in-node-jss-console-log-rather-than-object\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"環境変数で上書きできる定数を定義したい\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%81%A7%E4%B8%8A%E6%9B%B8%E3%81%8D%E3%81%A7%E3%81%8D%E3%82%8B%E5%AE%9A%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>環境変数で上書きできる定数を定義したい</h2>\n\n<p>例えばサーバのポートなど環境個別に設定したくなるようなものは<br>\n環境変数で上書きできる定数にしておくと便利です。<br>\nNode.jsではprocess.env.変数名で環境変数が参照できるので下記のようにします。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">定数定義</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_PORT</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">SERVER_PORT</span> <span class=\"o\">||</span> <span class=\"s1\">'3000'</span><span class=\"p\">;</span><span class=\"err\">　</span><span class=\"c1\">// 環境変数SERVER_PORTが未指定の場合は3000となる</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_HOST</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">SERVER_HOST</span> <span class=\"o\">||</span> <span class=\"s1\">'localhost'</span><span class=\"p\">;</span> <span class=\"c1\">// 環境変数SERVER_HOSTが未指定の場合はlocalhostとなる</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"db初回アクセスに失敗した場合にリトライされない\" class=\"fragment\"></span><a href=\"#db%E5%88%9D%E5%9B%9E%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%AB%E5%A4%B1%E6%95%97%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AB%E3%83%AA%E3%83%88%E3%83%A9%E3%82%A4%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>DB初回アクセスに失敗した場合にリトライされない</h2>\n\n<p>mongooseを使っていると、DB初回接続時にエラーが起きた時に、なぜか再接続処理してくれません。<br>\nDockerでアプリを配布する場合、アプリとMongoDBをdocker-composeで同時に立ち上げることがあると思いますが、まだMongoDBが起動しきってない状態でアプリからDBに接続しようとすると、アプリが異常終了してしまいます。これを防ぐには自力で再接続処理を実装する必要があります。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre><span class=\"kd\">function</span> <span class=\"nx\">createConnection</span> <span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">createConnection</span><span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">(</span><span class=\"sr\">/failed to connect to server .* on first connect/</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(),</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">));</span>\n\n            <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Retrying first connect...\"</span><span class=\"p\">);</span>\n                <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">openUri</span><span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">).</span><span class=\"k\">catch</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n            <span class=\"c1\">// 20秒後に再接続する</span>\n            <span class=\"p\">},</span> <span class=\"mi\">20</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(),</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">once</span><span class=\"p\">(</span><span class=\"s1\">'open'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Connection to db established.\"</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">db</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/Automattic/mongoose/issues/5169\" rel=\"nofollow noopener\" target=\"_blank\">Github mongooseのissue5169</a></li>\n</ul>\n","body":"[FUJITSU Advent Calendar 2017](https://qiita.com/advent-calendar/2017/fujitsu) 12日目の記事です。\n\nリッチでイマドキなデザインのアプリが作りたくて、\nここ４ヶ月ほど**MEAN**スタック(**M**ongoDB+**E**xpress+**A**ngular+**N**ode.js)でブログアプリを作っています。\n知識ゼロからのスタートでしたが、多くの方々がブログやStackOverFlowに情報を載せてくれているので、躓きながらもなんとかアプリ開発を進めることができました。\n\nこの記事では、フロントエンド初心者の自分がMEANスタックでアプリを作る時に躓いたことや、こういう機能を実現するにはどうすればいいか?などをまとめています。\nこれからをAngularを学ぼうとしている方、ExpressやMongoDBなどサーバーサイドJavaScriptを学ぼうとしている方の参考になればうれしいです。\n\n## アプリの紹介\n本線から脱線しますが、イントラでの使用を想定したQiitaのようなブログアプリです。デモ環境もあるのでよければ触ってみてください(モバイルには未対応ですが。。。)\n\n* [Github](https://github.com/Takumon/mean-blog)\n* [Dockerhub](https://hub.docker.com/r/takumon/mean-blog_auto/)\n* [デモ環境](https://material-blog-demo.herokuapp.com/) (ユーザID/パスは DemoUser / DemoUser1234# です)\n\nアプリキャプチャ その１ (記事詳細)\n![appdemo_detail.png](https://qiita-image-store.s3.amazonaws.com/0/49915/b8133317-fac2-bb9b-8f2d-13db896becf5.png)\n\nアプリキャプチャ その２ (記事一覧)\n![アプリ_スクリーンキャプチャ_記事一覧.png](https://qiita-image-store.s3.amazonaws.com/0/49915/950d1062-1ba4-63f6-fe53-cfe6d46430a4.png)\n\nアプリキャプチャ その３ (プロフィール)\n![アプリ_スクリーンキャプチャ_ ユーザ画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/325c7948-ce16-9c08-0b66-d3892e046aed.png)\n\n# 1. フロント側Angularまわり\n## Angularについて調べる時に古い情報を除外したい\n1系は`AngularJS`、2系以降は`Angular`と呼ばれており、1系と2系以降では大きく仕様が異なります。\nそのため検索する時は`Angualr2`などバージョンを指定したり、1系を除外するため\u001e`--AngularJS`をつけたり\u001dすると検索しやすいです。\n\n## HTMLのDOM\b要素を、別のDOM要素またはComponentから扱いたい\n要素に`#xxxxx`\bのように`#`始まりの名前をつけると、別の\bDOM要素から参照できます\n\n```html:HTML\n<input #phone placeholder=\"電話番号\"/>\n<!--  他のDOM要素からphonという変数名でDOM要素を参照できるようになる -->\n<button >(click)=\"callPhone\b(phone.value)\">\n```\n\n\bComponentから参照する場合は`@ViewChild`を使います\n\n```typescript:Component\n  // \bViewChildの引数に\b\b名前を文字列で指定します\n  @ViewChild('phone') phoneElement: phoneElement;\n\n  showPhoneValue() {\n    console.log(this.phoneElement.value);\n    )\n  }\n```\n\n\b**参考サイト**\n\n* [Angular公式サイト](https://angular.io/guide/template-syntax#ref-vars)\n* [StackOverFlow](https://stackoverflow.com/questions/32693061/how-can-i-select-an-element-in-a-component-template)\n\n\n\n## Routing時の認証を非同期で行いたい\nURLごとの認証は`CanActivate`インターフェースを実装すればできますが、\nサーバから認証情報を取得して非同期で認証したい場合もあると思います。\nそのような時は、**`CanActivate#canActivate`で**booleanの代わりに**Observable<boolean>を戻り値に指定する**ことで実現できます。\n\n\n```typescript:SampleAuthGuard\nimport { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs/Rx';\n\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable()\nexport class SampleAuthGuard implements CanActivate {\n\n  constructor(\n    private auth: AuthenticationService,\n  ) { }\n\n  // booleanではなくObservable<boolean>を戻り値で返す\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.auth.checkState()\n      .map(res => true)\n      .catch(err => Observable.of(false))\n  }\n}\n\n```\n\n\b**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/38425461/angular2-canactivate-calling-async-function)\n\n## FormArrayの値を初期化したい\nFormControlはpatchValueで初期値を設定できますが、\nFormArrayの場合patch\bValueで配列の値を設定しようと\bしても設定できません。\n\bこういう場合は、**\b\b配列1つ１つの値をもとにFormControlを生成してFormArrayにpush**します。\n\n```typescript:ダメな例\nngOnInit() {\n  // Form生成\n  this.form = this.formBuilder.group({\n    schoolName: '',\n    students: this.formBuilder.array([])\n  });\n\n  // Formに初期値を設定\n  this.form.pathValue({\n    schooleName: 'SampleSchoolName' // FormControlの値の初期化はpatchValueで可能\n    students: ['taro', 'jiro', 'saburo']; // FormArrayに要素を追加する場合patchValueでは不可能\n  });\n}\n```\n\n```typescript:\b良い例\nngOnInit() {\n  // Formを生成\n  this.form = this.formBuilder.group({\n    schoolName: '',\n    students: this.formBuilder.array([])\n  });\n\n  // Formに初期値を設定\n  this.form.pathValue({\n    schooleName: 'SampleSchoolName'\n  });\n\n  // データからFormControlを生成し１件１件FormArrayにpushする\n  ['taro', 'jiro', 'saburo'].forEach(student -> {\n    this.form.controls['students'].push(new FormControll(student));\n  });\n}\n```\n\n\b**参考サイト**\n\n* [StackOvereFlow](https://stackoverflow.com/questions/40916084/angular2-patchvalue-push-value-into-array)\n\n## 「ERROR Error: No provider for TemplateRef!」というエラー\n最初このエラーが出た時は、何が原因なのかわからずに困りました。。。\n大抵の場合は、**`*ngIf`や`*ngForm`の`*`が抜けてることが原因**です(要するにただのタイポです。。。)\n`*`が抜けると、Angularは`ngIf`をディレクティブとして解釈しようとしますが、\n\bそんな\b\bディレクティブは存在しないので`No provider for TemplateRef!`と言われてしまうそうです。\n\n\b**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/35932074/angular2-no-provider-for-templateref-ngif-templateref)\n\n\n## textareaにおいてTabキーでインデントしたい\n文書を入力するようなテキストエリアの場合に、\u001dTabキーでのインデントしたい場合は、\n\bkyedownイベント発生時に\bテキストエリアの値とキャレットの位置を操作することで実現可能です。\n\n```html:HTML\n<textarea #sampletextarea\n  (keydown)=\"indent($event, sampletextarea)\" ></textarea>\n```\n\n```typescript:Component\n  indent($event, sampleTextAreaElement) {\n    // Tabキー押下時\n    if ($event.keyCode === 9) {\n      \b// 次の要素に\bフォーカスが移らないようにする\n      $event.preventDefault();\n\n      // 現在のキャレット位置を取得\n      \bconst caretStart = textareaElement.selectionStart;\n      const caretEnd = textareaElement.selectionEnd;\n\n      // テキストエリアの値を\b取得し、キャレット位置にTabを挿入\n      const TAB = '¥t';\n      sampleTextAreaElement.value = sampleTextAreaElement.value.substring(0, caretStart)\n                     + TAB + sampleTextAreaElement.value.substring(caretStart, value.length);\n\n      // キャレット位置をTab分ずらす\n      sampleTextAreaElement.focus();\n      sampleTextAreaElement.setSelectionRange(caretStart + TAB.length, caretEnd + TAB.length);\n\n      return;\n    }\n  }\n\n```\n\n\n\n## \bMarkdownプレビューを\b表示したい、ソースコードはシンタックスハイライトさせたい\n[marked](https://github.com/chjj/marked)と[highlight.js](https://github.com/isagalaev/highlight.js)を組み合わせて使います。\n[marked](https://github.com/chjj/marked)のReadmeを見ればなんとなくわかりますが、Angularの仕組みに乗せる必要があるのでPipeやらServiceやらを作ります。\n\n```typescript:markdown-parse.service.ts\nimport { Injectable } from '@angular/core';\nimport marked from 'marked';\nimport hljs from 'highlight.js';\n\n\n@Injectable()\nexport class MarkdownParseService {\n\n  constructor() {\n    marked.setOptions({\n      highlight: function (code) {\n        return hljs.highlightAuto(code).value;\n      }\n    });\n  }\n\n  parse(rawText: string) {\n    return marked(rawText);\n  }\n}\n```\n\n\n```typescript:markdown.pipe.ts\nimport marked from 'marked';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { MarkdownParseService } from './markdown-parse.service';\n\n@Pipe({ name: 'toMarkdown' })\nexport class MarkdownParsePipe implements PipeTransform {\n  constructor(markdownParseService: MarkdownParseService) {}\n\n  transform(value: string): any {\n    return this.markdownParseService.parse(value);\n  }\n}\n```\n\nHTMLで下記のように指定します。`{{}}`だと\bサニタイズされてしまうので\b`innerHTML`属性を指定します。\n\n```html\n<div [innerHTML]=\"md | toMarkdown\"></div>\n```\n\n\n\b**参考サイト**\n\n* [Qiita AngularでMarkdownをHTMLとして表示するカスタムpipeを作成する](https://qiita.com/daikiojm/items/e02e2aeb0231b3620a0b)\n* Github [chjj/marked](https://github.com/chjj/marked)\n\n\n\n\n## 絞り込み条件付きリストにおいて、リストの要素が\b変更、追加\b、削除された時に絞り込み結果をリフレッシュしたい\nリストの絞り込みはPipeで実現しますが、通常Pipeはリストの要素が変更されても再び絞り込みが実施されることはありません。\nこのような場合はPipeアノテーションにて**pureオプションをfalseに設定**ましょう。\n\n```html:HTML\n<input type=\"text\" #searchUserName>\n<ul>\n  <li *ngFor=\"let user of (userList | searchUserFilter: searchUserName.value);\" >{{user.name}}</li>\n<ul>\n```\n\n```typescript:search-user.pipe.ts\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { User } from './user';\n\n@Pipe({\n  name: 'searchUserFilter',\n  pure: false // pureをfalseにすることでユーザが変更、追加、削除された時にリフレッシュできる\n})\nexport class SearchFilterPipe implements PipeTransform {\n  transform(items: Array<User>, searchUserName: string): any[] {\n    if (!searchUserName) return items;\n\n    searchUserName = searchUserName.toLowerCase();\n    return items.filter( item => item.user.userId.toLowerCase().includes(searchUserName));\n  }\n}\n```\n\n\b**参考サイト**\n\n* [Angular公式サイト](https://angular.io/guide/pipes#pure-and-impure-pipes)\n\n\n\n\n## グローバル定数を定義したい\nいろんなクラスで使う定数を\b共通\b化する時は、単純に**クラスを作ってstaticなメンバとして定数を定義**します。\n\n```typescript:app-settings.ts\nexport class AppSettings {\n   public static API_ENDPOINT='http://127.0.0.1:6666/api/';\n}\n```\n\n```typescript:SampleService\nimport {Injectable} from 'angular2/core';\nimport {AppSettings} from './app-settings';\n\n@Injectable()\nexport class SampleService {\n    \bsampleMethod() {\n      console.log(AppSettings.API_ENDPOINT);\n    }\n}\n```\n\n**参考**\n\n* [StackOverFlow](https://stackoverflow.com/questions/34986922/define-global-constants-in-angular-2)\n\n\n## 画像が多い画面の初期表示を早くしたい\n[ng-lazyload-image](https://github.com/tjoskar/ng-lazyload-image)を使えば画像の遅延ロードを実現できます。\n使い方もとても簡単でimgタグにディレクティブを指定するだけです。\n\n```html:HTML\n <img\n  [defaultImage]=\"https://images.sample.com/photo/defaultimage\" \n  [lazyLoad]=\"https://images.sample.com/photo/sampleimage\"\n  [offset]=\"30\"\n >\n```\n\n*defaultImage*\n　即時ロードされる画像のURL、遅延ロードする画像を読み込む間、表示される\n*lazyLoad*\n　遅延ロードする画像のURL\n*offset*\n　スクロールが発生する場合に画面下部の何ピクセル下に来た時にロードを開始するか\n*errorImage*\n　遅延ロード失敗時に表示する画像URL\n\n**参考サイト**\n\n* [ng-lazyload-image](https://github.com/tjoskar/ng-lazyload-image)\n\n\n## Angular Cliの`ng serve`コマンドでdistフォルダを一旦削除したくない\n`ng serve`コマンドは`dist`フォルダを削除してからtsファイルをトランスコンパイルします。\nそれを防ぐためには、**delete-output-pathオプションをfalse**に指定します。\n\n```json:package.json　ビルドスクリプト\n\"script\": {\n  \"build\": \"cp ./resource/* dist && ng serve --delete-output-path=false\"\n}\n```\n\n\b**参考サイト**\n\n* [angular-cli github issue #4366](https://github.com/angular/angular-cli/issues/4366)\n\n\n## AOTコンパイルが遅いのでなんとかしたい\nなんとかできませんでした。。。(もしかしたら方法があるのかもしれません。誰か教えてください!!!)\nAOTコンパイルはJITコンパイルが検出してくれないHTMLのエラーを警告してくれますが、その反面遅いです。特に[Angular Material](https://material.angular.io/)を使う場合は顕著です。\nそのため、自分の場合は基本的にJITビルドを使い、issueのプルリクをする前など区切りのいいタイミングでAOTビルドしてエラーがないか確認するというように使い分けてました。\n\n\n# 2. フロント側Angularでのテスト周り\n## CI環境などでテストが終わらずにタイムアウトしてしまう\nCirleCiなどでテストを実行する場合`ng test`コマンドだとプロセスが終了しないためタイムアウトで失敗してしまいます。\nこのような場合は**watchオプションをfalseに設定**します。\n\n```\nng test --wtach=false\n```\n\n**参考サイト**\n[Github isssue](https://github.com/angular/angular-cli/issues/362)\n\n## テスト時に「Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.」や「Failed to execute 'send' on 'XMLHttpRequest'」のエラー\nこのような場合は、一時的に`ng test`コマンドのオプションに**`-sm=false`を追加**してテストし直すと根本原因エラーメッセージで出力されるようになります。\n大抵の場合は自作したモッククラスに必要なメソッドがないことが原因です。\n\n\b**参考サイト**\n\n* [stackOverFlow](https://stackoverflow.com/questions/45399079/angular-tests-failing-with-failed-to-execute-send-on-xmlhttprequest)\n\n\n## テスト用に子コンポーネントをモック化したい\n意外と簡単で、TestBed#configureTestingModuleで\ndeclarationsに自作したモックの子コンポーネントを追加するだけです。\ninput,outputがあれば必要に応じてメンバ定義します。\n\n\n```typescript\n// ※import文は省略\n\n// モックの子コンポーネントを定義\n@Component({\n  selector: 'app-child', // 子コンポーネントと同じものを定義\n  template: '<p>Mock Child Component</p>'\n})\nclass MockClildComponent {\n  @Input() childInput: string;\n  @Output() childOutput = new EventEmitter();\n}\n\n// ...\n\nbeforeEach(() => {\n  TestBed.configureTestingModule({\n    declarations: [\n      // テスト時のdeclarationsにモックの定義を追加\n      MockProductSettingsComponent,\n      // ...\n    ],\n    // ...\n  });\n  // ...\n});\n```\n\n\b**参考サイト**\n\n* [stackOverFlow](https://stackoverflow.com/questions/41240163/mocking-child-components-angular-2)\n\n\n## テスト結果にAngular Materilaのスタイルが反映されない\nUIフレームワークで[Angular Material](https://material.angular.io/)を使っている場合、\n`karma.config.js`でAngular Materilaのcssを直接読み込んであげる必要あります。\n\n```javascript:karma.conf.js\nfiles: [\n      ・・・\n      // Angular Materialのスタイルをテスト開始時に読み込んでおく\n      {pattern: './node_modules/@angular/material/prebuilt-themes/indigo-pink.css', included: true, watched: false},\n],\n```\n\n**参考サイト**\n\n* [stackoverflow](https://github.com/angular/material2/issues/4056)\n\n\n## テスト結果にstyles.scss(アプリ共通のスタイル定義)のスタイルが反映されない\nアプリ共通スタイルをSASS形式にしている場合\n開発用ライブライに`karma-scss-preprocessor`と`node-sass`を追加して`karma.conf.js`を下記のように設定します。\n\n```javascript:karma.conf.js\nplugins: [\n  ・・・\n　 // プラグインに`karma-scss-preprocessor`を追加\n  require('karma-scss-preprocessor')\n],\n\n\nfiles: [\n  ・・・\n  // filesにアプリ共通スタイルを追加\n  { pattern: './src/styles.scss', watched: false,  included: true, served: true }\n],\n\n// preprocessorsを追加\npreprocessors: {\n './src/test.ts': ['@angular/cli'],\n './src/styles.scss': ['scss']\n},\n```\n\n\b**参考サイト**:\n\n* [stackOverFlow](https://stackoverflow.com/questions/44460733/how-to-configure-karma-to-include-global-scss-files-for-an-angular-cli-project/44498689#44498689)\n* [Github karma/issue/2700](https://github.com/karma-runner/karma/issues/2700)\n\n\n\n\n# 3. バックエンド側 Express、MongoDB周り\n※MongDBをNode.jsで扱う場合は[mongoose](https://github.com/Automattic/mongoose)という便利なライブラリがあるのでそれを使う前提のお話です。\n\n## mongooseのvirtualメソッドを使う\n例えば`記事`,`コメント`,`リプライ`などのモデルを定義する場合、\n３つのモデルのライフサイクルは、記事追加 => 記事に対するコメント追加 => コメントに対するリプライ追加　のようになります。\nこのような場合は、コメントが記事の参照を持ち、リプライがコメントの参照を持つモデル構造が望ましいです。コメントやリプライ追加時に１つのモデルの更新だけですむからです。\n![db構造_良.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f93ac0e6-317e-1cdf-bfba-13531e2455ba.png)\n\nただ記事の検索は少し工夫が必要で、**mongooseのvirtualを使います**。これによって記事からコメントへの参照、コメントからリプライへの参照を擬似的に定義できるため、\n検索時に擬似要素をpopulateするだけで、記事に紐付くコメントとリプライを取得できるようになります。\n![mongoose virtualのイメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/4aab7f38-1f19-e00b-b35d-23babf36a75b.png)\n\n具体的なソースコードを示します。\n\n```typescript:article.model.ts\nimport * as mongoose from 'mongoose';\n\nconst ArticleSchema = new mongoose.Schema({\n  content: String\n}, { toJSON: { virtuals: true } });\n\n\n// 記事に紐付くコメントモデルの配列をcommentsという擬似要素で定義する\nArticleSchema.virtual('comments', {\n  ref: 'Comment',\n  localField: '_id',\n  foreignField: 'articleId',\n  justOne: false,\n});\n\nconst Article = mongoose.model('Article', ArticleSchema);\n\nexport { Article };\n```\n\n\n```typescript:comment.model.ts\nimport * as mongoose from 'mongoose';\n\nconst CommentSchema = new mongoose.Schema({\n  articleId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Article',\n  },\n  comment: String;\n}, { toJSON: { virtuals: true } });\n\n// コメントに紐付くリプライモデルの配列をrepliesという擬似要素で定義する\nCommentSchema.virtual('replies', {\n  ref: 'Reply',\n  localField: '_id',\n  foreignField: 'commentId',\n  justOne: false,\n});\n\nconst Comment = mongoose.model('Comment', CommentSchema);\n\nexport { Comment };\n```\n\n```typescript:reply.model.ts\nimport * as mongoose from 'mongoose';\n\nconst ReplySchema = new mongoose.Schema({\n  commentId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Comment'\n  },\n  reply: String;\n});\n\nconst Reply = mongoose.model('Reply', ReplySchema);\n\nexport { Reply };\n```\n\n```typescript:検索処理\nArticle.find()\n.populate({\n  path: 'comments', // Articleモデルで定義した擬似要素commentsをpopulateする\n  populate: [{\n    path: 'replies', // Commentモデルで定義した擬似要素repliesをpopulateする\n  }],\n});\n```\n\n\n## リクエスト、レスポンスのログ出力したい\nExpressのuseにて実現します。\nレスポンスオブジェクトのfinishイベントを監視することで、レスポンス時にログを出力しています。\n\n\n```javascript:リクエストとレスポンスのログ出力　※ここでは簡単のためコンソールに出力しています\nconst express = express();\nexpress.use(function accessLogHandler (req, res, next) {\n  const start = new Date();\n  // リクエスト時のログ　\n  console.log([\n    'start',\n    req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n    req.method,\n    req.url,\n    '-',\n    req.headers.referer || '-',\n    req.headers['user-agent'] || '-',\n    '--ms--'\n  ].join(',\\t'));\n\n  res.once('finish', function() {\n　　 // レスポンス時のログ\n    accessLogger.info([\n      'end',\n      req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n      req.method,\n      req.url,\n      res.statusCode,\n      req.headers.referer || '-',\n      req.headers['user-agent'] || '-',\n      '--' + (new Date().getMilliseconds() - start.getMilliseconds()) + 'ms--'\n    ].join(',\\t'));\n  });\n\n  next();\n});\n```\n\n実際のログはこんな感じで出力されます。\n\n```py3\nstart,  ::ffff:127.0.0.1, GET, /api/authenticate/check-state,   -, http://localhost:4200/, Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36, --ms--\nend,    ::ffff:127.0.0.1, GET, /check-state,                  403, http://localhost:4200/, Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36,  --47ms--\n```\n\n\n\n## ログ出力でオブジェクトの全プロパティを出力したい\nオブジェクトの中身をログで確認する時はNode.jsの`util.inspect()`を使います。\n\n\n```javascript\nconst util = require('util');\nconst myObject = {\n   \"a\":\"a\",\n   \"b\":{\n      \"c\":\"c\",\n      \"d\":{\n         \"e\":\"e\",\n         \"f\":{\n            \"g\":\"g\",\n            \"h\":{\n               \"i\":\"i\"\n            }\n         }\n      }\n   }\n}; \n\nconsole.log(util.inspect(myObject, false, null));\n```\n\nこのようなログが出力されます\n\n```\n{ a: 'a', b: { c: 'c', d: { e: 'e', f: [Object] } } }\n```\n\n**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/10729276/how-can-i-get-the-full-object-in-node-jss-console-log-rather-than-object)\n\n\n## 環境変数で上書きできる定数を定義したい\n例えばサーバのポートなど環境個別に設定したくなるようなものは\n環境変数で上書きできる定数にしておくと便利です。\nNode.jsではprocess.env.変数名で環境変数が参照できるので下記のようにします。\n\n```typescript:定数定義\nexport const SERVER_PORT: string = process.env.SERVER_PORT || '3000';　// 環境変数SERVER_PORTが未指定の場合は3000となる\nexport const SERVER_HOST: string = process.env.SERVER_HOST || 'localhost'; // 環境変数SERVER_HOSTが未指定の場合はlocalhostとなる\n```\n\n\n## DB初回アクセスに失敗した場合にリトライされない\nmongooseを使っていると、DB初回接続時にエラーが起きた時に、なぜか再接続処理してくれません。\nDockerでアプリを配布する場合、アプリとMongoDBをdocker-composeで同時に立ち上げることがあると思いますが、まだMongoDBが起動しきってない状態でアプリからDBに接続しようとすると、アプリが異常終了してしまいます。これを防ぐには自力で再接続処理を実装する必要があります。\n\n```javascript\nfunction createConnection (dbURL, options) {\n    var db = mongoose.createConnection(dbURL, options);\n\n    db.on('error', function (err) {\n        if (err.message && err.message.match(/failed to connect to server .* on first connect/)) {\n            console.log(new Date(), String(err));\n\n            setTimeout(function () {\n                console.log(\"Retrying first connect...\");\n                db.openUri(dbURL).catch(() => {});\n            // 20秒後に再接続する\n            }, 20 * 1000);\n        } else {\n            console.error(new Date(), String(err));\n        }\n    });\n\n    db.once('open', function () {\n        console.log(\"Connection to db established.\");\n    });\n\n    return db;\n}\n```\n\n**参考サイト**\n\n* [Github mongooseのissue5169](https://github.com/Automattic/mongoose/issues/5169)\n\n","comments_count":0,"created_at":"2017-12-12T03:19:11+09:00","likes_count":46,"reactions_count":0},"matches":4,"weight":250,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Express"},{"weight":50,"keyword":"Qiita"}],"avgWeight":62.5,"totalWeight":58,"threshold":12.5,"isRelated":true},{"node":{"fields":{"slug":"/7780e313-8bda-5534-99aa-37bf47e9deb3/","title":"GitBucketのissueで作業量を設定できるプラグイン","date":"2017-12-31T23:49:04+09:00","excerpt":"== 2018/4/7 追記 ==========================================本記事ではChrome拡張とDockerによって実現していましたが、その後GitBucket Plugin化しました。gitb...","tags":["JavaScript","chrome-extension","Docker","GitBucket","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"7780e313-8bda-5534-99aa-37bf47e9deb3","title":"GitBucketのissueで作業量を設定できるプラグイン","rendered_body":"<p>== 2018/4/7 追記 ==========================================<br>\n本記事ではChrome拡張とDockerによって実現していましたが、<br>\nその後GitBucket Plugin化しました。</p>\n\n<p><a href=\"https://github.com/Takumon/gitbucket-issue-estimation-plugin\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-plugin</a></p>\n\n<p><a href=\"https://github.com/Takumon/gitbucket-issue-estimation-plugin/releases/tag/0.1\" rel=\"nofollow noopener\" target=\"_blank\">リリースページ</a>からjarファイルをダウンロードして<code>&lt;GITBUCKET_HOME&gt;/plugins/</code>に置くだけで導入可能です。<br>\n== =======================================================</p>\n\n<p>Git Advent Calendarが埋まっていなかったので、大晦日ですが代わりに投稿させていただきました。</p>\n\n<h2>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h2>\n\n<p><a href=\"https://gitbucket.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">GitBucket</a>のマイルストーンの進捗率はissueの件数ベースなので、issueごとに作業量のバラつきがあったりすると現実的な進捗率と乖離してしまいます。</p>\n\n<p>そこで今回はChrome拡張とDockerイメージを作成して、<br>\nissueに作業量を設定できるようにして、マイルストーンで作業量ベースの進捗率を確認できるようにしました。</p>\n\n<p>Chrome拡張とDockerイメージはどちらも公開しているので簡単に導入できます。是非試してみてください。</p>\n\n<ul>\n<li>\n<em>Chrome拡張</em>\n\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-client</a></li>\n</ul>\n</li>\n<li>\n<em>Dockerイメージ</em>\n\n<ul>\n<li><a href=\"https://hub.docker.com/r/takumon/gitbucket-issue-estimation-server/\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-server</a></li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"導入すると\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B%E3%81%A8\"><i class=\"fa fa-link\"></i></a>導入すると</h2>\n\n<p><a href=\"https://gitbucket.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">GitBucket</a>のissueで作業量が設定できるようになり、<br>\n<a href=\"https://camo.qiitausercontent.com/f13706aedeb42c177c1f4f57975596b5ff002407/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36313030366263392d326438322d663062302d363461322d3037393233633737333963372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/f13706aedeb42c177c1f4f57975596b5ff002407/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36313030366263392d326438322d663062302d363461322d3037393233633737333963372e706e67\" alt=\"導入後_イシュー画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/61006bc9-2d82-f0b0-64a2-07923c7739c7.png\"></a></p>\n\n<p>マイルストーンで作業量ベースの進捗率が見れるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/b86e2b23bc0f4b9fae45b07bfd568b11bc005121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36613462383664382d323937332d656338342d383662632d3632383965343262643636362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b86e2b23bc0f4b9fae45b07bfd568b11bc005121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36613462383664382d323937332d656338342d383662632d3632383965343262643636362e706e67\" alt=\"導入後_マイルストーン画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/6a4b86d8-2973-ec84-86bc-6289e42bd666.png\"></a></p>\n\n<p>またissue一覧画面でも作業量を設定できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/7c2ee31427698b7fe01b30f25b8e31b7e3115e2d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39633835386533622d356463312d313432342d663334662d3562323661633665323066642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7c2ee31427698b7fe01b30f25b8e31b7e3115e2d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39633835386533622d356463312d313432342d663334662d3562323661633665323066642e706e67\" alt=\"導入後_イシュー一覧画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/9c858e3b-5dc1-1424-f34f-5b26ac6e20fd.png\"></a></p>\n\n<h2>\n<span id=\"導入手順\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>導入手順</h2>\n\n<h3>\n<span id=\"1-docker側\" class=\"fragment\"></span><a href=\"#1-docker%E5%81%B4\"><i class=\"fa fa-link\"></i></a>1. Docker側</h3>\n\n<p>GitBucketと同じネットワーク環境に作業量保存用のサーバを立てます。Dockerが導入されていることが前提です。</p>\n\n<ul>\n<li>docker-compose.ymlを作成（MongoDBのボリューム用にdocker-compose.ymlファイルと同階層にdbフォルダを作成してください）</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"docker\">\n<div class=\"code-lang\"><span class=\"bold\">docker-compose.yml</span></div>\n<div class=\"highlight\"><pre>version: \"3.3\"\nservices:\n  server:\n    image: takumon/gitbucket-issue-estimation-server\n    ports:\n      - 3000:3000\n    depends_on:\n      - mongo\n    links:\n      - mongo\n    environment:\n      MONGO_URL: mongodb://mongo:27017/test\n  mongo:\n    image: mongo:3.5.12\n    ports:\n      - 27017:27017\n    volumes:\n      - ./db:/data/db\n</pre></div>\n</div>\n\n<ul>\n<li>docker-conpose.ymlがあるフォルダで下記を実行</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span>docker-compose up <span class=\"nt\">-d</span>\n</pre></div></div>\n\n<h3>\n<span id=\"2-gitbucket側\" class=\"fragment\"></span><a href=\"#2-gitbucket%E5%81%B4\"><i class=\"fa fa-link\"></i></a>2. GitBucket側</h3>\n\n<p>Chrome拡張をインストールする前に、GitBucketのトークンを発行してメモしておきます。</p>\n\n<ul>\n<li><p>GitBucketヘッダー右上アイコン &gt; Account Setting を選択<br>\n<a href=\"https://camo.qiitausercontent.com/b06f383ce5768cc2c9b84b7bcd92537cbd0f94ef/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34323637363166372d633139392d653139652d633631392d6131383264643035623065612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b06f383ce5768cc2c9b84b7bcd92537cbd0f94ef/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34323637363166372d633139392d653139652d633631392d6131383264643035623065612e706e67\" alt=\"導入手順_GitBucketトークン発行_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/426761f7-c199-e19e-c619-a182dd05b0ea.png\"></a><br>\n<br></p></li>\n<li><p>左メニュー Applicationsを選択し、Generate new tokenのToken descriptionにトークンの概要を記載、その後<code>Generate token</code>ボタンをクリック<br>\n<a href=\"https://camo.qiitausercontent.com/e21ff3f5214f3833cc66ed4d9cf2037b31c6d02f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64313836663730322d663764622d353231652d366436642d6564636133313836643931352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e21ff3f5214f3833cc66ed4d9cf2037b31c6d02f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64313836663730322d663764622d353231652d366436642d6564636133313836643931352e706e67\" alt=\"導入手順_GitBucketトークン発行_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/d186f702-f7db-521e-6d6d-edca3186d915.png\"></a><br>\n<br></p></li>\n<li><p>発行されたトークンをコピー（後の手順で使います）<br>\n<a href=\"https://camo.qiitausercontent.com/d46de4cb3222a8304001bbc2f89abc1e14b2cba8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30633830346661662d666431332d383064322d386365392d6535303439323262623534612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d46de4cb3222a8304001bbc2f89abc1e14b2cba8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30633830346661662d666431332d383064322d386365392d6535303439323262623534612e706e67\" alt=\"導入手順_GitBucketトークン発行_３.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/0c804faf-fd13-80d2-8ce9-e504922bb54a.png\"></a></p></li>\n</ul>\n\n<h3>\n<span id=\"3-chrome-extension側\" class=\"fragment\"></span><a href=\"#3-chrome-extension%E5%81%B4\"><i class=\"fa fa-link\"></i></a>3. Chrome Extension側</h3>\n\n<ul>\n<li><p>Chromeを開きChromeウェブストアで<a href=\"https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-client</a>をインストール<br>\n<a href=\"https://camo.qiitausercontent.com/b7b7e21c6391cd1436ad73eb356bdec6f93bb3b4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63336365666639382d313731372d626566302d306465392d3836313736303638613635632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b7b7e21c6391cd1436ad73eb356bdec6f93bb3b4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63336365666639382d313731372d626566302d306465392d3836313736303638613635632e706e67\" alt=\"導入手順_GitBucket_拡張インストール_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/c3ceff98-1717-bef0-0de9-86176068a65c.png\"></a><br>\n<br></p></li>\n<li>\n<p>右上の「E」アイコンをクリック、下記情報を入力し<code>Save</code>ボタンクリック</p>\n\n<ul>\n<li>\n<strong>gitbucket-issue-estimation-server URL</strong>\n\n<ul>\n<li>サーバ側の手順で立てたサーバのURL 例： <code>http://127.0.0.1:3000</code> </li>\n</ul>\n</li>\n<li>\n<strong>GitBucket Token</strong>\n\n<ul>\n<li>GitBucket側の手順でメモしたトークン\n<a href=\"https://camo.qiitausercontent.com/be5ab7568b1a4eee506be3546cae994189e34d15/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66366162333739622d613835322d366562342d663634382d6131346437353139663365622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/be5ab7568b1a4eee506be3546cae994189e34d15/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66366162333739622d613835322d366562342d663634382d6131346437353139663365622e706e67\" alt=\"導入手順_GitBucketトークン発行_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f6ab379b-a852-6eb4-f648-a14d7519f3eb.png\"></a>\n<br>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"具体的な仕組み\" class=\"fragment\"></span><a href=\"#%E5%85%B7%E4%BD%93%E7%9A%84%E3%81%AA%E4%BB%95%E7%B5%84%E3%81%BF\"><i class=\"fa fa-link\"></i></a>具体的な仕組み</h2>\n\n<p>Docker側はMongoDBとNode.jsを使っていて、issueの作業量の検索登録・更新・削除APIを提供しているだけです。<br>\nChrome拡張側で下記のように全体をコントロールしています。</p>\n\n<p><strong>(1)</strong> ・・・　GitBucketの画面からissueとマイルストーンの情報を取得、issueの作業量、作業量ベースの進捗率を画面に挿入<br>\n<strong>(2)</strong> ・・・　画面から取得したissueの情報をもとに詳細情報を取得<br>\n<strong>(3)</strong> ・・・　issueの作業量を検索・登録・更新・削除</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/d5736e48c469204a17566c6cfb4003420add2c8e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63616435323063332d376439632d666134372d326262302d3732633534663638383233362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d5736e48c469204a17566c6cfb4003420add2c8e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63616435323063332d376439632d666134372d326262302d3732633534663638383233362e706e67\" alt=\"全体像.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/cad520c3-7d9c-fa47-2bb0-72c54f688236.png\"></a></p>\n\n<h2>\n<span id=\"chrome拡張作成時にgitbucket-apiまわりで躓いたこと\" class=\"fragment\"></span><a href=\"#chrome%E6%8B%A1%E5%BC%B5%E4%BD%9C%E6%88%90%E6%99%82%E3%81%ABgitbucket-api%E3%81%BE%E3%82%8F%E3%82%8A%E3%81%A7%E8%BA%93%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>Chrome拡張作成時にGitBucket APIまわりで躓いたこと</h2>\n\n<p><a href=\"https://github.com/gitbucket/gitbucket/wiki/API-WebHook\" rel=\"nofollow noopener\" target=\"_blank\">GitBucketのAPI</a>は<a href=\"https://developer.github.com/v3/\" rel=\"nofollow noopener\" target=\"_blank\">GithubのREST API v3</a>に準拠していますが、一部実装されていない部分があったので、Chrome拡張作成時に躓きました。</p>\n\n<h3>\n<span id=\"stateallが効かない\" class=\"fragment\"></span><a href=\"#stateall%E3%81%8C%E5%8A%B9%E3%81%8B%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a><code>state=all</code>が効かない</h3>\n\n<p>未解決issueと解決済issue両方をいっぺんに取得したかったのですが、GitBucketのAPIでは<code>state=all</code>が効きません。そのため<code>state=open</code>と<code>state=closed</code>を指定して２回に分けて取得する実装にしました。</p>\n\n<h4>\n<span id=\"per_pageが効かない1度に25件が最大\" class=\"fragment\"></span><a href=\"#per_page%E3%81%8C%E5%8A%B9%E3%81%8B%E3%81%AA%E3%81%841%E5%BA%A6%E3%81%AB25%E4%BB%B6%E3%81%8C%E6%9C%80%E5%A4%A7\"><i class=\"fa fa-link\"></i></a><code>per_page</code>が効かない（1度に25件が最大）</h4>\n\n<p>GitBucketのAPIでは<code>per_page</code>（検索時の１ページあたりの件数）が実装されていません。<br>\nそのためマイルストーンに紐づくissue取得時は、１ページ目を検索して取得結果が25件の場合は次のページも検索するような実装にしました。</p>\n\n<h4>\n<span id=\"closed_atクローズ日が取得できない\" class=\"fragment\"></span><a href=\"#closed_at%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%BA%E6%97%A5%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a><code>closed_at</code>（クローズ日）が取得できない</h4>\n\n<p>Chrome拡張作成当初は、バーンダウンチャートを表示しようと思っていたのですが、issueのクローズ日が取得出来ないので断念しました。</p>\n\n<h4>\n<span id=\"-参考にさせていただいたサイト\" class=\"fragment\"></span><a href=\"#-%E5%8F%82%E8%80%83%E3%81%AB%E3%81%95%E3%81%9B%E3%81%A6%E3%81%84%E3%81%9F%E3%81%A0%E3%81%84%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88\"><i class=\"fa fa-link\"></i></a>※ 参考にさせていただいたサイト</h4>\n\n<ul>\n<li><a href=\"https://qiita.com/5zm/items/b0b620cdeb9596108418#1%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8C%E6%9C%80%E5%A4%A725%E4%BB%B6%E3%81%A7%E5%85%A8issue%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\" id=\"reference-1c197ca99a2ee070efac\">PythonでGitBucketのIssueをExcel出力する（その後）</a></li>\n<li><a href=\"https://qiita.com/5zm/items/57d7abca8e0d447e326d#2-gitbucket%E3%81%AEapi%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6issues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0\" id=\"reference-7d56ea50a58cb24addc5\">PythonでGitBucketのIssueをExcel出力する（API呼び出し編）</a></li>\n</ul>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>本来こういう追加機能はGitBucketプラグインで作るべきなのかもしれませんが、今回はChrome拡張とDockerイメージで実現してみました。<br>\nChrome拡張は任意の画面にJavaScriptやCSSを差し込めるので、既存のWebサービスををちょっと便利にするのにはうってつけですね。</p>\n","body":"== 2018/4/7 追記 ==========================================\n本記事ではChrome拡張とDockerによって実現していましたが、\nその後GitBucket Plugin化しました。\n\n[gitbucket-issue-estimation-plugin](https://github.com/Takumon/gitbucket-issue-estimation-plugin)\n\n[リリースページ](https://github.com/Takumon/gitbucket-issue-estimation-plugin/releases/tag/0.1)からjarファイルをダウンロードして`<GITBUCKET_HOME>/plugins/`に置くだけで導入可能です。\n== =======================================================\n\n\nGit Advent Calendarが埋まっていなかったので、大晦日ですが代わりに投稿させていただきました。\n\n## はじめに\n[GitBucket](https://gitbucket.github.io/)のマイルストーンの進捗率はissueの件数ベースなので、issueごとに作業量のバラつきがあったりすると現実的な進捗率と乖離してしまいます。\n\nそこで今回は\bChrome拡張とDockerイメージを作成して、\nissueに作業量を設定できるようにして、マイルストーンで作業量ベースの進捗率を確認できるようにしました。\n\nChrome拡張とDockerイメージはどちらも公開しているので簡単に導入できます。是非試してみてください。\n\n\n* *Chrome拡張*\n    * [gitbucket-issue-estimation-client](https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja)\n* *Dockerイメージ*\n    * [gitbucket-issue-estimation-server](https://hub.docker.com/r/takumon/gitbucket-issue-estimation-server/)\n\n## 導入すると\n[GitBucket](https://gitbucket.github.io/)のissueで作業量が設定できるようになり、\n![導入後_イシュー画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/61006bc9-2d82-f0b0-64a2-07923c7739c7.png)\n\n\bマイルストーンで作業量ベースの進捗率が見れるようになります。\n![導入後_マイルストーン画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/6a4b86d8-2973-ec84-86bc-6289e42bd666.png)\n\nまた\bissue\b一覧画面でも作業量を設定できるようになります。\n![導入後_イシュー一覧画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/9c858e3b-5dc1-1424-f34f-5b26ac6e20fd.png)\n\n\n\n\n## 導入手順\n### 1. Docker側\nGitBucketと同じネットワーク環境に作業量\b保存用のサーバを立てます。Dockerが導入されていることが前提です。\n\n* \u001edocker-compose\b.ymlを作成（MongoDBのボリューム用にdocker-compose.ymlファイルと同階層にdbフォルダを作成してください）\n\n```docker:docker-compose.yml\nversion: \"3.3\"\nservices:\n  server:\n    image: takumon/gitbucket-issue-estimation-server\n    ports:\n      - 3000:3000\n    depends_on:\n      - mongo\n    links:\n      - mongo\n    environment:\n      MONGO_URL: mongodb://mongo:27017/test\n  mongo:\n    image: mongo:3.5.12\n    ports:\n      - 27017:27017\n    volumes:\n      - ./db:/data/db\n```\n\n* docker-conpose.ymlがあるフォルダで下記を実行\n\n```bash:\n$ docker-compose up -d\n```\n\n\n### 2. GitBucket側\nChrome拡張をインストールする前に、GitBucketの\bトークンを発行してメモしておきます。\n\n* GitBucketヘッダー右上アイコン > Account Setting\b を選択\n![導入手順_GitBucketトークン発行_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/426761f7-c199-e19e-c619-a182dd05b0ea.png)\n<br>\n\n* 左メニュー Applicationsを選択し、Generate new tokenのToken descriptionにトークンの概要を記載、その後`Generate token`ボタンをクリック\n![導入手順_GitBucketトークン発行_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/d186f702-f7db-521e-6d6d-edca3186d915.png)\n<br>\n\n* 発行されたトークンをコピー（後の手順で使います）\n![導入手順_GitBucketトークン発行_３.png](https://qiita-image-store.s3.amazonaws.com/0/49915/0c804faf-fd13-80d2-8ce9-e504922bb54a.png)\n\n\n### 3. Chrome Extension側\n* Chromeを開きChromeウェブストアで[gitbucket-issue-estimation-client](https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja)をインストール\n![導入手順_GitBucket_拡張インストール_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/c3ceff98-1717-bef0-0de9-86176068a65c.png)\n<br>\n\n* \b右上の「E」アイコンをクリック、下記情報を入力し`Save`ボタンクリック\n    * **gitbucket-issue-estimation-server URL**\n        * サーバ側の手順で立てたサーバのURL 例： `http://127.0.0.1:3000` \n    * **GitBucket Token**\n        * GitBucket側の手順でメモしたトークン\n![導入手順_GitBucketトークン発行_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f6ab379b-a852-6eb4-f648-a14d7519f3eb.png)\n<br>\n\n## 具体的な仕組み\nDocker側はMongoDBとNode.jsを使っていて、issueの作業量の検索登録・更新・削除APIを提供しているだけです。\nChrome拡張側で下記のように全体をコントロールしています。\n\n**(1)** ・・・　GitBucketの画面からissueとマイルストーンの情報を取得、issueの作業量、作業量ベースの進捗率を画面に挿入\n**(2)** ・・・　画面から取得したissueの情報をもとに詳細情報を取得\n**(3)** ・・・　issueの作業量を検索・登録・更新・削除\n\n![全体像.png](https://qiita-image-store.s3.amazonaws.com/0/49915/cad520c3-7d9c-fa47-2bb0-72c54f688236.png)\n\n\n\n## Chrome拡張作成時にGitBucket APIまわりで躓いたこと\n[GitBucketのAPI](https://github.com/gitbucket/gitbucket/wiki/API-WebHook)は[GithubのREST API v3](https://developer.github.com/v3/)に準拠していますが、一部実装されていない部分があったので、Chrome拡張作成時に躓きました。\n\n### `state=all`が効かない\n未解決issueと解決済issue両方をいっぺんに取得したかったのですが、GitBucketのAPIでは`state=all`が効きません。そのため`state=open`と`state=closed`を指定して２回に分けて取得する実装にしました。\n\n#### `per_page`が効かない（\b1度に25件が最大）\nGitBucketのAPIでは`per_page`（検索時の１ページあたりの件数）が実装されていません。\nそのためマイルストーンに紐づくissue取得時は、１ページ目を検索して取得結果が25件の場合は次のページも検索するような実装にしました。\n\n#### `closed_at`（クローズ日）が取得できない\nChrome拡張作成当初は、バーンダウンチャートを表示しようと思っていたのですが、issueのクローズ日が取得出来ないので断念しました。\n\n#### ※ 参考にさせていただいたサイト\n* [PythonでGitBucketのIssueをExcel出力する（その後）](https://qiita.com/5zm/items/b0b620cdeb9596108418#1%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8C%E6%9C%80%E5%A4%A725%E4%BB%B6%E3%81%A7%E5%85%A8issue%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84)\n* [PythonでGitBucketのIssueをExcel出力する（API呼び出し編）](https://qiita.com/5zm/items/57d7abca8e0d447e326d#2-gitbucket%E3%81%AEapi%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6issues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0)\n\n\n## まとめ\n本来こういう追加機能はGitBucketプラグインで作るべきなのかもしれませんが、今回はChrome拡張とDockerイメージで実現してみました。\nChrome拡張は任意の画面にJavaScriptやCSSを差し込めるので、既存のWebサービスををちょっと便利にするのにはうってつけですね。\n\n","comments_count":0,"created_at":"2017-12-31T23:49:04+09:00","likes_count":6,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/270e2fae-ed90-5539-8c90-a2ed93ebba83/","title":"Fessを使用して、Asciidoctorで簡単に全文検索できるようにする","date":"2017-06-26T00:21:37+09:00","excerpt":"Asciidoctorを使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。そこで今回は、Dockerで...","tags":["JavaScript","全文検索","ドキュメント","Fess","asciidoctor","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"270e2fae-ed90-5539-8c90-a2ed93ebba83","title":"Fessを使用して、Asciidoctorで簡単に全文検索できるようにする","rendered_body":"<p><a href=\"http://asciidoctor.org/\" rel=\"nofollow noopener\" target=\"_blank\">Asciidoctor</a>を使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。</p>\n\n<p>そこで今回は、Dockerで全文検索サーバの<a href=\"http://fess.codelibs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Fess</a>を立てて、<br>\nドキュメントからJavaScript経由でFessのJSON APIを呼び出すことで、<br>\n全文検索を簡単に導入する方法をご紹介します。</p>\n\n<p>導入するとドキュメントの右上に検索窓が出てきて全文検索できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/e020d2b6619c0b7ce4332c80ea15b89a6efb895e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31323365633737312d666237372d653464632d646637652d6134623430373739323735392e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e020d2b6619c0b7ce4332c80ea15b89a6efb895e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31323365633737312d666237372d653464632d646637652d6134623430373739323735392e676966\" alt=\"6月-24-2017 19-05-32.gif\" title=\"6月-24-2017 19-05-32.gif\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/123ec771-fb77-e4dc-df7e-a4b407792759.gif\"></a></p>\n\n<h2>\n<span id=\"fessとは\" class=\"fragment\"></span><a href=\"#fess%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Fessとは</h2>\n\n<p><a href=\"http://fess.codelibs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Fess</a>は<strong>「5 分で簡単に構築可能な全文検索サーバー」</strong>です。<br>\nJavaベースで構築されており、Apacheライセンスで提供されるオープンソース製品で、無料で使用できます。<br>\n自分でクローラを設定して、自分だけの検索エンジンがつくれるようなイメージです。<br>\nデフォルトで検索画面を提供していますが、JSON APIも提供しているので、様々なシステムと連携可能です。</p>\n\n<h2>\n<span id=\"全体像\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E4%BD%93%E5%83%8F\"><i class=\"fa fa-link\"></i></a>全体像</h2>\n\n<p>ドキュメント用Webサーバに全文検索用のJavaScriptファイルとCSSファイルを追加し、Dockerで全文検索用のFessサーバを立てます。<br>\nFessサーバはドキュメント用Webサーバをクロールし、その情報を保存しておきます。<br>\nドキュメントで全文検索を実施すると、JavaScript経由でFessサーバのJSON AIPを呼び出して、全文検索結果をドキュメントに表示します。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/6fe043176da6b6451722114a3d0418bc40ac8c99/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31306338616334362d323135352d386562372d613565642d3763313363653534346563322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/6fe043176da6b6451722114a3d0418bc40ac8c99/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31306338616334362d323135352d386562372d613565642d3763313363653534346563322e706e67\" alt=\"0_Fess_全体像_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/10c8ac46-2155-8eb7-a5ed-7c13ce544ec2.png\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/729e46c74903de7be597a6ac4adea0c03cd8559f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34306531643435362d323633352d326165642d333333642d3862316165633434373933312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/729e46c74903de7be597a6ac4adea0c03cd8559f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34306531643435362d323633352d326165642d333333642d3862316165633434373933312e706e67\" alt=\"0_Fess_全体像_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/40e1d456-2635-2aed-333d-8b1aec447931.png\"></a></p>\n\n<h2>\n<span id=\"導入手順\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>導入手順</h2>\n\n<p>この導入手順は、下記のような環境（ローカルPCのDocker上にドキュメント用WebサーバとFessサーバが立っている環境）を作った時のものです。<br>\nDockerを使わなくても、ローカルPC以外でも、導入可能です。導入手順は適宜読み替えてください。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/a94911642557c486b240ffa8c3c184c64bfabc2c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30626164623864322d316135382d323262362d343537632d3132626563663361383931312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a94911642557c486b240ffa8c3c184c64bfabc2c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30626164623864322d316135382d323262362d343537632d3132626563663361383931312e706e67\" alt=\"0_Fess_全体像_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/0badb8d2-1a58-22b6-457c-12becf3a8911.png\"></a></p>\n\n<h3>\n<span id=\"fessのインストール\" class=\"fragment\"></span><a href=\"#fess%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>Fessのインストール</h3>\n\n<p>Docker Hubの<a href=\"https://hub.docker.com/r/codelibs/fess/\" rel=\"nofollow noopener\" target=\"_blank\">codelibs/fess</a>を使用します。今回ポートは10084で公開します。<br>\nDockerを使わない場合は<a href=\"http://fess.codelibs.org/ja/11.2/install/index.html\" rel=\"nofollow noopener\" target=\"_blank\">Fess インストールガイド</a>を参考にしてください。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ docker run -d -p 10084:8080 --name fess codelibs/fess:latest\n</pre></div></div>\n\n<h3>\n<span id=\"fessの設定\" class=\"fragment\"></span><a href=\"#fess%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>Fessの設定</h3>\n\n<h4>\n<span id=\"クローラの設定\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>クローラの設定</h4>\n\n<p><code>http://[PCのローカルIPアドレス]:10084/login</code>にアクセスするとログイン画面が表示されます。<br>\nデフォルトのID/PASS　<code>admin/admin</code>でログインしましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/d173fd5ce7a76eb7b5a6ef053a670dd6551d720c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65373930656361392d353037332d393438652d336534332d6437353436643537666165352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d173fd5ce7a76eb7b5a6ef053a670dd6551d720c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65373930656361392d353037332d393438652d336534332d6437353436643537666165352e706e67\" alt=\"1_Fess管理者_ログイン画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/e790eca9-5073-948e-3e43-d7546d57fae5.png\"></a><br>\n<br></p>\n\n<p>ログインするとダッシュボードが表示されます。左ペインの<code>クローラ</code> &gt; <code>Web</code>　を選択しましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/cbfee37bd5d06381615f013da8587b1af91c35aa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61636662653935302d666137342d643063622d336365652d3565386462346465356237342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/cbfee37bd5d06381615f013da8587b1af91c35aa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61636662653935302d666137342d643063622d336365652d3565386462346465356237342e706e67\" alt=\"2_Fess管理者_ダッシュボード.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/acfbe950-fa74-d0cb-3cee-5e8db4de5b74.png\"></a><br>\n<br></p>\n\n<p>Webクローラにはまだ何も登録されていないので、左上の<code>+　新規作成</code>ボタンをクリックしましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/e60be4a90df24cb1275c165752de363b15859b87/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36333130333762342d616162322d386530642d663961612d3364323365633931376132392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e60be4a90df24cb1275c165752de363b15859b87/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36333130333762342d616162322d386530642d663961612d3364323365633931376132392e706e67\" alt=\"3_Fess管理者_Webクロール設定_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/631037b4-aab2-8e0d-f9aa-3d23ec917a29.png\"></a><br>\n<br></p>\n\n<p>Webクロール情報入力画面が表示されます。<br>\n<a href=\"https://camo.qiitausercontent.com/62cd6f97bb7dfebb163873f26b5fda4fabcf89c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653561303963392d376363652d336665632d373838342d3132353863333266613931612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/62cd6f97bb7dfebb163873f26b5fda4fabcf89c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653561303963392d376363652d336665632d373838342d3132353863333266613931612e706e67\" alt=\"3_Fess管理者_Webクロール設定_2.png\" title=\"3_Fess管理者_Webクロール設定_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/ee5a09c9-7cce-3fec-7884-1258c32fa91a.png\"></a></p>\n\n<p>設定項目は色々ありますが、とりあえず下記項目だけ設定しましょう。</p>\n\n<ul>\n<li>名前 \n\n<ul>\n<li>任意の名前を設定してください。</li>\n</ul>\n</li>\n<li>URL \n\n<ul>\n<li>ドキュメント用Webサーバにおいてドキュメントが格納されているルートフォルダのURLを指定してください。末尾に<code>/</code>を付けてください。</li>\n</ul>\n</li>\n<li>クロール対象とするURL \n\n<ul>\n<li>正規表現で値を設定します。上記<code>URL</code>で設定したルートフォルダ配下の全資産を対象とするために、<code>URLで設定した値</code> + <code>.*</code> を指定してください。</li>\n</ul>\n</li>\n<li>検索対象とするURL\n\n<ul>\n<li>正規表現で値を設定します。HTMLのみを検索対象にしたい（JS、CSSなどは除外したい）ので、<code>URLで設定した値</code> + <code>.+\\.html$</code> を指定してください。\n<br>\n<br>\n</li>\n</ul>\n</li>\n</ul>\n\n<p>値を設定したら、画面を下にスクロールして<code>+　作成</code>ボタンをクリックします。<br>\nすると下記のようにWebクロールのデータが１件登録されます。<br>\n<a href=\"https://camo.qiitausercontent.com/8302d25592df90b2bdf59fbf3b43e31ecf106b3e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33643030626635612d663133312d643336372d646535332d6166313062623336383339642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/8302d25592df90b2bdf59fbf3b43e31ecf106b3e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33643030626635612d663133312d643336372d646535332d6166313062623336383339642e706e67\" alt=\"3_Fess管理者_Webクロール設定_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/3d00bf5a-f131-d367-de53-af10bb36839d.png\"></a><br>\n<br></p>\n\n<h4>\n<span id=\"クローラの実行\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AE%E5%AE%9F%E8%A1%8C\"><i class=\"fa fa-link\"></i></a>クローラの実行</h4>\n\n<p>左ペインで　<code>システム</code> &gt; <code>スケジューラ</code> を選択してジョブスケジューラを開きます。<br>\nジョブスケジューラで <code>Default Crawler</code>を選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/52e6c84dc635dabd786a05e2dc2dbc01bbcd62b3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62306165636130642d363461342d343364612d373832622d3061316130636437306238332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/52e6c84dc635dabd786a05e2dc2dbc01bbcd62b3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62306165636130642d363461342d343364612d373832622d3061316130636437306238332e706e67\" alt=\"4_Fess管理者_スケジューラ_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/b0aeca0d-64a4-43da-782b-0a1a0cd70b83.png\"></a><br>\n<br></p>\n\n<p><code>今すぐ開始</code>をクリックします。<br>\n<a href=\"https://camo.qiitausercontent.com/15c56153ff7878a59bfda2bab0ac3b8b6182fa23/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30306537363932302d626661642d656562312d636239392d3732346533613933393261392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/15c56153ff7878a59bfda2bab0ac3b8b6182fa23/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30306537363932302d626661642d656562312d636239392d3732346533613933393261392e706e67\" alt=\"4_Fess管理者_スケジューラ_1.1.png\" title=\"4_Fess管理者_スケジューラ_1.1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/00e76920-bfad-eeb1-cb99-724e3a9392a9.png\"></a><br>\n<br></p>\n\n<p>するとクロールが実行されます。<br>\n<a href=\"https://camo.qiitausercontent.com/b34d527efb0b07d2b04cabccebe97f0e1e4b594c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323564333030662d303766352d373234642d636539332d3865316339373532653130652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b34d527efb0b07d2b04cabccebe97f0e1e4b594c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323564333030662d303766352d373234642d636539332d3865316339373532653130652e706e67\" alt=\"4_Fess管理者_スケジューラ_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/725d300f-07f5-724d-ce93-8e1c9752e10e.png\"></a><br>\n<br></p>\n\n<p>しばらくして<code>F5</code>キーを押してブラウザを更新してください。<br>\nクロールが終了すると、スケジューラの状態が<code>実行中</code>から<code>有効</code>になります。<br>\n<a href=\"https://camo.qiitausercontent.com/2d860e111077a3a0b63a44b45e14e0e18b02fcb1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653466353237372d616163332d616437652d636465622d3431643339623733336331662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2d860e111077a3a0b63a44b45e14e0e18b02fcb1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653466353237372d616163332d616437652d636465622d3431643339623733336331662e706e67\" alt=\"4_Fess管理者_スケジューラ_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/ee4f5277-aac3-ad7e-cdeb-41d39b733c1f.png\"></a><br>\n<br></p>\n\n<h4>\n<span id=\"クローラ実行結果の確認\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>クローラ実行結果の確認</h4>\n\n<p>左ペインの<code>システム情報</code>&gt;<code>クロール情報</code>を選択すると、先ほど実行したクロールの結果が表示されています。その行を選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/e35eccd76c8d85dcc368298adfebb71871f083a7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39326633313062352d383366362d646564612d343438642d6166613863356230663130342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e35eccd76c8d85dcc368298adfebb71871f083a7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39326633313062352d383366362d646564612d343438642d6166613863356230663130342e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_1.png\" title=\"5_Fess管理者_システム情報_クロール情報_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/92f310b5-83f6-deda-448d-afa8c5b0f104.png\"></a><br>\n<br></p>\n\n<p>セッションIDを選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/341936c3d088fb04a1029cc6c891a35253a079da/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34653830636431342d333633342d663636352d623434382d3862346234653761386432312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/341936c3d088fb04a1029cc6c891a35253a079da/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34653830636431342d333633342d663636352d623434382d3862346234653761386432312e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_2.png\" title=\"5_Fess管理者_システム情報_クロール情報_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/4e80cd14-3634-f665-b448-8b4b4e7a8d21.png\"></a><br>\n<br></p>\n\n<p>ここにドキュメント用Webサーバのドキュメントが全て表示されればOKです。<br>\n<a href=\"https://camo.qiitausercontent.com/767e79c91f7521caf880a890deee50513f520ea9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36306238366263342d663730662d343263382d613031372d3566313338623362383865332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/767e79c91f7521caf880a890deee50513f520ea9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36306238366263342d663730662d343263382d613031372d3566313338623362383865332e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_3.png\" title=\"5_Fess管理者_システム情報_クロール情報_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/60b86bc4-f70f-42c8-a017-5f138b3b88e3.png\"></a><br>\n<br></p>\n\n<h3>\n<span id=\"ドキュメント用webサーバに全文検索用資産を配置\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E7%94%A8web%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AB%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E7%94%A8%E8%B3%87%E7%94%A3%E3%82%92%E9%85%8D%E7%BD%AE\"><i class=\"fa fa-link\"></i></a>ドキュメント用Webサーバに全文検索用資産を配置</h3>\n\n<p>全文検索用の資産は<code>full-text-search.js</code>と<code>full-text-search.css</code>の２つです。<br>\n<code>full-text-search.js</code>の変数 FESS_JSON_ENDPOINT(FESSサーバのJSON APIのエンドポイント) は適時置き換えてください。<br>\nこれらの資産をドキュメント用Webサーバのドキュメントのルートフォルダ直下に配置してください。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">full-text-search.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'use strict'</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// FESSサーバのJSON APIのエンドポイント（FessサーバのIPアドレス + /json）</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">FESS_JSON_ENDPOINT</span> <span class=\"o\">=</span> <span class=\"s1\">'http://192.168.1.5:10084/json'</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// １ページあたりの検索結果表示件数</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">COUNT_PAR_PAGE</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n\n\n    <span class=\"c1\">// 目次の</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#toc'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 一番上に検索条件入力エリアを挿入</span>\n        <span class=\"p\">.</span><span class=\"nx\">prepend</span><span class=\"p\">(</span>\n            <span class=\"s1\">'&lt;div id=\"search-area\"&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;form id=\"search-form\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;div class=\"search-input-area\"&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;i class=\"fa fa-search left-icon\"&gt;&lt;/i&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;input id=\"search-query\" placeholder=\"全文検索\" /&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;i class=\"fa fa-close right-icon\"&gt;&lt;/i&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;/div&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;input id=\"search-start\" type=\"hidden\" value=\"0\"/&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;input id=\"search-num\" type=\"hidden\" value=\"'</span> <span class=\"o\">+</span> <span class=\"nx\">COUNT_PAR_PAGE</span> <span class=\"o\">+</span> <span class=\"s1\">'\"/&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;form&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// イベント登録</span>\n        <span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">$searchArea</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 入力項目の検索条件でEnterを押したら、検索処理を実行する</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-form'</span><span class=\"p\">).</span><span class=\"nx\">submit</span><span class=\"p\">({</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 虫眼鏡アイコン押下したら、検索処理を実行する</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".left-icon\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">({</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 検索条件入力したら、</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\"#search-query\"</span><span class=\"p\">).</span><span class=\"nx\">keyup</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n              <span class=\"kd\">var</span> <span class=\"nx\">$this</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n              <span class=\"kd\">var</span> <span class=\"nx\">$rightIcon</span> <span class=\"o\">=</span> <span class=\"nx\">$this</span><span class=\"p\">.</span><span class=\"nx\">parent</span><span class=\"p\">().</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".right-icon\"</span><span class=\"p\">);</span>\n\n              <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">$this</span><span class=\"p\">.</span><span class=\"nx\">val</span><span class=\"p\">().</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                 <span class=\"c1\">// 検索条件に値がある場合は×アイコンの色を濃くする</span>\n                 <span class=\"nx\">$rightIcon</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#555'</span><span class=\"p\">);</span>\n              <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                 <span class=\"c1\">// 検索条件に値がない場合は×アイコンの色を薄くする</span>\n                 <span class=\"nx\">$rightIcon</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#ccc'</span><span class=\"p\">);</span>\n              <span class=\"p\">}</span>\n            <span class=\"p\">});</span>\n\n            <span class=\"c1\">// ×アイコン押下したら、</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".right-icon\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n              <span class=\"c1\">// ×アイコンの色を薄くして</span>\n              <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">).</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#ccc'</span><span class=\"p\">)</span>\n                      <span class=\"c1\">// 検索条件をクリアする</span>\n                     <span class=\"p\">.</span><span class=\"nx\">parent</span><span class=\"p\">().</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\"input\"</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span>\n            <span class=\"p\">});</span>\n        <span class=\"p\">});</span>\n\n    <span class=\"c1\">// ドキュメントタイトルの</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#header&gt;h1'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 直下に検索結果エリアを挿入</span>\n        <span class=\"p\">.</span><span class=\"nx\">before</span><span class=\"p\">(</span>\n            <span class=\"s1\">'&lt;div id=\"search-result-area\"&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div id=\"search-result-subheader\"&gt;&lt;/div&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div id=\"search-result-content\"&gt;&lt;/div&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// イベント登録</span>\n        <span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span>\n                <span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-area'</span><span class=\"p\">)</span>\n                    <span class=\"c1\">// 検索結果エリアのバツアイコンをクリックしたら、</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s1\">'#remove-search-result'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                      <span class=\"kd\">var</span> <span class=\"nx\">$searchResultArea</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">delegateTarget</span><span class=\"p\">)</span>\n                      <span class=\"c1\">// 検索結果エリアを非表示モードにする</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">removeClass</span><span class=\"p\">(</span><span class=\"s1\">'show'</span><span class=\"p\">);</span>\n                      <span class=\"c1\">// 検索結果エリアの中身を削除する</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-subheader'</span><span class=\"p\">).</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-content'</span><span class=\"p\">).</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n                    <span class=\"p\">})</span>\n                    <span class=\"c1\">// 前ページリンクをクリックしたら、１ページ前を検索する</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#prevPageLink\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">)</span>\n                    <span class=\"c1\">// 次ページリンクをクリックしたら、１ページ後を検索する</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#nextPageLink\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n        <span class=\"p\">});</span>\n\n\n\n    <span class=\"cm\">/**\n     * 検索処理\n     *\n     * @param  {eventObject} event\n     * @return {boolean}  submit処理を中断させるために必ずfalseを返却する\n     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">doSearch</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">){</span>\n      <span class=\"c1\">// 検索フィールドの値をトリムして取得</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">searchQuery</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">trim</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-query'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">());</span>\n      <span class=\"c1\">// 空の場合は検索処理を実行しない</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">searchQuery</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// 表示開始位置、表示件数の取得</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-start'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">()),</span>\n          <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-num'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">());</span>\n      <span class=\"c1\">// 表示開始位置のチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">start</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">// 表示件数のチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">num</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"nx\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">// 表示ページ情報の取得</span>\n      <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">navi</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n          <span class=\"c1\">// 前のページの場合</span>\n          <span class=\"nx\">start</span> <span class=\"o\">-=</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n          <span class=\"c1\">// 次のページの場合</span>\n          <span class=\"nx\">start</span> <span class=\"o\">+=</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"nl\">default</span><span class=\"p\">:</span>\n        <span class=\"k\">case</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n          <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// URLを構築</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"nx\">FESS_JSON_ENDPOINT</span> <span class=\"o\">+</span> <span class=\"s1\">'?callback=?'</span> <span class=\"o\">+</span> <span class=\"c1\">// 別ドメインを想定してJSONP形式でリクエストを送信する</span>\n                                     <span class=\"s1\">'&amp;q='</span> <span class=\"o\">+</span> <span class=\"nb\">encodeURIComponent</span><span class=\"p\">(</span><span class=\"nx\">searchQuery</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n                                     <span class=\"s1\">'&amp;start='</span> <span class=\"o\">+</span> <span class=\"nx\">start</span> <span class=\"o\">+</span>\n                                     <span class=\"s1\">'&amp;num='</span> <span class=\"o\">+</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// 検索リクエスト送信</span>\n      <span class=\"c1\">// 別ドメインを想定してJSONP形式でリクエストを送信する</span>\n      <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span>\n          <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"nx\">url</span><span class=\"p\">,</span>\n          <span class=\"na\">dataType</span><span class=\"p\">:</span> <span class=\"s1\">'jsonp'</span><span class=\"p\">,</span>\n          <span class=\"na\">success</span><span class=\"p\">:</span> <span class=\"nx\">renderSearchResult</span>\n      <span class=\"p\">});</span>\n\n\n      <span class=\"c1\">// ページ情報の更新</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#searchNum'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// ページ表示を上部に移動</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">).</span><span class=\"nx\">scrollTop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// サブミットを抑止するためにfalseを返す</span>\n      <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n\n\n    <span class=\"cm\">/**\n     * 検索成功時に検索結果を描画する\n     *\n     * @param  {Anything} data レスポンスデータ\n     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">renderSearchResult</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 検索結果処理</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">dataResponse</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">;</span>\n      <span class=\"c1\">// ステータスチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s2\">\"検索中に問題が発生しました。\"</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// 検索結果領域を表示する</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-area'</span><span class=\"p\">).</span><span class=\"nx\">addClass</span><span class=\"p\">(</span><span class=\"s1\">'show'</span><span class=\"p\">);</span>\n\n      <span class=\"kd\">var</span> <span class=\"nx\">$searchResultSubheader</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-subheader'</span><span class=\"p\">),</span>\n          <span class=\"nx\">$searchResultContent</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-content'</span><span class=\"p\">),</span>\n          <span class=\"nx\">record_count</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">record_count</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// 検索結果がない場合</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">record_count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// サブヘッダーに出力</span>\n        <span class=\"nx\">$searchResultSubheader</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span>  <span class=\"s1\">'&lt;div id=\"remove-search-result\" style=\"float:right;\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/div&gt;'</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// 結果領域に出力</span>\n        <span class=\"nx\">$searchResultContent</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;b&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">q</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/b&gt;に一致する情報は見つかりませんでした。'</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// 検索にヒットした場合</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">page_number</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_number</span><span class=\"p\">,</span>\n          <span class=\"nx\">page_size</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_size</span><span class=\"p\">,</span>\n          <span class=\"nx\">page_count</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_count</span><span class=\"p\">,</span>\n          <span class=\"nx\">startRange</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nx\">page_size</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n          <span class=\"nx\">endRange</span> <span class=\"o\">=</span> <span class=\"nx\">page_number</span> <span class=\"o\">*</span> <span class=\"nx\">page_size</span><span class=\"p\">,</span>\n          <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n          <span class=\"nx\">max</span><span class=\"p\">,</span>\n          <span class=\"nx\">offset</span> <span class=\"o\">=</span> <span class=\"nx\">startRange</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-start'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"nx\">offset</span><span class=\"p\">);</span>\n\n\n      <span class=\"c1\">// サブヘッダーに出力</span>\n      <span class=\"nx\">$searchResultSubheader</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;b&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">q</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/b&gt; の検索結果 '</span> <span class=\"o\">+</span>\n                                <span class=\"nx\">record_count</span> <span class=\"o\">+</span> <span class=\"s2\">\" 件中 \"</span> <span class=\"o\">+</span>  <span class=\"nx\">startRange</span> <span class=\"o\">+</span> <span class=\"s1\">' - '</span> <span class=\"o\">+</span>\n                                <span class=\"nx\">endRange</span> <span class=\"o\">+</span> <span class=\"s1\">' 件目 ('</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">exec_time</span> <span class=\"o\">+</span> <span class=\"s1\">' 秒)'</span> <span class=\"o\">+</span>\n                               <span class=\"s1\">'&lt;div id=\"remove-search-result\" style=\"float:right;\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/div&gt;'</span>\n\n      <span class=\"c1\">// 検索結果領域のクリア</span>\n      <span class=\"nx\">$searchResultContent</span><span class=\"p\">.</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n\n\n      <span class=\"c1\">// 検索結果の出力</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">$resultBody</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;ol/&gt;\"</span><span class=\"p\">);</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">results</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">;</span>\n      <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">max</span> <span class=\"o\">=</span> <span class=\"nx\">results</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">max</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">element</span> <span class=\"o\">=</span>\n            <span class=\"s1\">'&lt;li&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;h4 class=\"title\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;a href=\"'</span> <span class=\"o\">+</span><span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">url_link</span> <span class=\"o\">+</span> <span class=\"s1\">'\"&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">title</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/a&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;/h4&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div class=\"body\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">content_description</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;br/&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;cite&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">site</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/cite&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;/div&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/li&gt;'</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">).</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$resultBody</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">$resultBody</span><span class=\"p\">.</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$searchResultContent</span><span class=\"p\">);</span>\n\n\n      <span class=\"c1\">// ページ番号情報の出力</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">pageArea</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n      <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;div id=\"pageInfo\"&gt;'</span><span class=\"p\">,</span> <span class=\"nx\">page_number</span><span class=\"p\">,</span> <span class=\"s1\">'ページ目&lt;br/&gt;'</span><span class=\"p\">);</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 前のページへのリンク</span>\n        <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;a id=\"prevPageLink\" href=\"#\"&gt;&amp;lt;&amp;lt;前ページへ&lt;/a&gt; '</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">&lt;</span> <span class=\"nx\">page_count</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 次のページへのリンク</span>\n        <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;a id=\"nextPageLink\" href=\"#\"&gt;次ページへ&amp;gt;&amp;gt;&lt;/a&gt;'</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">);</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"p\">)).</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$searchResultContent</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">full-text-search.css</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">@charset</span> <span class=\"s1\">\"UTF-8\"</span><span class=\"p\">;</span>\n\n<span class=\"nf\">#search-area</span> <span class=\"p\">{</span>\n    <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"p\">{</span>\n    <span class=\"nl\">position</span><span class=\"p\">:</span><span class=\"nb\">relative</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* 入力項目 */</span>\n<span class=\"nf\">#search-query</span> <span class=\"p\">{</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span> <span class=\"m\">2em</span><span class=\"p\">;</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">black</span><span class=\"p\">;</span>\n    <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"n\">arial</span><span class=\"p\">,</span><span class=\"nb\">sans-serif</span><span class=\"p\">;</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span>\n    <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">2em</span><span class=\"p\">;</span>\n    <span class=\"nl\">outline</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nt\">input</span><span class=\"nd\">:focus</span> <span class=\"p\">{</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"m\">#4d90fe</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* アイコンは入力項目の左と右に配置する */</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"o\">,</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span> <span class=\"p\">{</span>\n    <span class=\"c\">/* 縦方向の中央寄せ */</span>\n    <span class=\"nl\">position</span><span class=\"p\">:</span><span class=\"nb\">absolute</span><span class=\"p\">;</span>\n    <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">50%</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">-0.5em</span><span class=\"p\">;</span>\n    <span class=\"py\">font-sise</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 要素にマウスを合わせたら、マウスポインタのマークを変える */</span>\n    <span class=\"nl\">cursor</span><span class=\"p\">:</span><span class=\"nb\">pointer</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span> <span class=\"p\">{</span>\n    <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span><span class=\"p\">;</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span><span class=\"m\">#444</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span> <span class=\"p\">{</span>\n    <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 最初は、グレーアウトしておく */</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* アイコンにマウスを合わせたら、サイズを大きくする */</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"nd\">:hover</span><span class=\"o\">,</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1.4em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* 検索結果表示時に適用するスタイル */</span>\n<span class=\"nf\">#search-result-area</span><span class=\"nc\">.show</span> <span class=\"p\">{</span>\n    <span class=\"nl\">background</span><span class=\"p\">:</span> <span class=\"m\">#f8f8f7</span><span class=\"p\">;</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">0px</span> <span class=\"nb\">solid</span><span class=\"p\">;</span>\n    <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h3>\n<span id=\"ドキュメントに全文検索用資産の読み込み処理を追加\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AB%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E7%94%A8%E8%B3%87%E7%94%A3%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF%E5%87%A6%E7%90%86%E3%82%92%E8%BF%BD%E5%8A%A0\"><i class=\"fa fa-link\"></i></a>ドキュメントに全文検索用資産の読み込み処理を追加</h3>\n\n<p>前手順でドキュメント用Webサーバに配置した<code>full-text-search.js</code>と<code>full-text-search.css</code>を、<br>\n各ドキュメントから読み込むようにします。<br>\n<code>full-text-search.js</code>はjQueryに依存しているので、<br>\n既存のドキュメントで読み込んでいない場合はjQueryも読み込みも追加してください。</p>\n\n<p>ドキュメント用Webサーバがこのようなフォルダ構成だとしたら、</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ドキュメント用Webサーバのドキュメントルート\n├── full-text-search.css\n├── full-text-search.js\n└── asciidoctor-sample\n    └── asciidoctor-sample.html\n</pre></div></div>\n\n<p><code>asciidoctor-sample.adoc</code>には下記を追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>++++\n&lt;link rel=\"stylesheet\" href=\"../full-text-search.css\"&gt;&lt;/link&gt;\n&lt;script\n  src=\"https://code.jquery.com/jquery-3.2.1.min.js\"\n  integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\"\n  crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n&lt;script src=\"../full-text-search.js\"&gt;&lt;/script&gt;\n++++\n</pre></div></div>\n\n<h3>\n<span id=\"全文検索ができるかの確認\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%8B%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>全文検索ができるかの確認</h3>\n\n<p>以上の手順を実施すると、Asdciidoctorで全文検索ができるようになります。<br>\nドキュメントをブラウザで見ると、目次上部に検索窓が追加されています。<br>\n<a href=\"https://camo.qiitausercontent.com/daf3699de0e01b28ba4d3c2a8b8b535d3c54a2ab/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39393039336364362d353865382d376364652d613364382d3562656332613032303636382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/daf3699de0e01b28ba4d3c2a8b8b535d3c54a2ab/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39393039336364362d353865382d376364652d613364382d3562656332613032303636382e706e67\" alt=\"7_全文検索イメージ_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/99093cd6-58e8-7cde-a3d8-5bec2a020668.png\"></a><br>\n<br></p>\n\n<p>検索条件を入力し、虫眼鏡アイコンをクリックすると、検索結果が表示されます。<br>\n<a href=\"https://camo.qiitausercontent.com/5d8e0c5f2db223d5f021d484351b0c840010bb4f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63646533643865612d643838332d613636622d663838642d3961353934313032366263392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/5d8e0c5f2db223d5f021d484351b0c840010bb4f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63646533643865612d643838332d613636622d663838642d3961353934313032366263392e706e67\" alt=\"7_全文検索イメージ_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/cde3d8ea-d883-a66b-f88d-9a5941026bc9.png\"></a><br>\n<br></p>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>FessのREST APIを使用してAsciidoctorで全文検索できるようにする方法を紹介しました。<br>\nFessのREST APIを使えば、Asciidoctorに限らず、様々なシステムに全文検索機能を導入できそうです。</p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<ul>\n<li><a href=\"http://fess.codelibs.org/ja/articles/article-4.html#js\" rel=\"nofollow noopener\" target=\"_blank\">Fess で作るApache Solrベースの検索サーバー 〜 REST API 編</a></li>\n<li><a href=\"http://qiita.com/cookienote/items/1f2443be25630a78d946\" id=\"reference-69c989703115d994be84\">全文検索サーバー Fess を Docker で動かす</a></li>\n</ul>\n","body":"[Asciidoctor](http://asciidoctor.org/)を使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。\n\nそこで今回は、Dockerで全文検索サーバの[Fess](http://fess.codelibs.org/ja/)を立てて、\nドキュメントからJavaScript経由でFessのJSON APIを呼び出すことで、\n全文検索を簡単に導入する方法をご紹介します。\n\n導入するとドキュメントの右上に検索窓が出てきて全文検索できるようになります。\n![6月-24-2017 19-05-32.gif](https://qiita-image-store.s3.amazonaws.com/0/49915/123ec771-fb77-e4dc-df7e-a4b407792759.gif \"6月-24-2017 19-05-32.gif\")\n\n\n## Fessとは\n[Fess](http://fess.codelibs.org/ja/)は**「5 分で簡単に構築可能な全文検索サーバー」**です。\nJavaベースで構築されており、Apacheライセンスで提供されるオープンソース製品で、無料で使用できます。\n自分でクローラを設定して、自分だけの検索エンジンがつくれるようなイメージです。\nデフォルトで検索画面を提供していますが、JSON APIも提供しているので、様々なシステムと連携可能です。\n\n\n## 全体像\nドキュメント用Webサーバに全文検索用のJavaScriptファイルとCSSファイルを追加し、Dockerで全文検索用のFessサーバを立てます。\nFessサーバはドキュメント用Webサーバをクロールし、その情報を保存しておきます。\nドキュメントで全文検索を実施すると、JavaScript経由でFessサーバのJSON AIPを呼び出して、全文検索結果をドキュメントに表示します。\n\n![0_Fess_全体像_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/10c8ac46-2155-8eb7-a5ed-7c13ce544ec2.png)\n\n![0_Fess_全体像_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/40e1d456-2635-2aed-333d-8b1aec447931.png)\n\n## 導入手順\nこの導入手順は、下記のような環境\u001c（ローカルPCのDocker上にドキュメント用WebサーバとFessサーバが立っている環境）を作った時のものです。\nDockerを使わなくても、ローカルPC以外でも、導入可能です。導入手順は適宜読み替えてください。\n\n![0_Fess_全体像_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/0badb8d2-1a58-22b6-457c-12becf3a8911.png)\n\n\n### Fessのインストール\nDocker Hubの[codelibs/fess](https://hub.docker.com/r/codelibs/fess/)を使用します。今回ポートは10084で公開します。\nDockerを使わない場合は[Fess インストールガイド](http://fess.codelibs.org/ja/11.2/install/index.html)を参考にしてください。\n\n```\n$ docker run -d -p 10084:8080 --name fess codelibs/fess:latest\n```\n\n### Fessの設定\n#### クローラの設定\n`http://[PCのローカルIPアドレス]:10084/login`にアクセスするとログイン画面が表示されます。\nデフォルトのID/PASS　`admin/admin`でログインしましょう。\n![1_Fess管理者_ログイン画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/e790eca9-5073-948e-3e43-d7546d57fae5.png)\n<br/>\n\nログインするとダッシュボードが表示されます。左ペインの`クローラ` > `Web`　を選択しましょう。\n![2_Fess管理者_ダッシュボード.png](https://qiita-image-store.s3.amazonaws.com/0/49915/acfbe950-fa74-d0cb-3cee-5e8db4de5b74.png)\n<br/>\n\nWebクローラにはまだ何も登録されていないので、左上の`+　新規作成`ボタンをクリックしましょう。\n![3_Fess管理者_Webクロール設定_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/631037b4-aab2-8e0d-f9aa-3d23ec917a29.png)\n<br/>\n\nWebクロール情報入力画面が表示されます。\n![3_Fess管理者_Webクロール設定_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/ee5a09c9-7cce-3fec-7884-1258c32fa91a.png \"3_Fess管理者_Webクロール設定_2.png\")\n\n設定項目は色々ありますが、とりあえず下記項目だけ設定しましょう。\n\n* 名前 \n    * 任意の名前を設定してください。\n* URL \n    * ドキュメント用Webサーバにおいてドキュメントが格納されているルートフォルダのURLを指定してください。末尾に`/`を付けてください。\n* クロール対象とするURL \n    * 正規表現で値を設定します。上記`URL`で設定したルートフォルダ配下の全資産を対象とするために、`URLで設定した値` + `.*` を指定してください。\n* 検索対象とするURL\n   * 正規表現で値を設定します。HTMLのみを検索対象にしたい（JS、CSSなどは除外したい）ので、`URLで設定した値` + `.+\\.html$` を指定してください。\n<br/>\n<br/>\n\n\n値を設定したら、画面を下にスクロールして`+　作成`ボタンをクリックします。\nすると下記のようにWebクロールのデータが１件登録されます。\n![3_Fess管理者_Webクロール設定_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/3d00bf5a-f131-d367-de53-af10bb36839d.png)\n<br/>\n\n\n#### クローラの実行\n左ペインで　`システム` > `スケジューラ` を選択してジョブスケジューラを開きます。\nジョブスケジューラで `Default Crawler`を選択します。\n![4_Fess管理者_スケジューラ_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/b0aeca0d-64a4-43da-782b-0a1a0cd70b83.png)\n<br/>\n\n`今すぐ開始`をクリックします。\n![4_Fess管理者_スケジューラ_1.1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/00e76920-bfad-eeb1-cb99-724e3a9392a9.png \"4_Fess管理者_スケジューラ_1.1.png\")\n<br/>\n\nするとクロールが実行されます。\n![4_Fess管理者_スケジューラ_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/725d300f-07f5-724d-ce93-8e1c9752e10e.png)\n<br/>\n\nしばらくして`F5`キーを押してブラウザを更新してください。\nクロールが終了すると、スケジューラの状態が`実行中`から`有効`になります。\n![4_Fess管理者_スケジューラ_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/ee4f5277-aac3-ad7e-cdeb-41d39b733c1f.png)\n<br/>\n\n\n#### クローラ実行結果の確認\n左ペインの`システム情報`>`クロール情報`を選択すると、先ほど実行したクロールの結果が表示されています。その行を選択します。\n![5_Fess管理者_システム情報_クロール情報_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/92f310b5-83f6-deda-448d-afa8c5b0f104.png \"5_Fess管理者_システム情報_クロール情報_1.png\")\n<br/>\n\n\nセッションIDを選択します。\n![5_Fess管理者_システム情報_クロール情報_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/4e80cd14-3634-f665-b448-8b4b4e7a8d21.png \"5_Fess管理者_システム情報_クロール情報_2.png\")\n<br/>\n\nここにドキュメント用Webサーバのドキュメントが全て表示されればOKです。\n![5_Fess管理者_システム情報_クロール情報_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/60b86bc4-f70f-42c8-a017-5f138b3b88e3.png \"5_Fess管理者_システム情報_クロール情報_3.png\")\n<br/>\n\n### ドキュメント用Webサーバに全文検索用資産を配置\n全文検索用の資産は`full-text-search.js`と`full-text-search.css`の２つです。\n`full-text-search.js`の変数 FESS_JSON_ENDPOINT(FESSサーバのJSON APIのエンドポイント) は適時置き換えてください。\nこれらの資産をドキュメント用Webサーバのドキュメントのルートフォルダ直下に配置してください。\n\n```javascript:full-text-search.js\n$(function() {\n    'use strict';\n\n    // FESSサーバのJSON APIのエンドポイント（FessサーバのIPアドレス + /json）\n    var FESS_JSON_ENDPOINT = 'http://192.168.1.5:10084/json';\n\n    // １ページあたりの検索結果表示件数\n    var COUNT_PAR_PAGE = 10;\n\n\n    // 目次の\n    $('#toc')\n        // 一番上に検索条件入力エリアを挿入\n        .prepend(\n            '<div id=\"search-area\">' +\n                '<form id=\"search-form\">' +\n                    '<div class=\"search-input-area\">' +\n                        '<i class=\"fa fa-search left-icon\"></i>' +\n                        '<input id=\"search-query\" placeholder=\"全文検索\" />' +\n                        '<i class=\"fa fa-close right-icon\"></i>' +\n                    '</div>' +\n                    '<input id=\"search-start\" type=\"hidden\" value=\"0\"/>' +\n                    '<input id=\"search-num\" type=\"hidden\" value=\"' + COUNT_PAR_PAGE + '\"/>' +\n                '<form>' +\n            '</div>')\n        // イベント登録\n        .ready(function() {\n            var $searchArea = $(this);\n\n            // 入力項目の検索条件でEnterを押したら、検索処理を実行する\n            $searchArea.find('#search-form').submit({navi:0}, doSearch);\n\n            // 虫眼鏡アイコン押下したら、検索処理を実行する\n            $searchArea.find(\".left-icon\").click({navi:0}, doSearch);\n\n            // 検索条件入力したら、\n            $searchArea.find(\"#search-query\").keyup(function(){\n              var $this = $(this);\n              var $rightIcon = $this.parent().find(\".right-icon\");\n\n              if($this.val().length > 0) {\n                 // 検索条件に値がある場合は×アイコンの色を濃くする\n                 $rightIcon.css('color','#555');\n              } else {\n                 // 検索条件に値がない場合は×アイコンの色を薄くする\n                 $rightIcon.css('color','#ccc');\n              }\n            });\n\n            // ×アイコン押下したら、\n            $searchArea.find(\".right-icon\").click(function(){\n              // ×アイコンの色を薄くして\n              $(this).css('color','#ccc')\n                      // 検索条件をクリアする\n                     .parent().find(\"input\").val('');\n            });\n        });\n\n    // ドキュメントタイトルの\n    $('#header>h1')\n        // 直下に検索結果エリアを挿入\n        .before(\n            '<div id=\"search-result-area\">' +\n                '<div id=\"search-result-subheader\"></div>' +\n                '<div id=\"search-result-content\"></div>' +\n            '</div>')\n        // イベント登録\n        .ready(function() {\n            $(this)\n                .find('#search-result-area')\n                    // 検索結果エリアのバツアイコンをクリックしたら、\n                    .on(\"click\", '#remove-search-result', function(e) {\n                      var $searchResultArea = $(e.delegateTarget)\n                      // 検索結果エリアを非表示モードにする\n                      $searchResultArea.removeClass('show');\n                      // 検索結果エリアの中身を削除する\n                      $searchResultArea.find('#search-result-subheader').empty();\n                      $searchResultArea.find('#search-result-content').empty();\n                    })\n                    // 前ページリンクをクリックしたら、１ページ前を検索する\n                    .on(\"click\", \"#prevPageLink\", {navi:-1}, doSearch)\n                    // 次ページリンクをクリックしたら、１ページ後を検索する\n                    .on(\"click\", \"#nextPageLink\", {navi:1}, doSearch);\n        });\n\n\n\n    /**\n     * 検索処理\n     *\n     * @param  {eventObject} event\n     * @return {boolean}  submit処理を中断させるために必ずfalseを返却する\n     */\n    function doSearch(event){\n      // 検索フィールドの値をトリムして取得\n      var searchQuery = $.trim($('#search-query').val());\n      // 空の場合は検索処理を実行しない\n      if(searchQuery.length == 0) {\n        return false;\n      }\n\n\n      // 表示開始位置、表示件数の取得\n      var start = parseInt($('#search-start').val()),\n          num = parseInt($('#search-num').val());\n      // 表示開始位置のチェック\n      if(start < 0) {\n        start = 0;\n      }\n      // 表示件数のチェック\n      if(num < 1 || num > 100) {\n        num = 20;\n      }\n      // 表示ページ情報の取得\n      switch(event.data.navi) {\n        case -1:\n          // 前のページの場合\n          start -= num;\n          break;\n        case 1:\n          // 次のページの場合\n          start += num;\n          break;\n        default:\n        case 0:\n          start = 0;\n          break;\n      }\n\n\n      // URLを構築\n      var url = FESS_JSON_ENDPOINT + '?callback=?' + // 別ドメインを想定してJSONP形式でリクエストを送信する\n                                     '&q=' + encodeURIComponent(searchQuery) +\n                                     '&start=' + start +\n                                     '&num=' + num;\n\n      // 検索リクエスト送信\n      // 別ドメインを想定してJSONP形式でリクエストを送信する\n      $.ajax({\n          url: url,\n          dataType: 'jsonp',\n          success: renderSearchResult\n      });\n\n\n      // ページ情報の更新\n      $('#searchNum').val(num);\n\n      // ページ表示を上部に移動\n      $(document).scrollTop(0);\n\n      // サブミットを抑止するためにfalseを返す\n      return false;\n    };\n\n\n    /**\n     * 検索成功時に検索結果を描画する\n     *\n     * @param  {Anything} data レスポンスデータ\n     */\n    function renderSearchResult(data) {\n      // 検索結果処理\n      var dataResponse = data.response;\n      // ステータスチェック\n      if(dataResponse.status != 0) {\n        alert(\"検索中に問題が発生しました。\");\n        return;\n      }\n\n      // 検索結果領域を表示する\n      $('#search-result-area').addClass('show');\n\n      var $searchResultSubheader = $('#search-result-subheader'),\n          $searchResultContent = $('#search-result-content'),\n          record_count = dataResponse.record_count;\n\n      // 検索結果がない場合\n      if(record_count == 0) {\n        // サブヘッダーに出力\n        $searchResultSubheader[0].innerHTML =  '<div id=\"remove-search-result\" style=\"float:right;\"><i class=\"fa fa-times\"></i></div>';\n\n        // 結果領域に出力\n        $searchResultContent[0].innerHTML = '<b>' + dataResponse.q + '</b>に一致する情報は見つかりませんでした。';\n\n        return;\n      }\n\n\n      // 検索にヒットした場合\n      var page_number = dataResponse.page_number,\n          page_size = dataResponse.page_size,\n          page_count = dataResponse.page_count,\n          startRange = (page_number - 1) * page_size + 1,\n          endRange = page_number * page_size,\n          i = 0,\n          max,\n          offset = startRange - 1;\n\n      $('#search-start').val(offset);\n\n\n      // サブヘッダーに出力\n      $searchResultSubheader[0].innerHTML = '<b>' + dataResponse.q + '</b> の検索結果 ' +\n                                record_count + \" 件中 \" +  startRange + ' - ' +\n                                endRange + ' 件目 (' + dataResponse.exec_time + ' 秒)' +\n                               '<div id=\"remove-search-result\" style=\"float:right;\"><i class=\"fa fa-times\"></i></div>'\n\n      // 検索結果領域のクリア\n      $searchResultContent.empty();\n\n\n      // 検索結果の出力\n      var $resultBody = $(\"<ol/>\");\n      var results = dataResponse.result;\n      for(i = 0, max = results.length; i < max; i++) {\n        var element =\n            '<li>' +\n                '<h4 class=\"title\">' +\n                    '<a href=\"' +results[i].url_link + '\">' + results[i].title + '</a>' +\n                '</h4>' +\n                '<div class=\"body\">' +\n                    results[i].content_description +\n                    '<br/>' +\n                    '<cite>' + results[i].site + '</cite>' +\n                '</div>' +\n            '</li>';\n\n        $(element).appendTo($resultBody);\n      }\n      $resultBody.appendTo($searchResultContent);\n\n\n      // ページ番号情報の出力\n      var pageArea = [];\n      pageArea.push('<div id=\"pageInfo\">', page_number, 'ページ目<br/>');\n      if(page_number > 1) {\n        // 前のページへのリンク\n        pageArea.push('<a id=\"prevPageLink\" href=\"#\">&lt;&lt;前ページへ</a> ');\n      }\n      if(page_number < page_count) {\n        // 次のページへのリンク\n        pageArea.push('<a id=\"nextPageLink\" href=\"#\">次ページへ&gt;&gt;</a>');\n      }\n      pageArea.push('</div>');\n      $(pageArea.join(\"\")).appendTo($searchResultContent);\n    }\n});\n\n```\n\n\n```css:full-text-search.css\n@charset \"UTF-8\";\n\n#search-area {\n    margin-bottom: 1em;\n}\n\n.search-input-area {\n    position:relative;\n}\n\n/* 入力項目 */\n#search-query {\n    padding: 0.7em 2em;\n    width: 100%;\n    color: black;\n    font-family: arial,sans-serif;\n    font-size: 1em;\n    border: 1px solid #ccc;\n    border-radius: 2em;\n    outline: 0;\n}\n\n.search-input-area input:focus {\n    border: 1px solid #4d90fe;\n}\n\n/* アイコンは入力項目の左と右に配置する */\n.search-input-area .left-icon,\n.search-input-area .right-icon {\n    /* 縦方向の中央寄せ */\n    position:absolute;\n    top: 50%;\n    margin-top: -0.5em;\n    font-sise: 1em;\n    /* 要素にマウスを合わせたら、マウスポインタのマークを変える */\n    cursor:pointer;\n}\n\n.search-input-area .left-icon {\n    left: 0.7em;\n    color:#444;\n}\n\n.search-input-area .right-icon {\n    right: 0.7em;\n    /* 最初は、グレーアウトしておく */\n    color: #ccc;\n}\n\n/* アイコンにマウスを合わせたら、サイズを大きくする */\n.search-input-area .left-icon:hover,\n.search-input-area .right-icon:hover {\n    font-size: 1.4em;\n}\n\n\n.search-input-area .left-icon:hover {\n    left: 0.5em;\n}\n\n\n.search-input-area .right-icon:hover {\n    right: 0.5em;\n}\n\n/* 検索結果表示時に適用するスタイル */\n#search-result-area.show {\n    background: #f8f8f7;\n    border: 0px solid;\n    border-radius: 0.5em;\n    margin-top: 1em;\n    margin-bottom: 1em;\n    padding: 1em;\n}\n\n```\n\n### ドキュメントに全文検索用資産の読み込み処理を追加\n前手順でドキュメント用Webサーバに配置した`full-text-search.js`と`full-text-search.css`を、\n各ドキュメントから読み込むようにします。\n`full-text-search.js`はjQueryに依存しているので、\n既存のドキュメントで読み込んでいない場合はjQueryも読み込みも追加してください。\n\nドキュメント用Webサーバがこのようなフォルダ構成だとしたら、\n\n```\nドキュメント用Webサーバのドキュメントルート\n├── full-text-search.css\n├── full-text-search.js\n└── asciidoctor-sample\n    └── asciidoctor-sample.html\n```\n\n\n`asciidoctor-sample.adoc`には下記を追加します。\n\n```\n++++\n<link rel=\"stylesheet\" href=\"../full-text-search.css\"></link>\n<script\n  src=\"https://code.jquery.com/jquery-3.2.1.min.js\"\n  integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\"\n  crossorigin=\"anonymous\"></script>\n<script src=\"../full-text-search.js\"></script>\n++++\n```\n\n### 全文検索ができるかの確認\n以上の手順を実施すると、Asdciidoctorで全文検索ができるようになります。\nドキュメントをブラウザで見ると、目次上部に検索窓が追加されています。\n![7_全文検索イメージ_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/99093cd6-58e8-7cde-a3d8-5bec2a020668.png)\n<br/>\n\n検索条件を入力し、虫眼鏡アイコンをクリックすると、検索結果が表示されます。\n![7_全文検索イメージ_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/cde3d8ea-d883-a66b-f88d-9a5941026bc9.png)\n<br/>\n\n\n## まとめ\nFessのREST APIを使用してAsciidoctorで全文検索できるようにする方法を紹介しました。\nFessのREST APIを使えば、Asciidoctorに限らず、様々なシステムに全文検索機能を導入できそうです。\n\n\n## 参考\n* [Fess で作るApache Solrベースの検索サーバー 〜 REST API 編](http://fess.codelibs.org/ja/articles/article-4.html#js)\n* [全文検索サーバー Fess を Docker で動かす](http://qiita.com/cookienote/items/1f2443be25630a78d946)\n\n","comments_count":0,"created_at":"2017-06-26T00:21:37+09:00","likes_count":21,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true}]},{"node":{"fields":{"slug":"/270e2fae-ed90-5539-8c90-a2ed93ebba83/","title":"Fessを使用して、Asciidoctorで簡単に全文検索できるようにする","date":"2017-06-26T00:21:37+09:00","excerpt":"Asciidoctorを使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。そこで今回は、Dockerで...","tags":["JavaScript","全文検索","ドキュメント","Fess","asciidoctor","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"270e2fae-ed90-5539-8c90-a2ed93ebba83","title":"Fessを使用して、Asciidoctorで簡単に全文検索できるようにする","rendered_body":"<p><a href=\"http://asciidoctor.org/\" rel=\"nofollow noopener\" target=\"_blank\">Asciidoctor</a>を使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。</p>\n\n<p>そこで今回は、Dockerで全文検索サーバの<a href=\"http://fess.codelibs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Fess</a>を立てて、<br>\nドキュメントからJavaScript経由でFessのJSON APIを呼び出すことで、<br>\n全文検索を簡単に導入する方法をご紹介します。</p>\n\n<p>導入するとドキュメントの右上に検索窓が出てきて全文検索できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/e020d2b6619c0b7ce4332c80ea15b89a6efb895e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31323365633737312d666237372d653464632d646637652d6134623430373739323735392e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e020d2b6619c0b7ce4332c80ea15b89a6efb895e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31323365633737312d666237372d653464632d646637652d6134623430373739323735392e676966\" alt=\"6月-24-2017 19-05-32.gif\" title=\"6月-24-2017 19-05-32.gif\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/123ec771-fb77-e4dc-df7e-a4b407792759.gif\"></a></p>\n\n<h2>\n<span id=\"fessとは\" class=\"fragment\"></span><a href=\"#fess%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Fessとは</h2>\n\n<p><a href=\"http://fess.codelibs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Fess</a>は<strong>「5 分で簡単に構築可能な全文検索サーバー」</strong>です。<br>\nJavaベースで構築されており、Apacheライセンスで提供されるオープンソース製品で、無料で使用できます。<br>\n自分でクローラを設定して、自分だけの検索エンジンがつくれるようなイメージです。<br>\nデフォルトで検索画面を提供していますが、JSON APIも提供しているので、様々なシステムと連携可能です。</p>\n\n<h2>\n<span id=\"全体像\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E4%BD%93%E5%83%8F\"><i class=\"fa fa-link\"></i></a>全体像</h2>\n\n<p>ドキュメント用Webサーバに全文検索用のJavaScriptファイルとCSSファイルを追加し、Dockerで全文検索用のFessサーバを立てます。<br>\nFessサーバはドキュメント用Webサーバをクロールし、その情報を保存しておきます。<br>\nドキュメントで全文検索を実施すると、JavaScript経由でFessサーバのJSON AIPを呼び出して、全文検索結果をドキュメントに表示します。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/6fe043176da6b6451722114a3d0418bc40ac8c99/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31306338616334362d323135352d386562372d613565642d3763313363653534346563322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/6fe043176da6b6451722114a3d0418bc40ac8c99/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31306338616334362d323135352d386562372d613565642d3763313363653534346563322e706e67\" alt=\"0_Fess_全体像_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/10c8ac46-2155-8eb7-a5ed-7c13ce544ec2.png\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/729e46c74903de7be597a6ac4adea0c03cd8559f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34306531643435362d323633352d326165642d333333642d3862316165633434373933312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/729e46c74903de7be597a6ac4adea0c03cd8559f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34306531643435362d323633352d326165642d333333642d3862316165633434373933312e706e67\" alt=\"0_Fess_全体像_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/40e1d456-2635-2aed-333d-8b1aec447931.png\"></a></p>\n\n<h2>\n<span id=\"導入手順\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>導入手順</h2>\n\n<p>この導入手順は、下記のような環境（ローカルPCのDocker上にドキュメント用WebサーバとFessサーバが立っている環境）を作った時のものです。<br>\nDockerを使わなくても、ローカルPC以外でも、導入可能です。導入手順は適宜読み替えてください。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/a94911642557c486b240ffa8c3c184c64bfabc2c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30626164623864322d316135382d323262362d343537632d3132626563663361383931312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a94911642557c486b240ffa8c3c184c64bfabc2c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30626164623864322d316135382d323262362d343537632d3132626563663361383931312e706e67\" alt=\"0_Fess_全体像_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/0badb8d2-1a58-22b6-457c-12becf3a8911.png\"></a></p>\n\n<h3>\n<span id=\"fessのインストール\" class=\"fragment\"></span><a href=\"#fess%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>Fessのインストール</h3>\n\n<p>Docker Hubの<a href=\"https://hub.docker.com/r/codelibs/fess/\" rel=\"nofollow noopener\" target=\"_blank\">codelibs/fess</a>を使用します。今回ポートは10084で公開します。<br>\nDockerを使わない場合は<a href=\"http://fess.codelibs.org/ja/11.2/install/index.html\" rel=\"nofollow noopener\" target=\"_blank\">Fess インストールガイド</a>を参考にしてください。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ docker run -d -p 10084:8080 --name fess codelibs/fess:latest\n</pre></div></div>\n\n<h3>\n<span id=\"fessの設定\" class=\"fragment\"></span><a href=\"#fess%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>Fessの設定</h3>\n\n<h4>\n<span id=\"クローラの設定\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>クローラの設定</h4>\n\n<p><code>http://[PCのローカルIPアドレス]:10084/login</code>にアクセスするとログイン画面が表示されます。<br>\nデフォルトのID/PASS　<code>admin/admin</code>でログインしましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/d173fd5ce7a76eb7b5a6ef053a670dd6551d720c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65373930656361392d353037332d393438652d336534332d6437353436643537666165352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d173fd5ce7a76eb7b5a6ef053a670dd6551d720c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65373930656361392d353037332d393438652d336534332d6437353436643537666165352e706e67\" alt=\"1_Fess管理者_ログイン画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/e790eca9-5073-948e-3e43-d7546d57fae5.png\"></a><br>\n<br></p>\n\n<p>ログインするとダッシュボードが表示されます。左ペインの<code>クローラ</code> &gt; <code>Web</code>　を選択しましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/cbfee37bd5d06381615f013da8587b1af91c35aa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61636662653935302d666137342d643063622d336365652d3565386462346465356237342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/cbfee37bd5d06381615f013da8587b1af91c35aa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61636662653935302d666137342d643063622d336365652d3565386462346465356237342e706e67\" alt=\"2_Fess管理者_ダッシュボード.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/acfbe950-fa74-d0cb-3cee-5e8db4de5b74.png\"></a><br>\n<br></p>\n\n<p>Webクローラにはまだ何も登録されていないので、左上の<code>+　新規作成</code>ボタンをクリックしましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/e60be4a90df24cb1275c165752de363b15859b87/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36333130333762342d616162322d386530642d663961612d3364323365633931376132392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e60be4a90df24cb1275c165752de363b15859b87/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36333130333762342d616162322d386530642d663961612d3364323365633931376132392e706e67\" alt=\"3_Fess管理者_Webクロール設定_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/631037b4-aab2-8e0d-f9aa-3d23ec917a29.png\"></a><br>\n<br></p>\n\n<p>Webクロール情報入力画面が表示されます。<br>\n<a href=\"https://camo.qiitausercontent.com/62cd6f97bb7dfebb163873f26b5fda4fabcf89c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653561303963392d376363652d336665632d373838342d3132353863333266613931612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/62cd6f97bb7dfebb163873f26b5fda4fabcf89c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653561303963392d376363652d336665632d373838342d3132353863333266613931612e706e67\" alt=\"3_Fess管理者_Webクロール設定_2.png\" title=\"3_Fess管理者_Webクロール設定_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/ee5a09c9-7cce-3fec-7884-1258c32fa91a.png\"></a></p>\n\n<p>設定項目は色々ありますが、とりあえず下記項目だけ設定しましょう。</p>\n\n<ul>\n<li>名前 \n\n<ul>\n<li>任意の名前を設定してください。</li>\n</ul>\n</li>\n<li>URL \n\n<ul>\n<li>ドキュメント用Webサーバにおいてドキュメントが格納されているルートフォルダのURLを指定してください。末尾に<code>/</code>を付けてください。</li>\n</ul>\n</li>\n<li>クロール対象とするURL \n\n<ul>\n<li>正規表現で値を設定します。上記<code>URL</code>で設定したルートフォルダ配下の全資産を対象とするために、<code>URLで設定した値</code> + <code>.*</code> を指定してください。</li>\n</ul>\n</li>\n<li>検索対象とするURL\n\n<ul>\n<li>正規表現で値を設定します。HTMLのみを検索対象にしたい（JS、CSSなどは除外したい）ので、<code>URLで設定した値</code> + <code>.+\\.html$</code> を指定してください。\n<br>\n<br>\n</li>\n</ul>\n</li>\n</ul>\n\n<p>値を設定したら、画面を下にスクロールして<code>+　作成</code>ボタンをクリックします。<br>\nすると下記のようにWebクロールのデータが１件登録されます。<br>\n<a href=\"https://camo.qiitausercontent.com/8302d25592df90b2bdf59fbf3b43e31ecf106b3e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33643030626635612d663133312d643336372d646535332d6166313062623336383339642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/8302d25592df90b2bdf59fbf3b43e31ecf106b3e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33643030626635612d663133312d643336372d646535332d6166313062623336383339642e706e67\" alt=\"3_Fess管理者_Webクロール設定_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/3d00bf5a-f131-d367-de53-af10bb36839d.png\"></a><br>\n<br></p>\n\n<h4>\n<span id=\"クローラの実行\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AE%E5%AE%9F%E8%A1%8C\"><i class=\"fa fa-link\"></i></a>クローラの実行</h4>\n\n<p>左ペインで　<code>システム</code> &gt; <code>スケジューラ</code> を選択してジョブスケジューラを開きます。<br>\nジョブスケジューラで <code>Default Crawler</code>を選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/52e6c84dc635dabd786a05e2dc2dbc01bbcd62b3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62306165636130642d363461342d343364612d373832622d3061316130636437306238332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/52e6c84dc635dabd786a05e2dc2dbc01bbcd62b3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62306165636130642d363461342d343364612d373832622d3061316130636437306238332e706e67\" alt=\"4_Fess管理者_スケジューラ_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/b0aeca0d-64a4-43da-782b-0a1a0cd70b83.png\"></a><br>\n<br></p>\n\n<p><code>今すぐ開始</code>をクリックします。<br>\n<a href=\"https://camo.qiitausercontent.com/15c56153ff7878a59bfda2bab0ac3b8b6182fa23/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30306537363932302d626661642d656562312d636239392d3732346533613933393261392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/15c56153ff7878a59bfda2bab0ac3b8b6182fa23/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30306537363932302d626661642d656562312d636239392d3732346533613933393261392e706e67\" alt=\"4_Fess管理者_スケジューラ_1.1.png\" title=\"4_Fess管理者_スケジューラ_1.1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/00e76920-bfad-eeb1-cb99-724e3a9392a9.png\"></a><br>\n<br></p>\n\n<p>するとクロールが実行されます。<br>\n<a href=\"https://camo.qiitausercontent.com/b34d527efb0b07d2b04cabccebe97f0e1e4b594c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323564333030662d303766352d373234642d636539332d3865316339373532653130652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b34d527efb0b07d2b04cabccebe97f0e1e4b594c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323564333030662d303766352d373234642d636539332d3865316339373532653130652e706e67\" alt=\"4_Fess管理者_スケジューラ_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/725d300f-07f5-724d-ce93-8e1c9752e10e.png\"></a><br>\n<br></p>\n\n<p>しばらくして<code>F5</code>キーを押してブラウザを更新してください。<br>\nクロールが終了すると、スケジューラの状態が<code>実行中</code>から<code>有効</code>になります。<br>\n<a href=\"https://camo.qiitausercontent.com/2d860e111077a3a0b63a44b45e14e0e18b02fcb1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653466353237372d616163332d616437652d636465622d3431643339623733336331662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2d860e111077a3a0b63a44b45e14e0e18b02fcb1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653466353237372d616163332d616437652d636465622d3431643339623733336331662e706e67\" alt=\"4_Fess管理者_スケジューラ_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/ee4f5277-aac3-ad7e-cdeb-41d39b733c1f.png\"></a><br>\n<br></p>\n\n<h4>\n<span id=\"クローラ実行結果の確認\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>クローラ実行結果の確認</h4>\n\n<p>左ペインの<code>システム情報</code>&gt;<code>クロール情報</code>を選択すると、先ほど実行したクロールの結果が表示されています。その行を選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/e35eccd76c8d85dcc368298adfebb71871f083a7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39326633313062352d383366362d646564612d343438642d6166613863356230663130342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e35eccd76c8d85dcc368298adfebb71871f083a7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39326633313062352d383366362d646564612d343438642d6166613863356230663130342e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_1.png\" title=\"5_Fess管理者_システム情報_クロール情報_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/92f310b5-83f6-deda-448d-afa8c5b0f104.png\"></a><br>\n<br></p>\n\n<p>セッションIDを選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/341936c3d088fb04a1029cc6c891a35253a079da/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34653830636431342d333633342d663636352d623434382d3862346234653761386432312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/341936c3d088fb04a1029cc6c891a35253a079da/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34653830636431342d333633342d663636352d623434382d3862346234653761386432312e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_2.png\" title=\"5_Fess管理者_システム情報_クロール情報_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/4e80cd14-3634-f665-b448-8b4b4e7a8d21.png\"></a><br>\n<br></p>\n\n<p>ここにドキュメント用Webサーバのドキュメントが全て表示されればOKです。<br>\n<a href=\"https://camo.qiitausercontent.com/767e79c91f7521caf880a890deee50513f520ea9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36306238366263342d663730662d343263382d613031372d3566313338623362383865332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/767e79c91f7521caf880a890deee50513f520ea9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36306238366263342d663730662d343263382d613031372d3566313338623362383865332e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_3.png\" title=\"5_Fess管理者_システム情報_クロール情報_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/60b86bc4-f70f-42c8-a017-5f138b3b88e3.png\"></a><br>\n<br></p>\n\n<h3>\n<span id=\"ドキュメント用webサーバに全文検索用資産を配置\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E7%94%A8web%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AB%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E7%94%A8%E8%B3%87%E7%94%A3%E3%82%92%E9%85%8D%E7%BD%AE\"><i class=\"fa fa-link\"></i></a>ドキュメント用Webサーバに全文検索用資産を配置</h3>\n\n<p>全文検索用の資産は<code>full-text-search.js</code>と<code>full-text-search.css</code>の２つです。<br>\n<code>full-text-search.js</code>の変数 FESS_JSON_ENDPOINT(FESSサーバのJSON APIのエンドポイント) は適時置き換えてください。<br>\nこれらの資産をドキュメント用Webサーバのドキュメントのルートフォルダ直下に配置してください。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">full-text-search.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'use strict'</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// FESSサーバのJSON APIのエンドポイント（FessサーバのIPアドレス + /json）</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">FESS_JSON_ENDPOINT</span> <span class=\"o\">=</span> <span class=\"s1\">'http://192.168.1.5:10084/json'</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// １ページあたりの検索結果表示件数</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">COUNT_PAR_PAGE</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n\n\n    <span class=\"c1\">// 目次の</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#toc'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 一番上に検索条件入力エリアを挿入</span>\n        <span class=\"p\">.</span><span class=\"nx\">prepend</span><span class=\"p\">(</span>\n            <span class=\"s1\">'&lt;div id=\"search-area\"&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;form id=\"search-form\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;div class=\"search-input-area\"&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;i class=\"fa fa-search left-icon\"&gt;&lt;/i&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;input id=\"search-query\" placeholder=\"全文検索\" /&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;i class=\"fa fa-close right-icon\"&gt;&lt;/i&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;/div&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;input id=\"search-start\" type=\"hidden\" value=\"0\"/&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;input id=\"search-num\" type=\"hidden\" value=\"'</span> <span class=\"o\">+</span> <span class=\"nx\">COUNT_PAR_PAGE</span> <span class=\"o\">+</span> <span class=\"s1\">'\"/&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;form&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// イベント登録</span>\n        <span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">$searchArea</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 入力項目の検索条件でEnterを押したら、検索処理を実行する</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-form'</span><span class=\"p\">).</span><span class=\"nx\">submit</span><span class=\"p\">({</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 虫眼鏡アイコン押下したら、検索処理を実行する</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".left-icon\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">({</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 検索条件入力したら、</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\"#search-query\"</span><span class=\"p\">).</span><span class=\"nx\">keyup</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n              <span class=\"kd\">var</span> <span class=\"nx\">$this</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n              <span class=\"kd\">var</span> <span class=\"nx\">$rightIcon</span> <span class=\"o\">=</span> <span class=\"nx\">$this</span><span class=\"p\">.</span><span class=\"nx\">parent</span><span class=\"p\">().</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".right-icon\"</span><span class=\"p\">);</span>\n\n              <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">$this</span><span class=\"p\">.</span><span class=\"nx\">val</span><span class=\"p\">().</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                 <span class=\"c1\">// 検索条件に値がある場合は×アイコンの色を濃くする</span>\n                 <span class=\"nx\">$rightIcon</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#555'</span><span class=\"p\">);</span>\n              <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                 <span class=\"c1\">// 検索条件に値がない場合は×アイコンの色を薄くする</span>\n                 <span class=\"nx\">$rightIcon</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#ccc'</span><span class=\"p\">);</span>\n              <span class=\"p\">}</span>\n            <span class=\"p\">});</span>\n\n            <span class=\"c1\">// ×アイコン押下したら、</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".right-icon\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n              <span class=\"c1\">// ×アイコンの色を薄くして</span>\n              <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">).</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#ccc'</span><span class=\"p\">)</span>\n                      <span class=\"c1\">// 検索条件をクリアする</span>\n                     <span class=\"p\">.</span><span class=\"nx\">parent</span><span class=\"p\">().</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\"input\"</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span>\n            <span class=\"p\">});</span>\n        <span class=\"p\">});</span>\n\n    <span class=\"c1\">// ドキュメントタイトルの</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#header&gt;h1'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 直下に検索結果エリアを挿入</span>\n        <span class=\"p\">.</span><span class=\"nx\">before</span><span class=\"p\">(</span>\n            <span class=\"s1\">'&lt;div id=\"search-result-area\"&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div id=\"search-result-subheader\"&gt;&lt;/div&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div id=\"search-result-content\"&gt;&lt;/div&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// イベント登録</span>\n        <span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span>\n                <span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-area'</span><span class=\"p\">)</span>\n                    <span class=\"c1\">// 検索結果エリアのバツアイコンをクリックしたら、</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s1\">'#remove-search-result'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                      <span class=\"kd\">var</span> <span class=\"nx\">$searchResultArea</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">delegateTarget</span><span class=\"p\">)</span>\n                      <span class=\"c1\">// 検索結果エリアを非表示モードにする</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">removeClass</span><span class=\"p\">(</span><span class=\"s1\">'show'</span><span class=\"p\">);</span>\n                      <span class=\"c1\">// 検索結果エリアの中身を削除する</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-subheader'</span><span class=\"p\">).</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-content'</span><span class=\"p\">).</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n                    <span class=\"p\">})</span>\n                    <span class=\"c1\">// 前ページリンクをクリックしたら、１ページ前を検索する</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#prevPageLink\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">)</span>\n                    <span class=\"c1\">// 次ページリンクをクリックしたら、１ページ後を検索する</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#nextPageLink\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n        <span class=\"p\">});</span>\n\n\n\n    <span class=\"cm\">/**\n     * 検索処理\n     *\n     * @param  {eventObject} event\n     * @return {boolean}  submit処理を中断させるために必ずfalseを返却する\n     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">doSearch</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">){</span>\n      <span class=\"c1\">// 検索フィールドの値をトリムして取得</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">searchQuery</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">trim</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-query'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">());</span>\n      <span class=\"c1\">// 空の場合は検索処理を実行しない</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">searchQuery</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// 表示開始位置、表示件数の取得</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-start'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">()),</span>\n          <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-num'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">());</span>\n      <span class=\"c1\">// 表示開始位置のチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">start</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">// 表示件数のチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">num</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"nx\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">// 表示ページ情報の取得</span>\n      <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">navi</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n          <span class=\"c1\">// 前のページの場合</span>\n          <span class=\"nx\">start</span> <span class=\"o\">-=</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n          <span class=\"c1\">// 次のページの場合</span>\n          <span class=\"nx\">start</span> <span class=\"o\">+=</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"nl\">default</span><span class=\"p\">:</span>\n        <span class=\"k\">case</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n          <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// URLを構築</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"nx\">FESS_JSON_ENDPOINT</span> <span class=\"o\">+</span> <span class=\"s1\">'?callback=?'</span> <span class=\"o\">+</span> <span class=\"c1\">// 別ドメインを想定してJSONP形式でリクエストを送信する</span>\n                                     <span class=\"s1\">'&amp;q='</span> <span class=\"o\">+</span> <span class=\"nb\">encodeURIComponent</span><span class=\"p\">(</span><span class=\"nx\">searchQuery</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n                                     <span class=\"s1\">'&amp;start='</span> <span class=\"o\">+</span> <span class=\"nx\">start</span> <span class=\"o\">+</span>\n                                     <span class=\"s1\">'&amp;num='</span> <span class=\"o\">+</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// 検索リクエスト送信</span>\n      <span class=\"c1\">// 別ドメインを想定してJSONP形式でリクエストを送信する</span>\n      <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span>\n          <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"nx\">url</span><span class=\"p\">,</span>\n          <span class=\"na\">dataType</span><span class=\"p\">:</span> <span class=\"s1\">'jsonp'</span><span class=\"p\">,</span>\n          <span class=\"na\">success</span><span class=\"p\">:</span> <span class=\"nx\">renderSearchResult</span>\n      <span class=\"p\">});</span>\n\n\n      <span class=\"c1\">// ページ情報の更新</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#searchNum'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// ページ表示を上部に移動</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">).</span><span class=\"nx\">scrollTop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// サブミットを抑止するためにfalseを返す</span>\n      <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n\n\n    <span class=\"cm\">/**\n     * 検索成功時に検索結果を描画する\n     *\n     * @param  {Anything} data レスポンスデータ\n     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">renderSearchResult</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 検索結果処理</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">dataResponse</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">;</span>\n      <span class=\"c1\">// ステータスチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s2\">\"検索中に問題が発生しました。\"</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// 検索結果領域を表示する</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-area'</span><span class=\"p\">).</span><span class=\"nx\">addClass</span><span class=\"p\">(</span><span class=\"s1\">'show'</span><span class=\"p\">);</span>\n\n      <span class=\"kd\">var</span> <span class=\"nx\">$searchResultSubheader</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-subheader'</span><span class=\"p\">),</span>\n          <span class=\"nx\">$searchResultContent</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-content'</span><span class=\"p\">),</span>\n          <span class=\"nx\">record_count</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">record_count</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// 検索結果がない場合</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">record_count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// サブヘッダーに出力</span>\n        <span class=\"nx\">$searchResultSubheader</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span>  <span class=\"s1\">'&lt;div id=\"remove-search-result\" style=\"float:right;\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/div&gt;'</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// 結果領域に出力</span>\n        <span class=\"nx\">$searchResultContent</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;b&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">q</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/b&gt;に一致する情報は見つかりませんでした。'</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// 検索にヒットした場合</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">page_number</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_number</span><span class=\"p\">,</span>\n          <span class=\"nx\">page_size</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_size</span><span class=\"p\">,</span>\n          <span class=\"nx\">page_count</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_count</span><span class=\"p\">,</span>\n          <span class=\"nx\">startRange</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nx\">page_size</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n          <span class=\"nx\">endRange</span> <span class=\"o\">=</span> <span class=\"nx\">page_number</span> <span class=\"o\">*</span> <span class=\"nx\">page_size</span><span class=\"p\">,</span>\n          <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n          <span class=\"nx\">max</span><span class=\"p\">,</span>\n          <span class=\"nx\">offset</span> <span class=\"o\">=</span> <span class=\"nx\">startRange</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-start'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"nx\">offset</span><span class=\"p\">);</span>\n\n\n      <span class=\"c1\">// サブヘッダーに出力</span>\n      <span class=\"nx\">$searchResultSubheader</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;b&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">q</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/b&gt; の検索結果 '</span> <span class=\"o\">+</span>\n                                <span class=\"nx\">record_count</span> <span class=\"o\">+</span> <span class=\"s2\">\" 件中 \"</span> <span class=\"o\">+</span>  <span class=\"nx\">startRange</span> <span class=\"o\">+</span> <span class=\"s1\">' - '</span> <span class=\"o\">+</span>\n                                <span class=\"nx\">endRange</span> <span class=\"o\">+</span> <span class=\"s1\">' 件目 ('</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">exec_time</span> <span class=\"o\">+</span> <span class=\"s1\">' 秒)'</span> <span class=\"o\">+</span>\n                               <span class=\"s1\">'&lt;div id=\"remove-search-result\" style=\"float:right;\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/div&gt;'</span>\n\n      <span class=\"c1\">// 検索結果領域のクリア</span>\n      <span class=\"nx\">$searchResultContent</span><span class=\"p\">.</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n\n\n      <span class=\"c1\">// 検索結果の出力</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">$resultBody</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;ol/&gt;\"</span><span class=\"p\">);</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">results</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">;</span>\n      <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">max</span> <span class=\"o\">=</span> <span class=\"nx\">results</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">max</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">element</span> <span class=\"o\">=</span>\n            <span class=\"s1\">'&lt;li&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;h4 class=\"title\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;a href=\"'</span> <span class=\"o\">+</span><span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">url_link</span> <span class=\"o\">+</span> <span class=\"s1\">'\"&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">title</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/a&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;/h4&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div class=\"body\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">content_description</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;br/&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;cite&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">site</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/cite&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;/div&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/li&gt;'</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">).</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$resultBody</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">$resultBody</span><span class=\"p\">.</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$searchResultContent</span><span class=\"p\">);</span>\n\n\n      <span class=\"c1\">// ページ番号情報の出力</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">pageArea</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n      <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;div id=\"pageInfo\"&gt;'</span><span class=\"p\">,</span> <span class=\"nx\">page_number</span><span class=\"p\">,</span> <span class=\"s1\">'ページ目&lt;br/&gt;'</span><span class=\"p\">);</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 前のページへのリンク</span>\n        <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;a id=\"prevPageLink\" href=\"#\"&gt;&amp;lt;&amp;lt;前ページへ&lt;/a&gt; '</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">&lt;</span> <span class=\"nx\">page_count</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 次のページへのリンク</span>\n        <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;a id=\"nextPageLink\" href=\"#\"&gt;次ページへ&amp;gt;&amp;gt;&lt;/a&gt;'</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">);</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"p\">)).</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$searchResultContent</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">full-text-search.css</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">@charset</span> <span class=\"s1\">\"UTF-8\"</span><span class=\"p\">;</span>\n\n<span class=\"nf\">#search-area</span> <span class=\"p\">{</span>\n    <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"p\">{</span>\n    <span class=\"nl\">position</span><span class=\"p\">:</span><span class=\"nb\">relative</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* 入力項目 */</span>\n<span class=\"nf\">#search-query</span> <span class=\"p\">{</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span> <span class=\"m\">2em</span><span class=\"p\">;</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">black</span><span class=\"p\">;</span>\n    <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"n\">arial</span><span class=\"p\">,</span><span class=\"nb\">sans-serif</span><span class=\"p\">;</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span>\n    <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">2em</span><span class=\"p\">;</span>\n    <span class=\"nl\">outline</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nt\">input</span><span class=\"nd\">:focus</span> <span class=\"p\">{</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"m\">#4d90fe</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* アイコンは入力項目の左と右に配置する */</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"o\">,</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span> <span class=\"p\">{</span>\n    <span class=\"c\">/* 縦方向の中央寄せ */</span>\n    <span class=\"nl\">position</span><span class=\"p\">:</span><span class=\"nb\">absolute</span><span class=\"p\">;</span>\n    <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">50%</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">-0.5em</span><span class=\"p\">;</span>\n    <span class=\"py\">font-sise</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 要素にマウスを合わせたら、マウスポインタのマークを変える */</span>\n    <span class=\"nl\">cursor</span><span class=\"p\">:</span><span class=\"nb\">pointer</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span> <span class=\"p\">{</span>\n    <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span><span class=\"p\">;</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span><span class=\"m\">#444</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span> <span class=\"p\">{</span>\n    <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 最初は、グレーアウトしておく */</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* アイコンにマウスを合わせたら、サイズを大きくする */</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"nd\">:hover</span><span class=\"o\">,</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1.4em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* 検索結果表示時に適用するスタイル */</span>\n<span class=\"nf\">#search-result-area</span><span class=\"nc\">.show</span> <span class=\"p\">{</span>\n    <span class=\"nl\">background</span><span class=\"p\">:</span> <span class=\"m\">#f8f8f7</span><span class=\"p\">;</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">0px</span> <span class=\"nb\">solid</span><span class=\"p\">;</span>\n    <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h3>\n<span id=\"ドキュメントに全文検索用資産の読み込み処理を追加\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AB%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E7%94%A8%E8%B3%87%E7%94%A3%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF%E5%87%A6%E7%90%86%E3%82%92%E8%BF%BD%E5%8A%A0\"><i class=\"fa fa-link\"></i></a>ドキュメントに全文検索用資産の読み込み処理を追加</h3>\n\n<p>前手順でドキュメント用Webサーバに配置した<code>full-text-search.js</code>と<code>full-text-search.css</code>を、<br>\n各ドキュメントから読み込むようにします。<br>\n<code>full-text-search.js</code>はjQueryに依存しているので、<br>\n既存のドキュメントで読み込んでいない場合はjQueryも読み込みも追加してください。</p>\n\n<p>ドキュメント用Webサーバがこのようなフォルダ構成だとしたら、</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ドキュメント用Webサーバのドキュメントルート\n├── full-text-search.css\n├── full-text-search.js\n└── asciidoctor-sample\n    └── asciidoctor-sample.html\n</pre></div></div>\n\n<p><code>asciidoctor-sample.adoc</code>には下記を追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>++++\n&lt;link rel=\"stylesheet\" href=\"../full-text-search.css\"&gt;&lt;/link&gt;\n&lt;script\n  src=\"https://code.jquery.com/jquery-3.2.1.min.js\"\n  integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\"\n  crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n&lt;script src=\"../full-text-search.js\"&gt;&lt;/script&gt;\n++++\n</pre></div></div>\n\n<h3>\n<span id=\"全文検索ができるかの確認\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%8B%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>全文検索ができるかの確認</h3>\n\n<p>以上の手順を実施すると、Asdciidoctorで全文検索ができるようになります。<br>\nドキュメントをブラウザで見ると、目次上部に検索窓が追加されています。<br>\n<a href=\"https://camo.qiitausercontent.com/daf3699de0e01b28ba4d3c2a8b8b535d3c54a2ab/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39393039336364362d353865382d376364652d613364382d3562656332613032303636382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/daf3699de0e01b28ba4d3c2a8b8b535d3c54a2ab/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39393039336364362d353865382d376364652d613364382d3562656332613032303636382e706e67\" alt=\"7_全文検索イメージ_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/99093cd6-58e8-7cde-a3d8-5bec2a020668.png\"></a><br>\n<br></p>\n\n<p>検索条件を入力し、虫眼鏡アイコンをクリックすると、検索結果が表示されます。<br>\n<a href=\"https://camo.qiitausercontent.com/5d8e0c5f2db223d5f021d484351b0c840010bb4f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63646533643865612d643838332d613636622d663838642d3961353934313032366263392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/5d8e0c5f2db223d5f021d484351b0c840010bb4f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63646533643865612d643838332d613636622d663838642d3961353934313032366263392e706e67\" alt=\"7_全文検索イメージ_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/cde3d8ea-d883-a66b-f88d-9a5941026bc9.png\"></a><br>\n<br></p>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>FessのREST APIを使用してAsciidoctorで全文検索できるようにする方法を紹介しました。<br>\nFessのREST APIを使えば、Asciidoctorに限らず、様々なシステムに全文検索機能を導入できそうです。</p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<ul>\n<li><a href=\"http://fess.codelibs.org/ja/articles/article-4.html#js\" rel=\"nofollow noopener\" target=\"_blank\">Fess で作るApache Solrベースの検索サーバー 〜 REST API 編</a></li>\n<li><a href=\"http://qiita.com/cookienote/items/1f2443be25630a78d946\" id=\"reference-69c989703115d994be84\">全文検索サーバー Fess を Docker で動かす</a></li>\n</ul>\n","body":"[Asciidoctor](http://asciidoctor.org/)を使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。\n\nそこで今回は、Dockerで全文検索サーバの[Fess](http://fess.codelibs.org/ja/)を立てて、\nドキュメントからJavaScript経由でFessのJSON APIを呼び出すことで、\n全文検索を簡単に導入する方法をご紹介します。\n\n導入するとドキュメントの右上に検索窓が出てきて全文検索できるようになります。\n![6月-24-2017 19-05-32.gif](https://qiita-image-store.s3.amazonaws.com/0/49915/123ec771-fb77-e4dc-df7e-a4b407792759.gif \"6月-24-2017 19-05-32.gif\")\n\n\n## Fessとは\n[Fess](http://fess.codelibs.org/ja/)は**「5 分で簡単に構築可能な全文検索サーバー」**です。\nJavaベースで構築されており、Apacheライセンスで提供されるオープンソース製品で、無料で使用できます。\n自分でクローラを設定して、自分だけの検索エンジンがつくれるようなイメージです。\nデフォルトで検索画面を提供していますが、JSON APIも提供しているので、様々なシステムと連携可能です。\n\n\n## 全体像\nドキュメント用Webサーバに全文検索用のJavaScriptファイルとCSSファイルを追加し、Dockerで全文検索用のFessサーバを立てます。\nFessサーバはドキュメント用Webサーバをクロールし、その情報を保存しておきます。\nドキュメントで全文検索を実施すると、JavaScript経由でFessサーバのJSON AIPを呼び出して、全文検索結果をドキュメントに表示します。\n\n![0_Fess_全体像_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/10c8ac46-2155-8eb7-a5ed-7c13ce544ec2.png)\n\n![0_Fess_全体像_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/40e1d456-2635-2aed-333d-8b1aec447931.png)\n\n## 導入手順\nこの導入手順は、下記のような環境\u001c（ローカルPCのDocker上にドキュメント用WebサーバとFessサーバが立っている環境）を作った時のものです。\nDockerを使わなくても、ローカルPC以外でも、導入可能です。導入手順は適宜読み替えてください。\n\n![0_Fess_全体像_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/0badb8d2-1a58-22b6-457c-12becf3a8911.png)\n\n\n### Fessのインストール\nDocker Hubの[codelibs/fess](https://hub.docker.com/r/codelibs/fess/)を使用します。今回ポートは10084で公開します。\nDockerを使わない場合は[Fess インストールガイド](http://fess.codelibs.org/ja/11.2/install/index.html)を参考にしてください。\n\n```\n$ docker run -d -p 10084:8080 --name fess codelibs/fess:latest\n```\n\n### Fessの設定\n#### クローラの設定\n`http://[PCのローカルIPアドレス]:10084/login`にアクセスするとログイン画面が表示されます。\nデフォルトのID/PASS　`admin/admin`でログインしましょう。\n![1_Fess管理者_ログイン画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/e790eca9-5073-948e-3e43-d7546d57fae5.png)\n<br/>\n\nログインするとダッシュボードが表示されます。左ペインの`クローラ` > `Web`　を選択しましょう。\n![2_Fess管理者_ダッシュボード.png](https://qiita-image-store.s3.amazonaws.com/0/49915/acfbe950-fa74-d0cb-3cee-5e8db4de5b74.png)\n<br/>\n\nWebクローラにはまだ何も登録されていないので、左上の`+　新規作成`ボタンをクリックしましょう。\n![3_Fess管理者_Webクロール設定_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/631037b4-aab2-8e0d-f9aa-3d23ec917a29.png)\n<br/>\n\nWebクロール情報入力画面が表示されます。\n![3_Fess管理者_Webクロール設定_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/ee5a09c9-7cce-3fec-7884-1258c32fa91a.png \"3_Fess管理者_Webクロール設定_2.png\")\n\n設定項目は色々ありますが、とりあえず下記項目だけ設定しましょう。\n\n* 名前 \n    * 任意の名前を設定してください。\n* URL \n    * ドキュメント用Webサーバにおいてドキュメントが格納されているルートフォルダのURLを指定してください。末尾に`/`を付けてください。\n* クロール対象とするURL \n    * 正規表現で値を設定します。上記`URL`で設定したルートフォルダ配下の全資産を対象とするために、`URLで設定した値` + `.*` を指定してください。\n* 検索対象とするURL\n   * 正規表現で値を設定します。HTMLのみを検索対象にしたい（JS、CSSなどは除外したい）ので、`URLで設定した値` + `.+\\.html$` を指定してください。\n<br/>\n<br/>\n\n\n値を設定したら、画面を下にスクロールして`+　作成`ボタンをクリックします。\nすると下記のようにWebクロールのデータが１件登録されます。\n![3_Fess管理者_Webクロール設定_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/3d00bf5a-f131-d367-de53-af10bb36839d.png)\n<br/>\n\n\n#### クローラの実行\n左ペインで　`システム` > `スケジューラ` を選択してジョブスケジューラを開きます。\nジョブスケジューラで `Default Crawler`を選択します。\n![4_Fess管理者_スケジューラ_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/b0aeca0d-64a4-43da-782b-0a1a0cd70b83.png)\n<br/>\n\n`今すぐ開始`をクリックします。\n![4_Fess管理者_スケジューラ_1.1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/00e76920-bfad-eeb1-cb99-724e3a9392a9.png \"4_Fess管理者_スケジューラ_1.1.png\")\n<br/>\n\nするとクロールが実行されます。\n![4_Fess管理者_スケジューラ_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/725d300f-07f5-724d-ce93-8e1c9752e10e.png)\n<br/>\n\nしばらくして`F5`キーを押してブラウザを更新してください。\nクロールが終了すると、スケジューラの状態が`実行中`から`有効`になります。\n![4_Fess管理者_スケジューラ_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/ee4f5277-aac3-ad7e-cdeb-41d39b733c1f.png)\n<br/>\n\n\n#### クローラ実行結果の確認\n左ペインの`システム情報`>`クロール情報`を選択すると、先ほど実行したクロールの結果が表示されています。その行を選択します。\n![5_Fess管理者_システム情報_クロール情報_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/92f310b5-83f6-deda-448d-afa8c5b0f104.png \"5_Fess管理者_システム情報_クロール情報_1.png\")\n<br/>\n\n\nセッションIDを選択します。\n![5_Fess管理者_システム情報_クロール情報_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/4e80cd14-3634-f665-b448-8b4b4e7a8d21.png \"5_Fess管理者_システム情報_クロール情報_2.png\")\n<br/>\n\nここにドキュメント用Webサーバのドキュメントが全て表示されればOKです。\n![5_Fess管理者_システム情報_クロール情報_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/60b86bc4-f70f-42c8-a017-5f138b3b88e3.png \"5_Fess管理者_システム情報_クロール情報_3.png\")\n<br/>\n\n### ドキュメント用Webサーバに全文検索用資産を配置\n全文検索用の資産は`full-text-search.js`と`full-text-search.css`の２つです。\n`full-text-search.js`の変数 FESS_JSON_ENDPOINT(FESSサーバのJSON APIのエンドポイント) は適時置き換えてください。\nこれらの資産をドキュメント用Webサーバのドキュメントのルートフォルダ直下に配置してください。\n\n```javascript:full-text-search.js\n$(function() {\n    'use strict';\n\n    // FESSサーバのJSON APIのエンドポイント（FessサーバのIPアドレス + /json）\n    var FESS_JSON_ENDPOINT = 'http://192.168.1.5:10084/json';\n\n    // １ページあたりの検索結果表示件数\n    var COUNT_PAR_PAGE = 10;\n\n\n    // 目次の\n    $('#toc')\n        // 一番上に検索条件入力エリアを挿入\n        .prepend(\n            '<div id=\"search-area\">' +\n                '<form id=\"search-form\">' +\n                    '<div class=\"search-input-area\">' +\n                        '<i class=\"fa fa-search left-icon\"></i>' +\n                        '<input id=\"search-query\" placeholder=\"全文検索\" />' +\n                        '<i class=\"fa fa-close right-icon\"></i>' +\n                    '</div>' +\n                    '<input id=\"search-start\" type=\"hidden\" value=\"0\"/>' +\n                    '<input id=\"search-num\" type=\"hidden\" value=\"' + COUNT_PAR_PAGE + '\"/>' +\n                '<form>' +\n            '</div>')\n        // イベント登録\n        .ready(function() {\n            var $searchArea = $(this);\n\n            // 入力項目の検索条件でEnterを押したら、検索処理を実行する\n            $searchArea.find('#search-form').submit({navi:0}, doSearch);\n\n            // 虫眼鏡アイコン押下したら、検索処理を実行する\n            $searchArea.find(\".left-icon\").click({navi:0}, doSearch);\n\n            // 検索条件入力したら、\n            $searchArea.find(\"#search-query\").keyup(function(){\n              var $this = $(this);\n              var $rightIcon = $this.parent().find(\".right-icon\");\n\n              if($this.val().length > 0) {\n                 // 検索条件に値がある場合は×アイコンの色を濃くする\n                 $rightIcon.css('color','#555');\n              } else {\n                 // 検索条件に値がない場合は×アイコンの色を薄くする\n                 $rightIcon.css('color','#ccc');\n              }\n            });\n\n            // ×アイコン押下したら、\n            $searchArea.find(\".right-icon\").click(function(){\n              // ×アイコンの色を薄くして\n              $(this).css('color','#ccc')\n                      // 検索条件をクリアする\n                     .parent().find(\"input\").val('');\n            });\n        });\n\n    // ドキュメントタイトルの\n    $('#header>h1')\n        // 直下に検索結果エリアを挿入\n        .before(\n            '<div id=\"search-result-area\">' +\n                '<div id=\"search-result-subheader\"></div>' +\n                '<div id=\"search-result-content\"></div>' +\n            '</div>')\n        // イベント登録\n        .ready(function() {\n            $(this)\n                .find('#search-result-area')\n                    // 検索結果エリアのバツアイコンをクリックしたら、\n                    .on(\"click\", '#remove-search-result', function(e) {\n                      var $searchResultArea = $(e.delegateTarget)\n                      // 検索結果エリアを非表示モードにする\n                      $searchResultArea.removeClass('show');\n                      // 検索結果エリアの中身を削除する\n                      $searchResultArea.find('#search-result-subheader').empty();\n                      $searchResultArea.find('#search-result-content').empty();\n                    })\n                    // 前ページリンクをクリックしたら、１ページ前を検索する\n                    .on(\"click\", \"#prevPageLink\", {navi:-1}, doSearch)\n                    // 次ページリンクをクリックしたら、１ページ後を検索する\n                    .on(\"click\", \"#nextPageLink\", {navi:1}, doSearch);\n        });\n\n\n\n    /**\n     * 検索処理\n     *\n     * @param  {eventObject} event\n     * @return {boolean}  submit処理を中断させるために必ずfalseを返却する\n     */\n    function doSearch(event){\n      // 検索フィールドの値をトリムして取得\n      var searchQuery = $.trim($('#search-query').val());\n      // 空の場合は検索処理を実行しない\n      if(searchQuery.length == 0) {\n        return false;\n      }\n\n\n      // 表示開始位置、表示件数の取得\n      var start = parseInt($('#search-start').val()),\n          num = parseInt($('#search-num').val());\n      // 表示開始位置のチェック\n      if(start < 0) {\n        start = 0;\n      }\n      // 表示件数のチェック\n      if(num < 1 || num > 100) {\n        num = 20;\n      }\n      // 表示ページ情報の取得\n      switch(event.data.navi) {\n        case -1:\n          // 前のページの場合\n          start -= num;\n          break;\n        case 1:\n          // 次のページの場合\n          start += num;\n          break;\n        default:\n        case 0:\n          start = 0;\n          break;\n      }\n\n\n      // URLを構築\n      var url = FESS_JSON_ENDPOINT + '?callback=?' + // 別ドメインを想定してJSONP形式でリクエストを送信する\n                                     '&q=' + encodeURIComponent(searchQuery) +\n                                     '&start=' + start +\n                                     '&num=' + num;\n\n      // 検索リクエスト送信\n      // 別ドメインを想定してJSONP形式でリクエストを送信する\n      $.ajax({\n          url: url,\n          dataType: 'jsonp',\n          success: renderSearchResult\n      });\n\n\n      // ページ情報の更新\n      $('#searchNum').val(num);\n\n      // ページ表示を上部に移動\n      $(document).scrollTop(0);\n\n      // サブミットを抑止するためにfalseを返す\n      return false;\n    };\n\n\n    /**\n     * 検索成功時に検索結果を描画する\n     *\n     * @param  {Anything} data レスポンスデータ\n     */\n    function renderSearchResult(data) {\n      // 検索結果処理\n      var dataResponse = data.response;\n      // ステータスチェック\n      if(dataResponse.status != 0) {\n        alert(\"検索中に問題が発生しました。\");\n        return;\n      }\n\n      // 検索結果領域を表示する\n      $('#search-result-area').addClass('show');\n\n      var $searchResultSubheader = $('#search-result-subheader'),\n          $searchResultContent = $('#search-result-content'),\n          record_count = dataResponse.record_count;\n\n      // 検索結果がない場合\n      if(record_count == 0) {\n        // サブヘッダーに出力\n        $searchResultSubheader[0].innerHTML =  '<div id=\"remove-search-result\" style=\"float:right;\"><i class=\"fa fa-times\"></i></div>';\n\n        // 結果領域に出力\n        $searchResultContent[0].innerHTML = '<b>' + dataResponse.q + '</b>に一致する情報は見つかりませんでした。';\n\n        return;\n      }\n\n\n      // 検索にヒットした場合\n      var page_number = dataResponse.page_number,\n          page_size = dataResponse.page_size,\n          page_count = dataResponse.page_count,\n          startRange = (page_number - 1) * page_size + 1,\n          endRange = page_number * page_size,\n          i = 0,\n          max,\n          offset = startRange - 1;\n\n      $('#search-start').val(offset);\n\n\n      // サブヘッダーに出力\n      $searchResultSubheader[0].innerHTML = '<b>' + dataResponse.q + '</b> の検索結果 ' +\n                                record_count + \" 件中 \" +  startRange + ' - ' +\n                                endRange + ' 件目 (' + dataResponse.exec_time + ' 秒)' +\n                               '<div id=\"remove-search-result\" style=\"float:right;\"><i class=\"fa fa-times\"></i></div>'\n\n      // 検索結果領域のクリア\n      $searchResultContent.empty();\n\n\n      // 検索結果の出力\n      var $resultBody = $(\"<ol/>\");\n      var results = dataResponse.result;\n      for(i = 0, max = results.length; i < max; i++) {\n        var element =\n            '<li>' +\n                '<h4 class=\"title\">' +\n                    '<a href=\"' +results[i].url_link + '\">' + results[i].title + '</a>' +\n                '</h4>' +\n                '<div class=\"body\">' +\n                    results[i].content_description +\n                    '<br/>' +\n                    '<cite>' + results[i].site + '</cite>' +\n                '</div>' +\n            '</li>';\n\n        $(element).appendTo($resultBody);\n      }\n      $resultBody.appendTo($searchResultContent);\n\n\n      // ページ番号情報の出力\n      var pageArea = [];\n      pageArea.push('<div id=\"pageInfo\">', page_number, 'ページ目<br/>');\n      if(page_number > 1) {\n        // 前のページへのリンク\n        pageArea.push('<a id=\"prevPageLink\" href=\"#\">&lt;&lt;前ページへ</a> ');\n      }\n      if(page_number < page_count) {\n        // 次のページへのリンク\n        pageArea.push('<a id=\"nextPageLink\" href=\"#\">次ページへ&gt;&gt;</a>');\n      }\n      pageArea.push('</div>');\n      $(pageArea.join(\"\")).appendTo($searchResultContent);\n    }\n});\n\n```\n\n\n```css:full-text-search.css\n@charset \"UTF-8\";\n\n#search-area {\n    margin-bottom: 1em;\n}\n\n.search-input-area {\n    position:relative;\n}\n\n/* 入力項目 */\n#search-query {\n    padding: 0.7em 2em;\n    width: 100%;\n    color: black;\n    font-family: arial,sans-serif;\n    font-size: 1em;\n    border: 1px solid #ccc;\n    border-radius: 2em;\n    outline: 0;\n}\n\n.search-input-area input:focus {\n    border: 1px solid #4d90fe;\n}\n\n/* アイコンは入力項目の左と右に配置する */\n.search-input-area .left-icon,\n.search-input-area .right-icon {\n    /* 縦方向の中央寄せ */\n    position:absolute;\n    top: 50%;\n    margin-top: -0.5em;\n    font-sise: 1em;\n    /* 要素にマウスを合わせたら、マウスポインタのマークを変える */\n    cursor:pointer;\n}\n\n.search-input-area .left-icon {\n    left: 0.7em;\n    color:#444;\n}\n\n.search-input-area .right-icon {\n    right: 0.7em;\n    /* 最初は、グレーアウトしておく */\n    color: #ccc;\n}\n\n/* アイコンにマウスを合わせたら、サイズを大きくする */\n.search-input-area .left-icon:hover,\n.search-input-area .right-icon:hover {\n    font-size: 1.4em;\n}\n\n\n.search-input-area .left-icon:hover {\n    left: 0.5em;\n}\n\n\n.search-input-area .right-icon:hover {\n    right: 0.5em;\n}\n\n/* 検索結果表示時に適用するスタイル */\n#search-result-area.show {\n    background: #f8f8f7;\n    border: 0px solid;\n    border-radius: 0.5em;\n    margin-top: 1em;\n    margin-bottom: 1em;\n    padding: 1em;\n}\n\n```\n\n### ドキュメントに全文検索用資産の読み込み処理を追加\n前手順でドキュメント用Webサーバに配置した`full-text-search.js`と`full-text-search.css`を、\n各ドキュメントから読み込むようにします。\n`full-text-search.js`はjQueryに依存しているので、\n既存のドキュメントで読み込んでいない場合はjQueryも読み込みも追加してください。\n\nドキュメント用Webサーバがこのようなフォルダ構成だとしたら、\n\n```\nドキュメント用Webサーバのドキュメントルート\n├── full-text-search.css\n├── full-text-search.js\n└── asciidoctor-sample\n    └── asciidoctor-sample.html\n```\n\n\n`asciidoctor-sample.adoc`には下記を追加します。\n\n```\n++++\n<link rel=\"stylesheet\" href=\"../full-text-search.css\"></link>\n<script\n  src=\"https://code.jquery.com/jquery-3.2.1.min.js\"\n  integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\"\n  crossorigin=\"anonymous\"></script>\n<script src=\"../full-text-search.js\"></script>\n++++\n```\n\n### 全文検索ができるかの確認\n以上の手順を実施すると、Asdciidoctorで全文検索ができるようになります。\nドキュメントをブラウザで見ると、目次上部に検索窓が追加されています。\n![7_全文検索イメージ_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/99093cd6-58e8-7cde-a3d8-5bec2a020668.png)\n<br/>\n\n検索条件を入力し、虫眼鏡アイコンをクリックすると、検索結果が表示されます。\n![7_全文検索イメージ_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/cde3d8ea-d883-a66b-f88d-9a5941026bc9.png)\n<br/>\n\n\n## まとめ\nFessのREST APIを使用してAsciidoctorで全文検索できるようにする方法を紹介しました。\nFessのREST APIを使えば、Asciidoctorに限らず、様々なシステムに全文検索機能を導入できそうです。\n\n\n## 参考\n* [Fess で作るApache Solrベースの検索サーバー 〜 REST API 編](http://fess.codelibs.org/ja/articles/article-4.html#js)\n* [全文検索サーバー Fess を Docker で動かす](http://qiita.com/cookienote/items/1f2443be25630a78d946)\n\n","comments_count":0,"created_at":"2017-06-26T00:21:37+09:00","likes_count":21,"reactions_count":0},"relations":[{"node":{"fields":{"slug":"/7780e313-8bda-5534-99aa-37bf47e9deb3/","title":"GitBucketのissueで作業量を設定できるプラグイン","date":"2017-12-31T23:49:04+09:00","excerpt":"== 2018/4/7 追記 ==========================================本記事ではChrome拡張とDockerによって実現していましたが、その後GitBucket Plugin化しました。gitb...","tags":["JavaScript","chrome-extension","Docker","GitBucket","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"7780e313-8bda-5534-99aa-37bf47e9deb3","title":"GitBucketのissueで作業量を設定できるプラグイン","rendered_body":"<p>== 2018/4/7 追記 ==========================================<br>\n本記事ではChrome拡張とDockerによって実現していましたが、<br>\nその後GitBucket Plugin化しました。</p>\n\n<p><a href=\"https://github.com/Takumon/gitbucket-issue-estimation-plugin\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-plugin</a></p>\n\n<p><a href=\"https://github.com/Takumon/gitbucket-issue-estimation-plugin/releases/tag/0.1\" rel=\"nofollow noopener\" target=\"_blank\">リリースページ</a>からjarファイルをダウンロードして<code>&lt;GITBUCKET_HOME&gt;/plugins/</code>に置くだけで導入可能です。<br>\n== =======================================================</p>\n\n<p>Git Advent Calendarが埋まっていなかったので、大晦日ですが代わりに投稿させていただきました。</p>\n\n<h2>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h2>\n\n<p><a href=\"https://gitbucket.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">GitBucket</a>のマイルストーンの進捗率はissueの件数ベースなので、issueごとに作業量のバラつきがあったりすると現実的な進捗率と乖離してしまいます。</p>\n\n<p>そこで今回はChrome拡張とDockerイメージを作成して、<br>\nissueに作業量を設定できるようにして、マイルストーンで作業量ベースの進捗率を確認できるようにしました。</p>\n\n<p>Chrome拡張とDockerイメージはどちらも公開しているので簡単に導入できます。是非試してみてください。</p>\n\n<ul>\n<li>\n<em>Chrome拡張</em>\n\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-client</a></li>\n</ul>\n</li>\n<li>\n<em>Dockerイメージ</em>\n\n<ul>\n<li><a href=\"https://hub.docker.com/r/takumon/gitbucket-issue-estimation-server/\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-server</a></li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"導入すると\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B%E3%81%A8\"><i class=\"fa fa-link\"></i></a>導入すると</h2>\n\n<p><a href=\"https://gitbucket.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">GitBucket</a>のissueで作業量が設定できるようになり、<br>\n<a href=\"https://camo.qiitausercontent.com/f13706aedeb42c177c1f4f57975596b5ff002407/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36313030366263392d326438322d663062302d363461322d3037393233633737333963372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/f13706aedeb42c177c1f4f57975596b5ff002407/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36313030366263392d326438322d663062302d363461322d3037393233633737333963372e706e67\" alt=\"導入後_イシュー画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/61006bc9-2d82-f0b0-64a2-07923c7739c7.png\"></a></p>\n\n<p>マイルストーンで作業量ベースの進捗率が見れるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/b86e2b23bc0f4b9fae45b07bfd568b11bc005121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36613462383664382d323937332d656338342d383662632d3632383965343262643636362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b86e2b23bc0f4b9fae45b07bfd568b11bc005121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36613462383664382d323937332d656338342d383662632d3632383965343262643636362e706e67\" alt=\"導入後_マイルストーン画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/6a4b86d8-2973-ec84-86bc-6289e42bd666.png\"></a></p>\n\n<p>またissue一覧画面でも作業量を設定できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/7c2ee31427698b7fe01b30f25b8e31b7e3115e2d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39633835386533622d356463312d313432342d663334662d3562323661633665323066642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7c2ee31427698b7fe01b30f25b8e31b7e3115e2d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39633835386533622d356463312d313432342d663334662d3562323661633665323066642e706e67\" alt=\"導入後_イシュー一覧画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/9c858e3b-5dc1-1424-f34f-5b26ac6e20fd.png\"></a></p>\n\n<h2>\n<span id=\"導入手順\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>導入手順</h2>\n\n<h3>\n<span id=\"1-docker側\" class=\"fragment\"></span><a href=\"#1-docker%E5%81%B4\"><i class=\"fa fa-link\"></i></a>1. Docker側</h3>\n\n<p>GitBucketと同じネットワーク環境に作業量保存用のサーバを立てます。Dockerが導入されていることが前提です。</p>\n\n<ul>\n<li>docker-compose.ymlを作成（MongoDBのボリューム用にdocker-compose.ymlファイルと同階層にdbフォルダを作成してください）</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"docker\">\n<div class=\"code-lang\"><span class=\"bold\">docker-compose.yml</span></div>\n<div class=\"highlight\"><pre>version: \"3.3\"\nservices:\n  server:\n    image: takumon/gitbucket-issue-estimation-server\n    ports:\n      - 3000:3000\n    depends_on:\n      - mongo\n    links:\n      - mongo\n    environment:\n      MONGO_URL: mongodb://mongo:27017/test\n  mongo:\n    image: mongo:3.5.12\n    ports:\n      - 27017:27017\n    volumes:\n      - ./db:/data/db\n</pre></div>\n</div>\n\n<ul>\n<li>docker-conpose.ymlがあるフォルダで下記を実行</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span>docker-compose up <span class=\"nt\">-d</span>\n</pre></div></div>\n\n<h3>\n<span id=\"2-gitbucket側\" class=\"fragment\"></span><a href=\"#2-gitbucket%E5%81%B4\"><i class=\"fa fa-link\"></i></a>2. GitBucket側</h3>\n\n<p>Chrome拡張をインストールする前に、GitBucketのトークンを発行してメモしておきます。</p>\n\n<ul>\n<li><p>GitBucketヘッダー右上アイコン &gt; Account Setting を選択<br>\n<a href=\"https://camo.qiitausercontent.com/b06f383ce5768cc2c9b84b7bcd92537cbd0f94ef/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34323637363166372d633139392d653139652d633631392d6131383264643035623065612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b06f383ce5768cc2c9b84b7bcd92537cbd0f94ef/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34323637363166372d633139392d653139652d633631392d6131383264643035623065612e706e67\" alt=\"導入手順_GitBucketトークン発行_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/426761f7-c199-e19e-c619-a182dd05b0ea.png\"></a><br>\n<br></p></li>\n<li><p>左メニュー Applicationsを選択し、Generate new tokenのToken descriptionにトークンの概要を記載、その後<code>Generate token</code>ボタンをクリック<br>\n<a href=\"https://camo.qiitausercontent.com/e21ff3f5214f3833cc66ed4d9cf2037b31c6d02f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64313836663730322d663764622d353231652d366436642d6564636133313836643931352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e21ff3f5214f3833cc66ed4d9cf2037b31c6d02f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f64313836663730322d663764622d353231652d366436642d6564636133313836643931352e706e67\" alt=\"導入手順_GitBucketトークン発行_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/d186f702-f7db-521e-6d6d-edca3186d915.png\"></a><br>\n<br></p></li>\n<li><p>発行されたトークンをコピー（後の手順で使います）<br>\n<a href=\"https://camo.qiitausercontent.com/d46de4cb3222a8304001bbc2f89abc1e14b2cba8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30633830346661662d666431332d383064322d386365392d6535303439323262623534612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d46de4cb3222a8304001bbc2f89abc1e14b2cba8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30633830346661662d666431332d383064322d386365392d6535303439323262623534612e706e67\" alt=\"導入手順_GitBucketトークン発行_３.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/0c804faf-fd13-80d2-8ce9-e504922bb54a.png\"></a></p></li>\n</ul>\n\n<h3>\n<span id=\"3-chrome-extension側\" class=\"fragment\"></span><a href=\"#3-chrome-extension%E5%81%B4\"><i class=\"fa fa-link\"></i></a>3. Chrome Extension側</h3>\n\n<ul>\n<li><p>Chromeを開きChromeウェブストアで<a href=\"https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">gitbucket-issue-estimation-client</a>をインストール<br>\n<a href=\"https://camo.qiitausercontent.com/b7b7e21c6391cd1436ad73eb356bdec6f93bb3b4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63336365666639382d313731372d626566302d306465392d3836313736303638613635632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b7b7e21c6391cd1436ad73eb356bdec6f93bb3b4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63336365666639382d313731372d626566302d306465392d3836313736303638613635632e706e67\" alt=\"導入手順_GitBucket_拡張インストール_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/c3ceff98-1717-bef0-0de9-86176068a65c.png\"></a><br>\n<br></p></li>\n<li>\n<p>右上の「E」アイコンをクリック、下記情報を入力し<code>Save</code>ボタンクリック</p>\n\n<ul>\n<li>\n<strong>gitbucket-issue-estimation-server URL</strong>\n\n<ul>\n<li>サーバ側の手順で立てたサーバのURL 例： <code>http://127.0.0.1:3000</code> </li>\n</ul>\n</li>\n<li>\n<strong>GitBucket Token</strong>\n\n<ul>\n<li>GitBucket側の手順でメモしたトークン\n<a href=\"https://camo.qiitausercontent.com/be5ab7568b1a4eee506be3546cae994189e34d15/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66366162333739622d613835322d366562342d663634382d6131346437353139663365622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/be5ab7568b1a4eee506be3546cae994189e34d15/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66366162333739622d613835322d366562342d663634382d6131346437353139663365622e706e67\" alt=\"導入手順_GitBucketトークン発行_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f6ab379b-a852-6eb4-f648-a14d7519f3eb.png\"></a>\n<br>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"具体的な仕組み\" class=\"fragment\"></span><a href=\"#%E5%85%B7%E4%BD%93%E7%9A%84%E3%81%AA%E4%BB%95%E7%B5%84%E3%81%BF\"><i class=\"fa fa-link\"></i></a>具体的な仕組み</h2>\n\n<p>Docker側はMongoDBとNode.jsを使っていて、issueの作業量の検索登録・更新・削除APIを提供しているだけです。<br>\nChrome拡張側で下記のように全体をコントロールしています。</p>\n\n<p><strong>(1)</strong> ・・・　GitBucketの画面からissueとマイルストーンの情報を取得、issueの作業量、作業量ベースの進捗率を画面に挿入<br>\n<strong>(2)</strong> ・・・　画面から取得したissueの情報をもとに詳細情報を取得<br>\n<strong>(3)</strong> ・・・　issueの作業量を検索・登録・更新・削除</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/d5736e48c469204a17566c6cfb4003420add2c8e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63616435323063332d376439632d666134372d326262302d3732633534663638383233362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d5736e48c469204a17566c6cfb4003420add2c8e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63616435323063332d376439632d666134372d326262302d3732633534663638383233362e706e67\" alt=\"全体像.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/cad520c3-7d9c-fa47-2bb0-72c54f688236.png\"></a></p>\n\n<h2>\n<span id=\"chrome拡張作成時にgitbucket-apiまわりで躓いたこと\" class=\"fragment\"></span><a href=\"#chrome%E6%8B%A1%E5%BC%B5%E4%BD%9C%E6%88%90%E6%99%82%E3%81%ABgitbucket-api%E3%81%BE%E3%82%8F%E3%82%8A%E3%81%A7%E8%BA%93%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>Chrome拡張作成時にGitBucket APIまわりで躓いたこと</h2>\n\n<p><a href=\"https://github.com/gitbucket/gitbucket/wiki/API-WebHook\" rel=\"nofollow noopener\" target=\"_blank\">GitBucketのAPI</a>は<a href=\"https://developer.github.com/v3/\" rel=\"nofollow noopener\" target=\"_blank\">GithubのREST API v3</a>に準拠していますが、一部実装されていない部分があったので、Chrome拡張作成時に躓きました。</p>\n\n<h3>\n<span id=\"stateallが効かない\" class=\"fragment\"></span><a href=\"#stateall%E3%81%8C%E5%8A%B9%E3%81%8B%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a><code>state=all</code>が効かない</h3>\n\n<p>未解決issueと解決済issue両方をいっぺんに取得したかったのですが、GitBucketのAPIでは<code>state=all</code>が効きません。そのため<code>state=open</code>と<code>state=closed</code>を指定して２回に分けて取得する実装にしました。</p>\n\n<h4>\n<span id=\"per_pageが効かない1度に25件が最大\" class=\"fragment\"></span><a href=\"#per_page%E3%81%8C%E5%8A%B9%E3%81%8B%E3%81%AA%E3%81%841%E5%BA%A6%E3%81%AB25%E4%BB%B6%E3%81%8C%E6%9C%80%E5%A4%A7\"><i class=\"fa fa-link\"></i></a><code>per_page</code>が効かない（1度に25件が最大）</h4>\n\n<p>GitBucketのAPIでは<code>per_page</code>（検索時の１ページあたりの件数）が実装されていません。<br>\nそのためマイルストーンに紐づくissue取得時は、１ページ目を検索して取得結果が25件の場合は次のページも検索するような実装にしました。</p>\n\n<h4>\n<span id=\"closed_atクローズ日が取得できない\" class=\"fragment\"></span><a href=\"#closed_at%E3%82%AF%E3%83%AD%E3%83%BC%E3%82%BA%E6%97%A5%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a><code>closed_at</code>（クローズ日）が取得できない</h4>\n\n<p>Chrome拡張作成当初は、バーンダウンチャートを表示しようと思っていたのですが、issueのクローズ日が取得出来ないので断念しました。</p>\n\n<h4>\n<span id=\"-参考にさせていただいたサイト\" class=\"fragment\"></span><a href=\"#-%E5%8F%82%E8%80%83%E3%81%AB%E3%81%95%E3%81%9B%E3%81%A6%E3%81%84%E3%81%9F%E3%81%A0%E3%81%84%E3%81%9F%E3%82%B5%E3%82%A4%E3%83%88\"><i class=\"fa fa-link\"></i></a>※ 参考にさせていただいたサイト</h4>\n\n<ul>\n<li><a href=\"https://qiita.com/5zm/items/b0b620cdeb9596108418#1%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8C%E6%9C%80%E5%A4%A725%E4%BB%B6%E3%81%A7%E5%85%A8issue%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\" id=\"reference-1c197ca99a2ee070efac\">PythonでGitBucketのIssueをExcel出力する（その後）</a></li>\n<li><a href=\"https://qiita.com/5zm/items/57d7abca8e0d447e326d#2-gitbucket%E3%81%AEapi%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6issues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0\" id=\"reference-7d56ea50a58cb24addc5\">PythonでGitBucketのIssueをExcel出力する（API呼び出し編）</a></li>\n</ul>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>本来こういう追加機能はGitBucketプラグインで作るべきなのかもしれませんが、今回はChrome拡張とDockerイメージで実現してみました。<br>\nChrome拡張は任意の画面にJavaScriptやCSSを差し込めるので、既存のWebサービスををちょっと便利にするのにはうってつけですね。</p>\n","body":"== 2018/4/7 追記 ==========================================\n本記事ではChrome拡張とDockerによって実現していましたが、\nその後GitBucket Plugin化しました。\n\n[gitbucket-issue-estimation-plugin](https://github.com/Takumon/gitbucket-issue-estimation-plugin)\n\n[リリースページ](https://github.com/Takumon/gitbucket-issue-estimation-plugin/releases/tag/0.1)からjarファイルをダウンロードして`<GITBUCKET_HOME>/plugins/`に置くだけで導入可能です。\n== =======================================================\n\n\nGit Advent Calendarが埋まっていなかったので、大晦日ですが代わりに投稿させていただきました。\n\n## はじめに\n[GitBucket](https://gitbucket.github.io/)のマイルストーンの進捗率はissueの件数ベースなので、issueごとに作業量のバラつきがあったりすると現実的な進捗率と乖離してしまいます。\n\nそこで今回は\bChrome拡張とDockerイメージを作成して、\nissueに作業量を設定できるようにして、マイルストーンで作業量ベースの進捗率を確認できるようにしました。\n\nChrome拡張とDockerイメージはどちらも公開しているので簡単に導入できます。是非試してみてください。\n\n\n* *Chrome拡張*\n    * [gitbucket-issue-estimation-client](https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja)\n* *Dockerイメージ*\n    * [gitbucket-issue-estimation-server](https://hub.docker.com/r/takumon/gitbucket-issue-estimation-server/)\n\n## 導入すると\n[GitBucket](https://gitbucket.github.io/)のissueで作業量が設定できるようになり、\n![導入後_イシュー画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/61006bc9-2d82-f0b0-64a2-07923c7739c7.png)\n\n\bマイルストーンで作業量ベースの進捗率が見れるようになります。\n![導入後_マイルストーン画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/6a4b86d8-2973-ec84-86bc-6289e42bd666.png)\n\nまた\bissue\b一覧画面でも作業量を設定できるようになります。\n![導入後_イシュー一覧画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/9c858e3b-5dc1-1424-f34f-5b26ac6e20fd.png)\n\n\n\n\n## 導入手順\n### 1. Docker側\nGitBucketと同じネットワーク環境に作業量\b保存用のサーバを立てます。Dockerが導入されていることが前提です。\n\n* \u001edocker-compose\b.ymlを作成（MongoDBのボリューム用にdocker-compose.ymlファイルと同階層にdbフォルダを作成してください）\n\n```docker:docker-compose.yml\nversion: \"3.3\"\nservices:\n  server:\n    image: takumon/gitbucket-issue-estimation-server\n    ports:\n      - 3000:3000\n    depends_on:\n      - mongo\n    links:\n      - mongo\n    environment:\n      MONGO_URL: mongodb://mongo:27017/test\n  mongo:\n    image: mongo:3.5.12\n    ports:\n      - 27017:27017\n    volumes:\n      - ./db:/data/db\n```\n\n* docker-conpose.ymlがあるフォルダで下記を実行\n\n```bash:\n$ docker-compose up -d\n```\n\n\n### 2. GitBucket側\nChrome拡張をインストールする前に、GitBucketの\bトークンを発行してメモしておきます。\n\n* GitBucketヘッダー右上アイコン > Account Setting\b を選択\n![導入手順_GitBucketトークン発行_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/426761f7-c199-e19e-c619-a182dd05b0ea.png)\n<br>\n\n* 左メニュー Applicationsを選択し、Generate new tokenのToken descriptionにトークンの概要を記載、その後`Generate token`ボタンをクリック\n![導入手順_GitBucketトークン発行_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/d186f702-f7db-521e-6d6d-edca3186d915.png)\n<br>\n\n* 発行されたトークンをコピー（後の手順で使います）\n![導入手順_GitBucketトークン発行_３.png](https://qiita-image-store.s3.amazonaws.com/0/49915/0c804faf-fd13-80d2-8ce9-e504922bb54a.png)\n\n\n### 3. Chrome Extension側\n* Chromeを開きChromeウェブストアで[gitbucket-issue-estimation-client](https://chrome.google.com/webstore/detail/gitbucket-issue-estimatio/hfnjaoikgpephpfbniemgfpkcbafgidj?hl=ja)をインストール\n![導入手順_GitBucket_拡張インストール_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/c3ceff98-1717-bef0-0de9-86176068a65c.png)\n<br>\n\n* \b右上の「E」アイコンをクリック、下記情報を入力し`Save`ボタンクリック\n    * **gitbucket-issue-estimation-server URL**\n        * サーバ側の手順で立てたサーバのURL 例： `http://127.0.0.1:3000` \n    * **GitBucket Token**\n        * GitBucket側の手順でメモしたトークン\n![導入手順_GitBucketトークン発行_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f6ab379b-a852-6eb4-f648-a14d7519f3eb.png)\n<br>\n\n## 具体的な仕組み\nDocker側はMongoDBとNode.jsを使っていて、issueの作業量の検索登録・更新・削除APIを提供しているだけです。\nChrome拡張側で下記のように全体をコントロールしています。\n\n**(1)** ・・・　GitBucketの画面からissueとマイルストーンの情報を取得、issueの作業量、作業量ベースの進捗率を画面に挿入\n**(2)** ・・・　画面から取得したissueの情報をもとに詳細情報を取得\n**(3)** ・・・　issueの作業量を検索・登録・更新・削除\n\n![全体像.png](https://qiita-image-store.s3.amazonaws.com/0/49915/cad520c3-7d9c-fa47-2bb0-72c54f688236.png)\n\n\n\n## Chrome拡張作成時にGitBucket APIまわりで躓いたこと\n[GitBucketのAPI](https://github.com/gitbucket/gitbucket/wiki/API-WebHook)は[GithubのREST API v3](https://developer.github.com/v3/)に準拠していますが、一部実装されていない部分があったので、Chrome拡張作成時に躓きました。\n\n### `state=all`が効かない\n未解決issueと解決済issue両方をいっぺんに取得したかったのですが、GitBucketのAPIでは`state=all`が効きません。そのため`state=open`と`state=closed`を指定して２回に分けて取得する実装にしました。\n\n#### `per_page`が効かない（\b1度に25件が最大）\nGitBucketのAPIでは`per_page`（検索時の１ページあたりの件数）が実装されていません。\nそのためマイルストーンに紐づくissue取得時は、１ページ目を検索して取得結果が25件の場合は次のページも検索するような実装にしました。\n\n#### `closed_at`（クローズ日）が取得できない\nChrome拡張作成当初は、バーンダウンチャートを表示しようと思っていたのですが、issueのクローズ日が取得出来ないので断念しました。\n\n#### ※ 参考にさせていただいたサイト\n* [PythonでGitBucketのIssueをExcel出力する（その後）](https://qiita.com/5zm/items/b0b620cdeb9596108418#1%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8C%E6%9C%80%E5%A4%A725%E4%BB%B6%E3%81%A7%E5%85%A8issue%E3%81%8C%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84)\n* [PythonでGitBucketのIssueをExcel出力する（API呼び出し編）](https://qiita.com/5zm/items/57d7abca8e0d447e326d#2-gitbucket%E3%81%AEapi%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6issues%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0)\n\n\n## まとめ\n本来こういう追加機能はGitBucketプラグインで作るべきなのかもしれませんが、今回はChrome拡張とDockerイメージで実現してみました。\nChrome拡張は任意の画面にJavaScriptやCSSを差し込めるので、既存のWebサービスををちょっと便利にするのにはうってつけですね。\n\n","comments_count":0,"created_at":"2017-12-31T23:49:04+09:00","likes_count":6,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/b4c7d1b9-428f-569a-af40-527d89794a77/","title":"TypeScriptで簡単にChrome Extensionを作る方法","date":"2017-12-20T02:36:27+09:00","excerpt":"Githubで草を生やす活動は楽しいですね!増えてきて芝みたいになると達成感があって、モチベーションも上がります。ところで、この前の10/30に草がハロウィン仕様になっていたのを見て、草を自分の好みの色を変更できればもっと楽しくなるのでは?...","tags":["JavaScript","GitHub","TypeScript","chrome-extension","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"b4c7d1b9-428f-569a-af40-527d89794a77","title":"TypeScriptで簡単にChrome Extensionを作る方法","rendered_body":"<p>Githubで草を生やす活動は楽しいですね!<br>\n増えてきて芝みたいになると達成感があって、モチベーションも上がります。<br>\nところで、この前の10/30に草がハロウィン仕様になっていたのを見て、<br>\n草を自分の好みの色を変更できればもっと楽しくなるのでは?と思い<br>\n<a href=\"https://chrome.google.com/webstore/detail/github-contributions-pain/bdibnecenojddgmjplnfehpjdmkiddok?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">草の色が変更できる（ついでにお絵描きもできる）Chrome Extension</a>を作りました。<br>\n<strong>その時に<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使って、TypeScriptで簡単にChrome Extensionが作れたので、アプリ作成から公開までの手順をまとめます。</strong></p>\n\n<h2>\n<span id=\"1-プロジェクトの雛形を生成する\" class=\"fragment\"></span><a href=\"#1-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E9%9B%9B%E5%BD%A2%E3%82%92%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>1. プロジェクトの雛形を生成する</h2>\n\n<p>yomanと<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>で簡単に雛形が作れるのでコレらを使っていきます。</p>\n\n<ul>\n<li>\n<code>yoman</code>と<code>generator-chrome-extension-kickstart-typescript</code>をグローバルインストールします</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install -g yo generator-chrome-extension-kickstart-typescript \n</pre></div></div>\n\n<ul>\n<li>プロジェクトのルートフォルダを作成後、ルートフォルダに移動して<code>yo</code>コマンドで雛形を生成します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ mkdir project\n$ cd project\n$ yo chrome-extension-kickstart-typescript \n</pre></div></div>\n\n<ul>\n<li>いくつか質問されるので適当に答えます\n\n<ul>\n<li>\n<strong>What would you like to call this extension?</strong>\n\n<ul>\n<li>プロジェクト名を入力します。デフォルトはプロジェクトのフォルダ名</li>\n</ul>\n</li>\n<li>\n<strong>And how would you call it if you only had 12 characters (short_name)?</strong>\n\n<ul>\n<li>プロジェクトの略称を12文字以内で入力します</li>\n</ul>\n</li>\n<li>\n<strong>How would you like to describe this extension?</strong>\n\n<ul>\n<li>プロジェクト概要を入力します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to use UI Action?</strong>\n\n<ul>\n<li>作りたいUI Actionに応じて、<code>No</code>,<code>Browser</code>,<code>Page</code>のいずれかを選択します\n\n<ul>\n<li>\n<code>No</code> ・・・ UI Actionを使わない場合</li>\n<li>\n<code>Browser</code> ・・・ ツールバーの右にアイコンが常駐するタイプのChrome拡張を作成する場合</li>\n<li>\n<code>Page</code> ・・・ 特定のWebサイト観覧時のみにアドレスバー右にアイコンが表示されるタイプのChrome拡張を作成する場合</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to override a chrome page?</strong>\n\n<ul>\n<li>Chromeの内部ページを書き換えるかどうかで、<code>No</code>,<code>Bookmarks Page</code>,<code>History Page</code>,<code>Newtab Page</code>のいずれかを選択します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like more UI Features?</strong>\n\n<ul>\n<li>作りたいUIを複数選択します\n\n<ul>\n<li>\n<code>Options Page</code> ・・・ オプション画面を作りたい場合</li>\n<li>\n<code>Devtools Page</code> ・・・ 開発者ツールを拡張したい場合</li>\n<li>\n<code>Content Scripts</code> ・・・ Webで表示している画面にJavaScriptを差し込んで何か処理をしたい場合</li>\n<li>\n<code>Omnibox</code> ・・・ アドレスバーを拡張したい時に選択</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to use permissions?</strong>\n\n<ul>\n<li>使用するパーミッションを複数選択します</li>\n</ul>\n</li>\n<li>\n<strong>Would you like to install promo images for the Chrome Web Store?</strong>\n\n<ul>\n<li>Chromeストアで使う宣伝用画像を自動で生成するかを選択します</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<p>※自分は下記のように答えました<br>\n<strong>What would you like to call this extension?</strong> =&gt; github-contributions-paint<br>\n<strong>And how would you call it if you only had 12 characters (short_name)?</strong> =&gt;  github-paint<br>\n<strong>How would you like to describe this extension?</strong> =&gt;  You can paint github contributions!<br>\n<strong>Would you like to use UI Action?</strong> =&gt; Browser<br>\n<strong>Would you like to override a chrome page?</strong> =&gt;  No<br>\n<strong>Would you like more UI Features?</strong> =&gt;  Content Scripts<br>\n<strong>Would you like to use permissions?</strong> =&gt;  Tabs<br>\n<strong>Would you like to install promo images for the Chrome Web Store?</strong> =&gt;  Yes</p>\n\n<ul>\n<li>すると雛形が生成されます</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">生成された雛形のフォルダ構成</span></div>\n<div class=\"highlight\"><pre>github-contributions-paint\n├── README.md\n├── app\n│   ├── images       　　　    　・・・Chromeウェブストア公開時に必要なアイコン格納フォルダ\n│   │   ├── icon-128.png\n│   │   ├── icon-16.png\n│   │   ├── icon-19.png\n│   │   └── icon-38.png\n│   ├── manifest.json          ・・・Chrome拡張の設定を定義するファイル\n│   ├── pages                  ・・・HTMLファイル格納フォルダ\n│   │   └── popup.html         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── scripts                ・・・TSファイル格納フォルダ\n│   │   ├── background.ts      ・・・バックグランド処理を記述するファイル\n│   │   └── popup.ts           ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── styles                 ・・・CSSファイル格納フォルダ\n│   │   └── popup.scss         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── _locales\n│   │   └── en\n│   │       └── messages.json ・・・アプリの設定ファイル\n│   └── fonts\n├── promo                     ・・・Chromeウェブストア公開時に必要な宣伝用画像の格納フォルダ\n│   ├── Chrome-Webstore-Icon_128x128.png\n│   ├── Promo-Image-Large_920x680.png\n│   ├── Promo-Image-Marquee_1400x560.png\n│   ├── Promo-Image-Small_440x280.png\n│   ├── Screenshot_1280x800.png\n│   └── Screenshot_640x400.png\n├── dist\n├── gulpfile.babel.js\n├── node_modules\n├── package-lock.json\n├── package.json\n├── tasks\n├── tsconfig.json\n└── tslint.json\n\n</pre></div>\n</div>\n\n<ul>\n<li>最後にTypeScriptをグローバルインストールしていない場合は、グローバルインストールまたはプロジェクトにインストールします</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install typescript --save-dev\n</pre></div></div>\n\n<p>==2018/11/24 追記(ここから)==</p>\n\n<ul>\n<li>このまま次手順にいくと警告がでるのでそれを防ぐためにgulpのバージョンを下げます。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install gulp@3.9.0 --save-dev\n</pre></div></div>\n\n<p>※関連する<a href=\"https://github.com/gulpjs/gulp/issues/1631\" rel=\"nofollow noopener\" target=\"_blank\">issue</a>、<a href=\"https://stackoverflow.com/questions/48568942/failed-to-load-external-module-babel-register-while-gulp\" rel=\"nofollow noopener\" target=\"_blank\">stackoverflow</a></p>\n\n<p>==2018/11/24 追記(ここまで)==</p>\n\n<h2>\n<span id=\"2-作ったchrome-extensionを動かしてみる\" class=\"fragment\"></span><a href=\"#2-%E4%BD%9C%E3%81%A3%E3%81%9Fchrome-extension%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>2. 作ったChrome Extensionを動かしてみる</h2>\n\n<p>雛形を作成したら早速動かすことができます</p>\n\n<ul>\n<li>ビルドコマンドを実行します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run dev:chrome\n</pre></div></div>\n\n<ul>\n<li><p>Chromeで<code>chrome://extensions</code>を開いて<code>パッケージ化されていない拡張機能を読み込む</code>ボタンをクリック<br>\n<a href=\"https://camo.qiitausercontent.com/88e144ea0fc880ccec17978afc9ec782fb0d62c1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35613534396134352d386563342d383935352d623733332d3837353534396638616433312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/88e144ea0fc880ccec17978afc9ec782fb0d62c1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35613534396134352d386563342d383935352d623733332d3837353534396638616433312e706e67\" alt=\"手順_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5a549a45-8ec4-8955-b733-875549f8ad31.png\"></a></p></li>\n<li><p>プロジェクトルート/dist配下の<code>chrome</code>フォルダを選択<br>\n<a href=\"https://camo.qiitausercontent.com/53813821851801eddbed514961987f9070733381/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393161313636652d366532652d336633372d373130652d6565373532306339336563322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/53813821851801eddbed514961987f9070733381/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393161313636652d366532652d336633372d373130652d6565373532306339336563322e706e67\" alt=\"操作_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f91a166e-6e2e-3f37-710e-ee7520c93ec2.png\"></a></p></li>\n<li><p>するとプロジェクトが<a>Chrome Extension管理画面</a>に追加されて、ブラウザ右上にアイコンが表示されます<br>\n<a href=\"https://camo.qiitausercontent.com/e2e0fba31b666b0fea44ded1ded106236dd280e8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36316232653131332d653532302d376566382d633437652d3432366265393361613834622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e2e0fba31b666b0fea44ded1ded106236dd280e8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36316232653131332d653532302d376566382d633437652d3432366265393361613834622e706e67\" alt=\"動作確認1_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/61b2e113-e520-7ef8-c47e-426be93aa84b.png\"></a></p></li>\n<li><p>アイコンをクリックして動作検証ができます<br>\n<a href=\"https://camo.qiitausercontent.com/909be0f655c64c11846b9b3ca31630357ddd7121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33666631316537332d383162332d636435612d386537302d3961373534613661393936352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/909be0f655c64c11846b9b3ca31630357ddd7121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33666631316537332d383162332d636435612d386537302d3961373534613661393936352e706e67\" alt=\"動作確認_11.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/3ff11e73-81b3-cd5a-8e70-9a754a6a9965.png\"></a></p></li>\n</ul>\n\n<h2>\n<span id=\"3-開発中にchrome-extensionの動作確認する\" class=\"fragment\"></span><a href=\"#3-%E9%96%8B%E7%99%BA%E4%B8%AD%E3%81%ABchrome-extension%E3%81%AE%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>3. 開発中にChrome Extensionの動作確認する</h2>\n\n<p>雛形の動作検証ができたらTypeScriptファイルを編集して処理を追加していきます。<br>\n<code>npm run dev:chrome</code>を実行した後、下記手順繰り返すことで、ソースコードを修正しながら随時動作検証ができます。</p>\n\n<ul>\n<li>資産（TypeScriptやHTML,CSS）を修正する（勝手にビルドが走ります）</li>\n<li>最新のビルド資産を取り込むため<a>Chrome Extension管理画面</a>でリロードをクリックします\n<a href=\"https://camo.qiitausercontent.com/090a13aa3e617e29329421ec4c5fba4a56e1fb9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35663936353163362d373337662d643664622d383062662d3434613731363662323030352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/090a13aa3e617e29329421ec4c5fba4a56e1fb9e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35663936353163362d373337662d643664622d383062662d3434613731363662323030352e706e67\" alt=\"開発手順_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5f9651c6-737f-d6db-80bf-44a7166b2005.png\"></a>\n</li>\n<li>Chrome Extensionの動作確認をする</li>\n</ul>\n\n<h2>\n<span id=\"4-アイコンと宣伝用画像を作る\" class=\"fragment\"></span><a href=\"#4-%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%81%A8%E5%AE%A3%E4%BC%9D%E7%94%A8%E7%94%BB%E5%83%8F%E3%82%92%E4%BD%9C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>4. アイコンと宣伝用画像を作る</h2>\n\n<p>アプリを公開する前に、アイコンと宣伝用画像を作成し、雛形生成時のデフォルト資産と差し替えます。<br>\nデザイナーさんなら苦労しないでしょうが、自分はこれが一番大変でした。<br>\n3つのアイコンと3つの宣伝用画像が必要です。</p>\n\n<h3>\n<span id=\"アイコン\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3\"><i class=\"fa fa-link\"></i></a>アイコン</h3>\n\n<ul>\n<li>128x128\n\n<ul>\n<li>必須。インストール時やChromeウェブストアで表示する用</li>\n</ul>\n</li>\n<li>48x48\n\n<ul>\n<li>拡張機能の管理ページで表示する用</li>\n</ul>\n</li>\n<li>16x16\n\n<ul>\n<li>ブラウザ右上に表示する用</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"宣伝用画像\" class=\"fragment\"></span><a href=\"#%E5%AE%A3%E4%BC%9D%E7%94%A8%E7%94%BB%E5%83%8F\"><i class=\"fa fa-link\"></i></a>宣伝用画像</h3>\n\n<ul>\n<li>440x280\n\n<ul>\n<li>必須</li>\n</ul>\n</li>\n<li>920x680\n\n<ul>\n<li>大きめの画像</li>\n</ul>\n</li>\n<li>1400x560\n\n<ul>\n<li>ChromeExtensionをChrome Storeで選択した時に表示される画像</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"5-chromeウェブストアに公開する\" class=\"fragment\"></span><a href=\"#5-chrome%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B9%E3%83%88%E3%82%A2%E3%81%AB%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>5. Chromeウェブストアに公開する</h2>\n\n<ul>\n<li>雛形生成時バージョンが0.0.0になっており、バージョンが低すぎて公開できない状態なので、<code>manifest.json</code>と<code>package.json</code>のバージョン指定を0.0.1にあげます</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">manifest.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n  </span><span class=\"s2\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0.0.1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">&lt;-</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">0</span><span class=\"err\">から</span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">1</span><span class=\"err\">にあげる</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n  </span><span class=\"s2\">\"version\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"0.0.1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"err\">&lt;-</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">0</span><span class=\"err\">から</span><span class=\"mf\">0.0</span><span class=\"err\">.</span><span class=\"mi\">1</span><span class=\"err\">にあげる</span><span class=\"w\">\n  </span><span class=\"err\">・・・</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>下記コマンドで公開用のzipファイルを作成します</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run build:chrome\n</pre></div></div>\n\n<ul>\n<li><p><a href=\"https://chrome.google.com/webstore/category/extensions\" rel=\"nofollow noopener\" target=\"_blank\">Chromeウェブストア</a>のデベロッパーダッシュボードを開きます。Chromeアカウントでログインします<br>\n<a href=\"https://camo.qiitausercontent.com/d0db218423075317e350940d46d6510353fc81bd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65646234386163392d303138312d316437382d633761642d6130383237313261663031632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d0db218423075317e350940d46d6510353fc81bd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65646234386163392d303138312d316437382d633761642d6130383237313261663031632e706e67\" alt=\"アプリ登録_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/edb48ac9-0181-1d78-c7ad-a082712af01c.png\"></a></p></li>\n<li><p>ダッシュボードで<code>新しいアイテムを追加する</code>を選択します<br>\n<a href=\"https://camo.qiitausercontent.com/70b8f467a4819f7fd2251cf96abf3749b7626eeb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37383761336132352d326539332d363138362d313765642d3662313962626233626162352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/70b8f467a4819f7fd2251cf96abf3749b7626eeb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37383761336132352d326539332d363138362d313765642d3662313962626233626162352e706e67\" alt=\"アプリ登録_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/787a3a25-2e93-6186-17ed-6b19bbb3bab5.png\"></a></p></li>\n<li><p><code>ファイルを追加</code>で作成したzipファイル(プロジェクトルート/packages配下にあります)を選択後、<code>アップロード</code>を選択します<br>\n<a href=\"https://camo.qiitausercontent.com/2bc72004e70eb79c898506904f452d396754f39f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32323362343632342d643839322d336562382d356561382d3733633461616632623562382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2bc72004e70eb79c898506904f452d396754f39f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32323362343632342d643839322d336562382d356561382d3733633461616632623562382e706e67\" alt=\"アプリ登録_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/223b4624-d892-3eb8-5ea8-73c4aaf2b5b8.png\"></a></p></li>\n<li><p>説明、アイコン、宣伝用画像、カテゴリを入力して<code>変更を公開</code>をクリックします<br>\n<a href=\"https://camo.qiitausercontent.com/efa7c9ab0ced7326af8c7cb2d03fe9c2282e7f11/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323466303335352d666537622d373931382d326437352d3039633333636365356530302e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/efa7c9ab0ced7326af8c7cb2d03fe9c2282e7f11/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323466303335352d666537622d373931382d326437352d3039633333636365356530302e706e67\" alt=\"登録_5.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/724f0355-fe7b-7918-2d75-09c33cce5e00.png\"></a></p></li>\n<li><p>これで公開作業は完了です。しばらくするとChromeウェブストアに公開されます</p></li>\n</ul>\n\n<h2>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h2>\n\n<p>今回は<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使って、TypeScriptでChrome Extensionを作成、公開する手順をまとめました。<br>\n最初はTypeScriptでChrome Extensionを作るのは、ビルドの設定など色々めんどくさそうだぁと思っていましたが、<br>\n<a href=\"https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript\" rel=\"nofollow noopener\" target=\"_blank\">generator-chrome-extension-kickstart-typescript</a>を使うことで、簡単に作成から公開まで実現できました。<br>\nブラウザでのちょっとした作業を効率化するのにChrome Extentionは非常に強力なツールなので、今後なにかアイディアがあればまた作ってみたいと思います。</p>\n","body":"Githubで草を生やす活動は楽しいですね!\n増えてきて芝みたいになると達成感があって、モチベーションも上がります。\nところで、この前の10/30に草がハロウィン仕様になっていたのを見て、\n草を自分の好みの色を変更できればもっと楽しくなるのでは?と思い\n[草の色が変更できる（ついでにお絵描きもできる）Chrome Extension](https://chrome.google.com/webstore/detail/github-contributions-pain/bdibnecenojddgmjplnfehpjdmkiddok?hl=ja)を作りました。\n**その時に[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使って、TypeScriptで簡単にChrome Extensionが作れたので、アプリ作成から公開までの手順をまとめます。**\n\n## 1. プロジェクトの雛形を生成する\nyomanと[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)で簡単に雛形が作れるのでコレらを使っていきます。\n\n* `yoman`と`generator-chrome-extension-kickstart-typescript`をグローバルインストールします\n\n```\n$ npm install -g yo generator-chrome-extension-kickstart-typescript \n```\n* プロジェクトのルートフォルダを作成後、ルートフォルダに移動して`yo`コマンドで雛形を生成します\n\n```\n$ mkdir project\n$ cd project\n$ yo chrome-extension-kickstart-typescript \n```\n\n* いくつか質問されるので適当に答えます\n    * **What would you like to call this extension?**\n        * プロジェクト名を入力します。デフォルトはプロジェクトのフォルダ名\n    * **And how would you call it if you only had 12 characters (short_name)?**\n        * プロジェクトの略称を12文字以内で入力します\n    * **How would you like to describe this extension?**\n        * プロジェクト概要を入力します\n    * **Would you like to use UI Action?**\n        * 作りたいUI Actionに応じて、`No`,`Browser`,`Page`のいずれかを選択します\n            * `No` ・・・ UI Actionを使わない場合\n            * `Browser` ・・・ ツールバーの右にアイコンが常駐するタイプのChrome拡張を作成する場合\n            * `Page` ・・・ 特定のWebサイト観覧時のみにアドレスバー右にアイコンが表示されるタイプのChrome拡張を作成する場合\n    * **Would you like to override a chrome page?**\n        * Chromeの内部ページを書き換えるかどうかで、`No`,`Bookmarks Page`,`History Page`,`Newtab Page`のいずれかを選択します\n    * **Would you like more UI Features?**\n        * 作りたいUIを複数選択します\n            * `Options Page` ・・・ オプション画面を作りたい場合\n            * `Devtools Page` ・・・ 開発者ツールを拡張したい場合\n            * `Content Scripts` ・・・ Webで表示している画面にJavaScriptを差し込んで何か処理をしたい場合\n            * `Omnibox` ・・・ アドレスバーを拡張したい時に選択\n    * **Would you like to use permissions?**\n        * 使用するパーミッションを複数選択します\n    * **Would you like to install promo images for the Chrome Web Store?**\n        * Chromeストアで使う宣伝用画像を自動で生成するかを選択します\n\n\n※自分は下記のように答えました\n**What would you like to call this extension?** => github-contributions-paint\n**And how would you call it if you only had 12 characters (short_name)?** =>  github-paint\n**How would you like to describe this extension?** =>  You can paint github contributions!\n**Would you like to use UI Action?** => Browser\n**Would you like to override a chrome page?** =>  No\n**Would you like more UI Features?** =>  Content Scripts\n**Would you like to use permissions?** =>  Tabs\n**Would you like to install promo images for the Chrome Web Store?** =>  Yes\n\n* すると雛形が生成されます\n\n```:生成された雛形のフォルダ構成\ngithub-contributions-paint\n├── README.md\n├── app\n│   ├── images       　　　    　・・・Chromeウェブストア公開時に必要なアイコン格納フォルダ\n│   │   ├── icon-128.png\n│   │   ├── icon-16.png\n│   │   ├── icon-19.png\n│   │   └── icon-38.png\n│   ├── manifest.json          ・・・Chrome拡張の設定を定義するファイル\n│   ├── pages                  ・・・HTMLファイル格納フォルダ\n│   │   └── popup.html         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── scripts                ・・・TSファイル格納フォルダ\n│   │   ├── background.ts      ・・・バックグランド処理を記述するファイル\n│   │   └── popup.ts           ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── styles                 ・・・CSSファイル格納フォルダ\n│   │   └── popup.scss         ・・・Chrome拡張のアイコンをクリックした時に表示するポップアップ画面用資産\n│   ├── _locales\n│   │   └── en\n│   │       └── messages.json ・・・アプリの設定ファイル\n│   └── fonts\n├── promo                     ・・・Chromeウェブストア公開時に必要な宣伝用画像の格納フォルダ\n│   ├── Chrome-Webstore-Icon_128x128.png\n│   ├── Promo-Image-Large_920x680.png\n│   ├── Promo-Image-Marquee_1400x560.png\n│   ├── Promo-Image-Small_440x280.png\n│   ├── Screenshot_1280x800.png\n│   └── Screenshot_640x400.png\n├── dist\n├── gulpfile.babel.js\n├── node_modules\n├── package-lock.json\n├── package.json\n├── tasks\n├── tsconfig.json\n└── tslint.json\n\n```\n\n* 最後にTypeScriptをグローバルインストールしていない場合は、グローバルインストールまたはプロジェクトにインストールします\n\n```\n$ npm install typescript --save-dev\n```\n\n==2018/11/24 追記(ここから)==\n\n* このまま次手順にいくと警告がでるのでそれを防ぐためにgulpのバージョンを下げます。\n\n```\n$ npm install gulp@3.9.0 --save-dev\n```\n\n<small>※関連する[issue](https://github.com/gulpjs/gulp/issues/1631)、[stackoverflow](https://stackoverflow.com/questions/48568942/failed-to-load-external-module-babel-register-while-gulp)</small>\n\n==2018/11/24 追記(ここまで)==\n## 2. 作ったChrome Extensionを動かしてみる\n雛形を作成したら早速動かすことができます\n\n* ビルドコマンドを実行します\n\n```\n$ npm run dev:chrome\n```\n\n* Chromeで`chrome://extensions`を開いて`パッケージ化されていない拡張機能を読み込む`ボタンをクリック\n![手順_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5a549a45-8ec4-8955-b733-875549f8ad31.png)\n\n* プロジェクトルート/dist配下の`chrome`フォルダを選択\n![操作_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f91a166e-6e2e-3f37-710e-ee7520c93ec2.png)\n\n* するとプロジェクトが[Chrome Extension管理画面](chrome://extensions/)に追加されて、ブラウザ右上にアイコンが表示されます\n![動作確認1_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/61b2e113-e520-7ef8-c47e-426be93aa84b.png)\n\n\n* アイコンをクリックして動作検証ができます\n![動作確認_11.png](https://qiita-image-store.s3.amazonaws.com/0/49915/3ff11e73-81b3-cd5a-8e70-9a754a6a9965.png)\n\n\n## 3. 開発中にChrome Extensionの動作確認する\n雛形の動作検証ができたらTypeScriptファイルを編集して処理を追加していきます。\n`npm run dev:chrome`を実行した後、下記手順繰り返すことで、ソースコードを修正しながら随時動作検証ができます。\n\n* 資産（TypeScriptやHTML,CSS）を修正する（勝手にビルドが走ります）\n* 最新のビルド資産を取り込むため[Chrome Extension管理画面](chrome://extensions/)でリロードをクリックします\n![開発手順_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5f9651c6-737f-d6db-80bf-44a7166b2005.png)\n* Chrome Extensionの動作確認をする\n\n## 4. アイコンと宣伝用画像を作る\nアプリを公開する前に、アイコンと宣伝用画像を作成し、雛形生成時のデフォルト資産と差し替えます。\nデザイナーさんなら苦労しないでしょうが、自分はこれが一番大変でした。\n3つのアイコンと3つの宣伝用画像が必要です。\n\n### アイコン\n* 128x128\n    * 必須。インストール時やChromeウェブストアで表示する用\n* 48x48\n    * 拡張機能の管理ページで表示する用\n* 16x16\n    * ブラウザ右上に表示する用\n  \n### 宣伝用画像\n* 440x280\n    * 必須\n* 920x680\n    * 大きめの画像\n* 1400x560\n    * ChromeExtensionをChrome Storeで選択した時に表示される画像\n\n## 5. Chromeウェブストアに公開する\n* 雛形生成時バージョンが0.0.0になっており、バージョンが低すぎて公開できない状態なので、`manifest.json`と`package.json`のバージョン指定を0.0.1にあげます\n\n```json:manifest.json\n{\n  ・・・\n  \"version\": \"0.0.1\", <- 0.0.0から0.0.1にあげる\n  ・・・\n}\n```\n\n```json:package.json\n{\n  ・・・\n  \"version\": \"0.0.1\", <- 0.0.0から0.0.1にあげる\n  ・・・\n}\n```\n\n* 下記コマンドで公開用のzipファイルを作成します\n\n```\n$ npm run build:chrome\n```\n\n* [Chromeウェブストア](https://chrome.google.com/webstore/category/extensions)のデベロッパーダッシュボードを開きます。Chromeアカウントでログインします\n![アプリ登録_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/edb48ac9-0181-1d78-c7ad-a082712af01c.png)\n\n* ダッシュボードで`新しいアイテムを追加する`を選択します\n![アプリ登録_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/787a3a25-2e93-6186-17ed-6b19bbb3bab5.png)\n\n* `ファイルを追加`で作成したzipファイル(プロジェクトルート/packages配下にあります)を選択後、`アップロード`を選択します\n![アプリ登録_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/223b4624-d892-3eb8-5ea8-73c4aaf2b5b8.png)\n\n* 説明、アイコン、宣伝用画像、カテゴリを入力して`変更を公開`をクリックします\n![登録_5.png](https://qiita-image-store.s3.amazonaws.com/0/49915/724f0355-fe7b-7918-2d75-09c33cce5e00.png)\n\n* これで公開作業は完了です。しばらくするとChromeウェブストアに公開されます\n\n\n## 最後に\n今回は[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使って、TypeScriptでChrome Extensionを作成、公開する手順をまとめました。\n最初はTypeScriptでChrome Extensionを作るのは、ビルドの設定など色々めんどくさそうだぁと思っていましたが、\n[generator-chrome-extension-kickstart-typescript](https://github.com/mazamachi/generator-chrome-extension-kickstart-typescript)を使うことで、簡単に作成から公開まで実現できました。\nブラウザでのちょっとした作業を効率化するのにChrome Extentionは非常に強力なツールなので、今後なにかアイディアがあればまた作ってみたいと思います。\n\n","comments_count":5,"created_at":"2017-12-20T02:36:27+09:00","likes_count":48,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/e0ec0869-f368-5083-bdc2-cdba9d59427a/","title":"フロントエンド初心者がMEANスタック(MongoDB+Express+Angular+Node.js)でアプリを作ってみて躓いたこと","date":"2017-12-12T03:19:11+09:00","excerpt":"FUJITSU Advent Calendar 2017 12日目の記事です。リッチでイマドキなデザインのアプリが作りたくて、ここ４ヶ月ほどMEANスタック(MongoDB+Express+Angular+Node.js)でブログアプリを作...","tags":["JavaScript","Node.js","Express","mongoose","Angular","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"e0ec0869-f368-5083-bdc2-cdba9d59427a","title":"フロントエンド初心者がMEANスタック(MongoDB+Express+Angular+Node.js)でアプリを作ってみて躓いたこと","rendered_body":"<p><a href=\"https://qiita.com/advent-calendar/2017/fujitsu\">FUJITSU Advent Calendar 2017</a> 12日目の記事です。</p>\n\n<p>リッチでイマドキなデザインのアプリが作りたくて、<br>\nここ４ヶ月ほど<strong>MEAN</strong>スタック(<strong>M</strong>ongoDB+<strong>E</strong>xpress+<strong>A</strong>ngular+<strong>N</strong>ode.js)でブログアプリを作っています。<br>\n知識ゼロからのスタートでしたが、多くの方々がブログやStackOverFlowに情報を載せてくれているので、躓きながらもなんとかアプリ開発を進めることができました。</p>\n\n<p>この記事では、フロントエンド初心者の自分がMEANスタックでアプリを作る時に躓いたことや、こういう機能を実現するにはどうすればいいか?などをまとめています。<br>\nこれからをAngularを学ぼうとしている方、ExpressやMongoDBなどサーバーサイドJavaScriptを学ぼうとしている方の参考になればうれしいです。</p>\n\n<h2>\n<span id=\"アプリの紹介\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E7%B4%B9%E4%BB%8B\"><i class=\"fa fa-link\"></i></a>アプリの紹介</h2>\n\n<p>本線から脱線しますが、イントラでの使用を想定したQiitaのようなブログアプリです。デモ環境もあるのでよければ触ってみてください(モバイルには未対応ですが。。。)</p>\n\n<ul>\n<li><a href=\"https://github.com/Takumon/mean-blog\" rel=\"nofollow noopener\" target=\"_blank\">Github</a></li>\n<li><a href=\"https://hub.docker.com/r/takumon/mean-blog_auto/\" rel=\"nofollow noopener\" target=\"_blank\">Dockerhub</a></li>\n<li>\n<a href=\"https://material-blog-demo.herokuapp.com/\" rel=\"nofollow noopener\" target=\"_blank\">デモ環境</a> (ユーザID/パスは DemoUser / DemoUser1234# です)</li>\n</ul>\n\n<p>アプリキャプチャ その１ (記事詳細)<br>\n<a href=\"https://camo.qiitausercontent.com/4d64d8bd315bcf330d1ac6de1cfe8bb53f280992/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62383133333331372d666163322d626239622d386632642d3133646238393662656366352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/4d64d8bd315bcf330d1ac6de1cfe8bb53f280992/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62383133333331372d666163322d626239622d386632642d3133646238393662656366352e706e67\" alt=\"appdemo_detail.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/b8133317-fac2-bb9b-8f2d-13db896becf5.png\"></a></p>\n\n<p>アプリキャプチャ その２ (記事一覧)<br>\n<a href=\"https://camo.qiitausercontent.com/96927cda50e8df84b0c5415e996246c6d720b607/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39353064313036322d316261342d363366362d666535332d6366653664343634333061342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/96927cda50e8df84b0c5415e996246c6d720b607/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39353064313036322d316261342d363366362d666535332d6366653664343634333061342e706e67\" alt=\"アプリ_スクリーンキャプチャ_記事一覧.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/950d1062-1ba4-63f6-fe53-cfe6d46430a4.png\"></a></p>\n\n<p>アプリキャプチャ その３ (プロフィール)<br>\n<a href=\"https://camo.qiitausercontent.com/46aab6c2add74ca826b1dbe730d1a82eb481e295/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33323563373934382d636531362d396330382d306236362d6433383932653034366165642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/46aab6c2add74ca826b1dbe730d1a82eb481e295/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33323563373934382d636531362d396330382d306236362d6433383932653034366165642e706e67\" alt=\"アプリ_スクリーンキャプチャ_ ユーザ画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/325c7948-ce16-9c08-0b66-d3892e046aed.png\"></a></p>\n\n<h1>\n<span id=\"1-フロント側angularまわり\" class=\"fragment\"></span><a href=\"#1-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4angular%E3%81%BE%E3%82%8F%E3%82%8A\"><i class=\"fa fa-link\"></i></a>1. フロント側Angularまわり</h1>\n\n<h2>\n<span id=\"angularについて調べる時に古い情報を除外したい\" class=\"fragment\"></span><a href=\"#angular%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E8%AA%BF%E3%81%B9%E3%82%8B%E6%99%82%E3%81%AB%E5%8F%A4%E3%81%84%E6%83%85%E5%A0%B1%E3%82%92%E9%99%A4%E5%A4%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Angularについて調べる時に古い情報を除外したい</h2>\n\n<p>1系は<code>AngularJS</code>、2系以降は<code>Angular</code>と呼ばれており、1系と2系以降では大きく仕様が異なります。<br>\nそのため検索する時は<code>Angualr2</code>などバージョンを指定したり、1系を除外するため<code>--AngularJS</code>をつけたりすると検索しやすいです。</p>\n\n<h2>\n<span id=\"htmlのdom要素を別のdom要素またはcomponentから扱いたい\" class=\"fragment\"></span><a href=\"#html%E3%81%AEdom%E8%A6%81%E7%B4%A0%E3%82%92%E5%88%A5%E3%81%AEdom%E8%A6%81%E7%B4%A0%E3%81%BE%E3%81%9F%E3%81%AFcomponent%E3%81%8B%E3%82%89%E6%89%B1%E3%81%84%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>HTMLのDOM要素を、別のDOM要素またはComponentから扱いたい</h2>\n\n<p>要素に<code>#xxxxx</code>のように<code>#</code>始まりの名前をつけると、別のDOM要素から参照できます</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;input</span> <span class=\"err\">#</span><span class=\"na\">phone</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"電話番号\"</span><span class=\"nt\">/&gt;</span>\n<span class=\"c\">&lt;!--  他のDOM要素からphonという変数名でDOM要素を参照できるようになる --&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"nt\">&gt;</span>(click)=\"callPhone(phone.value)\"&gt;\n</pre></div>\n</div>\n\n<p>Componentから参照する場合は<code>@ViewChild</code>を使います</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">Component</span></div>\n<div class=\"highlight\"><pre>  <span class=\"c1\">// ViewChildの引数に名前を文字列で指定します</span>\n  <span class=\"p\">@</span><span class=\"nd\">ViewChild</span><span class=\"p\">(</span><span class=\"s1\">'phone'</span><span class=\"p\">)</span> <span class=\"nx\">phoneElement</span><span class=\"p\">:</span> <span class=\"nx\">phoneElement</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">showPhoneValue</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">phoneElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://angular.io/guide/template-syntax#ref-vars\" rel=\"nofollow noopener\" target=\"_blank\">Angular公式サイト</a></li>\n<li><a href=\"https://stackoverflow.com/questions/32693061/how-can-i-select-an-element-in-a-component-template\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"routing時の認証を非同期で行いたい\" class=\"fragment\"></span><a href=\"#routing%E6%99%82%E3%81%AE%E8%AA%8D%E8%A8%BC%E3%82%92%E9%9D%9E%E5%90%8C%E6%9C%9F%E3%81%A7%E8%A1%8C%E3%81%84%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Routing時の認証を非同期で行いたい</h2>\n\n<p>URLごとの認証は<code>CanActivate</code>インターフェースを実装すればできますが、<br>\nサーバから認証情報を取得して非同期で認証したい場合もあると思います。<br>\nそのような時は、<strong><code>CanActivate#canActivate</code>で</strong>booleanの代わりに<strong>Observableを戻り値に指定する</strong>ことで実現できます。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">SampleAuthGuard</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Router</span><span class=\"p\">,</span> <span class=\"nx\">CanActivate</span><span class=\"p\">,</span> <span class=\"nx\">ActivatedRouteSnapshot</span><span class=\"p\">,</span> <span class=\"nx\">RouterStateSnapshot</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/router'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AuthenticationService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./authentication.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SampleAuthGuard</span> <span class=\"kr\">implements</span> <span class=\"nx\">CanActivate</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span>\n    <span class=\"kr\">private</span> <span class=\"nx\">auth</span><span class=\"p\">:</span> <span class=\"nx\">AuthenticationService</span><span class=\"p\">,</span>\n  <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n  <span class=\"c1\">// booleanではなくObservable&lt;boolean&gt;を戻り値で返す</span>\n  <span class=\"nx\">canActivate</span><span class=\"p\">(</span><span class=\"nx\">route</span><span class=\"p\">:</span> <span class=\"nx\">ActivatedRouteSnapshot</span><span class=\"p\">,</span> <span class=\"nx\">state</span><span class=\"p\">:</span> <span class=\"nx\">RouterStateSnapshot</span><span class=\"p\">):</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"kr\">boolean</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">auth</span><span class=\"p\">.</span><span class=\"nx\">checkState</span><span class=\"p\">()</span>\n      <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">err</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">of</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">))</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/38425461/angular2-canactivate-calling-async-function\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"formarrayの値を初期化したい\" class=\"fragment\"></span><a href=\"#formarray%E3%81%AE%E5%80%A4%E3%82%92%E5%88%9D%E6%9C%9F%E5%8C%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>FormArrayの値を初期化したい</h2>\n\n<p>FormControlはpatchValueで初期値を設定できますが、<br>\nFormArrayの場合patchValueで配列の値を設定しようとしても設定できません。<br>\nこういう場合は、<strong>配列1つ１つの値をもとにFormControlを生成してFormArrayにpush</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">ダメな例</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Form生成</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">group</span><span class=\"p\">({</span>\n    <span class=\"na\">schoolName</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">([])</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// Formに初期値を設定</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">pathValue</span><span class=\"p\">({</span>\n    <span class=\"na\">schooleName</span><span class=\"p\">:</span> <span class=\"s1\">'SampleSchoolName'</span> <span class=\"c1\">// FormControlの値の初期化はpatchValueで可能</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'taro'</span><span class=\"p\">,</span> <span class=\"s1\">'jiro'</span><span class=\"p\">,</span> <span class=\"s1\">'saburo'</span><span class=\"p\">];</span> <span class=\"c1\">// FormArrayに要素を追加する場合patchValueでは不可能</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">良い例</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">ngOnInit</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Formを生成</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">group</span><span class=\"p\">({</span>\n    <span class=\"na\">schoolName</span><span class=\"p\">:</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n    <span class=\"na\">students</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">formBuilder</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">([])</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// Formに初期値を設定</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">pathValue</span><span class=\"p\">({</span>\n    <span class=\"na\">schooleName</span><span class=\"p\">:</span> <span class=\"s1\">'SampleSchoolName'</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"c1\">// データからFormControlを生成し１件１件FormArrayにpushする</span>\n  <span class=\"p\">[</span><span class=\"s1\">'taro'</span><span class=\"p\">,</span> <span class=\"s1\">'jiro'</span><span class=\"p\">,</span> <span class=\"s1\">'saburo'</span><span class=\"p\">].</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"nx\">student</span> <span class=\"o\">-&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">controls</span><span class=\"p\">[</span><span class=\"s1\">'students'</span><span class=\"p\">].</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">FormControll</span><span class=\"p\">(</span><span class=\"nx\">student</span><span class=\"p\">));</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/40916084/angular2-patchvalue-push-value-into-array\" rel=\"nofollow noopener\" target=\"_blank\">StackOvereFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"error-error-no-provider-for-templaterefというエラー\" class=\"fragment\"></span><a href=\"#error-error-no-provider-for-templateref%E3%81%A8%E3%81%84%E3%81%86%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>「ERROR Error: No provider for TemplateRef!」というエラー</h2>\n\n<p>最初このエラーが出た時は、何が原因なのかわからずに困りました。。。<br>\n大抵の場合は、<strong><code>*ngIf</code>や<code>*ngForm</code>の<code>*</code>が抜けてることが原因</strong>です(要するにただのタイポです。。。)<br>\n<code>*</code>が抜けると、Angularは<code>ngIf</code>をディレクティブとして解釈しようとしますが、<br>\nそんなディレクティブは存在しないので<code>No provider for TemplateRef!</code>と言われてしまうそうです。</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/35932074/angular2-no-provider-for-templateref-ngif-templateref\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"textareaにおいてtabキーでインデントしたい\" class=\"fragment\"></span><a href=\"#textarea%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6tab%E3%82%AD%E3%83%BC%E3%81%A7%E3%82%A4%E3%83%B3%E3%83%87%E3%83%B3%E3%83%88%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>textareaにおいてTabキーでインデントしたい</h2>\n\n<p>文書を入力するようなテキストエリアの場合に、Tabキーでのインデントしたい場合は、<br>\nkyedownイベント発生時にテキストエリアの値とキャレットの位置を操作することで実現可能です。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;textarea</span> <span class=\"err\">#</span><span class=\"na\">sampletextarea</span>\n  <span class=\"err\">(</span><span class=\"na\">keydown</span><span class=\"err\">)=\"</span><span class=\"na\">indent</span><span class=\"err\">($</span><span class=\"na\">event</span><span class=\"err\">,</span> <span class=\"na\">sampletextarea</span><span class=\"err\">)\"</span> <span class=\"nt\">&gt;&lt;/textarea&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">Component</span></div>\n<div class=\"highlight\"><pre>  <span class=\"nx\">indent</span><span class=\"p\">(</span><span class=\"nx\">$event</span><span class=\"p\">,</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Tabキー押下時</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">$event</span><span class=\"p\">.</span><span class=\"nx\">keyCode</span> <span class=\"o\">===</span> <span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 次の要素にフォーカスが移らないようにする</span>\n      <span class=\"nx\">$event</span><span class=\"p\">.</span><span class=\"nx\">preventDefault</span><span class=\"p\">();</span>\n\n      <span class=\"c1\">// 現在のキャレット位置を取得</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">caretStart</span> <span class=\"o\">=</span> <span class=\"nx\">textareaElement</span><span class=\"p\">.</span><span class=\"nx\">selectionStart</span><span class=\"p\">;</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">caretEnd</span> <span class=\"o\">=</span> <span class=\"nx\">textareaElement</span><span class=\"p\">.</span><span class=\"nx\">selectionEnd</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// テキストエリアの値を取得し、キャレット位置にTabを挿入</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">TAB</span> <span class=\"o\">=</span> <span class=\"s1\">'¥t'</span><span class=\"p\">;</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">caretStart</span><span class=\"p\">)</span>\n                     <span class=\"o\">+</span> <span class=\"nx\">TAB</span> <span class=\"o\">+</span> <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"nx\">caretStart</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// キャレット位置をTab分ずらす</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">focus</span><span class=\"p\">();</span>\n      <span class=\"nx\">sampleTextAreaElement</span><span class=\"p\">.</span><span class=\"nx\">setSelectionRange</span><span class=\"p\">(</span><span class=\"nx\">caretStart</span> <span class=\"o\">+</span> <span class=\"nx\">TAB</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">,</span> <span class=\"nx\">caretEnd</span> <span class=\"o\">+</span> <span class=\"nx\">TAB</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">);</span>\n\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h2>\n<span id=\"markdownプレビューを表示したいソースコードはシンタックスハイライトさせたい\" class=\"fragment\"></span><a href=\"#markdown%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%97%E3%81%9F%E3%81%84%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AF%E3%82%B7%E3%83%B3%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B9%E3%83%8F%E3%82%A4%E3%83%A9%E3%82%A4%E3%83%88%E3%81%95%E3%81%9B%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>Markdownプレビューを表示したい、ソースコードはシンタックスハイライトさせたい</h2>\n\n<p><a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">marked</a>と<a href=\"https://github.com/isagalaev/highlight.js\" rel=\"nofollow noopener\" target=\"_blank\">highlight.js</a>を組み合わせて使います。<br>\n<a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">marked</a>のReadmeを見ればなんとなくわかりますが、Angularの仕組みに乗せる必要があるのでPipeやらServiceやらを作ります。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">markdown-parse.service.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">marked</span> <span class=\"k\">from</span> <span class=\"s1\">'marked'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">hljs</span> <span class=\"k\">from</span> <span class=\"s1\">'highlight.js'</span><span class=\"p\">;</span>\n\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MarkdownParseService</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">marked</span><span class=\"p\">.</span><span class=\"nx\">setOptions</span><span class=\"p\">({</span>\n      <span class=\"na\">highlight</span><span class=\"p\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">hljs</span><span class=\"p\">.</span><span class=\"nx\">highlightAuto</span><span class=\"p\">(</span><span class=\"nx\">code</span><span class=\"p\">).</span><span class=\"nx\">value</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"na\">rawText</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">marked</span><span class=\"p\">(</span><span class=\"nx\">rawText</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">markdown.pipe.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"nx\">marked</span> <span class=\"k\">from</span> <span class=\"s1\">'marked'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MarkdownParseService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./markdown-parse.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span> <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'toMarkdown'</span> <span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MarkdownParsePipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">markdownParseService</span><span class=\"p\">:</span> <span class=\"nx\">MarkdownParseService</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">any</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">markdownParseService</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>HTMLで下記のように指定します。<code>{{}}</code>だとサニタイズされてしまうので<code>innerHTML</code>属性を指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;div</span> <span class=\"err\">[</span><span class=\"na\">innerHTML</span><span class=\"err\">]=\"</span><span class=\"na\">md</span> <span class=\"err\">|</span> <span class=\"na\">toMarkdown</span><span class=\"err\">\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://qiita.com/daikiojm/items/e02e2aeb0231b3620a0b\" id=\"reference-9001a931765f8f52acaf\">Qiita AngularでMarkdownをHTMLとして表示するカスタムpipeを作成する</a></li>\n<li>Github <a href=\"https://github.com/chjj/marked\" rel=\"nofollow noopener\" target=\"_blank\">chjj/marked</a>\n</li>\n</ul>\n\n<h2>\n<span id=\"絞り込み条件付きリストにおいてリストの要素が変更追加削除された時に絞り込み結果をリフレッシュしたい\" class=\"fragment\"></span><a href=\"#%E7%B5%9E%E3%82%8A%E8%BE%BC%E3%81%BF%E6%9D%A1%E4%BB%B6%E4%BB%98%E3%81%8D%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AB%E3%81%8A%E3%81%84%E3%81%A6%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E8%A6%81%E7%B4%A0%E3%81%8C%E5%A4%89%E6%9B%B4%E8%BF%BD%E5%8A%A0%E5%89%8A%E9%99%A4%E3%81%95%E3%82%8C%E3%81%9F%E6%99%82%E3%81%AB%E7%B5%9E%E3%82%8A%E8%BE%BC%E3%81%BF%E7%B5%90%E6%9E%9C%E3%82%92%E3%83%AA%E3%83%95%E3%83%AC%E3%83%83%E3%82%B7%E3%83%A5%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>絞り込み条件付きリストにおいて、リストの要素が変更、追加、削除された時に絞り込み結果をリフレッシュしたい</h2>\n\n<p>リストの絞り込みはPipeで実現しますが、通常Pipeはリストの要素が変更されても再び絞り込みが実施されることはありません。<br>\nこのような場合はPipeアノテーションにて<strong>pureオプションをfalseに設定</strong>ましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"err\">#</span><span class=\"na\">searchUserName</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n  <span class=\"nt\">&lt;li</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let user of (userList | searchUserFilter: searchUserName.value);\"</span> <span class=\"nt\">&gt;</span>{{user.name}}<span class=\"nt\">&lt;/li&gt;</span>\n<span class=\"nt\">&lt;ul&gt;</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">search-user.pipe.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">User</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./user'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Pipe</span><span class=\"p\">({</span>\n  <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"s1\">'searchUserFilter'</span><span class=\"p\">,</span>\n  <span class=\"na\">pure</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"c1\">// pureをfalseにすることでユーザが変更、追加、削除された時にリフレッシュできる</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SearchFilterPipe</span> <span class=\"kr\">implements</span> <span class=\"nx\">PipeTransform</span> <span class=\"p\">{</span>\n  <span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">items</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">User</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">searchUserName</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">any</span><span class=\"p\">[]</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">searchUserName</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">items</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">searchUserName</span> <span class=\"o\">=</span> <span class=\"nx\">searchUserName</span><span class=\"p\">.</span><span class=\"nx\">toLowerCase</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"nx\">items</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span> <span class=\"nx\">item</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">item</span><span class=\"p\">.</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">userId</span><span class=\"p\">.</span><span class=\"nx\">toLowerCase</span><span class=\"p\">().</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"nx\">searchUserName</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://angular.io/guide/pipes#pure-and-impure-pipes\" rel=\"nofollow noopener\" target=\"_blank\">Angular公式サイト</a></li>\n</ul>\n\n<h2>\n<span id=\"グローバル定数を定義したい\" class=\"fragment\"></span><a href=\"#%E3%82%B0%E3%83%AD%E3%83%BC%E3%83%90%E3%83%AB%E5%AE%9A%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>グローバル定数を定義したい</h2>\n\n<p>いろんなクラスで使う定数を共通化する時は、単純に<strong>クラスを作ってstaticなメンバとして定数を定義</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">app-settings.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppSettings</span> <span class=\"p\">{</span>\n   <span class=\"kr\">public</span> <span class=\"kr\">static</span> <span class=\"nx\">API_ENDPOINT</span><span class=\"o\">=</span><span class=\"s1\">'http://127.0.0.1:6666/api/'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">SampleService</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">Injectable</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'angular2/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">AppSettings</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app-settings'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">SampleService</span> <span class=\"p\">{</span>\n    <span class=\"nx\">sampleMethod</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">AppSettings</span><span class=\"p\">.</span><span class=\"nx\">API_ENDPOINT</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p><strong>参考</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/34986922/define-global-constants-in-angular-2\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"画像が多い画面の初期表示を早くしたい\" class=\"fragment\"></span><a href=\"#%E7%94%BB%E5%83%8F%E3%81%8C%E5%A4%9A%E3%81%84%E7%94%BB%E9%9D%A2%E3%81%AE%E5%88%9D%E6%9C%9F%E8%A1%A8%E7%A4%BA%E3%82%92%E6%97%A9%E3%81%8F%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>画像が多い画面の初期表示を早くしたい</h2>\n\n<p><a href=\"https://github.com/tjoskar/ng-lazyload-image\" rel=\"nofollow noopener\" target=\"_blank\">ng-lazyload-image</a>を使えば画像の遅延ロードを実現できます。<br>\n使い方もとても簡単でimgタグにディレクティブを指定するだけです。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">HTML</span></div>\n<div class=\"highlight\"><pre> <span class=\"nt\">&lt;img</span>\n  <span class=\"err\">[</span><span class=\"na\">defaultImage</span><span class=\"err\">]=\"</span><span class=\"na\">https:</span><span class=\"err\">//</span><span class=\"na\">images</span><span class=\"err\">.</span><span class=\"na\">sample</span><span class=\"err\">.</span><span class=\"na\">com</span><span class=\"err\">/</span><span class=\"na\">photo</span><span class=\"err\">/</span><span class=\"na\">defaultimage</span><span class=\"err\">\"</span> \n  <span class=\"err\">[</span><span class=\"na\">lazyLoad</span><span class=\"err\">]=\"</span><span class=\"na\">https:</span><span class=\"err\">//</span><span class=\"na\">images</span><span class=\"err\">.</span><span class=\"na\">sample</span><span class=\"err\">.</span><span class=\"na\">com</span><span class=\"err\">/</span><span class=\"na\">photo</span><span class=\"err\">/</span><span class=\"na\">sampleimage</span><span class=\"err\">\"</span>\n  <span class=\"err\">[</span><span class=\"na\">offset</span><span class=\"err\">]=\"</span><span class=\"na\">30</span><span class=\"err\">\"</span>\n <span class=\"nt\">&gt;</span>\n</pre></div>\n</div>\n\n<p><em>defaultImage</em><br>\n　即時ロードされる画像のURL、遅延ロードする画像を読み込む間、表示される<br>\n<em>lazyLoad</em><br>\n　遅延ロードする画像のURL<br>\n<em>offset</em><br>\n　スクロールが発生する場合に画面下部の何ピクセル下に来た時にロードを開始するか<br>\n<em>errorImage</em><br>\n　遅延ロード失敗時に表示する画像URL</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/tjoskar/ng-lazyload-image\" rel=\"nofollow noopener\" target=\"_blank\">ng-lazyload-image</a></li>\n</ul>\n\n<h2>\n<span id=\"angular-cliのng-serveコマンドでdistフォルダを一旦削除したくない\" class=\"fragment\"></span><a href=\"#angular-cli%E3%81%AEng-serve%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7dist%E3%83%95%E3%82%A9%E3%83%AB%E3%83%80%E3%82%92%E4%B8%80%E6%97%A6%E5%89%8A%E9%99%A4%E3%81%97%E3%81%9F%E3%81%8F%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>Angular Cliの<code>ng serve</code>コマンドでdistフォルダを一旦削除したくない</h2>\n\n<p><code>ng serve</code>コマンドは<code>dist</code>フォルダを削除してからtsファイルをトランスコンパイルします。<br>\nそれを防ぐためには、<strong>delete-output-pathオプションをfalse</strong>に指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json　ビルドスクリプト</span></div>\n<div class=\"highlight\"><pre><span class=\"s2\">\"script\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"cp ./resource/* dist &amp;&amp; ng serve --delete-output-path=false\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/angular/angular-cli/issues/4366\" rel=\"nofollow noopener\" target=\"_blank\">angular-cli github issue #4366</a></li>\n</ul>\n\n<h2>\n<span id=\"aotコンパイルが遅いのでなんとかしたい\" class=\"fragment\"></span><a href=\"#aot%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%8C%E9%81%85%E3%81%84%E3%81%AE%E3%81%A7%E3%81%AA%E3%82%93%E3%81%A8%E3%81%8B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>AOTコンパイルが遅いのでなんとかしたい</h2>\n\n<p>なんとかできませんでした。。。(もしかしたら方法があるのかもしれません。誰か教えてください!!!)<br>\nAOTコンパイルはJITコンパイルが検出してくれないHTMLのエラーを警告してくれますが、その反面遅いです。特に<a href=\"https://material.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular Material</a>を使う場合は顕著です。<br>\nそのため、自分の場合は基本的にJITビルドを使い、issueのプルリクをする前など区切りのいいタイミングでAOTビルドしてエラーがないか確認するというように使い分けてました。</p>\n\n<h1>\n<span id=\"2-フロント側angularでのテスト周り\" class=\"fragment\"></span><a href=\"#2-%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E5%81%B4angular%E3%81%A7%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A\"><i class=\"fa fa-link\"></i></a>2. フロント側Angularでのテスト周り</h1>\n\n<h2>\n<span id=\"ci環境などでテストが終わらずにタイムアウトしてしまう\" class=\"fragment\"></span><a href=\"#ci%E7%92%B0%E5%A2%83%E3%81%AA%E3%81%A9%E3%81%A7%E3%83%86%E3%82%B9%E3%83%88%E3%81%8C%E7%B5%82%E3%82%8F%E3%82%89%E3%81%9A%E3%81%AB%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88%E3%81%97%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86\"><i class=\"fa fa-link\"></i></a>CI環境などでテストが終わらずにタイムアウトしてしまう</h2>\n\n<p>CirleCiなどでテストを実行する場合<code>ng test</code>コマンドだとプロセスが終了しないためタイムアウトで失敗してしまいます。<br>\nこのような場合は<strong>watchオプションをfalseに設定</strong>します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ng test --wtach=false\n</pre></div></div>\n\n<p><strong>参考サイト</strong><br>\n<a href=\"https://github.com/angular/angular-cli/issues/362\" rel=\"nofollow noopener\" target=\"_blank\">Github isssue</a></p>\n\n<h2>\n<span id=\"テスト時にerror-timeout---async-callback-was-not-invoked-within-timeout-specified-by-jasminedefault_timeout_intervalやfailed-to-execute-send-on-xmlhttprequestのエラー\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E6%99%82%E3%81%ABerror-timeout---async-callback-was-not-invoked-within-timeout-specified-by-jasminedefault_timeout_interval%E3%82%84failed-to-execute-send-on-xmlhttprequest%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>テスト時に「Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.」や「Failed to execute 'send' on 'XMLHttpRequest'」のエラー</h2>\n\n<p>このような場合は、一時的に<code>ng test</code>コマンドのオプションに<strong><code>-sm=false</code>を追加</strong>してテストし直すと根本原因エラーメッセージで出力されるようになります。<br>\n大抵の場合は自作したモッククラスに必要なメソッドがないことが原因です。</p>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/45399079/angular-tests-failing-with-failed-to-execute-send-on-xmlhttprequest\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト用に子コンポーネントをモック化したい\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%94%A8%E3%81%AB%E5%AD%90%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E3%83%A2%E3%83%83%E3%82%AF%E5%8C%96%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト用に子コンポーネントをモック化したい</h2>\n\n<p>意外と簡単で、TestBed#configureTestingModuleで<br>\ndeclarationsに自作したモックの子コンポーネントを追加するだけです。<br>\ninput,outputがあれば必要に応じてメンバ定義します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\"><div class=\"highlight\"><pre><span class=\"c1\">// ※import文は省略</span>\n\n<span class=\"c1\">// モックの子コンポーネントを定義</span>\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-child'</span><span class=\"p\">,</span> <span class=\"c1\">// 子コンポーネントと同じものを定義</span>\n  <span class=\"na\">template</span><span class=\"p\">:</span> <span class=\"s1\">'&lt;p&gt;Mock Child Component&lt;/p&gt;'</span>\n<span class=\"p\">})</span>\n<span class=\"kd\">class</span> <span class=\"nx\">MockClildComponent</span> <span class=\"p\">{</span>\n  <span class=\"p\">@</span><span class=\"nd\">Input</span><span class=\"p\">()</span> <span class=\"nx\">childInput</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n  <span class=\"p\">@</span><span class=\"nd\">Output</span><span class=\"p\">()</span> <span class=\"nx\">childOutput</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">EventEmitter</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// ...</span>\n\n<span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n    <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"c1\">// テスト時のdeclarationsにモックの定義を追加</span>\n      <span class=\"nx\">MockProductSettingsComponent</span><span class=\"p\">,</span>\n      <span class=\"c1\">// ...</span>\n    <span class=\"p\">],</span>\n    <span class=\"c1\">// ...</span>\n  <span class=\"p\">});</span>\n  <span class=\"c1\">// ...</span>\n<span class=\"p\">});</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/41240163/mocking-child-components-angular-2\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト結果にangular-materilaのスタイルが反映されない\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%B5%90%E6%9E%9C%E3%81%ABangular-materila%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%8C%E5%8F%8D%E6%98%A0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト結果にAngular Materilaのスタイルが反映されない</h2>\n\n<p>UIフレームワークで<a href=\"https://material.angular.io/\" rel=\"nofollow noopener\" target=\"_blank\">Angular Material</a>を使っている場合、<br>\n<code>karma.config.js</code>でAngular Materilaのcssを直接読み込んであげる必要あります。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">karma.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"err\">・・・</span>\n      <span class=\"c1\">// Angular Materialのスタイルをテスト開始時に読み込んでおく</span>\n      <span class=\"p\">{</span><span class=\"nl\">pattern</span><span class=\"p\">:</span> <span class=\"s1\">'./node_modules/@angular/material/prebuilt-themes/indigo-pink.css'</span><span class=\"p\">,</span> <span class=\"nx\">included</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">watched</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">},</span>\n<span class=\"p\">],</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/angular/material2/issues/4056\" rel=\"nofollow noopener\" target=\"_blank\">stackoverflow</a></li>\n</ul>\n\n<h2>\n<span id=\"テスト結果にstylesscssアプリ共通のスタイル定義のスタイルが反映されない\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%B5%90%E6%9E%9C%E3%81%ABstylesscss%E3%82%A2%E3%83%97%E3%83%AA%E5%85%B1%E9%80%9A%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E5%AE%9A%E7%BE%A9%E3%81%AE%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%8C%E5%8F%8D%E6%98%A0%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>テスト結果にstyles.scss(アプリ共通のスタイル定義)のスタイルが反映されない</h2>\n\n<p>アプリ共通スタイルをSASS形式にしている場合<br>\n開発用ライブライに<code>karma-scss-preprocessor</code>と<code>node-sass</code>を追加して<code>karma.conf.js</code>を下記のように設定します。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">karma.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">plugins</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"err\">・・・</span>\n<span class=\"err\">　</span> <span class=\"c1\">// プラグインに`karma-scss-preprocessor`を追加</span>\n  <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'karma-scss-preprocessor'</span><span class=\"p\">)</span>\n<span class=\"p\">],</span>\n\n\n<span class=\"nx\">files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n  <span class=\"err\">・・・</span>\n  <span class=\"c1\">// filesにアプリ共通スタイルを追加</span>\n  <span class=\"p\">{</span> <span class=\"nl\">pattern</span><span class=\"p\">:</span> <span class=\"s1\">'./src/styles.scss'</span><span class=\"p\">,</span> <span class=\"nx\">watched</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>  <span class=\"nx\">included</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">served</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>\n<span class=\"p\">],</span>\n\n<span class=\"c1\">// preprocessorsを追加</span>\n<span class=\"nx\">preprocessors</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n <span class=\"s1\">'./src/test.ts'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'@angular/cli'</span><span class=\"p\">],</span>\n <span class=\"s1\">'./src/styles.scss'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'scss'</span><span class=\"p\">]</span>\n<span class=\"p\">},</span>\n</pre></div>\n</div>\n\n<p><strong>参考サイト</strong>:</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/44460733/how-to-configure-karma-to-include-global-scss-files-for-an-angular-cli-project/44498689#44498689\" rel=\"nofollow noopener\" target=\"_blank\">stackOverFlow</a></li>\n<li><a href=\"https://github.com/karma-runner/karma/issues/2700\" rel=\"nofollow noopener\" target=\"_blank\">Github karma/issue/2700</a></li>\n</ul>\n\n<h1>\n<span id=\"3-バックエンド側-expressmongodb周り\" class=\"fragment\"></span><a href=\"#3-%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89%E5%81%B4-expressmongodb%E5%91%A8%E3%82%8A\"><i class=\"fa fa-link\"></i></a>3. バックエンド側 Express、MongoDB周り</h1>\n\n<p>※MongDBをNode.jsで扱う場合は<a href=\"https://github.com/Automattic/mongoose\" rel=\"nofollow noopener\" target=\"_blank\">mongoose</a>という便利なライブラリがあるのでそれを使う前提のお話です。</p>\n\n<h2>\n<span id=\"mongooseのvirtualメソッドを使う\" class=\"fragment\"></span><a href=\"#mongoose%E3%81%AEvirtual%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>mongooseのvirtualメソッドを使う</h2>\n\n<p>例えば<code>記事</code>,<code>コメント</code>,<code>リプライ</code>などのモデルを定義する場合、<br>\n３つのモデルのライフサイクルは、記事追加 =&gt; 記事に対するコメント追加 =&gt; コメントに対するリプライ追加　のようになります。<br>\nこのような場合は、コメントが記事の参照を持ち、リプライがコメントの参照を持つモデル構造が望ましいです。コメントやリプライ追加時に１つのモデルの更新だけですむからです。<br>\n<a href=\"https://camo.qiitausercontent.com/129a84bd908d87c7fcbda29704ad50ac10529129/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393361633065362d333137652d316364662d626662612d3133353331653234353562612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/129a84bd908d87c7fcbda29704ad50ac10529129/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66393361633065362d333137652d316364662d626662612d3133353331653234353562612e706e67\" alt=\"db構造_良.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f93ac0e6-317e-1cdf-bfba-13531e2455ba.png\"></a></p>\n\n<p>ただ記事の検索は少し工夫が必要で、<strong>mongooseのvirtualを使います</strong>。これによって記事からコメントへの参照、コメントからリプライへの参照を擬似的に定義できるため、<br>\n検索時に擬似要素をpopulateするだけで、記事に紐付くコメントとリプライを取得できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/bd8d4eedcb08eeaca13290e8dc91b8b2e10c5dae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34616162376633382d316631392d653030622d623335642d3233626162663336613735622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/bd8d4eedcb08eeaca13290e8dc91b8b2e10c5dae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34616162376633382d316631392d653030622d623335642d3233626162663336613735622e706e67\" alt=\"mongoose virtualのイメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/4aab7f38-1f19-e00b-b35d-23babf36a75b.png\"></a></p>\n\n<p>具体的なソースコードを示します。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">article.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">ArticleSchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">content</span><span class=\"p\">:</span> <span class=\"nb\">String</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">toJSON</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">virtuals</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"p\">});</span>\n\n\n<span class=\"c1\">// 記事に紐付くコメントモデルの配列をcommentsという擬似要素で定義する</span>\n<span class=\"nx\">ArticleSchema</span><span class=\"p\">.</span><span class=\"nx\">virtual</span><span class=\"p\">(</span><span class=\"s1\">'comments'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Comment'</span><span class=\"p\">,</span>\n  <span class=\"na\">localField</span><span class=\"p\">:</span> <span class=\"s1\">'_id'</span><span class=\"p\">,</span>\n  <span class=\"na\">foreignField</span><span class=\"p\">:</span> <span class=\"s1\">'articleId'</span><span class=\"p\">,</span>\n  <span class=\"na\">justOne</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Article</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Article'</span><span class=\"p\">,</span> <span class=\"nx\">ArticleSchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Article</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">comment.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">CommentSchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">articleId</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">.</span><span class=\"nx\">Types</span><span class=\"p\">.</span><span class=\"nx\">ObjectId</span><span class=\"p\">,</span>\n    <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Article'</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">comment</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">;</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"na\">toJSON</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"na\">virtuals</span><span class=\"p\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span> <span class=\"p\">});</span>\n\n<span class=\"c1\">// コメントに紐付くリプライモデルの配列をrepliesという擬似要素で定義する</span>\n<span class=\"nx\">CommentSchema</span><span class=\"p\">.</span><span class=\"nx\">virtual</span><span class=\"p\">(</span><span class=\"s1\">'replies'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Reply'</span><span class=\"p\">,</span>\n  <span class=\"na\">localField</span><span class=\"p\">:</span> <span class=\"s1\">'_id'</span><span class=\"p\">,</span>\n  <span class=\"na\">foreignField</span><span class=\"p\">:</span> <span class=\"s1\">'commentId'</span><span class=\"p\">,</span>\n  <span class=\"na\">justOne</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Comment</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Comment'</span><span class=\"p\">,</span> <span class=\"nx\">CommentSchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Comment</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">reply.model.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">ReplySchema</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">commentId</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">.</span><span class=\"nx\">Types</span><span class=\"p\">.</span><span class=\"nx\">ObjectId</span><span class=\"p\">,</span>\n    <span class=\"na\">ref</span><span class=\"p\">:</span> <span class=\"s1\">'Comment'</span>\n  <span class=\"p\">},</span>\n  <span class=\"na\">reply</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">;</span>\n<span class=\"p\">});</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Reply</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'Reply'</span><span class=\"p\">,</span> <span class=\"nx\">ReplySchema</span><span class=\"p\">);</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Reply</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">検索処理</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">Article</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">()</span>\n<span class=\"p\">.</span><span class=\"nx\">populate</span><span class=\"p\">({</span>\n  <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"s1\">'comments'</span><span class=\"p\">,</span> <span class=\"c1\">// Articleモデルで定義した擬似要素commentsをpopulateする</span>\n  <span class=\"na\">populate</span><span class=\"p\">:</span> <span class=\"p\">[{</span>\n    <span class=\"na\">path</span><span class=\"p\">:</span> <span class=\"s1\">'replies'</span><span class=\"p\">,</span> <span class=\"c1\">// Commentモデルで定義した擬似要素repliesをpopulateする</span>\n  <span class=\"p\">}],</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"リクエストレスポンスのログ出力したい\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9%E3%81%AE%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>リクエスト、レスポンスのログ出力したい</h2>\n\n<p>Expressのuseにて実現します。<br>\nレスポンスオブジェクトのfinishイベントを監視することで、レスポンス時にログを出力しています。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">リクエストとレスポンスのログ出力　※ここでは簡単のためコンソールに出力しています</span></div>\n<div class=\"highlight\"><pre><span class=\"kd\">const</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n<span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"nx\">accessLogHandler</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">();</span>\n  <span class=\"c1\">// リクエスト時のログ　</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">([</span>\n    <span class=\"s1\">'start'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'x-forwarded-for'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span>\n    <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">referer</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'user-agent'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'--ms--'</span>\n  <span class=\"p\">].</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">',</span><span class=\"err\">\\</span><span class=\"s1\">t'</span><span class=\"p\">));</span>\n\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">once</span><span class=\"p\">(</span><span class=\"s1\">'finish'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n<span class=\"err\">　　</span> <span class=\"c1\">// レスポンス時のログ</span>\n    <span class=\"nx\">accessLogger</span><span class=\"p\">.</span><span class=\"nx\">info</span><span class=\"p\">([</span>\n      <span class=\"s1\">'end'</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'x-forwarded-for'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">referer</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n      <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'user-agent'</span><span class=\"p\">]</span> <span class=\"o\">||</span> <span class=\"s1\">'-'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'--'</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">getMilliseconds</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"nx\">start</span><span class=\"p\">.</span><span class=\"nx\">getMilliseconds</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"s1\">'ms--'</span>\n    <span class=\"p\">].</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">',</span><span class=\"err\">\\</span><span class=\"s1\">t'</span><span class=\"p\">));</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">next</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<p>実際のログはこんな感じで出力されます。</p>\n\n<div class=\"code-frame\" data-lang=\"py3\"><div class=\"highlight\"><pre><span class=\"n\">start</span><span class=\"p\">,</span>  <span class=\"p\">::</span><span class=\"n\">ffff</span><span class=\"p\">:</span><span class=\"mf\">127.0</span><span class=\"o\">.</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"n\">api</span><span class=\"o\">/</span><span class=\"n\">authenticate</span><span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"p\">,</span>   <span class=\"o\">-</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">4200</span><span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"n\">Mozilla</span><span class=\"o\">/</span><span class=\"mf\">5.0</span> <span class=\"p\">(</span><span class=\"n\">Macintosh</span><span class=\"p\">;</span> <span class=\"n\">Intel</span> <span class=\"n\">Mac</span> <span class=\"n\">OS</span> <span class=\"n\">X</span> <span class=\"mi\">10</span><span class=\"n\">_12_6</span><span class=\"p\">)</span> <span class=\"n\">AppleWebKit</span><span class=\"o\">/</span><span class=\"mf\">537.36</span> <span class=\"p\">(</span><span class=\"n\">KHTML</span><span class=\"p\">,</span> <span class=\"n\">like</span> <span class=\"n\">Gecko</span><span class=\"p\">)</span> <span class=\"n\">Chrome</span><span class=\"o\">/</span><span class=\"mf\">62.0</span><span class=\"o\">.</span><span class=\"mf\">3202.94</span> <span class=\"n\">Safari</span><span class=\"o\">/</span><span class=\"mf\">537.36</span><span class=\"p\">,</span> <span class=\"o\">--</span><span class=\"n\">ms</span><span class=\"o\">--</span>\n<span class=\"n\">end</span><span class=\"p\">,</span>    <span class=\"p\">::</span><span class=\"n\">ffff</span><span class=\"p\">:</span><span class=\"mf\">127.0</span><span class=\"o\">.</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">GET</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">-</span><span class=\"n\">state</span><span class=\"p\">,</span>                  <span class=\"mi\">403</span><span class=\"p\">,</span> <span class=\"n\">http</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">localhost</span><span class=\"p\">:</span><span class=\"mi\">4200</span><span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"n\">Mozilla</span><span class=\"o\">/</span><span class=\"mf\">5.0</span> <span class=\"p\">(</span><span class=\"n\">Macintosh</span><span class=\"p\">;</span> <span class=\"n\">Intel</span> <span class=\"n\">Mac</span> <span class=\"n\">OS</span> <span class=\"n\">X</span> <span class=\"mi\">10</span><span class=\"n\">_12_6</span><span class=\"p\">)</span> <span class=\"n\">AppleWebKit</span><span class=\"o\">/</span><span class=\"mf\">537.36</span> <span class=\"p\">(</span><span class=\"n\">KHTML</span><span class=\"p\">,</span> <span class=\"n\">like</span> <span class=\"n\">Gecko</span><span class=\"p\">)</span> <span class=\"n\">Chrome</span><span class=\"o\">/</span><span class=\"mf\">62.0</span><span class=\"o\">.</span><span class=\"mf\">3202.94</span> <span class=\"n\">Safari</span><span class=\"o\">/</span><span class=\"mf\">537.36</span><span class=\"p\">,</span>  <span class=\"o\">--</span><span class=\"mi\">47</span><span class=\"n\">ms</span><span class=\"o\">--</span>\n</pre></div></div>\n\n<h2>\n<span id=\"ログ出力でオブジェクトの全プロパティを出力したい\" class=\"fragment\"></span><a href=\"#%E3%83%AD%E3%82%B0%E5%87%BA%E5%8A%9B%E3%81%A7%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E5%85%A8%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%82%92%E5%87%BA%E5%8A%9B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>ログ出力でオブジェクトの全プロパティを出力したい</h2>\n\n<p>オブジェクトの中身をログで確認する時はNode.jsの<code>util.inspect()</code>を使います。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre><span class=\"kd\">const</span> <span class=\"nx\">util</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'util'</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">myObject</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n   <span class=\"s2\">\"a\"</span><span class=\"p\">:</span><span class=\"s2\">\"a\"</span><span class=\"p\">,</span>\n   <span class=\"s2\">\"b\"</span><span class=\"p\">:{</span>\n      <span class=\"s2\">\"c\"</span><span class=\"p\">:</span><span class=\"s2\">\"c\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"d\"</span><span class=\"p\">:{</span>\n         <span class=\"s2\">\"e\"</span><span class=\"p\">:</span><span class=\"s2\">\"e\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"f\"</span><span class=\"p\">:{</span>\n            <span class=\"s2\">\"g\"</span><span class=\"p\">:</span><span class=\"s2\">\"g\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"h\"</span><span class=\"p\">:{</span>\n               <span class=\"s2\">\"i\"</span><span class=\"p\">:</span><span class=\"s2\">\"i\"</span>\n            <span class=\"p\">}</span>\n         <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">};</span> \n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">util</span><span class=\"p\">.</span><span class=\"nx\">inspect</span><span class=\"p\">(</span><span class=\"nx\">myObject</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">));</span>\n</pre></div></div>\n\n<p>このようなログが出力されます</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>{ a: 'a', b: { c: 'c', d: { e: 'e', f: [Object] } } }\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/10729276/how-can-i-get-the-full-object-in-node-jss-console-log-rather-than-object\" rel=\"nofollow noopener\" target=\"_blank\">StackOverFlow</a></li>\n</ul>\n\n<h2>\n<span id=\"環境変数で上書きできる定数を定義したい\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%81%A7%E4%B8%8A%E6%9B%B8%E3%81%8D%E3%81%A7%E3%81%8D%E3%82%8B%E5%AE%9A%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>環境変数で上書きできる定数を定義したい</h2>\n\n<p>例えばサーバのポートなど環境個別に設定したくなるようなものは<br>\n環境変数で上書きできる定数にしておくと便利です。<br>\nNode.jsではprocess.env.変数名で環境変数が参照できるので下記のようにします。</p>\n\n<div class=\"code-frame\" data-lang=\"typescript\">\n<div class=\"code-lang\"><span class=\"bold\">定数定義</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_PORT</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">SERVER_PORT</span> <span class=\"o\">||</span> <span class=\"s1\">'3000'</span><span class=\"p\">;</span><span class=\"err\">　</span><span class=\"c1\">// 環境変数SERVER_PORTが未指定の場合は3000となる</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_HOST</span><span class=\"p\">:</span> <span class=\"nx\">string</span> <span class=\"o\">=</span> <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">SERVER_HOST</span> <span class=\"o\">||</span> <span class=\"s1\">'localhost'</span><span class=\"p\">;</span> <span class=\"c1\">// 環境変数SERVER_HOSTが未指定の場合はlocalhostとなる</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"db初回アクセスに失敗した場合にリトライされない\" class=\"fragment\"></span><a href=\"#db%E5%88%9D%E5%9B%9E%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%AB%E5%A4%B1%E6%95%97%E3%81%97%E3%81%9F%E5%A0%B4%E5%90%88%E3%81%AB%E3%83%AA%E3%83%88%E3%83%A9%E3%82%A4%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>DB初回アクセスに失敗した場合にリトライされない</h2>\n\n<p>mongooseを使っていると、DB初回接続時にエラーが起きた時に、なぜか再接続処理してくれません。<br>\nDockerでアプリを配布する場合、アプリとMongoDBをdocker-composeで同時に立ち上げることがあると思いますが、まだMongoDBが起動しきってない状態でアプリからDBに接続しようとすると、アプリが異常終了してしまいます。これを防ぐには自力で再接続処理を実装する必要があります。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\"><div class=\"highlight\"><pre><span class=\"kd\">function</span> <span class=\"nx\">createConnection</span> <span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">createConnection</span><span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">(</span><span class=\"sr\">/failed to connect to server .* on first connect/</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(),</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">));</span>\n\n            <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n                <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Retrying first connect...\"</span><span class=\"p\">);</span>\n                <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">openUri</span><span class=\"p\">(</span><span class=\"nx\">dbURL</span><span class=\"p\">).</span><span class=\"k\">catch</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n            <span class=\"c1\">// 20秒後に再接続する</span>\n            <span class=\"p\">},</span> <span class=\"mi\">20</span> <span class=\"o\">*</span> <span class=\"mi\">1000</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(),</span> <span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">once</span><span class=\"p\">(</span><span class=\"s1\">'open'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Connection to db established.\"</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">db</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p><strong>参考サイト</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/Automattic/mongoose/issues/5169\" rel=\"nofollow noopener\" target=\"_blank\">Github mongooseのissue5169</a></li>\n</ul>\n","body":"[FUJITSU Advent Calendar 2017](https://qiita.com/advent-calendar/2017/fujitsu) 12日目の記事です。\n\nリッチでイマドキなデザインのアプリが作りたくて、\nここ４ヶ月ほど**MEAN**スタック(**M**ongoDB+**E**xpress+**A**ngular+**N**ode.js)でブログアプリを作っています。\n知識ゼロからのスタートでしたが、多くの方々がブログやStackOverFlowに情報を載せてくれているので、躓きながらもなんとかアプリ開発を進めることができました。\n\nこの記事では、フロントエンド初心者の自分がMEANスタックでアプリを作る時に躓いたことや、こういう機能を実現するにはどうすればいいか?などをまとめています。\nこれからをAngularを学ぼうとしている方、ExpressやMongoDBなどサーバーサイドJavaScriptを学ぼうとしている方の参考になればうれしいです。\n\n## アプリの紹介\n本線から脱線しますが、イントラでの使用を想定したQiitaのようなブログアプリです。デモ環境もあるのでよければ触ってみてください(モバイルには未対応ですが。。。)\n\n* [Github](https://github.com/Takumon/mean-blog)\n* [Dockerhub](https://hub.docker.com/r/takumon/mean-blog_auto/)\n* [デモ環境](https://material-blog-demo.herokuapp.com/) (ユーザID/パスは DemoUser / DemoUser1234# です)\n\nアプリキャプチャ その１ (記事詳細)\n![appdemo_detail.png](https://qiita-image-store.s3.amazonaws.com/0/49915/b8133317-fac2-bb9b-8f2d-13db896becf5.png)\n\nアプリキャプチャ その２ (記事一覧)\n![アプリ_スクリーンキャプチャ_記事一覧.png](https://qiita-image-store.s3.amazonaws.com/0/49915/950d1062-1ba4-63f6-fe53-cfe6d46430a4.png)\n\nアプリキャプチャ その３ (プロフィール)\n![アプリ_スクリーンキャプチャ_ ユーザ画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/325c7948-ce16-9c08-0b66-d3892e046aed.png)\n\n# 1. フロント側Angularまわり\n## Angularについて調べる時に古い情報を除外したい\n1系は`AngularJS`、2系以降は`Angular`と呼ばれており、1系と2系以降では大きく仕様が異なります。\nそのため検索する時は`Angualr2`などバージョンを指定したり、1系を除外するため\u001e`--AngularJS`をつけたり\u001dすると検索しやすいです。\n\n## HTMLのDOM\b要素を、別のDOM要素またはComponentから扱いたい\n要素に`#xxxxx`\bのように`#`始まりの名前をつけると、別の\bDOM要素から参照できます\n\n```html:HTML\n<input #phone placeholder=\"電話番号\"/>\n<!--  他のDOM要素からphonという変数名でDOM要素を参照できるようになる -->\n<button >(click)=\"callPhone\b(phone.value)\">\n```\n\n\bComponentから参照する場合は`@ViewChild`を使います\n\n```typescript:Component\n  // \bViewChildの引数に\b\b名前を文字列で指定します\n  @ViewChild('phone') phoneElement: phoneElement;\n\n  showPhoneValue() {\n    console.log(this.phoneElement.value);\n    )\n  }\n```\n\n\b**参考サイト**\n\n* [Angular公式サイト](https://angular.io/guide/template-syntax#ref-vars)\n* [StackOverFlow](https://stackoverflow.com/questions/32693061/how-can-i-select-an-element-in-a-component-template)\n\n\n\n## Routing時の認証を非同期で行いたい\nURLごとの認証は`CanActivate`インターフェースを実装すればできますが、\nサーバから認証情報を取得して非同期で認証したい場合もあると思います。\nそのような時は、**`CanActivate#canActivate`で**booleanの代わりに**Observable<boolean>を戻り値に指定する**ことで実現できます。\n\n\n```typescript:SampleAuthGuard\nimport { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs/Rx';\n\nimport { AuthenticationService } from './authentication.service';\n\n@Injectable()\nexport class SampleAuthGuard implements CanActivate {\n\n  constructor(\n    private auth: AuthenticationService,\n  ) { }\n\n  // booleanではなくObservable<boolean>を戻り値で返す\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    return this.auth.checkState()\n      .map(res => true)\n      .catch(err => Observable.of(false))\n  }\n}\n\n```\n\n\b**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/38425461/angular2-canactivate-calling-async-function)\n\n## FormArrayの値を初期化したい\nFormControlはpatchValueで初期値を設定できますが、\nFormArrayの場合patch\bValueで配列の値を設定しようと\bしても設定できません。\n\bこういう場合は、**\b\b配列1つ１つの値をもとにFormControlを生成してFormArrayにpush**します。\n\n```typescript:ダメな例\nngOnInit() {\n  // Form生成\n  this.form = this.formBuilder.group({\n    schoolName: '',\n    students: this.formBuilder.array([])\n  });\n\n  // Formに初期値を設定\n  this.form.pathValue({\n    schooleName: 'SampleSchoolName' // FormControlの値の初期化はpatchValueで可能\n    students: ['taro', 'jiro', 'saburo']; // FormArrayに要素を追加する場合patchValueでは不可能\n  });\n}\n```\n\n```typescript:\b良い例\nngOnInit() {\n  // Formを生成\n  this.form = this.formBuilder.group({\n    schoolName: '',\n    students: this.formBuilder.array([])\n  });\n\n  // Formに初期値を設定\n  this.form.pathValue({\n    schooleName: 'SampleSchoolName'\n  });\n\n  // データからFormControlを生成し１件１件FormArrayにpushする\n  ['taro', 'jiro', 'saburo'].forEach(student -> {\n    this.form.controls['students'].push(new FormControll(student));\n  });\n}\n```\n\n\b**参考サイト**\n\n* [StackOvereFlow](https://stackoverflow.com/questions/40916084/angular2-patchvalue-push-value-into-array)\n\n## 「ERROR Error: No provider for TemplateRef!」というエラー\n最初このエラーが出た時は、何が原因なのかわからずに困りました。。。\n大抵の場合は、**`*ngIf`や`*ngForm`の`*`が抜けてることが原因**です(要するにただのタイポです。。。)\n`*`が抜けると、Angularは`ngIf`をディレクティブとして解釈しようとしますが、\n\bそんな\b\bディレクティブは存在しないので`No provider for TemplateRef!`と言われてしまうそうです。\n\n\b**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/35932074/angular2-no-provider-for-templateref-ngif-templateref)\n\n\n## textareaにおいてTabキーでインデントしたい\n文書を入力するようなテキストエリアの場合に、\u001dTabキーでのインデントしたい場合は、\n\bkyedownイベント発生時に\bテキストエリアの値とキャレットの位置を操作することで実現可能です。\n\n```html:HTML\n<textarea #sampletextarea\n  (keydown)=\"indent($event, sampletextarea)\" ></textarea>\n```\n\n```typescript:Component\n  indent($event, sampleTextAreaElement) {\n    // Tabキー押下時\n    if ($event.keyCode === 9) {\n      \b// 次の要素に\bフォーカスが移らないようにする\n      $event.preventDefault();\n\n      // 現在のキャレット位置を取得\n      \bconst caretStart = textareaElement.selectionStart;\n      const caretEnd = textareaElement.selectionEnd;\n\n      // テキストエリアの値を\b取得し、キャレット位置にTabを挿入\n      const TAB = '¥t';\n      sampleTextAreaElement.value = sampleTextAreaElement.value.substring(0, caretStart)\n                     + TAB + sampleTextAreaElement.value.substring(caretStart, value.length);\n\n      // キャレット位置をTab分ずらす\n      sampleTextAreaElement.focus();\n      sampleTextAreaElement.setSelectionRange(caretStart + TAB.length, caretEnd + TAB.length);\n\n      return;\n    }\n  }\n\n```\n\n\n\n## \bMarkdownプレビューを\b表示したい、ソースコードはシンタックスハイライトさせたい\n[marked](https://github.com/chjj/marked)と[highlight.js](https://github.com/isagalaev/highlight.js)を組み合わせて使います。\n[marked](https://github.com/chjj/marked)のReadmeを見ればなんとなくわかりますが、Angularの仕組みに乗せる必要があるのでPipeやらServiceやらを作ります。\n\n```typescript:markdown-parse.service.ts\nimport { Injectable } from '@angular/core';\nimport marked from 'marked';\nimport hljs from 'highlight.js';\n\n\n@Injectable()\nexport class MarkdownParseService {\n\n  constructor() {\n    marked.setOptions({\n      highlight: function (code) {\n        return hljs.highlightAuto(code).value;\n      }\n    });\n  }\n\n  parse(rawText: string) {\n    return marked(rawText);\n  }\n}\n```\n\n\n```typescript:markdown.pipe.ts\nimport marked from 'marked';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { MarkdownParseService } from './markdown-parse.service';\n\n@Pipe({ name: 'toMarkdown' })\nexport class MarkdownParsePipe implements PipeTransform {\n  constructor(markdownParseService: MarkdownParseService) {}\n\n  transform(value: string): any {\n    return this.markdownParseService.parse(value);\n  }\n}\n```\n\nHTMLで下記のように指定します。`{{}}`だと\bサニタイズされてしまうので\b`innerHTML`属性を指定します。\n\n```html\n<div [innerHTML]=\"md | toMarkdown\"></div>\n```\n\n\n\b**参考サイト**\n\n* [Qiita AngularでMarkdownをHTMLとして表示するカスタムpipeを作成する](https://qiita.com/daikiojm/items/e02e2aeb0231b3620a0b)\n* Github [chjj/marked](https://github.com/chjj/marked)\n\n\n\n\n## 絞り込み条件付きリストにおいて、リストの要素が\b変更、追加\b、削除された時に絞り込み結果をリフレッシュしたい\nリストの絞り込みはPipeで実現しますが、通常Pipeはリストの要素が変更されても再び絞り込みが実施されることはありません。\nこのような場合はPipeアノテーションにて**pureオプションをfalseに設定**ましょう。\n\n```html:HTML\n<input type=\"text\" #searchUserName>\n<ul>\n  <li *ngFor=\"let user of (userList | searchUserFilter: searchUserName.value);\" >{{user.name}}</li>\n<ul>\n```\n\n```typescript:search-user.pipe.ts\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { User } from './user';\n\n@Pipe({\n  name: 'searchUserFilter',\n  pure: false // pureをfalseにすることでユーザが変更、追加、削除された時にリフレッシュできる\n})\nexport class SearchFilterPipe implements PipeTransform {\n  transform(items: Array<User>, searchUserName: string): any[] {\n    if (!searchUserName) return items;\n\n    searchUserName = searchUserName.toLowerCase();\n    return items.filter( item => item.user.userId.toLowerCase().includes(searchUserName));\n  }\n}\n```\n\n\b**参考サイト**\n\n* [Angular公式サイト](https://angular.io/guide/pipes#pure-and-impure-pipes)\n\n\n\n\n## グローバル定数を定義したい\nいろんなクラスで使う定数を\b共通\b化する時は、単純に**クラスを作ってstaticなメンバとして定数を定義**します。\n\n```typescript:app-settings.ts\nexport class AppSettings {\n   public static API_ENDPOINT='http://127.0.0.1:6666/api/';\n}\n```\n\n```typescript:SampleService\nimport {Injectable} from 'angular2/core';\nimport {AppSettings} from './app-settings';\n\n@Injectable()\nexport class SampleService {\n    \bsampleMethod() {\n      console.log(AppSettings.API_ENDPOINT);\n    }\n}\n```\n\n**参考**\n\n* [StackOverFlow](https://stackoverflow.com/questions/34986922/define-global-constants-in-angular-2)\n\n\n## 画像が多い画面の初期表示を早くしたい\n[ng-lazyload-image](https://github.com/tjoskar/ng-lazyload-image)を使えば画像の遅延ロードを実現できます。\n使い方もとても簡単でimgタグにディレクティブを指定するだけです。\n\n```html:HTML\n <img\n  [defaultImage]=\"https://images.sample.com/photo/defaultimage\" \n  [lazyLoad]=\"https://images.sample.com/photo/sampleimage\"\n  [offset]=\"30\"\n >\n```\n\n*defaultImage*\n　即時ロードされる画像のURL、遅延ロードする画像を読み込む間、表示される\n*lazyLoad*\n　遅延ロードする画像のURL\n*offset*\n　スクロールが発生する場合に画面下部の何ピクセル下に来た時にロードを開始するか\n*errorImage*\n　遅延ロード失敗時に表示する画像URL\n\n**参考サイト**\n\n* [ng-lazyload-image](https://github.com/tjoskar/ng-lazyload-image)\n\n\n## Angular Cliの`ng serve`コマンドでdistフォルダを一旦削除したくない\n`ng serve`コマンドは`dist`フォルダを削除してからtsファイルをトランスコンパイルします。\nそれを防ぐためには、**delete-output-pathオプションをfalse**に指定します。\n\n```json:package.json　ビルドスクリプト\n\"script\": {\n  \"build\": \"cp ./resource/* dist && ng serve --delete-output-path=false\"\n}\n```\n\n\b**参考サイト**\n\n* [angular-cli github issue #4366](https://github.com/angular/angular-cli/issues/4366)\n\n\n## AOTコンパイルが遅いのでなんとかしたい\nなんとかできませんでした。。。(もしかしたら方法があるのかもしれません。誰か教えてください!!!)\nAOTコンパイルはJITコンパイルが検出してくれないHTMLのエラーを警告してくれますが、その反面遅いです。特に[Angular Material](https://material.angular.io/)を使う場合は顕著です。\nそのため、自分の場合は基本的にJITビルドを使い、issueのプルリクをする前など区切りのいいタイミングでAOTビルドしてエラーがないか確認するというように使い分けてました。\n\n\n# 2. フロント側Angularでのテスト周り\n## CI環境などでテストが終わらずにタイムアウトしてしまう\nCirleCiなどでテストを実行する場合`ng test`コマンドだとプロセスが終了しないためタイムアウトで失敗してしまいます。\nこのような場合は**watchオプションをfalseに設定**します。\n\n```\nng test --wtach=false\n```\n\n**参考サイト**\n[Github isssue](https://github.com/angular/angular-cli/issues/362)\n\n## テスト時に「Error: Timeout - Async callback was not invoked within timeout specified by jasmine.DEFAULT_TIMEOUT_INTERVAL.」や「Failed to execute 'send' on 'XMLHttpRequest'」のエラー\nこのような場合は、一時的に`ng test`コマンドのオプションに**`-sm=false`を追加**してテストし直すと根本原因エラーメッセージで出力されるようになります。\n大抵の場合は自作したモッククラスに必要なメソッドがないことが原因です。\n\n\b**参考サイト**\n\n* [stackOverFlow](https://stackoverflow.com/questions/45399079/angular-tests-failing-with-failed-to-execute-send-on-xmlhttprequest)\n\n\n## テスト用に子コンポーネントをモック化したい\n意外と簡単で、TestBed#configureTestingModuleで\ndeclarationsに自作したモックの子コンポーネントを追加するだけです。\ninput,outputがあれば必要に応じてメンバ定義します。\n\n\n```typescript\n// ※import文は省略\n\n// モックの子コンポーネントを定義\n@Component({\n  selector: 'app-child', // 子コンポーネントと同じものを定義\n  template: '<p>Mock Child Component</p>'\n})\nclass MockClildComponent {\n  @Input() childInput: string;\n  @Output() childOutput = new EventEmitter();\n}\n\n// ...\n\nbeforeEach(() => {\n  TestBed.configureTestingModule({\n    declarations: [\n      // テスト時のdeclarationsにモックの定義を追加\n      MockProductSettingsComponent,\n      // ...\n    ],\n    // ...\n  });\n  // ...\n});\n```\n\n\b**参考サイト**\n\n* [stackOverFlow](https://stackoverflow.com/questions/41240163/mocking-child-components-angular-2)\n\n\n## テスト結果にAngular Materilaのスタイルが反映されない\nUIフレームワークで[Angular Material](https://material.angular.io/)を使っている場合、\n`karma.config.js`でAngular Materilaのcssを直接読み込んであげる必要あります。\n\n```javascript:karma.conf.js\nfiles: [\n      ・・・\n      // Angular Materialのスタイルをテスト開始時に読み込んでおく\n      {pattern: './node_modules/@angular/material/prebuilt-themes/indigo-pink.css', included: true, watched: false},\n],\n```\n\n**参考サイト**\n\n* [stackoverflow](https://github.com/angular/material2/issues/4056)\n\n\n## テスト結果にstyles.scss(アプリ共通のスタイル定義)のスタイルが反映されない\nアプリ共通スタイルをSASS形式にしている場合\n開発用ライブライに`karma-scss-preprocessor`と`node-sass`を追加して`karma.conf.js`を下記のように設定します。\n\n```javascript:karma.conf.js\nplugins: [\n  ・・・\n　 // プラグインに`karma-scss-preprocessor`を追加\n  require('karma-scss-preprocessor')\n],\n\n\nfiles: [\n  ・・・\n  // filesにアプリ共通スタイルを追加\n  { pattern: './src/styles.scss', watched: false,  included: true, served: true }\n],\n\n// preprocessorsを追加\npreprocessors: {\n './src/test.ts': ['@angular/cli'],\n './src/styles.scss': ['scss']\n},\n```\n\n\b**参考サイト**:\n\n* [stackOverFlow](https://stackoverflow.com/questions/44460733/how-to-configure-karma-to-include-global-scss-files-for-an-angular-cli-project/44498689#44498689)\n* [Github karma/issue/2700](https://github.com/karma-runner/karma/issues/2700)\n\n\n\n\n# 3. バックエンド側 Express、MongoDB周り\n※MongDBをNode.jsで扱う場合は[mongoose](https://github.com/Automattic/mongoose)という便利なライブラリがあるのでそれを使う前提のお話です。\n\n## mongooseのvirtualメソッドを使う\n例えば`記事`,`コメント`,`リプライ`などのモデルを定義する場合、\n３つのモデルのライフサイクルは、記事追加 => 記事に対するコメント追加 => コメントに対するリプライ追加　のようになります。\nこのような場合は、コメントが記事の参照を持ち、リプライがコメントの参照を持つモデル構造が望ましいです。コメントやリプライ追加時に１つのモデルの更新だけですむからです。\n![db構造_良.png](https://qiita-image-store.s3.amazonaws.com/0/49915/f93ac0e6-317e-1cdf-bfba-13531e2455ba.png)\n\nただ記事の検索は少し工夫が必要で、**mongooseのvirtualを使います**。これによって記事からコメントへの参照、コメントからリプライへの参照を擬似的に定義できるため、\n検索時に擬似要素をpopulateするだけで、記事に紐付くコメントとリプライを取得できるようになります。\n![mongoose virtualのイメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/4aab7f38-1f19-e00b-b35d-23babf36a75b.png)\n\n具体的なソースコードを示します。\n\n```typescript:article.model.ts\nimport * as mongoose from 'mongoose';\n\nconst ArticleSchema = new mongoose.Schema({\n  content: String\n}, { toJSON: { virtuals: true } });\n\n\n// 記事に紐付くコメントモデルの配列をcommentsという擬似要素で定義する\nArticleSchema.virtual('comments', {\n  ref: 'Comment',\n  localField: '_id',\n  foreignField: 'articleId',\n  justOne: false,\n});\n\nconst Article = mongoose.model('Article', ArticleSchema);\n\nexport { Article };\n```\n\n\n```typescript:comment.model.ts\nimport * as mongoose from 'mongoose';\n\nconst CommentSchema = new mongoose.Schema({\n  articleId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Article',\n  },\n  comment: String;\n}, { toJSON: { virtuals: true } });\n\n// コメントに紐付くリプライモデルの配列をrepliesという擬似要素で定義する\nCommentSchema.virtual('replies', {\n  ref: 'Reply',\n  localField: '_id',\n  foreignField: 'commentId',\n  justOne: false,\n});\n\nconst Comment = mongoose.model('Comment', CommentSchema);\n\nexport { Comment };\n```\n\n```typescript:reply.model.ts\nimport * as mongoose from 'mongoose';\n\nconst ReplySchema = new mongoose.Schema({\n  commentId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Comment'\n  },\n  reply: String;\n});\n\nconst Reply = mongoose.model('Reply', ReplySchema);\n\nexport { Reply };\n```\n\n```typescript:検索処理\nArticle.find()\n.populate({\n  path: 'comments', // Articleモデルで定義した擬似要素commentsをpopulateする\n  populate: [{\n    path: 'replies', // Commentモデルで定義した擬似要素repliesをpopulateする\n  }],\n});\n```\n\n\n## リクエスト、レスポンスのログ出力したい\nExpressのuseにて実現します。\nレスポンスオブジェクトのfinishイベントを監視することで、レスポンス時にログを出力しています。\n\n\n```javascript:リクエストとレスポンスのログ出力　※ここでは簡単のためコンソールに出力しています\nconst express = express();\nexpress.use(function accessLogHandler (req, res, next) {\n  const start = new Date();\n  // リクエスト時のログ　\n  console.log([\n    'start',\n    req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n    req.method,\n    req.url,\n    '-',\n    req.headers.referer || '-',\n    req.headers['user-agent'] || '-',\n    '--ms--'\n  ].join(',\\t'));\n\n  res.once('finish', function() {\n　　 // レスポンス時のログ\n    accessLogger.info([\n      'end',\n      req.headers['x-forwarded-for'] || req.connection.remoteAddress,\n      req.method,\n      req.url,\n      res.statusCode,\n      req.headers.referer || '-',\n      req.headers['user-agent'] || '-',\n      '--' + (new Date().getMilliseconds() - start.getMilliseconds()) + 'ms--'\n    ].join(',\\t'));\n  });\n\n  next();\n});\n```\n\n実際のログはこんな感じで出力されます。\n\n```py3\nstart,  ::ffff:127.0.0.1, GET, /api/authenticate/check-state,   -, http://localhost:4200/, Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36, --ms--\nend,    ::ffff:127.0.0.1, GET, /check-state,                  403, http://localhost:4200/, Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36,  --47ms--\n```\n\n\n\n## ログ出力でオブジェクトの全プロパティを出力したい\nオブジェクトの中身をログで確認する時はNode.jsの`util.inspect()`を使います。\n\n\n```javascript\nconst util = require('util');\nconst myObject = {\n   \"a\":\"a\",\n   \"b\":{\n      \"c\":\"c\",\n      \"d\":{\n         \"e\":\"e\",\n         \"f\":{\n            \"g\":\"g\",\n            \"h\":{\n               \"i\":\"i\"\n            }\n         }\n      }\n   }\n}; \n\nconsole.log(util.inspect(myObject, false, null));\n```\n\nこのようなログが出力されます\n\n```\n{ a: 'a', b: { c: 'c', d: { e: 'e', f: [Object] } } }\n```\n\n**参考サイト**\n\n* [StackOverFlow](https://stackoverflow.com/questions/10729276/how-can-i-get-the-full-object-in-node-jss-console-log-rather-than-object)\n\n\n## 環境変数で上書きできる定数を定義したい\n例えばサーバのポートなど環境個別に設定したくなるようなものは\n環境変数で上書きできる定数にしておくと便利です。\nNode.jsではprocess.env.変数名で環境変数が参照できるので下記のようにします。\n\n```typescript:定数定義\nexport const SERVER_PORT: string = process.env.SERVER_PORT || '3000';　// 環境変数SERVER_PORTが未指定の場合は3000となる\nexport const SERVER_HOST: string = process.env.SERVER_HOST || 'localhost'; // 環境変数SERVER_HOSTが未指定の場合はlocalhostとなる\n```\n\n\n## DB初回アクセスに失敗した場合にリトライされない\nmongooseを使っていると、DB初回接続時にエラーが起きた時に、なぜか再接続処理してくれません。\nDockerでアプリを配布する場合、アプリとMongoDBをdocker-composeで同時に立ち上げることがあると思いますが、まだMongoDBが起動しきってない状態でアプリからDBに接続しようとすると、アプリが異常終了してしまいます。これを防ぐには自力で再接続処理を実装する必要があります。\n\n```javascript\nfunction createConnection (dbURL, options) {\n    var db = mongoose.createConnection(dbURL, options);\n\n    db.on('error', function (err) {\n        if (err.message && err.message.match(/failed to connect to server .* on first connect/)) {\n            console.log(new Date(), String(err));\n\n            setTimeout(function () {\n                console.log(\"Retrying first connect...\");\n                db.openUri(dbURL).catch(() => {});\n            // 20秒後に再接続する\n            }, 20 * 1000);\n        } else {\n            console.error(new Date(), String(err));\n        }\n    });\n\n    db.once('open', function () {\n        console.log(\"Connection to db established.\");\n    });\n\n    return db;\n}\n```\n\n**参考サイト**\n\n* [Github mongooseのissue5169](https://github.com/Automattic/mongoose/issues/5169)\n\n","comments_count":0,"created_at":"2017-12-12T03:19:11+09:00","likes_count":46,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/5644c24e-eade-50ca-aa11-83a4eaeba122/","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その２. テスト編","date":"2017-07-24T07:12:10+09:00","excerpt":"やりたいことAngular CLI使って、MEANスタック(MongoDB + Express + Angular + NodeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。フロント側とサーバ側の両方をweb...","tags":["JavaScript","jasmine","TypeScript","AngularJS","Protractor","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"5644c24e-eade-50ca-aa11-83a4eaeba122","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その２. テスト編","rendered_body":"\n<h2>\n<span id=\"やりたいこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたいこと</h2>\n\n<ul>\n<li>Angular CLI使って、MEANスタック(<strong>M</strong>ongoDB + <strong>E</strong>xpress + <strong>A</strong>ngular + <strong>N</strong>odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。</li>\n<li>フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。</li>\n<li>Dockerを使ってアプリを簡単に配布したい。</li>\n</ul>\n\n<p>これらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。</p>\n\n<ul>\n<li><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\" id=\"reference-fc6741a6eda3b7ffd9f1\">その１. ビルド編</a></li>\n<li>その２. テスト編　⇦　今回はココ</li>\n<li>その３. Dockerビルド編</li>\n</ul>\n\n<h2>\n<span id=\"その２-テスト編\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%81%AE%EF%BC%92-%E3%83%86%E3%82%B9%E3%83%88%E7%B7%A8\"><i class=\"fa fa-link\"></i></a>その２. テスト編</h2>\n\n<p><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\">その１. ビルド編</a>では、Angular CLIで作成したプロジェクトをベースに、<br>\nMongoDBに登録しているメッセージを画面に一覧で表示するアプリを作成しました。<br>\n今回は、クライアント側とサーバ側の<a href=\"https://jasmine.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">Jasmine</a>を使った単体テスト、<a href=\"http://www.protractortest.org/#/\" rel=\"nofollow noopener\" target=\"_blank\">Protractor</a>を使ったE2Eテスト、それらを実行するnpm scriptsを作成します。<br>\n最終的には下記のように<code>npm test</code>コマンドで単体テストが実行できるようになります。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" alt=\"10_単体テスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png\"></a></p>\n\n<p>またE2Eテストは<code>npm run e2e</code>コマンドで実施できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" alt=\"20_E2Eテスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png\"></a></p>\n\n<h3>\n<span id=\"プロジェクト構成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクト構成</h3>\n\n<p>今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。<br>\n<a href=\"http://qiita.com/Takumon/items/572438809384e2e11792\">その１. ビルド編</a>で作成したものをベースにテスト用の資産を追加します。詳細は<a href=\"https://github.com/Takumon/angular4-express4-typescritp2/tree/test\" rel=\"nofollow noopener\" target=\"_blank\">リポジトリ</a>を参照してください。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">プロジェクト構成（完成イメージ）</span></div>\n<div class=\"highlight\"><pre>.\n├── dist                              ・・・(1) コンパイル資産出力先\n│   ├── server\n│   │   ├── ...\n│   │   ...\n│   │ \n│   └── server_test                      ・・・(1-1)　コンパイルされたサーバ側テスト資産\n│       ├── app.spec.js\n│       ├── app.spec.js.map\n│       ├── test.server.conf.js\n│       ├── test.server.conf.js.map\n│       ├── test.server.js\n│       └── test.server.js.map\n├── e2e                                ・・・(2)　E2Eテスト資産\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── server\n│   ├── ...\n│   ...\n│\n├── server_test                         ・・・(3)　サーバ側テスト資産\n│   ├── app.spec.ts\n│   ├── test.server.conf.ts\n│   ├── test.server.ts\n│   └── tsconfig.server_test.json\n├── src\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts      ・・・(4)　クライアント側テスト資産\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       ├── message.service.spec.ts ・・・(4)　クライアント側テスト資産\n│   │       └── message.service.ts\n│   ...\n│\n├── package-lock.json\n├── package.json\n├── protractor.conf.js                   ・・・(5)　E2Eテスト設定ファイル\n├── proxy.conf.json\n├── karma.conf.js\n├── tsconfig.json\n├── tslint.json\n└── README.md\n</pre></div>\n</div>\n\n<h4>\n<span id=\"各資産について\" class=\"fragment\"></span><a href=\"#%E5%90%84%E8%B3%87%E7%94%A3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>各資産について</h4>\n\n<h5>\n<span id=\"1-dist\" class=\"fragment\"></span><a href=\"#1-dist\"><i class=\"fa fa-link\"></i></a>(1) dist</h5>\n\n<p>コンパイル資産出力先。</p>\n\n<h5>\n<span id=\"1-1-distserver_test\" class=\"fragment\"></span><a href=\"#1-1-distserver_test\"><i class=\"fa fa-link\"></i></a>(1-1) dist/server_test</h5>\n\n<p>コンパイルされたサーバ側テスト資産(JSファイル)の出力先。<br>\nデプロイを考慮して本資産(dist/server)とは別ディレクトリにしています。</p>\n\n<h5>\n<span id=\"2-server_test\" class=\"fragment\"></span><a href=\"#2-server_test\"><i class=\"fa fa-link\"></i></a>(2) server_test</h5>\n\n<p>サーバ側テスト資産のディレクトリ。<br>\nコンパイル用の設定ファイルとテスト用の設定ファイルもココに格納します。</p>\n\n<h5>\n<span id=\"3-e2e\" class=\"fragment\"></span><a href=\"#3-e2e\"><i class=\"fa fa-link\"></i></a>(3) e2e</h5>\n\n<p>E2Eテスト用資産のディレクトリ。</p>\n\n<h5>\n<span id=\"4-srcapp配下のspectsファイル\" class=\"fragment\"></span><a href=\"#4-srcapp%E9%85%8D%E4%B8%8B%E3%81%AEspects%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\"><i class=\"fa fa-link\"></i></a>(4) src/app配下のspec.tsファイル</h5>\n\n<p>フロント側テスト資産。<br>\nコンパイルやテストは<code>ng</code>コマンドで実施します。</p>\n\n<h5>\n<span id=\"5-protractorconfjs\" class=\"fragment\"></span><a href=\"#5-protractorconfjs\"><i class=\"fa fa-link\"></i></a>(5) protractor.conf.js</h5>\n\n<p>E2Eテスト設定ファイル。<br>\n今回はAngular CLIでプロジェクトが作成するデフォルトから少しだけ修正します。</p>\n\n<h2>\n<span id=\"構築手順\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E7%AF%89%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>構築手順</h2>\n\n<h3>\n<span id=\"1-テストに必要なライブラリをインストール\" class=\"fragment\"></span><a href=\"#1-%E3%83%86%E3%82%B9%E3%83%88%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>1. テストに必要なライブラリをインストール</h3>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install --save zone.js@0.8.12\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n</pre></div></div>\n\n<ul>\n<li>\n<a href=\"https://www.npmjs.com/package/zone.js\" rel=\"nofollow noopener\" target=\"_blank\"><code>zone.js@0.8.12</code></a>\n\n<ul>\n<li>クライアント側のテストで使用します。Angular CLIでプロジェクトを作成した時点でインストールされていますが、テスト実行時に<code>Failed: Cannot create property '__creationTrace__' on string '__zone_symbol__optimizedZoneEventTask'</code>のようなエラーが出ます。<a href=\"https://github.com/angular/zone.js/issues/832\" rel=\"nofollow noopener\" target=\"_blank\">GitHubのissues</a>によるとv0.8.12はエラーが出ないそうなので、v0.8.12を再インストールします。</li>\n</ul>\n</li>\n<li>\n<a href=\"https://www.npmjs.com/package/supertest\" rel=\"nofollow noopener\" target=\"_blank\"><code>supertest</code></a>\n\n<ul>\n<li>サーバ側のテストで使用します。APIテストを簡単にしてくれます。</li>\n</ul>\n</li>\n</ul>\n\n<h3>\n<span id=\"2-クライアント側を作成\" class=\"fragment\"></span><a href=\"#2-%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2. クライアント側を作成</h3>\n\n<p>コンポーネント(app.component.ts)とサービス(message.service.ts)に対するテストコードを作成します。<br>\nクライアント側のテスト実行には<code>ng test</code>コマンドを使うので、ビルド周りの設定は不要です。</p>\n\n<h4>\n<span id=\"srcappappcomponentspects\" class=\"fragment\"></span><a href=\"#srcappappcomponentspects\"><i class=\"fa fa-link\"></i></a>src/app/app.component.spec.ts</h4>\n\n<p>コンポーネントは画面描画についてテストします。<br>\nコンポーネントで使うサービスは、<code>TestBed</code>の<code>overrideComponent</code>メソッドを使ってモック化します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.spec.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"k\">async</span><span class=\"p\">,</span> <span class=\"nx\">ComponentFixture</span><span class=\"p\">,</span> <span class=\"nx\">TestBed</span><span class=\"p\">,</span> <span class=\"nx\">inject</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/forms'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.component'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'AppComponent'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// テスト対象のComponent</span>\n  <span class=\"kd\">let</span> <span class=\"na\">component</span><span class=\"p\">:</span> <span class=\"nx\">AppComponent</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// テスト対象のFixture</span>\n  <span class=\"kd\">let</span> <span class=\"na\">fixture</span><span class=\"p\">:</span> <span class=\"nx\">ComponentFixture</span><span class=\"o\">&lt;</span><span class=\"nx\">AppComponent</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// MessageServiceのモック</span>\n  <span class=\"kd\">class</span> <span class=\"nx\">MessageServiceMock</span> <span class=\"p\">{</span>\n    <span class=\"nx\">getAll</span><span class=\"p\">():</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span>  <span class=\"p\">{</span> <span class=\"na\">messages</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n      <span class=\"p\">]};</span>\n\n      <span class=\"k\">return</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">([</span><span class=\"nx\">response</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(</span><span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n      <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">],</span>\n      <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"nx\">AppComponent</span>\n      <span class=\"p\">],</span>\n    <span class=\"p\">})</span>\n<span class=\"err\">　　　　　　　　　</span><span class=\"c1\">// MessageServiceのモックを設定</span>\n    <span class=\"p\">.</span><span class=\"nx\">overrideComponent</span><span class=\"p\">(</span><span class=\"nx\">AppComponent</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">set</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span> <span class=\"na\">provide</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">,</span> <span class=\"na\">useClass</span><span class=\"p\">:</span> <span class=\"nx\">MessageServiceMock</span> <span class=\"p\">},</span>\n        <span class=\"p\">]</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n    <span class=\"p\">.</span><span class=\"nx\">compileComponents</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">fixture</span> <span class=\"o\">=</span> <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">createComponent</span><span class=\"p\">(</span><span class=\"nx\">AppComponent</span><span class=\"p\">);</span>\n    <span class=\"nx\">component</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">componentInstance</span><span class=\"p\">;</span>\n    <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">detectChanges</span><span class=\"p\">();</span>\n  <span class=\"p\">}));</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'オブジェクトが生成されるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">debugElement</span><span class=\"p\">.</span><span class=\"nx\">componentInstance</span><span class=\"p\">;</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">).</span><span class=\"nx\">toBeTruthy</span><span class=\"p\">();</span>\n  <span class=\"p\">}));</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージを３件保持しているか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">component</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">([</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n    <span class=\"p\">]);</span>\n  <span class=\"p\">}));</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'画面にメッセージが３件表示されているか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">const</span> <span class=\"nx\">el</span> <span class=\"o\">=</span> <span class=\"nx\">fixture</span><span class=\"p\">.</span><span class=\"nx\">debugElement</span><span class=\"p\">.</span><span class=\"nx\">nativeElement</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ1'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ2'</span><span class=\"p\">);</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"nx\">textContent</span><span class=\"p\">).</span><span class=\"nx\">toContain</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ3'</span><span class=\"p\">);</span>\n  <span class=\"p\">}));</span>\n<span class=\"p\">});</span>\n\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappmessagemessageservicespects一部抜粋\" class=\"fragment\"></span><a href=\"#srcappmessagemessageservicespects%E4%B8%80%E9%83%A8%E6%8A%9C%E7%B2%8B\"><i class=\"fa fa-link\"></i></a>src/app/message/message.service.spec.ts(一部抜粋)</h4>\n\n<p>サービスのテストです。<br>\nサーバとのやりとり(HTTP通信)については<code>MockBackend</code>を使ってモック化しています。<br>\nなお<code>Error</code>は別途モックを作らなければなりません。<br>\n全て載せると冗長なので<code>register</code>メソッドのテストは割愛しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.service.spec.ts(一部抜粋)</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">TestBed</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">,</span> <span class=\"nx\">inject</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">HttpModule</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">,</span> <span class=\"nx\">Http</span><span class=\"p\">,</span> <span class=\"nx\">Response</span><span class=\"p\">,</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MockConnection</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http/testing'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">RequestMethod</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message.service'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'MessageService'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　</span><span class=\"c1\">// HTTP通信エラー用のモック</span>\n  <span class=\"kd\">class</span> <span class=\"nx\">MockError</span> <span class=\"kd\">extends</span> <span class=\"nx\">Response</span> <span class=\"kr\">implements</span> <span class=\"nb\">Error</span> <span class=\"p\">{</span>\n    <span class=\"na\">name</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">;</span>\n    <span class=\"nl\">message</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n<span class=\"err\">　　　　</span><span class=\"c1\">// HTTP通信はMockBackendでモック化</span>\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">TestBed</span><span class=\"p\">.</span><span class=\"nx\">configureTestingModule</span><span class=\"p\">({</span>\n      <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">HttpModule</span><span class=\"p\">],</span>\n      <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MessageService</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"na\">provide</span><span class=\"p\">:</span> <span class=\"nx\">Http</span><span class=\"p\">,</span>\n        <span class=\"na\">useFactory</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nx\">backend</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">new</span> <span class=\"nx\">Http</span><span class=\"p\">(</span><span class=\"nx\">backend</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">),</span>\n        <span class=\"na\">deps</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">]</span>\n      <span class=\"p\">},</span> <span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">BaseRequestOptions</span><span class=\"p\">]</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'オブジェクトが生成されるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">service</span><span class=\"p\">).</span><span class=\"nx\">toBeTruthy</span><span class=\"p\">();</span>\n  <span class=\"p\">})));</span>\n\n\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'getAll'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージが取得できるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// HTTP通信のモックで返す具体的な値の設定</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">body</span> <span class=\"o\">=</span>  <span class=\"p\">{</span> <span class=\"na\">messages</span> <span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n        <span class=\"p\">]};</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">ops</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">({</span>\n          <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n          <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">mockRespond</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">Response</span><span class=\"p\">(</span><span class=\"nx\">ops</span><span class=\"p\">));</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストの内容を検証</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">RequestMethod</span><span class=\"p\">.</span><span class=\"nx\">Get</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// レスポンスの内容を検証</span>\n      <span class=\"nx\">service</span><span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">().</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">([</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ1'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ2'</span> <span class=\"p\">},</span>\n          <span class=\"p\">{</span> <span class=\"na\">message</span> <span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ3'</span> <span class=\"p\">}</span>\n        <span class=\"p\">]);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">})));</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'異常時にエラーハンドリングされるか'</span><span class=\"p\">,</span> <span class=\"k\">async</span><span class=\"p\">(</span><span class=\"nx\">inject</span><span class=\"p\">([</span><span class=\"nx\">MockBackend</span><span class=\"p\">,</span> <span class=\"nx\">MessageService</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"na\">backend</span><span class=\"p\">:</span> <span class=\"nx\">MockBackend</span> <span class=\"p\">,</span> <span class=\"na\">service</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// HTTP通信のモックで返す具体的な値の設定</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">body</span> <span class=\"o\">=</span>  <span class=\"p\">{</span>\n          <span class=\"na\">title</span> <span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"s1\">'エラー'</span>\n        <span class=\"p\">};</span>\n\n        <span class=\"kd\">const</span> <span class=\"nx\">ops</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ResponseOptions</span><span class=\"p\">({</span>\n          <span class=\"na\">status</span><span class=\"p\">:</span> <span class=\"mi\">500</span><span class=\"p\">,</span>\n          <span class=\"na\">body</span><span class=\"p\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">body</span><span class=\"p\">)</span>\n        <span class=\"p\">});</span>\n\n        <span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">mockError</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">MockError</span><span class=\"p\">(</span><span class=\"nx\">ops</span><span class=\"p\">));</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストの内容を検証</span>\n      <span class=\"nx\">backend</span><span class=\"p\">.</span><span class=\"nx\">connections</span><span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">conn</span><span class=\"p\">:</span> <span class=\"nx\">MockConnection</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">);</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">conn</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">RequestMethod</span><span class=\"p\">.</span><span class=\"nx\">Get</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// レスポンスの内容を検証</span>\n      <span class=\"nx\">service</span><span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">().</span><span class=\"nx\">subscribe</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">fail</span><span class=\"p\">(</span><span class=\"s1\">'エラーハンドリングされなかった。'</span><span class=\"p\">);</span>\n      <span class=\"p\">},</span> <span class=\"nx\">res</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span> <span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"s1\">'エラー'</span>\n        <span class=\"p\">});</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">})));</span>\n\n  <span class=\"p\">});</span>\n\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"3-サーバ側を作成\" class=\"fragment\"></span><a href=\"#3-%E3%82%B5%E3%83%BC%E3%83%90%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>3. サーバ側を作成</h3>\n\n<p>プロジェクトの直下にserver_testディレクトリを作ってテストコードを書いていきます。<br>\nどちらかというと結合テストよりで、１つ１つの資産に対してではなくapp.tsに対して、実際にDBに接続しながらAPIテストを行います。規模が小さい場合はコレで充分だと思います。<br>\nまたExpressのテストフレームワークは<a href=\"https://mochajs.org/\" rel=\"nofollow noopener\" target=\"_blank\">Mocha</a>が一般的ですが、クライアント側と統一したいので、今回は<a href=\"https://jasmine.github.io/\" rel=\"nofollow noopener\" target=\"_blank\">Jasmine</a>を使うことにします。</p>\n\n<h4>\n<span id=\"server_testappspects一部抜粋\" class=\"fragment\"></span><a href=\"#server_testappspects%E4%B8%80%E9%83%A8%E6%8A%9C%E7%B2%8B\"><i class=\"fa fa-link\"></i></a>server_test/app.spec.ts(一部抜粋)</h4>\n\n<p>ポイントとしてはテスト実行前にMessageモデルを使ってDBを初期化していることです。<br>\nそれによりテストデータがテストメソッドごとに想定する形になるようにしています。<br>\n異常時のテストは、Messsageのfindメソッドでエラーが発生するようにJasmineの<code>spyOn</code>メソッドで処理を置き換えます。<br>\n全て載せると冗長なのでメッセージ登録のテストは割愛しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.spec.ts(一部抜粋)</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">supertest</span> <span class=\"k\">from</span> <span class=\"s1\">'supertest'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"nx\">app</span> <span class=\"k\">from</span> <span class=\"s1\">'../server/app'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../server/models/message'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">request</span> <span class=\"o\">=</span> <span class=\"nx\">supertest</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">endpoint</span> <span class=\"o\">=</span> <span class=\"s1\">'/api/messages'</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">messageAscending</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">,</span> <span class=\"nx\">m2</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&gt;</span> <span class=\"nx\">m2</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">m1</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">&lt;</span> <span class=\"nx\">m2</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"c1\">// テスト前にDBのmessagesを初期化する</span>\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">({},</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{});</span>\n  <span class=\"p\">});</span>\n\n\n  <span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'Get'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'レスポンスがjson形式でステータスコードが200か'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n      <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// 検証</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'application/json'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">);</span>\n        <span class=\"p\">}).</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージ一覧が取得できるか'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n      <span class=\"kd\">const</span> <span class=\"nx\">testData</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ１'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ２'</span> <span class=\"p\">},</span>\n        <span class=\"p\">{</span> <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'テスト用メッセージ３'</span> <span class=\"p\">},</span>\n      <span class=\"p\">];</span>\n<span class=\"err\">　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// 事前準備（テストデータを作成）</span>\n      <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">testData</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">erro</span> <span class=\"p\">,</span> <span class=\"nx\">doc</span> <span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"err\">　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n        <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n          <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　　　　　　　　　　　　　</span><span class=\"c1\">// 検証</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">sortedMessages</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">sort</span><span class=\"p\">(</span><span class=\"nx\">messageAscending</span><span class=\"p\">);</span>\n\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ１'</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ２'</span><span class=\"p\">);</span>\n            <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">sortedMessages</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"nx\">message</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'テスト用メッセージ３'</span><span class=\"p\">);</span>\n          <span class=\"p\">})</span>\n          <span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">});</span>\n\n\n    <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'異常時にエラーハンドリングされるか'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n      <span class=\"c1\">// エラーとなるようにMessageのfindメソッドを置き換える</span>\n      <span class=\"nx\">spyOn</span><span class=\"p\">(</span><span class=\"nx\">Message</span><span class=\"p\">,</span> <span class=\"s1\">'find'</span><span class=\"p\">).</span><span class=\"nx\">and</span><span class=\"p\">.</span><span class=\"nx\">callFake</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">callback</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">Error</span><span class=\"p\">(</span><span class=\"s1\">'エラー'</span><span class=\"p\">),</span> <span class=\"kc\">null</span><span class=\"p\">);</span>\n      <span class=\"p\">});</span>\n<span class=\"err\">　　　　　　　　　　　　　</span>\n<span class=\"err\">　　　　　　　　　　　　</span><span class=\"c1\">// リクエストを投げる</span>\n      <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">expect</span><span class=\"p\">((</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n          <span class=\"c1\">// 検証</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'application/json'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">);</span>\n\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">);</span>\n          <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'エラー'</span><span class=\"p\">);</span>\n        <span class=\"p\">})</span>\n        <span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"nx\">done</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"4-単体テスト周りの環境を整備\" class=\"fragment\"></span><a href=\"#4-%E5%8D%98%E4%BD%93%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>4. 単体テスト周りの環境を整備</h3>\n\n<p>E2Eの説明に入る前に、いったん単体テスト周りの環境を整備します。</p>\n\n<h4>\n<span id=\"packagejson\" class=\"fragment\"></span><a href=\"#packagejson\"><i class=\"fa fa-link\"></i></a>package.json</h4>\n\n<p><a href=\"http://qiita.com/Takumon/items/572438809384e2e11792#pakcagejson\" id=\"reference-fc6741a6eda3b7ffd9f1\">前回</a>作成したものをベースに単体テストのスクリプトを追加してください。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\"> </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-p test:*\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"test:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng test\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"test:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s build:server_test -p watch:server_test  boot:server_test\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"watch:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -w -p ./server_test/tsconfig.server_test.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"boot:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"nodemon ./dist/server_test/test.server.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:server_test\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>test</strong>でクライアント側とサーバ側のテストを実行します。</li>\n<li>\n<strong>test:client</strong>でクライアント側のテストを実行します。Angular CLIのngコマンドにお任せしています。</li>\n<li>\n<strong>watch:server_test</strong>でサーバ側テスト資産をウォッチして変更があればコンパイルするようにします。</li>\n<li>\n<strong>boot:server_test</strong>でコンパイルしたサーバ側テスト資産を起動します。nodeではなくnodemonを使うことで資産に更新があった場合でも即座に反映するようにしています。</li>\n<li>\n<strong>build:server_test</strong>でサーバ側テスト資産をコンパイルします。コンパイル時の設定は下で触れるserver_test/test.server.conf.tsを使います。</li>\n</ul>\n\n<h4>\n<span id=\"server_testtestserverts\" class=\"fragment\"></span><a href=\"#server_testtestserverts\"><i class=\"fa fa-link\"></i></a>server_test/test.server.ts</h4>\n\n<p>サーバ側テストの起動処理を書きます。<br>\nレポーターには<a href=\"https://www.npmjs.com/package/jasmine-spec-reporter\" rel=\"nofollow noopener\" target=\"_blank\">jasmine-spec-reporter</a>を使いましょう。このライブラリはAngular CLIで作ったプロジェクトにはデフォルトでインストール済みです。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">test.server.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">SpecReporter</span><span class=\"p\">,</span> <span class=\"nx\">DisplayProcessor</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'jasmine-spec-reporter'</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">Jasmine</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'jasmine'</span><span class=\"p\">);</span>\n<span class=\"k\">import</span> <span class=\"nx\">SuiteInfo</span> <span class=\"o\">=</span> <span class=\"nx\">jasmine</span><span class=\"p\">.</span><span class=\"nx\">SuiteInfo</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">config</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./test.server.conf'</span><span class=\"p\">;</span>\n\n\n<span class=\"kd\">class</span> <span class=\"nx\">CustomProcessor</span> <span class=\"kd\">extends</span> <span class=\"nx\">DisplayProcessor</span> <span class=\"p\">{</span>\n    <span class=\"kr\">public</span> <span class=\"nx\">displayJasmineStarted</span><span class=\"p\">(</span><span class=\"nx\">info</span><span class=\"p\">:</span> <span class=\"nx\">SuiteInfo</span><span class=\"p\">,</span> <span class=\"nx\">log</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">string</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"s2\">`TypeScript </span><span class=\"p\">${</span><span class=\"nx\">log</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">runner</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Jasmine</span><span class=\"p\">();</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">loadConfig</span><span class=\"p\">(</span><span class=\"nx\">config</span><span class=\"p\">);</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">addReporter</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">SpecReporter</span><span class=\"p\">({</span>\n    <span class=\"na\">customProcessors</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">CustomProcessor</span><span class=\"p\">],</span>\n<span class=\"p\">}));</span>\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">onComplete</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">passed</span><span class=\"p\">){</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"nx\">passed</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'Success'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"s1\">'Failed'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">runner</span><span class=\"p\">.</span><span class=\"nx\">execute</span><span class=\"p\">();</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"server_testtestserverconfts\" class=\"fragment\"></span><a href=\"#server_testtestserverconfts\"><i class=\"fa fa-link\"></i></a>server_test/test.server.conf.ts</h4>\n\n<p>サーバ側テスト起動時の設定です。<br>\n注意点として<code>spec_files</code>に指定する相対パスはプロジェクト直下が起点になります。そのため<code>__dirname</code>を使って指定してください。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">test.server.conf.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">spec_dir</span><span class=\"p\">:</span> <span class=\"s1\">'.'</span><span class=\"p\">,</span>\n  <span class=\"na\">spec_files</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">__dirname</span><span class=\"p\">}</span><span class=\"s2\">/*spec.js`</span>\n  <span class=\"p\">],</span>\n  <span class=\"s1\">'stopSpecOnExpectationFailure'</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n  <span class=\"s1\">'random'</span><span class=\"p\">:</span> <span class=\"kc\">false</span>\n<span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"server_testtsconfigserver_testjson\" class=\"fragment\"></span><a href=\"#server_testtsconfigserver_testjson\"><i class=\"fa fa-link\"></i></a>server_test/tsconfig.server_test.json</h4>\n\n<p>サーバ側テスト資産をコンパイルする時の設定ファイルです。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">tsconfig.server_test.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"extends\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../tsconfig.json\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"preserveConstEnums\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"outDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"mapRoot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"module\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"commonjs\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"include\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"s2\">\"**/*.spec.ts\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"./test.server.ts\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"./test.server.conf.ts\"</span><span class=\"w\">\n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<p><code>outDir</code>が<code>../dist/server_test</code>ではなく<code>../dist</code>であることに注意してください。<br>\nテスト資産は<code>server</code>ディレクトリ配下の資産に依存しているため、<code>../dist/server_test</code>を指定するとコンパイルした時に下記のように出力されてしまいます。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">（悪い例）outDirに\"../dist/server_test\"を指定したときのコンパイル結果</span></div>\n<div class=\"highlight\"><pre>.\n└── dist\n    └── server_test\n        ├── server\n        └── server_test \n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">（良い例）outDirに\"../dist\"を指定したときのコンパイル結果</span></div>\n<div class=\"highlight\"><pre>.\n└── dist\n    ├── server\n    └── server_test \n</pre></div>\n</div>\n\n<h3>\n<span id=\"5-e2eテストを作成\" class=\"fragment\"></span><a href=\"#5-e2e%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>5. E2Eテストを作成</h3>\n\n<p>単体テストを作成したので次はE2Eテストを作りましょう。<br>\nAngular CLIで作成したプロジェクトにデフォルトで用意されている<a href=\"http://www.protractortest.org/#/\" rel=\"nofollow noopener\" target=\"_blank\">Protractor</a>を使ったテストコードを作成します。</p>\n\n<h4>\n<span id=\"e2eappe2e-spects\" class=\"fragment\"></span><a href=\"#e2eappe2e-spects\"><i class=\"fa fa-link\"></i></a>e2e/app.e2e-spec.ts</h4>\n\n<p>基本的にelementメソッドで要素を取得して、sendKeysメソッドやclickメソッドで操作を行います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.e2e-spec.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.po'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">browser</span><span class=\"p\">,</span> <span class=\"nx\">element</span><span class=\"p\">,</span> <span class=\"nx\">by</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'protractor'</span><span class=\"p\">;</span>\n\n\n<span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">'E2Eテスト'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"na\">page</span><span class=\"p\">:</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">beforeEach</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Angular4Express4Typescritp2Page</span><span class=\"p\">();</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'画面タイトルが正しいか'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">navigateTo</span><span class=\"p\">();</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">getParagraphText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">'メッセージ一覧'</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n\n  <span class=\"nx\">it</span><span class=\"p\">(</span><span class=\"s1\">'メッセージが登録できるか'</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">navigateTo</span><span class=\"p\">();</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">newMessage</span> <span class=\"o\">=</span> <span class=\"s2\">`サンプルメッセージ </span><span class=\"p\">${</span><span class=\"k\">new</span> <span class=\"nb\">Date</span><span class=\"p\">().</span><span class=\"nx\">toString</span><span class=\"p\">()}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n    <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessage'</span><span class=\"p\">)).</span><span class=\"nx\">sendKeys</span><span class=\"p\">(</span><span class=\"nx\">newMessage</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessageButton'</span><span class=\"p\">)).</span><span class=\"nx\">click</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// 登録後メッセージ入力項目が初期化されているか</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'registerMessage'</span><span class=\"p\">)).</span><span class=\"nx\">getText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// 登録後一覧に登録したメッセージが含まれているか</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"nx\">element</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"p\">(</span><span class=\"s1\">'messageList'</span><span class=\"p\">)).</span><span class=\"nx\">all</span><span class=\"p\">(</span><span class=\"nx\">by</span><span class=\"p\">.</span><span class=\"nx\">tagName</span><span class=\"p\">(</span><span class=\"s1\">'li'</span><span class=\"p\">));</span>\n    <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">messages</span><span class=\"p\">.</span><span class=\"nx\">last</span><span class=\"p\">().</span><span class=\"nx\">getText</span><span class=\"p\">()).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span><span class=\"nx\">newMessage</span><span class=\"p\">);</span>\n  <span class=\"p\">});</span>\n\n<span class=\"p\">});</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"6-e2eテスト周りの環境を整備\" class=\"fragment\"></span><a href=\"#6-e2e%E3%83%86%E3%82%B9%E3%83%88%E5%91%A8%E3%82%8A%E3%81%AE%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>6. E2Eテスト周りの環境を整備</h3>\n\n<h4>\n<span id=\"packagejson-1\" class=\"fragment\"></span><a href=\"#packagejson-1\"><i class=\"fa fa-link\"></i></a>package.json</h4>\n\n<p>Angular CILプロジェクトデフォルトの\"e2e\"コマンドは削除して、スクリプトに下記を追加してください。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\"> </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"e2e\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s  webdriver:update -p webdriver:start protractor\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"webdriver:update\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"webdriver-manager update\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"webdriver:start\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"webdriver-manager start\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"protractor\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"protractor protractor.conf.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>e2e</strong>でE2Eテストを実行します。Angular CILプロジェクトデフォルトの<code>e2e</code>コマンド(= <code>ng e2e</code>コマンド)は使いません。<code>ng　e2e</code>はクライアント資産だけコンパイルして起動する処理が入っているからです。今回はビルドしたアプリ(クライアントとサーバが１つにまとまったアプリ)に対してテストします。</li>\n<li>\n<strong>webdriver:update</strong>でE2Eテストに必要なWebDriverをインストールまたは更新します。</li>\n<li>\n<strong>webdriver:start</strong>でWebDriverを起動します。Protractorのテストは事前にWebDriverを起動しておく必要があります。</li>\n<li>\n<strong>protractor</strong>でE2Eテストを実行します。起動時の設定は下で触れるprotractor.conf.jsを使います。</li>\n</ul>\n\n<h4>\n<span id=\"protractorconfjs\" class=\"fragment\"></span><a href=\"#protractorconfjs\"><i class=\"fa fa-link\"></i></a>protractor.conf.js</h4>\n\n<p>デフォルトでbaseUrlのポートは4200になっていますが、今回はビルドしたアプリに対してテストするので3000を指定します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">protractor.conf.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"p\">...</span>\n  <span class=\"na\">baseUrl</span><span class=\"p\">:</span> <span class=\"s1\">'http://localhost:3000/'</span><span class=\"p\">,</span>\n  <span class=\"p\">...</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"7-試してみる\" class=\"fragment\"></span><a href=\"#7-%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>7. 試してみる</h3>\n\n<h4>\n<span id=\"単体テストを実行してみる\" class=\"fragment\"></span><a href=\"#%E5%8D%98%E4%BD%93%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>単体テストを実行してみる</h4>\n\n<ul>\n<li>\n<p>MongoDBをローカルで立ち上げる</p>\n\n<ul>\n<li>具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。</li>\n</ul>\n</li>\n<li><p>プロジェクト直下で<code>npm test</code>コマンドを実行するとテストが実行されます。クライアント側のテスト結果はブラウザに、サーバ側はターミナル（またはコンソール）に表示されます。資産はウォッチしているので、テストコードを修正すると、コンパイルされ再度テストが実行されるでしょう。</p></li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7f33351fc11e7394a52bb31fa317136827ea0735/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36343161363631662d333632342d633466312d333733662d6362343331393330346530322e706e67\" alt=\"10_単体テスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png\"></a></p>\n\n<h4>\n<span id=\"e2eテストを実行してみる\" class=\"fragment\"></span><a href=\"#e2e%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>E2Eテストを実行してみる</h4>\n\n<ul>\n<li>\n<p>MongoDBをローカルで立ち上げる</p>\n\n<ul>\n<li>これも単体テストと同じでDBを事前に起動しておいてください。</li>\n</ul>\n</li>\n<li>\n<p>ビルドしたアプリを起動する</p>\n\n<ul>\n<li>プロジェクト直下で<code>npm run buildRun</code>を実行し、ビルド資産を起動します。</li>\n</ul>\n</li>\n<li>\n<p><code>npm run e2e</code>する</p>\n\n<ul>\n<li>別ターミナル（またはコマンドプロンプト）を開き、プロジェクト直下で<code>npm run e2e</code>コマンドを実行します。するとブラウザが立ち上がりテストが実行されます。\n<a href=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/7ed95d4b7e245fbb593b4c8c2895d30013489715/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35616438346136612d306538652d613830622d633763352d3533386237306161393235392e706e67\" alt=\"20_E2Eテスト実施イメージ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png\"></a>\n</li>\n</ul>\n</li>\n</ul>\n\n<h2>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h2>\n\n<p>今回はMEANスタックアプリの単体テスト、E2Eテストについて紹介しました。<br>\nこれでビルドとテストができるようになったので、次回「その3. Dockerデプロイ編」では、Dockerでアプリを起動する方法とDockerでアプリのイメージを作ってデプロイする方法ついて紹介します。</p>\n","body":"## やりたいこと\n* Angular CLI使って、MEANスタック(**M**ongoDB + **E**xpress + **A**ngular + **N**odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。\n* フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。\n* Dockerを使ってアプリを簡単に配布したい。\n\nこれらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。\n\n* [その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)\n* その２. テスト編　⇦　今回はココ\n* その３. Dockerビルド編\n\n\n## その２. テスト編\n[その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)では、Angular CLIで作成したプロジェクトをベースに、\nMongoDBに登録しているメッセージを画面に一覧で表示するアプリを作成しました。\n今回は、クライアント側とサーバ側の[Jasmine](https://jasmine.github.io/)を使った単体テスト、[Protractor](http://www.protractortest.org/#/)を使ったE2Eテスト、それらを実行するnpm scriptsを作成します。\n最終的には下記のように`npm test`コマンドで単体テストが実行できるようになります。\n\n![10_単体テスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png)\n\nまたE2Eテストは`npm run e2e`コマンドで実施できるようになります。\n![20_E2Eテスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png)\n\n\n### プロジェクト構成\n今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。\n[その１. ビルド編](http://qiita.com/Takumon/items/572438809384e2e11792)で作成したものをベースにテスト用の資産を追加します。詳細は[リポジトリ](https://github.com/Takumon/angular4-express4-typescritp2/tree/test)を参照してください。\n\n```:プロジェクト構成（完成イメージ）\n.\n├── dist                              ・・・(1) コンパイル資産出力先\n│   ├── server\n│   │   ├── ...\n│   │   ...\n│   │ \n│   └── server_test                      ・・・\u001c(1-1)　コンパイルされたサーバ側テスト資産\n│       ├── app.spec.js\n│       ├── app.spec.js.map\n│       ├── test.server.conf.js\n│       ├── test.server.conf.js.map\n│       ├── test.server.js\n│       └── test.server.js.map\n├── e2e                                ・・・\u001c(2)　E2Eテスト資産\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── server\n│   ├── ...\n│   ...\n│\n├── server_test                         ・・・\u001c(3)　サーバ側テスト資産\n│   ├── app.spec.ts\n│   ├── test.server.conf.ts\n│   ├── test.server.ts\n│   └── tsconfig.server_test.json\n├── src\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts      ・・・\u001c(4)　クライアント側テスト資産\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       ├── message.service.spec.ts ・・・\u001c(4)　クライアント側テスト資産\n│   │       └── message.service.ts\n│   ...\n│\n├── package-lock.json\n├── package.json\n├── protractor.conf.js                   ・・・\u001c(5)　E2Eテスト設定ファイル\n├── proxy.conf.json\n├── karma.conf.js\n├── tsconfig.json\n├── tslint.json\n└── README.md\n```\n#### 各資産について\n##### (1) dist\nコンパイル資産出力先。\n\n##### (1-1) dist/server_test\nコンパイルされたサーバ側テスト資産(JSファイル)の出力先。\nデプロイを考慮して本資産(dist/server)とは別ディレクトリにしています。\n\n##### (2) server_test\nサーバ側テスト資産のディレクトリ。\nコンパイル用の設定ファイルとテスト用の設定ファイルもココに格納します。\n\n##### (3) e2e\nE2Eテスト用資産のディレクトリ。\n\n##### (4) src/app配下のspec.tsファイル\nフロント側テスト資産。\nコンパイルやテストは`ng`コマンドで実施します。\n\n##### (5) protractor.conf.js\nE2Eテスト設定ファイル。\n今回はAngular CLIでプロジェクトが作成するデフォルトから少しだけ修正します。\n\n\n\n## 構築手順\n\n### 1. テストに必要なライブラリをインストール\n\n```\n$ npm install --save zone.js@0.8.12\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n```\n\n* [`zone.js@0.8.12`](https://www.npmjs.com/package/zone.js)\n    * クライアント側のテストで使用します。Angular CLIでプロジェクトを作成した時点でインストールされていますが、テスト実行時に`Failed: Cannot create property '__creationTrace__' on string '__zone_symbol__optimizedZoneEventTask'`のようなエラーが出ます。[GitHubのissues](https://github.com/angular/zone.js/issues/832)によるとv0.8.12はエラーが出ないそうなので、v0.8.12を再インストールします。\n* [`supertest`](https://www.npmjs.com/package/supertest)\n    * サーバ側のテストで使用します。APIテストを簡単にしてくれます。\n\n### 2. クライアント側を作成\nコンポーネント(app.component.ts)とサービス(message.service.ts)に対するテストコードを作成します。\nクライアント側のテスト実行には`ng test`コマンドを使うので、ビルド周りの設定は不要です。\n\n#### src/app/app.component.spec.ts\nコンポーネントは画面描画についてテストします。\nコンポーネントで使うサービスは、`TestBed`の`overrideComponent`メソッドを使ってモック化します。\n\n\n```js:app.component.spec.ts\nimport { async, ComponentFixture, TestBed, inject } from '@angular/core/testing';\nimport { FormsModule } from '@angular/forms';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/Rx';\n\nimport { AppComponent } from './app.component';\nimport { MessageService } from './message/message.service';\n\ndescribe('AppComponent', () => {\n  // テスト対象のComponent\n  let component: AppComponent;\n\n  // テスト対象のFixture\n  let fixture: ComponentFixture<AppComponent>;\n\n  // MessageServiceのモック\n  class MessageServiceMock {\n    getAll(): Observable<any> {\n      const response =  { messages : [\n        { message : 'テスト用メッセージ1' },\n        { message : 'テスト用メッセージ2' },\n        { message : 'テスト用メッセージ3' }\n      ]};\n\n      return Observable.from([response]);\n    }\n  }\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [ FormsModule ],\n      declarations: [\n        AppComponent\n      ],\n    })\n　　　　　　　　　// MessageServiceのモックを設定\n    .overrideComponent(AppComponent, {\n      set: {\n        providers: [\n          { provide: MessageService, useClass: MessageServiceMock },\n        ]\n      }\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(AppComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  }));\n\n  it('オブジェクトが生成されるか', async(() => {\n    const app = fixture.debugElement.componentInstance;\n    expect(app).toBeTruthy();\n  }));\n\n\n  it('メッセージを３件保持しているか', async(() => {\n    expect(component.messages).toEqual([\n        { message : 'テスト用メッセージ1' },\n        { message : 'テスト用メッセージ2' },\n        { message : 'テスト用メッセージ3' }\n    ]);\n  }));\n\n\n  it('画面にメッセージが３件表示されているか', async(() => {\n\n    const el = fixture.debugElement.nativeElement;\n\n    expect(el.querySelectorAll('li').length).toEqual(3);\n    expect(el.querySelectorAll('li')[0].textContent).toContain('テスト用メッセージ1');\n    expect(el.querySelectorAll('li')[1].textContent).toContain('テスト用メッセージ2');\n    expect(el.querySelectorAll('li')[2].textContent).toContain('テスト用メッセージ3');\n  }));\n});\n\n```\n\n\n#### src/app/message/message.service.spec.ts(一部抜粋)\nサービスのテストです。\nサーバとのやりとり(HTTP通信)については`MockBackend`を使ってモック化しています。\nなお`Error`は別途モックを作らなければなりません。\n全て載せると冗長なので`register`メソッドのテストは割愛しています。\n\n```js:message.service.spec.ts(一部抜粋)\nimport { TestBed, async, inject } from '@angular/core/testing';\nimport {HttpModule, BaseRequestOptions, Http, Response, ResponseOptions} from '@angular/http';\nimport {MockBackend, MockConnection} from '@angular/http/testing';\nimport { RequestMethod } from '@angular/http';\n\nimport { MessageService } from './message.service';\n\n\ndescribe('MessageService', () => {\n　　　　// HTTP通信エラー用のモック\n  class MockError extends Response implements Error {\n    name: any;\n    message: any;\n  }\n\n　　　　// HTTP通信はMockBackendでモック化\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpModule],\n      providers: [MessageService, {\n        provide: Http,\n        useFactory: (backend, options) => new Http(backend, options),\n        deps: [MockBackend, BaseRequestOptions]\n      }, MockBackend, BaseRequestOptions]\n    });\n  });\n\n  it('オブジェクトが生成されるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n    expect(service).toBeTruthy();\n  })));\n\n\n  describe('getAll', () => {\n\n    it('メッセージが取得できるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n　　　　　　　　　　　　// HTTP通信のモックで返す具体的な値の設定\n      backend.connections.subscribe((conn: MockConnection) => {\n        const body =  { messages : [\n          { message : 'テスト用メッセージ1' },\n          { message : 'テスト用メッセージ2' },\n          { message : 'テスト用メッセージ3' }\n        ]};\n\n        const ops = new ResponseOptions({\n          status: 200,\n          body: JSON.stringify(body)\n        });\n\n        conn.mockRespond(new Response(ops));\n      });\n\n　　　　　　　　　　　　// リクエストの内容を検証\n      backend.connections.subscribe((conn: MockConnection) => {\n        expect(conn.request.url).toEqual('/api/messages');\n        expect(conn.request.method).toEqual(RequestMethod.Get);\n      });\n\n　　　　　　　　　　　　// レスポンスの内容を検証\n      service.getAll().subscribe((res) => {\n        expect(res.messages.length).toEqual(3);\n        expect(res.messages).toEqual([\n          { message : 'テスト用メッセージ1' },\n          { message : 'テスト用メッセージ2' },\n          { message : 'テスト用メッセージ3' }\n        ]);\n      });\n    })));\n\n\n    it('異常時にエラーハンドリングされるか', async(inject([MockBackend, MessageService], (backend: MockBackend , service: MessageService) => {\n　　　　　　　　　　　　// HTTP通信のモックで返す具体的な値の設定\n      backend.connections.subscribe((conn: MockConnection) => {\n        const body =  {\n          title : 'エラーが発生しました。',\n          error: 'エラー'\n        };\n\n        const ops = new ResponseOptions({\n          status: 500,\n          body: JSON.stringify(body)\n        });\n\n        conn.mockError(new MockError(ops));\n      });\n\n　　　　　　　　　　　　// リクエストの内容を検証\n      backend.connections.subscribe((conn: MockConnection) => {\n        expect(conn.request.url).toEqual('/api/messages');\n        expect(conn.request.method).toEqual(RequestMethod.Get);\n      });\n\n　　　　　　　　　　　　// レスポンスの内容を検証\n      service.getAll().subscribe(() => {\n        fail('エラーハンドリングされなかった。');\n      }, res => {\n        expect(res).toEqual({\n          title : 'エラーが発生しました。',\n          error: 'エラー'\n        });\n      });\n    })));\n\n  });\n\n\n});\n```\n\n\n\n### 3. サーバ側を作成\nプロジェクトの直下にserver_testディレクトリを作ってテストコードを書いていきます。\nどちらかというと結合テストよりで、１つ１つの資産に対してではなくapp.tsに対して、実際にDBに接続しながらAPIテストを行います。規模が小さい場合はコレで充分だと思います。\nまたExpressのテストフレームワークは[Mocha](https://mochajs.org/)が一般的ですが、クライアント側と統一したいので、今回は[Jasmine](https://jasmine.github.io/)を使うことにします。\n\n#### server_test/app.spec.ts(一部抜粋)\nポイントとしてはテスト実行前にMessageモデルを使ってDBを初期化していることです。\nそれによりテストデータがテストメソッドごとに想定する形になるようにしています。\n異常時のテストは、Messsageのfindメソッドでエラーが発生するようにJasmineの`spyOn`メソッドで処理を置き換えます。\n全て載せると冗長なのでメッセージ登録のテストは割愛しています。\n\n```js:app.spec.ts(一部抜粋)\nimport * as supertest from 'supertest';\n\nimport app from '../server/app';\nimport { Message } from '../server/models/message';\n\n\ndescribe('/api/messages', () => {\n  const request = supertest(app);\n  const endpoint = '/api/messages';\n\n  const messageAscending = (m1, m2) => {\n    if (m1.message > m2.message) {\n      return 1;\n    }\n\n    if (m1.message < m2.message) {\n      return -1;\n    }\n\n    return 0;\n  };\n\n  // テスト前にDBのmessagesを初期化する\n  beforeEach(() => {\n    Message.remove({}, () => {});\n  });\n\n\n  describe('Get', () => {\n\n    it('レスポンスがjson形式でステータスコードが200か', (done) => {\n\n　　　　　　　　　　　　　// リクエストを投げる\n      request.get(endpoint)\n        .expect((res) => {\n\n　　　　　　　　　　　　　　　　　　　　// 検証\n          expect(res.type).toEqual('application/json');\n          expect(res.statusCode).toEqual(200);\n        }).end(done);\n    });\n\n\n    it('メッセージ一覧が取得できるか', (done) => {\n\n      const testData = [\n        { message: 'テスト用メッセージ１' },\n        { message: 'テスト用メッセージ２' },\n        { message: 'テスト用メッセージ３' },\n      ];\n　　　　　　　　　　　　\n　　　　　　　　　　　　// 事前準備（テストデータを作成）\n      Message.create(testData, (erro , doc ) => {\n\n　　　　　　　　　　　　　　　　　// リクエストを投げる\n        request.get(endpoint)\n          .expect((res) => {\n　　　　　　　　　　　　　　　　　　　　　　　　\n　　　　　　　　　　　　　　　　　　　　　　　　// 検証\n            const sortedMessages = res.body.messages.sort(messageAscending);\n\n            expect(sortedMessages.length).toEqual(3);\n            expect(sortedMessages[0].message).toEqual('テスト用メッセージ１');\n            expect(sortedMessages[1].message).toEqual('テスト用メッセージ２');\n            expect(sortedMessages[2].message).toEqual('テスト用メッセージ３');\n          })\n          .end(done);\n      });\n    });\n\n\n    it('異常時にエラーハンドリングされるか', (done) => {\n\n      // エラーとなるようにMessageのfindメソッドを置き換える\n      spyOn(Message, 'find').and.callFake(function(callback) {\n        callback(new Error('エラー'), null);\n      });\n　　　　　　　　　　　　　\n　　　　　　　　　　　　// リクエストを投げる\n      request.get(endpoint)\n        .expect((res) => {\n\n          // 検証\n          expect(res.type).toEqual('application/json');\n          expect(res.statusCode).toEqual(500);\n\n          expect(res.body.title).toEqual('エラーが発生しました。');\n          expect(res.body.error).toEqual('エラー');\n        })\n        .end(done);\n    });\n\n  });\n});\n```\n\n\n\n### 4. 単体テスト周りの環境を整備\nE2Eの説明に入る前に、いったん単体テスト周りの環境を整備します。\n\n\n#### package.json\n[前回](http://qiita.com/Takumon/items/572438809384e2e11792#pakcagejson)作成したものをベースに単体テストのスクリプトを追加してください。\n\n```json:package.json\n \"scripts\": {\n    ...\n    \"test\": \"run-p test:*\",\n    \"test:client\": \"ng test\",\n    \"test:server\": \"npm-run-all -s build:server_test -p watch:server_test  boot:server_test\",\n    \"watch:server_test\": \"tsc -w -p ./server_test/tsconfig.server_test.json\",\n    \"boot:server_test\": \"nodemon ./dist/server_test/test.server.js\",\n    \"build:server_test\": \"tsc -p ./server/tsconfig.server.json\",\n    ...\n  },\n```\n\n\n* **test**でクライアント側とサーバ側のテストを実行します。\n* **test:client**でクライアント側のテストを実行します。Angular CLIのngコマンドにお任せしています。\n* **watch:server_test**でサーバ側テスト資産をウォッチして変更があればコンパイルするようにします。\n* **boot:server_test**でコンパイルしたサーバ側テスト資産を起動します。nodeではなくnodemonを使うことで資産に更新があった場合でも即座に反映するようにしています。\n* **build:server_test**でサーバ側テスト資産をコンパイルします。コンパイル時の設定は下で触れるserver_test/test.server.conf.tsを使います。\n\n#### server_test/test.server.ts\nサーバ側テストの起動処理を書きます。\nレポーターには[jasmine-spec-reporter](https://www.npmjs.com/package/jasmine-spec-reporter)を使いましょう。このライブラリはAngular CLIで作ったプロジェクトにはデフォルトでインストール済みです。\n\n```js:test.server.ts\nimport { SpecReporter, DisplayProcessor } from 'jasmine-spec-reporter';\nconst Jasmine = require('jasmine');\nimport SuiteInfo = jasmine.SuiteInfo;\n\nimport { config } from './test.server.conf';\n\n\nclass CustomProcessor extends DisplayProcessor {\n    public displayJasmineStarted(info: SuiteInfo, log: string): string {\n        return `TypeScript ${log}`;\n    }\n}\n\nconst runner = new Jasmine();\nrunner.loadConfig(config);\nrunner.addReporter(new SpecReporter({\n    customProcessors: [CustomProcessor],\n}));\nrunner.onComplete(function(passed){\n  if ( passed ) {\n    console.log('Success');\n  } else {\n    console.error('Failed');\n  }\n});\n\nrunner.execute();\n```\n\n\n#### server_test/test.server.conf.ts\nサーバ側テスト起動時の設定です。\n注意点として`spec_files`に指定する相対パスはプロジェクト直下が起点になります。そのため`__dirname`を使って指定してください。\n\n```js:test.server.conf.ts\nexport const config = {\n  spec_dir: '.',\n  spec_files: [\n    `${__dirname}/*spec.js`\n  ],\n  'stopSpecOnExpectationFailure': false,\n  'random': false\n};\n```\n\n\n\n#### server_test/tsconfig.server_test.json\n\nサーバ側テスト資産をコンパイルする時の設定ファイルです。\n\n```json:tsconfig.server_test.json\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"preserveConstEnums\": true,\n    \"outDir\": \"../dist\",\n    \"mapRoot\": \"../dist\",\n    \"module\": \"commonjs\"\n  } ,\n  \"include\": [\n    \"**/*.spec.ts\",\n    \"./test.server.ts\",\n    \"./test.server.conf.ts\"\n  ]\n}\n```\n\n`outDir`が`../dist/server_test`ではなく`../dist`であることに注意してください。\nテスト資産は`server`ディレクトリ配下の資産に依存しているため、`../dist/server_test`を指定するとコンパイルした時に下記のように出力されてしまいます。\n\n```:\u001c（悪い例）outDirに\"../dist/server_test\"を指定したときのコンパイル結果\n.\n└── dist\n    └── server_test\n        ├── server\n        └── server_test \n```\n```:\u001c（良い例）outDirに\"../dist\"を指定したときのコンパイル結果\n.\n└── dist\n    ├── server\n    └── server_test \n```\n\n\n### 5. E2Eテストを作成\n単体テストを作成したので次はE2Eテストを作りましょう。\nAngular CLIで作成したプロジェクトにデフォルトで用意されている[Protractor](http://www.protractortest.org/#/)を使ったテストコードを作成します。\n\n#### e2e/app.e2e-spec.ts\n基本的にelementメソッドで要素を取得して、sendKeysメソッドやclickメソッドで操作を行います。\n\n```js:app.e2e-spec.ts\nimport { Angular4Express4Typescritp2Page } from './app.po';\nimport { browser, element, by } from 'protractor';\n\n\ndescribe('E2Eテスト', () => {\n  let page: Angular4Express4Typescritp2Page;\n\n  beforeEach(() => {\n    page = new Angular4Express4Typescritp2Page();\n  });\n\n  it('画面タイトルが正しいか', () => {\n    page.navigateTo();\n    expect(page.getParagraphText()).toEqual('メッセージ一覧');\n  });\n\n\n  it('メッセージが登録できるか', () => {\n    page.navigateTo();\n    const newMessage = `サンプルメッセージ ${new Date().toString()}`;\n    element(by.id('registerMessage')).sendKeys(newMessage);\n\n    element(by.id('registerMessageButton')).click();\n\n    // 登録後メッセージ入力項目が初期化されているか\n    expect(element(by.id('registerMessage')).getText()).toEqual('');\n\n    // 登録後一覧に登録したメッセージが含まれているか\n    const messages = element(by.id('messageList')).all(by.tagName('li'));\n    expect(messages.last().getText()).toEqual(newMessage);\n  });\n\n});\n```\n\n### 6. E2Eテスト周りの環境を整備\n\n#### package.json\nAngular CILプロジェクトデフォルトの\"e2e\"コマンドは削除して、スクリプトに下記を追加してください。\n\n```json:package.json\n \"scripts\": {\n    ...\n    \"e2e\": \"npm-run-all -s  webdriver:update -p webdriver:start protractor\",\n    \"webdriver:update\": \"webdriver-manager update\",\n    \"webdriver:start\": \"webdriver-manager start\",\n    \"protractor\": \"protractor protractor.conf.js\",\n    ...\n  },\n```\n\n* **e2e**でE2Eテストを実行します。Angular CILプロジェクトデフォルトの`e2e`コマンド(= `ng e2e`コマンド)は使いません。`ng　e2e`はクライアント資産だけコンパイルして起動する処理が入っているからです。今回はビルドしたアプリ(クライアントとサーバが１つにまとまったアプリ)に対してテストします。\n* **webdriver:update**でE2Eテストに必要なWebDriverをインストールまたは更新します。\n* **webdriver:start**でWebDriverを起動します。Protractorのテストは事前にWebDriverを起動しておく必要があります。\n* **protractor**でE2Eテストを実行します。起動時の設定は下で触れるprotractor.conf.jsを使います。\n\n#### protractor.conf.js\nデフォルトでbaseUrlのポートは4200になっていますが、今回はビルドしたアプリに対してテストするので3000を指定します。\n\n```js:protractor.conf.js\nexports.config = {\n  ...\n  baseUrl: 'http://localhost:3000/',\n  ...\n}\n```\n\n### 7. 試してみる\n#### 単体テストを実行してみる\n* MongoDBをローカルで立ち上げる\n    * 具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。\n\n* プロジェクト直下で`npm test`コマンドを実行するとテストが実行されます。クライアント側のテスト結果はブラウザに、サーバ側はターミナル（またはコンソール）に表示されます。資産はウォッチしているので、テストコードを修正すると、コンパイルされ再度テストが実行されるでしょう。\n\n![10_単体テスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/641a661f-3624-c4f1-373f-cb4319304e02.png)\n\n\n\n#### E2Eテストを実行してみる\n* MongoDBをローカルで立ち上げる\n    * これも単体テストと同じでDBを事前に起動しておいてください。\n \n* ビルドしたアプリを起動する\n    * プロジェクト直下で`npm run buildRun`を実行し、ビルド資産を起動します。\n\n* `npm run e2e`する\n    * 別ターミナル（またはコマンドプロンプト）を開き、プロジェクト直下で`npm run e2e`コマンドを実行します。するとブラウザが立ち上がりテストが実行されます。\n![20_E2Eテスト実施イメージ.png](https://qiita-image-store.s3.amazonaws.com/0/49915/5ad84a6a-0e8e-a80b-c7c5-538b70aa9259.png)\n\n\n## 終わりに\n今回はMEANスタックアプリの単体テスト、E2Eテストについて紹介しました。\nこれでビルドとテストができるようになったので、次回「その3. Dockerデプロイ編」では、Dockerでアプリを起動する方法とDockerでアプリのイメージを作ってデプロイする方法ついて紹介します。\n\n","comments_count":0,"created_at":"2017-07-24T07:12:10+09:00","likes_count":9,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/bb5bc899-9dfd-5e67-bc4c-bc422ba8d176/","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その１. ビルド編","date":"2017-07-19T02:06:59+09:00","excerpt":"やりたいことAngular CLI使って、MEANスタック(MongoDB + Express + Angular + NodeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。フロント側とサーバ側の両方をweb...","tags":["JavaScript","MongoDB","Express","TypeScript","AngularJS","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"bb5bc899-9dfd-5e67-bc4c-bc422ba8d176","title":"Angular4 + Express4 + MongoDB3 + TypeScript2 の最小構成プロジェクトをAngular CLIベースで構築する。(ビルド、テスト、Dockerデプロイまで)　その１. ビルド編","rendered_body":"\n<h2>\n<span id=\"やりたいこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やりたいこと</h2>\n\n<ul>\n<li>Angular CLI使って、MEANスタック(<strong>M</strong>ongoDB + <strong>E</strong>xpress + <strong>A</strong>ngular + <strong>N</strong>odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。</li>\n<li>フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。</li>\n<li>Dockerを使ってアプリを簡単に配布したい。</li>\n</ul>\n\n<p>これらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。</p>\n\n<ul>\n<li>その１. ビルド編　⇦　今回はココ</li>\n<li><a href=\"http://qiita.com/Takumon/items/b4211fcabad740baa551\" id=\"reference-b35cd1a7f8ba1daaecd8\">その２. テスト編</a></li>\n<li>その３. Dockerビルド編</li>\n</ul>\n\n<h2>\n<span id=\"その１-ビルド編\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%81%AE%EF%BC%91-%E3%83%93%E3%83%AB%E3%83%89%E7%B7%A8\"><i class=\"fa fa-link\"></i></a>その１. ビルド編</h2>\n\n<p>Angular CLIで作成したプロジェクトをベースに、<br>\nMongoDBに登録したメッセージを画面に一覧で表示するアプリを作成していきます。<br>\nメッセージを登録すると一覧に追加されていくようなアプリです。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" alt=\"アプリ概要.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png\"></a></p>\n\n<h3>\n<span id=\"プロジェクト構成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクト構成</h3>\n\n<p>今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。<br>\n<a href=\"https://github.com/Takumon/angular4-express4-typescritp2/tree/build\" rel=\"nofollow noopener\" target=\"_blank\">リポジトリ</a>も用意しているので詳細はそちらを参照してください。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">プロジェクトの構成（完成イメージ）</span></div>\n<div class=\"highlight\"><pre>.\n├── dist                ・・・(1) コンパイル資産出力先\n│   └── server　　　　　　　　      ・・・(1-1)　コンパイルされたサーバ資産\n│       ├── app.js\n│       ├── app.js.map\n│       ├── bin\n│       │   ├── www.js\n│       │   └── www.js.map\n│       ├── config.js\n│       ├── config.js.map\n│       ├── models\n│       │   ├── message.js\n│       │   └── message.js.map\n│       ├── public      ・・・(1-2) コンパイルされたクライアント資産\n│       │   ├── favicon.ico\n│       │   ├── index.html\n│       │   ├── inline.bundle.js\n│       │   ├── inline.bundle.js.map\n│       │   ├── main.bundle.js\n│       │   ├── main.bundle.js.map\n│       │   ├── polyfills.bundle.js\n│       │   ├── polyfills.bundle.js.map\n│       │   ├── styles.bundle.js\n│       │   ├── styles.bundle.js.map\n│       │   ├── vendor.bundle.js\n│       │   └── vendor.bundle.js.map\n│       └── routes\n│           ├── message.js\n│           └── message.js.map\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── e2e\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── server               ・・・(2)　サーバ資産\n│   ├── app.ts\n│   ├── bin\n│   │   └── www.ts\n│   ├── config.ts\n│   ├── models\n│   │   └── message.ts\n│   ├── routes\n│   │   └── message.ts\n│   └── tsconfig.server.json\n├── src                   ・・・(3)　クライアント資産\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       └── message.service.ts\n│   ├── assets\n│   ├── environments\n│   │   ├── environment.prod.ts\n│   │   └── environment.ts\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── main.ts\n│   ├── polyfills.ts\n│   ├── styles.css\n│   ├── test.ts\n│   ├── tsconfig.app.json\n│   ├── tsconfig.spec.json\n│   └── typings.d.ts\n├── karma.conf.js\n├── package-lock.json\n├── package.json\n├── protractor.conf.js\n├── proxy.conf.json    ・・・(4) \n├── tsconfig.json\n├── tslint.json\n└── README.md\n</pre></div>\n</div>\n\n<h4>\n<span id=\"各資産について\" class=\"fragment\"></span><a href=\"#%E5%90%84%E8%B3%87%E7%94%A3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>各資産について</h4>\n\n<h5>\n<span id=\"1-dist\" class=\"fragment\"></span><a href=\"#1-dist\"><i class=\"fa fa-link\"></i></a>(1) dist</h5>\n\n<p>コンパイルした資産の出力先フォルダ</p>\n\n<h5>\n<span id=\"1-1-distserver\" class=\"fragment\"></span><a href=\"#1-1-distserver\"><i class=\"fa fa-link\"></i></a>(1-1) dist/server</h5>\n\n<p>ここにサーバ側のコンパイルされたjsファイルが出力されます。<br>\nserverフォルダを設けているのは本資産とテスト資産を分離したかったからです。<br>\nその２. テスト編で説明しますが、サーバ側テスト用jsファイルはdist配下のserver_testフォルダに出力されるようにしています。</p>\n\n<h5>\n<span id=\"1-2-distserverpublic\" class=\"fragment\"></span><a href=\"#1-2-distserverpublic\"><i class=\"fa fa-link\"></i></a>(1-2) dist/server/public</h5>\n\n<p>コンパイルされたクライアント資産。<br>\nサーバ側アプリの資産の一部としてコンパイルされるようにしています。<br>\nExpressのアプリでは静的資産をpublicフォルダに置くのが一般的なのでこうしました。</p>\n\n<h5>\n<span id=\"2-server\" class=\"fragment\"></span><a href=\"#2-server\"><i class=\"fa fa-link\"></i></a>(2) server</h5>\n\n<p>サーバ資産を格納するためのディレクトリ。<br>\nいろいろ悩みましたが、TypeScript資産をコンパイルすることとテストすることを考慮してこのような構成にしました。</p>\n\n<h5>\n<span id=\"3-src\" class=\"fragment\"></span><a href=\"#3-src\"><i class=\"fa fa-link\"></i></a>(3) src</h5>\n\n<p>フロントの実行資産とテスト資産を格納するためのディレクリ。<br>\nAngular CLIでプロジェクトを作成するとデフォルトで作成されます。<br>\nビルドやアプリ起動は<code>ng</code>コマンドで実施します。</p>\n\n<h5>\n<span id=\"4-proxyconfjson\" class=\"fragment\"></span><a href=\"#4-proxyconfjson\"><i class=\"fa fa-link\"></i></a>(4) proxy.conf.json</h5>\n\n<p><code>npm start</code>でフロント側とサーバ側を同時に起動した時に、クライアント側からサーバ側へのリクエストを送れるようにするためのプロキシ設定です。</p>\n\n<h2>\n<span id=\"構築手順\" class=\"fragment\"></span><a href=\"#%E6%A7%8B%E7%AF%89%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>構築手順</h2>\n\n<h3>\n<span id=\"1-プロジェクト作成\" class=\"fragment\"></span><a href=\"#1-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>1. プロジェクト作成</h3>\n\n<ul>\n<li>\n<p>Angular CLIをインストール</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install -g @angular/cli\n</pre></div></div>\n</li>\n<li>\n<p>プロジェクトを生成、Angular CLIであらかじめ定義している依存ライブラリをインストール</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ ng new sample\n$ cd sample\n$ npm install\n</pre></div></div>\n</li>\n<li>\n<p>Angular CLIであらかじめ定義している依存ライブラリの他に必要なものををインストール<br>\n</p>\n<dd>\n<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/express\" rel=\"nofollow noopener\" target=\"_blank\"><code>express</code></a><br>\n    </dt>\n<dd>Webアプリケーションフレームワーク<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/body-parser\" rel=\"nofollow noopener\" target=\"_blank\"><code>body-parser</code></a><br>\n    </dt>\n<dd>リクエストボディのパーサー<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/mongoose\" rel=\"nofollow noopener\" target=\"_blank\"><code>mongoose</code></a><br>\n    </dt>\n<dd>MongoDBへのアクセスを簡単にしてくれるAPI<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/nodemon\" rel=\"nofollow noopener\" target=\"_blank\"><code>nodemon</code></a><br>\n    </dt>\n<dd>node実行時にソースの変更を自動反映してくれるツール<br>\n</dd>\n<dt>\n<a href=\"https://www.npmjs.com/package/npm-run-all\" rel=\"nofollow noopener\" target=\"_blank\"><code>npm-run-all</code></a><br>\n    </dt>\n<dd>npm-scripts の連結実行を管理するためのパッケージ<br>\n</dd>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm install --save express body-parser mongoose\n$ npm install --save-dev @types/mongoose nodemon npm-run-all\n</pre></div></div>\n</li>\n</ul>\n\n<h3>\n<span id=\"2-サーバ側を作成\" class=\"fragment\"></span><a href=\"#2-%E3%82%B5%E3%83%BC%E3%83%90%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2. サーバ側を作成</h3>\n\n<p>Angular CLIで作ったプロジェクトの直下に<code>server</code>フォルダを作って、その中にサーバ側の処理を書いていきます。</p>\n\n<h4>\n<span id=\"servermodelsmessagets\" class=\"fragment\"></span><a href=\"#servermodelsmessagets\"><i class=\"fa fa-link\"></i></a>server/models/message.ts</h4>\n\n<p>MongoDBにアクセスするためのモデルを定義します。<br>\nDBアクセスにはmangoosを使います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">Message</span> <span class=\"o\">=</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">model</span><span class=\"p\">(</span><span class=\"s1\">'messages'</span><span class=\"p\">,</span> <span class=\"k\">new</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">Schema</span><span class=\"p\">({</span>\n  <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"p\">}</span>\n<span class=\"p\">}));</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverroutesmessagets\" class=\"fragment\"></span><a href=\"#serverroutesmessagets\"><i class=\"fa fa-link\"></i></a>server/routes/message.ts</h4>\n\n<p>エンドポイントごとの処理を記述するルータを定義します。<br>\nメッセージの取得と登録には<code>server/models/message.ts</code>を使います。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">http</span> <span class=\"k\">from</span> <span class=\"s1\">'http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Router</span><span class=\"p\">,</span> <span class=\"nx\">Response</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'express'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Message</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../models/message'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">messageRouter</span><span class=\"p\">:</span> <span class=\"nx\">Router</span> <span class=\"o\">=</span> <span class=\"nx\">Router</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// 全てのメッセージを取得する</span>\n<span class=\"nx\">messageRouter</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">Message</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">doc</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span><span class=\"na\">messages</span><span class=\"p\">:</span> <span class=\"nx\">doc</span><span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// メッセージを登録する</span>\n<span class=\"nx\">messageRouter</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">,</span> <span class=\"nx\">next</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Message</span><span class=\"p\">({</span>\n    <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n  <span class=\"p\">});</span>\n\n  <span class=\"nx\">message</span><span class=\"p\">.</span><span class=\"nx\">save</span><span class=\"p\">((</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n          <span class=\"na\">title</span><span class=\"p\">:</span> <span class=\"s1\">'エラーが発生しました。'</span><span class=\"p\">,</span>\n          <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">status</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">).</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n      <span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"s1\">'メッセージを登録しました。'</span><span class=\"p\">,</span>\n      <span class=\"na\">obj</span><span class=\"p\">:</span> <span class=\"nx\">result</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">messageRouter</span> <span class=\"p\">};</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverappts\" class=\"fragment\"></span><a href=\"#serverappts\"><i class=\"fa fa-link\"></i></a>server/app.ts</h4>\n\n<p>Expressで使用するルータと依存モジュールを定義するためのファイルを作成します。<br>\nメッセージAPIのエンドポイントは<code>/api/messages</code>に設定し、<br>\nmongooseを使ってMongoDBへの接続設定をしています。<br>\nクライアント資産はビルドするとpublicフォルダ配下に出力されるようにしているので、<br>\n静的資産へのルーティングはpublicフォルダを指定しています。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">express</span> <span class=\"k\">from</span> <span class=\"s1\">'express'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">path</span> <span class=\"k\">from</span> <span class=\"s1\">'path'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">bodyParser</span> <span class=\"k\">from</span> <span class=\"s1\">'body-parser'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">mongoose</span> <span class=\"k\">from</span> <span class=\"s1\">'mongoose'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">messageRouter</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./routes/message'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MONGO_URL</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./config'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">App</span> <span class=\"p\">{</span>\n  <span class=\"kr\">public</span> <span class=\"nx\">express</span><span class=\"p\">:</span> <span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">Application</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">middleware</span><span class=\"p\">();</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">routes</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kr\">private</span> <span class=\"nx\">middleware</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">bodyParser</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">());</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">bodyParser</span><span class=\"p\">.</span><span class=\"nx\">urlencoded</span><span class=\"p\">({</span> <span class=\"na\">extended</span><span class=\"p\">:</span> <span class=\"kc\">false</span> <span class=\"p\">}));</span>\n    <span class=\"c1\">// 接続する MongoDB の設定</span>\n    <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nb\">Promise</span> <span class=\"o\">=</span> <span class=\"nb\">global</span><span class=\"p\">.</span><span class=\"nb\">Promise</span><span class=\"p\">;</span>\n    <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">connect</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">MONGO_URL</span> <span class=\"o\">||</span> <span class=\"nx\">MONGO_URL</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n      <span class=\"na\">useMongoClient</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"p\">});</span>\n    <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'SIGINT'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"nx\">mongoose</span><span class=\"p\">.</span><span class=\"nx\">disconnect</span><span class=\"p\">();</span> <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kr\">private</span> <span class=\"nx\">routes</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 静的資産へのルーティング</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"kr\">static</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'public'</span><span class=\"p\">)));</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"nx\">messageRouter</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// その他のリクエストはindexファイルにルーティング</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'*'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">sendFile</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">'public/index.html'</span><span class=\"p\">));</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"k\">new</span> <span class=\"nx\">App</span><span class=\"p\">().</span><span class=\"nx\">express</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverbinwwwts\" class=\"fragment\"></span><a href=\"#serverbinwwwts\"><i class=\"fa fa-link\"></i></a>server/bin/www.ts</h4>\n\n<p>Node.js でサーバを起動するための設定ファイルを作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">www.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">http</span> <span class=\"k\">from</span> <span class=\"s1\">'http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">SERVER_PORT</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'../config'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">app</span> <span class=\"k\">from</span> <span class=\"s1\">'../app'</span><span class=\"p\">;</span>\n\n\n\n<span class=\"c1\">// ポートの設定.</span>\n<span class=\"kd\">const</span> <span class=\"nx\">port</span> <span class=\"o\">=</span> <span class=\"nx\">normalizePort</span><span class=\"p\">(</span><span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">env</span><span class=\"p\">.</span><span class=\"nx\">PORT</span> <span class=\"o\">||</span> <span class=\"nx\">SERVER_PORT</span><span class=\"p\">);</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"kd\">set</span><span class=\"p\">(</span><span class=\"s1\">'port'</span><span class=\"p\">,</span> <span class=\"nx\">port</span><span class=\"p\">);</span>\n\n\n<span class=\"c1\">// HTTPサーバ生成.</span>\n<span class=\"kd\">const</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"nx\">app</span><span class=\"p\">);</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"nx\">port</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">`API running on localhost:</span><span class=\"p\">${</span><span class=\"nx\">port</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">));</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'error'</span><span class=\"p\">,</span> <span class=\"nx\">onError</span><span class=\"p\">);</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">'listening'</span><span class=\"p\">,</span> <span class=\"nx\">onListening</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// ポートを正規化.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">normalizePort</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">):</span> <span class=\"nx\">number</span><span class=\"o\">|</span><span class=\"nx\">string</span><span class=\"o\">|</span><span class=\"kr\">boolean</span>  <span class=\"p\">{</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">normalizedPort</span><span class=\"p\">:</span> <span class=\"nx\">number</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">val</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span><span class=\"p\">)</span>\n    <span class=\"p\">?</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"p\">:</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">isNaN</span><span class=\"p\">(</span><span class=\"nx\">normalizedPort</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">val</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">normalizedPort</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">normalizedPort</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// エラーハンドラー.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">onError</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">):</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">syscall</span> <span class=\"o\">!==</span> <span class=\"s1\">'listen'</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">bind</span> <span class=\"o\">=</span> <span class=\"k\">typeof</span> <span class=\"nx\">port</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span>\n    <span class=\"p\">?</span> <span class=\"s1\">'Pipe '</span> <span class=\"o\">+</span> <span class=\"nx\">port</span>\n    <span class=\"p\">:</span> <span class=\"s1\">'Port '</span> <span class=\"o\">+</span> <span class=\"nx\">port</span><span class=\"p\">;</span>\n\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"s1\">'EACCES'</span><span class=\"p\">:</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">bind</span> <span class=\"o\">+</span> <span class=\"s1\">' requires elevated privileges'</span><span class=\"p\">);</span>\n      <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"k\">case</span> <span class=\"s1\">'EADDRINUSE'</span><span class=\"p\">:</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">bind</span> <span class=\"o\">+</span> <span class=\"s1\">' is already in use'</span><span class=\"p\">);</span>\n      <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n    <span class=\"nl\">default</span><span class=\"p\">:</span>\n      <span class=\"k\">throw</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// サーバ起動時のリスナー.</span>\n<span class=\"kd\">function</span> <span class=\"nx\">onListening</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">addr</span> <span class=\"o\">=</span> <span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">address</span><span class=\"p\">();</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">bind</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">addr</span> <span class=\"o\">===</span> <span class=\"s1\">'string'</span><span class=\"p\">)</span>\n    <span class=\"p\">?</span> <span class=\"s2\">`pipe </span><span class=\"p\">${</span><span class=\"nx\">addr</span><span class=\"p\">}</span><span class=\"s2\">`</span>\n    <span class=\"p\">:</span> <span class=\"s2\">`port </span><span class=\"p\">${</span><span class=\"nx\">addr</span><span class=\"p\">.</span><span class=\"nx\">port</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"serverconfigts\" class=\"fragment\"></span><a href=\"#serverconfigts\"><i class=\"fa fa-link\"></i></a>server/config.ts</h4>\n\n<p>サーバ側の設定ファイルを作成します。<br>\nポートとMongoDBのURLを定義しています。<br>\n今回MongoDBはローカルにポート27017で立てる想定です。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">config.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SERVER_PORT</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span><span class=\"p\">;</span>\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">MONGO_URL</span> <span class=\"o\">=</span> <span class=\"s1\">'mongodb://localhost:27017/test'</span><span class=\"p\">;</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"3-クライアント側を作成\" class=\"fragment\"></span><a href=\"#3-%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E5%81%B4%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>3. クライアント側を作成</h3>\n\n<p>Angular CLIでプロジェクトを作成すると最低限のクライアント資産が生成されるので、<br>\nここでは修正が必要なファイル、新規作成するファイルのみ紹介します。</p>\n\n<h4>\n<span id=\"srcappmessagemessageservicets\" class=\"fragment\"></span><a href=\"#srcappmessagemessageservicets\"><i class=\"fa fa-link\"></i></a>src/app/message/message.service.ts</h4>\n\n<p>サーバ側からメッセージを取得するためのサービスを新規作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">message.service.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Injectable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Http</span><span class=\"p\">,</span> <span class=\"nx\">Response</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Observable</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"s1\">'rxjs/Rx'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Injectable</span><span class=\"p\">()</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">MessageService</span> <span class=\"p\">{</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">private</span> <span class=\"nx\">http</span><span class=\"p\">:</span> <span class=\"nx\">Http</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n\n  <span class=\"nx\">getAll</span><span class=\"p\">():</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">http</span>\n        <span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">)</span>\n        <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"na\">response</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n            <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n        <span class=\"p\">})</span>\n        <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">throw</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()));</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">regist</span><span class=\"p\">(</span><span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">Observable</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">http</span>\n      <span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s1\">'/api/messages'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">message</span><span class=\"p\">:</span> <span class=\"nx\">message</span><span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"na\">response</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n            <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">();</span>\n            <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n      <span class=\"p\">})</span>\n      <span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">Response</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Observable</span><span class=\"p\">.</span><span class=\"k\">throw</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">()));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappcomponentts\" class=\"fragment\"></span><a href=\"#srcappappcomponentts\"><i class=\"fa fa-link\"></i></a>src/app/app.component.ts</h4>\n\n<p>既存のファイルを修正して、messagesを保持するようにします。<br>\nMessageServiceを使ってメッセージを取得します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Component</span><span class=\"p\">,</span> <span class=\"nx\">OnInit</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">Component</span><span class=\"p\">({</span>\n  <span class=\"na\">selector</span><span class=\"p\">:</span> <span class=\"s1\">'app-root'</span><span class=\"p\">,</span>\n  <span class=\"na\">templateUrl</span><span class=\"p\">:</span> <span class=\"s1\">'./app.component.html'</span><span class=\"p\">,</span>\n  <span class=\"na\">styleUrls</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'./app.component.css'</span><span class=\"p\">],</span>\n  <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span> <span class=\"nx\">MessageService</span> <span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">{</span>\n  <span class=\"nl\">messages</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">any</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n  <span class=\"nl\">message</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>\n\n  <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"kr\">private</span> <span class=\"nx\">messageService</span><span class=\"p\">:</span> <span class=\"nx\">MessageService</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getMessages</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">getMessages</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messageService</span>\n      <span class=\"p\">.</span><span class=\"nx\">getAll</span><span class=\"p\">()</span>\n      <span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">res</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messages</span> <span class=\"o\">=</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">messages</span><span class=\"p\">;</span>\n      <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">registerMessage</span><span class=\"p\">():</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">messageService</span>\n      <span class=\"p\">.</span><span class=\"nx\">register</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">)</span>\n      <span class=\"p\">.</span><span class=\"nx\">subscribe</span><span class=\"p\">((</span><span class=\"na\">res</span><span class=\"p\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s1\">''</span><span class=\"p\">;</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">getMessages</span><span class=\"p\">();</span>\n      <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappcomponenthtml\" class=\"fragment\"></span><a href=\"#srcappappcomponenthtml\"><i class=\"fa fa-link\"></i></a>src/app/app.component.html</h4>\n\n<p>既存のファイルの修正して、メッセージ一覧と登録のUIに書き換えます。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">app.component.html</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>メッセージ一覧<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;button</span> <span class=\"na\">id=</span><span class=\"s\">\"getMessagesButton\"</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)=\"</span><span class=\"na\">getMessages</span><span class=\"err\">()\"</span><span class=\"nt\">&gt;</span>メッセージ一覧を最新化<span class=\"nt\">&lt;/button&gt;</span>\n    <span class=\"nt\">&lt;ul</span> <span class=\"na\">id=</span><span class=\"s\">\"messageList\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;li</span> <span class=\"err\">*</span><span class=\"na\">ngFor=</span><span class=\"s\">\"let item of messages\"</span><span class=\"nt\">&gt;</span>\n        {{item.message}}\n      <span class=\"nt\">&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;/ul&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;div&gt;</span>\n    <span class=\"nt\">&lt;h1&gt;</span>メッセージ登録<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"text\"</span> <span class=\"na\">id=</span><span class=\"s\">\"registerMessage\"</span> <span class=\"err\">[(</span><span class=\"na\">ngModel</span><span class=\"err\">)]=\"</span><span class=\"na\">message</span><span class=\"err\">\"</span> <span class=\"na\">placeholder=</span><span class=\"s\">\"登録するメッセージを入力してください。\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;button</span> <span class=\"na\">type=</span><span class=\"s\">\"submit\"</span> <span class=\"na\">id=</span><span class=\"s\">\"registerMessageButton\"</span> <span class=\"err\">(</span><span class=\"na\">click</span><span class=\"err\">)='</span><span class=\"na\">registerMessage</span><span class=\"err\">()'</span><span class=\"nt\">&gt;</span>登録<span class=\"nt\">&lt;/button&gt;</span>\n  <span class=\"nt\">&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n</div>\n\n<h4>\n<span id=\"srcappappmodulets\" class=\"fragment\"></span><a href=\"#srcappappmodulets\"><i class=\"fa fa-link\"></i></a>src/app/app.module.ts</h4>\n\n<p>HttpModule、FormsModule、MessageServiceを追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"js\">\n<div class=\"code-lang\"><span class=\"bold\">app.module.ts</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">BrowserModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/platform-browser'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">NgModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/core'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">HttpModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/http'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">FormsModule</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'@angular/forms'</span><span class=\"p\">;</span>\n\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">AppComponent</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./app.component'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">MessageService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"s1\">'./message/message.service'</span><span class=\"p\">;</span>\n\n<span class=\"p\">@</span><span class=\"nd\">NgModule</span><span class=\"p\">({</span>\n  <span class=\"na\">declarations</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"nx\">AppComponent</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">imports</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"nx\">BrowserModule</span><span class=\"p\">,</span>\n    <span class=\"nx\">HttpModule</span><span class=\"p\">,</span>\n    <span class=\"nx\">FormsModule</span>\n  <span class=\"p\">],</span>\n  <span class=\"na\">providers</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">MessageService</span><span class=\"p\">],</span>\n  <span class=\"na\">bootstrap</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">AppComponent</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n<span class=\"k\">export</span> <span class=\"kd\">class</span> <span class=\"nx\">AppModule</span> <span class=\"p\">{</span> <span class=\"p\">}</span>\n\n\n</pre></div>\n</div>\n\n<h3>\n<span id=\"4-ビルドまわり環境を整備\" class=\"fragment\"></span><a href=\"#4-%E3%83%93%E3%83%AB%E3%83%89%E3%81%BE%E3%82%8F%E3%82%8A%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E5%82%99\"><i class=\"fa fa-link\"></i></a>4. ビルドまわり環境を整備</h3>\n\n<h4>\n<span id=\"pakcagejson\" class=\"fragment\"></span><a href=\"#pakcagejson\"><i class=\"fa fa-link\"></i></a>pakcage.json</h4>\n\n<p>スクリプトを下記のように修正します。<br>\n(npm scriptsは便利ですが、コメントが記述できないのが残念だなーと思いました。)</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><span class=\"w\">\n  </span><span class=\"s2\">\"scripts\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n    </span><span class=\"s2\">\"start\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"npm-run-all -s build:server -p start:*\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"start:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng serve --aot=true --progress=false --proxy-config proxy.conf.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"start:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-p watch:server boot:server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"watch:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -w -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"boot:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"nodemon ./dist/server/bin/www.js\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-s build:server build:client\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:client\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ng build --output-path=./dist/server/public\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"build:server\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"tsc -p ./server/tsconfig.server.json\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"buildRun\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"run-s build boot:server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"err\">...</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<ul>\n<li>\n<strong>start</strong>でクライアント資産とサーバ資産の両方を起動します。</li>\n<li>\n<strong>start:client</strong>でクライアント資産をコンパイルして起動します。Angular CLIのngコマンドにお任せしています。なおstartではクライアント資産とサーバ資産で二つのサーバを起動するので、クライアントからサーバへ（リクエストを送れるようにプロキシ設定を行っています。プロキシ設定ファイルについては下で触れます。</li>\n<li>\n<strong>start:server</strong>でサーバ資産をコンパイルしてExpressを起動します。</li>\n<li>\n<strong>watch:server</strong>でサーバ側のTypeScriptをウォッチして変更があればコンパイルするようにします。</li>\n<li>\n<strong>boot:server</strong>でコンパイルしたサーバ側資産を起動します。nodeではなくnodemonを使うことでコンパイルしたサーバ資産に更新があった場合でも即座に更新を反映するようにしています。</li>\n<li>\n<strong>build</strong>クライアント資産とサーバ資産の両方をコンパイルします。</li>\n<li>\n<strong>build:server</strong>でサーバ資産をコンパイルしています。コンパイル時の設定は下で触れる<code>/server/tsconfig.server.json</code>を使います。</li>\n<li>\n<strong>build:client</strong>でクライアント資産をコンパイルしています。出力先はサーバ側資産の静的ファイル格納フォルダ（<code>dist/server/public</code>）を指定しています。</li>\n<li>\n<strong>buildRun</strong>でクライアント資産とサーバ資産の両方をコンパイルしサーバ資産を起動します。とりあえずデプロイするアプリを起動したい時の便利コマンドです。</li>\n</ul>\n\n<h4>\n<span id=\"servertsconfigserverjson\" class=\"fragment\"></span><a href=\"#servertsconfigserverjson\"><i class=\"fa fa-link\"></i></a>server/tsconfig.server.json</h4>\n\n<p>サーバ資産コンパイルときの設定ファイルを作成します。<br>\n<code>outDir</code>で出力先をdist/serverに指定しています。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">tsconfig.server.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"extends\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../tsconfig.json\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"compilerOptions\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"preserveConstEnums\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"outDir\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist/server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"mapRoot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"../dist/server\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"module\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"commonjs\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<h4>\n<span id=\"proxyconfjson\" class=\"fragment\"></span><a href=\"#proxyconfjson\"><i class=\"fa fa-link\"></i></a>proxy.conf.json</h4>\n\n<p><code>start</code>でクライアントとサーバの２つを起動した時に、クラ<br>\nイアントからサーバへのリクエストを送れるようにするためのプロキシ設定ファイルを作成します。<br>\n<code>/api</code>始まるリクエストをサーバへのリクエストとみなしてプロキシ設定を行います。</p>\n\n<div class=\"code-frame\" data-lang=\"json\">\n<div class=\"code-lang\"><span class=\"bold\">proxy.conf.json</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"/api\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"target\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"http://localhost:3000\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"secure\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></pre></div>\n</div>\n\n<h4>\n<span id=\"mongodbをローカルで立ち上げる\" class=\"fragment\"></span><a href=\"#mongodb%E3%82%92%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7%E7%AB%8B%E3%81%A1%E4%B8%8A%E3%81%92%E3%82%8B\"><i class=\"fa fa-link\"></i></a>MongoDBをローカルで立ち上げる</h4>\n\n<p>具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。</p>\n\n<h3>\n<span id=\"5-試してみる\" class=\"fragment\"></span><a href=\"#5-%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>5. 試してみる</h3>\n\n<h4>\n<span id=\"アプリを起動してみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリを起動してみる</h4>\n\n<ul>\n<li>\n<p>プロジェクト直下で下記コマンドを実行するとアプリが起動します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm start \n</pre></div></div>\n</li>\n<li><p>起動したら<code>http://localhost:4200</code>にアクセスしてみます。すると下記のようにメッセージ一覧画面が表示され、メッセージを登録すると適宜一覧に追加されていきます。</p></li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/69f548fea654db9cdc39f80b3ff36129a4e0be22/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33303138373561362d313131362d363066332d313161392d6466366562353566353463322e706e67\" alt=\"アプリ概要.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png\"></a></p>\n\n<ul>\n<li>試しにクライアント資産かサーバ資産を修正してみると、コンンパイルされてアプリに変更がリアルタイムに反映されることがわかります。</li>\n</ul>\n\n<h4>\n<span id=\"アプリをビルドしてみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリをビルドしてみる</h4>\n\n<ul>\n<li>\n<p>プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力されます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ npm run build\n</pre></div></div>\n</li>\n</ul>\n\n<h4>\n<span id=\"アプリをビルドして起動してみる\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>アプリをビルドして起動してみる</h4>\n\n<ul>\n<li>プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力された後に起動されます。\nビルドしたアプリは<code>http://localhost:3000</code>でアクセスできます。\n<code>\n$ npm run buildRun\n</code>\n</li>\n</ul>\n\n<h2>\n<span id=\"終わりに\" class=\"fragment\"></span><a href=\"#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB\"><i class=\"fa fa-link\"></i></a>終わりに</h2>\n\n<p>今回はAngular CLIベースのプロジェクトをベースにしてMEANスタックの最小構成プロジェクトを構築する方法を紹介しました。プロジェクトを起動、ビルドすることはできるようになったので、次回「<a href=\"http://qiita.com/Takumon/items/b4211fcabad740baa551\">その２. テスト編</a>」ではテストコードの作成とテスト実施環境の構築について紹介しようと思います。</p>\n","body":"## やりたいこと\n* Angular CLI使って、MEANスタック(**M**ongoDB + **E**xpress + **A**ngular + **N**odeJS)のアプリを作りたい。どうせならサーバ側もTypeScriptで作りたい。\n* フロント側とサーバ側の両方をwebpack、gulpなどは使わずにnpm scriptsだけでビルド、テストできるようにしたい。\n* Dockerを使ってアプリを簡単に配布したい。\n\nこれらを達成するための最小構成プロジェクトの作り方を３回に分けて紹介します。\n\n* その１. ビルド編　⇦　今回はココ\n* [その２. テスト編](http://qiita.com/Takumon/items/b4211fcabad740baa551)\n* その３. Dockerビルド編\n\n\n\n## その１. ビルド編\nAngular CLIで作成したプロジェクトをベースに、\nMongoDBに登録したメッセージを画面に一覧で表示するアプリを作成していきます。\nメッセージを登録すると一覧に追加されていくようなアプリです。\n\n![アプリ概要.png](https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png)\n\n\n\n\n### プロジェクト構成\n今回のチュートリアル終了すると下記のようなプロジェクトの構成になります。\n[リポジトリ](https://github.com/Takumon/angular4-express4-typescritp2/tree/build)も用意しているので詳細はそちらを参照してください。\n\n```:プロジェクトの構成（完成イメージ）\n.\n├── dist                ・・・(1) コンパイル資産出力先\n│   └── server　　　　　　　　      ・・・\u001c(1-1)　コンパイルされたサーバ資産\n│       ├── app.js\n│       ├── app.js.map\n│       ├── bin\n│       │   ├── www.js\n│       │   └── www.js.map\n│       ├── config.js\n│       ├── config.js.map\n│       ├── models\n│       │   ├── message.js\n│       │   └── message.js.map\n│       ├── public      ・・・(1-2) コンパイルされたクライアント資産\n│       │   ├── favicon.ico\n│       │   ├── index.html\n│       │   ├── inline.bundle.js\n│       │   ├── inline.bundle.js.map\n│       │   ├── main.bundle.js\n│       │   ├── main.bundle.js.map\n│       │   ├── polyfills.bundle.js\n│       │   ├── polyfills.bundle.js.map\n│       │   ├── styles.bundle.js\n│       │   ├── styles.bundle.js.map\n│       │   ├── vendor.bundle.js\n│       │   └── vendor.bundle.js.map\n│       └── routes\n│           ├── message.js\n│           └── message.js.map\n├── node_modules\n│   ├── ...\n│   ...\n│\n├── e2e\n│   ├── app.e2e-spec.ts\n│   ├── app.po.ts\n│   └── tsconfig.e2e.json\n├── server               ・・・(2)　サーバ資産\n│   ├── app.ts\n│   ├── bin\n│   │   └── www.ts\n│   ├── config.ts\n│   ├── models\n│   │   └── message.ts\n│   ├── routes\n│   │   └── message.ts\n│   └── tsconfig.server.json\n├── src                   ・・・(3)　クライアント資産\n│   ├── app\n│   │   ├── app.component.css\n│   │   ├── app.component.html\n│   │   ├── app.component.spec.ts\n│   │   ├── app.component.ts\n│   │   ├── app.module.ts\n│   │   └── message\n│   │       └── message.service.ts\n│   ├── assets\n│   ├── environments\n│   │   ├── environment.prod.ts\n│   │   └── environment.ts\n│   ├── favicon.ico\n│   ├── index.html\n│   ├── main.ts\n│   ├── polyfills.ts\n│   ├── styles.css\n│   ├── test.ts\n│   ├── tsconfig.app.json\n│   ├── tsconfig.spec.json\n│   └── typings.d.ts\n├── karma.conf.js\n├── package-lock.json\n├── package.json\n├── protractor.conf.js\n├── proxy.conf.json    ・・・(4) \n├── tsconfig.json\n├── tslint.json\n└── README.md\n```\n#### 各資産について\n##### (1) dist\nコンパイルした資産の出力先フォルダ\n\n##### (1-1) dist/server\nここにサーバ側のコンパイルされたjsファイルが出力されます。\nserverフォルダを設けているのは本資産とテスト資産を分離したかったからです。\nその２. テスト編で説明しますが、サーバ側テスト用jsファイルはdist配下のserver_testフォルダに出力されるようにしています。\n\n##### (1-2) dist/server/public\nコンパイルされたクライアント資産。\nサーバ側アプリの資産の一部としてコンパイルされるようにしています。\nExpressのアプリでは静的資産をpublicフォルダに置くのが一般的なのでこうしました。\n\n##### (2) server\nサーバ資産を格納するためのディレクトリ。\nいろいろ悩みましたが、TypeScript資産をコンパイルすることとテストすることを考慮してこのような構成にしました。\n\n##### (3) src\nフロントの実行資産とテスト資産を格納するためのディレクリ。\nAngular CLIでプロジェクトを作成するとデフォルトで作成されます。\nビルドやアプリ起動は`ng`コマンドで実施します。\n\n##### (4) proxy.conf.json\n`npm start`でフロント側とサーバ側を同時に起動した時に、クライアント側からサーバ側へのリクエストを送れるようにするためのプロキシ設定です。\n\n\n\n\n## 構築手順\n\n### 1. プロジェクト作成\n* Angular CLIをインストール\n\n\t```\n\t$ npm install -g @angular/cli\n\t```\n\n* プロジェクトを生成、Angular CLIであらかじめ定義している依存ライブラリをインストール\n\n\t```\n\t$ ng new sample\n\t$ cd sample\n\t$ npm install\n\t```\n\n* Angular CLIであらかじめ定義している依存ライブラリの他に必要なものををインストール\n<dd>\n    <dt>[`express`](https://www.npmjs.com/package/express)\n        <dd>Webアプリケーションフレームワーク\n    <dt>[`body-parser`](https://www.npmjs.com/package/body-parser)\n        <dd>リクエストボディのパーサー\n    <dt>[`mongoose`](https://www.npmjs.com/package/mongoose)\n        <dd>MongoDBへのアクセスを簡単にしてくれるAPI\n    <dt>[`nodemon`](https://www.npmjs.com/package/nodemon)\n        <dd>node実行時にソースの変更を自動反映してくれるツール\n    <dt>[`npm-run-all`](https://www.npmjs.com/package/npm-run-all)\n        <dd>npm-scripts の連結実行を管理するためのパッケージ\n</dd>\n\n\t```\n\t$ npm install --save express body-parser mongoose\n\t$ npm install --save-dev @types/mongoose nodemon npm-run-all\n\t```\n\n\n\n### 2. サーバ側を作成\nAngular CLIで作ったプロジェクトの直下に`server`フォルダを作って、その中にサーバ側の処理を書いていきます。\n#### server/models/message.ts\nMongoDBにアクセスするためのモデルを定義します。\nDBアクセスにはmangoosを使います。\n\n```js:message.ts\nimport * as mongoose from 'mongoose';\n\nconst Message = mongoose.model('messages', new mongoose.Schema({\n  message: {type: String}\n}));\n\nexport { Message };\n```\n\n\n\n#### server/routes/message.ts\nエンドポイントごとの処理を記述するルータを定義します。\nメッセージの取得と登録には`server/models/message.ts`を使います。\n\n```js:message.ts\nimport * as http from 'http';\nimport { Router, Response } from 'express';\nimport { Message } from '../models/message';\n\nconst messageRouter: Router = Router();\n\n// 全てのメッセージを取得する\nmessageRouter.get('/', (req, res, next) => {\n  Message.find(function(err, doc) {\n    if (err) {\n      return res.status(500).json({\n          title: 'エラーが発生しました。',\n          error: err.message\n      });\n    }\n\n    return res.status(200).json({messages: doc});\n  });\n});\n\n// メッセージを登録する\nmessageRouter.post('/', (req, res, next) => {\n  const message = new Message({\n    message: req.body.message\n  });\n\n  message.save((err, result) => {\n    if (err) {\n      return res.status(500).json({\n          title: 'エラーが発生しました。',\n          error: err.message\n      });\n    }\n\n    return res.status(200).json({\n      message: 'メッセージを登録しました。',\n      obj: result\n    });\n  });\n});\n\nexport { messageRouter };\n```\n\n\n#### server/app.ts\nExpressで使用するルータと依存モジュールを定義するためのファイルを作成します。\nメッセージAPIのエンドポイントは`/api/messages`に設定し、\nmongooseを使ってMongoDBへの接続設定をしています。\nクライアント資産はビルドするとpublicフォルダ配下に出力されるようにしているので、\n静的資産へのルーティングはpublicフォルダを指定しています。\n\n```js:app.ts\nimport * as express from 'express';\nimport * as path from 'path';\nimport * as bodyParser from 'body-parser';\nimport * as mongoose from 'mongoose';\n\nimport { messageRouter } from './routes/message';\nimport { MONGO_URL } from './config';\n\nclass App {\n  public express: express.Application;\n\n  constructor() {\n    this.express = express();\n    this.middleware();\n    this.routes();\n  }\n\n  private middleware(): void {\n    this.express.use(bodyParser.json());\n    this.express.use(bodyParser.urlencoded({ extended: false }));\n    // 接続する MongoDB の設定\n    mongoose.Promise = global.Promise;\n    mongoose.connect(process.env.MONGO_URL || MONGO_URL, {\n      useMongoClient: true,\n    });\n    process.on('SIGINT', function() { mongoose.disconnect(); });\n  }\n\n  private routes(): void {\n    // 静的資産へのルーティング\n    this.express.use(express.static(path.join(__dirname, 'public')));\n\n    this.express.use('/api/messages', messageRouter);\n\n    // その他のリクエストはindexファイルにルーティング\n    this.express.get('*', (req, res) => {\n      res.sendFile(path.join(__dirname, 'public/index.html'));\n    });\n  }\n}\n\nexport default new App().express;\n```\n\n\n#### server/bin/www\\.ts\nNode.js でサーバを起動するための設定ファイルを作成します。\n\n```js:www.ts\nimport * as http from 'http';\nimport { SERVER_PORT } from '../config';\nimport app from '../app';\n\n\n\n// ポートの設定.\nconst port = normalizePort(process.env.PORT || SERVER_PORT);\napp.set('port', port);\n\n\n// HTTPサーバ生成.\nconst server = http.createServer(app);\nserver.listen(port, () => console.log(`API running on localhost:${port}`));\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n// ポートを正規化.\nfunction normalizePort(val): number|string|boolean  {\n\n  const normalizedPort: number = (typeof val === 'string')\n    ? parseInt(val, 10)\n    : val;\n\n  if (isNaN(normalizedPort)) {\n    return val;\n  }\n\n  if (normalizedPort >= 0) {\n    return normalizedPort;\n  }\n\n  return false;\n}\n\n// エラーハンドラー.\nfunction onError(error): void {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  const bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n// サーバ起動時のリスナー.\nfunction onListening(): void {\n  const addr = server.address();\n  const bind = (typeof addr === 'string')\n    ? `pipe ${addr}`\n    : `port ${addr.port}`;\n}\n```\n\n#### server/config.ts\nサーバ側の設定ファイルを作成します。\nポートとMongoDBのURLを定義しています。\n今回MongoDBはローカルにポート27017で立てる想定です。\n\n```js:config.ts\nexport const SERVER_PORT = 3000;\nexport const MONGO_URL = 'mongodb://localhost:27017/test';\n```\n\n\n\n### 3. クライアント側を作成\nAngular CLIでプロジェクトを作成すると最低限のクライアント資産が生成されるので、\nここでは修正が必要なファイル、新規作成するファイルのみ紹介します。\n\n\n#### src/app/message/message.service.ts\nサーバ側からメッセージを取得するためのサービスを新規作成します。\n\n```js:message.service.ts\nimport { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\nimport 'rxjs/Rx';\n\n@Injectable()\nexport class MessageService {\n\n  constructor(private http: Http) {}\n\n  getAll(): Observable<any> {\n    return this.http\n        .get('/api/messages')\n        .map((response: Response) => {\n            const result = response.json();\n            return result;\n        })\n        .catch((error: Response) => Observable.throw(error.json()));\n  }\n\n  regist(message: string): Observable<any> {\n    return this.http\n      .post('/api/messages', {message: message})\n      .map((response: Response) => {\n            const result = response.json();\n            return result;\n      })\n      .catch((error: Response) => Observable.throw(error.json()));\n  }\n}\n```\n\n\n\n\n\n#### src/app/app.component.ts\n既存のファイルを修正して、messagesを保持するようにします。\nMessageServiceを使ってメッセージを取得します。\n\n```js:app.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { MessageService } from './message/message.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  providers: [ MessageService ]\n})\nexport class AppComponent {\n  messages: Array<any>;\n  message: string;\n\n  constructor(private messageService: MessageService) {\n    this.getMessages();\n  }\n\n  getMessages(): void {\n    this.messageService\n      .getAll()\n      .subscribe((res: any) => {\n        this.messages = res.messages;\n      });\n  }\n\n  registerMessage(): void {\n    if (!this.message) {\n      return;\n    }\n\n    this.messageService\n      .register(this.message)\n      .subscribe((res: any) => {\n        this.message = '';\n        this.getMessages();\n      });\n  }\n}\n```\n\n\n#### src/app/app.component.html\n既存のファイルの修正して、メッセージ一覧と登録のUIに書き換えます。\n\n```html:app.component.html\n<div>\n  <div>\n    <h1>メッセージ一覧</h1>\n    <button id=\"getMessagesButton\" (click)=\"getMessages()\">メッセージ一覧を最新化</button>\n    <ul id=\"messageList\">\n      <li *ngFor=\"let item of messages\">\n        {{item.message}}\n      </li>\n    </ul>\n  </div>\n  <div>\n    <h1>メッセージ登録</h1>\n    <input type=\"text\" id=\"registerMessage\" [(ngModel)]=\"message\" placeholder=\"登録するメッセージを入力してください。\">\n    <button type=\"submit\" id=\"registerMessageButton\" (click)='registerMessage()'>登録</button>\n  </div>\n</div>\n```\n#### src/app/app.module.ts\nHttpModule、FormsModule、MessageServiceを追加します。\n\n\n```js:app.module.ts\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpModule } from '@angular/http';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { MessageService } from './message/message.service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpModule,\n    FormsModule\n  ],\n  providers: [MessageService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n```\n\n\n### 4. ビルドまわり環境を整備\n\n#### pakcage.json\nスクリプトを下記のように修正します。\n(npm scriptsは便利ですが、コメントが記述できないのが残念だなーと思いました。)\n\n```json:package.json\n\n  \"scripts\": {\n    ...\n    \"start\": \"npm-run-all -s build:server -p start:*\",\n    \"start:client\": \"ng serve --aot=true --progress=false --proxy-config proxy.conf.json\",\n    \"start:server\": \"run-p watch:server boot:server\",\n    \"watch:server\": \"tsc -w -p ./server/tsconfig.server.json\",\n    \"boot:server\": \"nodemon ./dist/server/bin/www.js\",\n    \"build\": \"run-s build:server build:client\",\n    \"build:client\": \"ng build --output-path=./dist/server/public\",\n    \"build:server\": \"tsc -p ./server/tsconfig.server.json\",\n    \"buildRun\": \"run-s build boot:server\",\n    ...\n  },\n```\n\n* **start**でクライアント資産とサーバ資産の両方を起動します。\n* **start:client**でクライアント資産をコンパイルして起動します。Angular CLIのngコマンドにお任せしています。なおstartではクライアント資産とサーバ資産で二つのサーバを起動するので、クライアントからサーバへ（リクエストを送れるようにプロキシ設定を行っています。プロキシ設定ファイルについては下で触れます。\n* **start:server**でサーバ資産をコンパイルしてExpressを起動します。\n* **watch:server**でサーバ側のTypeScriptをウォッチして変更があればコンパイルするようにします。\n* **boot:server**でコンパイルしたサーバ側資産を起動します。nodeではなくnodemonを使うことでコンパイルしたサーバ資産に更新があった場合でも即座に更新を反映するようにしています。\n* **build**クライアント資産とサーバ資産の両方をコンパイルします。\n* **build:server**でサーバ資産をコンパイルしています。コンパイル時の設定は下で触れる`/server/tsconfig.server.json`を使います。\n* **build:client**でクライアント資産をコンパイルしています。出力先はサーバ側資産の静的ファイル格納フォルダ（`dist/server/public`）を指定しています。\n* **buildRun**でクライアント資産とサーバ資産の両方をコンパイルしサーバ資産を起動します。とりあえずデプロイするアプリを起動したい時の便利コマンドです。\n\n\n\n#### server/tsconfig.server.json\nサーバ資産コンパイルときの設定ファイルを作成します。\n`outDir`で出力先をdist/serverに指定しています。\n\n```json:tsconfig.server.json\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"preserveConstEnums\": true,\n    \"outDir\": \"../dist/server\",\n    \"mapRoot\": \"../dist/server\",\n    \"module\": \"commonjs\"\n  }\n}\n```\n\n#### proxy.conf.json\n`start`でクライアントとサーバの２つを起動した時に、クラ\nイアントからサーバへのリクエストを送れるようにするためのプロキシ設定ファイルを作成します。\n`/api`始まるリクエストをサーバへのリクエストとみなしてプロキシ設定を行います。\n\n```json:proxy.conf.json\n{\n  \"/api\": {\n    \"target\": \"http://localhost:3000\",\n    \"secure\": false\n  }\n}\n```\n\n#### MongoDBをローカルで立ち上げる\n具体的な方法について触れませんが、Dockerでもなんでもいいのでローカルにポート27017でMongoDBを立ち上げておいてください。DB、テーブルの作成などは不要です。\n\n\n\n### 5. 試してみる\n#### アプリを起動してみる\n* プロジェクト直下で下記コマンドを実行するとアプリが起動します。\n\n\t```\n\t$ npm start \n\t```\n\n* 起動したら`http://localhost:4200`にアクセスしてみます。すると下記のようにメッセージ一覧画面が表示され、メッセージを登録すると適宜一覧に追加されていきます。\n\n![アプリ概要.png](https://qiita-image-store.s3.amazonaws.com/0/49915/301875a6-1116-60f3-11a9-df6eb55f54c2.png)\n\n* 試しにクライアント資産かサーバ資産を修正してみると、コンンパイルされてアプリに変更がリアルタイムに反映されることがわかります。\n\n#### アプリをビルドしてみる\n* プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力されます。\n\n\t```\n\t$ npm run build\n\t```\n\n#### アプリをビルドして起動してみる\n* プロジェクト直下で下記コマンドを実行するとアプリがビルドされdistフォルダ配下に出力された後に起動されます。\nビルドしたアプリは`http://localhost:3000`でアクセスできます。\n\t```\n\t$ npm run buildRun\n\t```\n\n## 終わりに\n今回はAngular CLIベースのプロジェクトをベースにしてMEANスタックの最小構成プロジェクトを構築する方法を紹介しました。プロジェクトを起動、ビルドすることはできるようになったので、次回「[その２. テスト編](http://qiita.com/Takumon/items/b4211fcabad740baa551)」ではテストコードの作成とテスト実施環境の構築について紹介しようと思います。\n\n\n","comments_count":0,"created_at":"2017-07-19T02:06:59+09:00","likes_count":27,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"JavaScript"},{"weight":50,"keyword":"JavaScript"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/386efa75-7773-5424-94a8-1a2b3ae52a6b/","title":"Asciidoc文法クイックリファレンスの日本語訳","date":"2017-05-29T03:14:20+09:00","excerpt":"概要AsciiDoc Syntax Quick Reference を日本語訳したものです。ところどころ意訳したり、補足説明を追加したりしています。これからAsciidoctorを使ってみようという方々のお役に立てれば幸いです。ドキュメント...","tags":["Markdown","ドキュメント","asciidoctor","asciidoc","Qiita"],"keywords":["Markdown"],"thumbnail":""},"id":"386efa75-7773-5424-94a8-1a2b3ae52a6b","title":"Asciidoc文法クイックリファレンスの日本語訳","rendered_body":"\n<h1>\n<span id=\"概要\" class=\"fragment\"></span><a href=\"#%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>概要</h1>\n\n<p><a href=\"http://asciidoctor.org/docs/asciidoc-syntax-quick-reference/\" rel=\"nofollow noopener\" target=\"_blank\">AsciiDoc Syntax Quick Reference</a> を日本語訳したものです。<br>\nところどころ意訳したり、補足説明を追加したりしています。<br>\nこれからAsciidoctorを使ってみようという方々のお役に立てれば幸いです。</p>\n\n<h1>\n<span id=\"ドキュメントのurl\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AEurl\"><i class=\"fa fa-link\"></i></a>ドキュメントのURL</h1>\n\n<p>GitHub Pagesの下記URLにて公開しています。<br>\n<a href=\"https://takumon.github.io/asciidoc-syntax-quick-reference-japanese-translation/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://takumon.github.io/asciidoc-syntax-quick-reference-japanese-translation/</a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/f9d71b849f52ad0e5c128d814f813939a770567a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36616463636335332d623866322d323964302d613461382d3738656639326461306236382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/f9d71b849f52ad0e5c128d814f813939a770567a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36616463636335332d623866322d323964302d613461382d3738656639326461306236382e706e67\" alt=\"スクリーンショット 2017-06-03 12.43.12.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/6adccc53-b8f2-29d0-a4a8-78ef92da0b68.png\"></a></p>\n\n<h1>\n<span id=\"asciidoctorとは\" class=\"fragment\"></span><a href=\"#asciidoctor%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Asciidoctorとは</h1>\n\n<p>AsciidoctorはAsciidocコンテンツをHTML5やDocBook 5、PDFに変換するためのツール群です。Rubyで実装されておりRubyGem.orgでパッケージが公開されています。オープンソースでGithubにホストされており、MITライセンスです。</p>\n\n<h1>\n<span id=\"asciidocとは\" class=\"fragment\"></span><a href=\"#asciidoc%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Asciidocとは</h1>\n\n<p>Markdownなどのような軽量マークアップ言語の一つです。Markdownよりも高い表現力、高い可読性を持ち合わせたもので、技術文書を書くのに適しています。<br>\nまたOffice文章と比べてもテキストベースなので、軽量で、GITなどの構成管理ツールと相性が良いといったメリットがあります。</p>\n","body":"# 概要\n[AsciiDoc Syntax Quick Reference](http://asciidoctor.org/docs/asciidoc-syntax-quick-reference/) を日本語訳したものです。\nところどころ意訳したり、補足説明を追加したりしています。\nこれからAsciidoctorを使ってみようという方々のお役に立てれば幸いです。\n\n# ドキュメントのURL\nGitHub Pagesの下記URLにて公開しています。\nhttps://takumon.github.io/asciidoc-syntax-quick-reference-japanese-translation/\n\n![スクリーンショット 2017-06-03 12.43.12.png](https://qiita-image-store.s3.amazonaws.com/0/49915/6adccc53-b8f2-29d0-a4a8-78ef92da0b68.png)\n\n# Asciidoctorとは\nAsciidoctorはAsciidocコンテンツをHTML5やDocBook 5、PDFに変換するためのツール群です。Rubyで実装されておりRubyGem.orgでパッケージが公開されています。オープンソースでGithubにホストされており、MITライセンスです。\n\n# Asciidocとは\nMarkdownなどのような軽量マークアップ言語の一つです。Markdownよりも高い表現力、高い可読性を持ち合わせたもので、技術文書を書くのに適しています。\nまたOffice文章と比べてもテキストベースなので、軽量で、GITなどの構成管理ツールと相性が良いといったメリットがあります。\n\n\n","comments_count":2,"created_at":"2017-05-29T03:14:20+09:00","likes_count":14,"reactions_count":0},"matches":3,"weight":150,"details":[{"weight":50,"keyword":"ドキュメント"},{"weight":50,"keyword":"asciidoctor"},{"weight":50,"keyword":"Qiita"}],"avgWeight":50,"totalWeight":44,"threshold":16.666666666666668,"isRelated":true}]},{"node":{"fields":{"slug":"/94324d66-4d90-51bd-8970-5e5fce7ed13c/","title":"Jenkins PipelineでYamlを設定ファイルとして使う方法","date":"2017-06-17T12:14:16+09:00","excerpt":"Jenkins PipelineのJenkinsfileを作っていて、設定ファイル(Gradleでいう、gradle.propertiesのような感じ)が欲しいと思う時があります。今回はYamlファイルをJnekinsfileから読み込んで...","tags":["Jenkins","CI","Pipeline","Qiita"],"keywords":["Jenkins"],"thumbnail":""},"id":"94324d66-4d90-51bd-8970-5e5fce7ed13c","title":"Jenkins PipelineでYamlを設定ファイルとして使う方法","rendered_body":"<p>Jenkins PipelineのJenkinsfileを作っていて、設定ファイル(Gradleでいう、gradle.propertiesのような感じ)が欲しいと思う時があります。今回はYamlファイルをJnekinsfileから読み込んで設定ファイルとして使う方法をご紹介します。</p>\n\n<h1>\n<span id=\"1-pipeline-utility-steps-pluginをインストール\" class=\"fragment\"></span><a href=\"#1-pipeline-utility-steps-plugin%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>1. <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Utility+Steps+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Pipeline Utility Steps Plugin</a>をインストール</h1>\n\n<p>Jenkinsで様々な形式のファイルが簡単に読み込めるようになるプラグインです。Yamlファイルの読み込みに使います。Jenkins初期設定時のSuggested Pluginには入っていないので、自分でインストールしましょう。</p>\n\n<h1>\n<span id=\"2-configymlを作成\" class=\"fragment\"></span><a href=\"#2-configyml%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2. config.ymlを作成</h1>\n\n<p>プロジェクト直下（Jenkinsfileと同じ場所）にconfig.ymlを作ります。 </p>\n\n<div class=\"code-frame\" data-lang=\"yaml\">\n<div class=\"code-lang\"><span class=\"bold\">config.yml</span></div>\n<div class=\"highlight\"><pre><span class=\"na\">someProp</span><span class=\"pi\">:</span> <span class=\"s\">値１</span>\n<span class=\"na\">someCategory</span><span class=\"pi\">:</span>\n  <span class=\"na\">prop</span><span class=\"pi\">:</span> <span class=\"s\">値２</span>\n  <span class=\"na\">arrayProp</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"s\">配列値０</span>\n    <span class=\"pi\">-</span> <span class=\"s\">配列値１</span>\n    <span class=\"pi\">-</span> <span class=\"s\">配列値２</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"3-jenkinsfileを作成\" class=\"fragment\"></span><a href=\"#3-jenkinsfile%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>3. Jenkinsfileを作成</h1>\n\n<p>Jenkinsfileを下記のようにします。今回はDeclarative Pipelineの書き方ですが、Scripted Pipelinesでもほとんど同じ書き方だと思います。</p>\n\n<div class=\"code-frame\" data-lang=\"groovy\">\n<div class=\"code-lang\"><span class=\"bold\">Jenkinsfie</span></div>\n<div class=\"highlight\"><pre><span class=\"n\">pipeline</span> <span class=\"o\">{</span>\n    <span class=\"n\">agent</span> <span class=\"n\">any</span>\n\n    <span class=\"n\">environment</span> <span class=\"o\">{</span>\n        <span class=\"n\">CONFIG</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span> <span class=\"c1\">//この時点ではプロジェクトの設定ファイルを読み込めないので仮の値を設定しておく</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">stages</span> <span class=\"o\">{</span>\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'チェックアウトして設定ファイル読み込み'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// プロジェクトをチェックアウト</span>\n                <span class=\"n\">checkout</span> <span class=\"n\">scm</span>\n\n                <span class=\"n\">script</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">// チェックアウト後に設定ファイルを読み込む</span>\n                    <span class=\"c1\">// Pipeline Utility Steps Pluginの関数を使う</span>\n                    <span class=\"n\">CONFIG</span> <span class=\"o\">=</span> <span class=\"n\">readYaml</span><span class=\"o\">(</span><span class=\"nl\">file:</span> <span class=\"s1\">'config.yml'</span><span class=\"o\">)</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'設定ファイル参照'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"n\">echo</span> <span class=\"s2\">\"CONFIG.someProp ＝ ${CONFIG.someProp}\"</span>\n                <span class=\"n\">echo</span> <span class=\"s2\">\"CONFIG.someCategory.prop ＝ ${CONFIG.someCategory.prop}\"</span>\n                <span class=\"n\">echo</span> <span class=\"s2\">\"CONFIG.someCategory.arrayProp[0] ＝ ${CONFIG.someCategory.arrayProp[0]}\"</span>\n                <span class=\"n\">echo</span> <span class=\"s2\">\"CONFIG.someCategory.arrayProp[1] ＝ ${CONFIG.someCategory.arrayProp[1]}\"</span>\n                <span class=\"n\">echo</span> <span class=\"s2\">\"CONFIG.someCategory.arrayProp[2] ＝ ${CONFIG.someCategory.arrayProp[2]}\"</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>これでJobを実行すると下記のようなコンソールログが出力されます。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">Jenkinsのコンソール出力（一部抜粋）</span></div>\n<div class=\"highlight\"><pre>[Pipeline] { (設定ファイル参照)\n[Pipeline] echo\nCONFIG.someProp ＝ 値１\n[Pipeline] echo\nCONFIG.someCategory.prop ＝ 値２\n[Pipeline] echo\nCONFIG.someCategory.arrayProp[0] ＝ 配列値０\n[Pipeline] echo\nCONFIG.someCategory.arrayProp[1] ＝ 配列値１\n[Pipeline] echo\nCONFIG.someCategory.arrayProp[2] ＝ 配列値２\n</pre></div>\n</div>\n\n<h2>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h2>\n\n<p>今回はYamlファイルをJenkins Pipelineの設定ファイルとして使ってみました。<br>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Utility+Steps+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Pipeline Utility Steps Plugin</a>はpropertiesファイルも読み込めるので、gradle.propertiesを読み込んで、設定ファイルをGradleとJenkins Pipelineで共有することもできそうです。</p>\n","body":"Jenkins PipelineのJenkinsfileを作っていて、設定ファイル(Gradleでいう、gradle.propertiesのような感じ)が欲しいと思う時があります。今回はYamlファイルをJnekinsfileから読み込んで設定ファイルとして使う方法をご紹介します。\n\n# 1. [Pipeline Utility Steps Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Utility+Steps+Plugin)をインストール\nJenkinsで様々な形式のファイルが簡単に読み込めるようになるプラグインです。Yamlファイルの読み込みに使います。Jenkins初期設定時のSuggested Pluginには入っていないので、自分でインストールしましょう。\n\n# 2. config.ymlを作成\nプロジェクト直下\u001c（Jenkinsfileと同じ場所）にconfig.ymlを作ります。 \n\n```yaml:config.yml\nsomeProp: 値１\nsomeCategory:\n  prop: 値２\n  arrayProp:\n    - 配列値０\n    - 配列値１\n    - 配列値２\n```\n\n# 3. Jenkinsfileを作成\nJenkinsfileを下記のようにします。今回はDeclarative Pipelineの書き方ですが、Scripted Pipelinesでもほとんど同じ書き方だと思います。\n\n```groovy:Jenkinsfie\npipeline {\n    agent any\n    \n    environment {\n        CONFIG = \"\" //この時点ではプロジェクトの設定ファイルを読み込めないので仮の値を設定しておく\n    }\n    \n    stages {\n        stage('チェックアウトして設定ファイル読み込み') {\n            steps {\n                // プロジェクトをチェックアウト\n                checkout scm\n                \n                script {\n                    // チェックアウト後に設定ファイルを読み込む\n                    // Pipeline Utility Steps Pluginの関数を使う\n                    CONFIG = readYaml(file: 'config.yml')\n                }\n            }\n        }\n        \n        stage('設定ファイル参照') {\n            steps {\n                echo \"CONFIG.someProp ＝ ${CONFIG.someProp}\"\n                echo \"CONFIG.someCategory.prop ＝ ${CONFIG.someCategory.prop}\"\n                echo \"CONFIG.someCategory.arrayProp[0] ＝ ${CONFIG.someCategory.arrayProp[0]}\"\n                echo \"CONFIG.someCategory.arrayProp[1] ＝ ${CONFIG.someCategory.arrayProp[1]}\"\n                echo \"CONFIG.someCategory.arrayProp[2] ＝ ${CONFIG.someCategory.arrayProp[2]}\"\n            }\n        }\n    }\n}\n```\n\nこれでJobを実行すると下記のようなコンソールログが出力されます。\n\n```:Jenkinsのコンソール出力（一部抜粋）\n[Pipeline] { (設定ファイル参照)\n[Pipeline] echo\nCONFIG.someProp ＝ 値１\n[Pipeline] echo\nCONFIG.someCategory.prop ＝ 値２\n[Pipeline] echo\nCONFIG.someCategory.arrayProp[0] ＝ 配列値０\n[Pipeline] echo\nCONFIG.someCategory.arrayProp[1] ＝ 配列値１\n[Pipeline] echo\nCONFIG.someCategory.arrayProp[2] ＝ 配列値２\n```\n\n\n\n## 最後に\n今回はYamlファイルをJenkins Pipelineの設定ファイルとして使ってみました。\n[Pipeline Utility Steps Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Utility+Steps+Plugin)はpropertiesファイルも読み込めるので、gradle.propertiesを読み込んで、設定ファイルをGradleとJenkins Pipelineで共有することもできそうです。\n","comments_count":0,"created_at":"2017-06-17T12:14:16+09:00","likes_count":3,"reactions_count":0},"relations":[{"node":{"fields":{"slug":"/4bf6ffd5-8640-508e-ab47-1a55df05d72e/","title":"Declarative PipelineでJenkinsfileを書いてみた(Checkstyle,Findbugs,PMD,CPDとか)","date":"2017-04-07T02:38:55+09:00","excerpt":"GradleのJavaアプリをJenkinsで１人CIするためのJenkinsfileを書いてみた。Githubにプッシュ時に、AWS上のJenkinsのパイプラインジョブが動いて、テストが成功したら同じくAWS上のTomcatにデプロイす...","tags":["Java","Jenkins","CI","gradle","Pipeline","Qiita"],"keywords":["Java"],"thumbnail":""},"id":"4bf6ffd5-8640-508e-ab47-1a55df05d72e","title":"Declarative PipelineでJenkinsfileを書いてみた(Checkstyle,Findbugs,PMD,CPDとか)","rendered_body":"<p>GradleのJavaアプリをJenkinsで１人CIするためのJenkinsfileを書いてみた。<br>\nGithubにプッシュ時に、AWS上のJenkinsのパイプラインジョブが動いて、テストが成功したら同じくAWS上のTomcatにデプロイするみたいな感じで使ってます。</p>\n\n<h1>\n<span id=\"declarative-pipeline\" class=\"fragment\"></span><a href=\"#declarative-pipeline\"><i class=\"fa fa-link\"></i></a>Declarative Pipeline</h1>\n\n<p>いままではJenkinsfileを</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>node {\n  ....\n}\n</pre></div></div>\n\n<p>のように書いてましたが、<a href=\"https://jenkins.io/doc/book/pipeline/syntax/\" rel=\"nofollow noopener\" target=\"_blank\">Jenkinsの公式サイト</a>を見ると<br>\nこれはScripted Pipelinesの記法であり、<br>\nPipeline Pluginのバージョン2.5移行からは</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>pipeline {\n  ....  \n}\n</pre></div></div>\n\n<p>のように書くDeclarative Pipelineという記法が導入されて、<br>\nそっちのほうがシンプルでわかりやすく書けるよ!ということだったので書き直してみました。<br>\n確かにすっきりしたし（特に最後のメールおくるとことか、デプロイするとことか）、<br>\nいざとなったら従来のScripted Pipelinesもミックスできるのでいい感じです。</p>\n\n<h1>\n<span id=\"追加したプラグイン\" class=\"fragment\"></span><a href=\"#%E8%BF%BD%E5%8A%A0%E3%81%97%E3%81%9F%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3\"><i class=\"fa fa-link\"></i></a>追加したプラグイン</h1>\n\n<p>Jenkins初期設定時のSuggested Pluginに入っていないもの</p>\n\n<ul>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Checkstyle+Plugin;jsessionid=E9D4FA5064ACAE1CED7B19928DE0788F\" rel=\"nofollow noopener\" target=\"_blank\">Checkstyle Plugin</a>（v3.47） - Checkstyeの結果収集用</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/FindBugs+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">FindBugs Plugin</a>（v4.69） - Findbugsのレポート生成用 </li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/PMD+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">PMD Plugin</a>（v3.46） - PMDのレポート生成用</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/DRY+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">DRY Plugin</a>（v2.46） - CPD(重複コードチェック)のレポート生成用</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Step+Counter+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Step Counter Plugin</a>（v2.0.0） - ソースコードのステップ数を集計してくれる</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Task+Scanner+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Task Scanner Plugin</a>（v4.50） - ソースコード中のTODOとかを一覧化してくれる</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Javadoc+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Javadoc Plugin</a>（v1.4） - JavaDoc生成用</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Warnings+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Warnings Plugin</a>（v4.60） - ジョブ実行時の警告メッセージを収集してくれる</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/JaCoCo+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">JaCoCo Plugin</a>（v2.2.0） - テストカバレッジのレポート生成用</li>\n</ul>\n\n<h1>\n<span id=\"jenkinsfile\" class=\"fragment\"></span><a href=\"#jenkinsfile\"><i class=\"fa fa-link\"></i></a>Jenkinsfile</h1>\n\n<p>GithubからWebhookでJenkinsのパイプラインジョブを実行する。<br>\nパイプラインジョブではGithubのJenkinsfileを使う。<br>\nジョブの流れは下記。デプロイは静的コード解析とテストが成功したときだけ実行する。<br>\n<a href=\"https://camo.qiitausercontent.com/a055f84cfb5b829f162a94d38542e6ab990a5199/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35366338653132642d323637622d613633372d323234652d6663386362333437346466612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a055f84cfb5b829f162a94d38542e6ab990a5199/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35366338653132642d323637622d613633372d323234652d6663386362333437346466612e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/56c8e12d-267b-a637-224e-fc8cb3474dfa.png\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"groovy\">\n<div class=\"code-lang\"><span class=\"bold\">Jenkinsfile</span></div>\n<div class=\"highlight\"><pre><span class=\"n\">pipeline</span> <span class=\"o\">{</span>\n    <span class=\"n\">agent</span> <span class=\"n\">any</span>\n    <span class=\"c1\">// 定数や変数を定義する</span>\n    <span class=\"n\">environment</span> <span class=\"o\">{</span>\n        <span class=\"n\">reportDir</span> <span class=\"o\">=</span> <span class=\"s1\">'build/reports'</span>\n        <span class=\"n\">javaDir</span> <span class=\"o\">=</span> <span class=\"s1\">'src/main/java'</span>\n        <span class=\"n\">resourcesDir</span> <span class=\"o\">=</span> <span class=\"s1\">'src/main/resources'</span>\n        <span class=\"n\">testReportDir</span> <span class=\"o\">=</span> <span class=\"s1\">'build/test-results/test'</span>\n        <span class=\"n\">jacocoReportDir</span> <span class=\"o\">=</span> <span class=\"s1\">'build/jacoco'</span> \n        <span class=\"n\">javadocDir</span> <span class=\"o\">=</span> <span class=\"s1\">'build/docs/javadoc'</span>\n        <span class=\"n\">libsDir</span> <span class=\"o\">=</span> <span class=\"s1\">'build/libs'</span>\n        <span class=\"n\">appName</span> <span class=\"o\">=</span> <span class=\"s1\">'SampleApp'</span>\n        <span class=\"n\">appVersion</span> <span class=\"o\">=</span> <span class=\"s1\">'1.0.0'</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// stagesブロック中に一つ以上のstageを定義する</span>\n    <span class=\"n\">stages</span> <span class=\"o\">{</span>\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'事前準備'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 実際の処理はstepsブロック中に定義する</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"n\">deleteDir</span><span class=\"o\">()</span>\n\n                <span class=\"c1\">// このJobをトリガーしてきたGithubのプロジェクトをチェックアウト</span>\n                <span class=\"n\">checkout</span> <span class=\"n\">scm</span>\n\n                <span class=\"c1\">// ジョブ失敗の原因調査用にJenkinsfileとbuild.gradleは最初に保存する</span>\n                <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"Jenkinsfile\"</span>\n                <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"build.gradle\"</span>\n\n                <span class=\"c1\">// scriptブロックを使うと従来のScripted Pipelinesの記法も使える</span>\n                <span class=\"n\">script</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">// Permission deniedで怒られないために実行権限を付与する</span>\n                    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">isUnix</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                        <span class=\"n\">sh</span> <span class=\"s1\">'chmod +x gradlew'</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">gradlew</span> <span class=\"s1\">'clean'</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'コンパイル'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"n\">gradlew</span> <span class=\"s1\">'classes testClasses'</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"c1\">// postブロックでstepsブロックの後に実行される処理が定義できる</span>\n            <span class=\"n\">post</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// alwaysブロックはstepsブロックの処理が失敗しても成功しても必ず実行される</span>\n                <span class=\"n\">always</span> <span class=\"o\">{</span>\n\n                    <span class=\"c1\">// JavaDoc生成時に実行するとJavaDocの警告も含まれてしまうので</span>\n                    <span class=\"c1\">// Javaコンパイル時の警告はコンパイル直後に収集する</span>\n                    <span class=\"n\">step</span><span class=\"o\">([</span>\n\n                        <span class=\"c1\">// プラグインを実行するときのクラス指定は完全修飾名でなくてもOK</span>\n                        <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'WarningsPublisher'</span><span class=\"o\">,</span>\n\n                        <span class=\"c1\">// Job実行時のコンソールから警告を収集する場合はconsoleParsers、</span>\n                        <span class=\"c1\">// pmd.xmlなどのファイルから収集する場合はparserConfigurationsを指定する。</span>\n                        <span class=\"c1\">// なおparserConfigurationsの場合はparserNameのほかにpattern(集計対象ファイルのパス)も指定が必要</span>\n                        <span class=\"c1\">// パーサ名は下記プロパティファイルに定義されているものを使う</span>\n                        <span class=\"c1\">// https://github.com/jenkinsci/warnings-plugin/blob/master/src/main/resources/hudson/plugins/warnings/parser/Messages.properties</span>\n                        <span class=\"nl\">consoleParsers:</span> <span class=\"o\">[</span>\n                            <span class=\"o\">[</span><span class=\"nl\">parserName:</span> <span class=\"s1\">'Java Compiler (javac)'</span><span class=\"o\">],</span>\n                        <span class=\"o\">],</span>\n                        <span class=\"nl\">canComputeNew:</span> <span class=\"kc\">false</span><span class=\"o\">,</span>\n                        <span class=\"nl\">canResolveRelativesPaths:</span> <span class=\"kc\">false</span><span class=\"o\">,</span>\n                        <span class=\"nl\">usePreviousBuildAsReference:</span> <span class=\"kc\">true</span>\n                    <span class=\"o\">])</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'静的コード解析'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// 並列処理の場合はparallelメソッドを使う</span>\n                <span class=\"n\">parallel</span><span class=\"o\">(</span>\n                    <span class=\"s1\">'静的コード解析'</span> <span class=\"o\">:</span> <span class=\"o\">{</span>\n                        <span class=\"n\">gradlew</span> <span class=\"s1\">'check -x test'</span>\n\n                        <span class=\"c1\">// dirメソッドでカレントディレクトリを指定できる</span>\n                        <span class=\"n\">dir</span><span class=\"o\">(</span><span class=\"n\">reportDir</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                            <span class=\"n\">step</span><span class=\"o\">([</span>\n                                <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'CheckStylePublisher'</span><span class=\"o\">,</span>\n                                <span class=\"nl\">pattern:</span> <span class=\"s2\">\"checkstyle/*.xml\"</span>\n                            <span class=\"o\">])</span>\n                            <span class=\"n\">step</span><span class=\"o\">([</span>\n                                <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'FindBugsPublisher'</span><span class=\"o\">,</span>\n                                <span class=\"nl\">pattern:</span> <span class=\"s2\">\"findbugs/*.xml\"</span>\n                            <span class=\"o\">])</span>\n                            <span class=\"n\">step</span><span class=\"o\">([</span>\n                                <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'PmdPublisher'</span><span class=\"o\">,</span>\n                                <span class=\"nl\">pattern:</span> <span class=\"s2\">\"pmd/*.xml\"</span>\n                            <span class=\"o\">])</span>\n                            <span class=\"n\">step</span><span class=\"o\">([</span>\n                                <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'DryPublisher'</span><span class=\"o\">,</span>\n                                <span class=\"nl\">pattern:</span> <span class=\"s2\">\"cpd/*.xml\"</span>\n                            <span class=\"o\">])</span>\n\n                            <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"checkstyle/*.xml\"</span>\n                            <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"findbugs/*.xml\"</span>\n                            <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"pmd/*.xml\"</span>\n                            <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"cpd/*.xml\"</span>\n                        <span class=\"o\">}</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"s1\">'ステップカウント'</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n                        <span class=\"c1\">// レポート作成</span>\n                        <span class=\"c1\">// outputFileとoutputFormatを指定するとエクセルファイルも作成してくれる</span>\n                        <span class=\"n\">stepcounter</span> <span class=\"nl\">outputFile:</span> <span class=\"s1\">'stepcount.xls'</span><span class=\"o\">,</span> <span class=\"nl\">outputFormat:</span> <span class=\"s1\">'excel'</span><span class=\"o\">,</span> <span class=\"nl\">settings:</span> <span class=\"o\">[</span>\n                            <span class=\"o\">[</span><span class=\"nl\">key:</span><span class=\"s1\">'Java'</span><span class=\"o\">,</span> <span class=\"nl\">filePattern:</span> <span class=\"s2\">\"${javaDir}/**/*.java\"</span><span class=\"o\">],</span>\n                            <span class=\"o\">[</span><span class=\"nl\">key:</span><span class=\"s1\">'SQL'</span><span class=\"o\">,</span> <span class=\"nl\">filePattern:</span> <span class=\"s2\">\"${resourcesDir}/**/*.sql\"</span><span class=\"o\">],</span>\n                            <span class=\"o\">[</span><span class=\"nl\">key:</span><span class=\"s1\">'HTML'</span><span class=\"o\">,</span> <span class=\"nl\">filePattern:</span> <span class=\"s2\">\"${resourcesDir}/**/*.html\"</span><span class=\"o\">],</span>\n                            <span class=\"o\">[</span><span class=\"nl\">key:</span><span class=\"s1\">'JS'</span><span class=\"o\">,</span> <span class=\"nl\">filePattern:</span> <span class=\"s2\">\"${resourcesDir}/**/*.js\"</span><span class=\"o\">],</span>\n                            <span class=\"o\">[</span><span class=\"nl\">key:</span><span class=\"s1\">'CSS'</span><span class=\"o\">,</span> <span class=\"nl\">filePattern:</span> <span class=\"s2\">\"${resourcesDir}/**/*.css\"</span><span class=\"o\">]</span>\n                        <span class=\"o\">]</span>\n                        <span class=\"c1\">// 一応エクセルファイルも成果物として保存する</span>\n                        <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"stepcount.xls\"</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"s1\">'タスクスキャン'</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n                        <span class=\"n\">step</span><span class=\"o\">([</span>\n                            <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'TasksPublisher'</span><span class=\"o\">,</span>\n                            <span class=\"nl\">pattern:</span> <span class=\"s1\">'./**'</span><span class=\"o\">,</span>\n                            <span class=\"c1\">// 集計対象を検索するときに大文字小文字を区別するか</span>\n                            <span class=\"nl\">ignoreCase:</span> <span class=\"kc\">true</span><span class=\"o\">,</span>\n                            <span class=\"c1\">// 優先度別に集計対象の文字列を指定できる</span>\n                            <span class=\"c1\">// 複数指定する場合はカンマ区切りの文字列を指定する</span>\n                            <span class=\"nl\">high:</span> <span class=\"s1\">'System.out.System.err'</span><span class=\"o\">,</span>\n                            <span class=\"nl\">normal:</span> <span class=\"s1\">'TODO,FIXME,XXX'</span><span class=\"o\">,</span>\n                        <span class=\"o\">])</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"s1\">'JavaDoc'</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n                        <span class=\"n\">gradlew</span> <span class=\"s1\">'javadoc -x classes'</span>\n                        <span class=\"n\">step</span><span class=\"o\">([</span>\n                            <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'JavadocArchiver'</span><span class=\"o\">,</span>\n                            <span class=\"c1\">// Javadocのindex.htmlがあるフォルダのパスを指定する</span>\n                            <span class=\"nl\">javadocDir:</span> <span class=\"s2\">\"${javadocDir}\"</span><span class=\"o\">,</span>\n                            <span class=\"nl\">keepAll:</span> <span class=\"kc\">true</span>\n                        <span class=\"o\">])</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">)</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"n\">post</span> <span class=\"o\">{</span>\n                <span class=\"n\">always</span> <span class=\"o\">{</span>\n                   <span class=\"c1\">// JavaDocの警告を収集</span>\n                    <span class=\"n\">step</span><span class=\"o\">([</span>\n                        <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'WarningsPublisher'</span><span class=\"o\">,</span>\n                        <span class=\"nl\">consoleParsers:</span> <span class=\"o\">[</span>\n                            <span class=\"o\">[</span><span class=\"nl\">parserName:</span> <span class=\"s1\">'JavaDoc Tool'</span><span class=\"o\">]</span>\n                        <span class=\"o\">],</span>\n                        <span class=\"nl\">canComputeNew:</span> <span class=\"kc\">false</span><span class=\"o\">,</span>\n                        <span class=\"nl\">canResolveRelativesPaths:</span> <span class=\"kc\">false</span><span class=\"o\">,</span>\n                        <span class=\"nl\">usePreviousBuildAsReference:</span> <span class=\"kc\">true</span>\n                    <span class=\"o\">])</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'テスト'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"n\">gradlew</span> <span class=\"s1\">'test jacocoTestReport -x classes -x testClasses'</span>\n\n                <span class=\"n\">junit</span> <span class=\"s2\">\"${testReportDir}/*.xml\"</span>\n                <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"${testReportDir}/*.xml\"</span>\n\n                <span class=\"c1\">// カバレッジレポートを生成（テストクラスを除外）</span>\n                <span class=\"n\">step</span><span class=\"o\">([</span>\n                    <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'JacocoPublisher'</span><span class=\"o\">,</span>\n                    <span class=\"nl\">execPattern:</span> <span class=\"s2\">\"${jacocoReportDir}/*.exec\"</span><span class=\"o\">,</span>\n                    <span class=\"nl\">exclusionPattern:</span> <span class=\"s1\">'**/*Test.class'</span>\n                <span class=\"o\">])</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'デプロイ'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// whenブロックでstageを実行する条件を指定できる</span>\n            <span class=\"n\">when</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// 静的コード解析とテスト失敗時はデプロイしない</span>\n                <span class=\"n\">expression</span> <span class=\"o\">{</span><span class=\"n\">currentBuild</span><span class=\"o\">.</span><span class=\"na\">currentResult</span> <span class=\"o\">==</span> <span class=\"s1\">'SUCCESS'</span><span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"n\">gradlew</span> <span class=\"s1\">'jar'</span>\n                <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"${libsDir}/${appName}-${appVersion}.jar\"</span>\n                <span class=\"n\">gradlew</span> <span class=\"s1\">'war'</span>\n                <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"${libsDir}/${appName}-${appVersion}.war\"</span>\n                <span class=\"n\">deploy</span> <span class=\"nl\">warDir:</span> <span class=\"n\">libsDir</span><span class=\"o\">,</span> <span class=\"nl\">appName:</span> <span class=\"n\">appName</span><span class=\"o\">,</span> <span class=\"nl\">appVersion:</span> <span class=\"n\">appVersion</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// stagesブロックと同じレベルにpostブロックを定義すると</span>\n    <span class=\"c1\">// 全てのstage処理が終わった後の処理の定義が可能    </span>\n    <span class=\"n\">post</span> <span class=\"o\">{</span>\n        <span class=\"n\">always</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 最後にワークスペースの中身を削除</span>\n            <span class=\"n\">deleteDir</span><span class=\"o\">()</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 連続で成功しているとき以外は自分宛にメールを送信</span>\n\n        <span class=\"c1\">// 結果が前回と変わった時</span>\n        <span class=\"n\">changed</span> <span class=\"o\">{</span>\n            <span class=\"n\">sendMail</span><span class=\"o\">(</span><span class=\"s2\">\"${currentBuild.previousBuild.result} =&gt; ${currentBuild.currentResult}\"</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 失敗した時</span>\n        <span class=\"n\">failure</span> <span class=\"o\">{</span>\n            <span class=\"n\">sendMail</span><span class=\"o\">(</span><span class=\"n\">currentBuild</span><span class=\"o\">.</span><span class=\"na\">currentResult</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 不安定な時（主にテスト失敗時）</span>\n        <span class=\"n\">unstable</span> <span class=\"o\">{</span>\n            <span class=\"n\">sendMail</span><span class=\"o\">(</span><span class=\"n\">currentBuild</span><span class=\"o\">.</span><span class=\"na\">currentResult</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n\n<span class=\"c1\">// Gradlewコマンドを実行する</span>\n<span class=\"kt\">def</span> <span class=\"nf\">gradlew</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">isUnix</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"n\">sh</span> <span class=\"s2\">\"./gradlew ${command} --stacktrace\"</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n        <span class=\"n\">bat</span> <span class=\"s2\">\"./gradlew.bat ${command} --stacktrace\"</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// デプロイする</span>\n<span class=\"c1\">// args.warDir warの格納ディレクトリ </span>\n<span class=\"c1\">// args.appName アプリ名</span>\n<span class=\"c1\">// args.appVersion アプリのバージョン</span>\n<span class=\"kt\">def</span> <span class=\"nf\">deploy</span><span class=\"o\">(</span><span class=\"n\">Map</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 秘密鍵のパス ※Tomcatサーバにファイル転送するので事前にJenkinsサーバのどこかに秘密鍵を格納しておく必要がある</span>\n    <span class=\"kt\">def</span> <span class=\"n\">keyDir</span> <span class=\"o\">=</span> <span class=\"s1\">'/var/lib/jenkins/.ssh/xxx'</span>\n    <span class=\"c1\">// Tomcatサーバのアドレスとユーザ名</span>\n    <span class=\"kt\">def</span> <span class=\"n\">webServerAddress</span> <span class=\"o\">=</span> <span class=\"s1\">'ecX-XX-XXX-X-X.xx-xxxx-x.xxxxxxxx'</span>\n    <span class=\"kt\">def</span> <span class=\"n\">webServerUser</span> <span class=\"o\">=</span> <span class=\"s1\">'hoge-user'</span>\n    <span class=\"kt\">def</span> <span class=\"n\">webServer</span> <span class=\"o\">=</span> <span class=\"s2\">\"${webServerUser}@${webServerAddress}\"</span>\n\n    <span class=\"kt\">def</span> <span class=\"n\">srcWar</span> <span class=\"o\">=</span> <span class=\"s2\">\"${args.appName}-${args.appVersion}.war\"</span>\n    <span class=\"kt\">def</span> <span class=\"n\">destWar</span> <span class=\"o\">=</span> <span class=\"s2\">\"${args.appName}.war\"</span>\n\n    <span class=\"c1\">// ファイル転送してTomcatのwebappsにwarを配置する</span>\n    <span class=\"n\">sh</span> <span class=\"s2\">\"sudo -S scp -i ${keyDir} ./${args.warDir}/${srcWar} ${webServer}:/home/ec2-user\"</span>\n    <span class=\"n\">sh</span> <span class=\"s2\">\"sudo -S ssh -i ${keyDir} ${webServer} \\\"sudo cp /home/ec2-user/${srcWar} /usr/share/tomcat8/webapps/${destWar}\\\"\"</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// メールをGmailに送信する</span>\n<span class=\"kt\">def</span> <span class=\"nf\">sendMail</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">mail</span> <span class=\"nl\">to:</span> <span class=\"s2\">\"xxxxxxxx@gmail.com\"</span><span class=\"o\">,</span>\n        <span class=\"nl\">subject:</span> <span class=\"s2\">\"${env.JOB_NAME} #${env.BUILD_NUMBER} [${result}]\"</span><span class=\"o\">,</span>\n        <span class=\"nl\">body:</span> <span class=\"s2\">\"Build URL: ${env.BUILD_URL}.\\n\\n\"</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"躓いたこと\" class=\"fragment\"></span><a href=\"#%E8%BA%93%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>躓いたこと</h1>\n\n<ul>\n<li>各プラグインともChangelogに「パイプライン対応したよ！」とは書いてあるが、\n具体的は書き方は明記していないことが多いので、\n各プラグインのGithubでソースコード（主に「なんちゃらPublisher」クラス）を見ながら、Jenkinsfileを書いた。</li>\n<li>currentBuildオブジェクトの使い方がよくわからなかったが、Jenkinsのパイプラインジョブ &gt; 設定 &gt; Pipeline Syntax &gt; Global Variables Reference に詳しく載っていた。\n<a href=\"https://camo.qiitausercontent.com/dce98ca18e752127b3f57901a65249f540d2193f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30663631366435302d633537662d323335652d633231342d3863386430643139646139372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/dce98ca18e752127b3f57901a65249f540d2193f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30663631366435302d633537662d323335652d633231342d3863386430643139646139372e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/0f616d50-c57f-235e-c214-8c8d0d19da97.png\"></a>\n</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/f2249e2915cbfd8a261d64823199f32a147bfe7a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61386666326463662d396438352d376334312d316565302d6662346638336562336333632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/f2249e2915cbfd8a261d64823199f32a147bfe7a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61386666326463662d396438352d376334312d316565302d6662346638336562336333632e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/a8ff2dcf-9d85-7c41-1ee0-fb4f83eb3c3c.png\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/313541fc7e1ffe9781ad27141ed0b9d59400be18/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66363362353066352d373639642d386666322d313930392d6630366165636330373130362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/313541fc7e1ffe9781ad27141ed0b9d59400be18/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66363362353066352d373639642d386666322d313930392d6630366165636330373130362e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f63b50f5-769d-8ff2-1909-f06aecc07106.png\"></a></p>\n\n<ul>\n<li>カバレッジレポートはbuild.gradleのjacocoTestReportタスクでカバレッジレポート対象外にしていてもJenkinsのほうではうまく除外されなかったので、Jenkinsfileのほうでも対象外設定をした。</li>\n<li>JenkinsからGmailにメールする場合、Jenkins &gt; Jenkinsの管理 &gt; システムの設定 &gt; E-mail通知で下記のような設定が必要だった。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/a9ab429d39d5959f7d05fe968d1110ccd53738f1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f38356139313162622d303931642d393936622d333663612d6366303336306336353539322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a9ab429d39d5959f7d05fe968d1110ccd53738f1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f38356139313162622d303931642d393936622d333663612d6366303336306336353539322e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/85a911bb-091d-996b-36ca-cf0360c65592.png\"></a></p>\n\n<ul>\n<li>JenkinsからGmailにメールする場合、<a href=\"https://support.google.com/accounts/answer/6010255?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">安全性の低いアプリがアカウントにアクセスするのを許可する</a>の手順に従って許可を有効にする必要があった。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/2758c73a3bb32139599ba67b88c6ac3e77bae419/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32343738646535352d633338332d396130622d366564622d3934623365383438376666342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2758c73a3bb32139599ba67b88c6ac3e77bae419/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32343738646535352d633338332d396130622d366564622d3934623365383438376666342e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/2478de55-c383-9a0b-6edb-94b3e8487ff4.png\"></a></p>\n\n<h1>\n<span id=\"buildgradle\" class=\"fragment\"></span><a href=\"#buildgradle\"><i class=\"fa fa-link\"></i></a>build.gradle</h1>\n\n<p>Jenkins自体は、Gradleのコマンドを実行して出力結果をもとにレポートを生成するだけなので、<br>\nGradleのJavaアプリのbuild.gradleで下記処理が実行できるようになっている必要があります。<br>\nまたJenkinsでGradleをインストールしなくていいようにGradleラッパーを作成しておきます。</p>\n\n<ul>\n<li>checkstyle</li>\n<li>findbugs</li>\n<li>pmd</li>\n<li>cpd(重複コードチェック)</li>\n<li>test</li>\n<li>jacocoReport</li>\n<li>jar</li>\n<li>war</li>\n</ul>\n\n<p>例えばこんな</p>\n\n<div class=\"code-frame\" data-lang=\"groovy\">\n<div class=\"code-lang\"><span class=\"bold\">build.gradle</span></div>\n<div class=\"highlight\"><pre><span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'java'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'war'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'checkstyle'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'findbugs'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'pmd'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'jacoco'</span>\n\n<span class=\"n\">ext</span> <span class=\"o\">{</span>\n    <span class=\"n\">appVersion</span> <span class=\"o\">=</span> <span class=\"s1\">'1.0.0'</span>\n    <span class=\"n\">appName</span> <span class=\"o\">=</span> <span class=\"s1\">'SampleApp'</span>\n    <span class=\"n\">javaVersion</span> <span class=\"o\">=</span> <span class=\"mf\">1.8</span>\n    <span class=\"n\">defaultEncoding</span> <span class=\"o\">=</span> <span class=\"s1\">'UTF-8'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">sourceCompatibility</span> <span class=\"o\">=</span> <span class=\"n\">javaVersion</span>\n<span class=\"n\">targetCompatibility</span>  <span class=\"o\">=</span> <span class=\"n\">javaVersion</span>\n<span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"na\">withType</span><span class=\"o\">(</span><span class=\"n\">AbstractCompile</span><span class=\"o\">)*.</span><span class=\"na\">options</span><span class=\"o\">*.</span><span class=\"na\">encoding</span> <span class=\"o\">=</span> <span class=\"n\">defaultEncoding</span>\n<span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"na\">withType</span><span class=\"o\">(</span><span class=\"n\">GroovyCompile</span><span class=\"o\">)*.</span><span class=\"na\">groovyOptions</span><span class=\"o\">*.</span><span class=\"na\">encoding</span> <span class=\"o\">=</span> <span class=\"n\">defaultEncoding</span>\n<span class=\"n\">mainClassName</span> <span class=\"o\">=</span> <span class=\"s1\">'jp.takumon.sapmleapp.App'</span>\n\n<span class=\"n\">repositories</span> <span class=\"o\">{</span>\n    <span class=\"n\">mavenCentral</span><span class=\"o\">()</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">dependencies</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 依存ライブラリを記載 </span>\n\n    <span class=\"n\">compile</span> <span class=\"nl\">group:</span> <span class=\"s1\">'junit'</span><span class=\"o\">,</span> <span class=\"nl\">name:</span> <span class=\"s1\">'junit'</span><span class=\"o\">,</span> <span class=\"nl\">version:</span> <span class=\"s1\">'4.12'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">jar</span> <span class=\"o\">{</span>\n    <span class=\"n\">baseName</span> <span class=\"o\">=</span> <span class=\"n\">appName</span>\n    <span class=\"n\">version</span> <span class=\"o\">=</span>  <span class=\"n\">appVersion</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">war</span> <span class=\"o\">{</span>\n    <span class=\"n\">baseName</span> <span class=\"o\">=</span> <span class=\"n\">appName</span>\n    <span class=\"n\">version</span> <span class=\"o\">=</span>  <span class=\"n\">appVersion</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">checkstyle</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 失敗しても後続の処理を継続させる</span>\n    <span class=\"n\">ignoreFailures</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"n\">sourceSets</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">sourceSets</span><span class=\"o\">.</span><span class=\"na\">main</span><span class=\"o\">]</span>\n    <span class=\"n\">toolVersion</span> <span class=\"o\">=</span> <span class=\"s1\">'7.6.1'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">findbugs</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 失敗しても後続の処理を継続させる</span>\n    <span class=\"n\">ignoreFailures</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"n\">sourceSets</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">sourceSets</span><span class=\"o\">.</span><span class=\"na\">main</span><span class=\"o\">]</span>\n    <span class=\"n\">toolVersion</span> <span class=\"o\">=</span> <span class=\"s2\">\"3.0.1\"</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">pmd</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 失敗しても後続の処理を継続させる</span>\n    <span class=\"n\">ignoreFailures</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"n\">sourceSets</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">sourceSets</span><span class=\"o\">.</span><span class=\"na\">main</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"na\">withType</span><span class=\"o\">(</span><span class=\"n\">Pmd</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">reports</span> <span class=\"o\">{</span>\n      <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"na\">enabled</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// CPD（重複コードチェック処理）をCheckタスクに追加</span>\n<span class=\"n\">check</span><span class=\"o\">.</span><span class=\"na\">doLast</span> <span class=\"o\">{</span>\n    <span class=\"n\">File</span> <span class=\"n\">outputDir</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">File</span><span class=\"o\">(</span><span class=\"s2\">\"$reportsDir/cpd/\"</span><span class=\"o\">)</span>\n    <span class=\"n\">outputDir</span><span class=\"o\">.</span><span class=\"na\">mkdirs</span><span class=\"o\">()</span>\n\n    <span class=\"n\">ant</span><span class=\"o\">.</span><span class=\"na\">taskdef</span><span class=\"o\">(</span>\n        <span class=\"nl\">name:</span> <span class=\"s1\">'cpd'</span><span class=\"o\">,</span> \n        <span class=\"nl\">classname:</span> <span class=\"s1\">'net.sourceforge.pmd.cpd.CPDTask'</span><span class=\"o\">,</span>\n        <span class=\"nl\">classpath:</span> <span class=\"n\">configurations</span><span class=\"o\">.</span><span class=\"na\">pmd</span><span class=\"o\">.</span><span class=\"na\">asPath</span><span class=\"o\">)</span>\n\n    <span class=\"n\">ant</span><span class=\"o\">.</span><span class=\"na\">cpd</span><span class=\"o\">(</span>\n        <span class=\"nl\">minimumTokenCount:</span> <span class=\"s1\">'100'</span><span class=\"o\">,</span>\n        <span class=\"nl\">format:</span> <span class=\"s1\">'xml'</span><span class=\"o\">,</span>\n        <span class=\"nl\">encoding:</span> <span class=\"n\">defaultEncoding</span><span class=\"o\">,</span>\n        <span class=\"nl\">outputFile:</span> <span class=\"k\">new</span> <span class=\"n\">File</span><span class=\"o\">(</span><span class=\"n\">outputDir</span><span class=\"o\">,</span> <span class=\"s1\">'cpd.xml'</span><span class=\"o\">)</span>\n    <span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">fileset</span><span class=\"o\">(</span><span class=\"nl\">dir:</span> <span class=\"s2\">\"src/main/java\"</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">include</span><span class=\"o\">(</span><span class=\"nl\">name:</span> <span class=\"s1\">'**/*.java'</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">javadoc</span> <span class=\"o\">{</span>\n    <span class=\"n\">failOnError</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n    <span class=\"c1\">// 好みのレベルで</span>\n    <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">memberLevel</span> <span class=\"o\">=</span> <span class=\"n\">JavadocMemberLevel</span><span class=\"o\">.</span><span class=\"na\">PRIVATE</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">test</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 失敗しても後続の処理を継続させる</span>\n    <span class=\"n\">ignoreFailures</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"n\">reports</span> <span class=\"o\">{</span>\n        <span class=\"n\">junitXml</span><span class=\"o\">.</span><span class=\"na\">enabled</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">jacoco</span> <span class=\"o\">{</span>\n    <span class=\"n\">toolVersion</span> <span class=\"o\">=</span> <span class=\"s1\">'0.7.5.201505241946'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">jacocoTestReport</span> <span class=\"o\">{</span>\n    <span class=\"n\">reports</span> <span class=\"o\">{</span>\n      <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"na\">enabled</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// カバレッジレポートからテストクラスを除外</span>\n    <span class=\"n\">afterEvaluate</span> <span class=\"o\">{</span> \n        <span class=\"n\">classDirectories</span> <span class=\"o\">=</span> <span class=\"n\">files</span><span class=\"o\">(</span><span class=\"n\">classDirectories</span><span class=\"o\">.</span><span class=\"na\">files</span><span class=\"o\">.</span><span class=\"na\">collect</span> <span class=\"o\">{</span>\n            <span class=\"n\">fileTree</span><span class=\"o\">(</span><span class=\"nl\">dir:</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"nl\">exclude:</span> <span class=\"o\">[</span><span class=\"s1\">'**/*Test.class'</span><span class=\"o\">])</span> \n        <span class=\"o\">})</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">task</span> <span class=\"nf\">wrapper</span> <span class=\"o\">(</span><span class=\"nl\">type:</span> <span class=\"n\">Wrapper</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">gradleVersion</span> <span class=\"o\">=</span> <span class=\"s1\">'3.4.1'</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>以上。</p>\n","body":"GradleのJavaアプリをJenkinsで１人CIするためのJenkinsfileを書いてみた。\nGithubにプッシュ時に、AWS上のJenkinsのパイプラインジョブが動いて、テストが成功したら同じくAWS上のTomcatにデプロイするみたいな感じで使ってます。\n\n# Declarative Pipeline\nいままではJenkinsfileを\n\n```\nnode {\n  ....\n}\n```\n\nのように書いてましたが、[Jenkinsの公式サイト](https://jenkins.io/doc/book/pipeline/syntax/)を見ると\nこれはScripted Pipelinesの記法であり、\nPipeline Pluginのバージョン2.5移行からは\n\n```\npipeline {\n  ....  \n}\n```\nのように書くDeclarative Pipelineという記法が導入されて、\nそっちのほうがシンプルでわかりやすく書けるよ!ということだったので書き直してみました。\n確かにすっきりしたし（特に最後のメールおくるとことか、デプロイするとことか）、\nいざとなったら従来のScripted Pipelinesもミックスできるのでいい感じです。\n\n# 追加したプラグイン\nJenkins初期設定時のSuggested Pluginに入っていないもの\n\n* [Checkstyle Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Checkstyle+Plugin;jsessionid=E9D4FA5064ACAE1CED7B19928DE0788F)（v3.47） - Checkstyeの結果収集用\n* [FindBugs Plugin](https://wiki.jenkins-ci.org/display/JENKINS/FindBugs+Plugin)（v4.69） - Findbugsのレポート生成用 \n* [PMD Plugin](https://wiki.jenkins-ci.org/display/JENKINS/PMD+Plugin)（v3.46） - PMDのレポート生成用\n* [DRY Plugin](https://wiki.jenkins-ci.org/display/JENKINS/DRY+Plugin)（v2.46） - CPD(重複コードチェック)のレポート生成用\n* [Step Counter Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Step+Counter+Plugin)（v2.0.0） - ソースコードのステップ数を集計してくれる\n* [Task Scanner Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Task+Scanner+Plugin)（v4.50） - ソースコード中のTODOとかを一覧化してくれる\n* [Javadoc Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Javadoc+Plugin)（v1.4） - JavaDoc生成用\n* [Warnings Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Warnings+Plugin)（v4.60） - ジョブ実行時の警告メッセージを収集してくれる\n* [JaCoCo Plugin](https://wiki.jenkins-ci.org/display/JENKINS/JaCoCo+Plugin)（v2.2.0） - テストカバレッジのレポート生成用\n\n\n\n# Jenkinsfile\nGithubからWebhookでJenkinsのパイプラインジョブを実行する。\nパイプラインジョブではGithubのJenkinsfileを使う。\nジョブの流れは下記。デプロイは静的コード解析とテストが成功したときだけ実行する。\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/56c8e12d-267b-a637-224e-fc8cb3474dfa.png)\n\n\n```groovy:Jenkinsfile\npipeline {\n    agent any\n    // 定数や変数を定義する\n    environment {\n        reportDir = 'build/reports'\n        javaDir = 'src/main/java'\n        resourcesDir = 'src/main/resources'\n        testReportDir = 'build/test-results/test'\n        jacocoReportDir = 'build/jacoco' \n        javadocDir = 'build/docs/javadoc'\n        libsDir = 'build/libs'\n        appName = 'SampleApp'\n        appVersion = '1.0.0'\n    }\n    \n    // stagesブロック中に一つ以上のstageを定義する\n    stages {\n        stage('事前準備') {\n            // 実際の処理はstepsブロック中に定義する\n            steps {\n                deleteDir()\n\n                // このJobをトリガーしてきたGithubのプロジェクトをチェックアウト\n                checkout scm\n\n                // ジョブ失敗の原因調査用にJenkinsfileとbuild.gradleは最初に保存する\n                archiveArtifacts \"Jenkinsfile\"\n                archiveArtifacts \"build.gradle\"\n\n                // scriptブロックを使うと従来のScripted Pipelinesの記法も使える\n                script {\n                    // Permission deniedで怒られないために実行権限を付与する\n                    if(isUnix()) {\n                        sh 'chmod +x gradlew'\n                    }\n                }\n                gradlew 'clean'\n            }\n        }\n        \n        stage('コンパイル') {\n            steps {\n                gradlew 'classes testClasses'\n            }\n            \n            // postブロックでstepsブロックの後に実行される処理が定義できる\n            post {\n                // alwaysブロックはstepsブロックの処理が失敗しても成功しても必ず実行される\n                always {\n\n                    // JavaDoc生成時に実行するとJavaDocの警告も含まれてしまうので\n                    // Javaコンパイル時の警告はコンパイル直後に収集する\n                    step([\n\n                        // プラグインを実行するときのクラス指定は完全修飾名でなくてもOK\n                        $class: 'WarningsPublisher',\n\n                        // Job実行時のコンソールから警告を収集する場合はconsoleParsers、\n                        // pmd.xmlなどのファイルから収集する場合はparserConfigurationsを指定する。\n                        // なおparserConfigurationsの場合はparserNameのほかにpattern(集計対象ファイルのパス)も指定が必要\n                        // パーサ名は下記プロパティファイルに定義されているものを使う\n                        // https://github.com/jenkinsci/warnings-plugin/blob/master/src/main/resources/hudson/plugins/warnings/parser/Messages.properties\n                        consoleParsers: [\n                            [parserName: 'Java Compiler (javac)'],\n                        ],\n                        canComputeNew: false,\n                        canResolveRelativesPaths: false,\n                        usePreviousBuildAsReference: true\n                    ])\n                }\n            }\n        }\n        \n        stage('静的コード解析') {\n            steps {\n                // 並列処理の場合はparallelメソッドを使う\n                parallel(\n                    '静的コード解析' : {\n                        gradlew 'check -x test'\n\n                        // dirメソッドでカレントディレクトリを指定できる\n                        dir(reportDir) {\n                            step([\n                                $class: 'CheckStylePublisher',\n                                pattern: \"checkstyle/*.xml\"\n                            ])\n                            step([\n                                $class: 'FindBugsPublisher',\n                                pattern: \"findbugs/*.xml\"\n                            ])\n                            step([\n                                $class: 'PmdPublisher',\n                                pattern: \"pmd/*.xml\"\n                            ])\n                            step([\n                                $class: 'DryPublisher',\n                                pattern: \"cpd/*.xml\"\n                            ])\n                \n                            archiveArtifacts \"checkstyle/*.xml\"\n                            archiveArtifacts \"findbugs/*.xml\"\n                            archiveArtifacts \"pmd/*.xml\"\n                            archiveArtifacts \"cpd/*.xml\"\n                        }\n                    },\n                    'ステップカウント': {\n                        // レポート作成\n                        // outputFileとoutputFormatを指定するとエクセルファイルも作成してくれる\n                        stepcounter outputFile: 'stepcount.xls', outputFormat: 'excel', settings: [\n                            [key:'Java', filePattern: \"${javaDir}/**/*.java\"],\n                            [key:'SQL', filePattern: \"${resourcesDir}/**/*.sql\"],\n                            [key:'HTML', filePattern: \"${resourcesDir}/**/*.html\"],\n                            [key:'JS', filePattern: \"${resourcesDir}/**/*.js\"],\n                            [key:'CSS', filePattern: \"${resourcesDir}/**/*.css\"]\n                        ]\n                        // 一応エクセルファイルも成果物として保存する\n                        archiveArtifacts \"stepcount.xls\"\n                    },\n                    'タスクスキャン': {\n                        step([\n                            $class: 'TasksPublisher',\n                            pattern: './**',\n                            // 集計対象を検索するときに大文字小文字を区別するか\n                            ignoreCase: true,\n                            // 優先度別に集計対象の文字列を指定できる\n                            // 複数指定する場合はカンマ区切りの文字列を指定する\n                            high: 'System.out.System.err',\n                            normal: 'TODO,FIXME,XXX',\n                        ])\n                    },\n                    'JavaDoc': {\n                        gradlew 'javadoc -x classes'\n                        step([\n                            $class: 'JavadocArchiver',\n                            // Javadocのindex.htmlがあるフォルダのパスを指定する\n                            javadocDir: \"${javadocDir}\",\n                            keepAll: true\n                        ])\n                    }\n                )\n            }\n            \n            post {\n                always {\n                   // JavaDocの警告を収集\n                    step([\n                        $class: 'WarningsPublisher',\n                        consoleParsers: [\n                            [parserName: 'JavaDoc Tool']\n                        ],\n                        canComputeNew: false,\n                        canResolveRelativesPaths: false,\n                        usePreviousBuildAsReference: true\n                    ])\n                }\n            }\n        }\n        \n\n        stage('テスト') {\n            steps {\n                gradlew 'test jacocoTestReport -x classes -x testClasses'\n                \n                junit \"${testReportDir}/*.xml\"\n                archiveArtifacts \"${testReportDir}/*.xml\"\n\n                // カバレッジレポートを生成（テストクラスを除外）\n                step([\n                    $class: 'JacocoPublisher',\n                    execPattern: \"${jacocoReportDir}/*.exec\",\n                    exclusionPattern: '**/*Test.class'\n                ])\n            }\n        }\n        \n        stage('デプロイ') {\n            // whenブロックでstageを実行する条件を指定できる\n            when {\n                // 静的コード解析とテスト失敗時はデプロイしない\n                expression {currentBuild.currentResult == 'SUCCESS'}\n            }\n            \n            steps {\n                gradlew 'jar'\n                archiveArtifacts \"${libsDir}/${appName}-${appVersion}.jar\"\n                gradlew 'war'\n                archiveArtifacts \"${libsDir}/${appName}-${appVersion}.war\"\n                deploy warDir: libsDir, appName: appName, appVersion: appVersion\n            }\n        }\n    }\n    \n    // stagesブロックと同じレベルにpostブロックを定義すると\n    // 全てのstage処理が終わった後の処理の定義が可能    \n    post {\n        always {\n            // 最後にワークスペースの中身を削除\n            deleteDir()\n        }\n        // 連続で成功しているとき以外は自分宛にメールを送信\n\n        // 結果が前回と変わった時\n        changed {\n            sendMail(\"${currentBuild.previousBuild.result} => ${currentBuild.currentResult}\")\n        }\n        // 失敗した時\n        failure {\n            sendMail(currentBuild.currentResult)\n        }\n        // 不安定な時（主にテスト失敗時）\n        unstable {\n            sendMail(currentBuild.currentResult)\n        }\n    }\n}\n\n\n// Gradlewコマンドを実行する\ndef gradlew(command) {\n    if(isUnix()) {\n        sh \"./gradlew ${command} --stacktrace\"\n    } else {\n        bat \"./gradlew.bat ${command} --stacktrace\"\n    }\n}\n\n// デプロイする\n// args.warDir warの格納ディレクトリ \n// args.appName アプリ名\n// args.appVersion アプリのバージョン\ndef deploy(Map args) {\n    // 秘密鍵のパス ※Tomcatサーバにファイル転送するので事前にJenkinsサーバのどこかに秘密鍵を格納しておく必要がある\n    def keyDir = '/var/lib/jenkins/.ssh/xxx'\n    // Tomcatサーバのアドレスとユーザ名\n    def webServerAddress = 'ecX-XX-XXX-X-X.xx-xxxx-x.xxxxxxxx'\n    def webServerUser = 'hoge-user'\n    def webServer = \"${webServerUser}@${webServerAddress}\"\n    \n    def srcWar = \"${args.appName}-${args.appVersion}.war\"\n    def destWar = \"${args.appName}.war\"\n    \n    // ファイル転送してTomcatのwebappsにwarを配置する\n    sh \"sudo -S scp -i ${keyDir} ./${args.warDir}/${srcWar} ${webServer}:/home/ec2-user\"\n    sh \"sudo -S ssh -i ${keyDir} ${webServer} \\\"sudo cp /home/ec2-user/${srcWar} /usr/share/tomcat8/webapps/${destWar}\\\"\"\n}\n\n// メールをGmailに送信する\ndef sendMail(result) {\n    mail to: \"xxxxxxxx@gmail.com\",\n        subject: \"${env.JOB_NAME} #${env.BUILD_NUMBER} [${result}]\",\n        body: \"Build URL: ${env.BUILD_URL}.\\n\\n\"\n}\n```\n\n# 躓いたこと\n* 各プラグインともChangelogに「パイプライン対応したよ！」とは書いてあるが、\n具体的は書き方は明記していないことが多いので、\n各プラグインのGithubでソースコード（主に「なんちゃらPublisher」クラス）を見ながら、Jenkinsfileを書いた。\n* currentBuildオブジェクトの使い方がよくわからなかったが、Jenkinsのパイプラインジョブ > 設定 > Pipeline Syntax > Global Variables Reference に詳しく載っていた。\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/0f616d50-c57f-235e-c214-8c8d0d19da97.png)\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/a8ff2dcf-9d85-7c41-1ee0-fb4f83eb3c3c.png)\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/f63b50f5-769d-8ff2-1909-f06aecc07106.png)\n \n* カバレッジレポートはbuild.gradleのjacocoTestReportタスクでカバレッジレポート対象外にしていてもJenkinsのほうではうまく除外されなかったので、Jenkinsfileのほうでも対象外設定をした。\n* JenkinsからGmailにメールする場合、Jenkins > Jenkinsの管理 > システムの設定 > E-mail通知で下記のような設定が必要だった。\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/85a911bb-091d-996b-36ca-cf0360c65592.png)\n\n* JenkinsからGmailにメールする場合、[安全性の低いアプリがアカウントにアクセスするのを許可する](https://support.google.com/accounts/answer/6010255?hl=ja)の手順に従って許可を有効にする必要があった。\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/2478de55-c383-9a0b-6edb-94b3e8487ff4.png)\n\n# build.gradle\nJenkins自体は、Gradleのコマンドを実行して出力結果をもとにレポートを生成するだけなので、\nGradleのJavaアプリのbuild.gradleで下記処理が実行できるようになっている必要があります。\nまたJenkinsでGradleをインストールしなくていいようにGradleラッパーを作成しておきます。\n\n * checkstyle\n * findbugs\n * pmd\n * cpd(重複コードチェック)\n * test\n * jacocoReport\n * jar\n * war\n\n例えばこんな\n\n```groovy:build.gradle\napply plugin: 'java'\napply plugin: 'war'\napply plugin: 'checkstyle'\napply plugin: 'findbugs'\napply plugin: 'pmd'\napply plugin: 'jacoco'\n\next {\n    appVersion = '1.0.0'\n    appName = 'SampleApp'\n    javaVersion = 1.8\n    defaultEncoding = 'UTF-8'\n}\n\nsourceCompatibility = javaVersion\ntargetCompatibility  = javaVersion\ntasks.withType(AbstractCompile)*.options*.encoding = defaultEncoding\ntasks.withType(GroovyCompile)*.groovyOptions*.encoding = defaultEncoding\nmainClassName = 'jp.takumon.sapmleapp.App'\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    // 依存ライブラリを記載 \n\n    compile group: 'junit', name: 'junit', version: '4.12'\n}\n\njar {\n    baseName = appName\n    version =  appVersion\n}\n\nwar {\n    baseName = appName\n    version =  appVersion\n}\n\ncheckstyle {\n    // 失敗しても後続の処理を継続させる\n    ignoreFailures = true\n    sourceSets = [sourceSets.main]\n    toolVersion = '7.6.1'\n}\n\nfindbugs {\n    // 失敗しても後続の処理を継続させる\n    ignoreFailures = true\n    sourceSets = [sourceSets.main]\n    toolVersion = \"3.0.1\"\n}\n\npmd {\n    // 失敗しても後続の処理を継続させる\n    ignoreFailures = true\n    sourceSets = [sourceSets.main]\n}\n\ntasks.withType(Pmd) {\n    reports {\n      xml.enabled = true\n    }\n}\n\n// CPD（重複コードチェック処理）をCheckタスクに追加\ncheck.doLast {\n    File outputDir = new File(\"$reportsDir/cpd/\")\n    outputDir.mkdirs()\n  \n    ant.taskdef(\n        name: 'cpd', \n        classname: 'net.sourceforge.pmd.cpd.CPDTask',\n        classpath: configurations.pmd.asPath)\n  \n    ant.cpd(\n        minimumTokenCount: '100',\n        format: 'xml',\n        encoding: defaultEncoding,\n        outputFile: new File(outputDir, 'cpd.xml')\n    ) {\n        fileset(dir: \"src/main/java\") {\n            include(name: '**/*.java')\n        }\n    }\n}\n\njavadoc {\n    failOnError = false\n    // 好みのレベルで\n    options.memberLevel = JavadocMemberLevel.PRIVATE\n}\n\ntest {\n    // 失敗しても後続の処理を継続させる\n    ignoreFailures = true\n    reports {\n        junitXml.enabled = true\n    }\n}\n\njacoco {\n    toolVersion = '0.7.5.201505241946'\n}\n\njacocoTestReport {\n    reports {\n      xml.enabled = true\n    }\n    \n    // カバレッジレポートからテストクラスを除外\n    afterEvaluate { \n        classDirectories = files(classDirectories.files.collect {\n            fileTree(dir: it, exclude: ['**/*Test.class']) \n        })\n    }\n}\n\ntask wrapper (type: Wrapper) {\n    gradleVersion = '3.4.1'\n}\n```\n\n\n以上。\n","comments_count":0,"created_at":"2017-04-07T02:38:55+09:00","likes_count":58,"reactions_count":0},"matches":4,"weight":200,"details":[{"weight":50,"keyword":"Jenkins"},{"weight":50,"keyword":"CI"},{"weight":50,"keyword":"Pipeline"},{"weight":50,"keyword":"Qiita"}],"avgWeight":50,"totalWeight":44,"threshold":12.5,"isRelated":true}]},{"node":{"fields":{"slug":"/386efa75-7773-5424-94a8-1a2b3ae52a6b/","title":"Asciidoc文法クイックリファレンスの日本語訳","date":"2017-05-29T03:14:20+09:00","excerpt":"概要AsciiDoc Syntax Quick Reference を日本語訳したものです。ところどころ意訳したり、補足説明を追加したりしています。これからAsciidoctorを使ってみようという方々のお役に立てれば幸いです。ドキュメント...","tags":["Markdown","ドキュメント","asciidoctor","asciidoc","Qiita"],"keywords":["Markdown"],"thumbnail":""},"id":"386efa75-7773-5424-94a8-1a2b3ae52a6b","title":"Asciidoc文法クイックリファレンスの日本語訳","rendered_body":"\n<h1>\n<span id=\"概要\" class=\"fragment\"></span><a href=\"#%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>概要</h1>\n\n<p><a href=\"http://asciidoctor.org/docs/asciidoc-syntax-quick-reference/\" rel=\"nofollow noopener\" target=\"_blank\">AsciiDoc Syntax Quick Reference</a> を日本語訳したものです。<br>\nところどころ意訳したり、補足説明を追加したりしています。<br>\nこれからAsciidoctorを使ってみようという方々のお役に立てれば幸いです。</p>\n\n<h1>\n<span id=\"ドキュメントのurl\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AEurl\"><i class=\"fa fa-link\"></i></a>ドキュメントのURL</h1>\n\n<p>GitHub Pagesの下記URLにて公開しています。<br>\n<a href=\"https://takumon.github.io/asciidoc-syntax-quick-reference-japanese-translation/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://takumon.github.io/asciidoc-syntax-quick-reference-japanese-translation/</a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/f9d71b849f52ad0e5c128d814f813939a770567a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36616463636335332d623866322d323964302d613461382d3738656639326461306236382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/f9d71b849f52ad0e5c128d814f813939a770567a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36616463636335332d623866322d323964302d613461382d3738656639326461306236382e706e67\" alt=\"スクリーンショット 2017-06-03 12.43.12.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/6adccc53-b8f2-29d0-a4a8-78ef92da0b68.png\"></a></p>\n\n<h1>\n<span id=\"asciidoctorとは\" class=\"fragment\"></span><a href=\"#asciidoctor%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Asciidoctorとは</h1>\n\n<p>AsciidoctorはAsciidocコンテンツをHTML5やDocBook 5、PDFに変換するためのツール群です。Rubyで実装されておりRubyGem.orgでパッケージが公開されています。オープンソースでGithubにホストされており、MITライセンスです。</p>\n\n<h1>\n<span id=\"asciidocとは\" class=\"fragment\"></span><a href=\"#asciidoc%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Asciidocとは</h1>\n\n<p>Markdownなどのような軽量マークアップ言語の一つです。Markdownよりも高い表現力、高い可読性を持ち合わせたもので、技術文書を書くのに適しています。<br>\nまたOffice文章と比べてもテキストベースなので、軽量で、GITなどの構成管理ツールと相性が良いといったメリットがあります。</p>\n","body":"# 概要\n[AsciiDoc Syntax Quick Reference](http://asciidoctor.org/docs/asciidoc-syntax-quick-reference/) を日本語訳したものです。\nところどころ意訳したり、補足説明を追加したりしています。\nこれからAsciidoctorを使ってみようという方々のお役に立てれば幸いです。\n\n# ドキュメントのURL\nGitHub Pagesの下記URLにて公開しています。\nhttps://takumon.github.io/asciidoc-syntax-quick-reference-japanese-translation/\n\n![スクリーンショット 2017-06-03 12.43.12.png](https://qiita-image-store.s3.amazonaws.com/0/49915/6adccc53-b8f2-29d0-a4a8-78ef92da0b68.png)\n\n# Asciidoctorとは\nAsciidoctorはAsciidocコンテンツをHTML5やDocBook 5、PDFに変換するためのツール群です。Rubyで実装されておりRubyGem.orgでパッケージが公開されています。オープンソースでGithubにホストされており、MITライセンスです。\n\n# Asciidocとは\nMarkdownなどのような軽量マークアップ言語の一つです。Markdownよりも高い表現力、高い可読性を持ち合わせたもので、技術文書を書くのに適しています。\nまたOffice文章と比べてもテキストベースなので、軽量で、GITなどの構成管理ツールと相性が良いといったメリットがあります。\n\n\n","comments_count":2,"created_at":"2017-05-29T03:14:20+09:00","likes_count":14,"reactions_count":0},"relations":[{"node":{"fields":{"slug":"/270e2fae-ed90-5539-8c90-a2ed93ebba83/","title":"Fessを使用して、Asciidoctorで簡単に全文検索できるようにする","date":"2017-06-26T00:21:37+09:00","excerpt":"Asciidoctorを使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。そこで今回は、Dockerで...","tags":["JavaScript","全文検索","ドキュメント","Fess","asciidoctor","Qiita"],"keywords":["JavaScript"],"thumbnail":""},"id":"270e2fae-ed90-5539-8c90-a2ed93ebba83","title":"Fessを使用して、Asciidoctorで簡単に全文検索できるようにする","rendered_body":"<p><a href=\"http://asciidoctor.org/\" rel=\"nofollow noopener\" target=\"_blank\">Asciidoctor</a>を使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。</p>\n\n<p>そこで今回は、Dockerで全文検索サーバの<a href=\"http://fess.codelibs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Fess</a>を立てて、<br>\nドキュメントからJavaScript経由でFessのJSON APIを呼び出すことで、<br>\n全文検索を簡単に導入する方法をご紹介します。</p>\n\n<p>導入するとドキュメントの右上に検索窓が出てきて全文検索できるようになります。<br>\n<a href=\"https://camo.qiitausercontent.com/e020d2b6619c0b7ce4332c80ea15b89a6efb895e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31323365633737312d666237372d653464632d646637652d6134623430373739323735392e676966\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e020d2b6619c0b7ce4332c80ea15b89a6efb895e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31323365633737312d666237372d653464632d646637652d6134623430373739323735392e676966\" alt=\"6月-24-2017 19-05-32.gif\" title=\"6月-24-2017 19-05-32.gif\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/123ec771-fb77-e4dc-df7e-a4b407792759.gif\"></a></p>\n\n<h2>\n<span id=\"fessとは\" class=\"fragment\"></span><a href=\"#fess%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Fessとは</h2>\n\n<p><a href=\"http://fess.codelibs.org/ja/\" rel=\"nofollow noopener\" target=\"_blank\">Fess</a>は<strong>「5 分で簡単に構築可能な全文検索サーバー」</strong>です。<br>\nJavaベースで構築されており、Apacheライセンスで提供されるオープンソース製品で、無料で使用できます。<br>\n自分でクローラを設定して、自分だけの検索エンジンがつくれるようなイメージです。<br>\nデフォルトで検索画面を提供していますが、JSON APIも提供しているので、様々なシステムと連携可能です。</p>\n\n<h2>\n<span id=\"全体像\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E4%BD%93%E5%83%8F\"><i class=\"fa fa-link\"></i></a>全体像</h2>\n\n<p>ドキュメント用Webサーバに全文検索用のJavaScriptファイルとCSSファイルを追加し、Dockerで全文検索用のFessサーバを立てます。<br>\nFessサーバはドキュメント用Webサーバをクロールし、その情報を保存しておきます。<br>\nドキュメントで全文検索を実施すると、JavaScript経由でFessサーバのJSON AIPを呼び出して、全文検索結果をドキュメントに表示します。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/6fe043176da6b6451722114a3d0418bc40ac8c99/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31306338616334362d323135352d386562372d613565642d3763313363653534346563322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/6fe043176da6b6451722114a3d0418bc40ac8c99/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f31306338616334362d323135352d386562372d613565642d3763313363653534346563322e706e67\" alt=\"0_Fess_全体像_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/10c8ac46-2155-8eb7-a5ed-7c13ce544ec2.png\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/729e46c74903de7be597a6ac4adea0c03cd8559f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34306531643435362d323633352d326165642d333333642d3862316165633434373933312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/729e46c74903de7be597a6ac4adea0c03cd8559f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34306531643435362d323633352d326165642d333333642d3862316165633434373933312e706e67\" alt=\"0_Fess_全体像_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/40e1d456-2635-2aed-333d-8b1aec447931.png\"></a></p>\n\n<h2>\n<span id=\"導入手順\" class=\"fragment\"></span><a href=\"#%E5%B0%8E%E5%85%A5%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>導入手順</h2>\n\n<p>この導入手順は、下記のような環境（ローカルPCのDocker上にドキュメント用WebサーバとFessサーバが立っている環境）を作った時のものです。<br>\nDockerを使わなくても、ローカルPC以外でも、導入可能です。導入手順は適宜読み替えてください。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/a94911642557c486b240ffa8c3c184c64bfabc2c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30626164623864322d316135382d323262362d343537632d3132626563663361383931312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a94911642557c486b240ffa8c3c184c64bfabc2c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30626164623864322d316135382d323262362d343537632d3132626563663361383931312e706e67\" alt=\"0_Fess_全体像_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/0badb8d2-1a58-22b6-457c-12becf3a8911.png\"></a></p>\n\n<h3>\n<span id=\"fessのインストール\" class=\"fragment\"></span><a href=\"#fess%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>Fessのインストール</h3>\n\n<p>Docker Hubの<a href=\"https://hub.docker.com/r/codelibs/fess/\" rel=\"nofollow noopener\" target=\"_blank\">codelibs/fess</a>を使用します。今回ポートは10084で公開します。<br>\nDockerを使わない場合は<a href=\"http://fess.codelibs.org/ja/11.2/install/index.html\" rel=\"nofollow noopener\" target=\"_blank\">Fess インストールガイド</a>を参考にしてください。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ docker run -d -p 10084:8080 --name fess codelibs/fess:latest\n</pre></div></div>\n\n<h3>\n<span id=\"fessの設定\" class=\"fragment\"></span><a href=\"#fess%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>Fessの設定</h3>\n\n<h4>\n<span id=\"クローラの設定\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>クローラの設定</h4>\n\n<p><code>http://[PCのローカルIPアドレス]:10084/login</code>にアクセスするとログイン画面が表示されます。<br>\nデフォルトのID/PASS　<code>admin/admin</code>でログインしましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/d173fd5ce7a76eb7b5a6ef053a670dd6551d720c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65373930656361392d353037332d393438652d336534332d6437353436643537666165352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d173fd5ce7a76eb7b5a6ef053a670dd6551d720c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65373930656361392d353037332d393438652d336534332d6437353436643537666165352e706e67\" alt=\"1_Fess管理者_ログイン画面.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/e790eca9-5073-948e-3e43-d7546d57fae5.png\"></a><br>\n<br></p>\n\n<p>ログインするとダッシュボードが表示されます。左ペインの<code>クローラ</code> &gt; <code>Web</code>　を選択しましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/cbfee37bd5d06381615f013da8587b1af91c35aa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61636662653935302d666137342d643063622d336365652d3565386462346465356237342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/cbfee37bd5d06381615f013da8587b1af91c35aa/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61636662653935302d666137342d643063622d336365652d3565386462346465356237342e706e67\" alt=\"2_Fess管理者_ダッシュボード.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/acfbe950-fa74-d0cb-3cee-5e8db4de5b74.png\"></a><br>\n<br></p>\n\n<p>Webクローラにはまだ何も登録されていないので、左上の<code>+　新規作成</code>ボタンをクリックしましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/e60be4a90df24cb1275c165752de363b15859b87/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36333130333762342d616162322d386530642d663961612d3364323365633931376132392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e60be4a90df24cb1275c165752de363b15859b87/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36333130333762342d616162322d386530642d663961612d3364323365633931376132392e706e67\" alt=\"3_Fess管理者_Webクロール設定_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/631037b4-aab2-8e0d-f9aa-3d23ec917a29.png\"></a><br>\n<br></p>\n\n<p>Webクロール情報入力画面が表示されます。<br>\n<a href=\"https://camo.qiitausercontent.com/62cd6f97bb7dfebb163873f26b5fda4fabcf89c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653561303963392d376363652d336665632d373838342d3132353863333266613931612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/62cd6f97bb7dfebb163873f26b5fda4fabcf89c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653561303963392d376363652d336665632d373838342d3132353863333266613931612e706e67\" alt=\"3_Fess管理者_Webクロール設定_2.png\" title=\"3_Fess管理者_Webクロール設定_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/ee5a09c9-7cce-3fec-7884-1258c32fa91a.png\"></a></p>\n\n<p>設定項目は色々ありますが、とりあえず下記項目だけ設定しましょう。</p>\n\n<ul>\n<li>名前 \n\n<ul>\n<li>任意の名前を設定してください。</li>\n</ul>\n</li>\n<li>URL \n\n<ul>\n<li>ドキュメント用Webサーバにおいてドキュメントが格納されているルートフォルダのURLを指定してください。末尾に<code>/</code>を付けてください。</li>\n</ul>\n</li>\n<li>クロール対象とするURL \n\n<ul>\n<li>正規表現で値を設定します。上記<code>URL</code>で設定したルートフォルダ配下の全資産を対象とするために、<code>URLで設定した値</code> + <code>.*</code> を指定してください。</li>\n</ul>\n</li>\n<li>検索対象とするURL\n\n<ul>\n<li>正規表現で値を設定します。HTMLのみを検索対象にしたい（JS、CSSなどは除外したい）ので、<code>URLで設定した値</code> + <code>.+\\.html$</code> を指定してください。\n<br>\n<br>\n</li>\n</ul>\n</li>\n</ul>\n\n<p>値を設定したら、画面を下にスクロールして<code>+　作成</code>ボタンをクリックします。<br>\nすると下記のようにWebクロールのデータが１件登録されます。<br>\n<a href=\"https://camo.qiitausercontent.com/8302d25592df90b2bdf59fbf3b43e31ecf106b3e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33643030626635612d663133312d643336372d646535332d6166313062623336383339642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/8302d25592df90b2bdf59fbf3b43e31ecf106b3e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f33643030626635612d663133312d643336372d646535332d6166313062623336383339642e706e67\" alt=\"3_Fess管理者_Webクロール設定_4.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/3d00bf5a-f131-d367-de53-af10bb36839d.png\"></a><br>\n<br></p>\n\n<h4>\n<span id=\"クローラの実行\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E3%81%AE%E5%AE%9F%E8%A1%8C\"><i class=\"fa fa-link\"></i></a>クローラの実行</h4>\n\n<p>左ペインで　<code>システム</code> &gt; <code>スケジューラ</code> を選択してジョブスケジューラを開きます。<br>\nジョブスケジューラで <code>Default Crawler</code>を選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/52e6c84dc635dabd786a05e2dc2dbc01bbcd62b3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62306165636130642d363461342d343364612d373832622d3061316130636437306238332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/52e6c84dc635dabd786a05e2dc2dbc01bbcd62b3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f62306165636130642d363461342d343364612d373832622d3061316130636437306238332e706e67\" alt=\"4_Fess管理者_スケジューラ_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/b0aeca0d-64a4-43da-782b-0a1a0cd70b83.png\"></a><br>\n<br></p>\n\n<p><code>今すぐ開始</code>をクリックします。<br>\n<a href=\"https://camo.qiitausercontent.com/15c56153ff7878a59bfda2bab0ac3b8b6182fa23/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30306537363932302d626661642d656562312d636239392d3732346533613933393261392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/15c56153ff7878a59bfda2bab0ac3b8b6182fa23/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30306537363932302d626661642d656562312d636239392d3732346533613933393261392e706e67\" alt=\"4_Fess管理者_スケジューラ_1.1.png\" title=\"4_Fess管理者_スケジューラ_1.1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/00e76920-bfad-eeb1-cb99-724e3a9392a9.png\"></a><br>\n<br></p>\n\n<p>するとクロールが実行されます。<br>\n<a href=\"https://camo.qiitausercontent.com/b34d527efb0b07d2b04cabccebe97f0e1e4b594c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323564333030662d303766352d373234642d636539332d3865316339373532653130652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b34d527efb0b07d2b04cabccebe97f0e1e4b594c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f37323564333030662d303766352d373234642d636539332d3865316339373532653130652e706e67\" alt=\"4_Fess管理者_スケジューラ_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/725d300f-07f5-724d-ce93-8e1c9752e10e.png\"></a><br>\n<br></p>\n\n<p>しばらくして<code>F5</code>キーを押してブラウザを更新してください。<br>\nクロールが終了すると、スケジューラの状態が<code>実行中</code>から<code>有効</code>になります。<br>\n<a href=\"https://camo.qiitausercontent.com/2d860e111077a3a0b63a44b45e14e0e18b02fcb1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653466353237372d616163332d616437652d636465622d3431643339623733336331662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2d860e111077a3a0b63a44b45e14e0e18b02fcb1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f65653466353237372d616163332d616437652d636465622d3431643339623733336331662e706e67\" alt=\"4_Fess管理者_スケジューラ_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/ee4f5277-aac3-ad7e-cdeb-41d39b733c1f.png\"></a><br>\n<br></p>\n\n<h4>\n<span id=\"クローラ実行結果の確認\" class=\"fragment\"></span><a href=\"#%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%A9%E5%AE%9F%E8%A1%8C%E7%B5%90%E6%9E%9C%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>クローラ実行結果の確認</h4>\n\n<p>左ペインの<code>システム情報</code>&gt;<code>クロール情報</code>を選択すると、先ほど実行したクロールの結果が表示されています。その行を選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/e35eccd76c8d85dcc368298adfebb71871f083a7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39326633313062352d383366362d646564612d343438642d6166613863356230663130342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e35eccd76c8d85dcc368298adfebb71871f083a7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39326633313062352d383366362d646564612d343438642d6166613863356230663130342e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_1.png\" title=\"5_Fess管理者_システム情報_クロール情報_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/92f310b5-83f6-deda-448d-afa8c5b0f104.png\"></a><br>\n<br></p>\n\n<p>セッションIDを選択します。<br>\n<a href=\"https://camo.qiitausercontent.com/341936c3d088fb04a1029cc6c891a35253a079da/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34653830636431342d333633342d663636352d623434382d3862346234653761386432312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/341936c3d088fb04a1029cc6c891a35253a079da/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f34653830636431342d333633342d663636352d623434382d3862346234653761386432312e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_2.png\" title=\"5_Fess管理者_システム情報_クロール情報_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/4e80cd14-3634-f665-b448-8b4b4e7a8d21.png\"></a><br>\n<br></p>\n\n<p>ここにドキュメント用Webサーバのドキュメントが全て表示されればOKです。<br>\n<a href=\"https://camo.qiitausercontent.com/767e79c91f7521caf880a890deee50513f520ea9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36306238366263342d663730662d343263382d613031372d3566313338623362383865332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/767e79c91f7521caf880a890deee50513f520ea9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f36306238366263342d663730662d343263382d613031372d3566313338623362383865332e706e67\" alt=\"5_Fess管理者_システム情報_クロール情報_3.png\" title=\"5_Fess管理者_システム情報_クロール情報_3.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/60b86bc4-f70f-42c8-a017-5f138b3b88e3.png\"></a><br>\n<br></p>\n\n<h3>\n<span id=\"ドキュメント用webサーバに全文検索用資産を配置\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E7%94%A8web%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AB%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E7%94%A8%E8%B3%87%E7%94%A3%E3%82%92%E9%85%8D%E7%BD%AE\"><i class=\"fa fa-link\"></i></a>ドキュメント用Webサーバに全文検索用資産を配置</h3>\n\n<p>全文検索用の資産は<code>full-text-search.js</code>と<code>full-text-search.css</code>の２つです。<br>\n<code>full-text-search.js</code>の変数 FESS_JSON_ENDPOINT(FESSサーバのJSON APIのエンドポイント) は適時置き換えてください。<br>\nこれらの資産をドキュメント用Webサーバのドキュメントのルートフォルダ直下に配置してください。</p>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">full-text-search.js</span></div>\n<div class=\"highlight\"><pre><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'use strict'</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// FESSサーバのJSON APIのエンドポイント（FessサーバのIPアドレス + /json）</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">FESS_JSON_ENDPOINT</span> <span class=\"o\">=</span> <span class=\"s1\">'http://192.168.1.5:10084/json'</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// １ページあたりの検索結果表示件数</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">COUNT_PAR_PAGE</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span>\n\n\n    <span class=\"c1\">// 目次の</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#toc'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 一番上に検索条件入力エリアを挿入</span>\n        <span class=\"p\">.</span><span class=\"nx\">prepend</span><span class=\"p\">(</span>\n            <span class=\"s1\">'&lt;div id=\"search-area\"&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;form id=\"search-form\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;div class=\"search-input-area\"&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;i class=\"fa fa-search left-icon\"&gt;&lt;/i&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;input id=\"search-query\" placeholder=\"全文検索\" /&gt;'</span> <span class=\"o\">+</span>\n                        <span class=\"s1\">'&lt;i class=\"fa fa-close right-icon\"&gt;&lt;/i&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;/div&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;input id=\"search-start\" type=\"hidden\" value=\"0\"/&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;input id=\"search-num\" type=\"hidden\" value=\"'</span> <span class=\"o\">+</span> <span class=\"nx\">COUNT_PAR_PAGE</span> <span class=\"o\">+</span> <span class=\"s1\">'\"/&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;form&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// イベント登録</span>\n        <span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"kd\">var</span> <span class=\"nx\">$searchArea</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 入力項目の検索条件でEnterを押したら、検索処理を実行する</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-form'</span><span class=\"p\">).</span><span class=\"nx\">submit</span><span class=\"p\">({</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 虫眼鏡アイコン押下したら、検索処理を実行する</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".left-icon\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">({</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n\n            <span class=\"c1\">// 検索条件入力したら、</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\"#search-query\"</span><span class=\"p\">).</span><span class=\"nx\">keyup</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n              <span class=\"kd\">var</span> <span class=\"nx\">$this</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">);</span>\n              <span class=\"kd\">var</span> <span class=\"nx\">$rightIcon</span> <span class=\"o\">=</span> <span class=\"nx\">$this</span><span class=\"p\">.</span><span class=\"nx\">parent</span><span class=\"p\">().</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".right-icon\"</span><span class=\"p\">);</span>\n\n              <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">$this</span><span class=\"p\">.</span><span class=\"nx\">val</span><span class=\"p\">().</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                 <span class=\"c1\">// 検索条件に値がある場合は×アイコンの色を濃くする</span>\n                 <span class=\"nx\">$rightIcon</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#555'</span><span class=\"p\">);</span>\n              <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                 <span class=\"c1\">// 検索条件に値がない場合は×アイコンの色を薄くする</span>\n                 <span class=\"nx\">$rightIcon</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#ccc'</span><span class=\"p\">);</span>\n              <span class=\"p\">}</span>\n            <span class=\"p\">});</span>\n\n            <span class=\"c1\">// ×アイコン押下したら、</span>\n            <span class=\"nx\">$searchArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\".right-icon\"</span><span class=\"p\">).</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n              <span class=\"c1\">// ×アイコンの色を薄くして</span>\n              <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">).</span><span class=\"nx\">css</span><span class=\"p\">(</span><span class=\"s1\">'color'</span><span class=\"p\">,</span><span class=\"s1\">'#ccc'</span><span class=\"p\">)</span>\n                      <span class=\"c1\">// 検索条件をクリアする</span>\n                     <span class=\"p\">.</span><span class=\"nx\">parent</span><span class=\"p\">().</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s2\">\"input\"</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">);</span>\n            <span class=\"p\">});</span>\n        <span class=\"p\">});</span>\n\n    <span class=\"c1\">// ドキュメントタイトルの</span>\n    <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#header&gt;h1'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// 直下に検索結果エリアを挿入</span>\n        <span class=\"p\">.</span><span class=\"nx\">before</span><span class=\"p\">(</span>\n            <span class=\"s1\">'&lt;div id=\"search-result-area\"&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div id=\"search-result-subheader\"&gt;&lt;/div&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div id=\"search-result-content\"&gt;&lt;/div&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">)</span>\n        <span class=\"c1\">// イベント登録</span>\n        <span class=\"p\">.</span><span class=\"nx\">ready</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span>\n                <span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-area'</span><span class=\"p\">)</span>\n                    <span class=\"c1\">// 検索結果エリアのバツアイコンをクリックしたら、</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s1\">'#remove-search-result'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                      <span class=\"kd\">var</span> <span class=\"nx\">$searchResultArea</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">delegateTarget</span><span class=\"p\">)</span>\n                      <span class=\"c1\">// 検索結果エリアを非表示モードにする</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">removeClass</span><span class=\"p\">(</span><span class=\"s1\">'show'</span><span class=\"p\">);</span>\n                      <span class=\"c1\">// 検索結果エリアの中身を削除する</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-subheader'</span><span class=\"p\">).</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n                      <span class=\"nx\">$searchResultArea</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-content'</span><span class=\"p\">).</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n                    <span class=\"p\">})</span>\n                    <span class=\"c1\">// 前ページリンクをクリックしたら、１ページ前を検索する</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#prevPageLink\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">)</span>\n                    <span class=\"c1\">// 次ページリンクをクリックしたら、１ページ後を検索する</span>\n                    <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"click\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#nextPageLink\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"na\">navi</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"nx\">doSearch</span><span class=\"p\">);</span>\n        <span class=\"p\">});</span>\n\n\n\n    <span class=\"cm\">/**\n     * 検索処理\n     *\n     * @param  {eventObject} event\n     * @return {boolean}  submit処理を中断させるために必ずfalseを返却する\n     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">doSearch</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">){</span>\n      <span class=\"c1\">// 検索フィールドの値をトリムして取得</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">searchQuery</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">trim</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-query'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">());</span>\n      <span class=\"c1\">// 空の場合は検索処理を実行しない</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">searchQuery</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// 表示開始位置、表示件数の取得</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-start'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">()),</span>\n          <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-num'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">());</span>\n      <span class=\"c1\">// 表示開始位置のチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">start</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">// 表示件数のチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">num</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">||</span> <span class=\"nx\">num</span> <span class=\"o\">&gt;</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"mi\">20</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"c1\">// 表示ページ情報の取得</span>\n      <span class=\"k\">switch</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">navi</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n          <span class=\"c1\">// 前のページの場合</span>\n          <span class=\"nx\">start</span> <span class=\"o\">-=</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"k\">case</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n          <span class=\"c1\">// 次のページの場合</span>\n          <span class=\"nx\">start</span> <span class=\"o\">+=</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"nl\">default</span><span class=\"p\">:</span>\n        <span class=\"k\">case</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n          <span class=\"nx\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n          <span class=\"k\">break</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// URLを構築</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"nx\">FESS_JSON_ENDPOINT</span> <span class=\"o\">+</span> <span class=\"s1\">'?callback=?'</span> <span class=\"o\">+</span> <span class=\"c1\">// 別ドメインを想定してJSONP形式でリクエストを送信する</span>\n                                     <span class=\"s1\">'&amp;q='</span> <span class=\"o\">+</span> <span class=\"nb\">encodeURIComponent</span><span class=\"p\">(</span><span class=\"nx\">searchQuery</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n                                     <span class=\"s1\">'&amp;start='</span> <span class=\"o\">+</span> <span class=\"nx\">start</span> <span class=\"o\">+</span>\n                                     <span class=\"s1\">'&amp;num='</span> <span class=\"o\">+</span> <span class=\"nx\">num</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// 検索リクエスト送信</span>\n      <span class=\"c1\">// 別ドメインを想定してJSONP形式でリクエストを送信する</span>\n      <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">({</span>\n          <span class=\"na\">url</span><span class=\"p\">:</span> <span class=\"nx\">url</span><span class=\"p\">,</span>\n          <span class=\"na\">dataType</span><span class=\"p\">:</span> <span class=\"s1\">'jsonp'</span><span class=\"p\">,</span>\n          <span class=\"na\">success</span><span class=\"p\">:</span> <span class=\"nx\">renderSearchResult</span>\n      <span class=\"p\">});</span>\n\n\n      <span class=\"c1\">// ページ情報の更新</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#searchNum'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// ページ表示を上部に移動</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">).</span><span class=\"nx\">scrollTop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n      <span class=\"c1\">// サブミットを抑止するためにfalseを返す</span>\n      <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n\n\n    <span class=\"cm\">/**\n     * 検索成功時に検索結果を描画する\n     *\n     * @param  {Anything} data レスポンスデータ\n     */</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">renderSearchResult</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 検索結果処理</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">dataResponse</span> <span class=\"o\">=</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">response</span><span class=\"p\">;</span>\n      <span class=\"c1\">// ステータスチェック</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">status</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s2\">\"検索中に問題が発生しました。\"</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// 検索結果領域を表示する</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-area'</span><span class=\"p\">).</span><span class=\"nx\">addClass</span><span class=\"p\">(</span><span class=\"s1\">'show'</span><span class=\"p\">);</span>\n\n      <span class=\"kd\">var</span> <span class=\"nx\">$searchResultSubheader</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-subheader'</span><span class=\"p\">),</span>\n          <span class=\"nx\">$searchResultContent</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-result-content'</span><span class=\"p\">),</span>\n          <span class=\"nx\">record_count</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">record_count</span><span class=\"p\">;</span>\n\n      <span class=\"c1\">// 検索結果がない場合</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">record_count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// サブヘッダーに出力</span>\n        <span class=\"nx\">$searchResultSubheader</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span>  <span class=\"s1\">'&lt;div id=\"remove-search-result\" style=\"float:right;\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/div&gt;'</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// 結果領域に出力</span>\n        <span class=\"nx\">$searchResultContent</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;b&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">q</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/b&gt;に一致する情報は見つかりませんでした。'</span><span class=\"p\">;</span>\n\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n\n      <span class=\"c1\">// 検索にヒットした場合</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">page_number</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_number</span><span class=\"p\">,</span>\n          <span class=\"nx\">page_size</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_size</span><span class=\"p\">,</span>\n          <span class=\"nx\">page_count</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">page_count</span><span class=\"p\">,</span>\n          <span class=\"nx\">startRange</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nx\">page_size</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n          <span class=\"nx\">endRange</span> <span class=\"o\">=</span> <span class=\"nx\">page_number</span> <span class=\"o\">*</span> <span class=\"nx\">page_size</span><span class=\"p\">,</span>\n          <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n          <span class=\"nx\">max</span><span class=\"p\">,</span>\n          <span class=\"nx\">offset</span> <span class=\"o\">=</span> <span class=\"nx\">startRange</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'#search-start'</span><span class=\"p\">).</span><span class=\"nx\">val</span><span class=\"p\">(</span><span class=\"nx\">offset</span><span class=\"p\">);</span>\n\n\n      <span class=\"c1\">// サブヘッダーに出力</span>\n      <span class=\"nx\">$searchResultSubheader</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">innerHTML</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;b&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">q</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/b&gt; の検索結果 '</span> <span class=\"o\">+</span>\n                                <span class=\"nx\">record_count</span> <span class=\"o\">+</span> <span class=\"s2\">\" 件中 \"</span> <span class=\"o\">+</span>  <span class=\"nx\">startRange</span> <span class=\"o\">+</span> <span class=\"s1\">' - '</span> <span class=\"o\">+</span>\n                                <span class=\"nx\">endRange</span> <span class=\"o\">+</span> <span class=\"s1\">' 件目 ('</span> <span class=\"o\">+</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">exec_time</span> <span class=\"o\">+</span> <span class=\"s1\">' 秒)'</span> <span class=\"o\">+</span>\n                               <span class=\"s1\">'&lt;div id=\"remove-search-result\" style=\"float:right;\"&gt;&lt;i class=\"fa fa-times\"&gt;&lt;/i&gt;&lt;/div&gt;'</span>\n\n      <span class=\"c1\">// 検索結果領域のクリア</span>\n      <span class=\"nx\">$searchResultContent</span><span class=\"p\">.</span><span class=\"nx\">empty</span><span class=\"p\">();</span>\n\n\n      <span class=\"c1\">// 検索結果の出力</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">$resultBody</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;ol/&gt;\"</span><span class=\"p\">);</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">results</span> <span class=\"o\">=</span> <span class=\"nx\">dataResponse</span><span class=\"p\">.</span><span class=\"nx\">result</span><span class=\"p\">;</span>\n      <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">max</span> <span class=\"o\">=</span> <span class=\"nx\">results</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">max</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">element</span> <span class=\"o\">=</span>\n            <span class=\"s1\">'&lt;li&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;h4 class=\"title\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;a href=\"'</span> <span class=\"o\">+</span><span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">url_link</span> <span class=\"o\">+</span> <span class=\"s1\">'\"&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">title</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/a&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;/h4&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;div class=\"body\"&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">content_description</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;br/&gt;'</span> <span class=\"o\">+</span>\n                    <span class=\"s1\">'&lt;cite&gt;'</span> <span class=\"o\">+</span> <span class=\"nx\">results</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">site</span> <span class=\"o\">+</span> <span class=\"s1\">'&lt;/cite&gt;'</span> <span class=\"o\">+</span>\n                <span class=\"s1\">'&lt;/div&gt;'</span> <span class=\"o\">+</span>\n            <span class=\"s1\">'&lt;/li&gt;'</span><span class=\"p\">;</span>\n\n        <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">).</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$resultBody</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">$resultBody</span><span class=\"p\">.</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$searchResultContent</span><span class=\"p\">);</span>\n\n\n      <span class=\"c1\">// ページ番号情報の出力</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">pageArea</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>\n      <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;div id=\"pageInfo\"&gt;'</span><span class=\"p\">,</span> <span class=\"nx\">page_number</span><span class=\"p\">,</span> <span class=\"s1\">'ページ目&lt;br/&gt;'</span><span class=\"p\">);</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 前のページへのリンク</span>\n        <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;a id=\"prevPageLink\" href=\"#\"&gt;&amp;lt;&amp;lt;前ページへ&lt;/a&gt; '</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">page_number</span> <span class=\"o\">&lt;</span> <span class=\"nx\">page_count</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 次のページへのリンク</span>\n        <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;a id=\"nextPageLink\" href=\"#\"&gt;次ページへ&amp;gt;&amp;gt;&lt;/a&gt;'</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"s1\">'&lt;/div&gt;'</span><span class=\"p\">);</span>\n      <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">pageArea</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s2\">\"\"</span><span class=\"p\">)).</span><span class=\"nx\">appendTo</span><span class=\"p\">(</span><span class=\"nx\">$searchResultContent</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">full-text-search.css</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">@charset</span> <span class=\"s1\">\"UTF-8\"</span><span class=\"p\">;</span>\n\n<span class=\"nf\">#search-area</span> <span class=\"p\">{</span>\n    <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"p\">{</span>\n    <span class=\"nl\">position</span><span class=\"p\">:</span><span class=\"nb\">relative</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* 入力項目 */</span>\n<span class=\"nf\">#search-query</span> <span class=\"p\">{</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span> <span class=\"m\">2em</span><span class=\"p\">;</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">black</span><span class=\"p\">;</span>\n    <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"n\">arial</span><span class=\"p\">,</span><span class=\"nb\">sans-serif</span><span class=\"p\">;</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span>\n    <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">2em</span><span class=\"p\">;</span>\n    <span class=\"nl\">outline</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nt\">input</span><span class=\"nd\">:focus</span> <span class=\"p\">{</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"m\">#4d90fe</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* アイコンは入力項目の左と右に配置する */</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"o\">,</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span> <span class=\"p\">{</span>\n    <span class=\"c\">/* 縦方向の中央寄せ */</span>\n    <span class=\"nl\">position</span><span class=\"p\">:</span><span class=\"nb\">absolute</span><span class=\"p\">;</span>\n    <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">50%</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">-0.5em</span><span class=\"p\">;</span>\n    <span class=\"py\">font-sise</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 要素にマウスを合わせたら、マウスポインタのマークを変える */</span>\n    <span class=\"nl\">cursor</span><span class=\"p\">:</span><span class=\"nb\">pointer</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span> <span class=\"p\">{</span>\n    <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span><span class=\"p\">;</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span><span class=\"m\">#444</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span> <span class=\"p\">{</span>\n    <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0.7em</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 最初は、グレーアウトしておく */</span>\n    <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* アイコンにマウスを合わせたら、サイズを大きくする */</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"nd\">:hover</span><span class=\"o\">,</span>\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1.4em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.left-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n\n<span class=\"nc\">.search-input-area</span> <span class=\"nc\">.right-icon</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n    <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c\">/* 検索結果表示時に適用するスタイル */</span>\n<span class=\"nf\">#search-result-area</span><span class=\"nc\">.show</span> <span class=\"p\">{</span>\n    <span class=\"nl\">background</span><span class=\"p\">:</span> <span class=\"m\">#f8f8f7</span><span class=\"p\">;</span>\n    <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">0px</span> <span class=\"nb\">solid</span><span class=\"p\">;</span>\n    <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">0.5em</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-top</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n</pre></div>\n</div>\n\n<h3>\n<span id=\"ドキュメントに全文検索用資産の読み込み処理を追加\" class=\"fragment\"></span><a href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AB%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E7%94%A8%E8%B3%87%E7%94%A3%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF%E5%87%A6%E7%90%86%E3%82%92%E8%BF%BD%E5%8A%A0\"><i class=\"fa fa-link\"></i></a>ドキュメントに全文検索用資産の読み込み処理を追加</h3>\n\n<p>前手順でドキュメント用Webサーバに配置した<code>full-text-search.js</code>と<code>full-text-search.css</code>を、<br>\n各ドキュメントから読み込むようにします。<br>\n<code>full-text-search.js</code>はjQueryに依存しているので、<br>\n既存のドキュメントで読み込んでいない場合はjQueryも読み込みも追加してください。</p>\n\n<p>ドキュメント用Webサーバがこのようなフォルダ構成だとしたら、</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ドキュメント用Webサーバのドキュメントルート\n├── full-text-search.css\n├── full-text-search.js\n└── asciidoctor-sample\n    └── asciidoctor-sample.html\n</pre></div></div>\n\n<p><code>asciidoctor-sample.adoc</code>には下記を追加します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>++++\n&lt;link rel=\"stylesheet\" href=\"../full-text-search.css\"&gt;&lt;/link&gt;\n&lt;script\n  src=\"https://code.jquery.com/jquery-3.2.1.min.js\"\n  integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\"\n  crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n&lt;script src=\"../full-text-search.js\"&gt;&lt;/script&gt;\n++++\n</pre></div></div>\n\n<h3>\n<span id=\"全文検索ができるかの確認\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E6%96%87%E6%A4%9C%E7%B4%A2%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%8B%E3%81%AE%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>全文検索ができるかの確認</h3>\n\n<p>以上の手順を実施すると、Asdciidoctorで全文検索ができるようになります。<br>\nドキュメントをブラウザで見ると、目次上部に検索窓が追加されています。<br>\n<a href=\"https://camo.qiitausercontent.com/daf3699de0e01b28ba4d3c2a8b8b535d3c54a2ab/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39393039336364362d353865382d376364652d613364382d3562656332613032303636382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/daf3699de0e01b28ba4d3c2a8b8b535d3c54a2ab/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f39393039336364362d353865382d376364652d613364382d3562656332613032303636382e706e67\" alt=\"7_全文検索イメージ_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/99093cd6-58e8-7cde-a3d8-5bec2a020668.png\"></a><br>\n<br></p>\n\n<p>検索条件を入力し、虫眼鏡アイコンをクリックすると、検索結果が表示されます。<br>\n<a href=\"https://camo.qiitausercontent.com/5d8e0c5f2db223d5f021d484351b0c840010bb4f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63646533643865612d643838332d613636622d663838642d3961353934313032366263392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/5d8e0c5f2db223d5f021d484351b0c840010bb4f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f63646533643865612d643838332d613636622d663838642d3961353934313032366263392e706e67\" alt=\"7_全文検索イメージ_2.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/cde3d8ea-d883-a66b-f88d-9a5941026bc9.png\"></a><br>\n<br></p>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>FessのREST APIを使用してAsciidoctorで全文検索できるようにする方法を紹介しました。<br>\nFessのREST APIを使えば、Asciidoctorに限らず、様々なシステムに全文検索機能を導入できそうです。</p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<ul>\n<li><a href=\"http://fess.codelibs.org/ja/articles/article-4.html#js\" rel=\"nofollow noopener\" target=\"_blank\">Fess で作るApache Solrベースの検索サーバー 〜 REST API 編</a></li>\n<li><a href=\"http://qiita.com/cookienote/items/1f2443be25630a78d946\" id=\"reference-69c989703115d994be84\">全文検索サーバー Fess を Docker で動かす</a></li>\n</ul>\n","body":"[Asciidoctor](http://asciidoctor.org/)を使うと、技術文書や手順書などのドキュメントを簡単にHTMLで公開できますが、ドキュメントが多くなると自分の調べたいキーワードが、どのドキュメントに載っているのか探すのが困難になってきます。\n\nそこで今回は、Dockerで全文検索サーバの[Fess](http://fess.codelibs.org/ja/)を立てて、\nドキュメントからJavaScript経由でFessのJSON APIを呼び出すことで、\n全文検索を簡単に導入する方法をご紹介します。\n\n導入するとドキュメントの右上に検索窓が出てきて全文検索できるようになります。\n![6月-24-2017 19-05-32.gif](https://qiita-image-store.s3.amazonaws.com/0/49915/123ec771-fb77-e4dc-df7e-a4b407792759.gif \"6月-24-2017 19-05-32.gif\")\n\n\n## Fessとは\n[Fess](http://fess.codelibs.org/ja/)は**「5 分で簡単に構築可能な全文検索サーバー」**です。\nJavaベースで構築されており、Apacheライセンスで提供されるオープンソース製品で、無料で使用できます。\n自分でクローラを設定して、自分だけの検索エンジンがつくれるようなイメージです。\nデフォルトで検索画面を提供していますが、JSON APIも提供しているので、様々なシステムと連携可能です。\n\n\n## 全体像\nドキュメント用Webサーバに全文検索用のJavaScriptファイルとCSSファイルを追加し、Dockerで全文検索用のFessサーバを立てます。\nFessサーバはドキュメント用Webサーバをクロールし、その情報を保存しておきます。\nドキュメントで全文検索を実施すると、JavaScript経由でFessサーバのJSON AIPを呼び出して、全文検索結果をドキュメントに表示します。\n\n![0_Fess_全体像_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/10c8ac46-2155-8eb7-a5ed-7c13ce544ec2.png)\n\n![0_Fess_全体像_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/40e1d456-2635-2aed-333d-8b1aec447931.png)\n\n## 導入手順\nこの導入手順は、下記のような環境\u001c（ローカルPCのDocker上にドキュメント用WebサーバとFessサーバが立っている環境）を作った時のものです。\nDockerを使わなくても、ローカルPC以外でも、導入可能です。導入手順は適宜読み替えてください。\n\n![0_Fess_全体像_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/0badb8d2-1a58-22b6-457c-12becf3a8911.png)\n\n\n### Fessのインストール\nDocker Hubの[codelibs/fess](https://hub.docker.com/r/codelibs/fess/)を使用します。今回ポートは10084で公開します。\nDockerを使わない場合は[Fess インストールガイド](http://fess.codelibs.org/ja/11.2/install/index.html)を参考にしてください。\n\n```\n$ docker run -d -p 10084:8080 --name fess codelibs/fess:latest\n```\n\n### Fessの設定\n#### クローラの設定\n`http://[PCのローカルIPアドレス]:10084/login`にアクセスするとログイン画面が表示されます。\nデフォルトのID/PASS　`admin/admin`でログインしましょう。\n![1_Fess管理者_ログイン画面.png](https://qiita-image-store.s3.amazonaws.com/0/49915/e790eca9-5073-948e-3e43-d7546d57fae5.png)\n<br/>\n\nログインするとダッシュボードが表示されます。左ペインの`クローラ` > `Web`　を選択しましょう。\n![2_Fess管理者_ダッシュボード.png](https://qiita-image-store.s3.amazonaws.com/0/49915/acfbe950-fa74-d0cb-3cee-5e8db4de5b74.png)\n<br/>\n\nWebクローラにはまだ何も登録されていないので、左上の`+　新規作成`ボタンをクリックしましょう。\n![3_Fess管理者_Webクロール設定_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/631037b4-aab2-8e0d-f9aa-3d23ec917a29.png)\n<br/>\n\nWebクロール情報入力画面が表示されます。\n![3_Fess管理者_Webクロール設定_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/ee5a09c9-7cce-3fec-7884-1258c32fa91a.png \"3_Fess管理者_Webクロール設定_2.png\")\n\n設定項目は色々ありますが、とりあえず下記項目だけ設定しましょう。\n\n* 名前 \n    * 任意の名前を設定してください。\n* URL \n    * ドキュメント用Webサーバにおいてドキュメントが格納されているルートフォルダのURLを指定してください。末尾に`/`を付けてください。\n* クロール対象とするURL \n    * 正規表現で値を設定します。上記`URL`で設定したルートフォルダ配下の全資産を対象とするために、`URLで設定した値` + `.*` を指定してください。\n* 検索対象とするURL\n   * 正規表現で値を設定します。HTMLのみを検索対象にしたい（JS、CSSなどは除外したい）ので、`URLで設定した値` + `.+\\.html$` を指定してください。\n<br/>\n<br/>\n\n\n値を設定したら、画面を下にスクロールして`+　作成`ボタンをクリックします。\nすると下記のようにWebクロールのデータが１件登録されます。\n![3_Fess管理者_Webクロール設定_4.png](https://qiita-image-store.s3.amazonaws.com/0/49915/3d00bf5a-f131-d367-de53-af10bb36839d.png)\n<br/>\n\n\n#### クローラの実行\n左ペインで　`システム` > `スケジューラ` を選択してジョブスケジューラを開きます。\nジョブスケジューラで `Default Crawler`を選択します。\n![4_Fess管理者_スケジューラ_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/b0aeca0d-64a4-43da-782b-0a1a0cd70b83.png)\n<br/>\n\n`今すぐ開始`をクリックします。\n![4_Fess管理者_スケジューラ_1.1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/00e76920-bfad-eeb1-cb99-724e3a9392a9.png \"4_Fess管理者_スケジューラ_1.1.png\")\n<br/>\n\nするとクロールが実行されます。\n![4_Fess管理者_スケジューラ_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/725d300f-07f5-724d-ce93-8e1c9752e10e.png)\n<br/>\n\nしばらくして`F5`キーを押してブラウザを更新してください。\nクロールが終了すると、スケジューラの状態が`実行中`から`有効`になります。\n![4_Fess管理者_スケジューラ_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/ee4f5277-aac3-ad7e-cdeb-41d39b733c1f.png)\n<br/>\n\n\n#### クローラ実行結果の確認\n左ペインの`システム情報`>`クロール情報`を選択すると、先ほど実行したクロールの結果が表示されています。その行を選択します。\n![5_Fess管理者_システム情報_クロール情報_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/92f310b5-83f6-deda-448d-afa8c5b0f104.png \"5_Fess管理者_システム情報_クロール情報_1.png\")\n<br/>\n\n\nセッションIDを選択します。\n![5_Fess管理者_システム情報_クロール情報_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/4e80cd14-3634-f665-b448-8b4b4e7a8d21.png \"5_Fess管理者_システム情報_クロール情報_2.png\")\n<br/>\n\nここにドキュメント用Webサーバのドキュメントが全て表示されればOKです。\n![5_Fess管理者_システム情報_クロール情報_3.png](https://qiita-image-store.s3.amazonaws.com/0/49915/60b86bc4-f70f-42c8-a017-5f138b3b88e3.png \"5_Fess管理者_システム情報_クロール情報_3.png\")\n<br/>\n\n### ドキュメント用Webサーバに全文検索用資産を配置\n全文検索用の資産は`full-text-search.js`と`full-text-search.css`の２つです。\n`full-text-search.js`の変数 FESS_JSON_ENDPOINT(FESSサーバのJSON APIのエンドポイント) は適時置き換えてください。\nこれらの資産をドキュメント用Webサーバのドキュメントのルートフォルダ直下に配置してください。\n\n```javascript:full-text-search.js\n$(function() {\n    'use strict';\n\n    // FESSサーバのJSON APIのエンドポイント（FessサーバのIPアドレス + /json）\n    var FESS_JSON_ENDPOINT = 'http://192.168.1.5:10084/json';\n\n    // １ページあたりの検索結果表示件数\n    var COUNT_PAR_PAGE = 10;\n\n\n    // 目次の\n    $('#toc')\n        // 一番上に検索条件入力エリアを挿入\n        .prepend(\n            '<div id=\"search-area\">' +\n                '<form id=\"search-form\">' +\n                    '<div class=\"search-input-area\">' +\n                        '<i class=\"fa fa-search left-icon\"></i>' +\n                        '<input id=\"search-query\" placeholder=\"全文検索\" />' +\n                        '<i class=\"fa fa-close right-icon\"></i>' +\n                    '</div>' +\n                    '<input id=\"search-start\" type=\"hidden\" value=\"0\"/>' +\n                    '<input id=\"search-num\" type=\"hidden\" value=\"' + COUNT_PAR_PAGE + '\"/>' +\n                '<form>' +\n            '</div>')\n        // イベント登録\n        .ready(function() {\n            var $searchArea = $(this);\n\n            // 入力項目の検索条件でEnterを押したら、検索処理を実行する\n            $searchArea.find('#search-form').submit({navi:0}, doSearch);\n\n            // 虫眼鏡アイコン押下したら、検索処理を実行する\n            $searchArea.find(\".left-icon\").click({navi:0}, doSearch);\n\n            // 検索条件入力したら、\n            $searchArea.find(\"#search-query\").keyup(function(){\n              var $this = $(this);\n              var $rightIcon = $this.parent().find(\".right-icon\");\n\n              if($this.val().length > 0) {\n                 // 検索条件に値がある場合は×アイコンの色を濃くする\n                 $rightIcon.css('color','#555');\n              } else {\n                 // 検索条件に値がない場合は×アイコンの色を薄くする\n                 $rightIcon.css('color','#ccc');\n              }\n            });\n\n            // ×アイコン押下したら、\n            $searchArea.find(\".right-icon\").click(function(){\n              // ×アイコンの色を薄くして\n              $(this).css('color','#ccc')\n                      // 検索条件をクリアする\n                     .parent().find(\"input\").val('');\n            });\n        });\n\n    // ドキュメントタイトルの\n    $('#header>h1')\n        // 直下に検索結果エリアを挿入\n        .before(\n            '<div id=\"search-result-area\">' +\n                '<div id=\"search-result-subheader\"></div>' +\n                '<div id=\"search-result-content\"></div>' +\n            '</div>')\n        // イベント登録\n        .ready(function() {\n            $(this)\n                .find('#search-result-area')\n                    // 検索結果エリアのバツアイコンをクリックしたら、\n                    .on(\"click\", '#remove-search-result', function(e) {\n                      var $searchResultArea = $(e.delegateTarget)\n                      // 検索結果エリアを非表示モードにする\n                      $searchResultArea.removeClass('show');\n                      // 検索結果エリアの中身を削除する\n                      $searchResultArea.find('#search-result-subheader').empty();\n                      $searchResultArea.find('#search-result-content').empty();\n                    })\n                    // 前ページリンクをクリックしたら、１ページ前を検索する\n                    .on(\"click\", \"#prevPageLink\", {navi:-1}, doSearch)\n                    // 次ページリンクをクリックしたら、１ページ後を検索する\n                    .on(\"click\", \"#nextPageLink\", {navi:1}, doSearch);\n        });\n\n\n\n    /**\n     * 検索処理\n     *\n     * @param  {eventObject} event\n     * @return {boolean}  submit処理を中断させるために必ずfalseを返却する\n     */\n    function doSearch(event){\n      // 検索フィールドの値をトリムして取得\n      var searchQuery = $.trim($('#search-query').val());\n      // 空の場合は検索処理を実行しない\n      if(searchQuery.length == 0) {\n        return false;\n      }\n\n\n      // 表示開始位置、表示件数の取得\n      var start = parseInt($('#search-start').val()),\n          num = parseInt($('#search-num').val());\n      // 表示開始位置のチェック\n      if(start < 0) {\n        start = 0;\n      }\n      // 表示件数のチェック\n      if(num < 1 || num > 100) {\n        num = 20;\n      }\n      // 表示ページ情報の取得\n      switch(event.data.navi) {\n        case -1:\n          // 前のページの場合\n          start -= num;\n          break;\n        case 1:\n          // 次のページの場合\n          start += num;\n          break;\n        default:\n        case 0:\n          start = 0;\n          break;\n      }\n\n\n      // URLを構築\n      var url = FESS_JSON_ENDPOINT + '?callback=?' + // 別ドメインを想定してJSONP形式でリクエストを送信する\n                                     '&q=' + encodeURIComponent(searchQuery) +\n                                     '&start=' + start +\n                                     '&num=' + num;\n\n      // 検索リクエスト送信\n      // 別ドメインを想定してJSONP形式でリクエストを送信する\n      $.ajax({\n          url: url,\n          dataType: 'jsonp',\n          success: renderSearchResult\n      });\n\n\n      // ページ情報の更新\n      $('#searchNum').val(num);\n\n      // ページ表示を上部に移動\n      $(document).scrollTop(0);\n\n      // サブミットを抑止するためにfalseを返す\n      return false;\n    };\n\n\n    /**\n     * 検索成功時に検索結果を描画する\n     *\n     * @param  {Anything} data レスポンスデータ\n     */\n    function renderSearchResult(data) {\n      // 検索結果処理\n      var dataResponse = data.response;\n      // ステータスチェック\n      if(dataResponse.status != 0) {\n        alert(\"検索中に問題が発生しました。\");\n        return;\n      }\n\n      // 検索結果領域を表示する\n      $('#search-result-area').addClass('show');\n\n      var $searchResultSubheader = $('#search-result-subheader'),\n          $searchResultContent = $('#search-result-content'),\n          record_count = dataResponse.record_count;\n\n      // 検索結果がない場合\n      if(record_count == 0) {\n        // サブヘッダーに出力\n        $searchResultSubheader[0].innerHTML =  '<div id=\"remove-search-result\" style=\"float:right;\"><i class=\"fa fa-times\"></i></div>';\n\n        // 結果領域に出力\n        $searchResultContent[0].innerHTML = '<b>' + dataResponse.q + '</b>に一致する情報は見つかりませんでした。';\n\n        return;\n      }\n\n\n      // 検索にヒットした場合\n      var page_number = dataResponse.page_number,\n          page_size = dataResponse.page_size,\n          page_count = dataResponse.page_count,\n          startRange = (page_number - 1) * page_size + 1,\n          endRange = page_number * page_size,\n          i = 0,\n          max,\n          offset = startRange - 1;\n\n      $('#search-start').val(offset);\n\n\n      // サブヘッダーに出力\n      $searchResultSubheader[0].innerHTML = '<b>' + dataResponse.q + '</b> の検索結果 ' +\n                                record_count + \" 件中 \" +  startRange + ' - ' +\n                                endRange + ' 件目 (' + dataResponse.exec_time + ' 秒)' +\n                               '<div id=\"remove-search-result\" style=\"float:right;\"><i class=\"fa fa-times\"></i></div>'\n\n      // 検索結果領域のクリア\n      $searchResultContent.empty();\n\n\n      // 検索結果の出力\n      var $resultBody = $(\"<ol/>\");\n      var results = dataResponse.result;\n      for(i = 0, max = results.length; i < max; i++) {\n        var element =\n            '<li>' +\n                '<h4 class=\"title\">' +\n                    '<a href=\"' +results[i].url_link + '\">' + results[i].title + '</a>' +\n                '</h4>' +\n                '<div class=\"body\">' +\n                    results[i].content_description +\n                    '<br/>' +\n                    '<cite>' + results[i].site + '</cite>' +\n                '</div>' +\n            '</li>';\n\n        $(element).appendTo($resultBody);\n      }\n      $resultBody.appendTo($searchResultContent);\n\n\n      // ページ番号情報の出力\n      var pageArea = [];\n      pageArea.push('<div id=\"pageInfo\">', page_number, 'ページ目<br/>');\n      if(page_number > 1) {\n        // 前のページへのリンク\n        pageArea.push('<a id=\"prevPageLink\" href=\"#\">&lt;&lt;前ページへ</a> ');\n      }\n      if(page_number < page_count) {\n        // 次のページへのリンク\n        pageArea.push('<a id=\"nextPageLink\" href=\"#\">次ページへ&gt;&gt;</a>');\n      }\n      pageArea.push('</div>');\n      $(pageArea.join(\"\")).appendTo($searchResultContent);\n    }\n});\n\n```\n\n\n```css:full-text-search.css\n@charset \"UTF-8\";\n\n#search-area {\n    margin-bottom: 1em;\n}\n\n.search-input-area {\n    position:relative;\n}\n\n/* 入力項目 */\n#search-query {\n    padding: 0.7em 2em;\n    width: 100%;\n    color: black;\n    font-family: arial,sans-serif;\n    font-size: 1em;\n    border: 1px solid #ccc;\n    border-radius: 2em;\n    outline: 0;\n}\n\n.search-input-area input:focus {\n    border: 1px solid #4d90fe;\n}\n\n/* アイコンは入力項目の左と右に配置する */\n.search-input-area .left-icon,\n.search-input-area .right-icon {\n    /* 縦方向の中央寄せ */\n    position:absolute;\n    top: 50%;\n    margin-top: -0.5em;\n    font-sise: 1em;\n    /* 要素にマウスを合わせたら、マウスポインタのマークを変える */\n    cursor:pointer;\n}\n\n.search-input-area .left-icon {\n    left: 0.7em;\n    color:#444;\n}\n\n.search-input-area .right-icon {\n    right: 0.7em;\n    /* 最初は、グレーアウトしておく */\n    color: #ccc;\n}\n\n/* アイコンにマウスを合わせたら、サイズを大きくする */\n.search-input-area .left-icon:hover,\n.search-input-area .right-icon:hover {\n    font-size: 1.4em;\n}\n\n\n.search-input-area .left-icon:hover {\n    left: 0.5em;\n}\n\n\n.search-input-area .right-icon:hover {\n    right: 0.5em;\n}\n\n/* 検索結果表示時に適用するスタイル */\n#search-result-area.show {\n    background: #f8f8f7;\n    border: 0px solid;\n    border-radius: 0.5em;\n    margin-top: 1em;\n    margin-bottom: 1em;\n    padding: 1em;\n}\n\n```\n\n### ドキュメントに全文検索用資産の読み込み処理を追加\n前手順でドキュメント用Webサーバに配置した`full-text-search.js`と`full-text-search.css`を、\n各ドキュメントから読み込むようにします。\n`full-text-search.js`はjQueryに依存しているので、\n既存のドキュメントで読み込んでいない場合はjQueryも読み込みも追加してください。\n\nドキュメント用Webサーバがこのようなフォルダ構成だとしたら、\n\n```\nドキュメント用Webサーバのドキュメントルート\n├── full-text-search.css\n├── full-text-search.js\n└── asciidoctor-sample\n    └── asciidoctor-sample.html\n```\n\n\n`asciidoctor-sample.adoc`には下記を追加します。\n\n```\n++++\n<link rel=\"stylesheet\" href=\"../full-text-search.css\"></link>\n<script\n  src=\"https://code.jquery.com/jquery-3.2.1.min.js\"\n  integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\"\n  crossorigin=\"anonymous\"></script>\n<script src=\"../full-text-search.js\"></script>\n++++\n```\n\n### 全文検索ができるかの確認\n以上の手順を実施すると、Asdciidoctorで全文検索ができるようになります。\nドキュメントをブラウザで見ると、目次上部に検索窓が追加されています。\n![7_全文検索イメージ_1.png](https://qiita-image-store.s3.amazonaws.com/0/49915/99093cd6-58e8-7cde-a3d8-5bec2a020668.png)\n<br/>\n\n検索条件を入力し、虫眼鏡アイコンをクリックすると、検索結果が表示されます。\n![7_全文検索イメージ_2.png](https://qiita-image-store.s3.amazonaws.com/0/49915/cde3d8ea-d883-a66b-f88d-9a5941026bc9.png)\n<br/>\n\n\n## まとめ\nFessのREST APIを使用してAsciidoctorで全文検索できるようにする方法を紹介しました。\nFessのREST APIを使えば、Asciidoctorに限らず、様々なシステムに全文検索機能を導入できそうです。\n\n\n## 参考\n* [Fess で作るApache Solrベースの検索サーバー 〜 REST API 編](http://fess.codelibs.org/ja/articles/article-4.html#js)\n* [全文検索サーバー Fess を Docker で動かす](http://qiita.com/cookienote/items/1f2443be25630a78d946)\n\n","comments_count":0,"created_at":"2017-06-26T00:21:37+09:00","likes_count":21,"reactions_count":0},"matches":3,"weight":150,"details":[{"weight":50,"keyword":"ドキュメント"},{"weight":50,"keyword":"asciidoctor"},{"weight":50,"keyword":"Qiita"}],"avgWeight":50,"totalWeight":44,"threshold":16.666666666666668,"isRelated":true}]},{"node":{"fields":{"slug":"/4bf6ffd5-8640-508e-ab47-1a55df05d72e/","title":"Declarative PipelineでJenkinsfileを書いてみた(Checkstyle,Findbugs,PMD,CPDとか)","date":"2017-04-07T02:38:55+09:00","excerpt":"GradleのJavaアプリをJenkinsで１人CIするためのJenkinsfileを書いてみた。Githubにプッシュ時に、AWS上のJenkinsのパイプラインジョブが動いて、テストが成功したら同じくAWS上のTomcatにデプロイす...","tags":["Java","Jenkins","CI","gradle","Pipeline","Qiita"],"keywords":["Java"],"thumbnail":""},"id":"4bf6ffd5-8640-508e-ab47-1a55df05d72e","title":"Declarative PipelineでJenkinsfileを書いてみた(Checkstyle,Findbugs,PMD,CPDとか)","rendered_body":"<p>GradleのJavaアプリをJenkinsで１人CIするためのJenkinsfileを書いてみた。<br>\nGithubにプッシュ時に、AWS上のJenkinsのパイプラインジョブが動いて、テストが成功したら同じくAWS上のTomcatにデプロイするみたいな感じで使ってます。</p>\n\n<h1>\n<span id=\"declarative-pipeline\" class=\"fragment\"></span><a href=\"#declarative-pipeline\"><i class=\"fa fa-link\"></i></a>Declarative Pipeline</h1>\n\n<p>いままではJenkinsfileを</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>node {\n  ....\n}\n</pre></div></div>\n\n<p>のように書いてましたが、<a href=\"https://jenkins.io/doc/book/pipeline/syntax/\" rel=\"nofollow noopener\" target=\"_blank\">Jenkinsの公式サイト</a>を見ると<br>\nこれはScripted Pipelinesの記法であり、<br>\nPipeline Pluginのバージョン2.5移行からは</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>pipeline {\n  ....  \n}\n</pre></div></div>\n\n<p>のように書くDeclarative Pipelineという記法が導入されて、<br>\nそっちのほうがシンプルでわかりやすく書けるよ!ということだったので書き直してみました。<br>\n確かにすっきりしたし（特に最後のメールおくるとことか、デプロイするとことか）、<br>\nいざとなったら従来のScripted Pipelinesもミックスできるのでいい感じです。</p>\n\n<h1>\n<span id=\"追加したプラグイン\" class=\"fragment\"></span><a href=\"#%E8%BF%BD%E5%8A%A0%E3%81%97%E3%81%9F%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3\"><i class=\"fa fa-link\"></i></a>追加したプラグイン</h1>\n\n<p>Jenkins初期設定時のSuggested Pluginに入っていないもの</p>\n\n<ul>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Checkstyle+Plugin;jsessionid=E9D4FA5064ACAE1CED7B19928DE0788F\" rel=\"nofollow noopener\" target=\"_blank\">Checkstyle Plugin</a>（v3.47） - Checkstyeの結果収集用</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/FindBugs+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">FindBugs Plugin</a>（v4.69） - Findbugsのレポート生成用 </li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/PMD+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">PMD Plugin</a>（v3.46） - PMDのレポート生成用</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/DRY+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">DRY Plugin</a>（v2.46） - CPD(重複コードチェック)のレポート生成用</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Step+Counter+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Step Counter Plugin</a>（v2.0.0） - ソースコードのステップ数を集計してくれる</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Task+Scanner+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Task Scanner Plugin</a>（v4.50） - ソースコード中のTODOとかを一覧化してくれる</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Javadoc+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Javadoc Plugin</a>（v1.4） - JavaDoc生成用</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Warnings+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Warnings Plugin</a>（v4.60） - ジョブ実行時の警告メッセージを収集してくれる</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/JaCoCo+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">JaCoCo Plugin</a>（v2.2.0） - テストカバレッジのレポート生成用</li>\n</ul>\n\n<h1>\n<span id=\"jenkinsfile\" class=\"fragment\"></span><a href=\"#jenkinsfile\"><i class=\"fa fa-link\"></i></a>Jenkinsfile</h1>\n\n<p>GithubからWebhookでJenkinsのパイプラインジョブを実行する。<br>\nパイプラインジョブではGithubのJenkinsfileを使う。<br>\nジョブの流れは下記。デプロイは静的コード解析とテストが成功したときだけ実行する。<br>\n<a href=\"https://camo.qiitausercontent.com/a055f84cfb5b829f162a94d38542e6ab990a5199/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35366338653132642d323637622d613633372d323234652d6663386362333437346466612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a055f84cfb5b829f162a94d38542e6ab990a5199/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35366338653132642d323637622d613633372d323234652d6663386362333437346466612e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/56c8e12d-267b-a637-224e-fc8cb3474dfa.png\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"groovy\">\n<div class=\"code-lang\"><span class=\"bold\">Jenkinsfile</span></div>\n<div class=\"highlight\"><pre><span class=\"n\">pipeline</span> <span class=\"o\">{</span>\n    <span class=\"n\">agent</span> <span class=\"n\">any</span>\n    <span class=\"c1\">// 定数や変数を定義する</span>\n    <span class=\"n\">environment</span> <span class=\"o\">{</span>\n        <span class=\"n\">reportDir</span> <span class=\"o\">=</span> <span class=\"s1\">'build/reports'</span>\n        <span class=\"n\">javaDir</span> <span class=\"o\">=</span> <span class=\"s1\">'src/main/java'</span>\n        <span class=\"n\">resourcesDir</span> <span class=\"o\">=</span> <span class=\"s1\">'src/main/resources'</span>\n        <span class=\"n\">testReportDir</span> <span class=\"o\">=</span> <span class=\"s1\">'build/test-results/test'</span>\n        <span class=\"n\">jacocoReportDir</span> <span class=\"o\">=</span> <span class=\"s1\">'build/jacoco'</span> \n        <span class=\"n\">javadocDir</span> <span class=\"o\">=</span> <span class=\"s1\">'build/docs/javadoc'</span>\n        <span class=\"n\">libsDir</span> <span class=\"o\">=</span> <span class=\"s1\">'build/libs'</span>\n        <span class=\"n\">appName</span> <span class=\"o\">=</span> <span class=\"s1\">'SampleApp'</span>\n        <span class=\"n\">appVersion</span> <span class=\"o\">=</span> <span class=\"s1\">'1.0.0'</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// stagesブロック中に一つ以上のstageを定義する</span>\n    <span class=\"n\">stages</span> <span class=\"o\">{</span>\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'事前準備'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 実際の処理はstepsブロック中に定義する</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"n\">deleteDir</span><span class=\"o\">()</span>\n\n                <span class=\"c1\">// このJobをトリガーしてきたGithubのプロジェクトをチェックアウト</span>\n                <span class=\"n\">checkout</span> <span class=\"n\">scm</span>\n\n                <span class=\"c1\">// ジョブ失敗の原因調査用にJenkinsfileとbuild.gradleは最初に保存する</span>\n                <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"Jenkinsfile\"</span>\n                <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"build.gradle\"</span>\n\n                <span class=\"c1\">// scriptブロックを使うと従来のScripted Pipelinesの記法も使える</span>\n                <span class=\"n\">script</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">// Permission deniedで怒られないために実行権限を付与する</span>\n                    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">isUnix</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                        <span class=\"n\">sh</span> <span class=\"s1\">'chmod +x gradlew'</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">gradlew</span> <span class=\"s1\">'clean'</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'コンパイル'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"n\">gradlew</span> <span class=\"s1\">'classes testClasses'</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"c1\">// postブロックでstepsブロックの後に実行される処理が定義できる</span>\n            <span class=\"n\">post</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// alwaysブロックはstepsブロックの処理が失敗しても成功しても必ず実行される</span>\n                <span class=\"n\">always</span> <span class=\"o\">{</span>\n\n                    <span class=\"c1\">// JavaDoc生成時に実行するとJavaDocの警告も含まれてしまうので</span>\n                    <span class=\"c1\">// Javaコンパイル時の警告はコンパイル直後に収集する</span>\n                    <span class=\"n\">step</span><span class=\"o\">([</span>\n\n                        <span class=\"c1\">// プラグインを実行するときのクラス指定は完全修飾名でなくてもOK</span>\n                        <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'WarningsPublisher'</span><span class=\"o\">,</span>\n\n                        <span class=\"c1\">// Job実行時のコンソールから警告を収集する場合はconsoleParsers、</span>\n                        <span class=\"c1\">// pmd.xmlなどのファイルから収集する場合はparserConfigurationsを指定する。</span>\n                        <span class=\"c1\">// なおparserConfigurationsの場合はparserNameのほかにpattern(集計対象ファイルのパス)も指定が必要</span>\n                        <span class=\"c1\">// パーサ名は下記プロパティファイルに定義されているものを使う</span>\n                        <span class=\"c1\">// https://github.com/jenkinsci/warnings-plugin/blob/master/src/main/resources/hudson/plugins/warnings/parser/Messages.properties</span>\n                        <span class=\"nl\">consoleParsers:</span> <span class=\"o\">[</span>\n                            <span class=\"o\">[</span><span class=\"nl\">parserName:</span> <span class=\"s1\">'Java Compiler (javac)'</span><span class=\"o\">],</span>\n                        <span class=\"o\">],</span>\n                        <span class=\"nl\">canComputeNew:</span> <span class=\"kc\">false</span><span class=\"o\">,</span>\n                        <span class=\"nl\">canResolveRelativesPaths:</span> <span class=\"kc\">false</span><span class=\"o\">,</span>\n                        <span class=\"nl\">usePreviousBuildAsReference:</span> <span class=\"kc\">true</span>\n                    <span class=\"o\">])</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'静的コード解析'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// 並列処理の場合はparallelメソッドを使う</span>\n                <span class=\"n\">parallel</span><span class=\"o\">(</span>\n                    <span class=\"s1\">'静的コード解析'</span> <span class=\"o\">:</span> <span class=\"o\">{</span>\n                        <span class=\"n\">gradlew</span> <span class=\"s1\">'check -x test'</span>\n\n                        <span class=\"c1\">// dirメソッドでカレントディレクトリを指定できる</span>\n                        <span class=\"n\">dir</span><span class=\"o\">(</span><span class=\"n\">reportDir</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                            <span class=\"n\">step</span><span class=\"o\">([</span>\n                                <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'CheckStylePublisher'</span><span class=\"o\">,</span>\n                                <span class=\"nl\">pattern:</span> <span class=\"s2\">\"checkstyle/*.xml\"</span>\n                            <span class=\"o\">])</span>\n                            <span class=\"n\">step</span><span class=\"o\">([</span>\n                                <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'FindBugsPublisher'</span><span class=\"o\">,</span>\n                                <span class=\"nl\">pattern:</span> <span class=\"s2\">\"findbugs/*.xml\"</span>\n                            <span class=\"o\">])</span>\n                            <span class=\"n\">step</span><span class=\"o\">([</span>\n                                <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'PmdPublisher'</span><span class=\"o\">,</span>\n                                <span class=\"nl\">pattern:</span> <span class=\"s2\">\"pmd/*.xml\"</span>\n                            <span class=\"o\">])</span>\n                            <span class=\"n\">step</span><span class=\"o\">([</span>\n                                <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'DryPublisher'</span><span class=\"o\">,</span>\n                                <span class=\"nl\">pattern:</span> <span class=\"s2\">\"cpd/*.xml\"</span>\n                            <span class=\"o\">])</span>\n\n                            <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"checkstyle/*.xml\"</span>\n                            <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"findbugs/*.xml\"</span>\n                            <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"pmd/*.xml\"</span>\n                            <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"cpd/*.xml\"</span>\n                        <span class=\"o\">}</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"s1\">'ステップカウント'</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n                        <span class=\"c1\">// レポート作成</span>\n                        <span class=\"c1\">// outputFileとoutputFormatを指定するとエクセルファイルも作成してくれる</span>\n                        <span class=\"n\">stepcounter</span> <span class=\"nl\">outputFile:</span> <span class=\"s1\">'stepcount.xls'</span><span class=\"o\">,</span> <span class=\"nl\">outputFormat:</span> <span class=\"s1\">'excel'</span><span class=\"o\">,</span> <span class=\"nl\">settings:</span> <span class=\"o\">[</span>\n                            <span class=\"o\">[</span><span class=\"nl\">key:</span><span class=\"s1\">'Java'</span><span class=\"o\">,</span> <span class=\"nl\">filePattern:</span> <span class=\"s2\">\"${javaDir}/**/*.java\"</span><span class=\"o\">],</span>\n                            <span class=\"o\">[</span><span class=\"nl\">key:</span><span class=\"s1\">'SQL'</span><span class=\"o\">,</span> <span class=\"nl\">filePattern:</span> <span class=\"s2\">\"${resourcesDir}/**/*.sql\"</span><span class=\"o\">],</span>\n                            <span class=\"o\">[</span><span class=\"nl\">key:</span><span class=\"s1\">'HTML'</span><span class=\"o\">,</span> <span class=\"nl\">filePattern:</span> <span class=\"s2\">\"${resourcesDir}/**/*.html\"</span><span class=\"o\">],</span>\n                            <span class=\"o\">[</span><span class=\"nl\">key:</span><span class=\"s1\">'JS'</span><span class=\"o\">,</span> <span class=\"nl\">filePattern:</span> <span class=\"s2\">\"${resourcesDir}/**/*.js\"</span><span class=\"o\">],</span>\n                            <span class=\"o\">[</span><span class=\"nl\">key:</span><span class=\"s1\">'CSS'</span><span class=\"o\">,</span> <span class=\"nl\">filePattern:</span> <span class=\"s2\">\"${resourcesDir}/**/*.css\"</span><span class=\"o\">]</span>\n                        <span class=\"o\">]</span>\n                        <span class=\"c1\">// 一応エクセルファイルも成果物として保存する</span>\n                        <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"stepcount.xls\"</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"s1\">'タスクスキャン'</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n                        <span class=\"n\">step</span><span class=\"o\">([</span>\n                            <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'TasksPublisher'</span><span class=\"o\">,</span>\n                            <span class=\"nl\">pattern:</span> <span class=\"s1\">'./**'</span><span class=\"o\">,</span>\n                            <span class=\"c1\">// 集計対象を検索するときに大文字小文字を区別するか</span>\n                            <span class=\"nl\">ignoreCase:</span> <span class=\"kc\">true</span><span class=\"o\">,</span>\n                            <span class=\"c1\">// 優先度別に集計対象の文字列を指定できる</span>\n                            <span class=\"c1\">// 複数指定する場合はカンマ区切りの文字列を指定する</span>\n                            <span class=\"nl\">high:</span> <span class=\"s1\">'System.out.System.err'</span><span class=\"o\">,</span>\n                            <span class=\"nl\">normal:</span> <span class=\"s1\">'TODO,FIXME,XXX'</span><span class=\"o\">,</span>\n                        <span class=\"o\">])</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"s1\">'JavaDoc'</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n                        <span class=\"n\">gradlew</span> <span class=\"s1\">'javadoc -x classes'</span>\n                        <span class=\"n\">step</span><span class=\"o\">([</span>\n                            <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'JavadocArchiver'</span><span class=\"o\">,</span>\n                            <span class=\"c1\">// Javadocのindex.htmlがあるフォルダのパスを指定する</span>\n                            <span class=\"nl\">javadocDir:</span> <span class=\"s2\">\"${javadocDir}\"</span><span class=\"o\">,</span>\n                            <span class=\"nl\">keepAll:</span> <span class=\"kc\">true</span>\n                        <span class=\"o\">])</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">)</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"n\">post</span> <span class=\"o\">{</span>\n                <span class=\"n\">always</span> <span class=\"o\">{</span>\n                   <span class=\"c1\">// JavaDocの警告を収集</span>\n                    <span class=\"n\">step</span><span class=\"o\">([</span>\n                        <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'WarningsPublisher'</span><span class=\"o\">,</span>\n                        <span class=\"nl\">consoleParsers:</span> <span class=\"o\">[</span>\n                            <span class=\"o\">[</span><span class=\"nl\">parserName:</span> <span class=\"s1\">'JavaDoc Tool'</span><span class=\"o\">]</span>\n                        <span class=\"o\">],</span>\n                        <span class=\"nl\">canComputeNew:</span> <span class=\"kc\">false</span><span class=\"o\">,</span>\n                        <span class=\"nl\">canResolveRelativesPaths:</span> <span class=\"kc\">false</span><span class=\"o\">,</span>\n                        <span class=\"nl\">usePreviousBuildAsReference:</span> <span class=\"kc\">true</span>\n                    <span class=\"o\">])</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'テスト'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"n\">gradlew</span> <span class=\"s1\">'test jacocoTestReport -x classes -x testClasses'</span>\n\n                <span class=\"n\">junit</span> <span class=\"s2\">\"${testReportDir}/*.xml\"</span>\n                <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"${testReportDir}/*.xml\"</span>\n\n                <span class=\"c1\">// カバレッジレポートを生成（テストクラスを除外）</span>\n                <span class=\"n\">step</span><span class=\"o\">([</span>\n                    <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'JacocoPublisher'</span><span class=\"o\">,</span>\n                    <span class=\"nl\">execPattern:</span> <span class=\"s2\">\"${jacocoReportDir}/*.exec\"</span><span class=\"o\">,</span>\n                    <span class=\"nl\">exclusionPattern:</span> <span class=\"s1\">'**/*Test.class'</span>\n                <span class=\"o\">])</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'デプロイ'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// whenブロックでstageを実行する条件を指定できる</span>\n            <span class=\"n\">when</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// 静的コード解析とテスト失敗時はデプロイしない</span>\n                <span class=\"n\">expression</span> <span class=\"o\">{</span><span class=\"n\">currentBuild</span><span class=\"o\">.</span><span class=\"na\">currentResult</span> <span class=\"o\">==</span> <span class=\"s1\">'SUCCESS'</span><span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"n\">gradlew</span> <span class=\"s1\">'jar'</span>\n                <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"${libsDir}/${appName}-${appVersion}.jar\"</span>\n                <span class=\"n\">gradlew</span> <span class=\"s1\">'war'</span>\n                <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"${libsDir}/${appName}-${appVersion}.war\"</span>\n                <span class=\"n\">deploy</span> <span class=\"nl\">warDir:</span> <span class=\"n\">libsDir</span><span class=\"o\">,</span> <span class=\"nl\">appName:</span> <span class=\"n\">appName</span><span class=\"o\">,</span> <span class=\"nl\">appVersion:</span> <span class=\"n\">appVersion</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// stagesブロックと同じレベルにpostブロックを定義すると</span>\n    <span class=\"c1\">// 全てのstage処理が終わった後の処理の定義が可能    </span>\n    <span class=\"n\">post</span> <span class=\"o\">{</span>\n        <span class=\"n\">always</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 最後にワークスペースの中身を削除</span>\n            <span class=\"n\">deleteDir</span><span class=\"o\">()</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 連続で成功しているとき以外は自分宛にメールを送信</span>\n\n        <span class=\"c1\">// 結果が前回と変わった時</span>\n        <span class=\"n\">changed</span> <span class=\"o\">{</span>\n            <span class=\"n\">sendMail</span><span class=\"o\">(</span><span class=\"s2\">\"${currentBuild.previousBuild.result} =&gt; ${currentBuild.currentResult}\"</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 失敗した時</span>\n        <span class=\"n\">failure</span> <span class=\"o\">{</span>\n            <span class=\"n\">sendMail</span><span class=\"o\">(</span><span class=\"n\">currentBuild</span><span class=\"o\">.</span><span class=\"na\">currentResult</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 不安定な時（主にテスト失敗時）</span>\n        <span class=\"n\">unstable</span> <span class=\"o\">{</span>\n            <span class=\"n\">sendMail</span><span class=\"o\">(</span><span class=\"n\">currentBuild</span><span class=\"o\">.</span><span class=\"na\">currentResult</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n\n<span class=\"c1\">// Gradlewコマンドを実行する</span>\n<span class=\"kt\">def</span> <span class=\"nf\">gradlew</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">isUnix</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"n\">sh</span> <span class=\"s2\">\"./gradlew ${command} --stacktrace\"</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n        <span class=\"n\">bat</span> <span class=\"s2\">\"./gradlew.bat ${command} --stacktrace\"</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// デプロイする</span>\n<span class=\"c1\">// args.warDir warの格納ディレクトリ </span>\n<span class=\"c1\">// args.appName アプリ名</span>\n<span class=\"c1\">// args.appVersion アプリのバージョン</span>\n<span class=\"kt\">def</span> <span class=\"nf\">deploy</span><span class=\"o\">(</span><span class=\"n\">Map</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 秘密鍵のパス ※Tomcatサーバにファイル転送するので事前にJenkinsサーバのどこかに秘密鍵を格納しておく必要がある</span>\n    <span class=\"kt\">def</span> <span class=\"n\">keyDir</span> <span class=\"o\">=</span> <span class=\"s1\">'/var/lib/jenkins/.ssh/xxx'</span>\n    <span class=\"c1\">// Tomcatサーバのアドレスとユーザ名</span>\n    <span class=\"kt\">def</span> <span class=\"n\">webServerAddress</span> <span class=\"o\">=</span> <span class=\"s1\">'ecX-XX-XXX-X-X.xx-xxxx-x.xxxxxxxx'</span>\n    <span class=\"kt\">def</span> <span class=\"n\">webServerUser</span> <span class=\"o\">=</span> <span class=\"s1\">'hoge-user'</span>\n    <span class=\"kt\">def</span> <span class=\"n\">webServer</span> <span class=\"o\">=</span> <span class=\"s2\">\"${webServerUser}@${webServerAddress}\"</span>\n\n    <span class=\"kt\">def</span> <span class=\"n\">srcWar</span> <span class=\"o\">=</span> <span class=\"s2\">\"${args.appName}-${args.appVersion}.war\"</span>\n    <span class=\"kt\">def</span> <span class=\"n\">destWar</span> <span class=\"o\">=</span> <span class=\"s2\">\"${args.appName}.war\"</span>\n\n    <span class=\"c1\">// ファイル転送してTomcatのwebappsにwarを配置する</span>\n    <span class=\"n\">sh</span> <span class=\"s2\">\"sudo -S scp -i ${keyDir} ./${args.warDir}/${srcWar} ${webServer}:/home/ec2-user\"</span>\n    <span class=\"n\">sh</span> <span class=\"s2\">\"sudo -S ssh -i ${keyDir} ${webServer} \\\"sudo cp /home/ec2-user/${srcWar} /usr/share/tomcat8/webapps/${destWar}\\\"\"</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// メールをGmailに送信する</span>\n<span class=\"kt\">def</span> <span class=\"nf\">sendMail</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">mail</span> <span class=\"nl\">to:</span> <span class=\"s2\">\"xxxxxxxx@gmail.com\"</span><span class=\"o\">,</span>\n        <span class=\"nl\">subject:</span> <span class=\"s2\">\"${env.JOB_NAME} #${env.BUILD_NUMBER} [${result}]\"</span><span class=\"o\">,</span>\n        <span class=\"nl\">body:</span> <span class=\"s2\">\"Build URL: ${env.BUILD_URL}.\\n\\n\"</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"躓いたこと\" class=\"fragment\"></span><a href=\"#%E8%BA%93%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>躓いたこと</h1>\n\n<ul>\n<li>各プラグインともChangelogに「パイプライン対応したよ！」とは書いてあるが、\n具体的は書き方は明記していないことが多いので、\n各プラグインのGithubでソースコード（主に「なんちゃらPublisher」クラス）を見ながら、Jenkinsfileを書いた。</li>\n<li>currentBuildオブジェクトの使い方がよくわからなかったが、Jenkinsのパイプラインジョブ &gt; 設定 &gt; Pipeline Syntax &gt; Global Variables Reference に詳しく載っていた。\n<a href=\"https://camo.qiitausercontent.com/dce98ca18e752127b3f57901a65249f540d2193f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30663631366435302d633537662d323335652d633231342d3863386430643139646139372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/dce98ca18e752127b3f57901a65249f540d2193f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30663631366435302d633537662d323335652d633231342d3863386430643139646139372e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/0f616d50-c57f-235e-c214-8c8d0d19da97.png\"></a>\n</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/f2249e2915cbfd8a261d64823199f32a147bfe7a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61386666326463662d396438352d376334312d316565302d6662346638336562336333632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/f2249e2915cbfd8a261d64823199f32a147bfe7a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61386666326463662d396438352d376334312d316565302d6662346638336562336333632e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/a8ff2dcf-9d85-7c41-1ee0-fb4f83eb3c3c.png\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/313541fc7e1ffe9781ad27141ed0b9d59400be18/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66363362353066352d373639642d386666322d313930392d6630366165636330373130362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/313541fc7e1ffe9781ad27141ed0b9d59400be18/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66363362353066352d373639642d386666322d313930392d6630366165636330373130362e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f63b50f5-769d-8ff2-1909-f06aecc07106.png\"></a></p>\n\n<ul>\n<li>カバレッジレポートはbuild.gradleのjacocoTestReportタスクでカバレッジレポート対象外にしていてもJenkinsのほうではうまく除外されなかったので、Jenkinsfileのほうでも対象外設定をした。</li>\n<li>JenkinsからGmailにメールする場合、Jenkins &gt; Jenkinsの管理 &gt; システムの設定 &gt; E-mail通知で下記のような設定が必要だった。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/a9ab429d39d5959f7d05fe968d1110ccd53738f1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f38356139313162622d303931642d393936622d333663612d6366303336306336353539322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a9ab429d39d5959f7d05fe968d1110ccd53738f1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f38356139313162622d303931642d393936622d333663612d6366303336306336353539322e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/85a911bb-091d-996b-36ca-cf0360c65592.png\"></a></p>\n\n<ul>\n<li>JenkinsからGmailにメールする場合、<a href=\"https://support.google.com/accounts/answer/6010255?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">安全性の低いアプリがアカウントにアクセスするのを許可する</a>の手順に従って許可を有効にする必要があった。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/2758c73a3bb32139599ba67b88c6ac3e77bae419/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32343738646535352d633338332d396130622d366564622d3934623365383438376666342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2758c73a3bb32139599ba67b88c6ac3e77bae419/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32343738646535352d633338332d396130622d366564622d3934623365383438376666342e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/2478de55-c383-9a0b-6edb-94b3e8487ff4.png\"></a></p>\n\n<h1>\n<span id=\"buildgradle\" class=\"fragment\"></span><a href=\"#buildgradle\"><i class=\"fa fa-link\"></i></a>build.gradle</h1>\n\n<p>Jenkins自体は、Gradleのコマンドを実行して出力結果をもとにレポートを生成するだけなので、<br>\nGradleのJavaアプリのbuild.gradleで下記処理が実行できるようになっている必要があります。<br>\nまたJenkinsでGradleをインストールしなくていいようにGradleラッパーを作成しておきます。</p>\n\n<ul>\n<li>checkstyle</li>\n<li>findbugs</li>\n<li>pmd</li>\n<li>cpd(重複コードチェック)</li>\n<li>test</li>\n<li>jacocoReport</li>\n<li>jar</li>\n<li>war</li>\n</ul>\n\n<p>例えばこんな</p>\n\n<div class=\"code-frame\" data-lang=\"groovy\">\n<div class=\"code-lang\"><span class=\"bold\">build.gradle</span></div>\n<div class=\"highlight\"><pre><span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'java'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'war'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'checkstyle'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'findbugs'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'pmd'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'jacoco'</span>\n\n<span class=\"n\">ext</span> <span class=\"o\">{</span>\n    <span class=\"n\">appVersion</span> <span class=\"o\">=</span> <span class=\"s1\">'1.0.0'</span>\n    <span class=\"n\">appName</span> <span class=\"o\">=</span> <span class=\"s1\">'SampleApp'</span>\n    <span class=\"n\">javaVersion</span> <span class=\"o\">=</span> <span class=\"mf\">1.8</span>\n    <span class=\"n\">defaultEncoding</span> <span class=\"o\">=</span> <span class=\"s1\">'UTF-8'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">sourceCompatibility</span> <span class=\"o\">=</span> <span class=\"n\">javaVersion</span>\n<span class=\"n\">targetCompatibility</span>  <span class=\"o\">=</span> <span class=\"n\">javaVersion</span>\n<span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"na\">withType</span><span class=\"o\">(</span><span class=\"n\">AbstractCompile</span><span class=\"o\">)*.</span><span class=\"na\">options</span><span class=\"o\">*.</span><span class=\"na\">encoding</span> <span class=\"o\">=</span> <span class=\"n\">defaultEncoding</span>\n<span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"na\">withType</span><span class=\"o\">(</span><span class=\"n\">GroovyCompile</span><span class=\"o\">)*.</span><span class=\"na\">groovyOptions</span><span class=\"o\">*.</span><span class=\"na\">encoding</span> <span class=\"o\">=</span> <span class=\"n\">defaultEncoding</span>\n<span class=\"n\">mainClassName</span> <span class=\"o\">=</span> <span class=\"s1\">'jp.takumon.sapmleapp.App'</span>\n\n<span class=\"n\">repositories</span> <span class=\"o\">{</span>\n    <span class=\"n\">mavenCentral</span><span class=\"o\">()</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">dependencies</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 依存ライブラリを記載 </span>\n\n    <span class=\"n\">compile</span> <span class=\"nl\">group:</span> <span class=\"s1\">'junit'</span><span class=\"o\">,</span> <span class=\"nl\">name:</span> <span class=\"s1\">'junit'</span><span class=\"o\">,</span> <span class=\"nl\">version:</span> <span class=\"s1\">'4.12'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">jar</span> <span class=\"o\">{</span>\n    <span class=\"n\">baseName</span> <span class=\"o\">=</span> <span class=\"n\">appName</span>\n    <span class=\"n\">version</span> <span class=\"o\">=</span>  <span class=\"n\">appVersion</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">war</span> <span class=\"o\">{</span>\n    <span class=\"n\">baseName</span> <span class=\"o\">=</span> <span class=\"n\">appName</span>\n    <span class=\"n\">version</span> <span class=\"o\">=</span>  <span class=\"n\">appVersion</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">checkstyle</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 失敗しても後続の処理を継続させる</span>\n    <span class=\"n\">ignoreFailures</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"n\">sourceSets</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">sourceSets</span><span class=\"o\">.</span><span class=\"na\">main</span><span class=\"o\">]</span>\n    <span class=\"n\">toolVersion</span> <span class=\"o\">=</span> <span class=\"s1\">'7.6.1'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">findbugs</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 失敗しても後続の処理を継続させる</span>\n    <span class=\"n\">ignoreFailures</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"n\">sourceSets</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">sourceSets</span><span class=\"o\">.</span><span class=\"na\">main</span><span class=\"o\">]</span>\n    <span class=\"n\">toolVersion</span> <span class=\"o\">=</span> <span class=\"s2\">\"3.0.1\"</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">pmd</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 失敗しても後続の処理を継続させる</span>\n    <span class=\"n\">ignoreFailures</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"n\">sourceSets</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">sourceSets</span><span class=\"o\">.</span><span class=\"na\">main</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"na\">withType</span><span class=\"o\">(</span><span class=\"n\">Pmd</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">reports</span> <span class=\"o\">{</span>\n      <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"na\">enabled</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// CPD（重複コードチェック処理）をCheckタスクに追加</span>\n<span class=\"n\">check</span><span class=\"o\">.</span><span class=\"na\">doLast</span> <span class=\"o\">{</span>\n    <span class=\"n\">File</span> <span class=\"n\">outputDir</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">File</span><span class=\"o\">(</span><span class=\"s2\">\"$reportsDir/cpd/\"</span><span class=\"o\">)</span>\n    <span class=\"n\">outputDir</span><span class=\"o\">.</span><span class=\"na\">mkdirs</span><span class=\"o\">()</span>\n\n    <span class=\"n\">ant</span><span class=\"o\">.</span><span class=\"na\">taskdef</span><span class=\"o\">(</span>\n        <span class=\"nl\">name:</span> <span class=\"s1\">'cpd'</span><span class=\"o\">,</span> \n        <span class=\"nl\">classname:</span> <span class=\"s1\">'net.sourceforge.pmd.cpd.CPDTask'</span><span class=\"o\">,</span>\n        <span class=\"nl\">classpath:</span> <span class=\"n\">configurations</span><span class=\"o\">.</span><span class=\"na\">pmd</span><span class=\"o\">.</span><span class=\"na\">asPath</span><span class=\"o\">)</span>\n\n    <span class=\"n\">ant</span><span class=\"o\">.</span><span class=\"na\">cpd</span><span class=\"o\">(</span>\n        <span class=\"nl\">minimumTokenCount:</span> <span class=\"s1\">'100'</span><span class=\"o\">,</span>\n        <span class=\"nl\">format:</span> <span class=\"s1\">'xml'</span><span class=\"o\">,</span>\n        <span class=\"nl\">encoding:</span> <span class=\"n\">defaultEncoding</span><span class=\"o\">,</span>\n        <span class=\"nl\">outputFile:</span> <span class=\"k\">new</span> <span class=\"n\">File</span><span class=\"o\">(</span><span class=\"n\">outputDir</span><span class=\"o\">,</span> <span class=\"s1\">'cpd.xml'</span><span class=\"o\">)</span>\n    <span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">fileset</span><span class=\"o\">(</span><span class=\"nl\">dir:</span> <span class=\"s2\">\"src/main/java\"</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">include</span><span class=\"o\">(</span><span class=\"nl\">name:</span> <span class=\"s1\">'**/*.java'</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">javadoc</span> <span class=\"o\">{</span>\n    <span class=\"n\">failOnError</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n    <span class=\"c1\">// 好みのレベルで</span>\n    <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">memberLevel</span> <span class=\"o\">=</span> <span class=\"n\">JavadocMemberLevel</span><span class=\"o\">.</span><span class=\"na\">PRIVATE</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">test</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 失敗しても後続の処理を継続させる</span>\n    <span class=\"n\">ignoreFailures</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"n\">reports</span> <span class=\"o\">{</span>\n        <span class=\"n\">junitXml</span><span class=\"o\">.</span><span class=\"na\">enabled</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">jacoco</span> <span class=\"o\">{</span>\n    <span class=\"n\">toolVersion</span> <span class=\"o\">=</span> <span class=\"s1\">'0.7.5.201505241946'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">jacocoTestReport</span> <span class=\"o\">{</span>\n    <span class=\"n\">reports</span> <span class=\"o\">{</span>\n      <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"na\">enabled</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// カバレッジレポートからテストクラスを除外</span>\n    <span class=\"n\">afterEvaluate</span> <span class=\"o\">{</span> \n        <span class=\"n\">classDirectories</span> <span class=\"o\">=</span> <span class=\"n\">files</span><span class=\"o\">(</span><span class=\"n\">classDirectories</span><span class=\"o\">.</span><span class=\"na\">files</span><span class=\"o\">.</span><span class=\"na\">collect</span> <span class=\"o\">{</span>\n            <span class=\"n\">fileTree</span><span class=\"o\">(</span><span class=\"nl\">dir:</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"nl\">exclude:</span> <span class=\"o\">[</span><span class=\"s1\">'**/*Test.class'</span><span class=\"o\">])</span> \n        <span class=\"o\">})</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">task</span> <span class=\"nf\">wrapper</span> <span class=\"o\">(</span><span class=\"nl\">type:</span> <span class=\"n\">Wrapper</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">gradleVersion</span> <span class=\"o\">=</span> <span class=\"s1\">'3.4.1'</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>以上。</p>\n","body":"GradleのJavaアプリをJenkinsで１人CIするためのJenkinsfileを書いてみた。\nGithubにプッシュ時に、AWS上のJenkinsのパイプラインジョブが動いて、テストが成功したら同じくAWS上のTomcatにデプロイするみたいな感じで使ってます。\n\n# Declarative Pipeline\nいままではJenkinsfileを\n\n```\nnode {\n  ....\n}\n```\n\nのように書いてましたが、[Jenkinsの公式サイト](https://jenkins.io/doc/book/pipeline/syntax/)を見ると\nこれはScripted Pipelinesの記法であり、\nPipeline Pluginのバージョン2.5移行からは\n\n```\npipeline {\n  ....  \n}\n```\nのように書くDeclarative Pipelineという記法が導入されて、\nそっちのほうがシンプルでわかりやすく書けるよ!ということだったので書き直してみました。\n確かにすっきりしたし（特に最後のメールおくるとことか、デプロイするとことか）、\nいざとなったら従来のScripted Pipelinesもミックスできるのでいい感じです。\n\n# 追加したプラグイン\nJenkins初期設定時のSuggested Pluginに入っていないもの\n\n* [Checkstyle Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Checkstyle+Plugin;jsessionid=E9D4FA5064ACAE1CED7B19928DE0788F)（v3.47） - Checkstyeの結果収集用\n* [FindBugs Plugin](https://wiki.jenkins-ci.org/display/JENKINS/FindBugs+Plugin)（v4.69） - Findbugsのレポート生成用 \n* [PMD Plugin](https://wiki.jenkins-ci.org/display/JENKINS/PMD+Plugin)（v3.46） - PMDのレポート生成用\n* [DRY Plugin](https://wiki.jenkins-ci.org/display/JENKINS/DRY+Plugin)（v2.46） - CPD(重複コードチェック)のレポート生成用\n* [Step Counter Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Step+Counter+Plugin)（v2.0.0） - ソースコードのステップ数を集計してくれる\n* [Task Scanner Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Task+Scanner+Plugin)（v4.50） - ソースコード中のTODOとかを一覧化してくれる\n* [Javadoc Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Javadoc+Plugin)（v1.4） - JavaDoc生成用\n* [Warnings Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Warnings+Plugin)（v4.60） - ジョブ実行時の警告メッセージを収集してくれる\n* [JaCoCo Plugin](https://wiki.jenkins-ci.org/display/JENKINS/JaCoCo+Plugin)（v2.2.0） - テストカバレッジのレポート生成用\n\n\n\n# Jenkinsfile\nGithubからWebhookでJenkinsのパイプラインジョブを実行する。\nパイプラインジョブではGithubのJenkinsfileを使う。\nジョブの流れは下記。デプロイは静的コード解析とテストが成功したときだけ実行する。\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/56c8e12d-267b-a637-224e-fc8cb3474dfa.png)\n\n\n```groovy:Jenkinsfile\npipeline {\n    agent any\n    // 定数や変数を定義する\n    environment {\n        reportDir = 'build/reports'\n        javaDir = 'src/main/java'\n        resourcesDir = 'src/main/resources'\n        testReportDir = 'build/test-results/test'\n        jacocoReportDir = 'build/jacoco' \n        javadocDir = 'build/docs/javadoc'\n        libsDir = 'build/libs'\n        appName = 'SampleApp'\n        appVersion = '1.0.0'\n    }\n    \n    // stagesブロック中に一つ以上のstageを定義する\n    stages {\n        stage('事前準備') {\n            // 実際の処理はstepsブロック中に定義する\n            steps {\n                deleteDir()\n\n                // このJobをトリガーしてきたGithubのプロジェクトをチェックアウト\n                checkout scm\n\n                // ジョブ失敗の原因調査用にJenkinsfileとbuild.gradleは最初に保存する\n                archiveArtifacts \"Jenkinsfile\"\n                archiveArtifacts \"build.gradle\"\n\n                // scriptブロックを使うと従来のScripted Pipelinesの記法も使える\n                script {\n                    // Permission deniedで怒られないために実行権限を付与する\n                    if(isUnix()) {\n                        sh 'chmod +x gradlew'\n                    }\n                }\n                gradlew 'clean'\n            }\n        }\n        \n        stage('コンパイル') {\n            steps {\n                gradlew 'classes testClasses'\n            }\n            \n            // postブロックでstepsブロックの後に実行される処理が定義できる\n            post {\n                // alwaysブロックはstepsブロックの処理が失敗しても成功しても必ず実行される\n                always {\n\n                    // JavaDoc生成時に実行するとJavaDocの警告も含まれてしまうので\n                    // Javaコンパイル時の警告はコンパイル直後に収集する\n                    step([\n\n                        // プラグインを実行するときのクラス指定は完全修飾名でなくてもOK\n                        $class: 'WarningsPublisher',\n\n                        // Job実行時のコンソールから警告を収集する場合はconsoleParsers、\n                        // pmd.xmlなどのファイルから収集する場合はparserConfigurationsを指定する。\n                        // なおparserConfigurationsの場合はparserNameのほかにpattern(集計対象ファイルのパス)も指定が必要\n                        // パーサ名は下記プロパティファイルに定義されているものを使う\n                        // https://github.com/jenkinsci/warnings-plugin/blob/master/src/main/resources/hudson/plugins/warnings/parser/Messages.properties\n                        consoleParsers: [\n                            [parserName: 'Java Compiler (javac)'],\n                        ],\n                        canComputeNew: false,\n                        canResolveRelativesPaths: false,\n                        usePreviousBuildAsReference: true\n                    ])\n                }\n            }\n        }\n        \n        stage('静的コード解析') {\n            steps {\n                // 並列処理の場合はparallelメソッドを使う\n                parallel(\n                    '静的コード解析' : {\n                        gradlew 'check -x test'\n\n                        // dirメソッドでカレントディレクトリを指定できる\n                        dir(reportDir) {\n                            step([\n                                $class: 'CheckStylePublisher',\n                                pattern: \"checkstyle/*.xml\"\n                            ])\n                            step([\n                                $class: 'FindBugsPublisher',\n                                pattern: \"findbugs/*.xml\"\n                            ])\n                            step([\n                                $class: 'PmdPublisher',\n                                pattern: \"pmd/*.xml\"\n                            ])\n                            step([\n                                $class: 'DryPublisher',\n                                pattern: \"cpd/*.xml\"\n                            ])\n                \n                            archiveArtifacts \"checkstyle/*.xml\"\n                            archiveArtifacts \"findbugs/*.xml\"\n                            archiveArtifacts \"pmd/*.xml\"\n                            archiveArtifacts \"cpd/*.xml\"\n                        }\n                    },\n                    'ステップカウント': {\n                        // レポート作成\n                        // outputFileとoutputFormatを指定するとエクセルファイルも作成してくれる\n                        stepcounter outputFile: 'stepcount.xls', outputFormat: 'excel', settings: [\n                            [key:'Java', filePattern: \"${javaDir}/**/*.java\"],\n                            [key:'SQL', filePattern: \"${resourcesDir}/**/*.sql\"],\n                            [key:'HTML', filePattern: \"${resourcesDir}/**/*.html\"],\n                            [key:'JS', filePattern: \"${resourcesDir}/**/*.js\"],\n                            [key:'CSS', filePattern: \"${resourcesDir}/**/*.css\"]\n                        ]\n                        // 一応エクセルファイルも成果物として保存する\n                        archiveArtifacts \"stepcount.xls\"\n                    },\n                    'タスクスキャン': {\n                        step([\n                            $class: 'TasksPublisher',\n                            pattern: './**',\n                            // 集計対象を検索するときに大文字小文字を区別するか\n                            ignoreCase: true,\n                            // 優先度別に集計対象の文字列を指定できる\n                            // 複数指定する場合はカンマ区切りの文字列を指定する\n                            high: 'System.out.System.err',\n                            normal: 'TODO,FIXME,XXX',\n                        ])\n                    },\n                    'JavaDoc': {\n                        gradlew 'javadoc -x classes'\n                        step([\n                            $class: 'JavadocArchiver',\n                            // Javadocのindex.htmlがあるフォルダのパスを指定する\n                            javadocDir: \"${javadocDir}\",\n                            keepAll: true\n                        ])\n                    }\n                )\n            }\n            \n            post {\n                always {\n                   // JavaDocの警告を収集\n                    step([\n                        $class: 'WarningsPublisher',\n                        consoleParsers: [\n                            [parserName: 'JavaDoc Tool']\n                        ],\n                        canComputeNew: false,\n                        canResolveRelativesPaths: false,\n                        usePreviousBuildAsReference: true\n                    ])\n                }\n            }\n        }\n        \n\n        stage('テスト') {\n            steps {\n                gradlew 'test jacocoTestReport -x classes -x testClasses'\n                \n                junit \"${testReportDir}/*.xml\"\n                archiveArtifacts \"${testReportDir}/*.xml\"\n\n                // カバレッジレポートを生成（テストクラスを除外）\n                step([\n                    $class: 'JacocoPublisher',\n                    execPattern: \"${jacocoReportDir}/*.exec\",\n                    exclusionPattern: '**/*Test.class'\n                ])\n            }\n        }\n        \n        stage('デプロイ') {\n            // whenブロックでstageを実行する条件を指定できる\n            when {\n                // 静的コード解析とテスト失敗時はデプロイしない\n                expression {currentBuild.currentResult == 'SUCCESS'}\n            }\n            \n            steps {\n                gradlew 'jar'\n                archiveArtifacts \"${libsDir}/${appName}-${appVersion}.jar\"\n                gradlew 'war'\n                archiveArtifacts \"${libsDir}/${appName}-${appVersion}.war\"\n                deploy warDir: libsDir, appName: appName, appVersion: appVersion\n            }\n        }\n    }\n    \n    // stagesブロックと同じレベルにpostブロックを定義すると\n    // 全てのstage処理が終わった後の処理の定義が可能    \n    post {\n        always {\n            // 最後にワークスペースの中身を削除\n            deleteDir()\n        }\n        // 連続で成功しているとき以外は自分宛にメールを送信\n\n        // 結果が前回と変わった時\n        changed {\n            sendMail(\"${currentBuild.previousBuild.result} => ${currentBuild.currentResult}\")\n        }\n        // 失敗した時\n        failure {\n            sendMail(currentBuild.currentResult)\n        }\n        // 不安定な時（主にテスト失敗時）\n        unstable {\n            sendMail(currentBuild.currentResult)\n        }\n    }\n}\n\n\n// Gradlewコマンドを実行する\ndef gradlew(command) {\n    if(isUnix()) {\n        sh \"./gradlew ${command} --stacktrace\"\n    } else {\n        bat \"./gradlew.bat ${command} --stacktrace\"\n    }\n}\n\n// デプロイする\n// args.warDir warの格納ディレクトリ \n// args.appName アプリ名\n// args.appVersion アプリのバージョン\ndef deploy(Map args) {\n    // 秘密鍵のパス ※Tomcatサーバにファイル転送するので事前にJenkinsサーバのどこかに秘密鍵を格納しておく必要がある\n    def keyDir = '/var/lib/jenkins/.ssh/xxx'\n    // Tomcatサーバのアドレスとユーザ名\n    def webServerAddress = 'ecX-XX-XXX-X-X.xx-xxxx-x.xxxxxxxx'\n    def webServerUser = 'hoge-user'\n    def webServer = \"${webServerUser}@${webServerAddress}\"\n    \n    def srcWar = \"${args.appName}-${args.appVersion}.war\"\n    def destWar = \"${args.appName}.war\"\n    \n    // ファイル転送してTomcatのwebappsにwarを配置する\n    sh \"sudo -S scp -i ${keyDir} ./${args.warDir}/${srcWar} ${webServer}:/home/ec2-user\"\n    sh \"sudo -S ssh -i ${keyDir} ${webServer} \\\"sudo cp /home/ec2-user/${srcWar} /usr/share/tomcat8/webapps/${destWar}\\\"\"\n}\n\n// メールをGmailに送信する\ndef sendMail(result) {\n    mail to: \"xxxxxxxx@gmail.com\",\n        subject: \"${env.JOB_NAME} #${env.BUILD_NUMBER} [${result}]\",\n        body: \"Build URL: ${env.BUILD_URL}.\\n\\n\"\n}\n```\n\n# 躓いたこと\n* 各プラグインともChangelogに「パイプライン対応したよ！」とは書いてあるが、\n具体的は書き方は明記していないことが多いので、\n各プラグインのGithubでソースコード（主に「なんちゃらPublisher」クラス）を見ながら、Jenkinsfileを書いた。\n* currentBuildオブジェクトの使い方がよくわからなかったが、Jenkinsのパイプラインジョブ > 設定 > Pipeline Syntax > Global Variables Reference に詳しく載っていた。\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/0f616d50-c57f-235e-c214-8c8d0d19da97.png)\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/a8ff2dcf-9d85-7c41-1ee0-fb4f83eb3c3c.png)\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/f63b50f5-769d-8ff2-1909-f06aecc07106.png)\n \n* カバレッジレポートはbuild.gradleのjacocoTestReportタスクでカバレッジレポート対象外にしていてもJenkinsのほうではうまく除外されなかったので、Jenkinsfileのほうでも対象外設定をした。\n* JenkinsからGmailにメールする場合、Jenkins > Jenkinsの管理 > システムの設定 > E-mail通知で下記のような設定が必要だった。\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/85a911bb-091d-996b-36ca-cf0360c65592.png)\n\n* JenkinsからGmailにメールする場合、[安全性の低いアプリがアカウントにアクセスするのを許可する](https://support.google.com/accounts/answer/6010255?hl=ja)の手順に従って許可を有効にする必要があった。\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/2478de55-c383-9a0b-6edb-94b3e8487ff4.png)\n\n# build.gradle\nJenkins自体は、Gradleのコマンドを実行して出力結果をもとにレポートを生成するだけなので、\nGradleのJavaアプリのbuild.gradleで下記処理が実行できるようになっている必要があります。\nまたJenkinsでGradleをインストールしなくていいようにGradleラッパーを作成しておきます。\n\n * checkstyle\n * findbugs\n * pmd\n * cpd(重複コードチェック)\n * test\n * jacocoReport\n * jar\n * war\n\n例えばこんな\n\n```groovy:build.gradle\napply plugin: 'java'\napply plugin: 'war'\napply plugin: 'checkstyle'\napply plugin: 'findbugs'\napply plugin: 'pmd'\napply plugin: 'jacoco'\n\next {\n    appVersion = '1.0.0'\n    appName = 'SampleApp'\n    javaVersion = 1.8\n    defaultEncoding = 'UTF-8'\n}\n\nsourceCompatibility = javaVersion\ntargetCompatibility  = javaVersion\ntasks.withType(AbstractCompile)*.options*.encoding = defaultEncoding\ntasks.withType(GroovyCompile)*.groovyOptions*.encoding = defaultEncoding\nmainClassName = 'jp.takumon.sapmleapp.App'\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    // 依存ライブラリを記載 \n\n    compile group: 'junit', name: 'junit', version: '4.12'\n}\n\njar {\n    baseName = appName\n    version =  appVersion\n}\n\nwar {\n    baseName = appName\n    version =  appVersion\n}\n\ncheckstyle {\n    // 失敗しても後続の処理を継続させる\n    ignoreFailures = true\n    sourceSets = [sourceSets.main]\n    toolVersion = '7.6.1'\n}\n\nfindbugs {\n    // 失敗しても後続の処理を継続させる\n    ignoreFailures = true\n    sourceSets = [sourceSets.main]\n    toolVersion = \"3.0.1\"\n}\n\npmd {\n    // 失敗しても後続の処理を継続させる\n    ignoreFailures = true\n    sourceSets = [sourceSets.main]\n}\n\ntasks.withType(Pmd) {\n    reports {\n      xml.enabled = true\n    }\n}\n\n// CPD（重複コードチェック処理）をCheckタスクに追加\ncheck.doLast {\n    File outputDir = new File(\"$reportsDir/cpd/\")\n    outputDir.mkdirs()\n  \n    ant.taskdef(\n        name: 'cpd', \n        classname: 'net.sourceforge.pmd.cpd.CPDTask',\n        classpath: configurations.pmd.asPath)\n  \n    ant.cpd(\n        minimumTokenCount: '100',\n        format: 'xml',\n        encoding: defaultEncoding,\n        outputFile: new File(outputDir, 'cpd.xml')\n    ) {\n        fileset(dir: \"src/main/java\") {\n            include(name: '**/*.java')\n        }\n    }\n}\n\njavadoc {\n    failOnError = false\n    // 好みのレベルで\n    options.memberLevel = JavadocMemberLevel.PRIVATE\n}\n\ntest {\n    // 失敗しても後続の処理を継続させる\n    ignoreFailures = true\n    reports {\n        junitXml.enabled = true\n    }\n}\n\njacoco {\n    toolVersion = '0.7.5.201505241946'\n}\n\njacocoTestReport {\n    reports {\n      xml.enabled = true\n    }\n    \n    // カバレッジレポートからテストクラスを除外\n    afterEvaluate { \n        classDirectories = files(classDirectories.files.collect {\n            fileTree(dir: it, exclude: ['**/*Test.class']) \n        })\n    }\n}\n\ntask wrapper (type: Wrapper) {\n    gradleVersion = '3.4.1'\n}\n```\n\n\n以上。\n","comments_count":0,"created_at":"2017-04-07T02:38:55+09:00","likes_count":58,"reactions_count":0},"relations":[{"node":{"fields":{"slug":"/e6e81f10-e1df-58fa-ad49-6da5d018abc4/","title":"Java SE8 Gold取りました。","date":"2017-03-12T17:52:21+09:00","excerpt":"先日Java SE 8 Programmer II(Java SE8 Gold)に合格しました。そのために自分がやったことと受験した感想をメモします。▼試験結果勉強期間　：3カ月得点率　　： 73％（ボーダー65％）　結構ギリギリ(&gt;...","tags":["Java","java8","資格","Qiita"],"keywords":["Java"],"thumbnail":""},"id":"e6e81f10-e1df-58fa-ad49-6da5d018abc4","title":"Java SE8 Gold取りました。","rendered_body":"<p>先日<a href=\"http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-809&amp;p_org_id=70\" rel=\"nofollow noopener\" target=\"_blank\">Java SE 8 Programmer II(Java SE8 Gold)</a>に合格しました。<br>\nそのために自分がやったことと受験した感想をメモします。</p>\n\n<p>▼試験結果<br>\n勉強期間　：3カ月<br>\n得点率　　： 73％（ボーダー65％）　結構ギリギリ(&gt;o&lt;)!</p>\n\n<h2>\n<span id=\"自分とjavaの関係\" class=\"fragment\"></span><a href=\"#%E8%87%AA%E5%88%86%E3%81%A8java%E3%81%AE%E9%96%A2%E4%BF%82\"><i class=\"fa fa-link\"></i></a>自分とJavaの関係</h2>\n\n<ul>\n<li>仕事でJava開発は5年</li>\n<li>保有資格は<a href=\"https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-808&amp;p_org_id=70&amp;lang=JA\" rel=\"nofollow noopener\" target=\"_blank\">Java SE 8 Silver</a>と <a href=\"http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=458&amp;p_org_id=70&amp;lang=JA&amp;get_params=p_track_id:JEE5WCD\" rel=\"nofollow noopener\" target=\"_blank\">WebコンポーネントデベロッパEE 5</a>と <a href=\"http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-851&amp;p_org_id=70&amp;lang=JA\" rel=\"nofollow noopener\" target=\"_blank\">JavaプログラマSE 6</a>\n</li>\n</ul>\n\n<h2>\n<span id=\"きっかけ\" class=\"fragment\"></span><a href=\"#%E3%81%8D%E3%81%A3%E3%81%8B%E3%81%91\"><i class=\"fa fa-link\"></i></a>きっかけ</h2>\n\n<p>Java8で新機能が多く追加されたので、それらを習得するために受験しました。　<br>\n最初は<a href=\"http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-813&amp;p_org_id=70&amp;lang=JA\" rel=\"nofollow noopener\" target=\"_blank\">Upgrade to Java SE 8 OCP</a>の受験を考えていましたが、<br>\n参考書がないのと情報量が少なかったので、こちらを受けることにしました。</p>\n\n<h2>\n<span id=\"買った参考書と感想\" class=\"fragment\"></span><a href=\"#%E8%B2%B7%E3%81%A3%E3%81%9F%E5%8F%82%E8%80%83%E6%9B%B8%E3%81%A8%E6%84%9F%E6%83%B3\"><i class=\"fa fa-link\"></i></a>買った参考書と感想</h2>\n\n<p></p><dl>\n<dt>\n<a href=\"https://www.amazon.co.jp/%E5%BE%B9%E5%BA%95%E6%94%BB%E7%95%A5Java-SE-8-Gold%E5%95%8F%E9%A1%8C%E9%9B%86%EF%BC%BB1Z0-809%EF%BC%BD%E5%AF%BE%E5%BF%9C-%E5%BE%B9%E5%BA%95%E6%94%BB%E7%95%A5%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-ebook/dp/B01LXSG1G9/ref=pd_sim_351_1?_encoding=UTF8&amp;psc=1&amp;refRID=PC6MK9AHZB6JSXW5VM6F\" rel=\"nofollow noopener\" target=\"_blank\">徹底攻略Java SE 8 Gold問題集［1Z0-809］対応 徹底攻略シリーズ</a>（以後、黒本と記述）</dt>\n<br>\n<dd>定番の問題集なので購入しましたが、全体的に難易度が低めの門題が多いです。ただ本の最後の総仕上げ問題は本番試験と難易度が近く、本番でも同じ問題が多数出題されました。</dd>\n<br>\n<dt>\n<a href=\"https://www.amazon.co.jp/dp/B0191U2H8C/ref=dp-kindle-redirect?_encoding=UTF8&amp;btkr=1\" rel=\"nofollow noopener\" target=\"_blank\">OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide: Exam 1Z0-809</a>（以後、 Study Guideと記述）</dt>\n<br>\n<dd>上記の黒本だけでは不安になり購入しました。<a href=\"https://www.amazon.co.jp/dp/B01J1LPKJY/ref=dp-kindle-redirect?_encoding=UTF8&amp;btkr=1\" rel=\"nofollow noopener\" target=\"_blank\">紫本</a>と同じような構成で、参考書と問題集が１つになっています。紫本ではなくStudy Guideにしたのは英語力を身につけたかったからです。本の説明に「Complete, trusted preparation for the Java Programmer II exam」とある通り問題数も多くかなり充実した内容でした。難易度は本番よりも高めです。この本を２周して問題の正答率が90%に達していれば絶対合格できます。ただ量が多いので２周するのはかなり根気が必要です（自分は1周で断念しました）。<br>あと本がでかくて、電車の中では絶対読めません。Kindleで購入したほうがいいです。</dd>\n\n<h2>\n<span id=\"試験本番\" class=\"fragment\"></span><a href=\"#%E8%A9%A6%E9%A8%93%E6%9C%AC%E7%95%AA\"><i class=\"fa fa-link\"></i></a>試験本番</h2>\n\n<p>問題数は85問、試験時間は150分でしたが、時間が足りないということはなく、120分ほどで解き終わりました。<br>\n難易度は黒本の総仕上げ問題よりも少し高めです。<br>\nJavaプログラマSE 6の時のような重箱の隅をつつくような問題は少なく、<br>\nJava8の新規機能がメインで、ストリームAIP、ラムダ式、メソッド参照に関しては単体での出題 or 他と絡めての出題で１／４を占めていました。Study Guideではパラレルストリームの難しめの問題が多かったのですが、本番は簡単な問題が２問程度でした。OptionalとDateTimeAPIについては意外と少なく、１、２問程度でした。<br>\nJDBCは例外処理と絡めた問題もあり５～７問と意外と多めでした。<br>\nNew IOについては絶対パスと相対パスでの挙動の違いをしっかり理解する必要があります。</p>\n\n<h2>\n<span id=\"感想\" class=\"fragment\"></span><a href=\"#%E6%84%9F%E6%83%B3\"><i class=\"fa fa-link\"></i></a>感想</h2>\n\n<p>点数的にはギリギリ合格でした。。。<br>\n問題集に取り組むときに、正解を導き出せるだけでなく、一つ一つの選択肢に対して背景を理解する必要があったと感じています。しかしながらJava8の主要新な機能について一通り整理できました、業務で使う分には十分な理解だと思います。<br>\n試験対策は問題集のみでしたが、試験後に<a href=\"http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-809&amp;p_org_id=70&amp;lang=JA\" rel=\"nofollow noopener\" target=\"_blank\">オラクルの公式サイト</a>を見てみると、試験内容＞チェックリスト＞【トピック】の１つ１つに対して漏れなく問題が出題されてたことが分かったので、試験前に見とけばよかったなぁと感じています。あと英語の勉強もかねて黒本とStudy Guideを選びましたが、他の方のブログを見た感じだと、黒本と紫本を買ってそれぞれ２周すれば合格できるような気がしました。</p>\n</dl>","body":"先日[Java SE 8 Programmer II(Java SE8 Gold)](http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&get_params=p_exam_id:1Z0-809&p_org_id=70)に合格しました。\nそのために自分がやったことと受験した感想をメモします。\n\n▼試験結果\n勉強期間　：3カ月\n得点率　　： 73％（ボーダー65％）　結構ギリギリ(>o<)!\n\n## 自分とJavaの関係\n* 仕事でJava開発は5年\n* 保有資格は[Java SE 8 Silver](https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&get_params=p_exam_id:1Z0-808&p_org_id=70&lang=JA)と [WebコンポーネントデベロッパEE 5](http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=458&p_org_id=70&lang=JA&get_params=p_track_id:JEE5WCD)と [JavaプログラマSE 6](http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&get_params=p_exam_id:1Z0-851&p_org_id=70&lang=JA)\n\n## きっかけ\nJava8で新機能が多く追加されたので、それらを習得するために受験しました。　\n最初は[Upgrade to Java SE 8 OCP](http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&get_params=p_exam_id:1Z0-813&p_org_id=70&lang=JA)の受験を考えていましたが、\n参考書がないのと情報量が少なかったので、こちらを受けることにしました。\n\n## 買った参考書と感想\n<dl><dt>[徹底攻略Java SE 8 Gold問題集［1Z0-809］対応 徹底攻略シリーズ](https://www.amazon.co.jp/%E5%BE%B9%E5%BA%95%E6%94%BB%E7%95%A5Java-SE-8-Gold%E5%95%8F%E9%A1%8C%E9%9B%86%EF%BC%BB1Z0-809%EF%BC%BD%E5%AF%BE%E5%BF%9C-%E5%BE%B9%E5%BA%95%E6%94%BB%E7%95%A5%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-ebook/dp/B01LXSG1G9/ref=pd_sim_351_1?_encoding=UTF8&psc=1&refRID=PC6MK9AHZB6JSXW5VM6F)（以後、黒本と記述）</dt>\n<dd>定番の問題集なので購入しましたが、全体的に難易度が低めの門題が多いです。ただ本の最後の総仕上げ問題は本番試験と難易度が近く、本番でも同じ問題が多数出題されました。</dd>\n<dt>[OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide: Exam 1Z0-809](https://www.amazon.co.jp/dp/B0191U2H8C/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1)（以後、 Study Guideと記述）</dt>\n<dd>上記の黒本だけでは不安になり購入しました。[紫本](https://www.amazon.co.jp/dp/B01J1LPKJY/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1)と同じような構成で、参考書と問題集が１つになっています。紫本ではなくStudy Guideにしたのは英語力を身につけたかったからです。本の説明に「Complete, trusted preparation for the Java Programmer II exam」とある通り問題数も多くかなり充実した内容でした。難易度は本番よりも高めです。この本を２周して問題の正答率が90%に達していれば絶対合格できます。ただ量が多いので２周するのはかなり根気が必要です（自分は1周で断念しました）。<br>あと本がでかくて、電車の中では絶対読めません。Kindleで購入したほうがいいです。</dd>\n\n## 試験本番\n問題数は85問、試験時間は150分でしたが、時間が足りないということはなく、120分ほどで解き終わりました。\n難易度は黒本の総仕上げ問題よりも少し高めです。\nJavaプログラマSE 6の時のような重箱の隅をつつくような問題は少なく、\nJava8の新規機能がメインで、ストリームAIP、ラムダ式、メソッド参照に関しては単体での出題 or 他と絡めての出題で１／４を占めていました。Study Guideではパラレルストリームの難しめの問題が多かったのですが、本番は簡単な問題が２問程度でした。OptionalとDateTimeAPIについては意外と少なく、１、２問程度でした。\nJDBCは例外処理と絡めた問題もあり５～７問と意外と多めでした。\nNew IOについては絶対パスと相対パスでの挙動の違いをしっかり理解する必要があります。\n\n## 感想\n点数的にはギリギリ合格でした。。。\n問題集に取り組むときに、正解を導き出せるだけでなく、一つ一つの選択肢に対して背景を理解する必要があったと感じています。しかしながらJava8の主要新な機能について一通り整理できました、業務で使う分には十分な理解だと思います。\n試験対策は問題集のみでしたが、試験後に[オラクルの公式サイト](http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&get_params=p_exam_id:1Z0-809&p_org_id=70&lang=JA)を見てみると、試験内容＞チェックリスト＞【トピック】の１つ１つに対して漏れなく問題が出題されてたことが分かったので、試験前に見とけばよかったなぁと感じています。あと英語の勉強もかねて黒本とStudy Guideを選びましたが、他の方のブログを見た感じだと、黒本と紫本を買ってそれぞれ２周すれば合格できるような気がしました。\n","comments_count":0,"created_at":"2017-03-12T17:52:21+09:00","likes_count":17,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Java"},{"weight":50,"keyword":"Java"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/94324d66-4d90-51bd-8970-5e5fce7ed13c/","title":"Jenkins PipelineでYamlを設定ファイルとして使う方法","date":"2017-06-17T12:14:16+09:00","excerpt":"Jenkins PipelineのJenkinsfileを作っていて、設定ファイル(Gradleでいう、gradle.propertiesのような感じ)が欲しいと思う時があります。今回はYamlファイルをJnekinsfileから読み込んで...","tags":["Jenkins","CI","Pipeline","Qiita"],"keywords":["Jenkins"],"thumbnail":""},"id":"94324d66-4d90-51bd-8970-5e5fce7ed13c","title":"Jenkins PipelineでYamlを設定ファイルとして使う方法","rendered_body":"<p>Jenkins PipelineのJenkinsfileを作っていて、設定ファイル(Gradleでいう、gradle.propertiesのような感じ)が欲しいと思う時があります。今回はYamlファイルをJnekinsfileから読み込んで設定ファイルとして使う方法をご紹介します。</p>\n\n<h1>\n<span id=\"1-pipeline-utility-steps-pluginをインストール\" class=\"fragment\"></span><a href=\"#1-pipeline-utility-steps-plugin%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>1. <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Utility+Steps+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Pipeline Utility Steps Plugin</a>をインストール</h1>\n\n<p>Jenkinsで様々な形式のファイルが簡単に読み込めるようになるプラグインです。Yamlファイルの読み込みに使います。Jenkins初期設定時のSuggested Pluginには入っていないので、自分でインストールしましょう。</p>\n\n<h1>\n<span id=\"2-configymlを作成\" class=\"fragment\"></span><a href=\"#2-configyml%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2. config.ymlを作成</h1>\n\n<p>プロジェクト直下（Jenkinsfileと同じ場所）にconfig.ymlを作ります。 </p>\n\n<div class=\"code-frame\" data-lang=\"yaml\">\n<div class=\"code-lang\"><span class=\"bold\">config.yml</span></div>\n<div class=\"highlight\"><pre><span class=\"na\">someProp</span><span class=\"pi\">:</span> <span class=\"s\">値１</span>\n<span class=\"na\">someCategory</span><span class=\"pi\">:</span>\n  <span class=\"na\">prop</span><span class=\"pi\">:</span> <span class=\"s\">値２</span>\n  <span class=\"na\">arrayProp</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"s\">配列値０</span>\n    <span class=\"pi\">-</span> <span class=\"s\">配列値１</span>\n    <span class=\"pi\">-</span> <span class=\"s\">配列値２</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"3-jenkinsfileを作成\" class=\"fragment\"></span><a href=\"#3-jenkinsfile%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>3. Jenkinsfileを作成</h1>\n\n<p>Jenkinsfileを下記のようにします。今回はDeclarative Pipelineの書き方ですが、Scripted Pipelinesでもほとんど同じ書き方だと思います。</p>\n\n<div class=\"code-frame\" data-lang=\"groovy\">\n<div class=\"code-lang\"><span class=\"bold\">Jenkinsfie</span></div>\n<div class=\"highlight\"><pre><span class=\"n\">pipeline</span> <span class=\"o\">{</span>\n    <span class=\"n\">agent</span> <span class=\"n\">any</span>\n\n    <span class=\"n\">environment</span> <span class=\"o\">{</span>\n        <span class=\"n\">CONFIG</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span> <span class=\"c1\">//この時点ではプロジェクトの設定ファイルを読み込めないので仮の値を設定しておく</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">stages</span> <span class=\"o\">{</span>\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'チェックアウトして設定ファイル読み込み'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// プロジェクトをチェックアウト</span>\n                <span class=\"n\">checkout</span> <span class=\"n\">scm</span>\n\n                <span class=\"n\">script</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">// チェックアウト後に設定ファイルを読み込む</span>\n                    <span class=\"c1\">// Pipeline Utility Steps Pluginの関数を使う</span>\n                    <span class=\"n\">CONFIG</span> <span class=\"o\">=</span> <span class=\"n\">readYaml</span><span class=\"o\">(</span><span class=\"nl\">file:</span> <span class=\"s1\">'config.yml'</span><span class=\"o\">)</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'設定ファイル参照'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"n\">echo</span> <span class=\"s2\">\"CONFIG.someProp ＝ ${CONFIG.someProp}\"</span>\n                <span class=\"n\">echo</span> <span class=\"s2\">\"CONFIG.someCategory.prop ＝ ${CONFIG.someCategory.prop}\"</span>\n                <span class=\"n\">echo</span> <span class=\"s2\">\"CONFIG.someCategory.arrayProp[0] ＝ ${CONFIG.someCategory.arrayProp[0]}\"</span>\n                <span class=\"n\">echo</span> <span class=\"s2\">\"CONFIG.someCategory.arrayProp[1] ＝ ${CONFIG.someCategory.arrayProp[1]}\"</span>\n                <span class=\"n\">echo</span> <span class=\"s2\">\"CONFIG.someCategory.arrayProp[2] ＝ ${CONFIG.someCategory.arrayProp[2]}\"</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>これでJobを実行すると下記のようなコンソールログが出力されます。</p>\n\n<div class=\"code-frame\" data-lang=\"\">\n<div class=\"code-lang\"><span class=\"bold\">Jenkinsのコンソール出力（一部抜粋）</span></div>\n<div class=\"highlight\"><pre>[Pipeline] { (設定ファイル参照)\n[Pipeline] echo\nCONFIG.someProp ＝ 値１\n[Pipeline] echo\nCONFIG.someCategory.prop ＝ 値２\n[Pipeline] echo\nCONFIG.someCategory.arrayProp[0] ＝ 配列値０\n[Pipeline] echo\nCONFIG.someCategory.arrayProp[1] ＝ 配列値１\n[Pipeline] echo\nCONFIG.someCategory.arrayProp[2] ＝ 配列値２\n</pre></div>\n</div>\n\n<h2>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h2>\n\n<p>今回はYamlファイルをJenkins Pipelineの設定ファイルとして使ってみました。<br>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Utility+Steps+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Pipeline Utility Steps Plugin</a>はpropertiesファイルも読み込めるので、gradle.propertiesを読み込んで、設定ファイルをGradleとJenkins Pipelineで共有することもできそうです。</p>\n","body":"Jenkins PipelineのJenkinsfileを作っていて、設定ファイル(Gradleでいう、gradle.propertiesのような感じ)が欲しいと思う時があります。今回はYamlファイルをJnekinsfileから読み込んで設定ファイルとして使う方法をご紹介します。\n\n# 1. [Pipeline Utility Steps Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Utility+Steps+Plugin)をインストール\nJenkinsで様々な形式のファイルが簡単に読み込めるようになるプラグインです。Yamlファイルの読み込みに使います。Jenkins初期設定時のSuggested Pluginには入っていないので、自分でインストールしましょう。\n\n# 2. config.ymlを作成\nプロジェクト直下\u001c（Jenkinsfileと同じ場所）にconfig.ymlを作ります。 \n\n```yaml:config.yml\nsomeProp: 値１\nsomeCategory:\n  prop: 値２\n  arrayProp:\n    - 配列値０\n    - 配列値１\n    - 配列値２\n```\n\n# 3. Jenkinsfileを作成\nJenkinsfileを下記のようにします。今回はDeclarative Pipelineの書き方ですが、Scripted Pipelinesでもほとんど同じ書き方だと思います。\n\n```groovy:Jenkinsfie\npipeline {\n    agent any\n    \n    environment {\n        CONFIG = \"\" //この時点ではプロジェクトの設定ファイルを読み込めないので仮の値を設定しておく\n    }\n    \n    stages {\n        stage('チェックアウトして設定ファイル読み込み') {\n            steps {\n                // プロジェクトをチェックアウト\n                checkout scm\n                \n                script {\n                    // チェックアウト後に設定ファイルを読み込む\n                    // Pipeline Utility Steps Pluginの関数を使う\n                    CONFIG = readYaml(file: 'config.yml')\n                }\n            }\n        }\n        \n        stage('設定ファイル参照') {\n            steps {\n                echo \"CONFIG.someProp ＝ ${CONFIG.someProp}\"\n                echo \"CONFIG.someCategory.prop ＝ ${CONFIG.someCategory.prop}\"\n                echo \"CONFIG.someCategory.arrayProp[0] ＝ ${CONFIG.someCategory.arrayProp[0]}\"\n                echo \"CONFIG.someCategory.arrayProp[1] ＝ ${CONFIG.someCategory.arrayProp[1]}\"\n                echo \"CONFIG.someCategory.arrayProp[2] ＝ ${CONFIG.someCategory.arrayProp[2]}\"\n            }\n        }\n    }\n}\n```\n\nこれでJobを実行すると下記のようなコンソールログが出力されます。\n\n```:Jenkinsのコンソール出力（一部抜粋）\n[Pipeline] { (設定ファイル参照)\n[Pipeline] echo\nCONFIG.someProp ＝ 値１\n[Pipeline] echo\nCONFIG.someCategory.prop ＝ 値２\n[Pipeline] echo\nCONFIG.someCategory.arrayProp[0] ＝ 配列値０\n[Pipeline] echo\nCONFIG.someCategory.arrayProp[1] ＝ 配列値１\n[Pipeline] echo\nCONFIG.someCategory.arrayProp[2] ＝ 配列値２\n```\n\n\n\n## 最後に\n今回はYamlファイルをJenkins Pipelineの設定ファイルとして使ってみました。\n[Pipeline Utility Steps Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Utility+Steps+Plugin)はpropertiesファイルも読み込めるので、gradle.propertiesを読み込んで、設定ファイルをGradleとJenkins Pipelineで共有することもできそうです。\n","comments_count":0,"created_at":"2017-06-17T12:14:16+09:00","likes_count":3,"reactions_count":0},"matches":4,"weight":200,"details":[{"weight":50,"keyword":"Jenkins"},{"weight":50,"keyword":"CI"},{"weight":50,"keyword":"Pipeline"},{"weight":50,"keyword":"Qiita"}],"avgWeight":50,"totalWeight":44,"threshold":12.5,"isRelated":true},{"node":{"fields":{"slug":"/2018/12/16/","title":"JJUG CCC 2018 Fallに行ってきました","date":"2018-12-16T21:50:00.000+09:00","excerpt":"なにこれJava CCC 2018 Fallに参加してきました。見てきたセッションは以下の通りです。【JJUG基調講演】Javaの未来を考えよう セッション概要#ccc_e1マネーフォワードのアカウントアグリゲーションの現状と課題点について...","tags":["Java","Kotlin","JJUG CCC","イベントレポート"],"keywords":["Java"],"thumbnail":"/thumbnail/2018/jjug-ccc-2018-fall.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Java"},{"weight":50,"keyword":"Java"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true}]},{"node":{"fields":{"slug":"/e6e81f10-e1df-58fa-ad49-6da5d018abc4/","title":"Java SE8 Gold取りました。","date":"2017-03-12T17:52:21+09:00","excerpt":"先日Java SE 8 Programmer II(Java SE8 Gold)に合格しました。そのために自分がやったことと受験した感想をメモします。▼試験結果勉強期間　：3カ月得点率　　： 73％（ボーダー65％）　結構ギリギリ(&gt;...","tags":["Java","java8","資格","Qiita"],"keywords":["Java"],"thumbnail":""},"id":"e6e81f10-e1df-58fa-ad49-6da5d018abc4","title":"Java SE8 Gold取りました。","rendered_body":"<p>先日<a href=\"http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-809&amp;p_org_id=70\" rel=\"nofollow noopener\" target=\"_blank\">Java SE 8 Programmer II(Java SE8 Gold)</a>に合格しました。<br>\nそのために自分がやったことと受験した感想をメモします。</p>\n\n<p>▼試験結果<br>\n勉強期間　：3カ月<br>\n得点率　　： 73％（ボーダー65％）　結構ギリギリ(&gt;o&lt;)!</p>\n\n<h2>\n<span id=\"自分とjavaの関係\" class=\"fragment\"></span><a href=\"#%E8%87%AA%E5%88%86%E3%81%A8java%E3%81%AE%E9%96%A2%E4%BF%82\"><i class=\"fa fa-link\"></i></a>自分とJavaの関係</h2>\n\n<ul>\n<li>仕事でJava開発は5年</li>\n<li>保有資格は<a href=\"https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-808&amp;p_org_id=70&amp;lang=JA\" rel=\"nofollow noopener\" target=\"_blank\">Java SE 8 Silver</a>と <a href=\"http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=458&amp;p_org_id=70&amp;lang=JA&amp;get_params=p_track_id:JEE5WCD\" rel=\"nofollow noopener\" target=\"_blank\">WebコンポーネントデベロッパEE 5</a>と <a href=\"http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-851&amp;p_org_id=70&amp;lang=JA\" rel=\"nofollow noopener\" target=\"_blank\">JavaプログラマSE 6</a>\n</li>\n</ul>\n\n<h2>\n<span id=\"きっかけ\" class=\"fragment\"></span><a href=\"#%E3%81%8D%E3%81%A3%E3%81%8B%E3%81%91\"><i class=\"fa fa-link\"></i></a>きっかけ</h2>\n\n<p>Java8で新機能が多く追加されたので、それらを習得するために受験しました。　<br>\n最初は<a href=\"http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-813&amp;p_org_id=70&amp;lang=JA\" rel=\"nofollow noopener\" target=\"_blank\">Upgrade to Java SE 8 OCP</a>の受験を考えていましたが、<br>\n参考書がないのと情報量が少なかったので、こちらを受けることにしました。</p>\n\n<h2>\n<span id=\"買った参考書と感想\" class=\"fragment\"></span><a href=\"#%E8%B2%B7%E3%81%A3%E3%81%9F%E5%8F%82%E8%80%83%E6%9B%B8%E3%81%A8%E6%84%9F%E6%83%B3\"><i class=\"fa fa-link\"></i></a>買った参考書と感想</h2>\n\n<p></p><dl>\n<dt>\n<a href=\"https://www.amazon.co.jp/%E5%BE%B9%E5%BA%95%E6%94%BB%E7%95%A5Java-SE-8-Gold%E5%95%8F%E9%A1%8C%E9%9B%86%EF%BC%BB1Z0-809%EF%BC%BD%E5%AF%BE%E5%BF%9C-%E5%BE%B9%E5%BA%95%E6%94%BB%E7%95%A5%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-ebook/dp/B01LXSG1G9/ref=pd_sim_351_1?_encoding=UTF8&amp;psc=1&amp;refRID=PC6MK9AHZB6JSXW5VM6F\" rel=\"nofollow noopener\" target=\"_blank\">徹底攻略Java SE 8 Gold問題集［1Z0-809］対応 徹底攻略シリーズ</a>（以後、黒本と記述）</dt>\n<br>\n<dd>定番の問題集なので購入しましたが、全体的に難易度が低めの門題が多いです。ただ本の最後の総仕上げ問題は本番試験と難易度が近く、本番でも同じ問題が多数出題されました。</dd>\n<br>\n<dt>\n<a href=\"https://www.amazon.co.jp/dp/B0191U2H8C/ref=dp-kindle-redirect?_encoding=UTF8&amp;btkr=1\" rel=\"nofollow noopener\" target=\"_blank\">OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide: Exam 1Z0-809</a>（以後、 Study Guideと記述）</dt>\n<br>\n<dd>上記の黒本だけでは不安になり購入しました。<a href=\"https://www.amazon.co.jp/dp/B01J1LPKJY/ref=dp-kindle-redirect?_encoding=UTF8&amp;btkr=1\" rel=\"nofollow noopener\" target=\"_blank\">紫本</a>と同じような構成で、参考書と問題集が１つになっています。紫本ではなくStudy Guideにしたのは英語力を身につけたかったからです。本の説明に「Complete, trusted preparation for the Java Programmer II exam」とある通り問題数も多くかなり充実した内容でした。難易度は本番よりも高めです。この本を２周して問題の正答率が90%に達していれば絶対合格できます。ただ量が多いので２周するのはかなり根気が必要です（自分は1周で断念しました）。<br>あと本がでかくて、電車の中では絶対読めません。Kindleで購入したほうがいいです。</dd>\n\n<h2>\n<span id=\"試験本番\" class=\"fragment\"></span><a href=\"#%E8%A9%A6%E9%A8%93%E6%9C%AC%E7%95%AA\"><i class=\"fa fa-link\"></i></a>試験本番</h2>\n\n<p>問題数は85問、試験時間は150分でしたが、時間が足りないということはなく、120分ほどで解き終わりました。<br>\n難易度は黒本の総仕上げ問題よりも少し高めです。<br>\nJavaプログラマSE 6の時のような重箱の隅をつつくような問題は少なく、<br>\nJava8の新規機能がメインで、ストリームAIP、ラムダ式、メソッド参照に関しては単体での出題 or 他と絡めての出題で１／４を占めていました。Study Guideではパラレルストリームの難しめの問題が多かったのですが、本番は簡単な問題が２問程度でした。OptionalとDateTimeAPIについては意外と少なく、１、２問程度でした。<br>\nJDBCは例外処理と絡めた問題もあり５～７問と意外と多めでした。<br>\nNew IOについては絶対パスと相対パスでの挙動の違いをしっかり理解する必要があります。</p>\n\n<h2>\n<span id=\"感想\" class=\"fragment\"></span><a href=\"#%E6%84%9F%E6%83%B3\"><i class=\"fa fa-link\"></i></a>感想</h2>\n\n<p>点数的にはギリギリ合格でした。。。<br>\n問題集に取り組むときに、正解を導き出せるだけでなく、一つ一つの選択肢に対して背景を理解する必要があったと感じています。しかしながらJava8の主要新な機能について一通り整理できました、業務で使う分には十分な理解だと思います。<br>\n試験対策は問題集のみでしたが、試験後に<a href=\"http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&amp;get_params=p_exam_id:1Z0-809&amp;p_org_id=70&amp;lang=JA\" rel=\"nofollow noopener\" target=\"_blank\">オラクルの公式サイト</a>を見てみると、試験内容＞チェックリスト＞【トピック】の１つ１つに対して漏れなく問題が出題されてたことが分かったので、試験前に見とけばよかったなぁと感じています。あと英語の勉強もかねて黒本とStudy Guideを選びましたが、他の方のブログを見た感じだと、黒本と紫本を買ってそれぞれ２周すれば合格できるような気がしました。</p>\n</dl>","body":"先日[Java SE 8 Programmer II(Java SE8 Gold)](http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&get_params=p_exam_id:1Z0-809&p_org_id=70)に合格しました。\nそのために自分がやったことと受験した感想をメモします。\n\n▼試験結果\n勉強期間　：3カ月\n得点率　　： 73％（ボーダー65％）　結構ギリギリ(>o<)!\n\n## 自分とJavaの関係\n* 仕事でJava開発は5年\n* 保有資格は[Java SE 8 Silver](https://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&get_params=p_exam_id:1Z0-808&p_org_id=70&lang=JA)と [WebコンポーネントデベロッパEE 5](http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=458&p_org_id=70&lang=JA&get_params=p_track_id:JEE5WCD)と [JavaプログラマSE 6](http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&get_params=p_exam_id:1Z0-851&p_org_id=70&lang=JA)\n\n## きっかけ\nJava8で新機能が多く追加されたので、それらを習得するために受験しました。　\n最初は[Upgrade to Java SE 8 OCP](http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&get_params=p_exam_id:1Z0-813&p_org_id=70&lang=JA)の受験を考えていましたが、\n参考書がないのと情報量が少なかったので、こちらを受けることにしました。\n\n## 買った参考書と感想\n<dl><dt>[徹底攻略Java SE 8 Gold問題集［1Z0-809］対応 徹底攻略シリーズ](https://www.amazon.co.jp/%E5%BE%B9%E5%BA%95%E6%94%BB%E7%95%A5Java-SE-8-Gold%E5%95%8F%E9%A1%8C%E9%9B%86%EF%BC%BB1Z0-809%EF%BC%BD%E5%AF%BE%E5%BF%9C-%E5%BE%B9%E5%BA%95%E6%94%BB%E7%95%A5%E3%82%B7%E3%83%AA%E3%83%BC%E3%82%BA-ebook/dp/B01LXSG1G9/ref=pd_sim_351_1?_encoding=UTF8&psc=1&refRID=PC6MK9AHZB6JSXW5VM6F)（以後、黒本と記述）</dt>\n<dd>定番の問題集なので購入しましたが、全体的に難易度が低めの門題が多いです。ただ本の最後の総仕上げ問題は本番試験と難易度が近く、本番でも同じ問題が多数出題されました。</dd>\n<dt>[OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide: Exam 1Z0-809](https://www.amazon.co.jp/dp/B0191U2H8C/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1)（以後、 Study Guideと記述）</dt>\n<dd>上記の黒本だけでは不安になり購入しました。[紫本](https://www.amazon.co.jp/dp/B01J1LPKJY/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1)と同じような構成で、参考書と問題集が１つになっています。紫本ではなくStudy Guideにしたのは英語力を身につけたかったからです。本の説明に「Complete, trusted preparation for the Java Programmer II exam」とある通り問題数も多くかなり充実した内容でした。難易度は本番よりも高めです。この本を２周して問題の正答率が90%に達していれば絶対合格できます。ただ量が多いので２周するのはかなり根気が必要です（自分は1周で断念しました）。<br>あと本がでかくて、電車の中では絶対読めません。Kindleで購入したほうがいいです。</dd>\n\n## 試験本番\n問題数は85問、試験時間は150分でしたが、時間が足りないということはなく、120分ほどで解き終わりました。\n難易度は黒本の総仕上げ問題よりも少し高めです。\nJavaプログラマSE 6の時のような重箱の隅をつつくような問題は少なく、\nJava8の新規機能がメインで、ストリームAIP、ラムダ式、メソッド参照に関しては単体での出題 or 他と絡めての出題で１／４を占めていました。Study Guideではパラレルストリームの難しめの問題が多かったのですが、本番は簡単な問題が２問程度でした。OptionalとDateTimeAPIについては意外と少なく、１、２問程度でした。\nJDBCは例外処理と絡めた問題もあり５～７問と意外と多めでした。\nNew IOについては絶対パスと相対パスでの挙動の違いをしっかり理解する必要があります。\n\n## 感想\n点数的にはギリギリ合格でした。。。\n問題集に取り組むときに、正解を導き出せるだけでなく、一つ一つの選択肢に対して背景を理解する必要があったと感じています。しかしながらJava8の主要新な機能について一通り整理できました、業務で使う分には十分な理解だと思います。\n試験対策は問題集のみでしたが、試験後に[オラクルの公式サイト](http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getpage?page_id=5001&get_params=p_exam_id:1Z0-809&p_org_id=70&lang=JA)を見てみると、試験内容＞チェックリスト＞【トピック】の１つ１つに対して漏れなく問題が出題されてたことが分かったので、試験前に見とけばよかったなぁと感じています。あと英語の勉強もかねて黒本とStudy Guideを選びましたが、他の方のブログを見た感じだと、黒本と紫本を買ってそれぞれ２周すれば合格できるような気がしました。\n","comments_count":0,"created_at":"2017-03-12T17:52:21+09:00","likes_count":17,"reactions_count":0},"relations":[{"node":{"fields":{"slug":"/4bf6ffd5-8640-508e-ab47-1a55df05d72e/","title":"Declarative PipelineでJenkinsfileを書いてみた(Checkstyle,Findbugs,PMD,CPDとか)","date":"2017-04-07T02:38:55+09:00","excerpt":"GradleのJavaアプリをJenkinsで１人CIするためのJenkinsfileを書いてみた。Githubにプッシュ時に、AWS上のJenkinsのパイプラインジョブが動いて、テストが成功したら同じくAWS上のTomcatにデプロイす...","tags":["Java","Jenkins","CI","gradle","Pipeline","Qiita"],"keywords":["Java"],"thumbnail":""},"id":"4bf6ffd5-8640-508e-ab47-1a55df05d72e","title":"Declarative PipelineでJenkinsfileを書いてみた(Checkstyle,Findbugs,PMD,CPDとか)","rendered_body":"<p>GradleのJavaアプリをJenkinsで１人CIするためのJenkinsfileを書いてみた。<br>\nGithubにプッシュ時に、AWS上のJenkinsのパイプラインジョブが動いて、テストが成功したら同じくAWS上のTomcatにデプロイするみたいな感じで使ってます。</p>\n\n<h1>\n<span id=\"declarative-pipeline\" class=\"fragment\"></span><a href=\"#declarative-pipeline\"><i class=\"fa fa-link\"></i></a>Declarative Pipeline</h1>\n\n<p>いままではJenkinsfileを</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>node {\n  ....\n}\n</pre></div></div>\n\n<p>のように書いてましたが、<a href=\"https://jenkins.io/doc/book/pipeline/syntax/\" rel=\"nofollow noopener\" target=\"_blank\">Jenkinsの公式サイト</a>を見ると<br>\nこれはScripted Pipelinesの記法であり、<br>\nPipeline Pluginのバージョン2.5移行からは</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>pipeline {\n  ....  \n}\n</pre></div></div>\n\n<p>のように書くDeclarative Pipelineという記法が導入されて、<br>\nそっちのほうがシンプルでわかりやすく書けるよ!ということだったので書き直してみました。<br>\n確かにすっきりしたし（特に最後のメールおくるとことか、デプロイするとことか）、<br>\nいざとなったら従来のScripted Pipelinesもミックスできるのでいい感じです。</p>\n\n<h1>\n<span id=\"追加したプラグイン\" class=\"fragment\"></span><a href=\"#%E8%BF%BD%E5%8A%A0%E3%81%97%E3%81%9F%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3\"><i class=\"fa fa-link\"></i></a>追加したプラグイン</h1>\n\n<p>Jenkins初期設定時のSuggested Pluginに入っていないもの</p>\n\n<ul>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Checkstyle+Plugin;jsessionid=E9D4FA5064ACAE1CED7B19928DE0788F\" rel=\"nofollow noopener\" target=\"_blank\">Checkstyle Plugin</a>（v3.47） - Checkstyeの結果収集用</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/FindBugs+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">FindBugs Plugin</a>（v4.69） - Findbugsのレポート生成用 </li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/PMD+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">PMD Plugin</a>（v3.46） - PMDのレポート生成用</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/DRY+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">DRY Plugin</a>（v2.46） - CPD(重複コードチェック)のレポート生成用</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Step+Counter+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Step Counter Plugin</a>（v2.0.0） - ソースコードのステップ数を集計してくれる</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Task+Scanner+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Task Scanner Plugin</a>（v4.50） - ソースコード中のTODOとかを一覧化してくれる</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Javadoc+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Javadoc Plugin</a>（v1.4） - JavaDoc生成用</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Warnings+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">Warnings Plugin</a>（v4.60） - ジョブ実行時の警告メッセージを収集してくれる</li>\n<li>\n<a href=\"https://wiki.jenkins-ci.org/display/JENKINS/JaCoCo+Plugin\" rel=\"nofollow noopener\" target=\"_blank\">JaCoCo Plugin</a>（v2.2.0） - テストカバレッジのレポート生成用</li>\n</ul>\n\n<h1>\n<span id=\"jenkinsfile\" class=\"fragment\"></span><a href=\"#jenkinsfile\"><i class=\"fa fa-link\"></i></a>Jenkinsfile</h1>\n\n<p>GithubからWebhookでJenkinsのパイプラインジョブを実行する。<br>\nパイプラインジョブではGithubのJenkinsfileを使う。<br>\nジョブの流れは下記。デプロイは静的コード解析とテストが成功したときだけ実行する。<br>\n<a href=\"https://camo.qiitausercontent.com/a055f84cfb5b829f162a94d38542e6ab990a5199/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35366338653132642d323637622d613633372d323234652d6663386362333437346466612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a055f84cfb5b829f162a94d38542e6ab990a5199/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f35366338653132642d323637622d613633372d323234652d6663386362333437346466612e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/56c8e12d-267b-a637-224e-fc8cb3474dfa.png\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"groovy\">\n<div class=\"code-lang\"><span class=\"bold\">Jenkinsfile</span></div>\n<div class=\"highlight\"><pre><span class=\"n\">pipeline</span> <span class=\"o\">{</span>\n    <span class=\"n\">agent</span> <span class=\"n\">any</span>\n    <span class=\"c1\">// 定数や変数を定義する</span>\n    <span class=\"n\">environment</span> <span class=\"o\">{</span>\n        <span class=\"n\">reportDir</span> <span class=\"o\">=</span> <span class=\"s1\">'build/reports'</span>\n        <span class=\"n\">javaDir</span> <span class=\"o\">=</span> <span class=\"s1\">'src/main/java'</span>\n        <span class=\"n\">resourcesDir</span> <span class=\"o\">=</span> <span class=\"s1\">'src/main/resources'</span>\n        <span class=\"n\">testReportDir</span> <span class=\"o\">=</span> <span class=\"s1\">'build/test-results/test'</span>\n        <span class=\"n\">jacocoReportDir</span> <span class=\"o\">=</span> <span class=\"s1\">'build/jacoco'</span> \n        <span class=\"n\">javadocDir</span> <span class=\"o\">=</span> <span class=\"s1\">'build/docs/javadoc'</span>\n        <span class=\"n\">libsDir</span> <span class=\"o\">=</span> <span class=\"s1\">'build/libs'</span>\n        <span class=\"n\">appName</span> <span class=\"o\">=</span> <span class=\"s1\">'SampleApp'</span>\n        <span class=\"n\">appVersion</span> <span class=\"o\">=</span> <span class=\"s1\">'1.0.0'</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// stagesブロック中に一つ以上のstageを定義する</span>\n    <span class=\"n\">stages</span> <span class=\"o\">{</span>\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'事前準備'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 実際の処理はstepsブロック中に定義する</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"n\">deleteDir</span><span class=\"o\">()</span>\n\n                <span class=\"c1\">// このJobをトリガーしてきたGithubのプロジェクトをチェックアウト</span>\n                <span class=\"n\">checkout</span> <span class=\"n\">scm</span>\n\n                <span class=\"c1\">// ジョブ失敗の原因調査用にJenkinsfileとbuild.gradleは最初に保存する</span>\n                <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"Jenkinsfile\"</span>\n                <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"build.gradle\"</span>\n\n                <span class=\"c1\">// scriptブロックを使うと従来のScripted Pipelinesの記法も使える</span>\n                <span class=\"n\">script</span> <span class=\"o\">{</span>\n                    <span class=\"c1\">// Permission deniedで怒られないために実行権限を付与する</span>\n                    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">isUnix</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                        <span class=\"n\">sh</span> <span class=\"s1\">'chmod +x gradlew'</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">}</span>\n                <span class=\"n\">gradlew</span> <span class=\"s1\">'clean'</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'コンパイル'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"n\">gradlew</span> <span class=\"s1\">'classes testClasses'</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"c1\">// postブロックでstepsブロックの後に実行される処理が定義できる</span>\n            <span class=\"n\">post</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// alwaysブロックはstepsブロックの処理が失敗しても成功しても必ず実行される</span>\n                <span class=\"n\">always</span> <span class=\"o\">{</span>\n\n                    <span class=\"c1\">// JavaDoc生成時に実行するとJavaDocの警告も含まれてしまうので</span>\n                    <span class=\"c1\">// Javaコンパイル時の警告はコンパイル直後に収集する</span>\n                    <span class=\"n\">step</span><span class=\"o\">([</span>\n\n                        <span class=\"c1\">// プラグインを実行するときのクラス指定は完全修飾名でなくてもOK</span>\n                        <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'WarningsPublisher'</span><span class=\"o\">,</span>\n\n                        <span class=\"c1\">// Job実行時のコンソールから警告を収集する場合はconsoleParsers、</span>\n                        <span class=\"c1\">// pmd.xmlなどのファイルから収集する場合はparserConfigurationsを指定する。</span>\n                        <span class=\"c1\">// なおparserConfigurationsの場合はparserNameのほかにpattern(集計対象ファイルのパス)も指定が必要</span>\n                        <span class=\"c1\">// パーサ名は下記プロパティファイルに定義されているものを使う</span>\n                        <span class=\"c1\">// https://github.com/jenkinsci/warnings-plugin/blob/master/src/main/resources/hudson/plugins/warnings/parser/Messages.properties</span>\n                        <span class=\"nl\">consoleParsers:</span> <span class=\"o\">[</span>\n                            <span class=\"o\">[</span><span class=\"nl\">parserName:</span> <span class=\"s1\">'Java Compiler (javac)'</span><span class=\"o\">],</span>\n                        <span class=\"o\">],</span>\n                        <span class=\"nl\">canComputeNew:</span> <span class=\"kc\">false</span><span class=\"o\">,</span>\n                        <span class=\"nl\">canResolveRelativesPaths:</span> <span class=\"kc\">false</span><span class=\"o\">,</span>\n                        <span class=\"nl\">usePreviousBuildAsReference:</span> <span class=\"kc\">true</span>\n                    <span class=\"o\">])</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'静的コード解析'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// 並列処理の場合はparallelメソッドを使う</span>\n                <span class=\"n\">parallel</span><span class=\"o\">(</span>\n                    <span class=\"s1\">'静的コード解析'</span> <span class=\"o\">:</span> <span class=\"o\">{</span>\n                        <span class=\"n\">gradlew</span> <span class=\"s1\">'check -x test'</span>\n\n                        <span class=\"c1\">// dirメソッドでカレントディレクトリを指定できる</span>\n                        <span class=\"n\">dir</span><span class=\"o\">(</span><span class=\"n\">reportDir</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                            <span class=\"n\">step</span><span class=\"o\">([</span>\n                                <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'CheckStylePublisher'</span><span class=\"o\">,</span>\n                                <span class=\"nl\">pattern:</span> <span class=\"s2\">\"checkstyle/*.xml\"</span>\n                            <span class=\"o\">])</span>\n                            <span class=\"n\">step</span><span class=\"o\">([</span>\n                                <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'FindBugsPublisher'</span><span class=\"o\">,</span>\n                                <span class=\"nl\">pattern:</span> <span class=\"s2\">\"findbugs/*.xml\"</span>\n                            <span class=\"o\">])</span>\n                            <span class=\"n\">step</span><span class=\"o\">([</span>\n                                <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'PmdPublisher'</span><span class=\"o\">,</span>\n                                <span class=\"nl\">pattern:</span> <span class=\"s2\">\"pmd/*.xml\"</span>\n                            <span class=\"o\">])</span>\n                            <span class=\"n\">step</span><span class=\"o\">([</span>\n                                <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'DryPublisher'</span><span class=\"o\">,</span>\n                                <span class=\"nl\">pattern:</span> <span class=\"s2\">\"cpd/*.xml\"</span>\n                            <span class=\"o\">])</span>\n\n                            <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"checkstyle/*.xml\"</span>\n                            <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"findbugs/*.xml\"</span>\n                            <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"pmd/*.xml\"</span>\n                            <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"cpd/*.xml\"</span>\n                        <span class=\"o\">}</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"s1\">'ステップカウント'</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n                        <span class=\"c1\">// レポート作成</span>\n                        <span class=\"c1\">// outputFileとoutputFormatを指定するとエクセルファイルも作成してくれる</span>\n                        <span class=\"n\">stepcounter</span> <span class=\"nl\">outputFile:</span> <span class=\"s1\">'stepcount.xls'</span><span class=\"o\">,</span> <span class=\"nl\">outputFormat:</span> <span class=\"s1\">'excel'</span><span class=\"o\">,</span> <span class=\"nl\">settings:</span> <span class=\"o\">[</span>\n                            <span class=\"o\">[</span><span class=\"nl\">key:</span><span class=\"s1\">'Java'</span><span class=\"o\">,</span> <span class=\"nl\">filePattern:</span> <span class=\"s2\">\"${javaDir}/**/*.java\"</span><span class=\"o\">],</span>\n                            <span class=\"o\">[</span><span class=\"nl\">key:</span><span class=\"s1\">'SQL'</span><span class=\"o\">,</span> <span class=\"nl\">filePattern:</span> <span class=\"s2\">\"${resourcesDir}/**/*.sql\"</span><span class=\"o\">],</span>\n                            <span class=\"o\">[</span><span class=\"nl\">key:</span><span class=\"s1\">'HTML'</span><span class=\"o\">,</span> <span class=\"nl\">filePattern:</span> <span class=\"s2\">\"${resourcesDir}/**/*.html\"</span><span class=\"o\">],</span>\n                            <span class=\"o\">[</span><span class=\"nl\">key:</span><span class=\"s1\">'JS'</span><span class=\"o\">,</span> <span class=\"nl\">filePattern:</span> <span class=\"s2\">\"${resourcesDir}/**/*.js\"</span><span class=\"o\">],</span>\n                            <span class=\"o\">[</span><span class=\"nl\">key:</span><span class=\"s1\">'CSS'</span><span class=\"o\">,</span> <span class=\"nl\">filePattern:</span> <span class=\"s2\">\"${resourcesDir}/**/*.css\"</span><span class=\"o\">]</span>\n                        <span class=\"o\">]</span>\n                        <span class=\"c1\">// 一応エクセルファイルも成果物として保存する</span>\n                        <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"stepcount.xls\"</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"s1\">'タスクスキャン'</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n                        <span class=\"n\">step</span><span class=\"o\">([</span>\n                            <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'TasksPublisher'</span><span class=\"o\">,</span>\n                            <span class=\"nl\">pattern:</span> <span class=\"s1\">'./**'</span><span class=\"o\">,</span>\n                            <span class=\"c1\">// 集計対象を検索するときに大文字小文字を区別するか</span>\n                            <span class=\"nl\">ignoreCase:</span> <span class=\"kc\">true</span><span class=\"o\">,</span>\n                            <span class=\"c1\">// 優先度別に集計対象の文字列を指定できる</span>\n                            <span class=\"c1\">// 複数指定する場合はカンマ区切りの文字列を指定する</span>\n                            <span class=\"nl\">high:</span> <span class=\"s1\">'System.out.System.err'</span><span class=\"o\">,</span>\n                            <span class=\"nl\">normal:</span> <span class=\"s1\">'TODO,FIXME,XXX'</span><span class=\"o\">,</span>\n                        <span class=\"o\">])</span>\n                    <span class=\"o\">},</span>\n                    <span class=\"s1\">'JavaDoc'</span><span class=\"o\">:</span> <span class=\"o\">{</span>\n                        <span class=\"n\">gradlew</span> <span class=\"s1\">'javadoc -x classes'</span>\n                        <span class=\"n\">step</span><span class=\"o\">([</span>\n                            <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'JavadocArchiver'</span><span class=\"o\">,</span>\n                            <span class=\"c1\">// Javadocのindex.htmlがあるフォルダのパスを指定する</span>\n                            <span class=\"nl\">javadocDir:</span> <span class=\"s2\">\"${javadocDir}\"</span><span class=\"o\">,</span>\n                            <span class=\"nl\">keepAll:</span> <span class=\"kc\">true</span>\n                        <span class=\"o\">])</span>\n                    <span class=\"o\">}</span>\n                <span class=\"o\">)</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"n\">post</span> <span class=\"o\">{</span>\n                <span class=\"n\">always</span> <span class=\"o\">{</span>\n                   <span class=\"c1\">// JavaDocの警告を収集</span>\n                    <span class=\"n\">step</span><span class=\"o\">([</span>\n                        <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'WarningsPublisher'</span><span class=\"o\">,</span>\n                        <span class=\"nl\">consoleParsers:</span> <span class=\"o\">[</span>\n                            <span class=\"o\">[</span><span class=\"nl\">parserName:</span> <span class=\"s1\">'JavaDoc Tool'</span><span class=\"o\">]</span>\n                        <span class=\"o\">],</span>\n                        <span class=\"nl\">canComputeNew:</span> <span class=\"kc\">false</span><span class=\"o\">,</span>\n                        <span class=\"nl\">canResolveRelativesPaths:</span> <span class=\"kc\">false</span><span class=\"o\">,</span>\n                        <span class=\"nl\">usePreviousBuildAsReference:</span> <span class=\"kc\">true</span>\n                    <span class=\"o\">])</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'テスト'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"n\">gradlew</span> <span class=\"s1\">'test jacocoTestReport -x classes -x testClasses'</span>\n\n                <span class=\"n\">junit</span> <span class=\"s2\">\"${testReportDir}/*.xml\"</span>\n                <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"${testReportDir}/*.xml\"</span>\n\n                <span class=\"c1\">// カバレッジレポートを生成（テストクラスを除外）</span>\n                <span class=\"n\">step</span><span class=\"o\">([</span>\n                    <span class=\"n\">$class</span><span class=\"o\">:</span> <span class=\"s1\">'JacocoPublisher'</span><span class=\"o\">,</span>\n                    <span class=\"nl\">execPattern:</span> <span class=\"s2\">\"${jacocoReportDir}/*.exec\"</span><span class=\"o\">,</span>\n                    <span class=\"nl\">exclusionPattern:</span> <span class=\"s1\">'**/*Test.class'</span>\n                <span class=\"o\">])</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">stage</span><span class=\"o\">(</span><span class=\"s1\">'デプロイ'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// whenブロックでstageを実行する条件を指定できる</span>\n            <span class=\"n\">when</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// 静的コード解析とテスト失敗時はデプロイしない</span>\n                <span class=\"n\">expression</span> <span class=\"o\">{</span><span class=\"n\">currentBuild</span><span class=\"o\">.</span><span class=\"na\">currentResult</span> <span class=\"o\">==</span> <span class=\"s1\">'SUCCESS'</span><span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"n\">steps</span> <span class=\"o\">{</span>\n                <span class=\"n\">gradlew</span> <span class=\"s1\">'jar'</span>\n                <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"${libsDir}/${appName}-${appVersion}.jar\"</span>\n                <span class=\"n\">gradlew</span> <span class=\"s1\">'war'</span>\n                <span class=\"n\">archiveArtifacts</span> <span class=\"s2\">\"${libsDir}/${appName}-${appVersion}.war\"</span>\n                <span class=\"n\">deploy</span> <span class=\"nl\">warDir:</span> <span class=\"n\">libsDir</span><span class=\"o\">,</span> <span class=\"nl\">appName:</span> <span class=\"n\">appName</span><span class=\"o\">,</span> <span class=\"nl\">appVersion:</span> <span class=\"n\">appVersion</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// stagesブロックと同じレベルにpostブロックを定義すると</span>\n    <span class=\"c1\">// 全てのstage処理が終わった後の処理の定義が可能    </span>\n    <span class=\"n\">post</span> <span class=\"o\">{</span>\n        <span class=\"n\">always</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// 最後にワークスペースの中身を削除</span>\n            <span class=\"n\">deleteDir</span><span class=\"o\">()</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 連続で成功しているとき以外は自分宛にメールを送信</span>\n\n        <span class=\"c1\">// 結果が前回と変わった時</span>\n        <span class=\"n\">changed</span> <span class=\"o\">{</span>\n            <span class=\"n\">sendMail</span><span class=\"o\">(</span><span class=\"s2\">\"${currentBuild.previousBuild.result} =&gt; ${currentBuild.currentResult}\"</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 失敗した時</span>\n        <span class=\"n\">failure</span> <span class=\"o\">{</span>\n            <span class=\"n\">sendMail</span><span class=\"o\">(</span><span class=\"n\">currentBuild</span><span class=\"o\">.</span><span class=\"na\">currentResult</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n        <span class=\"c1\">// 不安定な時（主にテスト失敗時）</span>\n        <span class=\"n\">unstable</span> <span class=\"o\">{</span>\n            <span class=\"n\">sendMail</span><span class=\"o\">(</span><span class=\"n\">currentBuild</span><span class=\"o\">.</span><span class=\"na\">currentResult</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n\n<span class=\"c1\">// Gradlewコマンドを実行する</span>\n<span class=\"kt\">def</span> <span class=\"nf\">gradlew</span><span class=\"o\">(</span><span class=\"n\">command</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">isUnix</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"n\">sh</span> <span class=\"s2\">\"./gradlew ${command} --stacktrace\"</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n        <span class=\"n\">bat</span> <span class=\"s2\">\"./gradlew.bat ${command} --stacktrace\"</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// デプロイする</span>\n<span class=\"c1\">// args.warDir warの格納ディレクトリ </span>\n<span class=\"c1\">// args.appName アプリ名</span>\n<span class=\"c1\">// args.appVersion アプリのバージョン</span>\n<span class=\"kt\">def</span> <span class=\"nf\">deploy</span><span class=\"o\">(</span><span class=\"n\">Map</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 秘密鍵のパス ※Tomcatサーバにファイル転送するので事前にJenkinsサーバのどこかに秘密鍵を格納しておく必要がある</span>\n    <span class=\"kt\">def</span> <span class=\"n\">keyDir</span> <span class=\"o\">=</span> <span class=\"s1\">'/var/lib/jenkins/.ssh/xxx'</span>\n    <span class=\"c1\">// Tomcatサーバのアドレスとユーザ名</span>\n    <span class=\"kt\">def</span> <span class=\"n\">webServerAddress</span> <span class=\"o\">=</span> <span class=\"s1\">'ecX-XX-XXX-X-X.xx-xxxx-x.xxxxxxxx'</span>\n    <span class=\"kt\">def</span> <span class=\"n\">webServerUser</span> <span class=\"o\">=</span> <span class=\"s1\">'hoge-user'</span>\n    <span class=\"kt\">def</span> <span class=\"n\">webServer</span> <span class=\"o\">=</span> <span class=\"s2\">\"${webServerUser}@${webServerAddress}\"</span>\n\n    <span class=\"kt\">def</span> <span class=\"n\">srcWar</span> <span class=\"o\">=</span> <span class=\"s2\">\"${args.appName}-${args.appVersion}.war\"</span>\n    <span class=\"kt\">def</span> <span class=\"n\">destWar</span> <span class=\"o\">=</span> <span class=\"s2\">\"${args.appName}.war\"</span>\n\n    <span class=\"c1\">// ファイル転送してTomcatのwebappsにwarを配置する</span>\n    <span class=\"n\">sh</span> <span class=\"s2\">\"sudo -S scp -i ${keyDir} ./${args.warDir}/${srcWar} ${webServer}:/home/ec2-user\"</span>\n    <span class=\"n\">sh</span> <span class=\"s2\">\"sudo -S ssh -i ${keyDir} ${webServer} \\\"sudo cp /home/ec2-user/${srcWar} /usr/share/tomcat8/webapps/${destWar}\\\"\"</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// メールをGmailに送信する</span>\n<span class=\"kt\">def</span> <span class=\"nf\">sendMail</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">mail</span> <span class=\"nl\">to:</span> <span class=\"s2\">\"xxxxxxxx@gmail.com\"</span><span class=\"o\">,</span>\n        <span class=\"nl\">subject:</span> <span class=\"s2\">\"${env.JOB_NAME} #${env.BUILD_NUMBER} [${result}]\"</span><span class=\"o\">,</span>\n        <span class=\"nl\">body:</span> <span class=\"s2\">\"Build URL: ${env.BUILD_URL}.\\n\\n\"</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<h1>\n<span id=\"躓いたこと\" class=\"fragment\"></span><a href=\"#%E8%BA%93%E3%81%84%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>躓いたこと</h1>\n\n<ul>\n<li>各プラグインともChangelogに「パイプライン対応したよ！」とは書いてあるが、\n具体的は書き方は明記していないことが多いので、\n各プラグインのGithubでソースコード（主に「なんちゃらPublisher」クラス）を見ながら、Jenkinsfileを書いた。</li>\n<li>currentBuildオブジェクトの使い方がよくわからなかったが、Jenkinsのパイプラインジョブ &gt; 設定 &gt; Pipeline Syntax &gt; Global Variables Reference に詳しく載っていた。\n<a href=\"https://camo.qiitausercontent.com/dce98ca18e752127b3f57901a65249f540d2193f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30663631366435302d633537662d323335652d633231342d3863386430643139646139372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/dce98ca18e752127b3f57901a65249f540d2193f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f30663631366435302d633537662d323335652d633231342d3863386430643139646139372e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/0f616d50-c57f-235e-c214-8c8d0d19da97.png\"></a>\n</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/f2249e2915cbfd8a261d64823199f32a147bfe7a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61386666326463662d396438352d376334312d316565302d6662346638336562336333632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/f2249e2915cbfd8a261d64823199f32a147bfe7a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f61386666326463662d396438352d376334312d316565302d6662346638336562336333632e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/a8ff2dcf-9d85-7c41-1ee0-fb4f83eb3c3c.png\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/313541fc7e1ffe9781ad27141ed0b9d59400be18/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66363362353066352d373639642d386666322d313930392d6630366165636330373130362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/313541fc7e1ffe9781ad27141ed0b9d59400be18/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f66363362353066352d373639642d386666322d313930392d6630366165636330373130362e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/f63b50f5-769d-8ff2-1909-f06aecc07106.png\"></a></p>\n\n<ul>\n<li>カバレッジレポートはbuild.gradleのjacocoTestReportタスクでカバレッジレポート対象外にしていてもJenkinsのほうではうまく除外されなかったので、Jenkinsfileのほうでも対象外設定をした。</li>\n<li>JenkinsからGmailにメールする場合、Jenkins &gt; Jenkinsの管理 &gt; システムの設定 &gt; E-mail通知で下記のような設定が必要だった。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/a9ab429d39d5959f7d05fe968d1110ccd53738f1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f38356139313162622d303931642d393936622d333663612d6366303336306336353539322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a9ab429d39d5959f7d05fe968d1110ccd53738f1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f38356139313162622d303931642d393936622d333663612d6366303336306336353539322e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/85a911bb-091d-996b-36ca-cf0360c65592.png\"></a></p>\n\n<ul>\n<li>JenkinsからGmailにメールする場合、<a href=\"https://support.google.com/accounts/answer/6010255?hl=ja\" rel=\"nofollow noopener\" target=\"_blank\">安全性の低いアプリがアカウントにアクセスするのを許可する</a>の手順に従って許可を有効にする必要があった。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/2758c73a3bb32139599ba67b88c6ac3e77bae419/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32343738646535352d633338332d396130622d366564622d3934623365383438376666342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2758c73a3bb32139599ba67b88c6ac3e77bae419/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f34393931352f32343738646535352d633338332d396130622d366564622d3934623365383438376666342e706e67\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/49915/2478de55-c383-9a0b-6edb-94b3e8487ff4.png\"></a></p>\n\n<h1>\n<span id=\"buildgradle\" class=\"fragment\"></span><a href=\"#buildgradle\"><i class=\"fa fa-link\"></i></a>build.gradle</h1>\n\n<p>Jenkins自体は、Gradleのコマンドを実行して出力結果をもとにレポートを生成するだけなので、<br>\nGradleのJavaアプリのbuild.gradleで下記処理が実行できるようになっている必要があります。<br>\nまたJenkinsでGradleをインストールしなくていいようにGradleラッパーを作成しておきます。</p>\n\n<ul>\n<li>checkstyle</li>\n<li>findbugs</li>\n<li>pmd</li>\n<li>cpd(重複コードチェック)</li>\n<li>test</li>\n<li>jacocoReport</li>\n<li>jar</li>\n<li>war</li>\n</ul>\n\n<p>例えばこんな</p>\n\n<div class=\"code-frame\" data-lang=\"groovy\">\n<div class=\"code-lang\"><span class=\"bold\">build.gradle</span></div>\n<div class=\"highlight\"><pre><span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'java'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'war'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'checkstyle'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'findbugs'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'pmd'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'jacoco'</span>\n\n<span class=\"n\">ext</span> <span class=\"o\">{</span>\n    <span class=\"n\">appVersion</span> <span class=\"o\">=</span> <span class=\"s1\">'1.0.0'</span>\n    <span class=\"n\">appName</span> <span class=\"o\">=</span> <span class=\"s1\">'SampleApp'</span>\n    <span class=\"n\">javaVersion</span> <span class=\"o\">=</span> <span class=\"mf\">1.8</span>\n    <span class=\"n\">defaultEncoding</span> <span class=\"o\">=</span> <span class=\"s1\">'UTF-8'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">sourceCompatibility</span> <span class=\"o\">=</span> <span class=\"n\">javaVersion</span>\n<span class=\"n\">targetCompatibility</span>  <span class=\"o\">=</span> <span class=\"n\">javaVersion</span>\n<span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"na\">withType</span><span class=\"o\">(</span><span class=\"n\">AbstractCompile</span><span class=\"o\">)*.</span><span class=\"na\">options</span><span class=\"o\">*.</span><span class=\"na\">encoding</span> <span class=\"o\">=</span> <span class=\"n\">defaultEncoding</span>\n<span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"na\">withType</span><span class=\"o\">(</span><span class=\"n\">GroovyCompile</span><span class=\"o\">)*.</span><span class=\"na\">groovyOptions</span><span class=\"o\">*.</span><span class=\"na\">encoding</span> <span class=\"o\">=</span> <span class=\"n\">defaultEncoding</span>\n<span class=\"n\">mainClassName</span> <span class=\"o\">=</span> <span class=\"s1\">'jp.takumon.sapmleapp.App'</span>\n\n<span class=\"n\">repositories</span> <span class=\"o\">{</span>\n    <span class=\"n\">mavenCentral</span><span class=\"o\">()</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">dependencies</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 依存ライブラリを記載 </span>\n\n    <span class=\"n\">compile</span> <span class=\"nl\">group:</span> <span class=\"s1\">'junit'</span><span class=\"o\">,</span> <span class=\"nl\">name:</span> <span class=\"s1\">'junit'</span><span class=\"o\">,</span> <span class=\"nl\">version:</span> <span class=\"s1\">'4.12'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">jar</span> <span class=\"o\">{</span>\n    <span class=\"n\">baseName</span> <span class=\"o\">=</span> <span class=\"n\">appName</span>\n    <span class=\"n\">version</span> <span class=\"o\">=</span>  <span class=\"n\">appVersion</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">war</span> <span class=\"o\">{</span>\n    <span class=\"n\">baseName</span> <span class=\"o\">=</span> <span class=\"n\">appName</span>\n    <span class=\"n\">version</span> <span class=\"o\">=</span>  <span class=\"n\">appVersion</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">checkstyle</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 失敗しても後続の処理を継続させる</span>\n    <span class=\"n\">ignoreFailures</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"n\">sourceSets</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">sourceSets</span><span class=\"o\">.</span><span class=\"na\">main</span><span class=\"o\">]</span>\n    <span class=\"n\">toolVersion</span> <span class=\"o\">=</span> <span class=\"s1\">'7.6.1'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">findbugs</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 失敗しても後続の処理を継続させる</span>\n    <span class=\"n\">ignoreFailures</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"n\">sourceSets</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">sourceSets</span><span class=\"o\">.</span><span class=\"na\">main</span><span class=\"o\">]</span>\n    <span class=\"n\">toolVersion</span> <span class=\"o\">=</span> <span class=\"s2\">\"3.0.1\"</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">pmd</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 失敗しても後続の処理を継続させる</span>\n    <span class=\"n\">ignoreFailures</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"n\">sourceSets</span> <span class=\"o\">=</span> <span class=\"o\">[</span><span class=\"n\">sourceSets</span><span class=\"o\">.</span><span class=\"na\">main</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">tasks</span><span class=\"o\">.</span><span class=\"na\">withType</span><span class=\"o\">(</span><span class=\"n\">Pmd</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">reports</span> <span class=\"o\">{</span>\n      <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"na\">enabled</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// CPD（重複コードチェック処理）をCheckタスクに追加</span>\n<span class=\"n\">check</span><span class=\"o\">.</span><span class=\"na\">doLast</span> <span class=\"o\">{</span>\n    <span class=\"n\">File</span> <span class=\"n\">outputDir</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">File</span><span class=\"o\">(</span><span class=\"s2\">\"$reportsDir/cpd/\"</span><span class=\"o\">)</span>\n    <span class=\"n\">outputDir</span><span class=\"o\">.</span><span class=\"na\">mkdirs</span><span class=\"o\">()</span>\n\n    <span class=\"n\">ant</span><span class=\"o\">.</span><span class=\"na\">taskdef</span><span class=\"o\">(</span>\n        <span class=\"nl\">name:</span> <span class=\"s1\">'cpd'</span><span class=\"o\">,</span> \n        <span class=\"nl\">classname:</span> <span class=\"s1\">'net.sourceforge.pmd.cpd.CPDTask'</span><span class=\"o\">,</span>\n        <span class=\"nl\">classpath:</span> <span class=\"n\">configurations</span><span class=\"o\">.</span><span class=\"na\">pmd</span><span class=\"o\">.</span><span class=\"na\">asPath</span><span class=\"o\">)</span>\n\n    <span class=\"n\">ant</span><span class=\"o\">.</span><span class=\"na\">cpd</span><span class=\"o\">(</span>\n        <span class=\"nl\">minimumTokenCount:</span> <span class=\"s1\">'100'</span><span class=\"o\">,</span>\n        <span class=\"nl\">format:</span> <span class=\"s1\">'xml'</span><span class=\"o\">,</span>\n        <span class=\"nl\">encoding:</span> <span class=\"n\">defaultEncoding</span><span class=\"o\">,</span>\n        <span class=\"nl\">outputFile:</span> <span class=\"k\">new</span> <span class=\"n\">File</span><span class=\"o\">(</span><span class=\"n\">outputDir</span><span class=\"o\">,</span> <span class=\"s1\">'cpd.xml'</span><span class=\"o\">)</span>\n    <span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">fileset</span><span class=\"o\">(</span><span class=\"nl\">dir:</span> <span class=\"s2\">\"src/main/java\"</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">include</span><span class=\"o\">(</span><span class=\"nl\">name:</span> <span class=\"s1\">'**/*.java'</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">javadoc</span> <span class=\"o\">{</span>\n    <span class=\"n\">failOnError</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n    <span class=\"c1\">// 好みのレベルで</span>\n    <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"na\">memberLevel</span> <span class=\"o\">=</span> <span class=\"n\">JavadocMemberLevel</span><span class=\"o\">.</span><span class=\"na\">PRIVATE</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">test</span> <span class=\"o\">{</span>\n    <span class=\"c1\">// 失敗しても後続の処理を継続させる</span>\n    <span class=\"n\">ignoreFailures</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"n\">reports</span> <span class=\"o\">{</span>\n        <span class=\"n\">junitXml</span><span class=\"o\">.</span><span class=\"na\">enabled</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">jacoco</span> <span class=\"o\">{</span>\n    <span class=\"n\">toolVersion</span> <span class=\"o\">=</span> <span class=\"s1\">'0.7.5.201505241946'</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">jacocoTestReport</span> <span class=\"o\">{</span>\n    <span class=\"n\">reports</span> <span class=\"o\">{</span>\n      <span class=\"n\">xml</span><span class=\"o\">.</span><span class=\"na\">enabled</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// カバレッジレポートからテストクラスを除外</span>\n    <span class=\"n\">afterEvaluate</span> <span class=\"o\">{</span> \n        <span class=\"n\">classDirectories</span> <span class=\"o\">=</span> <span class=\"n\">files</span><span class=\"o\">(</span><span class=\"n\">classDirectories</span><span class=\"o\">.</span><span class=\"na\">files</span><span class=\"o\">.</span><span class=\"na\">collect</span> <span class=\"o\">{</span>\n            <span class=\"n\">fileTree</span><span class=\"o\">(</span><span class=\"nl\">dir:</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"nl\">exclude:</span> <span class=\"o\">[</span><span class=\"s1\">'**/*Test.class'</span><span class=\"o\">])</span> \n        <span class=\"o\">})</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">task</span> <span class=\"nf\">wrapper</span> <span class=\"o\">(</span><span class=\"nl\">type:</span> <span class=\"n\">Wrapper</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">gradleVersion</span> <span class=\"o\">=</span> <span class=\"s1\">'3.4.1'</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>以上。</p>\n","body":"GradleのJavaアプリをJenkinsで１人CIするためのJenkinsfileを書いてみた。\nGithubにプッシュ時に、AWS上のJenkinsのパイプラインジョブが動いて、テストが成功したら同じくAWS上のTomcatにデプロイするみたいな感じで使ってます。\n\n# Declarative Pipeline\nいままではJenkinsfileを\n\n```\nnode {\n  ....\n}\n```\n\nのように書いてましたが、[Jenkinsの公式サイト](https://jenkins.io/doc/book/pipeline/syntax/)を見ると\nこれはScripted Pipelinesの記法であり、\nPipeline Pluginのバージョン2.5移行からは\n\n```\npipeline {\n  ....  \n}\n```\nのように書くDeclarative Pipelineという記法が導入されて、\nそっちのほうがシンプルでわかりやすく書けるよ!ということだったので書き直してみました。\n確かにすっきりしたし（特に最後のメールおくるとことか、デプロイするとことか）、\nいざとなったら従来のScripted Pipelinesもミックスできるのでいい感じです。\n\n# 追加したプラグイン\nJenkins初期設定時のSuggested Pluginに入っていないもの\n\n* [Checkstyle Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Checkstyle+Plugin;jsessionid=E9D4FA5064ACAE1CED7B19928DE0788F)（v3.47） - Checkstyeの結果収集用\n* [FindBugs Plugin](https://wiki.jenkins-ci.org/display/JENKINS/FindBugs+Plugin)（v4.69） - Findbugsのレポート生成用 \n* [PMD Plugin](https://wiki.jenkins-ci.org/display/JENKINS/PMD+Plugin)（v3.46） - PMDのレポート生成用\n* [DRY Plugin](https://wiki.jenkins-ci.org/display/JENKINS/DRY+Plugin)（v2.46） - CPD(重複コードチェック)のレポート生成用\n* [Step Counter Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Step+Counter+Plugin)（v2.0.0） - ソースコードのステップ数を集計してくれる\n* [Task Scanner Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Task+Scanner+Plugin)（v4.50） - ソースコード中のTODOとかを一覧化してくれる\n* [Javadoc Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Javadoc+Plugin)（v1.4） - JavaDoc生成用\n* [Warnings Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Warnings+Plugin)（v4.60） - ジョブ実行時の警告メッセージを収集してくれる\n* [JaCoCo Plugin](https://wiki.jenkins-ci.org/display/JENKINS/JaCoCo+Plugin)（v2.2.0） - テストカバレッジのレポート生成用\n\n\n\n# Jenkinsfile\nGithubからWebhookでJenkinsのパイプラインジョブを実行する。\nパイプラインジョブではGithubのJenkinsfileを使う。\nジョブの流れは下記。デプロイは静的コード解析とテストが成功したときだけ実行する。\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/56c8e12d-267b-a637-224e-fc8cb3474dfa.png)\n\n\n```groovy:Jenkinsfile\npipeline {\n    agent any\n    // 定数や変数を定義する\n    environment {\n        reportDir = 'build/reports'\n        javaDir = 'src/main/java'\n        resourcesDir = 'src/main/resources'\n        testReportDir = 'build/test-results/test'\n        jacocoReportDir = 'build/jacoco' \n        javadocDir = 'build/docs/javadoc'\n        libsDir = 'build/libs'\n        appName = 'SampleApp'\n        appVersion = '1.0.0'\n    }\n    \n    // stagesブロック中に一つ以上のstageを定義する\n    stages {\n        stage('事前準備') {\n            // 実際の処理はstepsブロック中に定義する\n            steps {\n                deleteDir()\n\n                // このJobをトリガーしてきたGithubのプロジェクトをチェックアウト\n                checkout scm\n\n                // ジョブ失敗の原因調査用にJenkinsfileとbuild.gradleは最初に保存する\n                archiveArtifacts \"Jenkinsfile\"\n                archiveArtifacts \"build.gradle\"\n\n                // scriptブロックを使うと従来のScripted Pipelinesの記法も使える\n                script {\n                    // Permission deniedで怒られないために実行権限を付与する\n                    if(isUnix()) {\n                        sh 'chmod +x gradlew'\n                    }\n                }\n                gradlew 'clean'\n            }\n        }\n        \n        stage('コンパイル') {\n            steps {\n                gradlew 'classes testClasses'\n            }\n            \n            // postブロックでstepsブロックの後に実行される処理が定義できる\n            post {\n                // alwaysブロックはstepsブロックの処理が失敗しても成功しても必ず実行される\n                always {\n\n                    // JavaDoc生成時に実行するとJavaDocの警告も含まれてしまうので\n                    // Javaコンパイル時の警告はコンパイル直後に収集する\n                    step([\n\n                        // プラグインを実行するときのクラス指定は完全修飾名でなくてもOK\n                        $class: 'WarningsPublisher',\n\n                        // Job実行時のコンソールから警告を収集する場合はconsoleParsers、\n                        // pmd.xmlなどのファイルから収集する場合はparserConfigurationsを指定する。\n                        // なおparserConfigurationsの場合はparserNameのほかにpattern(集計対象ファイルのパス)も指定が必要\n                        // パーサ名は下記プロパティファイルに定義されているものを使う\n                        // https://github.com/jenkinsci/warnings-plugin/blob/master/src/main/resources/hudson/plugins/warnings/parser/Messages.properties\n                        consoleParsers: [\n                            [parserName: 'Java Compiler (javac)'],\n                        ],\n                        canComputeNew: false,\n                        canResolveRelativesPaths: false,\n                        usePreviousBuildAsReference: true\n                    ])\n                }\n            }\n        }\n        \n        stage('静的コード解析') {\n            steps {\n                // 並列処理の場合はparallelメソッドを使う\n                parallel(\n                    '静的コード解析' : {\n                        gradlew 'check -x test'\n\n                        // dirメソッドでカレントディレクトリを指定できる\n                        dir(reportDir) {\n                            step([\n                                $class: 'CheckStylePublisher',\n                                pattern: \"checkstyle/*.xml\"\n                            ])\n                            step([\n                                $class: 'FindBugsPublisher',\n                                pattern: \"findbugs/*.xml\"\n                            ])\n                            step([\n                                $class: 'PmdPublisher',\n                                pattern: \"pmd/*.xml\"\n                            ])\n                            step([\n                                $class: 'DryPublisher',\n                                pattern: \"cpd/*.xml\"\n                            ])\n                \n                            archiveArtifacts \"checkstyle/*.xml\"\n                            archiveArtifacts \"findbugs/*.xml\"\n                            archiveArtifacts \"pmd/*.xml\"\n                            archiveArtifacts \"cpd/*.xml\"\n                        }\n                    },\n                    'ステップカウント': {\n                        // レポート作成\n                        // outputFileとoutputFormatを指定するとエクセルファイルも作成してくれる\n                        stepcounter outputFile: 'stepcount.xls', outputFormat: 'excel', settings: [\n                            [key:'Java', filePattern: \"${javaDir}/**/*.java\"],\n                            [key:'SQL', filePattern: \"${resourcesDir}/**/*.sql\"],\n                            [key:'HTML', filePattern: \"${resourcesDir}/**/*.html\"],\n                            [key:'JS', filePattern: \"${resourcesDir}/**/*.js\"],\n                            [key:'CSS', filePattern: \"${resourcesDir}/**/*.css\"]\n                        ]\n                        // 一応エクセルファイルも成果物として保存する\n                        archiveArtifacts \"stepcount.xls\"\n                    },\n                    'タスクスキャン': {\n                        step([\n                            $class: 'TasksPublisher',\n                            pattern: './**',\n                            // 集計対象を検索するときに大文字小文字を区別するか\n                            ignoreCase: true,\n                            // 優先度別に集計対象の文字列を指定できる\n                            // 複数指定する場合はカンマ区切りの文字列を指定する\n                            high: 'System.out.System.err',\n                            normal: 'TODO,FIXME,XXX',\n                        ])\n                    },\n                    'JavaDoc': {\n                        gradlew 'javadoc -x classes'\n                        step([\n                            $class: 'JavadocArchiver',\n                            // Javadocのindex.htmlがあるフォルダのパスを指定する\n                            javadocDir: \"${javadocDir}\",\n                            keepAll: true\n                        ])\n                    }\n                )\n            }\n            \n            post {\n                always {\n                   // JavaDocの警告を収集\n                    step([\n                        $class: 'WarningsPublisher',\n                        consoleParsers: [\n                            [parserName: 'JavaDoc Tool']\n                        ],\n                        canComputeNew: false,\n                        canResolveRelativesPaths: false,\n                        usePreviousBuildAsReference: true\n                    ])\n                }\n            }\n        }\n        \n\n        stage('テスト') {\n            steps {\n                gradlew 'test jacocoTestReport -x classes -x testClasses'\n                \n                junit \"${testReportDir}/*.xml\"\n                archiveArtifacts \"${testReportDir}/*.xml\"\n\n                // カバレッジレポートを生成（テストクラスを除外）\n                step([\n                    $class: 'JacocoPublisher',\n                    execPattern: \"${jacocoReportDir}/*.exec\",\n                    exclusionPattern: '**/*Test.class'\n                ])\n            }\n        }\n        \n        stage('デプロイ') {\n            // whenブロックでstageを実行する条件を指定できる\n            when {\n                // 静的コード解析とテスト失敗時はデプロイしない\n                expression {currentBuild.currentResult == 'SUCCESS'}\n            }\n            \n            steps {\n                gradlew 'jar'\n                archiveArtifacts \"${libsDir}/${appName}-${appVersion}.jar\"\n                gradlew 'war'\n                archiveArtifacts \"${libsDir}/${appName}-${appVersion}.war\"\n                deploy warDir: libsDir, appName: appName, appVersion: appVersion\n            }\n        }\n    }\n    \n    // stagesブロックと同じレベルにpostブロックを定義すると\n    // 全てのstage処理が終わった後の処理の定義が可能    \n    post {\n        always {\n            // 最後にワークスペースの中身を削除\n            deleteDir()\n        }\n        // 連続で成功しているとき以外は自分宛にメールを送信\n\n        // 結果が前回と変わった時\n        changed {\n            sendMail(\"${currentBuild.previousBuild.result} => ${currentBuild.currentResult}\")\n        }\n        // 失敗した時\n        failure {\n            sendMail(currentBuild.currentResult)\n        }\n        // 不安定な時（主にテスト失敗時）\n        unstable {\n            sendMail(currentBuild.currentResult)\n        }\n    }\n}\n\n\n// Gradlewコマンドを実行する\ndef gradlew(command) {\n    if(isUnix()) {\n        sh \"./gradlew ${command} --stacktrace\"\n    } else {\n        bat \"./gradlew.bat ${command} --stacktrace\"\n    }\n}\n\n// デプロイする\n// args.warDir warの格納ディレクトリ \n// args.appName アプリ名\n// args.appVersion アプリのバージョン\ndef deploy(Map args) {\n    // 秘密鍵のパス ※Tomcatサーバにファイル転送するので事前にJenkinsサーバのどこかに秘密鍵を格納しておく必要がある\n    def keyDir = '/var/lib/jenkins/.ssh/xxx'\n    // Tomcatサーバのアドレスとユーザ名\n    def webServerAddress = 'ecX-XX-XXX-X-X.xx-xxxx-x.xxxxxxxx'\n    def webServerUser = 'hoge-user'\n    def webServer = \"${webServerUser}@${webServerAddress}\"\n    \n    def srcWar = \"${args.appName}-${args.appVersion}.war\"\n    def destWar = \"${args.appName}.war\"\n    \n    // ファイル転送してTomcatのwebappsにwarを配置する\n    sh \"sudo -S scp -i ${keyDir} ./${args.warDir}/${srcWar} ${webServer}:/home/ec2-user\"\n    sh \"sudo -S ssh -i ${keyDir} ${webServer} \\\"sudo cp /home/ec2-user/${srcWar} /usr/share/tomcat8/webapps/${destWar}\\\"\"\n}\n\n// メールをGmailに送信する\ndef sendMail(result) {\n    mail to: \"xxxxxxxx@gmail.com\",\n        subject: \"${env.JOB_NAME} #${env.BUILD_NUMBER} [${result}]\",\n        body: \"Build URL: ${env.BUILD_URL}.\\n\\n\"\n}\n```\n\n# 躓いたこと\n* 各プラグインともChangelogに「パイプライン対応したよ！」とは書いてあるが、\n具体的は書き方は明記していないことが多いので、\n各プラグインのGithubでソースコード（主に「なんちゃらPublisher」クラス）を見ながら、Jenkinsfileを書いた。\n* currentBuildオブジェクトの使い方がよくわからなかったが、Jenkinsのパイプラインジョブ > 設定 > Pipeline Syntax > Global Variables Reference に詳しく載っていた。\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/0f616d50-c57f-235e-c214-8c8d0d19da97.png)\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/a8ff2dcf-9d85-7c41-1ee0-fb4f83eb3c3c.png)\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/f63b50f5-769d-8ff2-1909-f06aecc07106.png)\n \n* カバレッジレポートはbuild.gradleのjacocoTestReportタスクでカバレッジレポート対象外にしていてもJenkinsのほうではうまく除外されなかったので、Jenkinsfileのほうでも対象外設定をした。\n* JenkinsからGmailにメールする場合、Jenkins > Jenkinsの管理 > システムの設定 > E-mail通知で下記のような設定が必要だった。\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/85a911bb-091d-996b-36ca-cf0360c65592.png)\n\n* JenkinsからGmailにメールする場合、[安全性の低いアプリがアカウントにアクセスするのを許可する](https://support.google.com/accounts/answer/6010255?hl=ja)の手順に従って許可を有効にする必要があった。\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/49915/2478de55-c383-9a0b-6edb-94b3e8487ff4.png)\n\n# build.gradle\nJenkins自体は、Gradleのコマンドを実行して出力結果をもとにレポートを生成するだけなので、\nGradleのJavaアプリのbuild.gradleで下記処理が実行できるようになっている必要があります。\nまたJenkinsでGradleをインストールしなくていいようにGradleラッパーを作成しておきます。\n\n * checkstyle\n * findbugs\n * pmd\n * cpd(重複コードチェック)\n * test\n * jacocoReport\n * jar\n * war\n\n例えばこんな\n\n```groovy:build.gradle\napply plugin: 'java'\napply plugin: 'war'\napply plugin: 'checkstyle'\napply plugin: 'findbugs'\napply plugin: 'pmd'\napply plugin: 'jacoco'\n\next {\n    appVersion = '1.0.0'\n    appName = 'SampleApp'\n    javaVersion = 1.8\n    defaultEncoding = 'UTF-8'\n}\n\nsourceCompatibility = javaVersion\ntargetCompatibility  = javaVersion\ntasks.withType(AbstractCompile)*.options*.encoding = defaultEncoding\ntasks.withType(GroovyCompile)*.groovyOptions*.encoding = defaultEncoding\nmainClassName = 'jp.takumon.sapmleapp.App'\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    // 依存ライブラリを記載 \n\n    compile group: 'junit', name: 'junit', version: '4.12'\n}\n\njar {\n    baseName = appName\n    version =  appVersion\n}\n\nwar {\n    baseName = appName\n    version =  appVersion\n}\n\ncheckstyle {\n    // 失敗しても後続の処理を継続させる\n    ignoreFailures = true\n    sourceSets = [sourceSets.main]\n    toolVersion = '7.6.1'\n}\n\nfindbugs {\n    // 失敗しても後続の処理を継続させる\n    ignoreFailures = true\n    sourceSets = [sourceSets.main]\n    toolVersion = \"3.0.1\"\n}\n\npmd {\n    // 失敗しても後続の処理を継続させる\n    ignoreFailures = true\n    sourceSets = [sourceSets.main]\n}\n\ntasks.withType(Pmd) {\n    reports {\n      xml.enabled = true\n    }\n}\n\n// CPD（重複コードチェック処理）をCheckタスクに追加\ncheck.doLast {\n    File outputDir = new File(\"$reportsDir/cpd/\")\n    outputDir.mkdirs()\n  \n    ant.taskdef(\n        name: 'cpd', \n        classname: 'net.sourceforge.pmd.cpd.CPDTask',\n        classpath: configurations.pmd.asPath)\n  \n    ant.cpd(\n        minimumTokenCount: '100',\n        format: 'xml',\n        encoding: defaultEncoding,\n        outputFile: new File(outputDir, 'cpd.xml')\n    ) {\n        fileset(dir: \"src/main/java\") {\n            include(name: '**/*.java')\n        }\n    }\n}\n\njavadoc {\n    failOnError = false\n    // 好みのレベルで\n    options.memberLevel = JavadocMemberLevel.PRIVATE\n}\n\ntest {\n    // 失敗しても後続の処理を継続させる\n    ignoreFailures = true\n    reports {\n        junitXml.enabled = true\n    }\n}\n\njacoco {\n    toolVersion = '0.7.5.201505241946'\n}\n\njacocoTestReport {\n    reports {\n      xml.enabled = true\n    }\n    \n    // カバレッジレポートからテストクラスを除外\n    afterEvaluate { \n        classDirectories = files(classDirectories.files.collect {\n            fileTree(dir: it, exclude: ['**/*Test.class']) \n        })\n    }\n}\n\ntask wrapper (type: Wrapper) {\n    gradleVersion = '3.4.1'\n}\n```\n\n\n以上。\n","comments_count":0,"created_at":"2017-04-07T02:38:55+09:00","likes_count":58,"reactions_count":0},"matches":3,"weight":200,"details":[{"weight":100,"keyword":"Java"},{"weight":50,"keyword":"Java"},{"weight":50,"keyword":"Qiita"}],"avgWeight":66.66666666666667,"totalWeight":63,"threshold":16.666666666666668,"isRelated":true},{"node":{"fields":{"slug":"/2018/12/16/","title":"JJUG CCC 2018 Fallに行ってきました","date":"2018-12-16T21:50:00.000+09:00","excerpt":"なにこれJava CCC 2018 Fallに参加してきました。見てきたセッションは以下の通りです。【JJUG基調講演】Javaの未来を考えよう セッション概要#ccc_e1マネーフォワードのアカウントアグリゲーションの現状と課題点について...","tags":["Java","Kotlin","JJUG CCC","イベントレポート"],"keywords":["Java"],"thumbnail":"/thumbnail/2018/jjug-ccc-2018-fall.png"}},"matches":2,"weight":150,"details":[{"weight":100,"keyword":"Java"},{"weight":50,"keyword":"Java"}],"avgWeight":75,"totalWeight":72,"threshold":25,"isRelated":true}]}]}}